/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { AwardRecipient } from "./awardrecipient";
import { Expose, Type } from "class-transformer";

export class Award extends SpeakeasyBase {
  /**
   * Type of award given. See https://github.com/the-blue-alliance/the-blue-alliance/blob/master/consts/award_type.py#L6
   */
  @SpeakeasyMetadata()
  @Expose({ name: "award_type" })
  awardType: number;

  /**
   * The event_key of the event the award was won at.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "event_key" })
  eventKey: string;

  /**
   * The name of the award as provided by FIRST. May vary for the same award type.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name: string;

  /**
   * A list of recipients of the award at the event. May have either a team_key or an awardee, both, or neither (in the case the award wasn't awarded at the event).
   */
  @SpeakeasyMetadata({ elemType: AwardRecipient })
  @Expose({ name: "recipient_list" })
  @Type(() => AwardRecipient)
  recipientList: AwardRecipient[];

  /**
   * The year this award was won.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "year" })
  year: number;
}
