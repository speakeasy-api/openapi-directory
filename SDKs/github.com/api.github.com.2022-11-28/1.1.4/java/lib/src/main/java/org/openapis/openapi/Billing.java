/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi;

import com.fasterxml.jackson.databind.ObjectMapper;
import java.net.http.HttpResponse;
import java.nio.charset.StandardCharsets;
import org.openapis.openapi.utils.HTTPClient;
import org.openapis.openapi.utils.HTTPRequest;
import org.openapis.openapi.utils.JSON;

/**
 * Monitor charges and usage from Actions and Packages.
 */
public class Billing {
	
	private HTTPClient _defaultClient;
	private HTTPClient _securityClient;
	private String _serverUrl;
	private String _language;
	private String _sdkVersion;
	private String _genVersion;

	public Billing(HTTPClient defaultClient, HTTPClient securityClient, String serverUrl, String language, String sdkVersion, String genVersion) {
		this._defaultClient = defaultClient;
		this._securityClient = securityClient;
		this._serverUrl = serverUrl;
		this._language = language;
		this._sdkVersion = sdkVersion;
		this._genVersion = genVersion;
	}

    /**
     * Get GitHub Actions billing for an organization
     * Gets the summary of the free and paid GitHub Actions minutes used.
     * 
     * Paid minutes only apply to workflows in private repositories that use GitHub-hosted runners. Minutes used is listed for each GitHub-hosted runner operating system. Any job re-runs are also included in the usage. The usage returned includes any minute multipliers for macOS and Windows runners, and is rounded up to the nearest whole minute. For more information, see "[Managing billing for GitHub Actions](https://docs.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-actions)".
     * 
     * Access tokens must have the `repo` or `admin:org` scope.
     * https://docs.github.com/rest/reference/billing#get-github-actions-billing-for-an-organization - API method documentation
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.BillingGetGithubActionsBillingOrgResponse billingGetGithubActionsBillingOrg(org.openapis.openapi.models.operations.BillingGetGithubActionsBillingOrgRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.BillingGetGithubActionsBillingOrgPathParams.class, baseUrl, "/orgs/{org}/settings/billing/actions", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.BillingGetGithubActionsBillingOrgResponse res = new org.openapis.openapi.models.operations.BillingGetGithubActionsBillingOrgResponse() {{
            actionsBillingUsage = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ActionsBillingUsage out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ActionsBillingUsage.class);
                res.actionsBillingUsage = out;
            }
        }

        return res;
    }

    /**
     * Get GitHub Actions billing for a user
     * Gets the summary of the free and paid GitHub Actions minutes used.
     * 
     * Paid minutes only apply to workflows in private repositories that use GitHub-hosted runners. Minutes used is listed for each GitHub-hosted runner operating system. Any job re-runs are also included in the usage. The usage returned includes any minute multipliers for macOS and Windows runners, and is rounded up to the nearest whole minute. For more information, see "[Managing billing for GitHub Actions](https://docs.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-actions)".
     * 
     * Access tokens must have the `user` scope.
     * https://docs.github.com/rest/reference/billing#get-github-actions-billing-for-a-user - API method documentation
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.BillingGetGithubActionsBillingUserResponse billingGetGithubActionsBillingUser(org.openapis.openapi.models.operations.BillingGetGithubActionsBillingUserRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.BillingGetGithubActionsBillingUserPathParams.class, baseUrl, "/users/{username}/settings/billing/actions", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.BillingGetGithubActionsBillingUserResponse res = new org.openapis.openapi.models.operations.BillingGetGithubActionsBillingUserResponse() {{
            actionsBillingUsage = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ActionsBillingUsage out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ActionsBillingUsage.class);
                res.actionsBillingUsage = out;
            }
        }

        return res;
    }

    /**
     * Get GitHub Packages billing for an organization
     * Gets the free and paid storage used for GitHub Packages in gigabytes.
     * 
     * Paid minutes only apply to packages stored for private repositories. For more information, see "[Managing billing for GitHub Packages](https://docs.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-packages)."
     * 
     * Access tokens must have the `repo` or `admin:org` scope.
     * https://docs.github.com/rest/reference/billing#get-github-packages-billing-for-an-organization - API method documentation
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.BillingGetGithubPackagesBillingOrgResponse billingGetGithubPackagesBillingOrg(org.openapis.openapi.models.operations.BillingGetGithubPackagesBillingOrgRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.BillingGetGithubPackagesBillingOrgPathParams.class, baseUrl, "/orgs/{org}/settings/billing/packages", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.BillingGetGithubPackagesBillingOrgResponse res = new org.openapis.openapi.models.operations.BillingGetGithubPackagesBillingOrgResponse() {{
            packagesBillingUsage = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.PackagesBillingUsage out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.PackagesBillingUsage.class);
                res.packagesBillingUsage = out;
            }
        }

        return res;
    }

    /**
     * Get GitHub Packages billing for a user
     * Gets the free and paid storage used for GitHub Packages in gigabytes.
     * 
     * Paid minutes only apply to packages stored for private repositories. For more information, see "[Managing billing for GitHub Packages](https://docs.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-packages)."
     * 
     * Access tokens must have the `user` scope.
     * https://docs.github.com/rest/reference/billing#get-github-packages-billing-for-a-user - API method documentation
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.BillingGetGithubPackagesBillingUserResponse billingGetGithubPackagesBillingUser(org.openapis.openapi.models.operations.BillingGetGithubPackagesBillingUserRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.BillingGetGithubPackagesBillingUserPathParams.class, baseUrl, "/users/{username}/settings/billing/packages", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.BillingGetGithubPackagesBillingUserResponse res = new org.openapis.openapi.models.operations.BillingGetGithubPackagesBillingUserResponse() {{
            packagesBillingUsage = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.PackagesBillingUsage out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.PackagesBillingUsage.class);
                res.packagesBillingUsage = out;
            }
        }

        return res;
    }

    /**
     * Get shared storage billing for an organization
     * Gets the estimated paid and estimated total storage used for GitHub Actions and GitHub Packages.
     * 
     * Paid minutes only apply to packages stored for private repositories. For more information, see "[Managing billing for GitHub Packages](https://docs.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-packages)."
     * 
     * Access tokens must have the `repo` or `admin:org` scope.
     * https://docs.github.com/rest/reference/billing#get-shared-storage-billing-for-an-organization - API method documentation
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.BillingGetSharedStorageBillingOrgResponse billingGetSharedStorageBillingOrg(org.openapis.openapi.models.operations.BillingGetSharedStorageBillingOrgRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.BillingGetSharedStorageBillingOrgPathParams.class, baseUrl, "/orgs/{org}/settings/billing/shared-storage", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.BillingGetSharedStorageBillingOrgResponse res = new org.openapis.openapi.models.operations.BillingGetSharedStorageBillingOrgResponse() {{
            combinedBillingUsage = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.CombinedBillingUsage out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.CombinedBillingUsage.class);
                res.combinedBillingUsage = out;
            }
        }

        return res;
    }

    /**
     * Get shared storage billing for a user
     * Gets the estimated paid and estimated total storage used for GitHub Actions and GitHub Packages.
     * 
     * Paid minutes only apply to packages stored for private repositories. For more information, see "[Managing billing for GitHub Packages](https://docs.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-packages)."
     * 
     * Access tokens must have the `user` scope.
     * https://docs.github.com/rest/reference/billing#get-shared-storage-billing-for-a-user - API method documentation
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.BillingGetSharedStorageBillingUserResponse billingGetSharedStorageBillingUser(org.openapis.openapi.models.operations.BillingGetSharedStorageBillingUserRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.BillingGetSharedStorageBillingUserPathParams.class, baseUrl, "/users/{username}/settings/billing/shared-storage", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.BillingGetSharedStorageBillingUserResponse res = new org.openapis.openapi.models.operations.BillingGetSharedStorageBillingUserResponse() {{
            combinedBillingUsage = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.CombinedBillingUsage out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.CombinedBillingUsage.class);
                res.combinedBillingUsage = out;
            }
        }

        return res;
    }
}