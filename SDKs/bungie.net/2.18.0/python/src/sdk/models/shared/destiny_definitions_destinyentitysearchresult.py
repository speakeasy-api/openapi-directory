"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import destiny_definitions_destinyentitysearchresultitem as shared_destiny_definitions_destinyentitysearchresultitem
from ..shared import queries_pagedquery as shared_queries_pagedquery
from typing import Optional


@dataclasses.dataclass
class DestinyDefinitionsDestinyEntitySearchResultResults:
    r"""The items found that are matches/near matches for the searched-for term, sorted by something vaguely resembling \\"relevance\\". Hopefully this will get better in the future."""
    
    has_more: Optional[bool] = dataclasses.field(default=None)  
    query: Optional[shared_queries_pagedquery.QueriesPagedQuery] = dataclasses.field(default=None)  
    replacement_continuation_token: Optional[str] = dataclasses.field(default=None)  
    results: Optional[list[shared_destiny_definitions_destinyentitysearchresultitem.DestinyDefinitionsDestinyEntitySearchResultItem]] = dataclasses.field(default=None)  
    total_results: Optional[int] = dataclasses.field(default=None)  
    use_total_results: Optional[bool] = dataclasses.field(default=None)
    r"""If useTotalResults is true, then totalResults represents an accurate count.
    If False, it does not, and may be estimated/only the size of the current page.
    Either way, you should probably always only trust hasMore.
    This is a long-held historical throwback to when we used to do paging with known total results. Those queries toasted our database, and we were left to hastily alter our endpoints and create backward- compatible shims, of which useTotalResults is one.
    """  
    

@dataclasses.dataclass
class DestinyDefinitionsDestinyEntitySearchResult:
    r"""The results of a search for Destiny content. This will be improved on over time, I've been doing some experimenting to see what might be useful."""
    
    results: Optional[DestinyDefinitionsDestinyEntitySearchResultResults] = dataclasses.field(default=None)
    r"""The items found that are matches/near matches for the searched-for term, sorted by something vaguely resembling \\"relevance\\". Hopefully this will get better in the future."""  
    suggested_words: Optional[list[str]] = dataclasses.field(default=None)
    r"""A list of suggested words that might make for better search results, based on the text searched for."""  
    