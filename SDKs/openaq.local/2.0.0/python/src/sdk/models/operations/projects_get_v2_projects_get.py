"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import httpvalidationerror as shared_httpvalidationerror
from ..shared import openaqprojectsresult as shared_openaqprojectsresult
from enum import Enum
from typing import Any, Optional

class ProjectsGetV2ProjectsGetOrderByProjectsOrderEnum(str, Enum):
    r"""An enumeration."""
    ID = 'id'
    NAME = 'name'
    SUBTITLE = 'subtitle'
    FIRST_UPDATED = 'firstUpdated'
    LAST_UPDATED = 'lastUpdated'

class ProjectsGetV2ProjectsGetSortSortEnum(str, Enum):
    r"""An enumeration."""
    ASC = 'asc'
    DESC = 'desc'


@dataclasses.dataclass
class ProjectsGetV2ProjectsGetRequest:
    
    country: Optional[list[str]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'country', 'style': 'form', 'explode': True }})
    r"""Limit results by a certain country using two letter country code.
            (ex. ?country=US or ?country=US&country=MX)
    """  
    country_id: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'country_id', 'style': 'form', 'explode': True }})
    r"""Limit results by a certain country using two letter country code.
            (ex. /US)
    """  
    entity: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'entity', 'style': 'form', 'explode': True }})  
    is_analysis: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'isAnalysis', 'style': 'form', 'explode': True }})  
    is_mobile: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'isMobile', 'style': 'form', 'explode': True }})  
    limit: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'limit', 'style': 'form', 'explode': True }})
    r"""Change the number of results returned."""  
    offset: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'offset', 'style': 'form', 'explode': True }})  
    order_by: Optional[ProjectsGetV2ProjectsGetOrderByProjectsOrderEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'order_by', 'style': 'form', 'explode': True }})
    r"""An enumeration."""  
    page: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'page', 'style': 'form', 'explode': True }})
    r"""Paginate through results."""  
    parameter: Optional[list[Any]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'parameter', 'style': 'form', 'explode': True }})  
    parameter_id: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'parameter_id', 'style': 'form', 'explode': True }})  
    project: Optional[list[Any]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'project', 'style': 'form', 'explode': True }})  
    project_id: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'project_id', 'style': 'form', 'explode': True }})  
    sensor_type: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'sensorType', 'style': 'form', 'explode': True }})  
    sort: Optional[ProjectsGetV2ProjectsGetSortSortEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'sort', 'style': 'form', 'explode': True }})
    r"""Define sort order."""  
    source_name: Optional[list[str]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'sourceName', 'style': 'form', 'explode': True }})  
    unit: Optional[list[str]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'unit', 'style': 'form', 'explode': True }})  
    

@dataclasses.dataclass
class ProjectsGetV2ProjectsGetResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    http_validation_error: Optional[shared_httpvalidationerror.HTTPValidationError] = dataclasses.field(default=None)
    r"""Validation Error"""  
    open_aq_projects_result: Optional[shared_openaqprojectsresult.OpenAQProjectsResult] = dataclasses.field(default=None)
    r"""Successful Response"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    