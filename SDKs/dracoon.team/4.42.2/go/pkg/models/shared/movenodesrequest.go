// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// MoveNodesRequestResolutionStrategyEnum - Node conflict resolution strategy:
//
// * `autorename`
//
// * `overwrite`
//
// * `fail`
type MoveNodesRequestResolutionStrategyEnum string

const (
	MoveNodesRequestResolutionStrategyEnumAutorename MoveNodesRequestResolutionStrategyEnum = "autorename"
	MoveNodesRequestResolutionStrategyEnumOverwrite  MoveNodesRequestResolutionStrategyEnum = "overwrite"
	MoveNodesRequestResolutionStrategyEnumFail       MoveNodesRequestResolutionStrategyEnum = "fail"
)

func (e *MoveNodesRequestResolutionStrategyEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "autorename":
		fallthrough
	case "overwrite":
		fallthrough
	case "fail":
		*e = MoveNodesRequestResolutionStrategyEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for MoveNodesRequestResolutionStrategyEnum: %s", s)
	}
}

// MoveNodesRequest - Request model for moving nodes
type MoveNodesRequest struct {
	// List of nodes to be moved
	Items []MoveNode `json:"items,omitempty"`
	// Preserve Download Share Links and point them to the new node.
	KeepShareLinks *bool `json:"keepShareLinks,omitempty"`
	// &#128679; Deprecated since v4.5.0
	//
	// Node IDs
	//
	// Please use `items` instead.
	NodeIds []int64 `json:"nodeIds,omitempty"`
	// Node conflict resolution strategy:
	//
	// * `autorename`
	//
	// * `overwrite`
	//
	// * `fail`
	ResolutionStrategy *MoveNodesRequestResolutionStrategyEnum `json:"resolutionStrategy,omitempty"`
}
