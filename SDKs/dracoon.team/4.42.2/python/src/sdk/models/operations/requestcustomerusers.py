"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import errorresponse as shared_errorresponse
from ..shared import userlist as shared_userlist
from enum import Enum
from typing import Optional

class RequestCustomerUsersXSdsDateFormatEnum(str, Enum):
    r"""Date time format (cf. [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) & [leettime.de](http://leettime.de/))"""
    UTC = 'UTC'
    LOCAL = 'LOCAL'
    OFFSET = 'OFFSET'
    EPOCH = 'EPOCH'
    LEET = 'LEET'


@dataclasses.dataclass
class RequestCustomerUsersRequest:
    
    customer_id: int = dataclasses.field(metadata={'path_param': { 'field_name': 'customer_id', 'style': 'simple', 'explode': False }})
    r"""Customer ID"""  
    filter: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'filter', 'style': 'form', 'explode': True }})
    r"""Filter string"""  
    include_attributes: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'include_attributes', 'style': 'form', 'explode': True }})
    r"""Include custom user attributes."""  
    include_manageable_rooms: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'include_manageable_rooms', 'style': 'form', 'explode': True }})
    r"""Include hasManageableRooms (deprecated)"""  
    include_roles: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'include_roles', 'style': 'form', 'explode': True }})
    r"""Include roles"""  
    limit: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'limit', 'style': 'form', 'explode': True }})
    r"""Range limit.
    
    Maximum 500.
    
     For more results please use paging (`offset` + `limit`).
    """  
    offset: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'offset', 'style': 'form', 'explode': True }})
    r"""Range offset"""  
    sort: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'sort', 'style': 'form', 'explode': True }})
    r"""Sort string"""  
    x_sds_date_format: Optional[RequestCustomerUsersXSdsDateFormatEnum] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Sds-Date-Format', 'style': 'simple', 'explode': False }})
    r"""Date time format (cf. [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) & [leettime.de](http://leettime.de/))"""  
    x_sds_service_token: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Sds-Service-Token', 'style': 'simple', 'explode': False }})
    r"""Service Authentication token"""  
    

@dataclasses.dataclass
class RequestCustomerUsersResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    error_response: Optional[shared_errorresponse.ErrorResponse] = dataclasses.field(default=None)
    r"""Bad Request"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    user_list: Optional[shared_userlist.UserList] = dataclasses.field(default=None)
    r"""OK"""  
    