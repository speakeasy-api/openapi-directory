"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import pre_receive_hook as shared_pre_receive_hook
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Any, Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class EnterpriseAdminCreatePreReceiveHookRequestBody:
    
    environment: dict[str, Any] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('environment') }})
    r"""The pre-receive environment where the script is executed."""  
    name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name') }})
    r"""The name of the hook."""  
    script: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('script') }})
    r"""The script that the hook runs."""  
    script_repository: dict[str, Any] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('script_repository') }})
    r"""The GitHub repository where the script is kept."""  
    allow_downstream_configuration: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('allow_downstream_configuration'), 'exclude': lambda f: f is None }})
    r"""Whether enforcement can be overridden at the org or repo level. default: `false`"""  
    enforcement: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('enforcement'), 'exclude': lambda f: f is None }})
    r"""The state of enforcement for this hook. default: `disabled`"""  
    

@dataclasses.dataclass
class EnterpriseAdminCreatePreReceiveHookResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    pre_receive_hook: Optional[shared_pre_receive_hook.PreReceiveHook] = dataclasses.field(default=None)
    r"""Response"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    