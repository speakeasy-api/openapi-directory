"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import characterrules as shared_characterrules
from ..shared import passwordexpiration as shared_passwordexpiration
from ..shared import userlockout as shared_userlockout
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateLoginPasswordPolicies:
    r"""Request model for updating login password policies"""
    
    character_rules: Optional[shared_characterrules.CharacterRules] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('characterRules'), 'exclude': lambda f: f is None }})
    r"""Password character rules"""  
    enforce_login_password_change: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('enforceLoginPasswordChange'), 'exclude': lambda f: f is None }})
    r"""&#128679; Deprecated since v4.24.0
    
    Determines whether a login password change should be enforced for all users
    
    Only takes effect, if login password policies get stricter
    """  
    min_length: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('minLength'), 'exclude': lambda f: f is None }})
    r"""Minimum number of characters a password must contain"""  
    number_of_archived_passwords: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('numberOfArchivedPasswords'), 'exclude': lambda f: f is None }})
    r"""Number of passwords to archive
    
    (must be between `0` and `10`; `0` means that password history is disabled)
    """  
    password_expiration: Optional[shared_passwordexpiration.PasswordExpiration] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('passwordExpiration'), 'exclude': lambda f: f is None }})
    r"""Password expiration information"""  
    reject_dictionary_words: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('rejectDictionaryWords'), 'exclude': lambda f: f is None }})
    r"""Determines whether a password must NOT contain word(s) from a dictionary"""  
    reject_keyboard_patterns: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('rejectKeyboardPatterns'), 'exclude': lambda f: f is None }})
    r"""Determines whether a password must NOT contain keyboard patterns (e.g. `qwertz`, `asdf`)
    
    (min. 4 character pattern)
    """  
    reject_user_info: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('rejectUserInfo'), 'exclude': lambda f: f is None }})
    r"""Determines whether a password must NOT contain user info (first name, last name, email, user name)"""  
    user_lockout: Optional[shared_userlockout.UserLockout] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('userLockout'), 'exclude': lambda f: f is None }})
    r"""User lockout information"""  
    