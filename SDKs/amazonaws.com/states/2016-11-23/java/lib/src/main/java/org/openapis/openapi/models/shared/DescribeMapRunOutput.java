/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

/**
 * DescribeMapRunOutput - Success
 */
public class DescribeMapRunOutput {
    @JsonProperty("executionArn")
    public String executionArn;
    public DescribeMapRunOutput withExecutionArn(String executionArn) {
        this.executionArn = executionArn;
        return this;
    }
    
    @JsonProperty("executionCounts")
    public MapRunExecutionCounts executionCounts;
    public DescribeMapRunOutput withExecutionCounts(MapRunExecutionCounts executionCounts) {
        this.executionCounts = executionCounts;
        return this;
    }
    
    @JsonProperty("itemCounts")
    public MapRunItemCounts itemCounts;
    public DescribeMapRunOutput withItemCounts(MapRunItemCounts itemCounts) {
        this.itemCounts = itemCounts;
        return this;
    }
    
    @JsonProperty("mapRunArn")
    public String mapRunArn;
    public DescribeMapRunOutput withMapRunArn(String mapRunArn) {
        this.mapRunArn = mapRunArn;
        return this;
    }
    
    @JsonProperty("maxConcurrency")
    public Long maxConcurrency;
    public DescribeMapRunOutput withMaxConcurrency(Long maxConcurrency) {
        this.maxConcurrency = maxConcurrency;
        return this;
    }
    
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("startDate")
    public OffsetDateTime startDate;
    public DescribeMapRunOutput withStartDate(OffsetDateTime startDate) {
        this.startDate = startDate;
        return this;
    }
    
    @JsonProperty("status")
    public MapRunStatusEnum status;
    public DescribeMapRunOutput withStatus(MapRunStatusEnum status) {
        this.status = status;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("stopDate")
    public OffsetDateTime stopDate;
    public DescribeMapRunOutput withStopDate(OffsetDateTime stopDate) {
        this.stopDate = stopDate;
        return this;
    }
    
    @JsonProperty("toleratedFailureCount")
    public Long toleratedFailureCount;
    public DescribeMapRunOutput withToleratedFailureCount(Long toleratedFailureCount) {
        this.toleratedFailureCount = toleratedFailureCount;
        return this;
    }
    
    @JsonProperty("toleratedFailurePercentage")
    public Float toleratedFailurePercentage;
    public DescribeMapRunOutput withToleratedFailurePercentage(Float toleratedFailurePercentage) {
        this.toleratedFailurePercentage = toleratedFailurePercentage;
        return this;
    }
    
}
