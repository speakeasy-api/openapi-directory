"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class QueueMessage:
    r"""A Queue Message"""
    
    queue_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('queueName') }})
    r"""Name of Queue for message."""  
    content_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('contentType'), 'exclude': lambda f: f is None }})
    r"""Content-type of data associated with QueueMessage."""  
    create_date: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('createDate'), 'exclude': lambda f: f is None }})
    r"""Date that message was received by system."""  
    data: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('data'), 'exclude': lambda f: f is None }})
    r"""Embedded JSON to be sent with Queue Message."""  
    href: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('href'), 'exclude': lambda f: f is None }})
    r"""URL of data associated with Queue Message (if not embedded JSON)"""  
    message_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('messageId'), 'exclude': lambda f: f is None }})
    r"""UUID of Message Data associated with this Queue Message"""  
    queue_message_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('queueMessageId'), 'exclude': lambda f: f is None }})
    r"""UUID of Queue Message in local region."""  
    receiving_region: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('receivingRegion'), 'exclude': lambda f: f is None }})
    r"""Regions to which message will be sent"""  
    sending_region: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sendingRegion'), 'exclude': lambda f: f is None }})
    r"""Region from which was sent"""  
    