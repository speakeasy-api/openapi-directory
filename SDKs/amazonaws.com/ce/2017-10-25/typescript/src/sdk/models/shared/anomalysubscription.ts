/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { AnomalySubscriptionFrequencyEnum } from "./anomalysubscriptionfrequencyenum";
import { Expression } from "./expression";
import { Subscriber } from "./subscriber";
import { Expose, Type } from "class-transformer";

/**
 * The association between a monitor, threshold, and list of subscribers used to deliver notifications about anomalies detected by a monitor that exceeds a threshold. The content consists of the detailed metadata and the current status of the <code>AnomalySubscription</code> object.
 */
export class AnomalySubscription extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "AccountId" })
  accountId?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "Frequency" })
  frequency: AnomalySubscriptionFrequencyEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "MonitorArnList" })
  monitorArnList: string[];

  @SpeakeasyMetadata({ elemType: Subscriber })
  @Expose({ name: "Subscribers" })
  @Type(() => Subscriber)
  subscribers: Subscriber[];

  @SpeakeasyMetadata()
  @Expose({ name: "SubscriptionArn" })
  subscriptionArn?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "SubscriptionName" })
  subscriptionName: string;

  @SpeakeasyMetadata()
  @Expose({ name: "Threshold" })
  threshold?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "ThresholdExpression" })
  @Type(() => Expression)
  thresholdExpression?: Expression;
}
