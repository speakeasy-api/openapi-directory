// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// PutTargetsXAmzTargetEnum
type PutTargetsXAmzTargetEnum string

const (
	PutTargetsXAmzTargetEnumAwsEventsPutTargets PutTargetsXAmzTargetEnum = "AWSEvents.PutTargets"
)

func (e PutTargetsXAmzTargetEnum) ToPointer() *PutTargetsXAmzTargetEnum {
	return &e
}

func (e *PutTargetsXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "AWSEvents.PutTargets":
		*e = PutTargetsXAmzTargetEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PutTargetsXAmzTargetEnum: %v", v)
	}
}

type PutTargetsRequest struct {
	PutTargetsRequest shared.PutTargetsRequest `request:"mediaType=application/json"`
	XAmzAlgorithm     *string                  `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string                  `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string                  `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string                  `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string                  `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string                  `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string                  `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget        PutTargetsXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type PutTargetsResponse struct {
	// ConcurrentModificationException
	ConcurrentModificationException interface{}
	ContentType                     string
	// InternalException
	InternalException interface{}
	// LimitExceededException
	LimitExceededException interface{}
	// ManagedRuleException
	ManagedRuleException interface{}
	// Success
	PutTargetsResponse *shared.PutTargetsResponse
	// ResourceNotFoundException
	ResourceNotFoundException interface{}
	StatusCode                int
	RawResponse               *http.Response
}
