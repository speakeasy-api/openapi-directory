// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type ListEventSubscriptionsRequest struct {
	Cursor *string `queryParam:"style=form,explode=true,name=cursor"`
	Limit  *int64  `queryParam:"style=form,explode=true,name=limit"`
}

type ListEventSubscriptionsDefaultApplicationJSON13StatusEnum int64

const (
	ListEventSubscriptionsDefaultApplicationJSON13StatusEnumFourHundredAndTwentyNine ListEventSubscriptionsDefaultApplicationJSON13StatusEnum = 429
)

func (e ListEventSubscriptionsDefaultApplicationJSON13StatusEnum) ToPointer() *ListEventSubscriptionsDefaultApplicationJSON13StatusEnum {
	return &e
}

func (e *ListEventSubscriptionsDefaultApplicationJSON13StatusEnum) UnmarshalJSON(data []byte) error {
	var v int64
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case 429:
		*e = ListEventSubscriptionsDefaultApplicationJSON13StatusEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListEventSubscriptionsDefaultApplicationJSON13StatusEnum: %v", v)
	}
}

type ListEventSubscriptionsDefaultApplicationJSON13TypeEnum string

const (
	ListEventSubscriptionsDefaultApplicationJSON13TypeEnumRateLimitedError ListEventSubscriptionsDefaultApplicationJSON13TypeEnum = "rate_limited_error"
)

func (e ListEventSubscriptionsDefaultApplicationJSON13TypeEnum) ToPointer() *ListEventSubscriptionsDefaultApplicationJSON13TypeEnum {
	return &e
}

func (e *ListEventSubscriptionsDefaultApplicationJSON13TypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "rate_limited_error":
		*e = ListEventSubscriptionsDefaultApplicationJSON13TypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListEventSubscriptionsDefaultApplicationJSON13TypeEnum: %v", v)
	}
}

type ListEventSubscriptionsDefaultApplicationJSON13 struct {
	Detail     string                                                   `json:"detail"`
	RetryAfter *int64                                                   `json:"retry_after,omitempty"`
	Status     ListEventSubscriptionsDefaultApplicationJSON13StatusEnum `json:"status"`
	Title      string                                                   `json:"title"`
	Type       ListEventSubscriptionsDefaultApplicationJSON13TypeEnum   `json:"type"`
}

type ListEventSubscriptionsDefaultApplicationJSON12StatusEnum int64

const (
	ListEventSubscriptionsDefaultApplicationJSON12StatusEnumFourHundredAndThree ListEventSubscriptionsDefaultApplicationJSON12StatusEnum = 403
)

func (e ListEventSubscriptionsDefaultApplicationJSON12StatusEnum) ToPointer() *ListEventSubscriptionsDefaultApplicationJSON12StatusEnum {
	return &e
}

func (e *ListEventSubscriptionsDefaultApplicationJSON12StatusEnum) UnmarshalJSON(data []byte) error {
	var v int64
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case 403:
		*e = ListEventSubscriptionsDefaultApplicationJSON12StatusEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListEventSubscriptionsDefaultApplicationJSON12StatusEnum: %v", v)
	}
}

type ListEventSubscriptionsDefaultApplicationJSON12TypeEnum string

const (
	ListEventSubscriptionsDefaultApplicationJSON12TypeEnumPrivateFeatureError ListEventSubscriptionsDefaultApplicationJSON12TypeEnum = "private_feature_error"
)

func (e ListEventSubscriptionsDefaultApplicationJSON12TypeEnum) ToPointer() *ListEventSubscriptionsDefaultApplicationJSON12TypeEnum {
	return &e
}

func (e *ListEventSubscriptionsDefaultApplicationJSON12TypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "private_feature_error":
		*e = ListEventSubscriptionsDefaultApplicationJSON12TypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListEventSubscriptionsDefaultApplicationJSON12TypeEnum: %v", v)
	}
}

type ListEventSubscriptionsDefaultApplicationJSON12 struct {
	Detail string                                                   `json:"detail"`
	Status ListEventSubscriptionsDefaultApplicationJSON12StatusEnum `json:"status"`
	Title  string                                                   `json:"title"`
	Type   ListEventSubscriptionsDefaultApplicationJSON12TypeEnum   `json:"type"`
}

type ListEventSubscriptionsDefaultApplicationJSON11StatusEnum int64

const (
	ListEventSubscriptionsDefaultApplicationJSON11StatusEnumFourHundredAndFour ListEventSubscriptionsDefaultApplicationJSON11StatusEnum = 404
)

func (e ListEventSubscriptionsDefaultApplicationJSON11StatusEnum) ToPointer() *ListEventSubscriptionsDefaultApplicationJSON11StatusEnum {
	return &e
}

func (e *ListEventSubscriptionsDefaultApplicationJSON11StatusEnum) UnmarshalJSON(data []byte) error {
	var v int64
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case 404:
		*e = ListEventSubscriptionsDefaultApplicationJSON11StatusEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListEventSubscriptionsDefaultApplicationJSON11StatusEnum: %v", v)
	}
}

type ListEventSubscriptionsDefaultApplicationJSON11TypeEnum string

const (
	ListEventSubscriptionsDefaultApplicationJSON11TypeEnumObjectNotFoundError ListEventSubscriptionsDefaultApplicationJSON11TypeEnum = "object_not_found_error"
)

func (e ListEventSubscriptionsDefaultApplicationJSON11TypeEnum) ToPointer() *ListEventSubscriptionsDefaultApplicationJSON11TypeEnum {
	return &e
}

func (e *ListEventSubscriptionsDefaultApplicationJSON11TypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "object_not_found_error":
		*e = ListEventSubscriptionsDefaultApplicationJSON11TypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListEventSubscriptionsDefaultApplicationJSON11TypeEnum: %v", v)
	}
}

type ListEventSubscriptionsDefaultApplicationJSON11 struct {
	Detail string                                                   `json:"detail"`
	Status ListEventSubscriptionsDefaultApplicationJSON11StatusEnum `json:"status"`
	Title  string                                                   `json:"title"`
	Type   ListEventSubscriptionsDefaultApplicationJSON11TypeEnum   `json:"type"`
}

type ListEventSubscriptionsDefaultApplicationJSON10StatusEnum int64

const (
	ListEventSubscriptionsDefaultApplicationJSON10StatusEnumFourHundred ListEventSubscriptionsDefaultApplicationJSON10StatusEnum = 400
)

func (e ListEventSubscriptionsDefaultApplicationJSON10StatusEnum) ToPointer() *ListEventSubscriptionsDefaultApplicationJSON10StatusEnum {
	return &e
}

func (e *ListEventSubscriptionsDefaultApplicationJSON10StatusEnum) UnmarshalJSON(data []byte) error {
	var v int64
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case 400:
		*e = ListEventSubscriptionsDefaultApplicationJSON10StatusEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListEventSubscriptionsDefaultApplicationJSON10StatusEnum: %v", v)
	}
}

type ListEventSubscriptionsDefaultApplicationJSON10TypeEnum string

const (
	ListEventSubscriptionsDefaultApplicationJSON10TypeEnumMalformedRequestError ListEventSubscriptionsDefaultApplicationJSON10TypeEnum = "malformed_request_error"
)

func (e ListEventSubscriptionsDefaultApplicationJSON10TypeEnum) ToPointer() *ListEventSubscriptionsDefaultApplicationJSON10TypeEnum {
	return &e
}

func (e *ListEventSubscriptionsDefaultApplicationJSON10TypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "malformed_request_error":
		*e = ListEventSubscriptionsDefaultApplicationJSON10TypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListEventSubscriptionsDefaultApplicationJSON10TypeEnum: %v", v)
	}
}

type ListEventSubscriptionsDefaultApplicationJSON10 struct {
	Detail string                                                   `json:"detail"`
	Status ListEventSubscriptionsDefaultApplicationJSON10StatusEnum `json:"status"`
	Title  string                                                   `json:"title"`
	Type   ListEventSubscriptionsDefaultApplicationJSON10TypeEnum   `json:"type"`
}

type ListEventSubscriptionsDefaultApplicationJSON9StatusEnum int64

const (
	ListEventSubscriptionsDefaultApplicationJSON9StatusEnumFourHundred ListEventSubscriptionsDefaultApplicationJSON9StatusEnum = 400
)

func (e ListEventSubscriptionsDefaultApplicationJSON9StatusEnum) ToPointer() *ListEventSubscriptionsDefaultApplicationJSON9StatusEnum {
	return &e
}

func (e *ListEventSubscriptionsDefaultApplicationJSON9StatusEnum) UnmarshalJSON(data []byte) error {
	var v int64
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case 400:
		*e = ListEventSubscriptionsDefaultApplicationJSON9StatusEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListEventSubscriptionsDefaultApplicationJSON9StatusEnum: %v", v)
	}
}

type ListEventSubscriptionsDefaultApplicationJSON9TypeEnum string

const (
	ListEventSubscriptionsDefaultApplicationJSON9TypeEnumInvalidParametersError ListEventSubscriptionsDefaultApplicationJSON9TypeEnum = "invalid_parameters_error"
)

func (e ListEventSubscriptionsDefaultApplicationJSON9TypeEnum) ToPointer() *ListEventSubscriptionsDefaultApplicationJSON9TypeEnum {
	return &e
}

func (e *ListEventSubscriptionsDefaultApplicationJSON9TypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "invalid_parameters_error":
		*e = ListEventSubscriptionsDefaultApplicationJSON9TypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListEventSubscriptionsDefaultApplicationJSON9TypeEnum: %v", v)
	}
}

type ListEventSubscriptionsDefaultApplicationJSON9 struct {
	Detail string `json:"detail"`
	// All errors related to parsing the request parameters.
	Errors []map[string]interface{}                                `json:"errors"`
	Status ListEventSubscriptionsDefaultApplicationJSON9StatusEnum `json:"status"`
	Title  string                                                  `json:"title"`
	Type   ListEventSubscriptionsDefaultApplicationJSON9TypeEnum   `json:"type"`
}

type ListEventSubscriptionsDefaultApplicationJSON8StatusEnum int64

const (
	ListEventSubscriptionsDefaultApplicationJSON8StatusEnumFourHundredAndNine ListEventSubscriptionsDefaultApplicationJSON8StatusEnum = 409
)

func (e ListEventSubscriptionsDefaultApplicationJSON8StatusEnum) ToPointer() *ListEventSubscriptionsDefaultApplicationJSON8StatusEnum {
	return &e
}

func (e *ListEventSubscriptionsDefaultApplicationJSON8StatusEnum) UnmarshalJSON(data []byte) error {
	var v int64
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case 409:
		*e = ListEventSubscriptionsDefaultApplicationJSON8StatusEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListEventSubscriptionsDefaultApplicationJSON8StatusEnum: %v", v)
	}
}

type ListEventSubscriptionsDefaultApplicationJSON8TypeEnum string

const (
	ListEventSubscriptionsDefaultApplicationJSON8TypeEnumInvalidOperationError ListEventSubscriptionsDefaultApplicationJSON8TypeEnum = "invalid_operation_error"
)

func (e ListEventSubscriptionsDefaultApplicationJSON8TypeEnum) ToPointer() *ListEventSubscriptionsDefaultApplicationJSON8TypeEnum {
	return &e
}

func (e *ListEventSubscriptionsDefaultApplicationJSON8TypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "invalid_operation_error":
		*e = ListEventSubscriptionsDefaultApplicationJSON8TypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListEventSubscriptionsDefaultApplicationJSON8TypeEnum: %v", v)
	}
}

type ListEventSubscriptionsDefaultApplicationJSON8 struct {
	Detail string                                                  `json:"detail"`
	Status ListEventSubscriptionsDefaultApplicationJSON8StatusEnum `json:"status"`
	Title  string                                                  `json:"title"`
	Type   ListEventSubscriptionsDefaultApplicationJSON8TypeEnum   `json:"type"`
}

type ListEventSubscriptionsDefaultApplicationJSON7StatusEnum int64

const (
	ListEventSubscriptionsDefaultApplicationJSON7StatusEnumFourHundredAndOne ListEventSubscriptionsDefaultApplicationJSON7StatusEnum = 401
)

func (e ListEventSubscriptionsDefaultApplicationJSON7StatusEnum) ToPointer() *ListEventSubscriptionsDefaultApplicationJSON7StatusEnum {
	return &e
}

func (e *ListEventSubscriptionsDefaultApplicationJSON7StatusEnum) UnmarshalJSON(data []byte) error {
	var v int64
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case 401:
		*e = ListEventSubscriptionsDefaultApplicationJSON7StatusEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListEventSubscriptionsDefaultApplicationJSON7StatusEnum: %v", v)
	}
}

type ListEventSubscriptionsDefaultApplicationJSON7TypeEnum string

const (
	ListEventSubscriptionsDefaultApplicationJSON7TypeEnumInvalidAPIKeyError ListEventSubscriptionsDefaultApplicationJSON7TypeEnum = "invalid_api_key_error"
)

func (e ListEventSubscriptionsDefaultApplicationJSON7TypeEnum) ToPointer() *ListEventSubscriptionsDefaultApplicationJSON7TypeEnum {
	return &e
}

func (e *ListEventSubscriptionsDefaultApplicationJSON7TypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "invalid_api_key_error":
		*e = ListEventSubscriptionsDefaultApplicationJSON7TypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListEventSubscriptionsDefaultApplicationJSON7TypeEnum: %v", v)
	}
}

type ListEventSubscriptionsDefaultApplicationJSON7 struct {
	Detail string                                                  `json:"detail"`
	Status ListEventSubscriptionsDefaultApplicationJSON7StatusEnum `json:"status"`
	Title  string                                                  `json:"title"`
	Type   ListEventSubscriptionsDefaultApplicationJSON7TypeEnum   `json:"type"`
}

type ListEventSubscriptionsDefaultApplicationJSON6StatusEnum int64

const (
	ListEventSubscriptionsDefaultApplicationJSON6StatusEnumFiveHundred ListEventSubscriptionsDefaultApplicationJSON6StatusEnum = 500
)

func (e ListEventSubscriptionsDefaultApplicationJSON6StatusEnum) ToPointer() *ListEventSubscriptionsDefaultApplicationJSON6StatusEnum {
	return &e
}

func (e *ListEventSubscriptionsDefaultApplicationJSON6StatusEnum) UnmarshalJSON(data []byte) error {
	var v int64
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case 500:
		*e = ListEventSubscriptionsDefaultApplicationJSON6StatusEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListEventSubscriptionsDefaultApplicationJSON6StatusEnum: %v", v)
	}
}

type ListEventSubscriptionsDefaultApplicationJSON6TypeEnum string

const (
	ListEventSubscriptionsDefaultApplicationJSON6TypeEnumInternalServerError ListEventSubscriptionsDefaultApplicationJSON6TypeEnum = "internal_server_error"
)

func (e ListEventSubscriptionsDefaultApplicationJSON6TypeEnum) ToPointer() *ListEventSubscriptionsDefaultApplicationJSON6TypeEnum {
	return &e
}

func (e *ListEventSubscriptionsDefaultApplicationJSON6TypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "internal_server_error":
		*e = ListEventSubscriptionsDefaultApplicationJSON6TypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListEventSubscriptionsDefaultApplicationJSON6TypeEnum: %v", v)
	}
}

type ListEventSubscriptionsDefaultApplicationJSON6 struct {
	Detail string                                                  `json:"detail"`
	Status ListEventSubscriptionsDefaultApplicationJSON6StatusEnum `json:"status"`
	Title  string                                                  `json:"title"`
	Type   ListEventSubscriptionsDefaultApplicationJSON6TypeEnum   `json:"type"`
}

type ListEventSubscriptionsDefaultApplicationJSON5StatusEnum int64

const (
	ListEventSubscriptionsDefaultApplicationJSON5StatusEnumFourHundredAndThree ListEventSubscriptionsDefaultApplicationJSON5StatusEnum = 403
)

func (e ListEventSubscriptionsDefaultApplicationJSON5StatusEnum) ToPointer() *ListEventSubscriptionsDefaultApplicationJSON5StatusEnum {
	return &e
}

func (e *ListEventSubscriptionsDefaultApplicationJSON5StatusEnum) UnmarshalJSON(data []byte) error {
	var v int64
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case 403:
		*e = ListEventSubscriptionsDefaultApplicationJSON5StatusEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListEventSubscriptionsDefaultApplicationJSON5StatusEnum: %v", v)
	}
}

type ListEventSubscriptionsDefaultApplicationJSON5TypeEnum string

const (
	ListEventSubscriptionsDefaultApplicationJSON5TypeEnumInsufficientPermissionsError ListEventSubscriptionsDefaultApplicationJSON5TypeEnum = "insufficient_permissions_error"
)

func (e ListEventSubscriptionsDefaultApplicationJSON5TypeEnum) ToPointer() *ListEventSubscriptionsDefaultApplicationJSON5TypeEnum {
	return &e
}

func (e *ListEventSubscriptionsDefaultApplicationJSON5TypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "insufficient_permissions_error":
		*e = ListEventSubscriptionsDefaultApplicationJSON5TypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListEventSubscriptionsDefaultApplicationJSON5TypeEnum: %v", v)
	}
}

type ListEventSubscriptionsDefaultApplicationJSON5 struct {
	Detail string                                                  `json:"detail"`
	Status ListEventSubscriptionsDefaultApplicationJSON5StatusEnum `json:"status"`
	Title  string                                                  `json:"title"`
	Type   ListEventSubscriptionsDefaultApplicationJSON5TypeEnum   `json:"type"`
}

type ListEventSubscriptionsDefaultApplicationJSON4StatusEnum int64

const (
	ListEventSubscriptionsDefaultApplicationJSON4StatusEnumFourHundredAndTwentyTwo ListEventSubscriptionsDefaultApplicationJSON4StatusEnum = 422
)

func (e ListEventSubscriptionsDefaultApplicationJSON4StatusEnum) ToPointer() *ListEventSubscriptionsDefaultApplicationJSON4StatusEnum {
	return &e
}

func (e *ListEventSubscriptionsDefaultApplicationJSON4StatusEnum) UnmarshalJSON(data []byte) error {
	var v int64
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case 422:
		*e = ListEventSubscriptionsDefaultApplicationJSON4StatusEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListEventSubscriptionsDefaultApplicationJSON4StatusEnum: %v", v)
	}
}

type ListEventSubscriptionsDefaultApplicationJSON4TypeEnum string

const (
	ListEventSubscriptionsDefaultApplicationJSON4TypeEnumIdempotencyUnprocessableError ListEventSubscriptionsDefaultApplicationJSON4TypeEnum = "idempotency_unprocessable_error"
)

func (e ListEventSubscriptionsDefaultApplicationJSON4TypeEnum) ToPointer() *ListEventSubscriptionsDefaultApplicationJSON4TypeEnum {
	return &e
}

func (e *ListEventSubscriptionsDefaultApplicationJSON4TypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "idempotency_unprocessable_error":
		*e = ListEventSubscriptionsDefaultApplicationJSON4TypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListEventSubscriptionsDefaultApplicationJSON4TypeEnum: %v", v)
	}
}

type ListEventSubscriptionsDefaultApplicationJSON4 struct {
	Detail string                                                  `json:"detail"`
	Status ListEventSubscriptionsDefaultApplicationJSON4StatusEnum `json:"status"`
	Title  string                                                  `json:"title"`
	Type   ListEventSubscriptionsDefaultApplicationJSON4TypeEnum   `json:"type"`
}

type ListEventSubscriptionsDefaultApplicationJSON3StatusEnum int64

const (
	ListEventSubscriptionsDefaultApplicationJSON3StatusEnumFourHundredAndNine ListEventSubscriptionsDefaultApplicationJSON3StatusEnum = 409
)

func (e ListEventSubscriptionsDefaultApplicationJSON3StatusEnum) ToPointer() *ListEventSubscriptionsDefaultApplicationJSON3StatusEnum {
	return &e
}

func (e *ListEventSubscriptionsDefaultApplicationJSON3StatusEnum) UnmarshalJSON(data []byte) error {
	var v int64
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case 409:
		*e = ListEventSubscriptionsDefaultApplicationJSON3StatusEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListEventSubscriptionsDefaultApplicationJSON3StatusEnum: %v", v)
	}
}

type ListEventSubscriptionsDefaultApplicationJSON3TypeEnum string

const (
	ListEventSubscriptionsDefaultApplicationJSON3TypeEnumIdempotencyConflictError ListEventSubscriptionsDefaultApplicationJSON3TypeEnum = "idempotency_conflict_error"
)

func (e ListEventSubscriptionsDefaultApplicationJSON3TypeEnum) ToPointer() *ListEventSubscriptionsDefaultApplicationJSON3TypeEnum {
	return &e
}

func (e *ListEventSubscriptionsDefaultApplicationJSON3TypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "idempotency_conflict_error":
		*e = ListEventSubscriptionsDefaultApplicationJSON3TypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListEventSubscriptionsDefaultApplicationJSON3TypeEnum: %v", v)
	}
}

type ListEventSubscriptionsDefaultApplicationJSON3 struct {
	Detail string                                                  `json:"detail"`
	Status ListEventSubscriptionsDefaultApplicationJSON3StatusEnum `json:"status"`
	Title  string                                                  `json:"title"`
	Type   ListEventSubscriptionsDefaultApplicationJSON3TypeEnum   `json:"type"`
}

type ListEventSubscriptionsDefaultApplicationJSON2StatusEnum int64

const (
	ListEventSubscriptionsDefaultApplicationJSON2StatusEnumFourHundredAndThree ListEventSubscriptionsDefaultApplicationJSON2StatusEnum = 403
)

func (e ListEventSubscriptionsDefaultApplicationJSON2StatusEnum) ToPointer() *ListEventSubscriptionsDefaultApplicationJSON2StatusEnum {
	return &e
}

func (e *ListEventSubscriptionsDefaultApplicationJSON2StatusEnum) UnmarshalJSON(data []byte) error {
	var v int64
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case 403:
		*e = ListEventSubscriptionsDefaultApplicationJSON2StatusEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListEventSubscriptionsDefaultApplicationJSON2StatusEnum: %v", v)
	}
}

type ListEventSubscriptionsDefaultApplicationJSON2TypeEnum string

const (
	ListEventSubscriptionsDefaultApplicationJSON2TypeEnumEnvironmentMismatchError ListEventSubscriptionsDefaultApplicationJSON2TypeEnum = "environment_mismatch_error"
)

func (e ListEventSubscriptionsDefaultApplicationJSON2TypeEnum) ToPointer() *ListEventSubscriptionsDefaultApplicationJSON2TypeEnum {
	return &e
}

func (e *ListEventSubscriptionsDefaultApplicationJSON2TypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "environment_mismatch_error":
		*e = ListEventSubscriptionsDefaultApplicationJSON2TypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListEventSubscriptionsDefaultApplicationJSON2TypeEnum: %v", v)
	}
}

type ListEventSubscriptionsDefaultApplicationJSON2 struct {
	Detail string                                                  `json:"detail"`
	Status ListEventSubscriptionsDefaultApplicationJSON2StatusEnum `json:"status"`
	Title  string                                                  `json:"title"`
	Type   ListEventSubscriptionsDefaultApplicationJSON2TypeEnum   `json:"type"`
}

type ListEventSubscriptionsDefaultApplicationJSON1StatusEnum int64

const (
	ListEventSubscriptionsDefaultApplicationJSON1StatusEnumFourHundredAndFour ListEventSubscriptionsDefaultApplicationJSON1StatusEnum = 404
)

func (e ListEventSubscriptionsDefaultApplicationJSON1StatusEnum) ToPointer() *ListEventSubscriptionsDefaultApplicationJSON1StatusEnum {
	return &e
}

func (e *ListEventSubscriptionsDefaultApplicationJSON1StatusEnum) UnmarshalJSON(data []byte) error {
	var v int64
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case 404:
		*e = ListEventSubscriptionsDefaultApplicationJSON1StatusEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListEventSubscriptionsDefaultApplicationJSON1StatusEnum: %v", v)
	}
}

type ListEventSubscriptionsDefaultApplicationJSON1TypeEnum string

const (
	ListEventSubscriptionsDefaultApplicationJSON1TypeEnumAPIMethodNotFoundError ListEventSubscriptionsDefaultApplicationJSON1TypeEnum = "api_method_not_found_error"
)

func (e ListEventSubscriptionsDefaultApplicationJSON1TypeEnum) ToPointer() *ListEventSubscriptionsDefaultApplicationJSON1TypeEnum {
	return &e
}

func (e *ListEventSubscriptionsDefaultApplicationJSON1TypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "api_method_not_found_error":
		*e = ListEventSubscriptionsDefaultApplicationJSON1TypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListEventSubscriptionsDefaultApplicationJSON1TypeEnum: %v", v)
	}
}

type ListEventSubscriptionsDefaultApplicationJSON1 struct {
	Detail string                                                  `json:"detail"`
	Status ListEventSubscriptionsDefaultApplicationJSON1StatusEnum `json:"status"`
	Title  string                                                  `json:"title"`
	Type   ListEventSubscriptionsDefaultApplicationJSON1TypeEnum   `json:"type"`
}

type ListEventSubscriptionsResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Error
	Error interface{}
	// Event Subscription List
	EventSubscriptionList *shared.EventSubscriptionList
}
