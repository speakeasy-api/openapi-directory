/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

public class MarketDefinition {
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("betDelay")
    public Integer betDelay;

    public MarketDefinition withBetDelay(Integer betDelay) {
        this.betDelay = betDelay;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("bettingType")
    public MarketDefinitionBettingTypeEnum bettingType;

    public MarketDefinition withBettingType(MarketDefinitionBettingTypeEnum bettingType) {
        this.bettingType = bettingType;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("bspMarket")
    public Boolean bspMarket;

    public MarketDefinition withBspMarket(Boolean bspMarket) {
        this.bspMarket = bspMarket;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("bspReconciled")
    public Boolean bspReconciled;

    public MarketDefinition withBspReconciled(Boolean bspReconciled) {
        this.bspReconciled = bspReconciled;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("complete")
    public Boolean complete;

    public MarketDefinition withComplete(Boolean complete) {
        this.complete = complete;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("countryCode")
    public String countryCode;

    public MarketDefinition withCountryCode(String countryCode) {
        this.countryCode = countryCode;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("crossMatching")
    public Boolean crossMatching;

    public MarketDefinition withCrossMatching(Boolean crossMatching) {
        this.crossMatching = crossMatching;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("discountAllowed")
    public Boolean discountAllowed;

    public MarketDefinition withDiscountAllowed(Boolean discountAllowed) {
        this.discountAllowed = discountAllowed;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("eachWayDivisor")
    public Double eachWayDivisor;

    public MarketDefinition withEachWayDivisor(Double eachWayDivisor) {
        this.eachWayDivisor = eachWayDivisor;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("eventId")
    public String eventId;

    public MarketDefinition withEventId(String eventId) {
        this.eventId = eventId;
        return this;
    }
    
    /**
     * The Event Type the market is contained within.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("eventTypeId")
    public String eventTypeId;

    public MarketDefinition withEventTypeId(String eventTypeId) {
        this.eventTypeId = eventTypeId;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("inPlay")
    public Boolean inPlay;

    public MarketDefinition withInPlay(Boolean inPlay) {
        this.inPlay = inPlay;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("keyLineDefinition")
    public KeyLineDefinition keyLineDefinition;

    public MarketDefinition withKeyLineDefinition(KeyLineDefinition keyLineDefinition) {
        this.keyLineDefinition = keyLineDefinition;
        return this;
    }
    
    /**
     * For Handicap and Line markets, the lines available on this market will be between the range of lineMinUnit and lineMaxUnit, in increments of the lineInterval value. e.g. If unit is runs, lineMinUnit=10, lineMaxUnit=20 and lineInterval=0.5, then valid lines include 10, 10.5, 11, 11.5 up to 20 runs.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("lineInterval")
    public Double lineInterval;

    public MarketDefinition withLineInterval(Double lineInterval) {
        this.lineInterval = lineInterval;
        return this;
    }
    
    /**
     * For Handicap and Line markets, the maximum value for the outcome, in market units for this market (eg 100 runs).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("lineMaxUnit")
    public Double lineMaxUnit;

    public MarketDefinition withLineMaxUnit(Double lineMaxUnit) {
        this.lineMaxUnit = lineMaxUnit;
        return this;
    }
    
    /**
     * For Handicap and Line markets, the minimum value for the outcome, in market units for this market (eg 0 runs).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("lineMinUnit")
    public Double lineMinUnit;

    public MarketDefinition withLineMinUnit(Double lineMinUnit) {
        this.lineMinUnit = lineMinUnit;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("marketBaseRate")
    public Double marketBaseRate;

    public MarketDefinition withMarketBaseRate(Double marketBaseRate) {
        this.marketBaseRate = marketBaseRate;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("marketTime")
    public OffsetDateTime marketTime;

    public MarketDefinition withMarketTime(OffsetDateTime marketTime) {
        this.marketTime = marketTime;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("marketType")
    public String marketType;

    public MarketDefinition withMarketType(String marketType) {
        this.marketType = marketType;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("numberOfActiveRunners")
    public Integer numberOfActiveRunners;

    public MarketDefinition withNumberOfActiveRunners(Integer numberOfActiveRunners) {
        this.numberOfActiveRunners = numberOfActiveRunners;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("numberOfWinners")
    public Integer numberOfWinners;

    public MarketDefinition withNumberOfWinners(Integer numberOfWinners) {
        this.numberOfWinners = numberOfWinners;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("openDate")
    public OffsetDateTime openDate;

    public MarketDefinition withOpenDate(OffsetDateTime openDate) {
        this.openDate = openDate;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("persistenceEnabled")
    public Boolean persistenceEnabled;

    public MarketDefinition withPersistenceEnabled(Boolean persistenceEnabled) {
        this.persistenceEnabled = persistenceEnabled;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("priceLadderDefinition")
    public PriceLadderDefinition priceLadderDefinition;

    public MarketDefinition withPriceLadderDefinition(PriceLadderDefinition priceLadderDefinition) {
        this.priceLadderDefinition = priceLadderDefinition;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("raceType")
    public String raceType;

    public MarketDefinition withRaceType(String raceType) {
        this.raceType = raceType;
        return this;
    }
    
    /**
     * The market regulators.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("regulators")
    public String[] regulators;

    public MarketDefinition withRegulators(String[] regulators) {
        this.regulators = regulators;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("runners")
    public RunnerDefinition[] runners;

    public MarketDefinition withRunners(RunnerDefinition[] runners) {
        this.runners = runners;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("runnersVoidable")
    public Boolean runnersVoidable;

    public MarketDefinition withRunnersVoidable(Boolean runnersVoidable) {
        this.runnersVoidable = runnersVoidable;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("settledTime")
    public OffsetDateTime settledTime;

    public MarketDefinition withSettledTime(OffsetDateTime settledTime) {
        this.settledTime = settledTime;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("status")
    public MarketDefinitionStatusEnum status;

    public MarketDefinition withStatus(MarketDefinitionStatusEnum status) {
        this.status = status;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("suspendTime")
    public OffsetDateTime suspendTime;

    public MarketDefinition withSuspendTime(OffsetDateTime suspendTime) {
        this.suspendTime = suspendTime;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("timezone")
    public String timezone;

    public MarketDefinition withTimezone(String timezone) {
        this.timezone = timezone;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("turnInPlayEnabled")
    public Boolean turnInPlayEnabled;

    public MarketDefinition withTurnInPlayEnabled(Boolean turnInPlayEnabled) {
        this.turnInPlayEnabled = turnInPlayEnabled;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("venue")
    public String venue;

    public MarketDefinition withVenue(String venue) {
        this.venue = venue;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("version")
    public Long version;

    public MarketDefinition withVersion(Long version) {
        this.version = version;
        return this;
    }
    
    public MarketDefinition(){}
}
