<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Sites 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Geocode an address
     * 
     * Represents the set of geocoded and standardized sites and intersections whose address best matches a given query address.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetAddressesOutputFormatRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetAddressesOutputFormatResponse
     */
	public function getAddressesOutputFormat(
        \OpenAPI\OpenAPI\Models\Operations\GetAddressesOutputFormatRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetAddressesOutputFormatResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/addresses.{outputFormat}', \OpenAPI\OpenAPI\Models\Operations\GetAddressesOutputFormatRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetAddressesOutputFormatRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetAddressesOutputFormatResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Find sites near to a geographic point
     * 
     * Represents sites near a given point in the order of closest to farthest
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetSitesNearOutputFormatRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetSitesNearOutputFormatResponse
     */
	public function getSitesNearOutputFormat(
        \OpenAPI\OpenAPI\Models\Operations\GetSitesNearOutputFormatRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetSitesNearOutputFormatResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/sites/near.{outputFormat}', \OpenAPI\OpenAPI\Models\Operations\GetSitesNearOutputFormatRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetSitesNearOutputFormatRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetSitesNearOutputFormatResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Find the site nearest to a geographic point
     * 
     * Represents the site nearest a given point
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetSitesNearestOutputFormatRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetSitesNearestOutputFormatResponse
     */
	public function getSitesNearestOutputFormat(
        \OpenAPI\OpenAPI\Models\Operations\GetSitesNearestOutputFormatRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetSitesNearestOutputFormatResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/sites/nearest.{outputFormat}', \OpenAPI\OpenAPI\Models\Operations\GetSitesNearestOutputFormatRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetSitesNearestOutputFormatRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetSitesNearestOutputFormatResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Find sites in a geographic area
     * 
     * Represents sites within a given area
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetSitesWithinOutputFormatRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetSitesWithinOutputFormatResponse
     */
	public function getSitesWithinOutputFormat(
        \OpenAPI\OpenAPI\Models\Operations\GetSitesWithinOutputFormatRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetSitesWithinOutputFormatResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/sites/within.{outputFormat}', \OpenAPI\OpenAPI\Models\Operations\GetSitesWithinOutputFormatRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetSitesWithinOutputFormatRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetSitesWithinOutputFormatResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Get a site by its unique ID
     * 
     * Represents an individual site
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetSitesSiteIDOutputFormatRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetSitesSiteIDOutputFormatResponse
     */
	public function getSitesSiteIDOutputFormat(
        \OpenAPI\OpenAPI\Models\Operations\GetSitesSiteIDOutputFormatRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetSitesSiteIDOutputFormatResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/sites/{siteID}.{outputFormat}', \OpenAPI\OpenAPI\Models\Operations\GetSitesSiteIDOutputFormatRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetSitesSiteIDOutputFormatRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetSitesSiteIDOutputFormatResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Represents all subsites of a given site
     * 
     * Represents all subsites of a given site
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetSitesSiteIDSubsitesOutputFormatRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetSitesSiteIDSubsitesOutputFormatResponse
     */
	public function getSitesSiteIDSubsitesOutputFormat(
        \OpenAPI\OpenAPI\Models\Operations\GetSitesSiteIDSubsitesOutputFormatRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetSitesSiteIDSubsitesOutputFormatResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/sites/{siteID}/subsites.{outputFormat}', \OpenAPI\OpenAPI\Models\Operations\GetSitesSiteIDSubsitesOutputFormatRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetSitesSiteIDSubsitesOutputFormatRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetSitesSiteIDSubsitesOutputFormatResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
}