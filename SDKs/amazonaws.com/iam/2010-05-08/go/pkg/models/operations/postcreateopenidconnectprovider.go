// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// POSTCreateOpenIDConnectProviderActionEnum
type POSTCreateOpenIDConnectProviderActionEnum string

const (
	POSTCreateOpenIDConnectProviderActionEnumCreateOpenIDConnectProvider POSTCreateOpenIDConnectProviderActionEnum = "CreateOpenIDConnectProvider"
)

func (e POSTCreateOpenIDConnectProviderActionEnum) ToPointer() *POSTCreateOpenIDConnectProviderActionEnum {
	return &e
}

func (e *POSTCreateOpenIDConnectProviderActionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "CreateOpenIDConnectProvider":
		*e = POSTCreateOpenIDConnectProviderActionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for POSTCreateOpenIDConnectProviderActionEnum: %v", v)
	}
}

// POSTCreateOpenIDConnectProviderVersionEnum
type POSTCreateOpenIDConnectProviderVersionEnum string

const (
	POSTCreateOpenIDConnectProviderVersionEnumTwoThousandAndTen0508 POSTCreateOpenIDConnectProviderVersionEnum = "2010-05-08"
)

func (e POSTCreateOpenIDConnectProviderVersionEnum) ToPointer() *POSTCreateOpenIDConnectProviderVersionEnum {
	return &e
}

func (e *POSTCreateOpenIDConnectProviderVersionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "2010-05-08":
		*e = POSTCreateOpenIDConnectProviderVersionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for POSTCreateOpenIDConnectProviderVersionEnum: %v", v)
	}
}

type POSTCreateOpenIDConnectProviderRequest struct {
	Action            POSTCreateOpenIDConnectProviderActionEnum  `queryParam:"style=form,explode=true,name=Action"`
	RequestBody       []byte                                     `request:"mediaType=text/xml"`
	Version           POSTCreateOpenIDConnectProviderVersionEnum `queryParam:"style=form,explode=true,name=Version"`
	XAmzAlgorithm     *string                                    `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string                                    `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string                                    `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string                                    `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string                                    `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string                                    `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string                                    `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
}

type POSTCreateOpenIDConnectProviderResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
