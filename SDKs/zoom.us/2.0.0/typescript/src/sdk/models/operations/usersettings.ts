/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

export class UserSettingsSecurity extends SpeakeasyBase {
  @SpeakeasyMetadata({
    data: "security, scheme=true;type=oauth2;name=Authorization",
  })
  oAuth: string;
}

/**
 * `0` - Facebook.<br>`1` - Google.<br>`99` - API.<br>`100` - Zoom.<br>`101` - SSO.
 */
export enum UserSettingsLoginTypeEnum {
  Zero = "0",
  One = "1",
  NinetyNine = "99",
  OneHundred = "100",
  OneHundredAndOne = "101",
}

/**
 * `meeting_authentication`: Use this query parameter to view [meeting authentication configuration](https://support.zoom.us/hc/en-us/articles/360037117472-Authentication-Profiles-for-Meetings-and-Webinars) applied on the user's account.<br>`recording_authentication`: Use this query parameter to view [recording authentication configuration](https://support.zoom.us/hc/en-us/articles/360037756671-Authentication-Profiles-for-Cloud-Recordings) applied on the user's account.<br>
 *
 * @remarks
 * `meeting_security`: Use this query parameter to view meeting security settings applied on the user's account.<br>
 */
export enum UserSettingsOptionEnum {
  MeetingAuthentication = "meeting_authentication",
  RecordingAuthentication = "recording_authentication",
}

export class UserSettingsRequest extends SpeakeasyBase {
  /**
   * Provide the name of the field by which you would like to filter the response. For example, if you provide "host_video" as the value of this field, you will get a response similar to the following:<br>
   *
   * @remarks
   * {
   *     "schedule_meeting": {
   *         "host_video": false
   *     }
   * }
   * <br>You can provide multiple values by separating them with commas(example: "host_video,participant_video‚Äù).
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=custom_query_fields",
  })
  customQueryFields?: string;

  /**
   * `0` - Facebook.<br>`1` - Google.<br>`99` - API.<br>`100` - Zoom.<br>`101` - SSO.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=login_type",
  })
  loginType?: UserSettingsLoginTypeEnum;

  /**
   * `meeting_authentication`: Use this query parameter to view [meeting authentication configuration](https://support.zoom.us/hc/en-us/articles/360037117472-Authentication-Profiles-for-Meetings-and-Webinars) applied on the user's account.<br>`recording_authentication`: Use this query parameter to view [recording authentication configuration](https://support.zoom.us/hc/en-us/articles/360037756671-Authentication-Profiles-for-Cloud-Recordings) applied on the user's account.<br>
   *
   * @remarks
   * `meeting_security`: Use this query parameter to view meeting security settings applied on the user's account.<br>
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=option",
  })
  option?: UserSettingsOptionEnum;

  /**
   * The user ID or email address of the user. For user-level apps, pass `me` as the value for userId.
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=userId",
  })
  userId: string;
}

/**
 * Choose between enhanced encryption and [end-to-end encryption](https://support.zoom.us/hc/en-us/articles/360048660871) when starting or a meeting. When using end-to-end encryption, several features (e.g. cloud recording, phone/SIP/H.323 dial-in) will be **automatically disabled**. <br><br>The value of this field can be one of the following:<br>
 *
 * @remarks
 * `enhanced_encryption`: Enhanced encryption. Encryption is stored in the cloud if you enable this option. <br>
 *
 * `e2ee`: [End-to-end encryption](https://support.zoom.us/hc/en-us/articles/360048660871). The encryption key is stored in your local device and can not be obtained by anyone else. Enabling this setting also **disables** the following features: join before host, cloud recording, streaming, live transcription, breakout rooms, polling, 1:1 private chat, and meeting reactions.
 */
export enum UserSettings200ApplicationXMLMeetingWebinarSecuritySettingsMeetingSecurityEncryptionTypeEnum {
  EnhancedEncryption = "enhanced_encryption",
  E2ee = "e2ee",
}

export enum UserSettings200ApplicationXMLMeetingWebinarSecuritySettingsMeetingSecurityMeetingPasswordRequirementConsecutiveCharactersLengthEnum {
  Zero = "0",
  Four = "4",
  Five = "5",
  Six = "6",
  Seven = "7",
  Eight = "8",
}

/**
 * Meeting/webinar [passcode requirements](https://support.zoom.us/hc/en-us/articles/360033559832-Meeting-and-webinar-passwords#h_a427384b-e383-4f80-864d-794bf0a37604).
 */
export class UserSettings200ApplicationXMLMeetingWebinarSecuritySettingsMeetingSecurityMeetingPasswordRequirement extends SpeakeasyBase {
  @SpeakeasyMetadata()
  consecutiveCharactersLength?: UserSettings200ApplicationXMLMeetingWebinarSecuritySettingsMeetingSecurityMeetingPasswordRequirementConsecutiveCharactersLengthEnum;

  /**
   * If set to `true`, the passcode must contain at least 1 letter (such as a,b,c...).
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  haveLetter?: boolean;

  /**
   * If set to `true`, the passcode must contain at least 1 number (such as 1,2,3...).
   */
  @SpeakeasyMetadata()
  haveNumber?: boolean;

  /**
   * If set to `true`, the passcode must have at least 1 special character (!,@,#...).
   */
  @SpeakeasyMetadata()
  haveSpecialCharacter?: boolean;

  /**
   * If set to `true`, the passcode must include both uppercase and lowercase characters.
   */
  @SpeakeasyMetadata()
  haveUpperAndLowerCharacters?: boolean;

  /**
   * The minimum length that the meeting/webinar passcode needs to have.
   */
  @SpeakeasyMetadata()
  length?: number;

  /**
   * If set to `true`, the passcode must only contain numbers and no other characters.
   */
  @SpeakeasyMetadata()
  onlyAllowNumeric?: boolean;

  /**
   * If set to `true`, users will be informed if the provided passcode is weak.
   */
  @SpeakeasyMetadata()
  weakEnhanceDetection?: boolean;
}

/**
 *
 * @remarks
 *
 * Specify who should be admitted to the waiting room. The value of this field can be one of the following:<br>
 * `0`: All attendees<br> `1`: Users who are not in your account<br> `2`: Users who are not in your account and are not part of your whitelisted domains that are specified in
 */
export enum UserSettings200ApplicationXMLMeetingWebinarSecuritySettingsMeetingSecurityWaitingRoomSettingsParticipantsToPlaceInWaitingRoomEnum {
  Zero = "0",
  One = "1",
  Two = "2",
}

/**
 * Specify the settings to be applied if waiting room is enabled.
 */
export class UserSettings200ApplicationXMLMeetingWebinarSecuritySettingsMeetingSecurityWaitingRoomSettings extends SpeakeasyBase {
  /**
   *
   * @remarks
   *
   * Specify who should be admitted to the waiting room. The value of this field can be one of the following:<br>
   * `0`: All attendees<br> `1`: Users who are not in your account<br> `2`: Users who are not in your account and are not part of your whitelisted domains that are specified in
   */
  @SpeakeasyMetadata()
  participantsToPlaceInWaitingRoom?: UserSettings200ApplicationXMLMeetingWebinarSecuritySettingsMeetingSecurityWaitingRoomSettingsParticipantsToPlaceInWaitingRoomEnum;

  /**
   * Specify who can admit participants from the waiting room. The value of this field can be one of the following:<br>
   *
   * @remarks
   * `0`: Host and co-hosts only<br> `1`: Host, co-hosts, and anyone who bypassed the waiting room (only if host and co-hosts are not present).
   *
   *
   *
   */
  @SpeakeasyMetadata()
  usersWhoCanAdmitParticipantsFromWaitingRoom?: number;

  /**
   * If the value of the `participants_to_place_in_waiting_room` field is `2`, use this setting to specify the domains that can bypass the waiting room feature. Separate multiple domains with commas(example: "aaa.com,bbb.com").
   */
  @SpeakeasyMetadata()
  whitelistedDomainsForWaitingRoom?: string;
}

export class UserSettings200ApplicationXMLMeetingWebinarSecuritySettingsMeetingSecurity extends SpeakeasyBase {
  /**
   * `true`: Require that all meetings are secured with at least one security option.
   *
   * @remarks
   *
   * This setting can only be disabled by Enterprise, ISV, Business (with more than 100 licenses), and Education accounts. [Learn more](https://marketplace.zoom.us/docs/guides/stay-up-to-date/announcements#meeting-security).
   */
  @SpeakeasyMetadata()
  autoSecurity?: boolean;

  /**
   * If set to `true`, meeting passcode will be encrypted and included in the invite link to allow participants to join with just one click without having to enter the passcode.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  embedPasswordInJoinLink?: boolean;

  /**
   * Choose between enhanced encryption and [end-to-end encryption](https://support.zoom.us/hc/en-us/articles/360048660871) when starting or a meeting. When using end-to-end encryption, several features (e.g. cloud recording, phone/SIP/H.323 dial-in) will be **automatically disabled**. <br><br>The value of this field can be one of the following:<br>
   *
   * @remarks
   * `enhanced_encryption`: Enhanced encryption. Encryption is stored in the cloud if you enable this option. <br>
   *
   * `e2ee`: [End-to-end encryption](https://support.zoom.us/hc/en-us/articles/360048660871). The encryption key is stored in your local device and can not be obtained by anyone else. Enabling this setting also **disables** the following features: join before host, cloud recording, streaming, live transcription, breakout rooms, polling, 1:1 private chat, and meeting reactions.
   */
  @SpeakeasyMetadata()
  encryptionType?: UserSettings200ApplicationXMLMeetingWebinarSecuritySettingsMeetingSecurityEncryptionTypeEnum;

  /**
   * Allow use of end-to-end encryption for meetings. If set to `true`, you can specify the encryption type in `encryption_type` field.
   */
  @SpeakeasyMetadata()
  endToEndEncryptedMeetings?: boolean;

  /**
   * If set to `true`, all instant, and scheduled meetings that users can join via client, or room systems will be passcode-protected. The Personal Meeting ID (PMI) meetings are not included in this setting.
   */
  @SpeakeasyMetadata()
  meetingPassword?: boolean;

  /**
   * Meeting/webinar [passcode requirements](https://support.zoom.us/hc/en-us/articles/360033559832-Meeting-and-webinar-passwords#h_a427384b-e383-4f80-864d-794bf0a37604).
   */
  @SpeakeasyMetadata()
  meetingPasswordRequirement?: UserSettings200ApplicationXMLMeetingWebinarSecuritySettingsMeetingSecurityMeetingPasswordRequirement;

  /**
   * Require passcode for participants joining by phone. If set to `true`, a numeric passcode will be required for participants joining by phone if your meeting has a passcode. For meeting with an alphanumeric passcode, a numeric version will be generated.
   */
  @SpeakeasyMetadata()
  phonePassword?: boolean;

  /**
   * If set to `true`, all Personal Meeting ID (PMI) meetings that users can join via client, or room systems will be passcode-protected.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  pmiPassword?: boolean;

  /**
   * Require a passcode for meetings which have already been scheduled.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  requirePasswordForScheduledMeeting?: boolean;

  /**
   * Require a passcode for webinars which have already been scheduled.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  requirePasswordForScheduledWebinar?: boolean;

  /**
   * When participants join a meeting, place them in a waiting room and require the host to admit them individually. Enabling the waiting room automatically disables the setting for allowing participants to join before host.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  waitingRoom?: boolean;

  /**
   * Specify the settings to be applied if waiting room is enabled.
   */
  @SpeakeasyMetadata()
  waitingRoomSettings?: UserSettings200ApplicationXMLMeetingWebinarSecuritySettingsMeetingSecurityWaitingRoomSettings;

  /**
   * If set to `true`, a passcode will be generated when scheduling a Webinar and participants require the passcode to join the Webinar.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  webinarPassword?: boolean;
}

export class UserSettings200ApplicationXMLMeetingWebinarSecuritySettings extends SpeakeasyBase {
  @SpeakeasyMetadata()
  meetingSecurity?: UserSettings200ApplicationXMLMeetingWebinarSecuritySettingsMeetingSecurity;
}

/**
 * Authentication type
 */
export enum UserSettings200ApplicationXml22AuthenticationOptionsTypeEnum {
  Internally = "internally",
  EnforceLogin = "enforce_login",
  EnforceLoginWithDomains = "enforce_login_with_domains",
}

export class UserSettings200ApplicationXml22AuthenticationOptions extends SpeakeasyBase {
  /**
   * Authentication default option
   */
  @SpeakeasyMetadata()
  defaultOption?: boolean;

  /**
   * Authentication domians
   */
  @SpeakeasyMetadata()
  domains?: string;

  /**
   * Authentication id
   */
  @SpeakeasyMetadata()
  id?: string;

  /**
   * Authentication name
   */
  @SpeakeasyMetadata()
  name?: string;

  /**
   * Authentication type
   */
  @SpeakeasyMetadata()
  type?: UserSettings200ApplicationXml22AuthenticationOptionsTypeEnum;

  /**
   * Authentication visible
   */
  @SpeakeasyMetadata()
  visible?: boolean;
}

export class UserSettings200ApplicationXml22 extends SpeakeasyBase {
  /**
   * Authentication Options
   */
  @SpeakeasyMetadata({
    elemType: UserSettings200ApplicationXml22AuthenticationOptions,
  })
  authenticationOptions?: UserSettings200ApplicationXml22AuthenticationOptions[];

  /**
   * Only authenticated users can view cloud recordings
   */
  @SpeakeasyMetadata()
  recordingAuthentication?: boolean;
}

/**
 *  Authentication type. Specify one of the following authentication types for the authentication profile:<br>
 *
 * @remarks
 *  * `enforce_login`: This option allows any users to join the meeting or webinar, as long as they are signed into their Zoom account.
 *  * `enforce_login_with_domains`: This option, allows you to specify a rule so that only those Zoom users whose email addresses contain a certain domain, can join the meeting or webinar. You can either add multiple domains using a comma in between and/or use a wildcard for listing domains.<br>
 *  * `enforce_login_with_same_account`: This option allows users to join the meeting or webinar with the same Zoom account.
 */
export enum UserSettings200ApplicationXml21AuthenticationOptionsTypeEnum {
  EnforceLogin = "enforce_login",
  EnforceLoginWithSameAccount = "enforce_login_with_same_account",
  EnforceLoginWithDomains = "enforce_login_with_domains",
}

export class UserSettings200ApplicationXml21AuthenticationOptions extends SpeakeasyBase {
  /**
   * Authentication default option
   */
  @SpeakeasyMetadata()
  defaultOption?: boolean;

  /**
   * Authentication domains
   */
  @SpeakeasyMetadata()
  domains?: string;

  /**
   * Authentication id
   */
  @SpeakeasyMetadata()
  id?: string;

  /**
   * Authentication name
   */
  @SpeakeasyMetadata()
  name?: string;

  /**
   *  Authentication type. Specify one of the following authentication types for the authentication profile:<br>
   *
   * @remarks
   *  * `enforce_login`: This option allows any users to join the meeting or webinar, as long as they are signed into their Zoom account.
   *  * `enforce_login_with_domains`: This option, allows you to specify a rule so that only those Zoom users whose email addresses contain a certain domain, can join the meeting or webinar. You can either add multiple domains using a comma in between and/or use a wildcard for listing domains.<br>
   *  * `enforce_login_with_same_account`: This option allows users to join the meeting or webinar with the same Zoom account.
   */
  @SpeakeasyMetadata()
  type?: UserSettings200ApplicationXml21AuthenticationOptionsTypeEnum;

  /**
   * Authentication visible
   */
  @SpeakeasyMetadata()
  visible?: boolean;
}

export class UserSettings200ApplicationXml21 extends SpeakeasyBase {
  /**
   * Meeting Authentication Options
   */
  @SpeakeasyMetadata({
    elemType: UserSettings200ApplicationXml21AuthenticationOptions,
  })
  authenticationOptions?: UserSettings200ApplicationXml21AuthenticationOptions[];

  /**
   * Only authenticated users can join meetings
   */
  @SpeakeasyMetadata()
  meetingAuthentication?: boolean;
}

export class UserSettings200ApplicationXMLUserSettingsUserSettingsNotificationSettings extends SpeakeasyBase {
  /**
   * When an alternative host is set or removed from a meeting.
   */
  @SpeakeasyMetadata()
  alternativeHostReminder?: boolean;

  /**
   * When a meeting is cancelled.
   */
  @SpeakeasyMetadata()
  cancelMeetingReminder?: boolean;

  /**
   * When attendees join meeting before host.
   */
  @SpeakeasyMetadata()
  jbhReminder?: boolean;

  /**
   * Notify the host there is a meeting is scheduled, rescheduled, or cancelled.
   */
  @SpeakeasyMetadata()
  scheduleForReminder?: boolean;
}

export class UserSettings200ApplicationXMLUserSettingsUserSettingsFeatureSettings extends SpeakeasyBase {
  /**
   * Host meeting in China.
   */
  @SpeakeasyMetadata()
  cnMeeting?: boolean;

  /**
   * Host meeting in India.
   */
  @SpeakeasyMetadata()
  inMeeting?: boolean;

  /**
   * Large meeting feature.
   */
  @SpeakeasyMetadata()
  largeMeeting?: boolean;

  /**
   * Large meeting capacity: can be 500 or 1000, depending on if the user has a large meeting capacity plan subscription or not.
   */
  @SpeakeasyMetadata()
  largeMeetingCapacity?: number;

  /**
   * User‚Äôs meeting capacity.
   */
  @SpeakeasyMetadata()
  meetingCapacity?: number;

  /**
   * Webinar feature.
   */
  @SpeakeasyMetadata()
  webinar?: boolean;

  /**
   * Webinar capacity: can be 100, 500, 1000, 3000, 5000 or 10000, depending on if the user has a webinar capacity plan subscription or not.
   */
  @SpeakeasyMetadata()
  webinarCapacity?: number;

  /**
   * Zoom phone feature.
   */
  @SpeakeasyMetadata()
  zoomPhone?: boolean;
}

/**
 * If you have set the value of `custom_data_center_regions` to `true`, specify the data center regions that you would like to opt in to (country codes from among: ["DE", "NL", "HK", "AU", "IN", "LA", "TY", "CN", "US", "CA"]).
 *
 * @remarks
 *
 */
export enum UserSettings200ApplicationXMLUserSettingsUserSettingsMeetingSettingsDataCenterRegionsEnum {
  Hk = "HK",
  Au = "AU",
  In = "IN",
  Ty = "TY",
  Cn = "CN",
  Us = "US",
  Ca = "CA",
  De = "DE",
  Nl = "NL",
  La = "LA",
}

/**
 * Play sound when participants join or leave:<br>`host` - When host joins or leaves.<br>`all` - When any participant joins or leaves.<br>`none` - No join or leave sound.
 */
export enum UserSettings200ApplicationXMLUserSettingsUserSettingsMeetingSettingsEntryExitChimeEnum {
  Host = "host",
  All = "all",
  None = "none",
}

export class UserSettings200ApplicationXMLUserSettingsUserSettingsMeetingSettingsVirtualBackgroundSettingsFiles extends SpeakeasyBase {
  /**
   * Unique identifier of the file.
   */
  @SpeakeasyMetadata()
  id?: string;

  /**
   * Indicates whether or not this file is the default virtual background file.
   */
  @SpeakeasyMetadata()
  isDefault?: boolean;

  /**
   * File name.
   */
  @SpeakeasyMetadata()
  name?: string;

  /**
   * File size.
   */
  @SpeakeasyMetadata()
  size?: string;

  /**
   * File type.
   */
  @SpeakeasyMetadata()
  type?: string;
}

/**
 * Settings to manage virtual background.
 */
export class UserSettings200ApplicationXMLUserSettingsUserSettingsMeetingSettingsVirtualBackgroundSettings extends SpeakeasyBase {
  /**
   * Allow user to upload custom backgrounds.
   */
  @SpeakeasyMetadata()
  allowUploadCustom?: boolean;

  /**
   * Allow use of videos for virtual backgrounds.
   */
  @SpeakeasyMetadata()
  allowVideos?: boolean;

  /**
   * Enable virtual background.
   */
  @SpeakeasyMetadata()
  enable?: boolean;

  @SpeakeasyMetadata({
    elemType:
      UserSettings200ApplicationXMLUserSettingsUserSettingsMeetingSettingsVirtualBackgroundSettingsFiles,
  })
  files?: UserSettings200ApplicationXMLUserSettingsUserSettingsMeetingSettingsVirtualBackgroundSettingsFiles[];
}

/**
 * Indicates who can share their screen or content during meetings. The value can be one of the following: <br>
 *
 * @remarks
 * `host`: Only host can share the screen.<br>
 * `all`: Both hosts and attendees can share their screen during meetings. For Webinar, the hosts and panelists can start screen sharing, but not the attendees.
 *
 */
export enum UserSettings200ApplicationXMLUserSettingsUserSettingsMeetingSettingsWhoCanShareScreenEnum {
  Host = "host",
  All = "all",
}

/**
 * Indicates who is allowed to start sharing screen when someone else in the meeting is sharing their screen. The value can be one of the following:<br>
 *
 * @remarks
 * `host`: Only a host can share the screen when someone else is sharing.<br>
 * `all`: Anyone in the meeting is allowed to start sharing their screen when someone else is sharing. For Webinar, the hosts and panelists can start screen sharing, but not the attendees.
 *
 */
export enum UserSettings200ApplicationXMLUserSettingsUserSettingsMeetingSettingsWhoCanShareScreenWhenSomeoneIsSharingEnum {
  Host = "host",
  All = "all",
}

export class UserSettings200ApplicationXMLUserSettingsUserSettingsMeetingSettings extends SpeakeasyBase {
  /**
   * Allow live streaming.
   */
  @SpeakeasyMetadata()
  allowLiveStreaming?: boolean;

  /**
   * Allow participants to use annotation tools.
   */
  @SpeakeasyMetadata()
  annotation?: boolean;

  /**
   * Allow host to put attendee on hold.
   *
   * @remarks
   *
   * **This field has been deprecated and is no longer supported.**
   */
  @SpeakeasyMetadata()
  attendeeOnHold?: boolean;

  /**
   * Auto save all in-meeting chats.
   */
  @SpeakeasyMetadata()
  autoSavingChat?: boolean;

  /**
   * Allow host to split meeting participants into separate breakout rooms.
   */
  @SpeakeasyMetadata()
  breakoutRoom?: boolean;

  /**
   * Enable chat during meeting for all participants.
   */
  @SpeakeasyMetadata()
  chat?: boolean;

  /**
   * Enable closed captions.
   */
  @SpeakeasyMetadata()
  closedCaption?: boolean;

  /**
   * Allow the host to add co-hosts.
   */
  @SpeakeasyMetadata()
  coHost?: boolean;

  /**
   * If set to `true`, you can [select data center regions](https://support.zoom.us/hc/en-us/articles/360042411451-Selecting-data-center-regions-for-hosted-meetings-and-webinars) to use for hosting your real-time meeting and webinar traffic. These regions can be provided in the `data_center_regions` field. If set to `false`, the regions cannot be customized and the default regions will be used.
   */
  @SpeakeasyMetadata()
  customDataCenterRegions?: boolean;

  /**
   * Allow custom live streaming.
   */
  @SpeakeasyMetadata()
  customLiveStreamingService?: boolean;

  /**
   * Custom service instructions.
   */
  @SpeakeasyMetadata()
  customServiceInstructions?: string;

  /**
   * If you have set the value of `custom_data_center_regions` to `true`, specify the data center regions that you would like to opt in to (country codes from among: ["DE", "NL", "HK", "AU", "IN", "LA", "TY", "CN", "US", "CA"]).
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  dataCenterRegions?: UserSettings200ApplicationXMLUserSettingsUserSettingsMeetingSettingsDataCenterRegionsEnum;

  /**
   * Zoom requires encryption for all data between the Zoom cloud, Zoom client, and Zoom Room. Require encryption for 3rd party endpoints (H323/SIP).
   */
  @SpeakeasyMetadata()
  e2eEncryption?: boolean;

  /**
   * Play sound when participants join or leave:<br>`host` - When host joins or leaves.<br>`all` - When any participant joins or leaves.<br>`none` - No join or leave sound.
   */
  @SpeakeasyMetadata()
  entryExitChime?: UserSettings200ApplicationXMLUserSettingsUserSettingsMeetingSettingsEntryExitChimeEnum;

  /**
   * Allow another user to take control of the camera.
   */
  @SpeakeasyMetadata()
  farEndCameraControl?: boolean;

  /**
   * Enable option to send feedback to Zoom at the end of the meeting.
   */
  @SpeakeasyMetadata()
  feedback?: boolean;

  /**
   * Indicates whether [in-meeting file transfer](https://support.zoom.us/hc/en-us/articles/209605493-In-meeting-file-transfer) setting has been enabled for the user or not.
   */
  @SpeakeasyMetadata()
  fileTransfer?: boolean;

  /**
   * Enable group HD video.
   */
  @SpeakeasyMetadata()
  groupHd?: boolean;

  /**
   * Enable non-verbal feedback through screens.
   */
  @SpeakeasyMetadata()
  nonVerbalFeedback?: boolean;

  /**
   * Add polls to the meeting controls.
   */
  @SpeakeasyMetadata()
  polling?: boolean;

  /**
   * Enable 1:1 private chat between participants during meetings.
   */
  @SpeakeasyMetadata()
  privateChat?: boolean;

  /**
   * Record and play their own voice.
   */
  @SpeakeasyMetadata()
  recordPlayVoice?: boolean;

  /**
   * Enable remote control during screensharing.
   */
  @SpeakeasyMetadata()
  remoteControl?: boolean;

  /**
   * Allow host to provide 1:1 remote support to a participant.
   */
  @SpeakeasyMetadata()
  remoteSupport?: boolean;

  /**
   * Indicates whether the [**Request permission to unmute participants**](https://support.zoom.us/hc/en-us/articles/203435537-Muting-and-unmuting-participants-in-a-meeting#h_01EGK4XFWS1SJGZ71MYGKF7260) option has been enabled for the user or not.
   */
  @SpeakeasyMetadata()
  requestPermissionToUnmute?: boolean;

  /**
   * Allow host and participants to share their screen or content during meetings
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  screenSharing?: boolean;

  /**
   * Share dual camera (deprecated).
   */
  @SpeakeasyMetadata()
  shareDualCamera?: boolean;

  /**
   * Always show meeting controls during a meeting.
   */
  @SpeakeasyMetadata()
  showMeetingControlToolbar?: boolean;

  /**
   * Enable virtual background.
   */
  @SpeakeasyMetadata()
  virtualBackground?: boolean;

  /**
   * Settings to manage virtual background.
   */
  @SpeakeasyMetadata()
  virtualBackgroundSettings?: UserSettings200ApplicationXMLUserSettingsUserSettingsMeetingSettingsVirtualBackgroundSettings;

  /**
   * Enable Waiting room - if enabled, attendees can only join after host approves.
   */
  @SpeakeasyMetadata()
  waitingRoom?: boolean;

  /**
   * Indicates who can share their screen or content during meetings. The value can be one of the following: <br>
   *
   * @remarks
   * `host`: Only host can share the screen.<br>
   * `all`: Both hosts and attendees can share their screen during meetings. For Webinar, the hosts and panelists can start screen sharing, but not the attendees.
   *
   */
  @SpeakeasyMetadata()
  whoCanShareScreen?: UserSettings200ApplicationXMLUserSettingsUserSettingsMeetingSettingsWhoCanShareScreenEnum;

  /**
   * Indicates who is allowed to start sharing screen when someone else in the meeting is sharing their screen. The value can be one of the following:<br>
   *
   * @remarks
   * `host`: Only a host can share the screen when someone else is sharing.<br>
   * `all`: Anyone in the meeting is allowed to start sharing their screen when someone else is sharing. For Webinar, the hosts and panelists can start screen sharing, but not the attendees.
   *
   */
  @SpeakeasyMetadata()
  whoCanShareScreenWhenSomeoneIsSharing?: UserSettings200ApplicationXMLUserSettingsUserSettingsMeetingSettingsWhoCanShareScreenWhenSomeoneIsSharingEnum;

  /**
   * Allow livestreaming by host through Workplace by Facebook.
   */
  @SpeakeasyMetadata()
  workplaceByFacebook?: boolean;
}

export class UserSettings200ApplicationXMLUserSettingsProfileRecordingStorageLocation extends SpeakeasyBase {
  /**
   * Users can choose the country to store their recorded content. Content can include meeting, webinar, and phone recordings, as well as voicemail, transcripts, and custom greeting prompts. See [Managing the Communications Content storage location](https://support.zoom.us/hc/en-us/articles/360050781131) for details.
   *
   * @remarks
   *
   * Provide abbreviated country codes as the value for this field. See the [Countries abbreviation list](https://marketplace.zoom.us/docs/api-reference/other-references/abbreviation-lists#countries) for details.
   */
  @SpeakeasyMetadata()
  allowedValues?: string[];

  /**
   * Abbreviated country code.
   */
  @SpeakeasyMetadata()
  value?: string;
}

export class UserSettings200ApplicationXMLUserSettingsProfile extends SpeakeasyBase {
  @SpeakeasyMetadata()
  recordingStorageLocation?: UserSettings200ApplicationXMLUserSettingsProfileRecordingStorageLocation;
}

/**
 * Automatic recording:<br>`local` - Record on local.<br>`cloud` - Record on cloud.<br>`none` - Disabled.
 */
export enum UserSettings200ApplicationXMLUserSettingsUserSettingsRecordingSettingsAutoRecordingEnum {
  Local = "local",
  Cloud = "cloud",
  None = "none",
}

/**
 * Setting to allow cloud recording access only from specific IP address ranges.
 *
 * @remarks
 *
 */
export class UserSettings200ApplicationXMLUserSettingsUserSettingsRecordingSettingsIpAddressAccessControl extends SpeakeasyBase {
  /**
   * If set to `true`, the cloud recordings of this account can only be accessed by the IP addresses defined in the `ip_addresses_or_ranges` property.
   *
   * @remarks
   *
   *
   */
  @SpeakeasyMetadata()
  enable?: boolean;

  /**
   * IP addresses or ranges that have access to the cloud recordings. Separate multiple IP ranges with comma. Use n.n.n.n, n.n.n.n/n or n.n.n.n - n.n.n.n syntax where n is a number.
   *
   * @remarks
   *
   * Example: `46.33.24.184, 48.99.100.2/25` or `200.181.108.17 - 220.181.108.157`
   *
   *
   */
  @SpeakeasyMetadata()
  ipAddressesOrRanges?: string;
}

/**
 * This object represents the minimum passcode requirements set for recordings via Account Recording Settings.
 */
export class UserSettings200ApplicationXMLUserSettingsUserSettingsRecordingSettingsRecordingPasswordRequirement extends SpeakeasyBase {
  /**
   * Indicates whether or not passcode must contain at least one alphabetical letter (a, b, c..).
   */
  @SpeakeasyMetadata()
  haveLetter?: boolean;

  /**
   * Indicates whether or not passcode must contain at least one number(1, 2, 3..).
   */
  @SpeakeasyMetadata()
  haveNumber?: boolean;

  /**
   * Indicates whether or not passcode must contain at least one special character(!, @, #..).
   */
  @SpeakeasyMetadata()
  haveSpecialCharacter?: boolean;

  /**
   * Minimum required length for the passcode.
   */
  @SpeakeasyMetadata()
  length?: number;

  /**
   * Indicates whether or not passcode must contain only numeric characters.
   */
  @SpeakeasyMetadata()
  onlyAllowNumeric?: boolean;
}

export class UserSettings200ApplicationXMLUserSettingsUserSettingsRecordingSettings extends SpeakeasyBase {
  /**
   * Ask host to confirm the disclaimer.
   */
  @SpeakeasyMetadata()
  askHostToConfirmDisclaimer?: boolean;

  /**
   * This field can be used if `recording_disclaimer` is set to true. This field indicates whether or not you would like to ask participants for consent when a recording starts. The value can be one of the following:<br>
   *
   * @remarks
   * * `true`: Ask participants for consent when a recording starts. <br>
   * * `false`: Do not ask participants for consent when a recording starts.
   */
  @SpeakeasyMetadata()
  askParticipantsToConsentDisclaimer?: boolean;

  /**
   * Auto delete cloud recordings.
   */
  @SpeakeasyMetadata()
  autoDeleteCmr?: boolean;

  /**
   * A specified number of days of auto delete cloud recordings.
   */
  @SpeakeasyMetadata()
  autoDeleteCmrDays?: number;

  /**
   * Automatic recording:<br>`local` - Record on local.<br>`cloud` - Record on cloud.<br>`none` - Disabled.
   */
  @SpeakeasyMetadata()
  autoRecording?: UserSettings200ApplicationXMLUserSettingsUserSettingsRecordingSettingsAutoRecordingEnum;

  /**
   * Cloud recording.
   */
  @SpeakeasyMetadata()
  cloudRecording?: boolean;

  /**
   * Host can pause/stop the auto recording in the cloud.
   */
  @SpeakeasyMetadata()
  hostPauseStopRecording?: boolean;

  /**
   * Setting to allow cloud recording access only from specific IP address ranges.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  ipAddressAccessControl?: UserSettings200ApplicationXMLUserSettingsUserSettingsRecordingSettingsIpAddressAccessControl;

  /**
   * Local recording.
   */
  @SpeakeasyMetadata()
  localRecording?: boolean;

  /**
   * Record an audio only file.
   */
  @SpeakeasyMetadata()
  recordAudioFile?: boolean;

  /**
   * Record the gallery view.
   */
  @SpeakeasyMetadata()
  recordGalleryView?: boolean;

  /**
   * Record the active speaker view.
   */
  @SpeakeasyMetadata()
  recordSpeakerView?: boolean;

  /**
   * Audio transcript.
   */
  @SpeakeasyMetadata()
  recordingAudioTranscript?: boolean;

  /**
   * Show a disclaimer to participants before a recording starts
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  recordingDisclaimer?: boolean;

  /**
   * This object represents the minimum passcode requirements set for recordings via Account Recording Settings.
   */
  @SpeakeasyMetadata()
  recordingPasswordRequirement?: UserSettings200ApplicationXMLUserSettingsUserSettingsRecordingSettingsRecordingPasswordRequirement;

  /**
   * Save chat text from the meeting.
   */
  @SpeakeasyMetadata()
  saveChatText?: boolean;

  /**
   * Show timestamp on video.
   */
  @SpeakeasyMetadata()
  showTimestamp?: boolean;
}

/**
 * Determine how participants can join the audio portion of the meeting:<br>`both` - Telephony and VoIP.<br>`telephony` - Audio PSTN telephony only.<br>`voip` - VoIP only.<br>`thirdParty` - Third party audio conference.
 */
export enum UserSettings200ApplicationXMLUserSettingsUserSettingsMeetingSettingsAudioTypeEnum {
  Both = "both",
  Telephony = "telephony",
  Voip = "voip",
  ThirdParty = "thirdParty",
}

export enum UserSettings200ApplicationXMLUserSettingsUserSettingsMeetingSettingsMeetingPasswordRequirementConsecutiveCharactersLengthEnum {
  Zero = "0",
  Four = "4",
  Five = "5",
  Six = "6",
  Seven = "7",
  Eight = "8",
}

/**
 * Account wide meeting/webinar [passcode requirements](https://support.zoom.us/hc/en-us/articles/360033559832-Meeting-and-webinar-passwords#h_a427384b-e383-4f80-864d-794bf0a37604).
 */
export class UserSettings200ApplicationXMLUserSettingsUserSettingsMeetingSettingsMeetingPasswordRequirement extends SpeakeasyBase {
  @SpeakeasyMetadata()
  consecutiveCharactersLength?: UserSettings200ApplicationXMLUserSettingsUserSettingsMeetingSettingsMeetingPasswordRequirementConsecutiveCharactersLengthEnum;

  /**
   * If set to `true`, the passcode must contain at least 1 letter (such as a,b,c...).
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  haveLetter?: boolean;

  /**
   * If set to `true`, the passcode must contain at least 1 number (such as 1,2,3...).
   */
  @SpeakeasyMetadata()
  haveNumber?: boolean;

  /**
   * If set to `true`, the passcode must have at least 1 special character (!,@,#...).
   */
  @SpeakeasyMetadata()
  haveSpecialCharacter?: boolean;

  /**
   * If set to `true`, the passcode must include both uppercase and lowercase characters.
   */
  @SpeakeasyMetadata()
  haveUpperAndLowerCharacters?: boolean;

  /**
   * The minimum length that the meeting/webinar passcode needs to have.
   */
  @SpeakeasyMetadata()
  length?: number;

  /**
   * If set to `true`, the passcode must only contain numbers and no other characters.
   */
  @SpeakeasyMetadata()
  onlyAllowNumeric?: boolean;

  /**
   * If set to `true`, users will be informed if the provided passcode is weak.
   */
  @SpeakeasyMetadata()
  weakEnhanceDetection?: boolean;
}

/**
 * Require a passcode for Personal Meeting ID (PMI). This setting is always enabled for free accounts and Pro accounts with a single host and cannot be modified for these accounts.
 *
 * @remarks
 *
 */
export enum UserSettings200ApplicationXMLUserSettingsUserSettingsMeetingSettingsRequirePasswordForPmiMeetingsEnum {
  JbhOnly = "jbh_only",
  All = "all",
  None = "none",
}

export class UserSettings200ApplicationXMLUserSettingsUserSettingsMeetingSettings1 extends SpeakeasyBase {
  /**
   * Determine how participants can join the audio portion of the meeting:<br>`both` - Telephony and VoIP.<br>`telephony` - Audio PSTN telephony only.<br>`voip` - VoIP only.<br>`thirdParty` - Third party audio conference.
   */
  @SpeakeasyMetadata()
  audioType?: UserSettings200ApplicationXMLUserSettingsUserSettingsMeetingSettingsAudioTypeEnum;

  /**
   * Passcode for already scheduled meetings
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  defaultPasswordForScheduledMeetings?: string;

  /**
   * If the value is set to `true`, the meeting passcode will be encrypted and included in the join meeting link to allow participants to join with just one click without having to enter the passcode.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  embedPasswordInJoinLink?: boolean;

  /**
   * Require a passcode for personal meetings if attendees can join before host.
   */
  @SpeakeasyMetadata()
  forcePmiJbhPassword?: boolean;

  /**
   * Start meetings with host video on.
   */
  @SpeakeasyMetadata()
  hostVideo?: boolean;

  /**
   * Join the meeting before host arrives.
   */
  @SpeakeasyMetadata()
  joinBeforeHost?: boolean;

  /**
   * Account wide meeting/webinar [passcode requirements](https://support.zoom.us/hc/en-us/articles/360033559832-Meeting-and-webinar-passwords#h_a427384b-e383-4f80-864d-794bf0a37604).
   */
  @SpeakeasyMetadata()
  meetingPasswordRequirement?: UserSettings200ApplicationXMLUserSettingsUserSettingsMeetingSettingsMeetingPasswordRequirement;

  /**
   * Start meetings with participants video on.
   */
  @SpeakeasyMetadata()
  participantsVideo?: boolean;

  /**
   * Personal Meeting Setting.<br><br>
   *
   * @remarks
   * `true`: Indicates that the **"Enable Personal Meeting ID"** setting is turned on. Users can choose to use personal meeting ID for their meetings. <br><br>
   * `false`: Indicates that the **"Enable Personal Meeting ID"** setting is [turned off](https://support.zoom.us/hc/en-us/articles/201362843-Personal-meeting-ID-PMI-and-personal-link#h_aa0335c8-3b06-41bc-bc1f-a8b84ef17f2a). If this setting is disabled, meetings that were scheduled with PMI will be invalid. Scheduled meetings will need to be manually updated.
   * For Zoom Phone only:If a user has been assigned a desk phone, **"Elevate to Zoom Meeting"** on desk phone will be disabled.
   *
   *
   *
   */
  @SpeakeasyMetadata()
  personalMeeting?: boolean;

  /**
   * PMI passcode
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  pmiPassword?: string;

  /**
   * Generate and require passcode for participants joining by phone.
   */
  @SpeakeasyMetadata()
  pstnPasswordProtected?: boolean;

  /**
   * Require a passcode for instant meetings. If you use PMI for your instant meetings, this option will be disabled. This setting is always enabled for free accounts and Pro accounts with a single host and cannot be modified for these accounts.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  requirePasswordForInstantMeetings?: boolean;

  /**
   * Require a passcode for Personal Meeting ID (PMI). This setting is always enabled for free accounts and Pro accounts with a single host and cannot be modified for these accounts.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  requirePasswordForPmiMeetings?: UserSettings200ApplicationXMLUserSettingsUserSettingsMeetingSettingsRequirePasswordForPmiMeetingsEnum;

  /**
   * Require a passcode for meetings which have already been scheduled
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  requirePasswordForScheduledMeetings?: boolean;

  /**
   * Require a passcode when scheduling new meetings.This setting is always enabled for free accounts and Pro accounts with a single host and cannot be modified for these accounts.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  requirePasswordForSchedulingNewMeetings?: boolean;

  /**
   * Use Personal Meeting ID (PMI) when starting an instant meeting
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  usePmiForInstantMeetings?: boolean;

  /**
   * Use Personal Meeting ID (PMI) when scheduling a meeting
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  usePmiForScheduledMeetings?: boolean;
}

/**
 * Indicates where most of the participants call into or call from duriing a meeting.
 */
export class UserSettings200ApplicationXMLUserSettingsUserSettingsMeetingSettingsTelephonyRegions extends SpeakeasyBase {
  /**
   * Telephony region options provided by Zoom to select from.
   */
  @SpeakeasyMetadata()
  allowedValues?: string[];

  /**
   * Telephony regions selected by the account to indicate where most of the participants call into or call from during a meeting.
   */
  @SpeakeasyMetadata()
  selectionValues?: string[];
}

export class UserSettings200ApplicationXMLUserSettingsUserSettingsMeetingSettings2 extends SpeakeasyBase {
  /**
   * Third party audio conference info.
   */
  @SpeakeasyMetadata()
  audioConferenceInfo?: string;

  /**
   * Show the international numbers link on the invitation email.
   */
  @SpeakeasyMetadata()
  showInternationalNumbersLink?: boolean;

  /**
   * Indicates where most of the participants call into or call from duriing a meeting.
   */
  @SpeakeasyMetadata()
  telephonyRegions?: UserSettings200ApplicationXMLUserSettingsUserSettingsMeetingSettingsTelephonyRegions;

  /**
   * Third party audio conference.
   */
  @SpeakeasyMetadata()
  thirdPartyAudio?: boolean;
}

/**
 * Account Settings: TSP.
 */
export class UserSettings200ApplicationXMLUserSettingsUserSettingsTSPSettings extends SpeakeasyBase {
  /**
   * Call Out
   */
  @SpeakeasyMetadata()
  callOut?: boolean;

  /**
   * Call Out Countries/Regions
   */
  @SpeakeasyMetadata()
  callOutCountries?: any[];

  /**
   * Show international numbers link on the invitation email
   */
  @SpeakeasyMetadata()
  showInternationalNumbersLink?: boolean;
}

export class UserSettings200ApplicationXMLUserSettings extends SpeakeasyBase {
  @SpeakeasyMetadata()
  emailNotification?: UserSettings200ApplicationXMLUserSettingsUserSettingsNotificationSettings;

  @SpeakeasyMetadata()
  feature?: UserSettings200ApplicationXMLUserSettingsUserSettingsFeatureSettings;

  @SpeakeasyMetadata()
  inMeeting?: UserSettings200ApplicationXMLUserSettingsUserSettingsMeetingSettings;

  @SpeakeasyMetadata()
  profile?: UserSettings200ApplicationXMLUserSettingsProfile;

  @SpeakeasyMetadata()
  recording?: UserSettings200ApplicationXMLUserSettingsUserSettingsRecordingSettings;

  @SpeakeasyMetadata()
  scheduleMeeting?: UserSettings200ApplicationXMLUserSettingsUserSettingsMeetingSettings1;

  @SpeakeasyMetadata()
  telephony?: UserSettings200ApplicationXMLUserSettingsUserSettingsMeetingSettings2;

  /**
   * Account Settings: TSP.
   */
  @SpeakeasyMetadata()
  tsp?: UserSettings200ApplicationXMLUserSettingsUserSettingsTSPSettings;
}

/**
 * Choose between enhanced encryption and [end-to-end encryption](https://support.zoom.us/hc/en-us/articles/360048660871) when starting or a meeting. When using end-to-end encryption, several features (e.g. cloud recording, phone/SIP/H.323 dial-in) will be **automatically disabled**. <br><br>The value of this field can be one of the following:<br>
 *
 * @remarks
 * `enhanced_encryption`: Enhanced encryption. Encryption is stored in the cloud if you enable this option. <br>
 *
 * `e2ee`: [End-to-end encryption](https://support.zoom.us/hc/en-us/articles/360048660871). The encryption key is stored in your local device and can not be obtained by anyone else. Enabling this setting also **disables** the following features: join before host, cloud recording, streaming, live transcription, breakout rooms, polling, 1:1 private chat, and meeting reactions.
 */
export enum UserSettings200ApplicationJSONMeetingWebinarSecuritySettingsMeetingSecurityEncryptionTypeEnum {
  EnhancedEncryption = "enhanced_encryption",
  E2ee = "e2ee",
}

export enum UserSettings200ApplicationJSONMeetingWebinarSecuritySettingsMeetingSecurityMeetingPasswordRequirementConsecutiveCharactersLengthEnum {
  Zero = "0",
  Four = "4",
  Five = "5",
  Six = "6",
  Seven = "7",
  Eight = "8",
}

/**
 * Meeting/webinar [passcode requirements](https://support.zoom.us/hc/en-us/articles/360033559832-Meeting-and-webinar-passwords#h_a427384b-e383-4f80-864d-794bf0a37604).
 */
export class UserSettings200ApplicationJSONMeetingWebinarSecuritySettingsMeetingSecurityMeetingPasswordRequirement extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "consecutive_characters_length" })
  consecutiveCharactersLength?: UserSettings200ApplicationJSONMeetingWebinarSecuritySettingsMeetingSecurityMeetingPasswordRequirementConsecutiveCharactersLengthEnum;

  /**
   * If set to `true`, the passcode must contain at least 1 letter (such as a,b,c...).
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "have_letter" })
  haveLetter?: boolean;

  /**
   * If set to `true`, the passcode must contain at least 1 number (such as 1,2,3...).
   */
  @SpeakeasyMetadata()
  @Expose({ name: "have_number" })
  haveNumber?: boolean;

  /**
   * If set to `true`, the passcode must have at least 1 special character (!,@,#...).
   */
  @SpeakeasyMetadata()
  @Expose({ name: "have_special_character" })
  haveSpecialCharacter?: boolean;

  /**
   * If set to `true`, the passcode must include both uppercase and lowercase characters.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "have_upper_and_lower_characters" })
  haveUpperAndLowerCharacters?: boolean;

  /**
   * The minimum length that the meeting/webinar passcode needs to have.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "length" })
  length?: number;

  /**
   * If set to `true`, the passcode must only contain numbers and no other characters.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "only_allow_numeric" })
  onlyAllowNumeric?: boolean;

  /**
   * If set to `true`, users will be informed if the provided passcode is weak.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "weak_enhance_detection" })
  weakEnhanceDetection?: boolean;
}

/**
 *
 * @remarks
 *
 * Specify who should be admitted to the waiting room. The value of this field can be one of the following:<br>
 * `0`: All attendees<br> `1`: Users who are not in your account<br> `2`: Users who are not in your account and are not part of your whitelisted domains that are specified in
 */
export enum UserSettings200ApplicationJSONMeetingWebinarSecuritySettingsMeetingSecurityWaitingRoomSettingsParticipantsToPlaceInWaitingRoomEnum {
  Zero = "0",
  One = "1",
  Two = "2",
}

/**
 * Specify the settings to be applied if waiting room is enabled.
 */
export class UserSettings200ApplicationJSONMeetingWebinarSecuritySettingsMeetingSecurityWaitingRoomSettings extends SpeakeasyBase {
  /**
   *
   * @remarks
   *
   * Specify who should be admitted to the waiting room. The value of this field can be one of the following:<br>
   * `0`: All attendees<br> `1`: Users who are not in your account<br> `2`: Users who are not in your account and are not part of your whitelisted domains that are specified in
   */
  @SpeakeasyMetadata()
  @Expose({ name: "participants_to_place_in_waiting_room" })
  participantsToPlaceInWaitingRoom?: UserSettings200ApplicationJSONMeetingWebinarSecuritySettingsMeetingSecurityWaitingRoomSettingsParticipantsToPlaceInWaitingRoomEnum;

  /**
   * Specify who can admit participants from the waiting room. The value of this field can be one of the following:<br>
   *
   * @remarks
   * `0`: Host and co-hosts only<br> `1`: Host, co-hosts, and anyone who bypassed the waiting room (only if host and co-hosts are not present).
   *
   *
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "users_who_can_admit_participants_from_waiting_room" })
  usersWhoCanAdmitParticipantsFromWaitingRoom?: number;

  /**
   * If the value of the `participants_to_place_in_waiting_room` field is `2`, use this setting to specify the domains that can bypass the waiting room feature. Separate multiple domains with commas(example: "aaa.com,bbb.com").
   */
  @SpeakeasyMetadata()
  @Expose({ name: "whitelisted_domains_for_waiting_room" })
  whitelistedDomainsForWaitingRoom?: string;
}

export class UserSettings200ApplicationJSONMeetingWebinarSecuritySettingsMeetingSecurity extends SpeakeasyBase {
  /**
   * `true`: Require that all meetings are secured with at least one security option.
   *
   * @remarks
   *
   * This setting can only be disabled by Enterprise, ISV, Business (with more than 100 licenses), and Education accounts. [Learn more](https://marketplace.zoom.us/docs/guides/stay-up-to-date/announcements#meeting-security).
   */
  @SpeakeasyMetadata()
  @Expose({ name: "auto_security" })
  autoSecurity?: boolean;

  /**
   * If set to `true`, meeting passcode will be encrypted and included in the invite link to allow participants to join with just one click without having to enter the passcode.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "embed_password_in_join_link" })
  embedPasswordInJoinLink?: boolean;

  /**
   * Choose between enhanced encryption and [end-to-end encryption](https://support.zoom.us/hc/en-us/articles/360048660871) when starting or a meeting. When using end-to-end encryption, several features (e.g. cloud recording, phone/SIP/H.323 dial-in) will be **automatically disabled**. <br><br>The value of this field can be one of the following:<br>
   *
   * @remarks
   * `enhanced_encryption`: Enhanced encryption. Encryption is stored in the cloud if you enable this option. <br>
   *
   * `e2ee`: [End-to-end encryption](https://support.zoom.us/hc/en-us/articles/360048660871). The encryption key is stored in your local device and can not be obtained by anyone else. Enabling this setting also **disables** the following features: join before host, cloud recording, streaming, live transcription, breakout rooms, polling, 1:1 private chat, and meeting reactions.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "encryption_type" })
  encryptionType?: UserSettings200ApplicationJSONMeetingWebinarSecuritySettingsMeetingSecurityEncryptionTypeEnum;

  /**
   * Allow use of end-to-end encryption for meetings. If set to `true`, you can specify the encryption type in `encryption_type` field.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "end_to_end_encrypted_meetings" })
  endToEndEncryptedMeetings?: boolean;

  /**
   * If set to `true`, all instant, and scheduled meetings that users can join via client, or room systems will be passcode-protected. The Personal Meeting ID (PMI) meetings are not included in this setting.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "meeting_password" })
  meetingPassword?: boolean;

  /**
   * Meeting/webinar [passcode requirements](https://support.zoom.us/hc/en-us/articles/360033559832-Meeting-and-webinar-passwords#h_a427384b-e383-4f80-864d-794bf0a37604).
   */
  @SpeakeasyMetadata()
  @Expose({ name: "meeting_password_requirement" })
  @Type(
    () =>
      UserSettings200ApplicationJSONMeetingWebinarSecuritySettingsMeetingSecurityMeetingPasswordRequirement
  )
  meetingPasswordRequirement?: UserSettings200ApplicationJSONMeetingWebinarSecuritySettingsMeetingSecurityMeetingPasswordRequirement;

  /**
   * Require passcode for participants joining by phone. If set to `true`, a numeric passcode will be required for participants joining by phone if your meeting has a passcode. For meeting with an alphanumeric passcode, a numeric version will be generated.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "phone_password" })
  phonePassword?: boolean;

  /**
   * If set to `true`, all Personal Meeting ID (PMI) meetings that users can join via client, or room systems will be passcode-protected.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "pmi_password" })
  pmiPassword?: boolean;

  /**
   * Require a passcode for meetings which have already been scheduled.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "require_password_for_scheduled_meeting" })
  requirePasswordForScheduledMeeting?: boolean;

  /**
   * Require a passcode for webinars which have already been scheduled.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "require_password_for_scheduled_webinar" })
  requirePasswordForScheduledWebinar?: boolean;

  /**
   * When participants join a meeting, place them in a waiting room and require the host to admit them individually. Enabling the waiting room automatically disables the setting for allowing participants to join before host.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "waiting_room" })
  waitingRoom?: boolean;

  /**
   * Specify the settings to be applied if waiting room is enabled.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "waiting_room_settings" })
  @Type(
    () =>
      UserSettings200ApplicationJSONMeetingWebinarSecuritySettingsMeetingSecurityWaitingRoomSettings
  )
  waitingRoomSettings?: UserSettings200ApplicationJSONMeetingWebinarSecuritySettingsMeetingSecurityWaitingRoomSettings;

  /**
   * If set to `true`, a passcode will be generated when scheduling a Webinar and participants require the passcode to join the Webinar.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "webinar_password" })
  webinarPassword?: boolean;
}

export class UserSettings200ApplicationJSONMeetingWebinarSecuritySettings extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "meeting_security" })
  @Type(
    () =>
      UserSettings200ApplicationJSONMeetingWebinarSecuritySettingsMeetingSecurity
  )
  meetingSecurity?: UserSettings200ApplicationJSONMeetingWebinarSecuritySettingsMeetingSecurity;
}

/**
 * Authentication type
 */
export enum UserSettings200ApplicationJson22AuthenticationOptionsTypeEnum {
  Internally = "internally",
  EnforceLogin = "enforce_login",
  EnforceLoginWithDomains = "enforce_login_with_domains",
}

export class UserSettings200ApplicationJson22AuthenticationOptions extends SpeakeasyBase {
  /**
   * Authentication default option
   */
  @SpeakeasyMetadata()
  @Expose({ name: "default_option" })
  defaultOption?: boolean;

  /**
   * Authentication domians
   */
  @SpeakeasyMetadata()
  @Expose({ name: "domains" })
  domains?: string;

  /**
   * Authentication id
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id?: string;

  /**
   * Authentication name
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name?: string;

  /**
   * Authentication type
   */
  @SpeakeasyMetadata()
  @Expose({ name: "type" })
  type?: UserSettings200ApplicationJson22AuthenticationOptionsTypeEnum;

  /**
   * Authentication visible
   */
  @SpeakeasyMetadata()
  @Expose({ name: "visible" })
  visible?: boolean;
}

export class UserSettings200ApplicationJson22 extends SpeakeasyBase {
  /**
   * Authentication Options
   */
  @SpeakeasyMetadata({
    elemType: UserSettings200ApplicationJson22AuthenticationOptions,
  })
  @Expose({ name: "authentication_options" })
  @Type(() => UserSettings200ApplicationJson22AuthenticationOptions)
  authenticationOptions?: UserSettings200ApplicationJson22AuthenticationOptions[];

  /**
   * Only authenticated users can view cloud recordings
   */
  @SpeakeasyMetadata()
  @Expose({ name: "recording_authentication" })
  recordingAuthentication?: boolean;
}

/**
 *  Authentication type. Specify one of the following authentication types for the authentication profile:<br>
 *
 * @remarks
 *  * `enforce_login`: This option allows any users to join the meeting or webinar, as long as they are signed into their Zoom account.
 *  * `enforce_login_with_domains`: This option, allows you to specify a rule so that only those Zoom users whose email addresses contain a certain domain, can join the meeting or webinar. You can either add multiple domains using a comma in between and/or use a wildcard for listing domains.<br>
 *  * `enforce_login_with_same_account`: This option allows users to join the meeting or webinar with the same Zoom account.
 */
export enum UserSettings200ApplicationJson21AuthenticationOptionsTypeEnum {
  EnforceLogin = "enforce_login",
  EnforceLoginWithSameAccount = "enforce_login_with_same_account",
  EnforceLoginWithDomains = "enforce_login_with_domains",
}

export class UserSettings200ApplicationJson21AuthenticationOptions extends SpeakeasyBase {
  /**
   * Authentication default option
   */
  @SpeakeasyMetadata()
  @Expose({ name: "default_option" })
  defaultOption?: boolean;

  /**
   * Authentication domains
   */
  @SpeakeasyMetadata()
  @Expose({ name: "domains" })
  domains?: string;

  /**
   * Authentication id
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id?: string;

  /**
   * Authentication name
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name?: string;

  /**
   *  Authentication type. Specify one of the following authentication types for the authentication profile:<br>
   *
   * @remarks
   *  * `enforce_login`: This option allows any users to join the meeting or webinar, as long as they are signed into their Zoom account.
   *  * `enforce_login_with_domains`: This option, allows you to specify a rule so that only those Zoom users whose email addresses contain a certain domain, can join the meeting or webinar. You can either add multiple domains using a comma in between and/or use a wildcard for listing domains.<br>
   *  * `enforce_login_with_same_account`: This option allows users to join the meeting or webinar with the same Zoom account.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "type" })
  type?: UserSettings200ApplicationJson21AuthenticationOptionsTypeEnum;

  /**
   * Authentication visible
   */
  @SpeakeasyMetadata()
  @Expose({ name: "visible" })
  visible?: boolean;
}

export class UserSettings200ApplicationJson21 extends SpeakeasyBase {
  /**
   * Meeting Authentication Options
   */
  @SpeakeasyMetadata({
    elemType: UserSettings200ApplicationJson21AuthenticationOptions,
  })
  @Expose({ name: "authentication_options" })
  @Type(() => UserSettings200ApplicationJson21AuthenticationOptions)
  authenticationOptions?: UserSettings200ApplicationJson21AuthenticationOptions[];

  /**
   * Only authenticated users can join meetings
   */
  @SpeakeasyMetadata()
  @Expose({ name: "meeting_authentication" })
  meetingAuthentication?: boolean;
}

export class UserSettings200ApplicationJSONUserSettingsUserSettingsNotificationSettings extends SpeakeasyBase {
  /**
   * When an alternative host is set or removed from a meeting.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "alternative_host_reminder" })
  alternativeHostReminder?: boolean;

  /**
   * When a meeting is cancelled.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "cancel_meeting_reminder" })
  cancelMeetingReminder?: boolean;

  /**
   * When attendees join meeting before host.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "jbh_reminder" })
  jbhReminder?: boolean;

  /**
   * Notify the host there is a meeting is scheduled, rescheduled, or cancelled.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "schedule_for_reminder" })
  scheduleForReminder?: boolean;
}

export class UserSettings200ApplicationJSONUserSettingsUserSettingsFeatureSettings extends SpeakeasyBase {
  /**
   * Host meeting in China.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "cn_meeting" })
  cnMeeting?: boolean;

  /**
   * Host meeting in India.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "in_meeting" })
  inMeeting?: boolean;

  /**
   * Large meeting feature.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "large_meeting" })
  largeMeeting?: boolean;

  /**
   * Large meeting capacity: can be 500 or 1000, depending on if the user has a large meeting capacity plan subscription or not.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "large_meeting_capacity" })
  largeMeetingCapacity?: number;

  /**
   * User‚Äôs meeting capacity.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "meeting_capacity" })
  meetingCapacity?: number;

  /**
   * Webinar feature.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "webinar" })
  webinar?: boolean;

  /**
   * Webinar capacity: can be 100, 500, 1000, 3000, 5000 or 10000, depending on if the user has a webinar capacity plan subscription or not.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "webinar_capacity" })
  webinarCapacity?: number;

  /**
   * Zoom phone feature.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "zoom_phone" })
  zoomPhone?: boolean;
}

/**
 * If you have set the value of `custom_data_center_regions` to `true`, specify the data center regions that you would like to opt in to (country codes from among: ["DE", "NL", "HK", "AU", "IN", "LA", "TY", "CN", "US", "CA"]).
 *
 * @remarks
 *
 */
export enum UserSettings200ApplicationJSONUserSettingsUserSettingsMeetingSettingsDataCenterRegionsEnum {
  Hk = "HK",
  Au = "AU",
  In = "IN",
  Ty = "TY",
  Cn = "CN",
  Us = "US",
  Ca = "CA",
  De = "DE",
  Nl = "NL",
  La = "LA",
}

/**
 * Play sound when participants join or leave:<br>`host` - When host joins or leaves.<br>`all` - When any participant joins or leaves.<br>`none` - No join or leave sound.
 */
export enum UserSettings200ApplicationJSONUserSettingsUserSettingsMeetingSettingsEntryExitChimeEnum {
  Host = "host",
  All = "all",
  None = "none",
}

export class UserSettings200ApplicationJSONUserSettingsUserSettingsMeetingSettingsVirtualBackgroundSettingsFiles extends SpeakeasyBase {
  /**
   * Unique identifier of the file.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id?: string;

  /**
   * Indicates whether or not this file is the default virtual background file.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "is_default" })
  isDefault?: boolean;

  /**
   * File name.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name?: string;

  /**
   * File size.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "size" })
  size?: string;

  /**
   * File type.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "type" })
  type?: string;
}

/**
 * Settings to manage virtual background.
 */
export class UserSettings200ApplicationJSONUserSettingsUserSettingsMeetingSettingsVirtualBackgroundSettings extends SpeakeasyBase {
  /**
   * Allow user to upload custom backgrounds.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "allow_upload_custom" })
  allowUploadCustom?: boolean;

  /**
   * Allow use of videos for virtual backgrounds.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "allow_videos" })
  allowVideos?: boolean;

  /**
   * Enable virtual background.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "enable" })
  enable?: boolean;

  @SpeakeasyMetadata({
    elemType:
      UserSettings200ApplicationJSONUserSettingsUserSettingsMeetingSettingsVirtualBackgroundSettingsFiles,
  })
  @Expose({ name: "files" })
  @Type(
    () =>
      UserSettings200ApplicationJSONUserSettingsUserSettingsMeetingSettingsVirtualBackgroundSettingsFiles
  )
  files?: UserSettings200ApplicationJSONUserSettingsUserSettingsMeetingSettingsVirtualBackgroundSettingsFiles[];
}

/**
 * Indicates who can share their screen or content during meetings. The value can be one of the following: <br>
 *
 * @remarks
 * `host`: Only host can share the screen.<br>
 * `all`: Both hosts and attendees can share their screen during meetings. For Webinar, the hosts and panelists can start screen sharing, but not the attendees.
 *
 */
export enum UserSettings200ApplicationJSONUserSettingsUserSettingsMeetingSettingsWhoCanShareScreenEnum {
  Host = "host",
  All = "all",
}

/**
 * Indicates who is allowed to start sharing screen when someone else in the meeting is sharing their screen. The value can be one of the following:<br>
 *
 * @remarks
 * `host`: Only a host can share the screen when someone else is sharing.<br>
 * `all`: Anyone in the meeting is allowed to start sharing their screen when someone else is sharing. For Webinar, the hosts and panelists can start screen sharing, but not the attendees.
 *
 */
export enum UserSettings200ApplicationJSONUserSettingsUserSettingsMeetingSettingsWhoCanShareScreenWhenSomeoneIsSharingEnum {
  Host = "host",
  All = "all",
}

export class UserSettings200ApplicationJSONUserSettingsUserSettingsMeetingSettings extends SpeakeasyBase {
  /**
   * Allow live streaming.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "allow_live_streaming" })
  allowLiveStreaming?: boolean;

  /**
   * Allow participants to use annotation tools.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "annotation" })
  annotation?: boolean;

  /**
   * Allow host to put attendee on hold.
   *
   * @remarks
   *
   * **This field has been deprecated and is no longer supported.**
   */
  @SpeakeasyMetadata()
  @Expose({ name: "attendee_on_hold" })
  attendeeOnHold?: boolean;

  /**
   * Auto save all in-meeting chats.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "auto_saving_chat" })
  autoSavingChat?: boolean;

  /**
   * Allow host to split meeting participants into separate breakout rooms.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "breakout_room" })
  breakoutRoom?: boolean;

  /**
   * Enable chat during meeting for all participants.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "chat" })
  chat?: boolean;

  /**
   * Enable closed captions.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "closed_caption" })
  closedCaption?: boolean;

  /**
   * Allow the host to add co-hosts.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "co_host" })
  coHost?: boolean;

  /**
   * If set to `true`, you can [select data center regions](https://support.zoom.us/hc/en-us/articles/360042411451-Selecting-data-center-regions-for-hosted-meetings-and-webinars) to use for hosting your real-time meeting and webinar traffic. These regions can be provided in the `data_center_regions` field. If set to `false`, the regions cannot be customized and the default regions will be used.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "custom_data_center_regions" })
  customDataCenterRegions?: boolean;

  /**
   * Allow custom live streaming.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "custom_live_streaming_service" })
  customLiveStreamingService?: boolean;

  /**
   * Custom service instructions.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "custom_service_instructions" })
  customServiceInstructions?: string;

  /**
   * If you have set the value of `custom_data_center_regions` to `true`, specify the data center regions that you would like to opt in to (country codes from among: ["DE", "NL", "HK", "AU", "IN", "LA", "TY", "CN", "US", "CA"]).
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "data_center_regions" })
  dataCenterRegions?: UserSettings200ApplicationJSONUserSettingsUserSettingsMeetingSettingsDataCenterRegionsEnum;

  /**
   * Zoom requires encryption for all data between the Zoom cloud, Zoom client, and Zoom Room. Require encryption for 3rd party endpoints (H323/SIP).
   */
  @SpeakeasyMetadata()
  @Expose({ name: "e2e_encryption" })
  e2eEncryption?: boolean;

  /**
   * Play sound when participants join or leave:<br>`host` - When host joins or leaves.<br>`all` - When any participant joins or leaves.<br>`none` - No join or leave sound.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "entry_exit_chime" })
  entryExitChime?: UserSettings200ApplicationJSONUserSettingsUserSettingsMeetingSettingsEntryExitChimeEnum;

  /**
   * Allow another user to take control of the camera.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "far_end_camera_control" })
  farEndCameraControl?: boolean;

  /**
   * Enable option to send feedback to Zoom at the end of the meeting.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "feedback" })
  feedback?: boolean;

  /**
   * Indicates whether [in-meeting file transfer](https://support.zoom.us/hc/en-us/articles/209605493-In-meeting-file-transfer) setting has been enabled for the user or not.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "file_transfer" })
  fileTransfer?: boolean;

  /**
   * Enable group HD video.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "group_hd" })
  groupHd?: boolean;

  /**
   * Enable non-verbal feedback through screens.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "non_verbal_feedback" })
  nonVerbalFeedback?: boolean;

  /**
   * Add polls to the meeting controls.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "polling" })
  polling?: boolean;

  /**
   * Enable 1:1 private chat between participants during meetings.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "private_chat" })
  privateChat?: boolean;

  /**
   * Record and play their own voice.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "record_play_voice" })
  recordPlayVoice?: boolean;

  /**
   * Enable remote control during screensharing.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "remote_control" })
  remoteControl?: boolean;

  /**
   * Allow host to provide 1:1 remote support to a participant.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "remote_support" })
  remoteSupport?: boolean;

  /**
   * Indicates whether the [**Request permission to unmute participants**](https://support.zoom.us/hc/en-us/articles/203435537-Muting-and-unmuting-participants-in-a-meeting#h_01EGK4XFWS1SJGZ71MYGKF7260) option has been enabled for the user or not.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "request_permission_to_unmute" })
  requestPermissionToUnmute?: boolean;

  /**
   * Allow host and participants to share their screen or content during meetings
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "screen_sharing" })
  screenSharing?: boolean;

  /**
   * Share dual camera (deprecated).
   */
  @SpeakeasyMetadata()
  @Expose({ name: "share_dual_camera" })
  shareDualCamera?: boolean;

  /**
   * Always show meeting controls during a meeting.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "show_meeting_control_toolbar" })
  showMeetingControlToolbar?: boolean;

  /**
   * Enable virtual background.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "virtual_background" })
  virtualBackground?: boolean;

  /**
   * Settings to manage virtual background.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "virtual_background_settings" })
  @Type(
    () =>
      UserSettings200ApplicationJSONUserSettingsUserSettingsMeetingSettingsVirtualBackgroundSettings
  )
  virtualBackgroundSettings?: UserSettings200ApplicationJSONUserSettingsUserSettingsMeetingSettingsVirtualBackgroundSettings;

  /**
   * Enable Waiting room - if enabled, attendees can only join after host approves.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "waiting_room" })
  waitingRoom?: boolean;

  /**
   * Indicates who can share their screen or content during meetings. The value can be one of the following: <br>
   *
   * @remarks
   * `host`: Only host can share the screen.<br>
   * `all`: Both hosts and attendees can share their screen during meetings. For Webinar, the hosts and panelists can start screen sharing, but not the attendees.
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "who_can_share_screen" })
  whoCanShareScreen?: UserSettings200ApplicationJSONUserSettingsUserSettingsMeetingSettingsWhoCanShareScreenEnum;

  /**
   * Indicates who is allowed to start sharing screen when someone else in the meeting is sharing their screen. The value can be one of the following:<br>
   *
   * @remarks
   * `host`: Only a host can share the screen when someone else is sharing.<br>
   * `all`: Anyone in the meeting is allowed to start sharing their screen when someone else is sharing. For Webinar, the hosts and panelists can start screen sharing, but not the attendees.
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "who_can_share_screen_when_someone_is_sharing" })
  whoCanShareScreenWhenSomeoneIsSharing?: UserSettings200ApplicationJSONUserSettingsUserSettingsMeetingSettingsWhoCanShareScreenWhenSomeoneIsSharingEnum;

  /**
   * Allow livestreaming by host through Workplace by Facebook.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "workplace_by_facebook" })
  workplaceByFacebook?: boolean;
}

export class UserSettings200ApplicationJSONUserSettingsProfileRecordingStorageLocation extends SpeakeasyBase {
  /**
   * Users can choose the country to store their recorded content. Content can include meeting, webinar, and phone recordings, as well as voicemail, transcripts, and custom greeting prompts. See [Managing the Communications Content storage location](https://support.zoom.us/hc/en-us/articles/360050781131) for details.
   *
   * @remarks
   *
   * Provide abbreviated country codes as the value for this field. See the [Countries abbreviation list](https://marketplace.zoom.us/docs/api-reference/other-references/abbreviation-lists#countries) for details.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "allowed_values" })
  allowedValues?: string[];

  /**
   * Abbreviated country code.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "value" })
  value?: string;
}

export class UserSettings200ApplicationJSONUserSettingsProfile extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "recording_storage_location" })
  @Type(
    () =>
      UserSettings200ApplicationJSONUserSettingsProfileRecordingStorageLocation
  )
  recordingStorageLocation?: UserSettings200ApplicationJSONUserSettingsProfileRecordingStorageLocation;
}

/**
 * Automatic recording:<br>`local` - Record on local.<br>`cloud` - Record on cloud.<br>`none` - Disabled.
 */
export enum UserSettings200ApplicationJSONUserSettingsUserSettingsRecordingSettingsAutoRecordingEnum {
  Local = "local",
  Cloud = "cloud",
  None = "none",
}

/**
 * Setting to allow cloud recording access only from specific IP address ranges.
 *
 * @remarks
 *
 */
export class UserSettings200ApplicationJSONUserSettingsUserSettingsRecordingSettingsIpAddressAccessControl extends SpeakeasyBase {
  /**
   * If set to `true`, the cloud recordings of this account can only be accessed by the IP addresses defined in the `ip_addresses_or_ranges` property.
   *
   * @remarks
   *
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "enable" })
  enable?: boolean;

  /**
   * IP addresses or ranges that have access to the cloud recordings. Separate multiple IP ranges with comma. Use n.n.n.n, n.n.n.n/n or n.n.n.n - n.n.n.n syntax where n is a number.
   *
   * @remarks
   *
   * Example: `46.33.24.184, 48.99.100.2/25` or `200.181.108.17 - 220.181.108.157`
   *
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "ip_addresses_or_ranges" })
  ipAddressesOrRanges?: string;
}

/**
 * This object represents the minimum passcode requirements set for recordings via Account Recording Settings.
 */
export class UserSettings200ApplicationJSONUserSettingsUserSettingsRecordingSettingsRecordingPasswordRequirement extends SpeakeasyBase {
  /**
   * Indicates whether or not passcode must contain at least one alphabetical letter (a, b, c..).
   */
  @SpeakeasyMetadata()
  @Expose({ name: "have_letter" })
  haveLetter?: boolean;

  /**
   * Indicates whether or not passcode must contain at least one number(1, 2, 3..).
   */
  @SpeakeasyMetadata()
  @Expose({ name: "have_number" })
  haveNumber?: boolean;

  /**
   * Indicates whether or not passcode must contain at least one special character(!, @, #..).
   */
  @SpeakeasyMetadata()
  @Expose({ name: "have_special_character" })
  haveSpecialCharacter?: boolean;

  /**
   * Minimum required length for the passcode.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "length" })
  length?: number;

  /**
   * Indicates whether or not passcode must contain only numeric characters.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "only_allow_numeric" })
  onlyAllowNumeric?: boolean;
}

export class UserSettings200ApplicationJSONUserSettingsUserSettingsRecordingSettings extends SpeakeasyBase {
  /**
   * Ask host to confirm the disclaimer.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "ask_host_to_confirm_disclaimer" })
  askHostToConfirmDisclaimer?: boolean;

  /**
   * This field can be used if `recording_disclaimer` is set to true. This field indicates whether or not you would like to ask participants for consent when a recording starts. The value can be one of the following:<br>
   *
   * @remarks
   * * `true`: Ask participants for consent when a recording starts. <br>
   * * `false`: Do not ask participants for consent when a recording starts.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "ask_participants_to_consent_disclaimer" })
  askParticipantsToConsentDisclaimer?: boolean;

  /**
   * Auto delete cloud recordings.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "auto_delete_cmr" })
  autoDeleteCmr?: boolean;

  /**
   * A specified number of days of auto delete cloud recordings.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "auto_delete_cmr_days" })
  autoDeleteCmrDays?: number;

  /**
   * Automatic recording:<br>`local` - Record on local.<br>`cloud` - Record on cloud.<br>`none` - Disabled.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "auto_recording" })
  autoRecording?: UserSettings200ApplicationJSONUserSettingsUserSettingsRecordingSettingsAutoRecordingEnum;

  /**
   * Cloud recording.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "cloud_recording" })
  cloudRecording?: boolean;

  /**
   * Host can pause/stop the auto recording in the cloud.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "host_pause_stop_recording" })
  hostPauseStopRecording?: boolean;

  /**
   * Setting to allow cloud recording access only from specific IP address ranges.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "ip_address_access_control" })
  @Type(
    () =>
      UserSettings200ApplicationJSONUserSettingsUserSettingsRecordingSettingsIpAddressAccessControl
  )
  ipAddressAccessControl?: UserSettings200ApplicationJSONUserSettingsUserSettingsRecordingSettingsIpAddressAccessControl;

  /**
   * Local recording.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "local_recording" })
  localRecording?: boolean;

  /**
   * Record an audio only file.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "record_audio_file" })
  recordAudioFile?: boolean;

  /**
   * Record the gallery view.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "record_gallery_view" })
  recordGalleryView?: boolean;

  /**
   * Record the active speaker view.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "record_speaker_view" })
  recordSpeakerView?: boolean;

  /**
   * Audio transcript.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "recording_audio_transcript" })
  recordingAudioTranscript?: boolean;

  /**
   * Show a disclaimer to participants before a recording starts
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "recording_disclaimer" })
  recordingDisclaimer?: boolean;

  /**
   * This object represents the minimum passcode requirements set for recordings via Account Recording Settings.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "recording_password_requirement" })
  @Type(
    () =>
      UserSettings200ApplicationJSONUserSettingsUserSettingsRecordingSettingsRecordingPasswordRequirement
  )
  recordingPasswordRequirement?: UserSettings200ApplicationJSONUserSettingsUserSettingsRecordingSettingsRecordingPasswordRequirement;

  /**
   * Save chat text from the meeting.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "save_chat_text" })
  saveChatText?: boolean;

  /**
   * Show timestamp on video.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "show_timestamp" })
  showTimestamp?: boolean;
}

/**
 * Determine how participants can join the audio portion of the meeting:<br>`both` - Telephony and VoIP.<br>`telephony` - Audio PSTN telephony only.<br>`voip` - VoIP only.<br>`thirdParty` - Third party audio conference.
 */
export enum UserSettings200ApplicationJSONUserSettingsUserSettingsMeetingSettingsAudioTypeEnum {
  Both = "both",
  Telephony = "telephony",
  Voip = "voip",
  ThirdParty = "thirdParty",
}

export enum UserSettings200ApplicationJSONUserSettingsUserSettingsMeetingSettingsMeetingPasswordRequirementConsecutiveCharactersLengthEnum {
  Zero = "0",
  Four = "4",
  Five = "5",
  Six = "6",
  Seven = "7",
  Eight = "8",
}

/**
 * Account wide meeting/webinar [passcode requirements](https://support.zoom.us/hc/en-us/articles/360033559832-Meeting-and-webinar-passwords#h_a427384b-e383-4f80-864d-794bf0a37604).
 */
export class UserSettings200ApplicationJSONUserSettingsUserSettingsMeetingSettingsMeetingPasswordRequirement extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "consecutive_characters_length" })
  consecutiveCharactersLength?: UserSettings200ApplicationJSONUserSettingsUserSettingsMeetingSettingsMeetingPasswordRequirementConsecutiveCharactersLengthEnum;

  /**
   * If set to `true`, the passcode must contain at least 1 letter (such as a,b,c...).
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "have_letter" })
  haveLetter?: boolean;

  /**
   * If set to `true`, the passcode must contain at least 1 number (such as 1,2,3...).
   */
  @SpeakeasyMetadata()
  @Expose({ name: "have_number" })
  haveNumber?: boolean;

  /**
   * If set to `true`, the passcode must have at least 1 special character (!,@,#...).
   */
  @SpeakeasyMetadata()
  @Expose({ name: "have_special_character" })
  haveSpecialCharacter?: boolean;

  /**
   * If set to `true`, the passcode must include both uppercase and lowercase characters.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "have_upper_and_lower_characters" })
  haveUpperAndLowerCharacters?: boolean;

  /**
   * The minimum length that the meeting/webinar passcode needs to have.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "length" })
  length?: number;

  /**
   * If set to `true`, the passcode must only contain numbers and no other characters.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "only_allow_numeric" })
  onlyAllowNumeric?: boolean;

  /**
   * If set to `true`, users will be informed if the provided passcode is weak.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "weak_enhance_detection" })
  weakEnhanceDetection?: boolean;
}

/**
 * Require a passcode for Personal Meeting ID (PMI). This setting is always enabled for free accounts and Pro accounts with a single host and cannot be modified for these accounts.
 *
 * @remarks
 *
 */
export enum UserSettings200ApplicationJSONUserSettingsUserSettingsMeetingSettingsRequirePasswordForPmiMeetingsEnum {
  JbhOnly = "jbh_only",
  All = "all",
  None = "none",
}

export class UserSettings200ApplicationJSONUserSettingsUserSettingsMeetingSettings1 extends SpeakeasyBase {
  /**
   * Determine how participants can join the audio portion of the meeting:<br>`both` - Telephony and VoIP.<br>`telephony` - Audio PSTN telephony only.<br>`voip` - VoIP only.<br>`thirdParty` - Third party audio conference.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "audio_type" })
  audioType?: UserSettings200ApplicationJSONUserSettingsUserSettingsMeetingSettingsAudioTypeEnum;

  /**
   * Passcode for already scheduled meetings
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "default_password_for_scheduled_meetings" })
  defaultPasswordForScheduledMeetings?: string;

  /**
   * If the value is set to `true`, the meeting passcode will be encrypted and included in the join meeting link to allow participants to join with just one click without having to enter the passcode.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "embed_password_in_join_link" })
  embedPasswordInJoinLink?: boolean;

  /**
   * Require a passcode for personal meetings if attendees can join before host.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "force_pmi_jbh_password" })
  forcePmiJbhPassword?: boolean;

  /**
   * Start meetings with host video on.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "host_video" })
  hostVideo?: boolean;

  /**
   * Join the meeting before host arrives.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "join_before_host" })
  joinBeforeHost?: boolean;

  /**
   * Account wide meeting/webinar [passcode requirements](https://support.zoom.us/hc/en-us/articles/360033559832-Meeting-and-webinar-passwords#h_a427384b-e383-4f80-864d-794bf0a37604).
   */
  @SpeakeasyMetadata()
  @Expose({ name: "meeting_password_requirement" })
  @Type(
    () =>
      UserSettings200ApplicationJSONUserSettingsUserSettingsMeetingSettingsMeetingPasswordRequirement
  )
  meetingPasswordRequirement?: UserSettings200ApplicationJSONUserSettingsUserSettingsMeetingSettingsMeetingPasswordRequirement;

  /**
   * Start meetings with participants video on.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "participants_video" })
  participantsVideo?: boolean;

  /**
   * Personal Meeting Setting.<br><br>
   *
   * @remarks
   * `true`: Indicates that the **"Enable Personal Meeting ID"** setting is turned on. Users can choose to use personal meeting ID for their meetings. <br><br>
   * `false`: Indicates that the **"Enable Personal Meeting ID"** setting is [turned off](https://support.zoom.us/hc/en-us/articles/201362843-Personal-meeting-ID-PMI-and-personal-link#h_aa0335c8-3b06-41bc-bc1f-a8b84ef17f2a). If this setting is disabled, meetings that were scheduled with PMI will be invalid. Scheduled meetings will need to be manually updated.
   * For Zoom Phone only:If a user has been assigned a desk phone, **"Elevate to Zoom Meeting"** on desk phone will be disabled.
   *
   *
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "personal_meeting" })
  personalMeeting?: boolean;

  /**
   * PMI passcode
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "pmi_password" })
  pmiPassword?: string;

  /**
   * Generate and require passcode for participants joining by phone.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "pstn_password_protected" })
  pstnPasswordProtected?: boolean;

  /**
   * Require a passcode for instant meetings. If you use PMI for your instant meetings, this option will be disabled. This setting is always enabled for free accounts and Pro accounts with a single host and cannot be modified for these accounts.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "require_password_for_instant_meetings" })
  requirePasswordForInstantMeetings?: boolean;

  /**
   * Require a passcode for Personal Meeting ID (PMI). This setting is always enabled for free accounts and Pro accounts with a single host and cannot be modified for these accounts.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "require_password_for_pmi_meetings" })
  requirePasswordForPmiMeetings?: UserSettings200ApplicationJSONUserSettingsUserSettingsMeetingSettingsRequirePasswordForPmiMeetingsEnum;

  /**
   * Require a passcode for meetings which have already been scheduled
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "require_password_for_scheduled_meetings" })
  requirePasswordForScheduledMeetings?: boolean;

  /**
   * Require a passcode when scheduling new meetings.This setting is always enabled for free accounts and Pro accounts with a single host and cannot be modified for these accounts.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "require_password_for_scheduling_new_meetings" })
  requirePasswordForSchedulingNewMeetings?: boolean;

  /**
   * Use Personal Meeting ID (PMI) when starting an instant meeting
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "use_pmi_for_instant_meetings" })
  usePmiForInstantMeetings?: boolean;

  /**
   * Use Personal Meeting ID (PMI) when scheduling a meeting
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "use_pmi_for_scheduled_meetings" })
  usePmiForScheduledMeetings?: boolean;
}

/**
 * Indicates where most of the participants call into or call from duriing a meeting.
 */
export class UserSettings200ApplicationJSONUserSettingsUserSettingsMeetingSettingsTelephonyRegions extends SpeakeasyBase {
  /**
   * Telephony region options provided by Zoom to select from.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "allowed_values" })
  allowedValues?: string[];

  /**
   * Telephony regions selected by the account to indicate where most of the participants call into or call from during a meeting.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "selection_values" })
  selectionValues?: string[];
}

export class UserSettings200ApplicationJSONUserSettingsUserSettingsMeetingSettings2 extends SpeakeasyBase {
  /**
   * Third party audio conference info.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "audio_conference_info" })
  audioConferenceInfo?: string;

  /**
   * Show the international numbers link on the invitation email.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "show_international_numbers_link" })
  showInternationalNumbersLink?: boolean;

  /**
   * Indicates where most of the participants call into or call from duriing a meeting.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "telephony_regions" })
  @Type(
    () =>
      UserSettings200ApplicationJSONUserSettingsUserSettingsMeetingSettingsTelephonyRegions
  )
  telephonyRegions?: UserSettings200ApplicationJSONUserSettingsUserSettingsMeetingSettingsTelephonyRegions;

  /**
   * Third party audio conference.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "third_party_audio" })
  thirdPartyAudio?: boolean;
}

/**
 * Account Settings: TSP.
 */
export class UserSettings200ApplicationJSONUserSettingsUserSettingsTSPSettings extends SpeakeasyBase {
  /**
   * Call Out
   */
  @SpeakeasyMetadata()
  @Expose({ name: "call_out" })
  callOut?: boolean;

  /**
   * Call Out Countries/Regions
   */
  @SpeakeasyMetadata()
  @Expose({ name: "call_out_countries" })
  callOutCountries?: any[];

  /**
   * Show international numbers link on the invitation email
   */
  @SpeakeasyMetadata()
  @Expose({ name: "show_international_numbers_link" })
  showInternationalNumbersLink?: boolean;
}

export class UserSettings200ApplicationJSONUserSettings extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "email_notification" })
  @Type(
    () =>
      UserSettings200ApplicationJSONUserSettingsUserSettingsNotificationSettings
  )
  emailNotification?: UserSettings200ApplicationJSONUserSettingsUserSettingsNotificationSettings;

  @SpeakeasyMetadata()
  @Expose({ name: "feature" })
  @Type(
    () => UserSettings200ApplicationJSONUserSettingsUserSettingsFeatureSettings
  )
  feature?: UserSettings200ApplicationJSONUserSettingsUserSettingsFeatureSettings;

  @SpeakeasyMetadata()
  @Expose({ name: "in_meeting" })
  @Type(
    () => UserSettings200ApplicationJSONUserSettingsUserSettingsMeetingSettings
  )
  inMeeting?: UserSettings200ApplicationJSONUserSettingsUserSettingsMeetingSettings;

  @SpeakeasyMetadata()
  @Expose({ name: "profile" })
  @Type(() => UserSettings200ApplicationJSONUserSettingsProfile)
  profile?: UserSettings200ApplicationJSONUserSettingsProfile;

  @SpeakeasyMetadata()
  @Expose({ name: "recording" })
  @Type(
    () =>
      UserSettings200ApplicationJSONUserSettingsUserSettingsRecordingSettings
  )
  recording?: UserSettings200ApplicationJSONUserSettingsUserSettingsRecordingSettings;

  @SpeakeasyMetadata()
  @Expose({ name: "schedule_meeting" })
  @Type(
    () => UserSettings200ApplicationJSONUserSettingsUserSettingsMeetingSettings1
  )
  scheduleMeeting?: UserSettings200ApplicationJSONUserSettingsUserSettingsMeetingSettings1;

  @SpeakeasyMetadata()
  @Expose({ name: "telephony" })
  @Type(
    () => UserSettings200ApplicationJSONUserSettingsUserSettingsMeetingSettings2
  )
  telephony?: UserSettings200ApplicationJSONUserSettingsUserSettingsMeetingSettings2;

  /**
   * Account Settings: TSP.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "tsp" })
  @Type(() => UserSettings200ApplicationJSONUserSettingsUserSettingsTSPSettings)
  tsp?: UserSettings200ApplicationJSONUserSettingsUserSettingsTSPSettings;
}

export class UserSettingsResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  body?: Uint8Array;

  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * **HTTP Status Code:** `200`<br>
   *
   * @remarks
   * User settings returned.
   */
  @SpeakeasyMetadata()
  userSettings200ApplicationJSONOneOf?: any;
}
