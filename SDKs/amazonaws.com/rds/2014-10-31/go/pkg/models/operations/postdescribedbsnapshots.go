// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// POSTDescribeDBSnapshotsActionEnum
type POSTDescribeDBSnapshotsActionEnum string

const (
	POSTDescribeDBSnapshotsActionEnumDescribeDbSnapshots POSTDescribeDBSnapshotsActionEnum = "DescribeDBSnapshots"
)

func (e *POSTDescribeDBSnapshotsActionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "DescribeDBSnapshots":
		*e = POSTDescribeDBSnapshotsActionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for POSTDescribeDBSnapshotsActionEnum: %s", s)
	}
}

// POSTDescribeDBSnapshotsVersionEnum
type POSTDescribeDBSnapshotsVersionEnum string

const (
	POSTDescribeDBSnapshotsVersionEnumTwoThousandAndFourteen1031 POSTDescribeDBSnapshotsVersionEnum = "2014-10-31"
)

func (e *POSTDescribeDBSnapshotsVersionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "2014-10-31":
		*e = POSTDescribeDBSnapshotsVersionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for POSTDescribeDBSnapshotsVersionEnum: %s", s)
	}
}

type POSTDescribeDBSnapshotsQueryParams struct {
	Action POSTDescribeDBSnapshotsActionEnum `queryParam:"style=form,explode=true,name=Action"`
	// Pagination token
	Marker *string `queryParam:"style=form,explode=true,name=Marker"`
	// Pagination limit
	MaxRecords *string                            `queryParam:"style=form,explode=true,name=MaxRecords"`
	Version    POSTDescribeDBSnapshotsVersionEnum `queryParam:"style=form,explode=true,name=Version"`
}

type POSTDescribeDBSnapshotsHeaders struct {
	XAmzAlgorithm     *string `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
}

type POSTDescribeDBSnapshotsRequest struct {
	QueryParams POSTDescribeDBSnapshotsQueryParams
	Headers     POSTDescribeDBSnapshotsHeaders
	Request     []byte `request:"mediaType=text/xml"`
}

type POSTDescribeDBSnapshotsResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
