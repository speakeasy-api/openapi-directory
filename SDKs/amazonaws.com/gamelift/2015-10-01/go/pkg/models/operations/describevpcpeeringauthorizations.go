// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// DescribeVpcPeeringAuthorizationsXAmzTargetEnum
type DescribeVpcPeeringAuthorizationsXAmzTargetEnum string

const (
	DescribeVpcPeeringAuthorizationsXAmzTargetEnumGameLiftDescribeVpcPeeringAuthorizations DescribeVpcPeeringAuthorizationsXAmzTargetEnum = "GameLift.DescribeVpcPeeringAuthorizations"
)

func (e DescribeVpcPeeringAuthorizationsXAmzTargetEnum) ToPointer() *DescribeVpcPeeringAuthorizationsXAmzTargetEnum {
	return &e
}

func (e *DescribeVpcPeeringAuthorizationsXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "GameLift.DescribeVpcPeeringAuthorizations":
		*e = DescribeVpcPeeringAuthorizationsXAmzTargetEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DescribeVpcPeeringAuthorizationsXAmzTargetEnum: %v", v)
	}
}

type DescribeVpcPeeringAuthorizationsRequest struct {
	RequestBody       map[string]interface{}                         `request:"mediaType=application/json"`
	XAmzAlgorithm     *string                                        `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string                                        `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string                                        `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string                                        `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string                                        `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string                                        `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string                                        `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget        DescribeVpcPeeringAuthorizationsXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type DescribeVpcPeeringAuthorizationsResponse struct {
	ContentType string
	// Success
	DescribeVpcPeeringAuthorizationsOutput *shared.DescribeVpcPeeringAuthorizationsOutput
	// InternalServiceException
	InternalServiceException interface{}
	// InvalidRequestException
	InvalidRequestException interface{}
	StatusCode              int
	RawResponse             *http.Response
	// UnauthorizedException
	UnauthorizedException interface{}
}
