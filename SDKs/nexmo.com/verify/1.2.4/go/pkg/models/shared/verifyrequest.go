// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// VerifyRequestCodeLengthEnum - The length of the verification code.
type VerifyRequestCodeLengthEnum int64

const (
	VerifyRequestCodeLengthEnumFour VerifyRequestCodeLengthEnum = 4
	VerifyRequestCodeLengthEnumSix  VerifyRequestCodeLengthEnum = 6
)

func (e VerifyRequestCodeLengthEnum) ToPointer() *VerifyRequestCodeLengthEnum {
	return &e
}

func (e *VerifyRequestCodeLengthEnum) UnmarshalJSON(data []byte) error {
	var v int64
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case 4:
		fallthrough
	case 6:
		*e = VerifyRequestCodeLengthEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for VerifyRequestCodeLengthEnum: %v", v)
	}
}

// VerifyRequestLgEnum - By default, the SMS or text-to-speech (TTS) message is generated in the locale that matches the `number`. For example, the text message or TTS message for a `33*` number is sent in French. Use this parameter to explicitly control the language used for the Verify request. A list of languages is available: <https://developer.nexmo.com/verify/guides/verify-languages>
type VerifyRequestLgEnum string

const (
	VerifyRequestLgEnumArXa  VerifyRequestLgEnum = "ar-xa"
	VerifyRequestLgEnumCsCz  VerifyRequestLgEnum = "cs-cz"
	VerifyRequestLgEnumCyCy  VerifyRequestLgEnum = "cy-cy"
	VerifyRequestLgEnumCyGb  VerifyRequestLgEnum = "cy-gb"
	VerifyRequestLgEnumDaDk  VerifyRequestLgEnum = "da-dk"
	VerifyRequestLgEnumDeDe  VerifyRequestLgEnum = "de-de"
	VerifyRequestLgEnumElGr  VerifyRequestLgEnum = "el-gr"
	VerifyRequestLgEnumEnAu  VerifyRequestLgEnum = "en-au"
	VerifyRequestLgEnumEnGb  VerifyRequestLgEnum = "en-gb"
	VerifyRequestLgEnumEnIn  VerifyRequestLgEnum = "en-in"
	VerifyRequestLgEnumEnUs  VerifyRequestLgEnum = "en-us"
	VerifyRequestLgEnumEsEs  VerifyRequestLgEnum = "es-es"
	VerifyRequestLgEnumEsMx  VerifyRequestLgEnum = "es-mx"
	VerifyRequestLgEnumEsUs  VerifyRequestLgEnum = "es-us"
	VerifyRequestLgEnumFiFi  VerifyRequestLgEnum = "fi-fi"
	VerifyRequestLgEnumFilPh VerifyRequestLgEnum = "fil-ph"
	VerifyRequestLgEnumFrCa  VerifyRequestLgEnum = "fr-ca"
	VerifyRequestLgEnumFrFr  VerifyRequestLgEnum = "fr-fr"
	VerifyRequestLgEnumHiIn  VerifyRequestLgEnum = "hi-in"
	VerifyRequestLgEnumHuHu  VerifyRequestLgEnum = "hu-hu"
	VerifyRequestLgEnumIDID  VerifyRequestLgEnum = "id-id"
	VerifyRequestLgEnumIsIs  VerifyRequestLgEnum = "is-is"
	VerifyRequestLgEnumItIt  VerifyRequestLgEnum = "it-it"
	VerifyRequestLgEnumJaJp  VerifyRequestLgEnum = "ja-jp"
	VerifyRequestLgEnumKoKr  VerifyRequestLgEnum = "ko-kr"
	VerifyRequestLgEnumNbNo  VerifyRequestLgEnum = "nb-no"
	VerifyRequestLgEnumNlNl  VerifyRequestLgEnum = "nl-nl"
	VerifyRequestLgEnumPlPl  VerifyRequestLgEnum = "pl-pl"
	VerifyRequestLgEnumPtBr  VerifyRequestLgEnum = "pt-br"
	VerifyRequestLgEnumPtPt  VerifyRequestLgEnum = "pt-pt"
	VerifyRequestLgEnumRoRo  VerifyRequestLgEnum = "ro-ro"
	VerifyRequestLgEnumRuRu  VerifyRequestLgEnum = "ru-ru"
	VerifyRequestLgEnumSvSe  VerifyRequestLgEnum = "sv-se"
	VerifyRequestLgEnumThTh  VerifyRequestLgEnum = "th-th"
	VerifyRequestLgEnumTrTr  VerifyRequestLgEnum = "tr-tr"
	VerifyRequestLgEnumViVn  VerifyRequestLgEnum = "vi-vn"
	VerifyRequestLgEnumYueCn VerifyRequestLgEnum = "yue-cn"
	VerifyRequestLgEnumZhCn  VerifyRequestLgEnum = "zh-cn"
	VerifyRequestLgEnumZhTw  VerifyRequestLgEnum = "zh-tw"
)

func (e VerifyRequestLgEnum) ToPointer() *VerifyRequestLgEnum {
	return &e
}

func (e *VerifyRequestLgEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ar-xa":
		fallthrough
	case "cs-cz":
		fallthrough
	case "cy-cy":
		fallthrough
	case "cy-gb":
		fallthrough
	case "da-dk":
		fallthrough
	case "de-de":
		fallthrough
	case "el-gr":
		fallthrough
	case "en-au":
		fallthrough
	case "en-gb":
		fallthrough
	case "en-in":
		fallthrough
	case "en-us":
		fallthrough
	case "es-es":
		fallthrough
	case "es-mx":
		fallthrough
	case "es-us":
		fallthrough
	case "fi-fi":
		fallthrough
	case "fil-ph":
		fallthrough
	case "fr-ca":
		fallthrough
	case "fr-fr":
		fallthrough
	case "hi-in":
		fallthrough
	case "hu-hu":
		fallthrough
	case "id-id":
		fallthrough
	case "is-is":
		fallthrough
	case "it-it":
		fallthrough
	case "ja-jp":
		fallthrough
	case "ko-kr":
		fallthrough
	case "nb-no":
		fallthrough
	case "nl-nl":
		fallthrough
	case "pl-pl":
		fallthrough
	case "pt-br":
		fallthrough
	case "pt-pt":
		fallthrough
	case "ro-ro":
		fallthrough
	case "ru-ru":
		fallthrough
	case "sv-se":
		fallthrough
	case "th-th":
		fallthrough
	case "tr-tr":
		fallthrough
	case "vi-vn":
		fallthrough
	case "yue-cn":
		fallthrough
	case "zh-cn":
		fallthrough
	case "zh-tw":
		*e = VerifyRequestLgEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for VerifyRequestLgEnum: %v", v)
	}
}

// VerifyRequestWorkflowIDEnum - Selects the predefined sequence of SMS and TTS (Text To Speech) actions to use in order to convey the PIN to your user. For example, an id of 1 identifies the workflow SMS - TTS - TTS. For a list of all workflows and their associated ids, please visit the [developer portal](https://developer.nexmo.com/verify/guides/workflows-and-events).
type VerifyRequestWorkflowIDEnum int64

const (
	VerifyRequestWorkflowIDEnumOne   VerifyRequestWorkflowIDEnum = 1
	VerifyRequestWorkflowIDEnumTwo   VerifyRequestWorkflowIDEnum = 2
	VerifyRequestWorkflowIDEnumThree VerifyRequestWorkflowIDEnum = 3
	VerifyRequestWorkflowIDEnumFour  VerifyRequestWorkflowIDEnum = 4
	VerifyRequestWorkflowIDEnumFive  VerifyRequestWorkflowIDEnum = 5
	VerifyRequestWorkflowIDEnumSix   VerifyRequestWorkflowIDEnum = 6
	VerifyRequestWorkflowIDEnumSeven VerifyRequestWorkflowIDEnum = 7
)

func (e VerifyRequestWorkflowIDEnum) ToPointer() *VerifyRequestWorkflowIDEnum {
	return &e
}

func (e *VerifyRequestWorkflowIDEnum) UnmarshalJSON(data []byte) error {
	var v int64
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case 1:
		fallthrough
	case 2:
		fallthrough
	case 3:
		fallthrough
	case 4:
		fallthrough
	case 5:
		fallthrough
	case 6:
		fallthrough
	case 7:
		*e = VerifyRequestWorkflowIDEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for VerifyRequestWorkflowIDEnum: %v", v)
	}
}

type VerifyRequest struct {
	// You can find your API key in your [account dashboard](https://dashboard.nexmo.com)
	APIKey string `form:"name=api_key"`
	// You can find your API secret in your [account dashboard](https://dashboard.nexmo.com)
	APISecret string `form:"name=api_secret"`
	// An 18-character alphanumeric string you can use to personalize the verification request SMS body, to help users identify your company or application name. For example: "Your `Acme Inc` PIN is ..."
	Brand string `form:"name=brand"`
	// The length of the verification code.
	CodeLength *VerifyRequestCodeLengthEnum `form:"name=code_length"`
	// If you do not provide `number` in international format or you are not sure if `number` is correctly formatted, specify the two-character country code in `country`. Verify will then format the number for you.
	Country *string `form:"name=country"`
	// By default, the SMS or text-to-speech (TTS) message is generated in the locale that matches the `number`. For example, the text message or TTS message for a `33*` number is sent in French. Use this parameter to explicitly control the language used for the Verify request. A list of languages is available: <https://developer.nexmo.com/verify/guides/verify-languages>
	Lg *VerifyRequestLgEnum `form:"name=lg"`
	// Specifies the wait time in seconds between attempts to deliver the verification code.
	NextEventWait *int64 `form:"name=next_event_wait"`
	// The mobile or landline phone number to verify. Unless you are setting `country` explicitly, this number must be in [E.164](https://en.wikipedia.org/wiki/E.164) format.
	Number string `form:"name=number"`
	// A custom PIN to send to the user. If a PIN is not provided, Verify will generate a random PIN for you. <b>This feature is not enabled by default</b> - please discuss with your Account Manager if you would like it enabled. If this feature is not enabled on your account, error status `20` will be returned.
	PinCode *string `form:"name=pin_code"`
	// How long the generated verification code is valid for, in seconds. When you specify both `pin_expiry` and `next_event_wait` then `pin_expiry` must be an integer multiple of `next_event_wait` otherwise `pin_expiry` is defaulted to equal next_event_wait. See [changing the event timings](https://developer.nexmo.com/verify/guides/changing-default-timings).
	PinExpiry *int64 `form:"name=pin_expiry"`
	// An 11-character alphanumeric string that represents the [identity of the sender](https://developer.nexmo.com/messaging/sms/guides/custom-sender-id) of the verification request. Depending on the destination of the phone number you are sending the verification SMS to, restrictions might apply.
	SenderID *string `form:"name=sender_id"`
	// Selects the predefined sequence of SMS and TTS (Text To Speech) actions to use in order to convey the PIN to your user. For example, an id of 1 identifies the workflow SMS - TTS - TTS. For a list of all workflows and their associated ids, please visit the [developer portal](https://developer.nexmo.com/verify/guides/workflows-and-events).
	WorkflowID *VerifyRequestWorkflowIDEnum `form:"name=workflow_id"`
}
