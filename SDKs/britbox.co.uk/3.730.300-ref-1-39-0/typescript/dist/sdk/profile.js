"use strict";
/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Profile = void 0;
var utils = __importStar(require("../internal/utils"));
var operations = __importStar(require("./models/operations"));
var shared = __importStar(require("./models/shared"));
var Profile = /** @class */ (function () {
    function Profile(defaultClient, securityClient, serverURL, language, sdkVersion, genVersion) {
        this._defaultClient = defaultClient;
        this._securityClient = securityClient;
        this._serverURL = serverURL;
        this._language = language;
        this._sdkVersion = sdkVersion;
        this._genVersion = genVersion;
    }
    /**
     * Bookmark an item under the active profile.
     *
     * Creates one if it doesn't exist, overwrites one if it does.
     *
     */
    Profile.prototype.bookmarkItem = function (req, security, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.BookmarkItemRequest(req);
        }
        var baseURL = this._serverURL;
        var url = utils.generateURL(baseURL, "/account/profile/bookmarks/{itemId}", req);
        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.BookmarkItemSecurity(security);
        }
        var client = utils.createSecurityClient(this._defaultClient, security);
        var queryParams = utils.serializeQueryParams(req);
        var r = client.request(__assign({ url: url + queryParams, method: "put" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.BookmarkItemResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.bookmark = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.Bookmark);
                    }
                    break;
                default:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.serviceError = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.ServiceError);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Unbookmark an item under the active profile.
     */
    Profile.prototype.deleteItemBookmark = function (req, security, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.DeleteItemBookmarkRequest(req);
        }
        var baseURL = this._serverURL;
        var url = utils.generateURL(baseURL, "/account/profile/bookmarks/{itemId}", req);
        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.DeleteItemBookmarkSecurity(security);
        }
        var client = utils.createSecurityClient(this._defaultClient, security);
        var queryParams = utils.serializeQueryParams(req);
        var r = client.request(__assign({ url: url + queryParams, method: "delete" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.DeleteItemBookmarkResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 204:
                    break;
                default:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.serviceError = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.ServiceError);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Remove the watched status of items under the active profile. Passing in
     * specific `itemId`s to the `item_ids` query parameter will cause only these
     * items to be removed. **If this list is missing all watched items will be
     * removed**
     *
     */
    Profile.prototype.deleteWatched = function (req, security, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.DeleteWatchedRequest(req);
        }
        var baseURL = this._serverURL;
        var url = baseURL.replace(/\/$/, "") + "/account/profile/watched";
        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.DeleteWatchedSecurity(security);
        }
        var client = utils.createSecurityClient(this._defaultClient, security);
        var queryParams = utils.serializeQueryParams(req);
        var r = client.request(__assign({ url: url + queryParams, method: "delete" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.DeleteWatchedResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 204:
                    break;
                default:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.serviceError = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.ServiceError);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Returns the list of bookmarked items under the active profile.
     */
    Profile.prototype.getBookmarkList = function (req, security, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.GetBookmarkListRequest(req);
        }
        var baseURL = this._serverURL;
        var url = baseURL.replace(/\/$/, "") + "/account/profile/bookmarks/list";
        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.GetBookmarkListSecurity(security);
        }
        var client = utils.createSecurityClient(this._defaultClient, security);
        var queryParams = utils.serializeQueryParams(req);
        var r = client.request(__assign({ url: url + queryParams, method: "get" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.GetBookmarkListResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.itemList = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.ItemList);
                    }
                    break;
                default:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.serviceError = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.ServiceError);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Get the map of bookmarked item ids (itemId => creationDate) under the active profile.
     */
    Profile.prototype.getBookmarks = function (req, security, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.GetBookmarksRequest(req);
        }
        var baseURL = this._serverURL;
        var url = baseURL.replace(/\/$/, "") + "/account/profile/bookmarks";
        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.GetBookmarksSecurity(security);
        }
        var client = utils.createSecurityClient(this._defaultClient, security);
        var queryParams = utils.serializeQueryParams(req);
        var r = client.request(__assign({ url: url + queryParams, method: "get" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.GetBookmarksResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.getBookmarks200ApplicationJSONObject = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data);
                    }
                    break;
                default:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.serviceError = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.ServiceError);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Returns a list of items which have been watched but not completed under the active
     * profile.
     *
     * Multiple episodes under the same show may be watched or in progress, however only a
     * single item belonging to a particular show will be included in the returned list.
     *
     * The next episode to continue watching for a particular show will be the most recent
     * incompletely watched episode, or the next episode following the most recently
     * completely watched episode. Based on the specified `show_item_type` type, either the next
     * episode, the season of the next episode, or the show will be included in the list.
     *
     */
    Profile.prototype.getContinueWatchingList = function (req, security, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.GetContinueWatchingListRequest(req);
        }
        var baseURL = this._serverURL;
        var url = baseURL.replace(/\/$/, "") + "/account/profile/continue-watching/list";
        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.GetContinueWatchingListSecurity(security);
        }
        var client = utils.createSecurityClient(this._defaultClient, security);
        var queryParams = utils.serializeQueryParams(req);
        var r = client.request(__assign({ url: url + queryParams, method: "get" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.GetContinueWatchingListResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.itemList = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.ItemList);
                    }
                    break;
                default:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.serviceError = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.ServiceError);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Get the bookmark for an item under the active profile.
     */
    Profile.prototype.getItemBookmark = function (req, security, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.GetItemBookmarkRequest(req);
        }
        var baseURL = this._serverURL;
        var url = utils.generateURL(baseURL, "/account/profile/bookmarks/{itemId}", req);
        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.GetItemBookmarkSecurity(security);
        }
        var client = utils.createSecurityClient(this._defaultClient, security);
        var queryParams = utils.serializeQueryParams(req);
        var r = client.request(__assign({ url: url + queryParams, method: "get" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.GetItemBookmarkResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.bookmark = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.Bookmark);
                    }
                    break;
                default:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.serviceError = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.ServiceError);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Get the rating info for an item under the active profile.
     */
    Profile.prototype.getItemRating = function (req, security, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.GetItemRatingRequest(req);
        }
        var baseURL = this._serverURL;
        var url = utils.generateURL(baseURL, "/account/profile/ratings/{itemId}", req);
        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.GetItemRatingSecurity(security);
        }
        var client = utils.createSecurityClient(this._defaultClient, security);
        var queryParams = utils.serializeQueryParams(req);
        var r = client.request(__assign({ url: url + queryParams, method: "get" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.GetItemRatingResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.userRating = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.UserRating);
                    }
                    break;
                default:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.serviceError = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.ServiceError);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Get the watched status info for an item under the active profile.
     */
    Profile.prototype.getItemWatchedStatus = function (req, security, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.GetItemWatchedStatusRequest(req);
        }
        var baseURL = this._serverURL;
        var url = utils.generateURL(baseURL, "/account/profile/watched/{itemId}", req);
        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.GetItemWatchedStatusSecurity(security);
        }
        var client = utils.createSecurityClient(this._defaultClient, security);
        var queryParams = utils.serializeQueryParams(req);
        var r = client.request(__assign({ url: url + queryParams, method: "get" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.GetItemWatchedStatusResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.watched = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.Watched);
                    }
                    break;
                default:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.serviceError = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.ServiceError);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Returns the next item to play given a source item id.
     *
     * For an unwatched show it returns the first episode available to the account.
     *
     * For a watched show it returns the last incompletely watched episode by the profile,
     * or the episode that immediately follows the last completely watched episode
     * or nothing.
     *
     * For an episode it always returns the immediately following episode, if available to
     * the account, or nothing.
     *
     * If the response does not contain a `next` property then no item was found.
     *
     */
    Profile.prototype.getNextPlaybackItem = function (req, security, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.GetNextPlaybackItemRequest(req);
        }
        var baseURL = this._serverURL;
        var url = utils.generateURL(baseURL, "/account/profile/items/{itemId}/next", req);
        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.GetNextPlaybackItemSecurity(security);
        }
        var client = utils.createSecurityClient(this._defaultClient, security);
        var queryParams = utils.serializeQueryParams(req);
        var r = client.request(__assign({ url: url + queryParams, method: "get" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.GetNextPlaybackItemResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.nextPlaybackItem = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.NextPlaybackItem);
                    }
                    break;
                default:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.serviceError = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.ServiceError);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Get the details of the active profile, including watched, bookmarked and rated items.
     */
    Profile.prototype.getProfile = function (req, security, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.GetProfileRequest(req);
        }
        var baseURL = this._serverURL;
        var url = baseURL.replace(/\/$/, "") + "/account/profile";
        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.GetProfileSecurity(security);
        }
        var client = utils.createSecurityClient(this._defaultClient, security);
        var queryParams = utils.serializeQueryParams(req);
        var r = client.request(__assign({ url: url + queryParams, method: "get" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.GetProfileResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.profileDetail = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.ProfileDetail);
                    }
                    break;
                default:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.serviceError = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.ServiceError);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Get the map of rated item ids (itemId => rating out of 10) under the active profile.
     */
    Profile.prototype.getRatings = function (req, security, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.GetRatingsRequest(req);
        }
        var baseURL = this._serverURL;
        var url = baseURL.replace(/\/$/, "") + "/account/profile/ratings";
        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.GetRatingsSecurity(security);
        }
        var client = utils.createSecurityClient(this._defaultClient, security);
        var queryParams = utils.serializeQueryParams(req);
        var r = client.request(__assign({ url: url + queryParams, method: "get" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.GetRatingsResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.getRatings200ApplicationJSONObject = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data);
                    }
                    break;
                default:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.serviceError = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.ServiceError);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Returns the list of rated items under the active profile.
     */
    Profile.prototype.getRatingsList = function (req, security, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.GetRatingsListRequest(req);
        }
        var baseURL = this._serverURL;
        var url = baseURL.replace(/\/$/, "") + "/account/profile/ratings/list";
        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.GetRatingsListSecurity(security);
        }
        var client = utils.createSecurityClient(this._defaultClient, security);
        var queryParams = utils.serializeQueryParams(req);
        var r = client.request(__assign({ url: url + queryParams, method: "get" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.GetRatingsListResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.itemList = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.ItemList);
                    }
                    break;
                default:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.serviceError = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.ServiceError);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Get the map of watched item ids (itemId => last playhead position) under the active profile.
     */
    Profile.prototype.getWatched = function (req, security, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.GetWatchedRequest(req);
        }
        var baseURL = this._serverURL;
        var url = baseURL.replace(/\/$/, "") + "/account/profile/watched";
        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.GetWatchedSecurity(security);
        }
        var client = utils.createSecurityClient(this._defaultClient, security);
        var queryParams = utils.serializeQueryParams(req);
        var r = client.request(__assign({ url: url + queryParams, method: "get" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.GetWatchedResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.getWatched200ApplicationJSONObject = {};
                        var resFieldDepth = utils.getResFieldDepth(res);
                        res.getWatched200ApplicationJSONObject = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.Watched, resFieldDepth);
                    }
                    break;
                default:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.serviceError = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.ServiceError);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Returns the list of watched items under the active profile.
     */
    Profile.prototype.getWatchedList = function (req, security, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.GetWatchedListRequest(req);
        }
        var baseURL = this._serverURL;
        var url = baseURL.replace(/\/$/, "") + "/account/profile/watched/list";
        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.GetWatchedListSecurity(security);
        }
        var client = utils.createSecurityClient(this._defaultClient, security);
        var queryParams = utils.serializeQueryParams(req);
        var r = client.request(__assign({ url: url + queryParams, method: "get" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.GetWatchedListResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.itemList = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.ItemList);
                    }
                    break;
                default:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.serviceError = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.ServiceError);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Rate an item under the active profile.
     *
     * Creates one if it doesn't exist, overwrites one if it does.
     *
     */
    Profile.prototype.rateItem = function (req, security, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.RateItemRequest(req);
        }
        var baseURL = this._serverURL;
        var url = utils.generateURL(baseURL, "/account/profile/ratings/{itemId}", req);
        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.RateItemSecurity(security);
        }
        var client = utils.createSecurityClient(this._defaultClient, security);
        var queryParams = utils.serializeQueryParams(req);
        var r = client.request(__assign({ url: url + queryParams, method: "put" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.RateItemResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.userRating = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.UserRating);
                    }
                    break;
                default:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.serviceError = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.ServiceError);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Record the watched playhead position of a video under the active profile.
     *
     * Can be used later to resume a video from where it was last watched.
     *
     * Creates one if it doesn't exist, overwrites one if it does.
     *
     */
    Profile.prototype.setItemWatchedStatus = function (req, security, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.SetItemWatchedStatusRequest(req);
        }
        var baseURL = this._serverURL;
        var url = utils.generateURL(baseURL, "/account/profile/watched/{itemId}", req);
        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.SetItemWatchedStatusSecurity(security);
        }
        var client = utils.createSecurityClient(this._defaultClient, security);
        var queryParams = utils.serializeQueryParams(req);
        var r = client.request(__assign({ url: url + queryParams, method: "put" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.SetItemWatchedStatusResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.watched = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.Watched);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 204:
                    break;
                default:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.serviceError = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.ServiceError);
                    }
                    break;
            }
            return res;
        });
    };
    return Profile;
}());
exports.Profile = Profile;
