/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * ServingContext - The serving context for this restriction.
 */
public class ServingContext {
    /**
     * Matches all contexts.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("all")
    public ServingContextAllEnum all;
    public ServingContext withAll(ServingContextAllEnum all) {
        this.all = all;
        return this;
    }
    
    /**
     * Output only. The app type the restriction applies to for mobile device.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("appType")
    public AppContext appType;
    public ServingContext withAppType(AppContext appType) {
        this.appType = appType;
        return this;
    }
    
    /**
     * Output only. The auction type the restriction applies to.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("auctionType")
    public AuctionContext auctionType;
    public ServingContext withAuctionType(AuctionContext auctionType) {
        this.auctionType = auctionType;
        return this;
    }
    
    /**
     * Output only. The Geo criteria the restriction applies to.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("location")
    public LocationContext location;
    public ServingContext withLocation(LocationContext location) {
        this.location = location;
        return this;
    }
    
    /**
     * Output only. The type of platform the restriction applies to.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("platform")
    public PlatformContext platform;
    public ServingContext withPlatform(PlatformContext platform) {
        this.platform = platform;
        return this;
    }
    
    /**
     * Output only. A security context.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("securityType")
    public SecurityContext securityType;
    public ServingContext withSecurityType(SecurityContext securityType) {
        this.securityType = securityType;
        return this;
    }
    
}
