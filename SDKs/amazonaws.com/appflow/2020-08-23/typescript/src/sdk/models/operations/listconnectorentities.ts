/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
import { Expose } from "class-transformer";

/**
 *  The type of connector, such as Salesforce, Amplitude, and so on.
 */
export enum ListConnectorEntitiesRequestBodyConnectorTypeEnum {
  Salesforce = "Salesforce",
  Singular = "Singular",
  Slack = "Slack",
  Redshift = "Redshift",
  S3 = "S3",
  Marketo = "Marketo",
  Googleanalytics = "Googleanalytics",
  Zendesk = "Zendesk",
  Servicenow = "Servicenow",
  Datadog = "Datadog",
  Trendmicro = "Trendmicro",
  Snowflake = "Snowflake",
  Dynatrace = "Dynatrace",
  Infornexus = "Infornexus",
  Amplitude = "Amplitude",
  Veeva = "Veeva",
  EventBridge = "EventBridge",
  LookoutMetrics = "LookoutMetrics",
  Upsolver = "Upsolver",
  Honeycode = "Honeycode",
  CustomerProfiles = "CustomerProfiles",
  SAPOData = "SAPOData",
  CustomConnector = "CustomConnector",
  Pardot = "Pardot",
}

export class ListConnectorEntitiesRequestBody extends SpeakeasyBase {
  /**
   * The version of the API that's used by the connector.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "apiVersion" })
  apiVersion?: string;

  /**
   *  The name of the connector profile. The name is unique for each <code>ConnectorProfile</code> in the Amazon Web Services account, and is used to query the downstream connector.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "connectorProfileName" })
  connectorProfileName?: string;

  /**
   *  The type of connector, such as Salesforce, Amplitude, and so on.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "connectorType" })
  connectorType?: ListConnectorEntitiesRequestBodyConnectorTypeEnum;

  /**
   *  This optional parameter is specific to connector implementation. Some connectors support multiple levels or categories of entities. You can find out the list of roots for such providers by sending a request without the <code>entitiesPath</code> parameter. If the connector supports entities at different roots, this initial request returns the list of roots. Otherwise, this request returns all entities supported by the provider.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "entitiesPath" })
  entitiesPath?: string;

  /**
   * The maximum number of items that the operation returns in the response.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "maxResults" })
  maxResults?: number;

  /**
   * A token that was provided by your prior <code>ListConnectorEntities</code> operation if the response was too big for the page size. You specify this token to get the next page of results in paginated response.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "nextToken" })
  nextToken?: string;
}

export class ListConnectorEntitiesRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  requestBody: ListConnectorEntitiesRequestBody;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Algorithm",
  })
  xAmzAlgorithm?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Content-Sha256",
  })
  xAmzContentSha256?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Credential",
  })
  xAmzCredential?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Date",
  })
  xAmzDate?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Security-Token",
  })
  xAmzSecurityToken?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Signature",
  })
  xAmzSignature?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-SignedHeaders",
  })
  xAmzSignedHeaders?: string;
}

export class ListConnectorEntitiesResponse extends SpeakeasyBase {
  /**
   * ConnectorAuthenticationException
   */
  @SpeakeasyMetadata()
  connectorAuthenticationException?: any;

  /**
   * ConnectorServerException
   */
  @SpeakeasyMetadata()
  connectorServerException?: any;

  @SpeakeasyMetadata()
  contentType: string;

  /**
   * InternalServerException
   */
  @SpeakeasyMetadata()
  internalServerException?: any;

  /**
   * Success
   */
  @SpeakeasyMetadata()
  listConnectorEntitiesResponse?: shared.ListConnectorEntitiesResponse;

  /**
   * ResourceNotFoundException
   */
  @SpeakeasyMetadata()
  resourceNotFoundException?: any;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * ValidationException
   */
  @SpeakeasyMetadata()
  validationException?: any;
}
