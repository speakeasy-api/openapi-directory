<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class AppsFindAndModifyApps 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Removes app and all versions
     * 
     * - This method is called on behalf of a developer.
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteAppsAppIdRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteAppsAppIdResponse
     */
	public function deleteAppsAppId(
        \OpenAPI\OpenAPI\Models\Operations\DeleteAppsAppIdRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteAppsAppIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/apps/{appId}', \OpenAPI\OpenAPI\Models\Operations\DeleteAppsAppIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DeleteAppsAppIdRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteAppsAppIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * Removes AppVersion
     * 
     * - This method is called on behalf of a developer.
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteAppsAppIdVersionsVersionRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteAppsAppIdVersionsVersionResponse
     */
	public function deleteAppsAppIdVersionsVersion(
        \OpenAPI\OpenAPI\Models\Operations\DeleteAppsAppIdVersionsVersionRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteAppsAppIdVersionsVersionResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/apps/{appId}/versions/{version}', \OpenAPI\OpenAPI\Models\Operations\DeleteAppsAppIdVersionsVersionRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DeleteAppsAppIdVersionsVersionRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteAppsAppIdVersionsVersionResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * Returns a paginated list of APPROVED or SUSPENDED apps
     * 
     * - Results are paginated and the default is value is 1000 if no limit is provided
     * - If no query is specified, returns all APPROVED or SUSPENDED apps within the marketplace
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetAppsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetAppsResponse
     */
	public function getApps(
        \OpenAPI\OpenAPI\Models\Operations\GetAppsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetAppsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/apps');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetAppsRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetAppsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 400) {
        }
        else {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Returns a single APPROVED or SUSPENDED app
     * 
     * - A 'view' event is recorded when trackViews is set to true
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetAppsBySafeNameSafeNameRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetAppsBySafeNameSafeNameResponse
     */
	public function getAppsBySafeNameSafeName(
        \OpenAPI\OpenAPI\Models\Operations\GetAppsBySafeNameSafeNameRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetAppsBySafeNameSafeNameResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/apps/bySafeName/{safeName}', \OpenAPI\OpenAPI\Models\Operations\GetAppsBySafeNameSafeNameRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetAppsBySafeNameSafeNameRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetAppsBySafeNameSafeNameResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 404) {
        }
        else {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Searches through the text of fields to find APPROVED or SUSPENDED apps
     * 
     * - Results are returned for the market provided within the basic authentication credentials
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetAppsTextSearchRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetAppsTextSearchResponse
     */
	public function getAppsTextSearch(
        \OpenAPI\OpenAPI\Models\Operations\GetAppsTextSearchRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetAppsTextSearchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/apps/textSearch');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetAppsTextSearchRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetAppsTextSearchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 400) {
        }
        else {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Returns a paginated list of AppVersions
     * 
     * - Results are paginated when limit is set, otherwise all results are returned
     * - If no query is specified, returns all AppVersions within the marketplace
     * - Only returns AppVersions owned by this developer
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetAppsVersionsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetAppsVersionsResponse
     */
	public function getAppsVersions(
        \OpenAPI\OpenAPI\Models\Operations\GetAppsVersionsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetAppsVersionsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/apps/versions');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetAppsVersionsRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetAppsVersionsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 400) {
        }
        else {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Returns a single APPROVED or SUSPENDED app
     * 
     * - A 'view' event is recorded when trackViews is set to true
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetAppsAppIdRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetAppsAppIdResponse
     */
	public function getAppsAppId(
        \OpenAPI\OpenAPI\Models\Operations\GetAppsAppIdRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetAppsAppIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/apps/{appId}', \OpenAPI\OpenAPI\Models\Operations\GetAppsAppIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetAppsAppIdRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetAppsAppIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 404) {
        }
        else {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Returns a single AppVersion
     * 
     * - Only returns AppVersions owned by this developer
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetAppsAppIdVersionsVersionRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetAppsAppIdVersionsVersionResponse
     */
	public function getAppsAppIdVersionsVersion(
        \OpenAPI\OpenAPI\Models\Operations\GetAppsAppIdVersionsVersionRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetAppsAppIdVersionsVersionResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/apps/{appId}/versions/{version}', \OpenAPI\OpenAPI\Models\Operations\GetAppsAppIdVersionsVersionRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetAppsAppIdVersionsVersionRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetAppsAppIdVersionsVersionResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 404) {
        }
        else {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Updates the app fields or creates a new version
     * 
     * - This method is called on behalf of a developer.
     * - Price and is required if the model is 'single' or 'recurring'
     * - Returns the newly updated app
     * - This endpoint updates only the fields provided in the request (relative update). In contrast, the POST version of this method replaces the entire object to match the request (absolute update). 
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PatchAppsAppIdVersionsVersionRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PatchAppsAppIdVersionsVersionResponse
     */
	public function patchAppsAppIdVersionsVersion(
        \OpenAPI\OpenAPI\Models\Operations\PatchAppsAppIdVersionsVersionRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PatchAppsAppIdVersionsVersionResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/apps/{appId}/versions/{version}', \OpenAPI\OpenAPI\Models\Operations\PatchAppsAppIdVersionsVersionRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\PatchAppsAppIdVersionsVersionRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PatchAppsAppIdVersionsVersionResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 409) {
        }
        else {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Adds a new app for this developer
     * 
     * - This method is called on behalf of a developer.
     * - Price is required if the model is 'single' or 'recurring'
     * - Returns the newly created app
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostAppsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostAppsResponse
     */
	public function postApps(
        \OpenAPI\OpenAPI\Models\Operations\PostAppsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostAppsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/apps');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\PostAppsRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostAppsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 409) {
        }
        else {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Change the live app to another, previously approved version
     * 
     * - This method is called on behalf of a developer.
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostAppsAppIdLiveRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostAppsAppIdLiveResponse
     */
	public function postAppsAppIdLive(
        \OpenAPI\OpenAPI\Models\Operations\PostAppsAppIdLiveRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostAppsAppIdLiveResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/apps/{appId}/live', \OpenAPI\OpenAPI\Models\Operations\PostAppsAppIdLiveRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\PostAppsAppIdLiveRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostAppsAppIdLiveResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * Publishes the current working version of the app to the marketplace
     * 
     * - This method is called on behalf of a developer. 
     * - Only effects the current working version of the app.
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostAppsAppIdPublishRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostAppsAppIdPublishResponse
     */
	public function postAppsAppIdPublish(
        \OpenAPI\OpenAPI\Models\Operations\PostAppsAppIdPublishRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostAppsAppIdPublishResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/apps/{appId}/publish', \OpenAPI\OpenAPI\Models\Operations\PostAppsAppIdPublishRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\PostAppsAppIdPublishRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostAppsAppIdPublishResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 202 or $httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 409) {
        }

        return $response;
    }
	
    /**
     * Updates the app or creates a new version
     * 
     * - This method is called on behalf of a developer.
     * - Price and is required if the model is 'single' or 'recurring'
     * - Returns the newly updated app
     * - This endpoint replaces the entire object to match the request (absolute update). In contrast, the PATCH version of this endpoint updates only the fields provided in the request (relative update).
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostAppsAppIdVersionsVersionRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostAppsAppIdVersionsVersionResponse
     */
	public function postAppsAppIdVersionsVersion(
        \OpenAPI\OpenAPI\Models\Operations\PostAppsAppIdVersionsVersionRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostAppsAppIdVersionsVersionResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/apps/{appId}/versions/{version}', \OpenAPI\OpenAPI\Models\Operations\PostAppsAppIdVersionsVersionRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\PostAppsAppIdVersionsVersionRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostAppsAppIdVersionsVersionResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 409) {
        }
        else {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Allows a developer or administrator to change the status of apps
     * 
     * Only certain status changes are allowed. For instance, a developer is only able to suspend and unsuspend their app (which must already be approved). See here for a state change diagram of allowed status changes for administrators: https://support.openchannel.io/documentation/api/#415-apps-status-change
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostAppsAppIdVersionsVersionStatusRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostAppsAppIdVersionsVersionStatusResponse
     */
	public function postAppsAppIdVersionsVersionStatus(
        \OpenAPI\OpenAPI\Models\Operations\PostAppsAppIdVersionsVersionStatusRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostAppsAppIdVersionsVersionStatusResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/apps/{appId}/versions/{version}/status', \OpenAPI\OpenAPI\Models\Operations\PostAppsAppIdVersionsVersionStatusRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\PostAppsAppIdVersionsVersionStatusRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostAppsAppIdVersionsVersionStatusResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 412) {
        }

        return $response;
    }
}