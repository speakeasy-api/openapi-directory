// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

type DeviceListSecurity struct {
	OAuth string `security:"scheme,type=oauth2,name=Authorization"`
}

type DeviceListRequest struct {
	// The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes.
	NextPageToken *string `queryParam:"style=form,explode=true,name=next_page_token"`
	// **Deprecated** - This field has been deprecated and we will stop supporting it completely in a future release. Please use "next_page_token" for pagination instead of this field.
	//
	// The page number of the current page in the returned records.
	PageNumber *int64 `queryParam:"style=form,explode=true,name=page_number"`
	// The number of records returned within a single API call.
	PageSize *int64 `queryParam:"style=form,explode=true,name=page_size"`
}

// DeviceListH323SIPDeviceListTheH323SIPDeviceObjectEncryptionEnum - Device encryption:<br>`auto` - auto.<br>`yes` - yes.<br>`no` - no.
type DeviceListH323SIPDeviceListTheH323SIPDeviceObjectEncryptionEnum string

const (
	DeviceListH323SIPDeviceListTheH323SIPDeviceObjectEncryptionEnumAuto DeviceListH323SIPDeviceListTheH323SIPDeviceObjectEncryptionEnum = "auto"
	DeviceListH323SIPDeviceListTheH323SIPDeviceObjectEncryptionEnumYes  DeviceListH323SIPDeviceListTheH323SIPDeviceObjectEncryptionEnum = "yes"
	DeviceListH323SIPDeviceListTheH323SIPDeviceObjectEncryptionEnumNo   DeviceListH323SIPDeviceListTheH323SIPDeviceObjectEncryptionEnum = "no"
)

func (e *DeviceListH323SIPDeviceListTheH323SIPDeviceObjectEncryptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "auto":
		fallthrough
	case "yes":
		fallthrough
	case "no":
		*e = DeviceListH323SIPDeviceListTheH323SIPDeviceObjectEncryptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for DeviceListH323SIPDeviceListTheH323SIPDeviceObjectEncryptionEnum: %s", s)
	}
}

// DeviceListH323SIPDeviceListTheH323SIPDeviceObjectProtocolEnum - Device protocol:<br>`H.323` - H.323.<br>`SIP` - SIP.
type DeviceListH323SIPDeviceListTheH323SIPDeviceObjectProtocolEnum string

const (
	DeviceListH323SIPDeviceListTheH323SIPDeviceObjectProtocolEnumH323 DeviceListH323SIPDeviceListTheH323SIPDeviceObjectProtocolEnum = "H.323"
	DeviceListH323SIPDeviceListTheH323SIPDeviceObjectProtocolEnumSip  DeviceListH323SIPDeviceListTheH323SIPDeviceObjectProtocolEnum = "SIP"
)

func (e *DeviceListH323SIPDeviceListTheH323SIPDeviceObjectProtocolEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "H.323":
		fallthrough
	case "SIP":
		*e = DeviceListH323SIPDeviceListTheH323SIPDeviceObjectProtocolEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for DeviceListH323SIPDeviceListTheH323SIPDeviceObjectProtocolEnum: %s", s)
	}
}

// DeviceListH323SIPDeviceListTheH323SIPDeviceObject - The H.323/SIP device object.
type DeviceListH323SIPDeviceListTheH323SIPDeviceObject struct {
	// Device encryption:<br>`auto` - auto.<br>`yes` - yes.<br>`no` - no.
	Encryption DeviceListH323SIPDeviceListTheH323SIPDeviceObjectEncryptionEnum `json:"encryption"`
	// Device ID.
	ID *string `json:"id,omitempty"`
	// Device IP.
	IP string `json:"ip"`
	// Device name.
	Name string `json:"name"`
	// Device protocol:<br>`H.323` - H.323.<br>`SIP` - SIP.
	Protocol DeviceListH323SIPDeviceListTheH323SIPDeviceObjectProtocolEnum `json:"protocol"`
}

// DeviceListH323SIPDeviceList - Pagination Object.
type DeviceListH323SIPDeviceList struct {
	// List of H.323/SIP Device objects.
	Devices []DeviceListH323SIPDeviceListTheH323SIPDeviceObject `json:"devices,omitempty"`
	// The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes.
	NextPageToken *string `json:"next_page_token,omitempty"`
	// The number of pages returned for the request made.
	PageCount *int64 `json:"page_count,omitempty"`
	// **Deprecated**: This field has been deprecated. Please use the "next_page_token" field for pagination instead of this field.
	//
	// The page number of the current results.
	PageNumber *int64 `json:"page_number,omitempty"`
	// The number of records returned with a single API call.
	PageSize *int64 `json:"page_size,omitempty"`
	// The total number of all the records available across pages.
	TotalRecords *int64 `json:"total_records,omitempty"`
}

type DeviceListResponse struct {
	Body        []byte
	ContentType string
	// **HTTP Status Code:** `200`<br>
	// List of H.323/SIP devices returned.<br>
	// **Error Code:** `200`<br>
	// No permission.
	H323SIPDeviceList *DeviceListH323SIPDeviceList
	StatusCode        int
	RawResponse       *http.Response
}
