// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"net/http"
	"openapi/pkg/models/shared"
)

type CreateMonitorHeaders struct {
	XAmzAlgorithm     *string `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
}

type CreateMonitorRequestBody struct {
	// A unique, case-sensitive string of up to 64 ASCII characters that you specify to make an idempotent API request. Don't reuse the same client token for other API requests.
	ClientToken *string `json:"ClientToken,omitempty"`
	// The maximum number of city-network combinations (that is, combinations of a city location and network, such as an ISP) to be monitored for your resources.
	MaxCityNetworksToMonitor int64 `json:"MaxCityNetworksToMonitor"`
	// The name of the monitor.
	MonitorName string `json:"MonitorName"`
	// <p>The resources to include in a monitor, which you provide as a set of Amazon Resource Names (ARNs).</p> <p>You can add a combination of Amazon Virtual Private Clouds (VPCs) and Amazon CloudFront distributions, or you can add Amazon WorkSpaces directories. You can't add all three types of resources.</p> <note> <p>If you add only VPC resources, at least one VPC must have an Internet Gateway attached to it, to make sure that it has internet connectivity.</p> </note>
	Resources []string `json:"Resources,omitempty"`
	// The tags for a monitor. You can add a maximum of 50 tags in Internet Monitor.
	Tags map[string]string `json:"Tags,omitempty"`
}

type CreateMonitorRequest struct {
	Headers CreateMonitorHeaders
	Request CreateMonitorRequestBody `request:"mediaType=application/json"`
}

type CreateMonitorResponse struct {
	// AccessDeniedException
	AccessDeniedException interface{}
	// ConflictException
	ConflictException interface{}
	ContentType       string
	// Success
	CreateMonitorOutput *shared.CreateMonitorOutput
	// InternalServerException
	InternalServerException interface{}
	// LimitExceededException
	LimitExceededException interface{}
	StatusCode             int
	RawResponse            *http.Response
	// ThrottlingException
	ThrottlingException interface{}
	// ValidationException
	ValidationException interface{}
}
