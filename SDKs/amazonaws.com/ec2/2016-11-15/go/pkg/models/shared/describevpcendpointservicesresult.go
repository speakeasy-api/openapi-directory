// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// DescribeVpcEndpointServicesResultServiceDetailsPayerResponsibilityEnum - The payer responsibility.
type DescribeVpcEndpointServicesResultServiceDetailsPayerResponsibilityEnum string

const (
	DescribeVpcEndpointServicesResultServiceDetailsPayerResponsibilityEnumServiceOwner DescribeVpcEndpointServicesResultServiceDetailsPayerResponsibilityEnum = "ServiceOwner"
)

func (e DescribeVpcEndpointServicesResultServiceDetailsPayerResponsibilityEnum) ToPointer() *DescribeVpcEndpointServicesResultServiceDetailsPayerResponsibilityEnum {
	return &e
}

func (e *DescribeVpcEndpointServicesResultServiceDetailsPayerResponsibilityEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ServiceOwner":
		*e = DescribeVpcEndpointServicesResultServiceDetailsPayerResponsibilityEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DescribeVpcEndpointServicesResultServiceDetailsPayerResponsibilityEnum: %v", v)
	}
}

// DescribeVpcEndpointServicesResultServiceDetailsPrivateDNSNameVerificationStateEnum - <p>The verification state of the VPC endpoint service.</p> <p>Consumers of the endpoint service cannot use the private name when the state is not <code>verified</code>.</p>
type DescribeVpcEndpointServicesResultServiceDetailsPrivateDNSNameVerificationStateEnum string

const (
	DescribeVpcEndpointServicesResultServiceDetailsPrivateDNSNameVerificationStateEnumPendingVerification DescribeVpcEndpointServicesResultServiceDetailsPrivateDNSNameVerificationStateEnum = "pendingVerification"
	DescribeVpcEndpointServicesResultServiceDetailsPrivateDNSNameVerificationStateEnumVerified            DescribeVpcEndpointServicesResultServiceDetailsPrivateDNSNameVerificationStateEnum = "verified"
	DescribeVpcEndpointServicesResultServiceDetailsPrivateDNSNameVerificationStateEnumFailed              DescribeVpcEndpointServicesResultServiceDetailsPrivateDNSNameVerificationStateEnum = "failed"
)

func (e DescribeVpcEndpointServicesResultServiceDetailsPrivateDNSNameVerificationStateEnum) ToPointer() *DescribeVpcEndpointServicesResultServiceDetailsPrivateDNSNameVerificationStateEnum {
	return &e
}

func (e *DescribeVpcEndpointServicesResultServiceDetailsPrivateDNSNameVerificationStateEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "pendingVerification":
		fallthrough
	case "verified":
		fallthrough
	case "failed":
		*e = DescribeVpcEndpointServicesResultServiceDetailsPrivateDNSNameVerificationStateEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DescribeVpcEndpointServicesResultServiceDetailsPrivateDNSNameVerificationStateEnum: %v", v)
	}
}

// DescribeVpcEndpointServicesResultServiceDetailsPrivateDNSNames - Information about the Private DNS name for interface endpoints.
type DescribeVpcEndpointServicesResultServiceDetailsPrivateDNSNames struct {
	PrivateDNSName *string
}

// DescribeVpcEndpointServicesResultServiceDetailsServiceTypeServiceTypeEnum - The type of service.
type DescribeVpcEndpointServicesResultServiceDetailsServiceTypeServiceTypeEnum string

const (
	DescribeVpcEndpointServicesResultServiceDetailsServiceTypeServiceTypeEnumInterface           DescribeVpcEndpointServicesResultServiceDetailsServiceTypeServiceTypeEnum = "Interface"
	DescribeVpcEndpointServicesResultServiceDetailsServiceTypeServiceTypeEnumGateway             DescribeVpcEndpointServicesResultServiceDetailsServiceTypeServiceTypeEnum = "Gateway"
	DescribeVpcEndpointServicesResultServiceDetailsServiceTypeServiceTypeEnumGatewayLoadBalancer DescribeVpcEndpointServicesResultServiceDetailsServiceTypeServiceTypeEnum = "GatewayLoadBalancer"
)

func (e DescribeVpcEndpointServicesResultServiceDetailsServiceTypeServiceTypeEnum) ToPointer() *DescribeVpcEndpointServicesResultServiceDetailsServiceTypeServiceTypeEnum {
	return &e
}

func (e *DescribeVpcEndpointServicesResultServiceDetailsServiceTypeServiceTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Interface":
		fallthrough
	case "Gateway":
		fallthrough
	case "GatewayLoadBalancer":
		*e = DescribeVpcEndpointServicesResultServiceDetailsServiceTypeServiceTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DescribeVpcEndpointServicesResultServiceDetailsServiceTypeServiceTypeEnum: %v", v)
	}
}

// DescribeVpcEndpointServicesResultServiceDetailsServiceType - Describes the type of service for a VPC endpoint.
type DescribeVpcEndpointServicesResultServiceDetailsServiceType struct {
	ServiceType *DescribeVpcEndpointServicesResultServiceDetailsServiceTypeServiceTypeEnum
}

type DescribeVpcEndpointServicesResultServiceDetailsSupportedIPAddressTypesEnum string

const (
	DescribeVpcEndpointServicesResultServiceDetailsSupportedIPAddressTypesEnumIpv4 DescribeVpcEndpointServicesResultServiceDetailsSupportedIPAddressTypesEnum = "ipv4"
	DescribeVpcEndpointServicesResultServiceDetailsSupportedIPAddressTypesEnumIpv6 DescribeVpcEndpointServicesResultServiceDetailsSupportedIPAddressTypesEnum = "ipv6"
)

func (e DescribeVpcEndpointServicesResultServiceDetailsSupportedIPAddressTypesEnum) ToPointer() *DescribeVpcEndpointServicesResultServiceDetailsSupportedIPAddressTypesEnum {
	return &e
}

func (e *DescribeVpcEndpointServicesResultServiceDetailsSupportedIPAddressTypesEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ipv4":
		fallthrough
	case "ipv6":
		*e = DescribeVpcEndpointServicesResultServiceDetailsSupportedIPAddressTypesEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DescribeVpcEndpointServicesResultServiceDetailsSupportedIPAddressTypesEnum: %v", v)
	}
}

// DescribeVpcEndpointServicesResultServiceDetailsTags - Describes a tag.
type DescribeVpcEndpointServicesResultServiceDetailsTags struct {
	Key   *string
	Value *string
}

// DescribeVpcEndpointServicesResultServiceDetails - Describes a VPC endpoint service.
type DescribeVpcEndpointServicesResultServiceDetails struct {
	AcceptanceRequired              *bool
	AvailabilityZones               []string
	BaseEndpointDNSNames            []string
	ManagesVpcEndpoints             *bool
	Owner                           *string
	PayerResponsibility             *DescribeVpcEndpointServicesResultServiceDetailsPayerResponsibilityEnum
	PrivateDNSName                  *string
	PrivateDNSNameVerificationState *DescribeVpcEndpointServicesResultServiceDetailsPrivateDNSNameVerificationStateEnum
	PrivateDNSNames                 []DescribeVpcEndpointServicesResultServiceDetailsPrivateDNSNames
	ServiceID                       *string
	ServiceName                     *string
	ServiceType                     []DescribeVpcEndpointServicesResultServiceDetailsServiceType
	SupportedIPAddressTypes         []DescribeVpcEndpointServicesResultServiceDetailsSupportedIPAddressTypesEnum
	Tags                            []DescribeVpcEndpointServicesResultServiceDetailsTags
	VpcEndpointPolicySupported      *bool
}

// DescribeVpcEndpointServicesResult - Success
type DescribeVpcEndpointServicesResult struct {
	NextToken      *string
	ServiceDetails []DescribeVpcEndpointServicesResultServiceDetails
	ServiceNames   []string
}
