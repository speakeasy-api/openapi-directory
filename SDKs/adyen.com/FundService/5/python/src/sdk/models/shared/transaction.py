"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from ..shared import amount as shared_amount
from ..shared import bankaccountdetail as shared_bankaccountdetail
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from enum import Enum
from marshmallow import fields
from sdk import utils
from typing import Optional

class TransactionTransactionStatusEnum(str, Enum):
    r"""The status of the transaction.
    >Permitted values: `PendingCredit`, `CreditFailed`, `CreditClosed`, `CreditSuspended`, `Credited`, `Converted`, `PendingDebit`, `DebitFailed`, `Debited`, `DebitReversedReceived`, `DebitedReversed`, `ChargebackReceived`, `Chargeback`, `ChargebackReversedReceived`, `ChargebackReversed`, `Payout`, `PayoutReversed`, `FundTransfer`, `PendingFundTransfer`, `ManualCorrected`.
    """
    BALANCE_NOT_PAID_OUT_TRANSFER = 'BalanceNotPaidOutTransfer'
    BALANCE_PLATFORM_SWEEP = 'BalancePlatformSweep'
    BALANCE_PLATFORM_SWEEP_RETURNED = 'BalancePlatformSweepReturned'
    CHARGEBACK = 'Chargeback'
    CHARGEBACK_CORRECTION = 'ChargebackCorrection'
    CHARGEBACK_CORRECTION_RECEIVED = 'ChargebackCorrectionReceived'
    CHARGEBACK_RECEIVED = 'ChargebackReceived'
    CHARGEBACK_REVERSED = 'ChargebackReversed'
    CHARGEBACK_REVERSED_CORRECTION = 'ChargebackReversedCorrection'
    CHARGEBACK_REVERSED_CORRECTION_RECEIVED = 'ChargebackReversedCorrectionReceived'
    CHARGEBACK_REVERSED_RECEIVED = 'ChargebackReversedReceived'
    CONVERTED = 'Converted'
    CREDIT_CLOSED = 'CreditClosed'
    CREDIT_FAILED = 'CreditFailed'
    CREDIT_REVERSED = 'CreditReversed'
    CREDIT_REVERSED_RECEIVED = 'CreditReversedReceived'
    CREDIT_SUSPENDED = 'CreditSuspended'
    CREDITED = 'Credited'
    DEBIT_FAILED = 'DebitFailed'
    DEBIT_REVERSED_RECEIVED = 'DebitReversedReceived'
    DEBITED = 'Debited'
    DEBITED_REVERSED = 'DebitedReversed'
    DEPOSIT_CORRECTION_CREDITED = 'DepositCorrectionCredited'
    DEPOSIT_CORRECTION_DEBITED = 'DepositCorrectionDebited'
    FEE = 'Fee'
    FUND_TRANSFER = 'FundTransfer'
    FUND_TRANSFER_REVERSED = 'FundTransferReversed'
    INVOICE_DEDUCTION_CREDITED = 'InvoiceDeductionCredited'
    INVOICE_DEDUCTION_DEBITED = 'InvoiceDeductionDebited'
    MANUAL_CORRECTED = 'ManualCorrected'
    MANUAL_CORRECTION_CREDITED = 'ManualCorrectionCredited'
    MANUAL_CORRECTION_DEBITED = 'ManualCorrectionDebited'
    MERCHANT_PAYIN = 'MerchantPayin'
    MERCHANT_PAYIN_REVERSED = 'MerchantPayinReversed'
    PAYOUT = 'Payout'
    PAYOUT_REVERSED = 'PayoutReversed'
    PENDING_CREDIT = 'PendingCredit'
    PENDING_DEBIT = 'PendingDebit'
    PENDING_FUND_TRANSFER = 'PendingFundTransfer'
    RE_CREDITED = 'ReCredited'
    RE_CREDITED_RECEIVED = 'ReCreditedReceived'
    SECOND_CHARGEBACK = 'SecondChargeback'
    SECOND_CHARGEBACK_CORRECTION = 'SecondChargebackCorrection'
    SECOND_CHARGEBACK_CORRECTION_RECEIVED = 'SecondChargebackCorrectionReceived'
    SECOND_CHARGEBACK_RECEIVED = 'SecondChargebackReceived'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Transaction:
    
    amount: Optional[shared_amount.Amount] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('amount'), 'exclude': lambda f: f is None }})  
    bank_account_detail: Optional[shared_bankaccountdetail.BankAccountDetail] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bankAccountDetail'), 'exclude': lambda f: f is None }})  
    capture_merchant_reference: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('captureMerchantReference'), 'exclude': lambda f: f is None }})
    r"""The merchant reference of a related capture."""  
    capture_psp_reference: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('capturePspReference'), 'exclude': lambda f: f is None }})
    r"""The psp reference of a related capture."""  
    creation_date: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('creationDate'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""The date on which the transaction was performed."""  
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description'), 'exclude': lambda f: f is None }})
    r"""A description of the transaction."""  
    destination_account_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('destinationAccountCode'), 'exclude': lambda f: f is None }})
    r"""The code of the account to which funds were credited during an outgoing fund transfer."""  
    dispute_psp_reference: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('disputePspReference'), 'exclude': lambda f: f is None }})
    r"""The psp reference of the related dispute."""  
    dispute_reason_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('disputeReasonCode'), 'exclude': lambda f: f is None }})
    r"""The reason code of a dispute."""  
    merchant_reference: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('merchantReference'), 'exclude': lambda f: f is None }})
    r"""The merchant reference of a transaction."""  
    payment_psp_reference: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('paymentPspReference'), 'exclude': lambda f: f is None }})
    r"""The psp reference of the related authorisation or transfer."""  
    payout_psp_reference: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('payoutPspReference'), 'exclude': lambda f: f is None }})
    r"""The psp reference of the related payout."""  
    psp_reference: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('pspReference'), 'exclude': lambda f: f is None }})
    r"""The psp reference of a transaction."""  
    source_account_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sourceAccountCode'), 'exclude': lambda f: f is None }})
    r"""The code of the account from which funds were debited during an incoming fund transfer."""  
    transaction_status: Optional[TransactionTransactionStatusEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('transactionStatus'), 'exclude': lambda f: f is None }})
    r"""The status of the transaction.
    >Permitted values: `PendingCredit`, `CreditFailed`, `CreditClosed`, `CreditSuspended`, `Credited`, `Converted`, `PendingDebit`, `DebitFailed`, `Debited`, `DebitReversedReceived`, `DebitedReversed`, `ChargebackReceived`, `Chargeback`, `ChargebackReversedReceived`, `ChargebackReversed`, `Payout`, `PayoutReversed`, `FundTransfer`, `PendingFundTransfer`, `ManualCorrected`.
    """  
    transfer_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('transferCode'), 'exclude': lambda f: f is None }})
    r"""The transfer code of the transaction."""  
    