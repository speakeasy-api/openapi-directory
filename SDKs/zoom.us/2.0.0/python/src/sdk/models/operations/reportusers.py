"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from datetime import date
from enum import Enum
from marshmallow import fields
from sdk import utils
from typing import Optional


@dataclasses.dataclass
class ReportUsersSecurity:
    
    o_auth: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'oauth2', 'field_name': 'Authorization' }})  
    
class ReportUsersTypeEnum(str, Enum):
    r"""Active or inactive hosts.<br>`active` - Active hosts. <br>`inactive` - Inactive hosts."""
    ACTIVE = 'active'
    INACTIVE = 'inactive'


@dataclasses.dataclass
class ReportUsersRequest:
    
    from_: date = dataclasses.field(metadata={'query_param': { 'field_name': 'from', 'style': 'form', 'explode': True }})
    r"""Start date in 'yyyy-mm-dd' format. The date range defined by the \\"from\\" and \\"to\\" parameters should only be one month as the report includes only one month worth of data at once."""  
    to: date = dataclasses.field(metadata={'query_param': { 'field_name': 'to', 'style': 'form', 'explode': True }})
    r"""End date."""  
    next_page_token: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'next_page_token', 'style': 'form', 'explode': True }})
    r"""The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes."""  
    page_number: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'page_number', 'style': 'form', 'explode': True }})
    r"""The page number of the current page in the returned records."""  
    page_size: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'page_size', 'style': 'form', 'explode': True }})
    r"""The number of records returned within a single API call."""  
    type: Optional[ReportUsersTypeEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'type', 'style': 'form', 'explode': True }})
    r"""Active or inactive hosts.<br>`active` - Active hosts. <br>`inactive` - Inactive hosts."""  
    

@dataclasses.dataclass
class ReportUsers200ApplicationXMLUsersCustomAttributes:
    r"""Custom attribute(s) that have been assigned to the user."""
    
    key: Optional[str] = dataclasses.field(default=None)
    r"""Identifier for the custom attribute."""  
    name: Optional[str] = dataclasses.field(default=None)
    r"""Name of the custom attribute."""  
    value: Optional[str] = dataclasses.field(default=None)
    r"""Value of the custom attribute."""  
    

@dataclasses.dataclass
class ReportUsers200ApplicationXMLUsers:
    
    custom_attributes: Optional[ReportUsers200ApplicationXMLUsersCustomAttributes] = dataclasses.field(default=None)
    r"""Custom attribute(s) that have been assigned to the user."""  
    dept: Optional[str] = dataclasses.field(default=None)
    r"""User department."""  
    email: Optional[str] = dataclasses.field(default=None)
    r"""User email."""  
    id: Optional[str] = dataclasses.field(default=None)
    r"""User ID."""  
    meeting_minutes: Optional[int] = dataclasses.field(default=None)
    r"""Number of meeting minutes for user."""  
    meetings: Optional[int] = dataclasses.field(default=None)
    r"""Number of meetings for user."""  
    participants: Optional[int] = dataclasses.field(default=None)
    r"""Number of participants in meetings for user."""  
    type: Optional[int] = dataclasses.field(default=None)
    r"""User type."""  
    user_name: Optional[str] = dataclasses.field(default=None)
    r"""User display name."""  
    

@dataclasses.dataclass
class ReportUsers200ApplicationXML:
    r"""**HTTP Status Code:** `200`<br>
    Active or inactive hosts report returned.<br>
    This is only available for paid account: {accountId}.
    """
    
    from_: Optional[date] = dataclasses.field(default=None)
    r"""Start date for this report."""  
    next_page_token: Optional[str] = dataclasses.field(default=None)  
    page_count: Optional[int] = dataclasses.field(default=None)
    r"""The number of pages returned for the request made."""  
    page_number: Optional[int] = dataclasses.field(default=None)
    r"""The page number of the current results."""  
    page_size: Optional[int] = dataclasses.field(default=None)
    r"""The number of records returned with a single API call."""  
    to: Optional[date] = dataclasses.field(default=None)
    r"""End date for this report."""  
    total_meeting_minutes: Optional[int] = dataclasses.field(default=None)
    r"""Number of meeting minutes for this range."""  
    total_meetings: Optional[int] = dataclasses.field(default=None)
    r"""Number of meetings for this range."""  
    total_participants: Optional[int] = dataclasses.field(default=None)
    r"""Number of participants for this range."""  
    total_records: Optional[int] = dataclasses.field(default=None)
    r"""The total number of all the records available across pages."""  
    users: Optional[list[ReportUsers200ApplicationXMLUsers]] = dataclasses.field(default=None)
    r"""Array of user objects."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ReportUsers200ApplicationJSONUsersCustomAttributes:
    r"""Custom attribute(s) that have been assigned to the user."""
    
    key: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('key'), 'exclude': lambda f: f is None }})
    r"""Identifier for the custom attribute."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""Name of the custom attribute."""  
    value: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('value'), 'exclude': lambda f: f is None }})
    r"""Value of the custom attribute."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ReportUsers200ApplicationJSONUsers:
    
    custom_attributes: Optional[ReportUsers200ApplicationJSONUsersCustomAttributes] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('custom_attributes'), 'exclude': lambda f: f is None }})
    r"""Custom attribute(s) that have been assigned to the user."""  
    dept: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dept'), 'exclude': lambda f: f is None }})
    r"""User department."""  
    email: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('email'), 'exclude': lambda f: f is None }})
    r"""User email."""  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""User ID."""  
    meeting_minutes: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('meeting_minutes'), 'exclude': lambda f: f is None }})
    r"""Number of meeting minutes for user."""  
    meetings: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('meetings'), 'exclude': lambda f: f is None }})
    r"""Number of meetings for user."""  
    participants: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('participants'), 'exclude': lambda f: f is None }})
    r"""Number of participants in meetings for user."""  
    type: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})
    r"""User type."""  
    user_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('user_name'), 'exclude': lambda f: f is None }})
    r"""User display name."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ReportUsers200ApplicationJSON:
    r"""**HTTP Status Code:** `200`<br>
    Active or inactive hosts report returned.<br>
    This is only available for paid account: {accountId}.
    """
    
    from_: Optional[date] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('from'), 'encoder': utils.dateisoformat(True), 'decoder': utils.datefromisoformat, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""Start date for this report."""  
    next_page_token: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('next_page_token'), 'exclude': lambda f: f is None }})  
    page_count: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('page_count'), 'exclude': lambda f: f is None }})
    r"""The number of pages returned for the request made."""  
    page_number: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('page_number'), 'exclude': lambda f: f is None }})
    r"""The page number of the current results."""  
    page_size: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('page_size'), 'exclude': lambda f: f is None }})
    r"""The number of records returned with a single API call."""  
    to: Optional[date] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('to'), 'encoder': utils.dateisoformat(True), 'decoder': utils.datefromisoformat, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""End date for this report."""  
    total_meeting_minutes: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('total_meeting_minutes'), 'exclude': lambda f: f is None }})
    r"""Number of meeting minutes for this range."""  
    total_meetings: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('total_meetings'), 'exclude': lambda f: f is None }})
    r"""Number of meetings for this range."""  
    total_participants: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('total_participants'), 'exclude': lambda f: f is None }})
    r"""Number of participants for this range."""  
    total_records: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('total_records'), 'exclude': lambda f: f is None }})
    r"""The total number of all the records available across pages."""  
    users: Optional[list[ReportUsers200ApplicationJSONUsers]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('users'), 'exclude': lambda f: f is None }})
    r"""Array of user objects."""  
    

@dataclasses.dataclass
class ReportUsersResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    body: Optional[bytes] = dataclasses.field(default=None)  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    report_users_200_application_json_object: Optional[ReportUsers200ApplicationJSON] = dataclasses.field(default=None)
    r"""**HTTP Status Code:** `200`<br>
    Active or inactive hosts report returned.<br>
    This is only available for paid account: {accountId}.
    """  
    