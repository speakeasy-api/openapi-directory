/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";

export class GetCollectionsSecurity extends SpeakeasyBase {
  @SpeakeasyMetadata({
    data: "security, scheme=true;type=oauth2;name=Authorization",
  })
  customerAccessCode: string;
}

/**
 * Sort by
 */
export enum GetCollectionsSortEnum {
  Newest = "newest",
  Oldest = "oldest",
}

export class GetCollectionsRequest extends SpeakeasyBase {
  /**
   * Page number
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=page" })
  page?: number;

  /**
   * Number of results per page
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=per_page",
  })
  perPage?: number;

  /**
   * Set to true to omit collections that you own and return only collections  that are shared with you
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=shared",
  })
  shared?: boolean;

  /**
   * Sort by
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=sort" })
  sort?: GetCollectionsSortEnum;
}

export class GetCollectionsResponse extends SpeakeasyBase {
  /**
   * OK
   */
  @SpeakeasyMetadata()
  catalogCollectionDataList?: shared.CatalogCollectionDataList;

  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;
}
