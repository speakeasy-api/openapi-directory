// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type ErrorCodeEnum string

const (
	ErrorCodeEnumForbidden            ErrorCodeEnum = "Forbidden"
	ErrorCodeEnumInvalidParameter     ErrorCodeEnum = "InvalidParameter"
	ErrorCodeEnumInvalidBodyParameter ErrorCodeEnum = "InvalidBodyParameter"
	ErrorCodeEnumResourceNotFound     ErrorCodeEnum = "ResourceNotFound"
	ErrorCodeEnumUnauthorized         ErrorCodeEnum = "Unauthorized"
	ErrorCodeEnumInvalidCredentials   ErrorCodeEnum = "InvalidCredentials"
	ErrorCodeEnumInvalidGrantType     ErrorCodeEnum = "InvalidGrantType"
)

func (e ErrorCodeEnum) ToPointer() *ErrorCodeEnum {
	return &e
}

func (e *ErrorCodeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Forbidden":
		fallthrough
	case "InvalidParameter":
		fallthrough
	case "InvalidBodyParameter":
		fallthrough
	case "ResourceNotFound":
		fallthrough
	case "Unauthorized":
		fallthrough
	case "InvalidCredentials":
		fallthrough
	case "InvalidGrantType":
		*e = ErrorCodeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ErrorCodeEnum: %v", v)
	}
}

type ErrorSource struct {
	Parameter *string `json:"parameter,omitempty"`
	Pointer   *string `json:"pointer,omitempty"`
}

type Error struct {
	Code   *ErrorCodeEnum `json:"code,omitempty"`
	Detail *string        `json:"detail,omitempty"`
	Source *ErrorSource   `json:"source,omitempty"`
	Status *string        `json:"status,omitempty"`
	Title  *string        `json:"title,omitempty"`
}
