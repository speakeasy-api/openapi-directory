// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// SetFindingStateRequestStateEnum - Required. The desired State of the finding.
type SetFindingStateRequestStateEnum string

const (
	SetFindingStateRequestStateEnumStateUnspecified SetFindingStateRequestStateEnum = "STATE_UNSPECIFIED"
	SetFindingStateRequestStateEnumActive           SetFindingStateRequestStateEnum = "ACTIVE"
	SetFindingStateRequestStateEnumInactive         SetFindingStateRequestStateEnum = "INACTIVE"
)

func (e SetFindingStateRequestStateEnum) ToPointer() *SetFindingStateRequestStateEnum {
	return &e
}

func (e *SetFindingStateRequestStateEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "STATE_UNSPECIFIED":
		fallthrough
	case "ACTIVE":
		fallthrough
	case "INACTIVE":
		*e = SetFindingStateRequestStateEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SetFindingStateRequestStateEnum: %v", v)
	}
}

// SetFindingStateRequest - Request message for updating a finding's state.
type SetFindingStateRequest struct {
	// Required. The time at which the updated state takes effect.
	StartTime *string `json:"startTime,omitempty"`
	// Required. The desired State of the finding.
	State *SetFindingStateRequestStateEnum `json:"state,omitempty"`
}
