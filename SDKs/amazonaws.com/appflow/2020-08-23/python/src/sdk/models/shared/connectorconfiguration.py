"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from ..shared import authenticationconfig as shared_authenticationconfig
from ..shared import connectormetadata as shared_connectormetadata
from ..shared import connectorprovisioningconfig as shared_connectorprovisioningconfig
from ..shared import connectorprovisioningtype_enum as shared_connectorprovisioningtype_enum
from ..shared import connectorruntimesetting as shared_connectorruntimesetting
from ..shared import connectortype_enum as shared_connectortype_enum
from ..shared import operators_enum as shared_operators_enum
from ..shared import schedulefrequencytype_enum as shared_schedulefrequencytype_enum
from ..shared import triggertype_enum as shared_triggertype_enum
from ..shared import writeoperationtype_enum as shared_writeoperationtype_enum
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from marshmallow import fields
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ConnectorConfiguration:
    r"""The configuration settings related to a given connector."""
    
    authentication_config: Optional[shared_authenticationconfig.AuthenticationConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('authenticationConfig'), 'exclude': lambda f: f is None }})  
    can_use_as_destination: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('canUseAsDestination'), 'exclude': lambda f: f is None }})  
    can_use_as_source: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('canUseAsSource'), 'exclude': lambda f: f is None }})  
    connector_arn: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('connectorArn'), 'exclude': lambda f: f is None }})  
    connector_description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('connectorDescription'), 'exclude': lambda f: f is None }})  
    connector_label: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('connectorLabel'), 'exclude': lambda f: f is None }})  
    connector_metadata: Optional[shared_connectormetadata.ConnectorMetadata] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('connectorMetadata'), 'exclude': lambda f: f is None }})  
    connector_modes: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('connectorModes'), 'exclude': lambda f: f is None }})  
    connector_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('connectorName'), 'exclude': lambda f: f is None }})  
    connector_owner: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('connectorOwner'), 'exclude': lambda f: f is None }})  
    connector_provisioning_config: Optional[shared_connectorprovisioningconfig.ConnectorProvisioningConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('connectorProvisioningConfig'), 'exclude': lambda f: f is None }})  
    connector_provisioning_type: Optional[shared_connectorprovisioningtype_enum.ConnectorProvisioningTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('connectorProvisioningType'), 'exclude': lambda f: f is None }})  
    connector_runtime_settings: Optional[list[shared_connectorruntimesetting.ConnectorRuntimeSetting]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('connectorRuntimeSettings'), 'exclude': lambda f: f is None }})  
    connector_type: Optional[shared_connectortype_enum.ConnectorTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('connectorType'), 'exclude': lambda f: f is None }})  
    connector_version: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('connectorVersion'), 'exclude': lambda f: f is None }})  
    is_private_link_enabled: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('isPrivateLinkEnabled'), 'exclude': lambda f: f is None }})  
    is_private_link_endpoint_url_required: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('isPrivateLinkEndpointUrlRequired'), 'exclude': lambda f: f is None }})  
    logo_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('logoURL'), 'exclude': lambda f: f is None }})  
    registered_at: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('registeredAt'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})  
    registered_by: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('registeredBy'), 'exclude': lambda f: f is None }})  
    supported_api_versions: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('supportedApiVersions'), 'exclude': lambda f: f is None }})  
    supported_destination_connectors: Optional[list[shared_connectortype_enum.ConnectorTypeEnum]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('supportedDestinationConnectors'), 'exclude': lambda f: f is None }})  
    supported_operators: Optional[list[shared_operators_enum.OperatorsEnum]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('supportedOperators'), 'exclude': lambda f: f is None }})  
    supported_scheduling_frequencies: Optional[list[shared_schedulefrequencytype_enum.ScheduleFrequencyTypeEnum]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('supportedSchedulingFrequencies'), 'exclude': lambda f: f is None }})  
    supported_trigger_types: Optional[list[shared_triggertype_enum.TriggerTypeEnum]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('supportedTriggerTypes'), 'exclude': lambda f: f is None }})  
    supported_write_operations: Optional[list[shared_writeoperationtype_enum.WriteOperationTypeEnum]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('supportedWriteOperations'), 'exclude': lambda f: f is None }})  
    