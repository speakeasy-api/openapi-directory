"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import field as shared_field
from ..shared import option as shared_option
from ..shared import sourcecontext as shared_sourcecontext
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class TypeSyntaxEnum(str, Enum):
    r"""The source syntax."""
    SYNTAX_PROTO2 = 'SYNTAX_PROTO2'
    SYNTAX_PROTO3 = 'SYNTAX_PROTO3'
    SYNTAX_EDITIONS = 'SYNTAX_EDITIONS'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Type:
    r"""A protocol buffer message type."""
    
    edition: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('edition'), 'exclude': lambda f: f is None }})
    r"""The source edition string, only valid when syntax is SYNTAX_EDITIONS."""  
    fields_: Optional[list[shared_field.Field]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('fields'), 'exclude': lambda f: f is None }})
    r"""The list of fields."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""The fully qualified message name."""  
    oneofs: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('oneofs'), 'exclude': lambda f: f is None }})
    r"""The list of types appearing in `oneof` definitions in this type."""  
    options: Optional[list[shared_option.Option]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('options'), 'exclude': lambda f: f is None }})
    r"""The protocol buffer options."""  
    source_context: Optional[shared_sourcecontext.SourceContext] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sourceContext'), 'exclude': lambda f: f is None }})
    r"""`SourceContext` represents information about the source of a protobuf element, like the file in which it is defined."""  
    syntax: Optional[TypeSyntaxEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('syntax'), 'exclude': lambda f: f is None }})
    r"""The source syntax."""  
    