// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type CecerSecurity struct {
	APIKey   string `security:"scheme,type=apiKey,subtype=header,name=X-APISETU-APIKEY"`
	ClientID string `security:"scheme,type=apiKey,subtype=header,name=X-APISETU-CLIENTID"`
}

type CecerRequestBodyCertificateParameters struct {
	// ApplicationNumber
	Udf1 string `json:"UDF1"`
}

// CecerRequestBodyFormatEnum - The format of the certificate in response.
type CecerRequestBodyFormatEnum string

const (
	CecerRequestBodyFormatEnumPdf CecerRequestBodyFormatEnum = "pdf"
)

func (e CecerRequestBodyFormatEnum) ToPointer() *CecerRequestBodyFormatEnum {
	return &e
}

func (e *CecerRequestBodyFormatEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "pdf":
		*e = CecerRequestBodyFormatEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CecerRequestBodyFormatEnum: %v", v)
	}
}

// CecerRequestBody - Request format
type CecerRequestBody struct {
	CertificateParameters *CecerRequestBodyCertificateParameters `json:"certificateParameters,omitempty"`
	ConsentArtifact       *shared.ConsentArtifactSchema          `json:"consentArtifact,omitempty"`
	// The format of the certificate in response.
	Format CecerRequestBodyFormatEnum `json:"format"`
	// A unique transaction id for this request in UUID format. It is used for tracking the request.
	TxnID string `json:"txnId"`
}

type Cecer504ApplicationJSONErrorEnum string

const (
	Cecer504ApplicationJSONErrorEnumGatewayTimeout Cecer504ApplicationJSONErrorEnum = "gateway_timeout"
)

func (e Cecer504ApplicationJSONErrorEnum) ToPointer() *Cecer504ApplicationJSONErrorEnum {
	return &e
}

func (e *Cecer504ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "gateway_timeout":
		*e = Cecer504ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Cecer504ApplicationJSONErrorEnum: %v", v)
	}
}

type Cecer504ApplicationJSONErrorDescriptionEnum string

const (
	Cecer504ApplicationJSONErrorDescriptionEnumPublisherServiceDidNotRespondInTime Cecer504ApplicationJSONErrorDescriptionEnum = "Publisher service did not respond in time"
)

func (e Cecer504ApplicationJSONErrorDescriptionEnum) ToPointer() *Cecer504ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Cecer504ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Publisher service did not respond in time":
		*e = Cecer504ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Cecer504ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Cecer504ApplicationJSON - Gateway timeout
type Cecer504ApplicationJSON struct {
	Error            *Cecer504ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Cecer504ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Cecer503ApplicationJSONErrorEnum string

const (
	Cecer503ApplicationJSONErrorEnumServiceUnavailable Cecer503ApplicationJSONErrorEnum = "service_unavailable"
)

func (e Cecer503ApplicationJSONErrorEnum) ToPointer() *Cecer503ApplicationJSONErrorEnum {
	return &e
}

func (e *Cecer503ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "service_unavailable":
		*e = Cecer503ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Cecer503ApplicationJSONErrorEnum: %v", v)
	}
}

type Cecer503ApplicationJSONErrorDescriptionEnum string

const (
	Cecer503ApplicationJSONErrorDescriptionEnumPublisherServiceIsTemporarilyUnavailable Cecer503ApplicationJSONErrorDescriptionEnum = "Publisher service is temporarily unavailable"
)

func (e Cecer503ApplicationJSONErrorDescriptionEnum) ToPointer() *Cecer503ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Cecer503ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Publisher service is temporarily unavailable":
		*e = Cecer503ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Cecer503ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Cecer503ApplicationJSON - Service unavailable
type Cecer503ApplicationJSON struct {
	Error            *Cecer503ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Cecer503ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Cecer502ApplicationJSONErrorEnum string

const (
	Cecer502ApplicationJSONErrorEnumBadGatewy Cecer502ApplicationJSONErrorEnum = "bad_gatewy"
)

func (e Cecer502ApplicationJSONErrorEnum) ToPointer() *Cecer502ApplicationJSONErrorEnum {
	return &e
}

func (e *Cecer502ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "bad_gatewy":
		*e = Cecer502ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Cecer502ApplicationJSONErrorEnum: %v", v)
	}
}

type Cecer502ApplicationJSONErrorDescriptionEnum string

const (
	Cecer502ApplicationJSONErrorDescriptionEnumPublisherServiceReturnedAnInvalidResponse Cecer502ApplicationJSONErrorDescriptionEnum = "Publisher service returned an invalid response"
)

func (e Cecer502ApplicationJSONErrorDescriptionEnum) ToPointer() *Cecer502ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Cecer502ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Publisher service returned an invalid response":
		*e = Cecer502ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Cecer502ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Cecer502ApplicationJSON - Bad gateway
type Cecer502ApplicationJSON struct {
	Error            *Cecer502ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Cecer502ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Cecer500ApplicationJSONErrorEnum string

const (
	Cecer500ApplicationJSONErrorEnumInternalServerError Cecer500ApplicationJSONErrorEnum = "internal_server_error"
)

func (e Cecer500ApplicationJSONErrorEnum) ToPointer() *Cecer500ApplicationJSONErrorEnum {
	return &e
}

func (e *Cecer500ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "internal_server_error":
		*e = Cecer500ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Cecer500ApplicationJSONErrorEnum: %v", v)
	}
}

type Cecer500ApplicationJSONErrorDescriptionEnum string

const (
	Cecer500ApplicationJSONErrorDescriptionEnumInternalServerError Cecer500ApplicationJSONErrorDescriptionEnum = "Internal server error"
)

func (e Cecer500ApplicationJSONErrorDescriptionEnum) ToPointer() *Cecer500ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Cecer500ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Internal server error":
		*e = Cecer500ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Cecer500ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Cecer500ApplicationJSON - Internal server error
type Cecer500ApplicationJSON struct {
	Error            *Cecer500ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Cecer500ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Cecer404ApplicationJSONErrorEnum string

const (
	Cecer404ApplicationJSONErrorEnumRecordNotFound Cecer404ApplicationJSONErrorEnum = "record_not_found"
	Cecer404ApplicationJSONErrorEnumURLNotFound    Cecer404ApplicationJSONErrorEnum = "url_not_found"
)

func (e Cecer404ApplicationJSONErrorEnum) ToPointer() *Cecer404ApplicationJSONErrorEnum {
	return &e
}

func (e *Cecer404ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "record_not_found":
		fallthrough
	case "url_not_found":
		*e = Cecer404ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Cecer404ApplicationJSONErrorEnum: %v", v)
	}
}

type Cecer404ApplicationJSONErrorDescriptionEnum string

const (
	Cecer404ApplicationJSONErrorDescriptionEnumNoRecordFound               Cecer404ApplicationJSONErrorDescriptionEnum = "No record found"
	Cecer404ApplicationJSONErrorDescriptionEnumYourAPIURLOrPathIsIncorrect Cecer404ApplicationJSONErrorDescriptionEnum = "Your API url or path is incorrect"
)

func (e Cecer404ApplicationJSONErrorDescriptionEnum) ToPointer() *Cecer404ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Cecer404ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "No record found":
		fallthrough
	case "Your API url or path is incorrect":
		*e = Cecer404ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Cecer404ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Cecer404ApplicationJSON - No record found
type Cecer404ApplicationJSON struct {
	Error            *Cecer404ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Cecer404ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Cecer401ApplicationJSONErrorEnum string

const (
	Cecer401ApplicationJSONErrorEnumInvalidAuthentication Cecer401ApplicationJSONErrorEnum = "invalid_authentication"
	Cecer401ApplicationJSONErrorEnumInvalidAuthorization  Cecer401ApplicationJSONErrorEnum = "invalid_authorization"
)

func (e Cecer401ApplicationJSONErrorEnum) ToPointer() *Cecer401ApplicationJSONErrorEnum {
	return &e
}

func (e *Cecer401ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "invalid_authentication":
		fallthrough
	case "invalid_authorization":
		*e = Cecer401ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Cecer401ApplicationJSONErrorEnum: %v", v)
	}
}

type Cecer401ApplicationJSONErrorDescriptionEnum string

const (
	Cecer401ApplicationJSONErrorDescriptionEnumAuthenticationFailed            Cecer401ApplicationJSONErrorDescriptionEnum = "Authentication failed"
	Cecer401ApplicationJSONErrorDescriptionEnumYouAreNotAuthorizedToUseThisAPI Cecer401ApplicationJSONErrorDescriptionEnum = "You are not authorized to use this API"
)

func (e Cecer401ApplicationJSONErrorDescriptionEnum) ToPointer() *Cecer401ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Cecer401ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Authentication failed":
		fallthrough
	case "You are not authorized to use this API":
		*e = Cecer401ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Cecer401ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Cecer401ApplicationJSON - Unauthorized access
type Cecer401ApplicationJSON struct {
	Error            *Cecer401ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Cecer401ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Cecer400ApplicationJSONErrorEnum string

const (
	Cecer400ApplicationJSONErrorEnumMissingParameter Cecer400ApplicationJSONErrorEnum = "missing_parameter"
	Cecer400ApplicationJSONErrorEnumInvalidParameter Cecer400ApplicationJSONErrorEnum = "invalid_parameter"
	Cecer400ApplicationJSONErrorEnumInvalidFormat    Cecer400ApplicationJSONErrorEnum = "invalid_format"
	Cecer400ApplicationJSONErrorEnumInvalidTxnid     Cecer400ApplicationJSONErrorEnum = "invalid_txnid"
	Cecer400ApplicationJSONErrorEnumInvalidConsentid Cecer400ApplicationJSONErrorEnum = "invalid_consentid"
)

func (e Cecer400ApplicationJSONErrorEnum) ToPointer() *Cecer400ApplicationJSONErrorEnum {
	return &e
}

func (e *Cecer400ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "missing_parameter":
		fallthrough
	case "invalid_parameter":
		fallthrough
	case "invalid_format":
		fallthrough
	case "invalid_txnid":
		fallthrough
	case "invalid_consentid":
		*e = Cecer400ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Cecer400ApplicationJSONErrorEnum: %v", v)
	}
}

type Cecer400ApplicationJSONErrorDescriptionEnum string

const (
	Cecer400ApplicationJSONErrorDescriptionEnumPleaseProvideAllMandatoryParameters     Cecer400ApplicationJSONErrorDescriptionEnum = "Please provide all mandatory parameters"
	Cecer400ApplicationJSONErrorDescriptionEnumBadRequest                              Cecer400ApplicationJSONErrorDescriptionEnum = "Bad request"
	Cecer400ApplicationJSONErrorDescriptionEnumTheFormatParameterIsInvalid             Cecer400ApplicationJSONErrorDescriptionEnum = "The format parameter is invalid"
	Cecer400ApplicationJSONErrorDescriptionEnumTheTxnIDParameterMustBeInUUIDFormat     Cecer400ApplicationJSONErrorDescriptionEnum = "The txnId parameter must be in UUID format"
	Cecer400ApplicationJSONErrorDescriptionEnumTheConsentIDParameterMustBeInUUIDFormat Cecer400ApplicationJSONErrorDescriptionEnum = "The consentId parameter must be in UUID format"
)

func (e Cecer400ApplicationJSONErrorDescriptionEnum) ToPointer() *Cecer400ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Cecer400ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Please provide all mandatory parameters":
		fallthrough
	case "Bad request":
		fallthrough
	case "The format parameter is invalid":
		fallthrough
	case "The txnId parameter must be in UUID format":
		fallthrough
	case "The consentId parameter must be in UUID format":
		*e = Cecer400ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Cecer400ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Cecer400ApplicationJSON - Bad request
type Cecer400ApplicationJSON struct {
	Error            *Cecer400ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Cecer400ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type CecerResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Bad request
	Cecer400ApplicationJSONObject *Cecer400ApplicationJSON
	// Unauthorized access
	Cecer401ApplicationJSONObject *Cecer401ApplicationJSON
	// No record found
	Cecer404ApplicationJSONObject *Cecer404ApplicationJSON
	// Internal server error
	Cecer500ApplicationJSONObject *Cecer500ApplicationJSON
	// Bad gateway
	Cecer502ApplicationJSONObject *Cecer502ApplicationJSON
	// Service unavailable
	Cecer503ApplicationJSONObject *Cecer503ApplicationJSON
	// Gateway timeout
	Cecer504ApplicationJSONObject *Cecer504ApplicationJSON
}
