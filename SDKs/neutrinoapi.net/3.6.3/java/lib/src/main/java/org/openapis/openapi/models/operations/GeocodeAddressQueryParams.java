/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import org.openapis.openapi.utils.SpeakeasyMetadata;

public class GeocodeAddressQueryParams {
    /**
     * The full address, partial address or name of a place to try and locate. Comma separated address components are preferred.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=address")
    public String address;
    public GeocodeAddressQueryParams withAddress(String address) {
        this.address = address;
        return this;
    }
    
    /**
     * The city/town name to locate
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=city")
    public String city;
    public GeocodeAddressQueryParams withCity(String city) {
        this.city = city;
        return this;
    }
    
    /**
     * Limit result to this country (the default is no country bias)
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=country-code")
    public String countryCode;
    public GeocodeAddressQueryParams withCountryCode(String countryCode) {
        this.countryCode = countryCode;
        return this;
    }
    
    /**
     * The county/region name to locate
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=county")
    public String county;
    public GeocodeAddressQueryParams withCounty(String county) {
        this.county = county;
        return this;
    }
    
    /**
     * If no matches are found for the given address, start performing a recursive fuzzy search until a geolocation is found. This option is recommended for processing user input or implementing auto-complete. We use a combination of approximate string matching and data cleansing to find possible location matches
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=fuzzy-search")
    public Boolean fuzzySearch;
    public GeocodeAddressQueryParams withFuzzySearch(Boolean fuzzySearch) {
        this.fuzzySearch = fuzzySearch;
        return this;
    }
    
    /**
     * The house/building number to locate
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=house-number")
    public String houseNumber;
    public GeocodeAddressQueryParams withHouseNumber(String houseNumber) {
        this.houseNumber = houseNumber;
        return this;
    }
    
    /**
     * The language to display results in, available languages are: &lt;ul&gt; &lt;li&gt;de, en, es, fr, it, pt, ru, zh&lt;/li&gt; &lt;/ul&gt;
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=language-code")
    public String languageCode;
    public GeocodeAddressQueryParams withLanguageCode(String languageCode) {
        this.languageCode = languageCode;
        return this;
    }
    
    /**
     * The postal code to locate
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=postal-code")
    public String postalCode;
    public GeocodeAddressQueryParams withPostalCode(String postalCode) {
        this.postalCode = postalCode;
        return this;
    }
    
    /**
     * The state name to locate
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=state")
    public String state;
    public GeocodeAddressQueryParams withState(String state) {
        this.state = state;
        return this;
    }
    
    /**
     * The street/road name to locate
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=street")
    public String street;
    public GeocodeAddressQueryParams withStreet(String street) {
        this.street = street;
        return this;
    }
    
}
