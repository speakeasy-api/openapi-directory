Metadata-Version: 2.1
Name: openapi
Version: 0.0.1
Summary: Python Client SDK Generated by Speakeasy
Author: Speakeasy
Requires-Python: >=3.9
Description-Content-Type: text/markdown

# openapi

<!-- Start SDK Installation -->
## SDK Installation

```bash
pip install git+https://github.com/speakeasy-api/openapi-directory.git#subdirectory=SDKs/googleapis.com/datastream/v1/python
```
<!-- End SDK Installation -->

## SDK Example Usage
<!-- Start SDK Example Usage -->
```python
import sdk
from sdk.models import operations, shared

s = sdk.SDK()


req = operations.DatastreamProjectsLocationsConnectionProfilesCreateRequest(
    dollar_xgafv="2",
    connection_profile_input=shared.ConnectionProfileInput(
        bigquery_profile={
            "distinctio": "quibusdam",
            "unde": "nulla",
            "corrupti": "illum",
        },
        display_name="vel",
        forward_ssh_connectivity=shared.ForwardSSHTunnelConnectivity(
            hostname="physical-pegboard.info",
            password="iure",
            port=297534,
            private_key="debitis",
            username="Anahi38",
        ),
        gcs_profile=shared.GcsProfile(
            bucket="molestiae",
            root_path="minus",
        ),
        labels={
            "voluptatum": "iusto",
            "excepturi": "nisi",
            "recusandae": "temporibus",
            "ab": "quis",
        },
        mysql_profile=shared.MysqlProfileInput(
            hostname="bountiful-pension.com",
            password="ipsam",
            port=832620,
            ssl_config=shared.MysqlSslConfigInput(
                ca_certificate="sapiente",
                client_certificate="quo",
                client_key="odit",
            ),
            username="Sarah.Strosin79",
        ),
        oracle_profile=shared.OracleProfile(
            connection_attributes={
                "esse": "totam",
                "porro": "dolorum",
                "dicta": "nam",
                "officia": "occaecati",
            },
            database_service="fugit",
            hostname="miserly-usage.net",
            password="totam",
            port=105907,
            username="Haskell18",
        ),
        postgresql_profile=shared.PostgresqlProfile(
            database="impedit",
            hostname="several-increase.biz",
            password="excepturi",
            port=135218,
            username="Aiden.Hane",
        ),
        private_connectivity=shared.PrivateConnectivity(
            private_connection="iste",
        ),
        static_service_ip_connectivity={
            "natus": "laboriosam",
        },
    ),
    access_token="hic",
    alt="proto",
    callback="fuga",
    connection_profile_id="in",
    fields_="corporis",
    force=False,
    key="iste",
    oauth_token="iure",
    parent="saepe",
    pretty_print=False,
    quota_user="quidem",
    request_id="architecto",
    upload_type="ipsa",
    upload_protocol="reiciendis",
    validate_only=False,
)
    
res = s.projects.datastream_projects_locations_connection_profiles_create(req, operations.DatastreamProjectsLocationsConnectionProfilesCreateSecurity(
    oauth2="Bearer YOUR_ACCESS_TOKEN_HERE",
    oauth2c="Bearer YOUR_ACCESS_TOKEN_HERE",
))

if res.operation is not None:
    # handle response
```
<!-- End SDK Example Usage -->

<!-- Start SDK Available Operations -->
## Available Resources and Operations


### projects

* `datastream_projects_locations_connection_profiles_create` - Use this method to create a connection profile in a project and location.
* `datastream_projects_locations_connection_profiles_discover` - Use this method to discover a connection profile. The discover API call exposes the data objects and metadata belonging to the profile. Typically, a request returns children data objects of a parent data object that's optionally supplied in the request.
* `datastream_projects_locations_connection_profiles_list` - Use this method to list connection profiles created in a project and location.
* `datastream_projects_locations_fetch_static_ips` - The FetchStaticIps API call exposes the static IP addresses used by Datastream.
* `datastream_projects_locations_list` - Lists information about the supported locations for this service.
* `datastream_projects_locations_operations_cancel` - Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.
* `datastream_projects_locations_operations_list` - Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`.
* `datastream_projects_locations_private_connections_create` - Use this method to create a private connectivity configuration.
* `datastream_projects_locations_private_connections_list` - Use this method to list private connectivity configurations in a project and location.
* `datastream_projects_locations_private_connections_routes_create` - Use this method to create a route for a private connectivity configuration in a project and location.
* `datastream_projects_locations_private_connections_routes_list` - Use this method to list routes created for a private connectivity configuration in a project and location.
* `datastream_projects_locations_streams_create` - Use this method to create a stream.
* `datastream_projects_locations_streams_delete` - Use this method to delete a stream.
* `datastream_projects_locations_streams_list` - Use this method to list streams in a project and location.
* `datastream_projects_locations_streams_objects_get` - Use this method to get details about a stream object.
* `datastream_projects_locations_streams_objects_list` - Use this method to list the objects of a specific stream.
* `datastream_projects_locations_streams_objects_lookup` - Use this method to look up a stream object by its source object identifier.
* `datastream_projects_locations_streams_objects_start_backfill_job` - Use this method to start a backfill job for the specified stream object.
* `datastream_projects_locations_streams_objects_stop_backfill_job` - Use this method to stop a backfill job for the specified stream object.
* `datastream_projects_locations_streams_patch` - Use this method to update the configuration of a stream.
<!-- End SDK Available Operations -->

### Maturity

This SDK is in beta, and there may be breaking changes between versions without a major version update. Therefore, we recommend pinning usage
to a specific package version. This way, you can install the same version each time without breaking changes unless you are intentionally
looking for the latest version.

### Contributions

While we value open-source contributions to this SDK, this library is generated programmatically.
Feel free to open a PR or a Github issue as a proof of concept and we'll do our best to include it in a future release !

### SDK Created by [Speakeasy](https://docs.speakeasyapi.dev/docs/using-speakeasy/client-sdks)
