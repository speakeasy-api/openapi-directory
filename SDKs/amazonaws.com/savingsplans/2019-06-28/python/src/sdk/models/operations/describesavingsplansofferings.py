"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import currencycode_enum as shared_currencycode_enum
from ..shared import describesavingsplansofferingsresponse as shared_describesavingsplansofferingsresponse
from ..shared import savingsplanofferingfilterelement as shared_savingsplanofferingfilterelement
from ..shared import savingsplanpaymentoption_enum as shared_savingsplanpaymentoption_enum
from ..shared import savingsplantype_enum as shared_savingsplantype_enum
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Any, Optional

class DescribeSavingsPlansOfferingsRequestBodyProductTypeEnum(str, Enum):
    r"""The product type."""
    EC2 = 'EC2'
    FARGATE = 'Fargate'
    LAMBDA = 'Lambda'
    SAGE_MAKER = 'SageMaker'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class DescribeSavingsPlansOfferingsRequestBody:
    
    currencies: Optional[list[shared_currencycode_enum.CurrencyCodeEnum]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('currencies'), 'exclude': lambda f: f is None }})
    r"""The currencies."""  
    descriptions: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('descriptions'), 'exclude': lambda f: f is None }})
    r"""The descriptions."""  
    durations: Optional[list[int]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('durations'), 'exclude': lambda f: f is None }})
    r"""The durations, in seconds."""  
    filters: Optional[list[shared_savingsplanofferingfilterelement.SavingsPlanOfferingFilterElement]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('filters'), 'exclude': lambda f: f is None }})
    r"""The filters."""  
    max_results: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('maxResults'), 'exclude': lambda f: f is None }})
    r"""The maximum number of results to return with a single call. To retrieve additional results, make another call with the returned token value."""  
    next_token: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('nextToken'), 'exclude': lambda f: f is None }})
    r"""The token for the next page of results."""  
    offering_ids: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('offeringIds'), 'exclude': lambda f: f is None }})
    r"""The IDs of the offerings."""  
    operations: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('operations'), 'exclude': lambda f: f is None }})
    r"""The specific AWS operation for the line item in the billing report."""  
    payment_options: Optional[list[shared_savingsplanpaymentoption_enum.SavingsPlanPaymentOptionEnum]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('paymentOptions'), 'exclude': lambda f: f is None }})
    r"""The payment options."""  
    plan_types: Optional[list[shared_savingsplantype_enum.SavingsPlanTypeEnum]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('planTypes'), 'exclude': lambda f: f is None }})
    r"""The plan type."""  
    product_type: Optional[DescribeSavingsPlansOfferingsRequestBodyProductTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('productType'), 'exclude': lambda f: f is None }})
    r"""The product type."""  
    service_codes: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('serviceCodes'), 'exclude': lambda f: f is None }})
    r"""The services."""  
    usage_types: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('usageTypes'), 'exclude': lambda f: f is None }})
    r"""The usage details of the line item in the billing report."""  
    

@dataclasses.dataclass
class DescribeSavingsPlansOfferingsRequest:
    
    request_body: DescribeSavingsPlansOfferingsRequestBody = dataclasses.field(metadata={'request': { 'media_type': 'application/json' }})  
    x_amz_algorithm: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Algorithm', 'style': 'simple', 'explode': False }})  
    x_amz_content_sha256: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Content-Sha256', 'style': 'simple', 'explode': False }})  
    x_amz_credential: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Credential', 'style': 'simple', 'explode': False }})  
    x_amz_date: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Date', 'style': 'simple', 'explode': False }})  
    x_amz_security_token: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Security-Token', 'style': 'simple', 'explode': False }})  
    x_amz_signature: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Signature', 'style': 'simple', 'explode': False }})  
    x_amz_signed_headers: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-SignedHeaders', 'style': 'simple', 'explode': False }})  
    

@dataclasses.dataclass
class DescribeSavingsPlansOfferingsResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    describe_savings_plans_offerings_response: Optional[shared_describesavingsplansofferingsresponse.DescribeSavingsPlansOfferingsResponse] = dataclasses.field(default=None)
    r"""Success"""  
    internal_server_exception: Optional[Any] = dataclasses.field(default=None)
    r"""InternalServerException"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    validation_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ValidationException"""  
    