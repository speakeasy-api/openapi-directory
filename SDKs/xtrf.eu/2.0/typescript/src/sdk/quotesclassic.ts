/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

/**
 * To change the description use /examples/TagsDescriptions.json
 */
export class QuotesClassic {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Creates a new language combination for a given quote without creating a task.
   *
   * @remarks
   * Creates a new language combination for a given quote without creating a task.
   */
  createLanguageCombination1(
    req: operations.CreateLanguageCombination1Request,
    config?: AxiosRequestConfig
  ): Promise<operations.CreateLanguageCombination1Response> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.CreateLanguageCombination1Request(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/quotes/{quoteId}/languageCombinations",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "commonLanguageCombinationDTO",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.CreateLanguageCombination1Response =
        new operations.CreateLanguageCombination1Response({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        default:
          if (
            utils.matchContentType(
              contentType,
              `application/vnd.xtrf-v1+json;charset=UTF-8`
            )
          ) {
            res.commonLanguageCombinationDTO = utils.objectToClass(
              httpRes?.data,
              shared.CommonLanguageCombinationDTO
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Adds a payable.
   *
   * @remarks
   * Adds a payable.
   */
  createPayable1(
    req: operations.CreatePayable1Request,
    config?: AxiosRequestConfig
  ): Promise<operations.CreatePayable1Response> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.CreatePayable1Request(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/quotes/{quoteId}/finance/payables",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "payableCreateDTO",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.CreatePayable1Response =
        new operations.CreatePayable1Response({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        default:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.payableDTO = utils.objectToClass(
              httpRes?.data,
              shared.PayableDTO
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Adds a receivable.
   *
   * @remarks
   * Adds a receivable.
   */
  createReceivable1(
    req: operations.CreateReceivable1Request,
    config?: AxiosRequestConfig
  ): Promise<operations.CreateReceivable1Response> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.CreateReceivable1Request(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/quotes/{quoteId}/finance/receivables",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "receivableCreateDTO",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.CreateReceivable1Response =
        new operations.CreateReceivable1Response({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        default:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.receivableDTO = utils.objectToClass(
              httpRes?.data,
              shared.ReceivableDTO
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Creates a new task for a given quote.
   *
   * @remarks
   * Creates a new task for a given quote. Required fields are presented in the example.
   */
  createTask1(
    req: operations.CreateTask1Request,
    config?: AxiosRequestConfig
  ): Promise<operations.CreateTask1Response> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.CreateTask1Request(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/quotes/{quoteId}/tasks",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "taskDTO",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.CreateTask1Response =
        new operations.CreateTask1Response({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        default:
          if (
            utils.matchContentType(
              contentType,
              `application/vnd.xtrf-v1+json;charset=UTF-8`
            )
          ) {
            res.taskDTO = utils.objectToClass(httpRes?.data, shared.TaskDTO);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Deletes a payable.
   *
   * @remarks
   * Deletes a payable.
   */
  deletePayable1(
    req: operations.DeletePayable1Request,
    config?: AxiosRequestConfig
  ): Promise<operations.DeletePayable1Response> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DeletePayable1Request(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/quotes/{quoteId}/finance/payables/{payableId}",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DeletePayable1Response =
        new operations.DeletePayable1Response({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 204:
          break;
      }

      return res;
    });
  }

  /**
   * Deletes a receivable.
   *
   * @remarks
   * Deletes a receivable.
   */
  deleteReceivable1(
    req: operations.DeleteReceivable1Request,
    config?: AxiosRequestConfig
  ): Promise<operations.DeleteReceivable1Response> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DeleteReceivable1Request(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/quotes/{quoteId}/finance/receivables/{receivableId}",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DeleteReceivable1Response =
        new operations.DeleteReceivable1Response({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 204:
          break;
      }

      return res;
    });
  }

  /**
   * Removes a quote.
   *
   * @remarks
   * Removes a quote.
   */
  delete13(
    req: operations.Delete13Request,
    config?: AxiosRequestConfig
  ): Promise<operations.Delete13Response> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.Delete13Request(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/quotes/{quoteId}", req);

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.Delete13Response = new operations.Delete13Response({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
      });
      switch (true) {
        case httpRes?.status == 204:
          break;
      }

      return res;
    });
  }

  /**
   * Returns quotes' internal identifiers.
   *
   * @remarks
   * Returns quotes' internal identifiers.
   */
  getAllIds7(
    req: operations.GetAllIds7Request,
    config?: AxiosRequestConfig
  ): Promise<operations.GetAllIds7Response> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetAllIds7Request(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/quotes/ids";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetAllIds7Response =
        new operations.GetAllIds7Response({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        default:
          if (
            utils.matchContentType(
              contentType,
              `application/vnd.xtrf-v1+json;charset=UTF-8`
            )
          ) {
            res.getAllIds7DefaultApplicationVndXtrfV1PlusJsonInt32Integers =
              utils.objectToClass(httpRes?.data);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Returns quote details.
   *
   * @remarks
   * Returns quote details. If the specified quote ID refers to Smart Quote, 400 Bad Request is returned instead.
   */
  getById8(
    req: operations.GetById8Request,
    config?: AxiosRequestConfig
  ): Promise<operations.GetById8Response> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetById8Request(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/quotes/{quoteId}", req);

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetById8Response = new operations.GetById8Response({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
      });
      switch (true) {
        default:
          if (
            utils.matchContentType(
              contentType,
              `application/vnd.xtrf-v1+json;charset=UTF-8`
            )
          ) {
            res.quoteDTOv1 = utils.objectToClass(
              httpRes?.data,
              shared.QuoteDTOv1
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Returns custom fields of a given quote.
   *
   * @remarks
   * Returns custom fields of a given quote.
   */
  getCustomFields6(
    req: operations.GetCustomFields6Request,
    config?: AxiosRequestConfig
  ): Promise<operations.GetCustomFields6Response> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetCustomFields6Request(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/quotes/{quoteId}/customFields",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetCustomFields6Response =
        new operations.GetCustomFields6Response({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        default:
          if (
            utils.matchContentType(
              contentType,
              `application/vnd.xtrf-v1+json;charset=UTF-8`
            )
          ) {
            res.customFieldsDTO = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.customFieldsDTO = utils.objectToClass(
              httpRes?.data,
              shared.CustomFieldDTO,
              resFieldDepth
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Returns dates of a given quote.
   *
   * @remarks
   * Returns dates of a given quote.
   */
  getDates2(
    req: operations.GetDates2Request,
    config?: AxiosRequestConfig
  ): Promise<operations.GetDates2Response> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetDates2Request(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/quotes/{quoteId}/dates",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetDates2Response =
        new operations.GetDates2Response({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        default:
          if (
            utils.matchContentType(
              contentType,
              `application/vnd.xtrf-v1+json;charset=UTF-8`
            )
          ) {
            res.quoteDatesDTO = utils.objectToClass(
              httpRes?.data,
              shared.QuoteDatesDTO
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Returns finance of a given quote.
   *
   * @remarks
   * Returns finance of a given quote.
   */
  getFinance1(
    req: operations.GetFinance1Request,
    config?: AxiosRequestConfig
  ): Promise<operations.GetFinance1Response> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetFinance1Request(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/quotes/{quoteId}/finance",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetFinance1Response =
        new operations.GetFinance1Response({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        default:
          if (
            utils.matchContentType(
              contentType,
              `application/vnd.xtrf-v1+json;charset=UTF-8`
            )
          ) {
            res.financeDTO = utils.objectToClass(
              httpRes?.data,
              shared.FinanceDTO
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Returns instructions of a given quote.
   *
   * @remarks
   * Returns instructions of a given quote.
   */
  getInstructions1(
    req: operations.GetInstructions1Request,
    config?: AxiosRequestConfig
  ): Promise<operations.GetInstructions1Response> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetInstructions1Request(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/quotes/{quoteId}/instructions",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetInstructions1Response =
        new operations.GetInstructions1Response({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        default:
          if (
            utils.matchContentType(
              contentType,
              `application/vnd.xtrf-v1+json;charset=UTF-8`
            )
          ) {
            res.instructionsDTO = utils.objectToClass(
              httpRes?.data,
              shared.InstructionsDTO
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Sends a quote for customer confirmation.
   *
   * @remarks
   * Sends a quote for customer confirmation. Quote status is changed to SENT and a document is sent to the customer.
   */
  send1(
    req: operations.Send1Request,
    config?: AxiosRequestConfig
  ): Promise<operations.Send1Response> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.Send1Request(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/quotes/{quoteId}/confirmation/send",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "post",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.Send1Response = new operations.Send1Response({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
      });
      switch (true) {
        case httpRes?.status == 204:
          break;
      }

      return res;
    });
  }

  /**
   * Starts a quote.
   *
   * @remarks
   * Starts a quote.
   */
  start(
    req: operations.StartRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.StartResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.StartRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/quotes/{quoteId}/start",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "post",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.StartResponse = new operations.StartResponse({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
      });
      switch (true) {
        case httpRes?.status == 204:
          break;
      }

      return res;
    });
  }

  /**
   * Updates custom fields of a given quote.
   *
   * @remarks
   * Updates custom fields of a given quote.
   */
  updateCustomFields4(
    req: operations.UpdateCustomFields4Request,
    config?: AxiosRequestConfig
  ): Promise<operations.UpdateCustomFields4Response> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.UpdateCustomFields4Request(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/quotes/{quoteId}/customFields",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "put",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.UpdateCustomFields4Response =
        new operations.UpdateCustomFields4Response({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        default:
          if (
            utils.matchContentType(
              contentType,
              `application/vnd.xtrf-v1+json;charset=UTF-8`
            )
          ) {
            res.customFieldsDTO = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.customFieldsDTO = utils.objectToClass(
              httpRes?.data,
              shared.CustomFieldDTO,
              resFieldDepth
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Updates instructions of a given quote.
   *
   * @remarks
   * Updates instructions of a given quote.
   */
  updateInstructions2(
    req: operations.UpdateInstructions2Request,
    config?: AxiosRequestConfig
  ): Promise<operations.UpdateInstructions2Response> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.UpdateInstructions2Request(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/quotes/{quoteId}/instructions",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "instructionsDTO",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "put",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.UpdateInstructions2Response =
        new operations.UpdateInstructions2Response({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        default:
          if (
            utils.matchContentType(
              contentType,
              `application/vnd.xtrf-v1+json;charset=UTF-8`
            )
          ) {
            res.instructionsDTO = utils.objectToClass(
              httpRes?.data,
              shared.InstructionsDTO
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Updates a payable.
   *
   * @remarks
   * Updates a payable.
   */
  updatePayable1(
    req: operations.UpdatePayable1Request,
    config?: AxiosRequestConfig
  ): Promise<operations.UpdatePayable1Response> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.UpdatePayable1Request(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/quotes/{quoteId}/finance/payables/{payableId}",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "payableDTO",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "put",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.UpdatePayable1Response =
        new operations.UpdatePayable1Response({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        default:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.payableDTO = utils.objectToClass(
              httpRes?.data,
              shared.PayableDTO
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Updates a receivable.
   *
   * @remarks
   * Updates a receivable.
   */
  updateReceivable1(
    req: operations.UpdateReceivable1Request,
    config?: AxiosRequestConfig
  ): Promise<operations.UpdateReceivable1Response> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.UpdateReceivable1Request(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/quotes/{quoteId}/finance/receivables/{receivableId}",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "receivableDTO",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "put",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.UpdateReceivable1Response =
        new operations.UpdateReceivable1Response({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        default:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.receivableDTO = utils.objectToClass(
              httpRes?.data,
              shared.ReceivableDTO
            );
          }
          break;
      }

      return res;
    });
  }
}
