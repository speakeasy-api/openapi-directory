/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.time.LocalDate;

/**
 * CsvConversations - Conversations
 */
public class CsvConversations {
    /**
     * The account ID (API key) you wish to search for. This can differ from the API key in the authorization header because some accounts can request reports for other accounts, e.g. a primary account owner wants to create a report for one of its subaccounts.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("account_id")
    public String accountId;
    public CsvConversations withAccountId(String accountId) {
        this.accountId = accountId;
        return this;
    }
    
    /**
     * Search only for requests attached to a particular Application ID.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("application_id")
    public String applicationId;
    public CsvConversations withApplicationId(String applicationId) {
        this.applicationId = applicationId;
        return this;
    }
    
    /**
     * Search for messages with this `client_ref`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("client_ref")
    public String clientRef;
    public CsvConversations withClientRef(String clientRef) {
        this.clientRef = clientRef;
        return this;
    }
    
    /**
     * Search only for events sent to this particular Conversation. This should include the "CON-" prefix.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("conversation_id")
    public String conversationId;
    public CsvConversations withConversationId(String conversationId) {
        this.conversationId = conversationId;
        return this;
    }
    
    /**
     * Date the event was created.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd")
    @JsonProperty("creation_date")
    public LocalDate creationDate;
    public CsvConversations withCreationDate(LocalDate creationDate) {
        this.creationDate = creationDate;
        return this;
    }
    
    /**
     * Currency of the price of the request.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("currency")
    public String currency;
    public CsvConversations withCurrency(String currency) {
        this.currency = currency;
        return this;
    }
    
    /**
     * Id of the related CDR.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    public String id;
    public CsvConversations withId(String id) {
        this.id = id;
        return this;
    }
    
    /**
     * Price of the request.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("price")
    public Double price;
    public CsvConversations withPrice(Double price) {
        this.price = price;
        return this;
    }
    
    /**
     * UUID of the request.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("request_id")
    public String requestId;
    public CsvConversations withRequestId(String requestId) {
        this.requestId = requestId;
        return this;
    }
    
    /**
     * Total price of the request.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("total_price")
    public Double totalPrice;
    public CsvConversations withTotalPrice(Double totalPrice) {
        this.totalPrice = totalPrice;
        return this;
    }
    
    /**
     * User id in the conversation.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("user_id")
    public String userId;
    public CsvConversations withUserId(String userId) {
        this.userId = userId;
        return this;
    }
    
}
