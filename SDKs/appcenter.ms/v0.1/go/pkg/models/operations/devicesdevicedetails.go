// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

type DevicesDeviceDetailsSecurity struct {
	APIToken string `security:"scheme,type=apiKey,subtype=header,name=X-API-Token"`
}

type DevicesDeviceDetailsRequest struct {
	// The UDID of the device
	DeviceUdid string `pathParam:"style=simple,explode=false,name=device_udid"`
}

type DevicesDeviceDetails404ApplicationJSONCodeEnum string

const (
	DevicesDeviceDetails404ApplicationJSONCodeEnumBadRequest          DevicesDeviceDetails404ApplicationJSONCodeEnum = "BadRequest"
	DevicesDeviceDetails404ApplicationJSONCodeEnumConflict            DevicesDeviceDetails404ApplicationJSONCodeEnum = "Conflict"
	DevicesDeviceDetails404ApplicationJSONCodeEnumNotAcceptable       DevicesDeviceDetails404ApplicationJSONCodeEnum = "NotAcceptable"
	DevicesDeviceDetails404ApplicationJSONCodeEnumNotFound            DevicesDeviceDetails404ApplicationJSONCodeEnum = "NotFound"
	DevicesDeviceDetails404ApplicationJSONCodeEnumInternalServerError DevicesDeviceDetails404ApplicationJSONCodeEnum = "InternalServerError"
	DevicesDeviceDetails404ApplicationJSONCodeEnumUnauthorized        DevicesDeviceDetails404ApplicationJSONCodeEnum = "Unauthorized"
	DevicesDeviceDetails404ApplicationJSONCodeEnumTooManyRequests     DevicesDeviceDetails404ApplicationJSONCodeEnum = "TooManyRequests"
)

func (e DevicesDeviceDetails404ApplicationJSONCodeEnum) ToPointer() *DevicesDeviceDetails404ApplicationJSONCodeEnum {
	return &e
}

func (e *DevicesDeviceDetails404ApplicationJSONCodeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "BadRequest":
		fallthrough
	case "Conflict":
		fallthrough
	case "NotAcceptable":
		fallthrough
	case "NotFound":
		fallthrough
	case "InternalServerError":
		fallthrough
	case "Unauthorized":
		fallthrough
	case "TooManyRequests":
		*e = DevicesDeviceDetails404ApplicationJSONCodeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DevicesDeviceDetails404ApplicationJSONCodeEnum: %v", v)
	}
}

// DevicesDeviceDetails404ApplicationJSON - <b>not_found</b>: The user or device can't be found.
type DevicesDeviceDetails404ApplicationJSON struct {
	Code    DevicesDeviceDetails404ApplicationJSONCodeEnum `json:"code"`
	Message string                                         `json:"message"`
}

type DevicesDeviceDetails403ApplicationJSONCodeEnum string

const (
	DevicesDeviceDetails403ApplicationJSONCodeEnumBadRequest          DevicesDeviceDetails403ApplicationJSONCodeEnum = "BadRequest"
	DevicesDeviceDetails403ApplicationJSONCodeEnumConflict            DevicesDeviceDetails403ApplicationJSONCodeEnum = "Conflict"
	DevicesDeviceDetails403ApplicationJSONCodeEnumNotAcceptable       DevicesDeviceDetails403ApplicationJSONCodeEnum = "NotAcceptable"
	DevicesDeviceDetails403ApplicationJSONCodeEnumNotFound            DevicesDeviceDetails403ApplicationJSONCodeEnum = "NotFound"
	DevicesDeviceDetails403ApplicationJSONCodeEnumInternalServerError DevicesDeviceDetails403ApplicationJSONCodeEnum = "InternalServerError"
	DevicesDeviceDetails403ApplicationJSONCodeEnumUnauthorized        DevicesDeviceDetails403ApplicationJSONCodeEnum = "Unauthorized"
	DevicesDeviceDetails403ApplicationJSONCodeEnumTooManyRequests     DevicesDeviceDetails403ApplicationJSONCodeEnum = "TooManyRequests"
)

func (e DevicesDeviceDetails403ApplicationJSONCodeEnum) ToPointer() *DevicesDeviceDetails403ApplicationJSONCodeEnum {
	return &e
}

func (e *DevicesDeviceDetails403ApplicationJSONCodeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "BadRequest":
		fallthrough
	case "Conflict":
		fallthrough
	case "NotAcceptable":
		fallthrough
	case "NotFound":
		fallthrough
	case "InternalServerError":
		fallthrough
	case "Unauthorized":
		fallthrough
	case "TooManyRequests":
		*e = DevicesDeviceDetails403ApplicationJSONCodeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DevicesDeviceDetails403ApplicationJSONCodeEnum: %v", v)
	}
}

// DevicesDeviceDetails403ApplicationJSON - <b>forbidden</b>: The user is not allowed to view someone else's device.
type DevicesDeviceDetails403ApplicationJSON struct {
	Code    DevicesDeviceDetails403ApplicationJSONCodeEnum `json:"code"`
	Message string                                         `json:"message"`
}

type DevicesDeviceDetails400ApplicationJSONCodeEnum string

const (
	DevicesDeviceDetails400ApplicationJSONCodeEnumBadRequest          DevicesDeviceDetails400ApplicationJSONCodeEnum = "BadRequest"
	DevicesDeviceDetails400ApplicationJSONCodeEnumConflict            DevicesDeviceDetails400ApplicationJSONCodeEnum = "Conflict"
	DevicesDeviceDetails400ApplicationJSONCodeEnumNotAcceptable       DevicesDeviceDetails400ApplicationJSONCodeEnum = "NotAcceptable"
	DevicesDeviceDetails400ApplicationJSONCodeEnumNotFound            DevicesDeviceDetails400ApplicationJSONCodeEnum = "NotFound"
	DevicesDeviceDetails400ApplicationJSONCodeEnumInternalServerError DevicesDeviceDetails400ApplicationJSONCodeEnum = "InternalServerError"
	DevicesDeviceDetails400ApplicationJSONCodeEnumUnauthorized        DevicesDeviceDetails400ApplicationJSONCodeEnum = "Unauthorized"
	DevicesDeviceDetails400ApplicationJSONCodeEnumTooManyRequests     DevicesDeviceDetails400ApplicationJSONCodeEnum = "TooManyRequests"
)

func (e DevicesDeviceDetails400ApplicationJSONCodeEnum) ToPointer() *DevicesDeviceDetails400ApplicationJSONCodeEnum {
	return &e
}

func (e *DevicesDeviceDetails400ApplicationJSONCodeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "BadRequest":
		fallthrough
	case "Conflict":
		fallthrough
	case "NotAcceptable":
		fallthrough
	case "NotFound":
		fallthrough
	case "InternalServerError":
		fallthrough
	case "Unauthorized":
		fallthrough
	case "TooManyRequests":
		*e = DevicesDeviceDetails400ApplicationJSONCodeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DevicesDeviceDetails400ApplicationJSONCodeEnum: %v", v)
	}
}

// DevicesDeviceDetails400ApplicationJSON - <b>bad_request</b>: Devices information can only be requested for iOS apps.
type DevicesDeviceDetails400ApplicationJSON struct {
	Code    DevicesDeviceDetails400ApplicationJSONCodeEnum `json:"code"`
	Message string                                         `json:"message"`
}

// DevicesDeviceDetails200ApplicationJSON - The information for a single iOS device
type DevicesDeviceDetails200ApplicationJSON struct {
	// The device description, in the format "iPhone 7 Plus (A1784)"
	DeviceName string `json:"device_name"`
	// A combination of the device model name and the owner name.
	FullDeviceName *string `json:"full_device_name,omitempty"`
	// The device's International Mobile Equipment Identity number. Always empty or undefined at present.
	Imei *string `json:"imei,omitempty"`
	// The model identifier of the device, in the format iDeviceM,N
	Model string `json:"model"`
	// The last known OS version running on the device
	OsBuild string `json:"os_build"`
	// The last known OS version running on the device
	OsVersion string `json:"os_version"`
	// The user ID of the device owner.
	OwnerID *string `json:"owner_id,omitempty"`
	// Timestamp of when the device was registered in ISO format.
	RegisteredAt *string `json:"registered_at,omitempty"`
	// The device's serial number. Always empty or undefined at present.
	Serial *string `json:"serial,omitempty"`
	// The provisioning status of the device.
	Status string `json:"status"`
	// The Unique Device IDentifier of the device
	Udid string `json:"udid"`
}

type DevicesDeviceDetailsResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Success
	DevicesDeviceDetails200ApplicationJSONObject *DevicesDeviceDetails200ApplicationJSON
	// <b>bad_request</b>: Devices information can only be requested for iOS apps.
	//
	DevicesDeviceDetails400ApplicationJSONObject *DevicesDeviceDetails400ApplicationJSON
	// <b>forbidden</b>: The user is not allowed to view someone else's device.
	//
	DevicesDeviceDetails403ApplicationJSONObject *DevicesDeviceDetails403ApplicationJSON
	// <b>not_found</b>: The user or device can't be found.
	//
	DevicesDeviceDetails404ApplicationJSONObject *DevicesDeviceDetails404ApplicationJSON
}
