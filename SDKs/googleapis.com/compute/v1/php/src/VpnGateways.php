<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class VpnGateways 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Retrieves an aggregated list of VPN gateways.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeVpnGatewaysAggregatedListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeVpnGatewaysAggregatedListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeVpnGatewaysAggregatedListResponse
     */
	public function computeVpnGatewaysAggregatedList(
        \OpenAPI\OpenAPI\Models\Operations\ComputeVpnGatewaysAggregatedListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeVpnGatewaysAggregatedListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeVpnGatewaysAggregatedListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/aggregated/vpnGateways', \OpenAPI\OpenAPI\Models\Operations\ComputeVpnGatewaysAggregatedListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeVpnGatewaysAggregatedListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeVpnGatewaysAggregatedListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->vpnGatewayAggregatedList = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\VpnGatewayAggregatedList', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Deletes the specified VPN gateway.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeVpnGatewaysDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeVpnGatewaysDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeVpnGatewaysDeleteResponse
     */
	public function computeVpnGatewaysDelete(
        \OpenAPI\OpenAPI\Models\Operations\ComputeVpnGatewaysDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeVpnGatewaysDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeVpnGatewaysDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/regions/{region}/vpnGateways/{vpnGateway}', \OpenAPI\OpenAPI\Models\Operations\ComputeVpnGatewaysDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeVpnGatewaysDeleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeVpnGatewaysDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns the specified VPN gateway.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeVpnGatewaysGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeVpnGatewaysGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeVpnGatewaysGetResponse
     */
	public function computeVpnGatewaysGet(
        \OpenAPI\OpenAPI\Models\Operations\ComputeVpnGatewaysGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeVpnGatewaysGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeVpnGatewaysGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/regions/{region}/vpnGateways/{vpnGateway}', \OpenAPI\OpenAPI\Models\Operations\ComputeVpnGatewaysGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeVpnGatewaysGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeVpnGatewaysGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->vpnGateway = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\VpnGateway', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns the status for the specified VPN gateway.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeVpnGatewaysGetStatusRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeVpnGatewaysGetStatusSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeVpnGatewaysGetStatusResponse
     */
	public function computeVpnGatewaysGetStatus(
        \OpenAPI\OpenAPI\Models\Operations\ComputeVpnGatewaysGetStatusRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeVpnGatewaysGetStatusSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeVpnGatewaysGetStatusResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/regions/{region}/vpnGateways/{vpnGateway}/getStatus', \OpenAPI\OpenAPI\Models\Operations\ComputeVpnGatewaysGetStatusRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeVpnGatewaysGetStatusRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeVpnGatewaysGetStatusResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->vpnGatewaysGetStatusResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\VpnGatewaysGetStatusResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a VPN gateway in the specified project and region using the data included in the request.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeVpnGatewaysInsertRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeVpnGatewaysInsertSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeVpnGatewaysInsertResponse
     */
	public function computeVpnGatewaysInsert(
        \OpenAPI\OpenAPI\Models\Operations\ComputeVpnGatewaysInsertRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeVpnGatewaysInsertSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeVpnGatewaysInsertResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/regions/{region}/vpnGateways', \OpenAPI\OpenAPI\Models\Operations\ComputeVpnGatewaysInsertRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "vpnGateway", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeVpnGatewaysInsertRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeVpnGatewaysInsertResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieves a list of VPN gateways available to the specified project and region.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeVpnGatewaysListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeVpnGatewaysListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeVpnGatewaysListResponse
     */
	public function computeVpnGatewaysList(
        \OpenAPI\OpenAPI\Models\Operations\ComputeVpnGatewaysListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeVpnGatewaysListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeVpnGatewaysListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/regions/{region}/vpnGateways', \OpenAPI\OpenAPI\Models\Operations\ComputeVpnGatewaysListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeVpnGatewaysListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeVpnGatewaysListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->vpnGatewayList = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\VpnGatewayList', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Sets the labels on a VpnGateway. To learn more about labels, read the Labeling Resources documentation.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeVpnGatewaysSetLabelsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeVpnGatewaysSetLabelsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeVpnGatewaysSetLabelsResponse
     */
	public function computeVpnGatewaysSetLabels(
        \OpenAPI\OpenAPI\Models\Operations\ComputeVpnGatewaysSetLabelsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeVpnGatewaysSetLabelsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeVpnGatewaysSetLabelsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/regions/{region}/vpnGateways/{resource}/setLabels', \OpenAPI\OpenAPI\Models\Operations\ComputeVpnGatewaysSetLabelsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "regionSetLabelsRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeVpnGatewaysSetLabelsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeVpnGatewaysSetLabelsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns permissions that a caller has on the specified resource.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeVpnGatewaysTestIamPermissionsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeVpnGatewaysTestIamPermissionsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeVpnGatewaysTestIamPermissionsResponse
     */
	public function computeVpnGatewaysTestIamPermissions(
        \OpenAPI\OpenAPI\Models\Operations\ComputeVpnGatewaysTestIamPermissionsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeVpnGatewaysTestIamPermissionsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeVpnGatewaysTestIamPermissionsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/regions/{region}/vpnGateways/{resource}/testIamPermissions', \OpenAPI\OpenAPI\Models\Operations\ComputeVpnGatewaysTestIamPermissionsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "testPermissionsRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeVpnGatewaysTestIamPermissionsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeVpnGatewaysTestIamPermissionsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->testPermissionsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\TestPermissionsResponse', 'json');
            }
        }

        return $response;
    }
}