// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"bytes"
	"encoding/json"
	"errors"
	"fmt"
	"net/http"
)

// PostAdminMappingsRequestBodyRequestBasicAuthCredentials - Pre-emptive basic auth credentials to match against
type PostAdminMappingsRequestBodyRequestBasicAuthCredentials struct {
	Password string `json:"password"`
	Username string `json:"username"`
}

type PostAdminMappingsRequestBodyRequest struct {
	// Pre-emptive basic auth credentials to match against
	BasicAuthCredentials *PostAdminMappingsRequestBodyRequestBasicAuthCredentials `json:"basicAuthCredentials,omitempty"`
	// Request body patterns to match against in the <key>: { "<predicate>": "<value>" } form
	BodyPatterns []map[string]interface{} `json:"bodyPatterns,omitempty"`
	// Cookie patterns to match against in the <key>: { "<predicate>": "<value>" } form
	Cookies map[string]interface{} `json:"cookies,omitempty"`
	// Header patterns to match against in the <key>: { "<predicate>": "<value>" } form
	Headers map[string]interface{} `json:"headers,omitempty"`
	// The HTTP request method e.g. GET
	Method *string `json:"method,omitempty"`
	// Query parameter patterns to match against in the <key>: { "<predicate>": "<value>" } form
	QueryParameters map[string]interface{} `json:"queryParameters,omitempty"`
	// The path and query to match exactly against. Only one of url, urlPattern, urlPath or urlPathPattern may be specified.
	URL *string `json:"url,omitempty"`
	// The path to match exactly against. Only one of url, urlPattern, urlPath or urlPathPattern may be specified.
	URLPath *string `json:"urlPath,omitempty"`
	// The path regex to match against. Only one of url, urlPattern, urlPath or urlPathPattern may be specified.
	URLPathPattern *string `json:"urlPathPattern,omitempty"`
	// The path and query regex to match against. Only one of url, urlPattern, urlPath or urlPathPattern may be specified.
	URLPattern *string `json:"urlPattern,omitempty"`
}

// PostAdminMappingsRequestBodyResponseUniformFaultEnum - The fault to apply (instead of a full, valid response).
type PostAdminMappingsRequestBodyResponseUniformFaultEnum string

const (
	PostAdminMappingsRequestBodyResponseUniformFaultEnumConnectionResetByPeer  PostAdminMappingsRequestBodyResponseUniformFaultEnum = "CONNECTION_RESET_BY_PEER"
	PostAdminMappingsRequestBodyResponseUniformFaultEnumEmptyResponse          PostAdminMappingsRequestBodyResponseUniformFaultEnum = "EMPTY_RESPONSE"
	PostAdminMappingsRequestBodyResponseUniformFaultEnumMalformedResponseChunk PostAdminMappingsRequestBodyResponseUniformFaultEnum = "MALFORMED_RESPONSE_CHUNK"
	PostAdminMappingsRequestBodyResponseUniformFaultEnumRandomDataThenClose    PostAdminMappingsRequestBodyResponseUniformFaultEnum = "RANDOM_DATA_THEN_CLOSE"
)

func (e *PostAdminMappingsRequestBodyResponseUniformFaultEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "CONNECTION_RESET_BY_PEER":
		fallthrough
	case "EMPTY_RESPONSE":
		fallthrough
	case "MALFORMED_RESPONSE_CHUNK":
		fallthrough
	case "RANDOM_DATA_THEN_CLOSE":
		*e = PostAdminMappingsRequestBodyResponseUniformFaultEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PostAdminMappingsRequestBodyResponseUniformFaultEnum: %s", s)
	}
}

type PostAdminMappingsRequestBodyResponseUniformTypeEnum string

const (
	PostAdminMappingsRequestBodyResponseUniformTypeEnumUniform PostAdminMappingsRequestBodyResponseUniformTypeEnum = "uniform"
)

func (e *PostAdminMappingsRequestBodyResponseUniformTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "uniform":
		*e = PostAdminMappingsRequestBodyResponseUniformTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PostAdminMappingsRequestBodyResponseUniformTypeEnum: %s", s)
	}
}

// PostAdminMappingsRequestBodyResponseUniform - Uniformly distributed random response delay.
type PostAdminMappingsRequestBodyResponseUniform struct {
	// Extra request headers to send when proxying to another host.
	AdditionalProxyRequestHeaders map[string]interface{} `json:"additionalProxyRequestHeaders,omitempty"`
	// The response body as a base64 encoded string (useful for binary content). Only one of body, base64Body, jsonBody or bodyFileName may be specified.
	Base64Body *string `json:"base64Body,omitempty"`
	// The response body as a string. Only one of body, base64Body, jsonBody or bodyFileName may be specified.
	Body *string `json:"body,omitempty"`
	// The path to the file containing the response body, relative to the configured file root. Only one of body, base64Body, jsonBody or bodyFileName may be specified.
	BodyFileName *string `json:"bodyFileName,omitempty"`
	// The fault to apply (instead of a full, valid response).
	Fault *PostAdminMappingsRequestBodyResponseUniformFaultEnum `json:"fault,omitempty"`
	// Number of milliseconds to delay be before sending the response.
	FixedDelayMilliseconds *int64 `json:"fixedDelayMilliseconds,omitempty"`
	// Read-only flag indicating false if this was the default, unmatched response. Not present otherwise.
	FromConfiguredStub *bool `json:"fromConfiguredStub,omitempty"`
	// Map of response headers to send
	Headers map[string]interface{} `json:"headers,omitempty"`
	// The response body as a JSON object. Only one of body, base64Body, jsonBody or bodyFileName may be specified.
	JSONBody map[string]interface{} `json:"jsonBody,omitempty"`
	Lower    *int64                 `json:"lower,omitempty"`
	// The base URL of the target to proxy matching requests to.
	ProxyBaseURL *string `json:"proxyBaseUrl,omitempty"`
	// The HTTP status code to be returned
	Status *int64 `json:"status,omitempty"`
	// The HTTP status message to be returned
	StatusMessage *string `json:"statusMessage,omitempty"`
	// Parameters to apply to response transformers.
	TransformerParameters map[string]interface{} `json:"transformerParameters,omitempty"`
	// List of names of transformers to apply to this response.
	Transformers []string                                             `json:"transformers,omitempty"`
	Type         *PostAdminMappingsRequestBodyResponseUniformTypeEnum `json:"type,omitempty"`
	Upper        *int64                                               `json:"upper,omitempty"`
}

// PostAdminMappingsRequestBodyResponseLogNormalFaultEnum - The fault to apply (instead of a full, valid response).
type PostAdminMappingsRequestBodyResponseLogNormalFaultEnum string

const (
	PostAdminMappingsRequestBodyResponseLogNormalFaultEnumConnectionResetByPeer  PostAdminMappingsRequestBodyResponseLogNormalFaultEnum = "CONNECTION_RESET_BY_PEER"
	PostAdminMappingsRequestBodyResponseLogNormalFaultEnumEmptyResponse          PostAdminMappingsRequestBodyResponseLogNormalFaultEnum = "EMPTY_RESPONSE"
	PostAdminMappingsRequestBodyResponseLogNormalFaultEnumMalformedResponseChunk PostAdminMappingsRequestBodyResponseLogNormalFaultEnum = "MALFORMED_RESPONSE_CHUNK"
	PostAdminMappingsRequestBodyResponseLogNormalFaultEnumRandomDataThenClose    PostAdminMappingsRequestBodyResponseLogNormalFaultEnum = "RANDOM_DATA_THEN_CLOSE"
)

func (e *PostAdminMappingsRequestBodyResponseLogNormalFaultEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "CONNECTION_RESET_BY_PEER":
		fallthrough
	case "EMPTY_RESPONSE":
		fallthrough
	case "MALFORMED_RESPONSE_CHUNK":
		fallthrough
	case "RANDOM_DATA_THEN_CLOSE":
		*e = PostAdminMappingsRequestBodyResponseLogNormalFaultEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PostAdminMappingsRequestBodyResponseLogNormalFaultEnum: %s", s)
	}
}

type PostAdminMappingsRequestBodyResponseLogNormalTypeEnum string

const (
	PostAdminMappingsRequestBodyResponseLogNormalTypeEnumLognormal PostAdminMappingsRequestBodyResponseLogNormalTypeEnum = "lognormal"
)

func (e *PostAdminMappingsRequestBodyResponseLogNormalTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "lognormal":
		*e = PostAdminMappingsRequestBodyResponseLogNormalTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PostAdminMappingsRequestBodyResponseLogNormalTypeEnum: %s", s)
	}
}

// PostAdminMappingsRequestBodyResponseLogNormal - Log normal randomly distributed response delay.
type PostAdminMappingsRequestBodyResponseLogNormal struct {
	// Extra request headers to send when proxying to another host.
	AdditionalProxyRequestHeaders map[string]interface{} `json:"additionalProxyRequestHeaders,omitempty"`
	// The response body as a base64 encoded string (useful for binary content). Only one of body, base64Body, jsonBody or bodyFileName may be specified.
	Base64Body *string `json:"base64Body,omitempty"`
	// The response body as a string. Only one of body, base64Body, jsonBody or bodyFileName may be specified.
	Body *string `json:"body,omitempty"`
	// The path to the file containing the response body, relative to the configured file root. Only one of body, base64Body, jsonBody or bodyFileName may be specified.
	BodyFileName *string `json:"bodyFileName,omitempty"`
	// The fault to apply (instead of a full, valid response).
	Fault *PostAdminMappingsRequestBodyResponseLogNormalFaultEnum `json:"fault,omitempty"`
	// Number of milliseconds to delay be before sending the response.
	FixedDelayMilliseconds *int64 `json:"fixedDelayMilliseconds,omitempty"`
	// Read-only flag indicating false if this was the default, unmatched response. Not present otherwise.
	FromConfiguredStub *bool `json:"fromConfiguredStub,omitempty"`
	// Map of response headers to send
	Headers map[string]interface{} `json:"headers,omitempty"`
	// The response body as a JSON object. Only one of body, base64Body, jsonBody or bodyFileName may be specified.
	JSONBody map[string]interface{} `json:"jsonBody,omitempty"`
	Median   *int64                 `json:"median,omitempty"`
	// The base URL of the target to proxy matching requests to.
	ProxyBaseURL *string  `json:"proxyBaseUrl,omitempty"`
	Sigma        *float64 `json:"sigma,omitempty"`
	// The HTTP status code to be returned
	Status *int64 `json:"status,omitempty"`
	// The HTTP status message to be returned
	StatusMessage *string `json:"statusMessage,omitempty"`
	// Parameters to apply to response transformers.
	TransformerParameters map[string]interface{} `json:"transformerParameters,omitempty"`
	// List of names of transformers to apply to this response.
	Transformers []string                                               `json:"transformers,omitempty"`
	Type         *PostAdminMappingsRequestBodyResponseLogNormalTypeEnum `json:"type,omitempty"`
}

type PostAdminMappingsRequestBodyResponseType string

const (
	PostAdminMappingsRequestBodyResponseTypePostAdminMappingsRequestBodyResponseLogNormal PostAdminMappingsRequestBodyResponseType = "post_/__admin/mappings_requestBody_response_Log normal"
	PostAdminMappingsRequestBodyResponseTypePostAdminMappingsRequestBodyResponseUniform   PostAdminMappingsRequestBodyResponseType = "post_/__admin/mappings_requestBody_response_Uniform"
)

type PostAdminMappingsRequestBodyResponse struct {
	PostAdminMappingsRequestBodyResponseLogNormal *PostAdminMappingsRequestBodyResponseLogNormal
	PostAdminMappingsRequestBodyResponseUniform   *PostAdminMappingsRequestBodyResponseUniform

	Type PostAdminMappingsRequestBodyResponseType
}

func CreatePostAdminMappingsRequestBodyResponsePostAdminMappingsRequestBodyResponseLogNormal(postAdminMappingsRequestBodyResponseLogNormal PostAdminMappingsRequestBodyResponseLogNormal) PostAdminMappingsRequestBodyResponse {
	typ := PostAdminMappingsRequestBodyResponseTypePostAdminMappingsRequestBodyResponseLogNormal

	return PostAdminMappingsRequestBodyResponse{
		PostAdminMappingsRequestBodyResponseLogNormal: &postAdminMappingsRequestBodyResponseLogNormal,
		Type: typ,
	}
}

func CreatePostAdminMappingsRequestBodyResponsePostAdminMappingsRequestBodyResponseUniform(postAdminMappingsRequestBodyResponseUniform PostAdminMappingsRequestBodyResponseUniform) PostAdminMappingsRequestBodyResponse {
	typ := PostAdminMappingsRequestBodyResponseTypePostAdminMappingsRequestBodyResponseUniform

	return PostAdminMappingsRequestBodyResponse{
		PostAdminMappingsRequestBodyResponseUniform: &postAdminMappingsRequestBodyResponseUniform,
		Type: typ,
	}
}

func (u *PostAdminMappingsRequestBodyResponse) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	postAdminMappingsRequestBodyResponseLogNormal := new(PostAdminMappingsRequestBodyResponseLogNormal)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&postAdminMappingsRequestBodyResponseLogNormal); err == nil {
		u.PostAdminMappingsRequestBodyResponseLogNormal = postAdminMappingsRequestBodyResponseLogNormal
		u.Type = PostAdminMappingsRequestBodyResponseTypePostAdminMappingsRequestBodyResponseLogNormal
		return nil
	}

	postAdminMappingsRequestBodyResponseUniform := new(PostAdminMappingsRequestBodyResponseUniform)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&postAdminMappingsRequestBodyResponseUniform); err == nil {
		u.PostAdminMappingsRequestBodyResponseUniform = postAdminMappingsRequestBodyResponseUniform
		u.Type = PostAdminMappingsRequestBodyResponseTypePostAdminMappingsRequestBodyResponseUniform
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u PostAdminMappingsRequestBodyResponse) MarshalJSON() ([]byte, error) {
	if u.PostAdminMappingsRequestBodyResponseLogNormal != nil {
		return json.Marshal(u.PostAdminMappingsRequestBodyResponseLogNormal)
	}

	if u.PostAdminMappingsRequestBodyResponseUniform != nil {
		return json.Marshal(u.PostAdminMappingsRequestBodyResponseUniform)
	}

	return nil, nil
}

type PostAdminMappingsRequestBody struct {
	// This stub mapping's unique identifier
	ID *string `json:"id,omitempty"`
	// Arbitrary metadata to be used for e.g. tagging, documentation. Can also be used to find and remove stubs.
	Metadata map[string]interface{} `json:"metadata,omitempty"`
	// The stub mapping's name
	Name *string `json:"name,omitempty"`
	// The new state for the scenario to be updated to after this stub is served.
	NewScenarioState *string `json:"newScenarioState,omitempty"`
	// Indicates that the stub mapping should be persisted immediately on create/update/delete and survive resets to default.
	Persistent *bool `json:"persistent,omitempty"`
	// A map of the names of post serve action extensions to trigger and their parameters.
	PostServeActions map[string]interface{} `json:"postServeActions,omitempty"`
	// This stub mapping's priority relative to others. 1 is highest.
	Priority *int64                               `json:"priority,omitempty"`
	Request  *PostAdminMappingsRequestBodyRequest `json:"request,omitempty"`
	// The required state of the scenario in order for this stub to be matched.
	RequiredScenarioState *string                               `json:"requiredScenarioState,omitempty"`
	Response              *PostAdminMappingsRequestBodyResponse `json:"response,omitempty"`
	// The name of the scenario that this stub mapping is part of
	ScenarioName *string `json:"scenarioName,omitempty"`
	// Alias for the id
	UUID *string `json:"uuid,omitempty"`
}

type PostAdminMappingsRequest struct {
	Request *PostAdminMappingsRequestBody `request:"mediaType=application/json"`
}

// PostAdminMappings201ApplicationJSONRequestBasicAuthCredentials - Pre-emptive basic auth credentials to match against
type PostAdminMappings201ApplicationJSONRequestBasicAuthCredentials struct {
	Password string `json:"password"`
	Username string `json:"username"`
}

type PostAdminMappings201ApplicationJSONRequest struct {
	// Pre-emptive basic auth credentials to match against
	BasicAuthCredentials *PostAdminMappings201ApplicationJSONRequestBasicAuthCredentials `json:"basicAuthCredentials,omitempty"`
	// Request body patterns to match against in the <key>: { "<predicate>": "<value>" } form
	BodyPatterns []map[string]interface{} `json:"bodyPatterns,omitempty"`
	// Cookie patterns to match against in the <key>: { "<predicate>": "<value>" } form
	Cookies map[string]interface{} `json:"cookies,omitempty"`
	// Header patterns to match against in the <key>: { "<predicate>": "<value>" } form
	Headers map[string]interface{} `json:"headers,omitempty"`
	// The HTTP request method e.g. GET
	Method *string `json:"method,omitempty"`
	// Query parameter patterns to match against in the <key>: { "<predicate>": "<value>" } form
	QueryParameters map[string]interface{} `json:"queryParameters,omitempty"`
	// The path and query to match exactly against. Only one of url, urlPattern, urlPath or urlPathPattern may be specified.
	URL *string `json:"url,omitempty"`
	// The path to match exactly against. Only one of url, urlPattern, urlPath or urlPathPattern may be specified.
	URLPath *string `json:"urlPath,omitempty"`
	// The path regex to match against. Only one of url, urlPattern, urlPath or urlPathPattern may be specified.
	URLPathPattern *string `json:"urlPathPattern,omitempty"`
	// The path and query regex to match against. Only one of url, urlPattern, urlPath or urlPathPattern may be specified.
	URLPattern *string `json:"urlPattern,omitempty"`
}

// PostAdminMappings201ApplicationJSONResponseUniformFaultEnum - The fault to apply (instead of a full, valid response).
type PostAdminMappings201ApplicationJSONResponseUniformFaultEnum string

const (
	PostAdminMappings201ApplicationJSONResponseUniformFaultEnumConnectionResetByPeer  PostAdminMappings201ApplicationJSONResponseUniformFaultEnum = "CONNECTION_RESET_BY_PEER"
	PostAdminMappings201ApplicationJSONResponseUniformFaultEnumEmptyResponse          PostAdminMappings201ApplicationJSONResponseUniformFaultEnum = "EMPTY_RESPONSE"
	PostAdminMappings201ApplicationJSONResponseUniformFaultEnumMalformedResponseChunk PostAdminMappings201ApplicationJSONResponseUniformFaultEnum = "MALFORMED_RESPONSE_CHUNK"
	PostAdminMappings201ApplicationJSONResponseUniformFaultEnumRandomDataThenClose    PostAdminMappings201ApplicationJSONResponseUniformFaultEnum = "RANDOM_DATA_THEN_CLOSE"
)

func (e *PostAdminMappings201ApplicationJSONResponseUniformFaultEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "CONNECTION_RESET_BY_PEER":
		fallthrough
	case "EMPTY_RESPONSE":
		fallthrough
	case "MALFORMED_RESPONSE_CHUNK":
		fallthrough
	case "RANDOM_DATA_THEN_CLOSE":
		*e = PostAdminMappings201ApplicationJSONResponseUniformFaultEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PostAdminMappings201ApplicationJSONResponseUniformFaultEnum: %s", s)
	}
}

type PostAdminMappings201ApplicationJSONResponseUniformTypeEnum string

const (
	PostAdminMappings201ApplicationJSONResponseUniformTypeEnumUniform PostAdminMappings201ApplicationJSONResponseUniformTypeEnum = "uniform"
)

func (e *PostAdminMappings201ApplicationJSONResponseUniformTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "uniform":
		*e = PostAdminMappings201ApplicationJSONResponseUniformTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PostAdminMappings201ApplicationJSONResponseUniformTypeEnum: %s", s)
	}
}

// PostAdminMappings201ApplicationJSONResponseUniform - Uniformly distributed random response delay.
type PostAdminMappings201ApplicationJSONResponseUniform struct {
	// Extra request headers to send when proxying to another host.
	AdditionalProxyRequestHeaders map[string]interface{} `json:"additionalProxyRequestHeaders,omitempty"`
	// The response body as a base64 encoded string (useful for binary content). Only one of body, base64Body, jsonBody or bodyFileName may be specified.
	Base64Body *string `json:"base64Body,omitempty"`
	// The response body as a string. Only one of body, base64Body, jsonBody or bodyFileName may be specified.
	Body *string `json:"body,omitempty"`
	// The path to the file containing the response body, relative to the configured file root. Only one of body, base64Body, jsonBody or bodyFileName may be specified.
	BodyFileName *string `json:"bodyFileName,omitempty"`
	// The fault to apply (instead of a full, valid response).
	Fault *PostAdminMappings201ApplicationJSONResponseUniformFaultEnum `json:"fault,omitempty"`
	// Number of milliseconds to delay be before sending the response.
	FixedDelayMilliseconds *int64 `json:"fixedDelayMilliseconds,omitempty"`
	// Read-only flag indicating false if this was the default, unmatched response. Not present otherwise.
	FromConfiguredStub *bool `json:"fromConfiguredStub,omitempty"`
	// Map of response headers to send
	Headers map[string]interface{} `json:"headers,omitempty"`
	// The response body as a JSON object. Only one of body, base64Body, jsonBody or bodyFileName may be specified.
	JSONBody map[string]interface{} `json:"jsonBody,omitempty"`
	Lower    *int64                 `json:"lower,omitempty"`
	// The base URL of the target to proxy matching requests to.
	ProxyBaseURL *string `json:"proxyBaseUrl,omitempty"`
	// The HTTP status code to be returned
	Status *int64 `json:"status,omitempty"`
	// The HTTP status message to be returned
	StatusMessage *string `json:"statusMessage,omitempty"`
	// Parameters to apply to response transformers.
	TransformerParameters map[string]interface{} `json:"transformerParameters,omitempty"`
	// List of names of transformers to apply to this response.
	Transformers []string                                                    `json:"transformers,omitempty"`
	Type         *PostAdminMappings201ApplicationJSONResponseUniformTypeEnum `json:"type,omitempty"`
	Upper        *int64                                                      `json:"upper,omitempty"`
}

// PostAdminMappings201ApplicationJSONResponseLogNormalFaultEnum - The fault to apply (instead of a full, valid response).
type PostAdminMappings201ApplicationJSONResponseLogNormalFaultEnum string

const (
	PostAdminMappings201ApplicationJSONResponseLogNormalFaultEnumConnectionResetByPeer  PostAdminMappings201ApplicationJSONResponseLogNormalFaultEnum = "CONNECTION_RESET_BY_PEER"
	PostAdminMappings201ApplicationJSONResponseLogNormalFaultEnumEmptyResponse          PostAdminMappings201ApplicationJSONResponseLogNormalFaultEnum = "EMPTY_RESPONSE"
	PostAdminMappings201ApplicationJSONResponseLogNormalFaultEnumMalformedResponseChunk PostAdminMappings201ApplicationJSONResponseLogNormalFaultEnum = "MALFORMED_RESPONSE_CHUNK"
	PostAdminMappings201ApplicationJSONResponseLogNormalFaultEnumRandomDataThenClose    PostAdminMappings201ApplicationJSONResponseLogNormalFaultEnum = "RANDOM_DATA_THEN_CLOSE"
)

func (e *PostAdminMappings201ApplicationJSONResponseLogNormalFaultEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "CONNECTION_RESET_BY_PEER":
		fallthrough
	case "EMPTY_RESPONSE":
		fallthrough
	case "MALFORMED_RESPONSE_CHUNK":
		fallthrough
	case "RANDOM_DATA_THEN_CLOSE":
		*e = PostAdminMappings201ApplicationJSONResponseLogNormalFaultEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PostAdminMappings201ApplicationJSONResponseLogNormalFaultEnum: %s", s)
	}
}

type PostAdminMappings201ApplicationJSONResponseLogNormalTypeEnum string

const (
	PostAdminMappings201ApplicationJSONResponseLogNormalTypeEnumLognormal PostAdminMappings201ApplicationJSONResponseLogNormalTypeEnum = "lognormal"
)

func (e *PostAdminMappings201ApplicationJSONResponseLogNormalTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "lognormal":
		*e = PostAdminMappings201ApplicationJSONResponseLogNormalTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PostAdminMappings201ApplicationJSONResponseLogNormalTypeEnum: %s", s)
	}
}

// PostAdminMappings201ApplicationJSONResponseLogNormal - Log normal randomly distributed response delay.
type PostAdminMappings201ApplicationJSONResponseLogNormal struct {
	// Extra request headers to send when proxying to another host.
	AdditionalProxyRequestHeaders map[string]interface{} `json:"additionalProxyRequestHeaders,omitempty"`
	// The response body as a base64 encoded string (useful for binary content). Only one of body, base64Body, jsonBody or bodyFileName may be specified.
	Base64Body *string `json:"base64Body,omitempty"`
	// The response body as a string. Only one of body, base64Body, jsonBody or bodyFileName may be specified.
	Body *string `json:"body,omitempty"`
	// The path to the file containing the response body, relative to the configured file root. Only one of body, base64Body, jsonBody or bodyFileName may be specified.
	BodyFileName *string `json:"bodyFileName,omitempty"`
	// The fault to apply (instead of a full, valid response).
	Fault *PostAdminMappings201ApplicationJSONResponseLogNormalFaultEnum `json:"fault,omitempty"`
	// Number of milliseconds to delay be before sending the response.
	FixedDelayMilliseconds *int64 `json:"fixedDelayMilliseconds,omitempty"`
	// Read-only flag indicating false if this was the default, unmatched response. Not present otherwise.
	FromConfiguredStub *bool `json:"fromConfiguredStub,omitempty"`
	// Map of response headers to send
	Headers map[string]interface{} `json:"headers,omitempty"`
	// The response body as a JSON object. Only one of body, base64Body, jsonBody or bodyFileName may be specified.
	JSONBody map[string]interface{} `json:"jsonBody,omitempty"`
	Median   *int64                 `json:"median,omitempty"`
	// The base URL of the target to proxy matching requests to.
	ProxyBaseURL *string  `json:"proxyBaseUrl,omitempty"`
	Sigma        *float64 `json:"sigma,omitempty"`
	// The HTTP status code to be returned
	Status *int64 `json:"status,omitempty"`
	// The HTTP status message to be returned
	StatusMessage *string `json:"statusMessage,omitempty"`
	// Parameters to apply to response transformers.
	TransformerParameters map[string]interface{} `json:"transformerParameters,omitempty"`
	// List of names of transformers to apply to this response.
	Transformers []string                                                      `json:"transformers,omitempty"`
	Type         *PostAdminMappings201ApplicationJSONResponseLogNormalTypeEnum `json:"type,omitempty"`
}

type PostAdminMappings201ApplicationJSONResponseType string

const (
	PostAdminMappings201ApplicationJSONResponseTypePostAdminMappings201ApplicationJSONResponseLogNormal PostAdminMappings201ApplicationJSONResponseType = "post_/__admin/mappings_201ApplicationJSON_response_Log normal"
	PostAdminMappings201ApplicationJSONResponseTypePostAdminMappings201ApplicationJSONResponseUniform   PostAdminMappings201ApplicationJSONResponseType = "post_/__admin/mappings_201ApplicationJSON_response_Uniform"
)

type PostAdminMappings201ApplicationJSONResponse struct {
	PostAdminMappings201ApplicationJSONResponseLogNormal *PostAdminMappings201ApplicationJSONResponseLogNormal
	PostAdminMappings201ApplicationJSONResponseUniform   *PostAdminMappings201ApplicationJSONResponseUniform

	Type PostAdminMappings201ApplicationJSONResponseType
}

func CreatePostAdminMappings201ApplicationJSONResponsePostAdminMappings201ApplicationJSONResponseLogNormal(postAdminMappings201ApplicationJSONResponseLogNormal PostAdminMappings201ApplicationJSONResponseLogNormal) PostAdminMappings201ApplicationJSONResponse {
	typ := PostAdminMappings201ApplicationJSONResponseTypePostAdminMappings201ApplicationJSONResponseLogNormal

	return PostAdminMappings201ApplicationJSONResponse{
		PostAdminMappings201ApplicationJSONResponseLogNormal: &postAdminMappings201ApplicationJSONResponseLogNormal,
		Type: typ,
	}
}

func CreatePostAdminMappings201ApplicationJSONResponsePostAdminMappings201ApplicationJSONResponseUniform(postAdminMappings201ApplicationJSONResponseUniform PostAdminMappings201ApplicationJSONResponseUniform) PostAdminMappings201ApplicationJSONResponse {
	typ := PostAdminMappings201ApplicationJSONResponseTypePostAdminMappings201ApplicationJSONResponseUniform

	return PostAdminMappings201ApplicationJSONResponse{
		PostAdminMappings201ApplicationJSONResponseUniform: &postAdminMappings201ApplicationJSONResponseUniform,
		Type: typ,
	}
}

func (u *PostAdminMappings201ApplicationJSONResponse) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	postAdminMappings201ApplicationJSONResponseLogNormal := new(PostAdminMappings201ApplicationJSONResponseLogNormal)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&postAdminMappings201ApplicationJSONResponseLogNormal); err == nil {
		u.PostAdminMappings201ApplicationJSONResponseLogNormal = postAdminMappings201ApplicationJSONResponseLogNormal
		u.Type = PostAdminMappings201ApplicationJSONResponseTypePostAdminMappings201ApplicationJSONResponseLogNormal
		return nil
	}

	postAdminMappings201ApplicationJSONResponseUniform := new(PostAdminMappings201ApplicationJSONResponseUniform)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&postAdminMappings201ApplicationJSONResponseUniform); err == nil {
		u.PostAdminMappings201ApplicationJSONResponseUniform = postAdminMappings201ApplicationJSONResponseUniform
		u.Type = PostAdminMappings201ApplicationJSONResponseTypePostAdminMappings201ApplicationJSONResponseUniform
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u PostAdminMappings201ApplicationJSONResponse) MarshalJSON() ([]byte, error) {
	if u.PostAdminMappings201ApplicationJSONResponseLogNormal != nil {
		return json.Marshal(u.PostAdminMappings201ApplicationJSONResponseLogNormal)
	}

	if u.PostAdminMappings201ApplicationJSONResponseUniform != nil {
		return json.Marshal(u.PostAdminMappings201ApplicationJSONResponseUniform)
	}

	return nil, nil
}

// PostAdminMappings201ApplicationJSON - The stub mapping
type PostAdminMappings201ApplicationJSON struct {
	// This stub mapping's unique identifier
	ID *string `json:"id,omitempty"`
	// Arbitrary metadata to be used for e.g. tagging, documentation. Can also be used to find and remove stubs.
	Metadata map[string]interface{} `json:"metadata,omitempty"`
	// The stub mapping's name
	Name *string `json:"name,omitempty"`
	// The new state for the scenario to be updated to after this stub is served.
	NewScenarioState *string `json:"newScenarioState,omitempty"`
	// Indicates that the stub mapping should be persisted immediately on create/update/delete and survive resets to default.
	Persistent *bool `json:"persistent,omitempty"`
	// A map of the names of post serve action extensions to trigger and their parameters.
	PostServeActions map[string]interface{} `json:"postServeActions,omitempty"`
	// This stub mapping's priority relative to others. 1 is highest.
	Priority *int64                                      `json:"priority,omitempty"`
	Request  *PostAdminMappings201ApplicationJSONRequest `json:"request,omitempty"`
	// The required state of the scenario in order for this stub to be matched.
	RequiredScenarioState *string                                      `json:"requiredScenarioState,omitempty"`
	Response              *PostAdminMappings201ApplicationJSONResponse `json:"response,omitempty"`
	// The name of the scenario that this stub mapping is part of
	ScenarioName *string `json:"scenarioName,omitempty"`
	// Alias for the id
	UUID *string `json:"uuid,omitempty"`
}

type PostAdminMappingsResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// The stub mapping
	PostAdminMappings201ApplicationJSONObject *PostAdminMappings201ApplicationJSON
}
