/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { ExclusionRule } from "./exclusionrule";
import { Expose, Transform, Type } from "class-transformer";

export enum OfferAvailabilityEnum {
  Available = "Available",
  ComingSoon = "ComingSoon",
}

export enum OfferDeliveryTypeEnum {
  Stream = "Stream",
  Download = "Download",
  StreamOrDownload = "StreamOrDownload",
  ProgressiveDownload = "ProgressiveDownload",
  None = "None",
}

export enum OfferOwnershipEnum {
  Subscription = "Subscription",
  Free = "Free",
  Rent = "Rent",
  Own = "Own",
  None = "None",
}

export enum OfferResolutionEnum {
  Sd = "SD",
  Hd720 = "HD-720",
  Hd1080 = "HD-1080",
  Hd4K = "HD-4K",
  External = "External",
  Unknown = "Unknown",
}

/**
 * The base type for both Offer and Entitlement.
 */
export class Offer extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "availability" })
  availability: OfferAvailabilityEnum;

  /**
   * A map of custom fields defined by a curator for an offer.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "customFields" })
  customFields?: Record<string, any>;

  @SpeakeasyMetadata()
  @Expose({ name: "deliveryType" })
  deliveryType: OfferDeliveryTypeEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "endDate" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  endDate?: Date;

  /**
   * Any specific playback exclusion rules.
   */
  @SpeakeasyMetadata({ elemType: ExclusionRule })
  @Expose({ name: "exclusionRules" })
  @Type(() => ExclusionRule)
  exclusionRules?: ExclusionRule[];

  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id?: string;

  /**
   * The maximum number of allowed downloads.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "maxDownloads" })
  maxDownloads?: number;

  /**
   * The maximum number of allowed plays.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "maxPlays" })
  maxPlays?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "ownership" })
  ownership: OfferOwnershipEnum;

  /**
   * The length of time in minutes which the rental will last once played for the first time.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "playPeriod" })
  playPeriod?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "price" })
  price: number;

  /**
   * The length of time in minutes which the rental will last once purchased.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "rentalPeriod" })
  rentalPeriod?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "resolution" })
  resolution: OfferResolutionEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "scopes" })
  scopes: string[];

  @SpeakeasyMetadata()
  @Expose({ name: "startDate" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  startDate?: Date;

  /**
   * The code of the subscription this offer is offered under, if any.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "subscriptionCode" })
  subscriptionCode?: string;
}
