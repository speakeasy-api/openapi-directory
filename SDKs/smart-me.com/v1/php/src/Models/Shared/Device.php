<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Shared;


/**
 * Device - Container Class for the Web API
 * 
 * @package OpenAPI\OpenAPI\Models\Shared
 * @access public
 */
class Device
{
    /**
     * The Actvie Power or current flow rate
     * 
     * @var ?float $activePower
     */
	#[\JMS\Serializer\Annotation\SerializedName('ActivePower')]
    #[\JMS\Serializer\Annotation\Type('float')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?float $activePower = null;
    
    /**
     * The Actvie Power Phase L1
     * 
     * @var ?float $activePowerL1
     */
	#[\JMS\Serializer\Annotation\SerializedName('ActivePowerL1')]
    #[\JMS\Serializer\Annotation\Type('float')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?float $activePowerL1 = null;
    
    /**
     * The Actvie Power Phase L2
     * 
     * @var ?float $activePowerL2
     */
	#[\JMS\Serializer\Annotation\SerializedName('ActivePowerL2')]
    #[\JMS\Serializer\Annotation\Type('float')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?float $activePowerL2 = null;
    
    /**
     * The Actvie Power Phase L3
     * 
     * @var ?float $activePowerL3
     */
	#[\JMS\Serializer\Annotation\SerializedName('ActivePowerL3')]
    #[\JMS\Serializer\Annotation\Type('float')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?float $activePowerL3 = null;
    
    /**
     * The Unit of the Active Power Value
     * 
     * @var ?string $activePowerUnit
     */
	#[\JMS\Serializer\Annotation\SerializedName('ActivePowerUnit')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $activePowerUnit = null;
    
    /**
     * The Number of the Active Tariff
     * 
     * @var ?int $activeTariff
     */
	#[\JMS\Serializer\Annotation\SerializedName('ActiveTariff')]
    #[\JMS\Serializer\Annotation\Type('int')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?int $activeTariff = null;
    
    /**
     * An additional Meter serial number. e.g. the number of a meter a smart-me device is connected to.
     * 
     * @var ?string $additionalMeterSerialNumber
     */
	#[\JMS\Serializer\Annotation\SerializedName('AdditionalMeterSerialNumber')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $additionalMeterSerialNumber = null;
    
    /**
     * The analog output number 1 (PWM signal) (0 - 32183)
     * 
     * @var ?int $analogOutput1
     */
	#[\JMS\Serializer\Annotation\SerializedName('AnalogOutput1')]
    #[\JMS\Serializer\Annotation\Type('int')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?int $analogOutput1 = null;
    
    /**
     * The analog output number 2 (PWM signal) (0 - 32183)
     * 
     * @var ?int $analogOutput2
     */
	#[\JMS\Serializer\Annotation\SerializedName('AnalogOutput2')]
    #[\JMS\Serializer\Annotation\Type('int')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?int $analogOutput2 = null;
    
    /**
     * The state of a pico charging station. (Only available for pico charging stations)
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\DeviceChargingStationStateEnum $chargingStationState
     */
	#[\JMS\Serializer\Annotation\SerializedName('ChargingStationState')]
    #[\JMS\Serializer\Annotation\Type('enum<OpenAPI\OpenAPI\Models\Shared\DeviceChargingStationStateEnum>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?DeviceChargingStationStateEnum $chargingStationState = null;
    
    /**
     * The Meter Counter Reading (Total Energy used)
     * 
     * @var ?float $counterReading
     */
	#[\JMS\Serializer\Annotation\SerializedName('CounterReading')]
    #[\JMS\Serializer\Annotation\Type('float')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?float $counterReading = null;
    
    /**
     * The Meter Counter Reading only export
     * 
     * @var ?float $counterReadingExport
     */
	#[\JMS\Serializer\Annotation\SerializedName('CounterReadingExport')]
    #[\JMS\Serializer\Annotation\Type('float')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?float $counterReadingExport = null;
    
    /**
     * The Meter Counter Reading only import
     * 
     * @var ?float $counterReadingImport
     */
	#[\JMS\Serializer\Annotation\SerializedName('CounterReadingImport')]
    #[\JMS\Serializer\Annotation\Type('float')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?float $counterReadingImport = null;
    
    /**
     * The Meter Counter Reading Tariff 1
     * 
     * @var ?float $counterReadingT1
     */
	#[\JMS\Serializer\Annotation\SerializedName('CounterReadingT1')]
    #[\JMS\Serializer\Annotation\Type('float')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?float $counterReadingT1 = null;
    
    /**
     * The Meter Counter Reading Tariff 2
     * 
     * @var ?float $counterReadingT2
     */
	#[\JMS\Serializer\Annotation\SerializedName('CounterReadingT2')]
    #[\JMS\Serializer\Annotation\Type('float')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?float $counterReadingT2 = null;
    
    /**
     * The Meter Counter Reading Tariff 3
     * 
     * @var ?float $counterReadingT3
     */
	#[\JMS\Serializer\Annotation\SerializedName('CounterReadingT3')]
    #[\JMS\Serializer\Annotation\Type('float')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?float $counterReadingT3 = null;
    
    /**
     * The Meter Counter Reading Tariff 4
     * 
     * @var ?float $counterReadingT4
     */
	#[\JMS\Serializer\Annotation\SerializedName('CounterReadingT4')]
    #[\JMS\Serializer\Annotation\Type('float')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?float $counterReadingT4 = null;
    
    /**
     * The Unit of the Counter Reading
     * 
     * @var ?string $counterReadingUnit
     */
	#[\JMS\Serializer\Annotation\SerializedName('CounterReadingUnit')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $counterReadingUnit = null;
    
    /**
     * The Current (in A)
     * 
     * @var ?float $current
     */
	#[\JMS\Serializer\Annotation\SerializedName('Current')]
    #[\JMS\Serializer\Annotation\Type('float')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?float $current = null;
    
    /**
     * The Current Phase L1 (in A)
     * 
     * @var ?float $currentL1
     */
	#[\JMS\Serializer\Annotation\SerializedName('CurrentL1')]
    #[\JMS\Serializer\Annotation\Type('float')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?float $currentL1 = null;
    
    /**
     * The Current Phase L2 (in A)
     * 
     * @var ?float $currentL2
     */
	#[\JMS\Serializer\Annotation\SerializedName('CurrentL2')]
    #[\JMS\Serializer\Annotation\Type('float')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?float $currentL2 = null;
    
    /**
     * The Current Phase L3 (in A)
     * 
     * @var ?float $currentL3
     */
	#[\JMS\Serializer\Annotation\SerializedName('CurrentL3')]
    #[\JMS\Serializer\Annotation\Type('float')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?float $currentL3 = null;
    
    /**
     * The Energy Type of this device
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\DeviceDeviceEnergyTypeEnum $deviceEnergyType
     */
	#[\JMS\Serializer\Annotation\SerializedName('DeviceEnergyType')]
    #[\JMS\Serializer\Annotation\Type('enum<OpenAPI\OpenAPI\Models\Shared\DeviceDeviceEnergyTypeEnum>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?DeviceDeviceEnergyTypeEnum $deviceEnergyType = null;
    
    /**
     * The digital input number 1
     * 
     * @var ?bool $digitalInput1
     */
	#[\JMS\Serializer\Annotation\SerializedName('DigitalInput1')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $digitalInput1 = null;
    
    /**
     * The digital input number 2
     * 
     * @var ?bool $digitalInput2
     */
	#[\JMS\Serializer\Annotation\SerializedName('DigitalInput2')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $digitalInput2 = null;
    
    /**
     * The digital output number 1
     * 
     * @var ?bool $digitalOutput1
     */
	#[\JMS\Serializer\Annotation\SerializedName('DigitalOutput1')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $digitalOutput1 = null;
    
    /**
     * The digital output number 2
     * 
     * @var ?bool $digitalOutput2
     */
	#[\JMS\Serializer\Annotation\SerializedName('DigitalOutput2')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $digitalOutput2 = null;
    
    /**
     * The Family Type of the device.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\DeviceFamilyTypeEnum $familyType
     */
	#[\JMS\Serializer\Annotation\SerializedName('FamilyType')]
    #[\JMS\Serializer\Annotation\Type('enum<OpenAPI\OpenAPI\Models\Shared\DeviceFamilyTypeEnum>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?DeviceFamilyTypeEnum $familyType = null;
    
    /**
     * The current flow rate (e.g. m3/h)
     * 
     * @var ?float $flowRate
     */
	#[\JMS\Serializer\Annotation\SerializedName('FlowRate')]
    #[\JMS\Serializer\Annotation\Type('float')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?float $flowRate = null;
    
    /**
     * The ID of the device
     * 
     * @var ?string $id
     */
	#[\JMS\Serializer\Annotation\SerializedName('Id')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $id = null;
    
    /**
     * The sub meter type (e.g. warmwater or coldwater)
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\DeviceMeterSubTypeEnum $meterSubType
     */
	#[\JMS\Serializer\Annotation\SerializedName('MeterSubType')]
    #[\JMS\Serializer\Annotation\Type('enum<OpenAPI\OpenAPI\Models\Shared\DeviceMeterSubTypeEnum>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?DeviceMeterSubTypeEnum $meterSubType = null;
    
    /**
     * The Name of the Device
     * 
     * @var ?string $name
     */
	#[\JMS\Serializer\Annotation\SerializedName('Name')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $name = null;
    
    /**
     * The Power Factor (cos phi). Range: 0 - 1
     * 
     * @var ?float $powerFactor
     */
	#[\JMS\Serializer\Annotation\SerializedName('PowerFactor')]
    #[\JMS\Serializer\Annotation\Type('float')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?float $powerFactor = null;
    
    /**
     * The Power Factor (cos phi) Phase L1. Range: 0 - 1
     * 
     * @var ?float $powerFactorL1
     */
	#[\JMS\Serializer\Annotation\SerializedName('PowerFactorL1')]
    #[\JMS\Serializer\Annotation\Type('float')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?float $powerFactorL1 = null;
    
    /**
     * The Power Factor (cos phi) Phase L2. Range: 0 - 1
     * 
     * @var ?float $powerFactorL2
     */
	#[\JMS\Serializer\Annotation\SerializedName('PowerFactorL2')]
    #[\JMS\Serializer\Annotation\Type('float')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?float $powerFactorL2 = null;
    
    /**
     * The Power Factor (cos phi) Phase L3. Range: 0 - 1
     * 
     * @var ?float $powerFactorL3
     */
	#[\JMS\Serializer\Annotation\SerializedName('PowerFactorL3')]
    #[\JMS\Serializer\Annotation\Type('float')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?float $powerFactorL3 = null;
    
    /**
     * The Serial number
     * 
     * @var ?int $serial
     */
	#[\JMS\Serializer\Annotation\SerializedName('Serial')]
    #[\JMS\Serializer\Annotation\Type('int')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?int $serial = null;
    
    /**
     * Flag if the Switch is on on this device.
     * 
     * @var ?bool $switchOn
     */
	#[\JMS\Serializer\Annotation\SerializedName('SwitchOn')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $switchOn = null;
    
    /**
     * Flag if the Phase L1 is on on this device.
     * 
     * @var ?bool $switchPhaseL1On
     */
	#[\JMS\Serializer\Annotation\SerializedName('SwitchPhaseL1On')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $switchPhaseL1On = null;
    
    /**
     * Flag if the Phase L2 is on on this device.
     * 
     * @var ?bool $switchPhaseL2On
     */
	#[\JMS\Serializer\Annotation\SerializedName('SwitchPhaseL2On')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $switchPhaseL2On = null;
    
    /**
     * Flag if the Phase L3 is on on this device.
     * 
     * @var ?bool $switchPhaseL3On
     */
	#[\JMS\Serializer\Annotation\SerializedName('SwitchPhaseL3On')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $switchPhaseL3On = null;
    
    /**
     * The Temperature (in degree celsius)
     * 
     * @var ?float $temperature
     */
	#[\JMS\Serializer\Annotation\SerializedName('Temperature')]
    #[\JMS\Serializer\Annotation\Type('float')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?float $temperature = null;
    
    /**
     * Time of last successful connection the the smart-me Cloud.
     * 
     * @var ?\DateTime $valueDate
     */
	#[\JMS\Serializer\Annotation\SerializedName('ValueDate')]
    #[\JMS\Serializer\Annotation\Type("DateTime<'Y-m-d\TH:i:s.up'>")]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?\DateTime $valueDate = null;
    
    /**
     * The Voltage (in V)
     * 
     * @var ?float $voltage
     */
	#[\JMS\Serializer\Annotation\SerializedName('Voltage')]
    #[\JMS\Serializer\Annotation\Type('float')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?float $voltage = null;
    
    /**
     * The Voltage Phase L1 (in V)
     * 
     * @var ?float $voltageL1
     */
	#[\JMS\Serializer\Annotation\SerializedName('VoltageL1')]
    #[\JMS\Serializer\Annotation\Type('float')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?float $voltageL1 = null;
    
    /**
     * The Voltage Phase L2 (in V)
     * 
     * @var ?float $voltageL2
     */
	#[\JMS\Serializer\Annotation\SerializedName('VoltageL2')]
    #[\JMS\Serializer\Annotation\Type('float')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?float $voltageL2 = null;
    
    /**
     * The Voltage Phase L3 (in V)
     * 
     * @var ?float $voltageL3
     */
	#[\JMS\Serializer\Annotation\SerializedName('VoltageL3')]
    #[\JMS\Serializer\Annotation\Type('float')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?float $voltageL3 = null;
    
	public function __construct()
	{
		$this->activePower = null;
		$this->activePowerL1 = null;
		$this->activePowerL2 = null;
		$this->activePowerL3 = null;
		$this->activePowerUnit = null;
		$this->activeTariff = null;
		$this->additionalMeterSerialNumber = null;
		$this->analogOutput1 = null;
		$this->analogOutput2 = null;
		$this->chargingStationState = null;
		$this->counterReading = null;
		$this->counterReadingExport = null;
		$this->counterReadingImport = null;
		$this->counterReadingT1 = null;
		$this->counterReadingT2 = null;
		$this->counterReadingT3 = null;
		$this->counterReadingT4 = null;
		$this->counterReadingUnit = null;
		$this->current = null;
		$this->currentL1 = null;
		$this->currentL2 = null;
		$this->currentL3 = null;
		$this->deviceEnergyType = null;
		$this->digitalInput1 = null;
		$this->digitalInput2 = null;
		$this->digitalOutput1 = null;
		$this->digitalOutput2 = null;
		$this->familyType = null;
		$this->flowRate = null;
		$this->id = null;
		$this->meterSubType = null;
		$this->name = null;
		$this->powerFactor = null;
		$this->powerFactorL1 = null;
		$this->powerFactorL2 = null;
		$this->powerFactorL3 = null;
		$this->serial = null;
		$this->switchOn = null;
		$this->switchPhaseL1On = null;
		$this->switchPhaseL2On = null;
		$this->switchPhaseL3On = null;
		$this->temperature = null;
		$this->valueDate = null;
		$this->voltage = null;
		$this->voltageL1 = null;
		$this->voltageL2 = null;
		$this->voltageL3 = null;
	}
}
