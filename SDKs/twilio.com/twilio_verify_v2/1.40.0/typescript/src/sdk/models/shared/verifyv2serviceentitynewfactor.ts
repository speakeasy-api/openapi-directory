/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { NewFactorEnumFactorStatusesEnum } from "./newfactorenumfactorstatusesenum";
import { NewFactorEnumFactorTypesEnum } from "./newfactorenumfactortypesenum";
import { Expose, Transform } from "class-transformer";

/**
 * Created
 */
export class VerifyV2ServiceEntityNewFactor extends SpeakeasyBase {
  /**
   * The unique SID identifier of the Account.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "account_sid" })
  accountSid?: string;

  /**
   * Contains the `factor_type` specific secret and metadata.
   *
   * @remarks
   * For push, this is `binding.public_key` and `binding.alg`.
   * For totp, this is `binding.secret` and `binding.uri`. The `binding.uri` property is generated following the [google authenticator key URI format](https://github.com/google/google-authenticator/wiki/Key-Uri-Format), and `Factor.friendly_name` is used for the “accountname” value and `Service.friendly_name` or `Service.totp.issuer` is used for the `issuer` value.
   *
   *
   * The Binding property is ONLY returned upon Factor creation.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "binding" })
  binding?: any;

  /**
   * An object that contains configurations specific to a `factor_type`.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "config" })
  config?: any;

  /**
   * The date that this Factor was created, given in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "date_created" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  dateCreated?: Date;

  /**
   * The date that this Factor was updated, given in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "date_updated" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  dateUpdated?: Date;

  /**
   * The unique SID identifier of the Entity.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "entity_sid" })
  entitySid?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "factor_type" })
  factorType?: NewFactorEnumFactorTypesEnum;

  /**
   * The friendly name of this Factor. This can be any string up to 64 characters, meant for humans to distinguish between Factors.
   *
   * @remarks
   * For `factor_type` `push`, this could be a device name.
   * For `factor_type` `totp`, this value is used as the “account name” in constructing the `binding.uri` property.
   * At the same time, we recommend avoiding providing PII.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "friendly_name" })
  friendlyName?: string;

  /**
   * Customer unique identity for the Entity owner of the Factor. This identifier should be immutable, not PII, length between 8 and 64 characters, and generated by your external system, such as your user's UUID, GUID, or SID. It can only contain dash (-) separated alphanumeric characters.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "identity" })
  identity?: string;

  /**
   * Custom metadata associated with the factor. This is added by the Device/SDK directly to allow for the inclusion of device information. It must be a stringified JSON with only strings values eg. `{"os": "Android"}`. Can be up to 1024 characters in length.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "metadata" })
  metadata?: any;

  /**
   * The unique SID identifier of the Service.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "service_sid" })
  serviceSid?: string;

  /**
   * A 34 character string that uniquely identifies this Factor.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "sid" })
  sid?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "status" })
  status?: NewFactorEnumFactorStatusesEnum;

  /**
   * The URL of this resource.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "url" })
  url?: string;
}
