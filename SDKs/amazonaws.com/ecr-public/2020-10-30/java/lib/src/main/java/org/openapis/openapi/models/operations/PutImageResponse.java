/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import com.fasterxml.jackson.annotation.JsonProperty;
import java.net.http.HttpResponse;

public class PutImageResponse {
    
    public String contentType;

    public PutImageResponse withContentType(String contentType) {
        this.contentType = contentType;
        return this;
    }
    
    /**
     * ImageAlreadyExistsException
     */
    
    public Object imageAlreadyExistsException;

    public PutImageResponse withImageAlreadyExistsException(Object imageAlreadyExistsException) {
        this.imageAlreadyExistsException = imageAlreadyExistsException;
        return this;
    }
    
    /**
     * ImageDigestDoesNotMatchException
     */
    
    public Object imageDigestDoesNotMatchException;

    public PutImageResponse withImageDigestDoesNotMatchException(Object imageDigestDoesNotMatchException) {
        this.imageDigestDoesNotMatchException = imageDigestDoesNotMatchException;
        return this;
    }
    
    /**
     * ImageTagAlreadyExistsException
     */
    
    public Object imageTagAlreadyExistsException;

    public PutImageResponse withImageTagAlreadyExistsException(Object imageTagAlreadyExistsException) {
        this.imageTagAlreadyExistsException = imageTagAlreadyExistsException;
        return this;
    }
    
    /**
     * InvalidParameterException
     */
    
    public Object invalidParameterException;

    public PutImageResponse withInvalidParameterException(Object invalidParameterException) {
        this.invalidParameterException = invalidParameterException;
        return this;
    }
    
    /**
     * LayersNotFoundException
     */
    
    public Object layersNotFoundException;

    public PutImageResponse withLayersNotFoundException(Object layersNotFoundException) {
        this.layersNotFoundException = layersNotFoundException;
        return this;
    }
    
    /**
     * LimitExceededException
     */
    
    public Object limitExceededException;

    public PutImageResponse withLimitExceededException(Object limitExceededException) {
        this.limitExceededException = limitExceededException;
        return this;
    }
    
    /**
     * Success
     */
    
    public org.openapis.openapi.models.shared.PutImageResponse putImageResponse;

    public PutImageResponse withPutImageResponse(org.openapis.openapi.models.shared.PutImageResponse putImageResponse) {
        this.putImageResponse = putImageResponse;
        return this;
    }
    
    /**
     * ReferencedImagesNotFoundException
     */
    
    public Object referencedImagesNotFoundException;

    public PutImageResponse withReferencedImagesNotFoundException(Object referencedImagesNotFoundException) {
        this.referencedImagesNotFoundException = referencedImagesNotFoundException;
        return this;
    }
    
    /**
     * RegistryNotFoundException
     */
    
    public Object registryNotFoundException;

    public PutImageResponse withRegistryNotFoundException(Object registryNotFoundException) {
        this.registryNotFoundException = registryNotFoundException;
        return this;
    }
    
    /**
     * RepositoryNotFoundException
     */
    
    public Object repositoryNotFoundException;

    public PutImageResponse withRepositoryNotFoundException(Object repositoryNotFoundException) {
        this.repositoryNotFoundException = repositoryNotFoundException;
        return this;
    }
    
    /**
     * ServerException
     */
    
    public Object serverException;

    public PutImageResponse withServerException(Object serverException) {
        this.serverException = serverException;
        return this;
    }
    
    
    public Integer statusCode;

    public PutImageResponse withStatusCode(Integer statusCode) {
        this.statusCode = statusCode;
        return this;
    }
    
    
    public HttpResponse<byte[]> rawResponse;

    public PutImageResponse withRawResponse(HttpResponse<byte[]> rawResponse) {
        this.rawResponse = rawResponse;
        return this;
    }
    
    /**
     * UnsupportedCommandException
     */
    
    public Object unsupportedCommandException;

    public PutImageResponse withUnsupportedCommandException(Object unsupportedCommandException) {
        this.unsupportedCommandException = unsupportedCommandException;
        return this;
    }
    
    public PutImageResponse(@JsonProperty("ContentType") String contentType, @JsonProperty("StatusCode") Integer statusCode) {
        this.contentType = contentType;
        this.statusCode = statusCode;
  }
}
