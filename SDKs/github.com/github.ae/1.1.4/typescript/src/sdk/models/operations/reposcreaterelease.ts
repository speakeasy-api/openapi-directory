/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
import { Expose } from "class-transformer";

export class ReposCreateReleaseRequestBody extends SpeakeasyBase {
  /**
   * Text describing the contents of the tag.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "body" })
  body?: string;

  /**
   * `true` to create a draft (unpublished) release, `false` to create a published one.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "draft" })
  draft?: boolean;

  /**
   * The name of the release.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name?: string;

  /**
   * `true` to identify the release as a prerelease. `false` to identify the release as a full release.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "prerelease" })
  prerelease?: boolean;

  /**
   * The name of the tag.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "tag_name" })
  tagName: string;

  /**
   * Specifies the commitish value that determines where the Git tag is created from. Can be any branch or commit SHA. Unused if the Git tag already exists. Default: the repository's default branch (usually `master`).
   */
  @SpeakeasyMetadata()
  @Expose({ name: "target_commitish" })
  targetCommitish?: string;
}

export class ReposCreateReleaseRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  requestBody: ReposCreateReleaseRequestBody;

  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=owner",
  })
  owner: string;

  /**
   * The name of the repository. The name is not case sensitive.
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=repo",
  })
  repo: string;
}

export class ReposCreateReleaseResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  headers?: Record<string, string[]>;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * Response
   */
  @SpeakeasyMetadata()
  release?: shared.Release;

  /**
   * Validation failed, or the endpoint has been spammed.
   */
  @SpeakeasyMetadata()
  validationError?: shared.ValidationError;
}
