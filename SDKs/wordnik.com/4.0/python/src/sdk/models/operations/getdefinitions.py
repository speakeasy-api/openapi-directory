"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from enum import Enum
from typing import Optional

class GetDefinitionsIncludeTagsEnum(str, Enum):
    r"""Return a closed set of XML tags in response"""
    FALSE = 'false'
    TRUE = 'true'

class GetDefinitionsPartOfSpeechEnum(str, Enum):
    r"""CSV list of part-of-speech types"""
    NOUN = 'noun'
    ADJECTIVE = 'adjective'
    VERB = 'verb'
    ADVERB = 'adverb'
    INTERJECTION = 'interjection'
    PRONOUN = 'pronoun'
    PREPOSITION = 'preposition'
    ABBREVIATION = 'abbreviation'
    AFFIX = 'affix'
    ARTICLE = 'article'
    AUXILIARY_VERB = 'auxiliary-verb'
    CONJUNCTION = 'conjunction'
    DEFINITE_ARTICLE = 'definite-article'
    FAMILY_NAME = 'family-name'
    GIVEN_NAME = 'given-name'
    IDIOM = 'idiom'
    IMPERATIVE = 'imperative'
    NOUN_PLURAL = 'noun-plural'
    NOUN_POSESSIVE = 'noun-posessive'
    PAST_PARTICIPLE = 'past-participle'
    PHRASAL_PREFIX = 'phrasal-prefix'
    PROPER_NOUN = 'proper-noun'
    PROPER_NOUN_PLURAL = 'proper-noun-plural'
    PROPER_NOUN_POSESSIVE = 'proper-noun-posessive'
    SUFFIX = 'suffix'
    VERB_INTRANSITIVE = 'verb-intransitive'
    VERB_TRANSITIVE = 'verb-transitive'

class GetDefinitionsSourceDictionariesEnum(str, Enum):
    r"""Source dictionary to return definitions from.  If 'all' is received, results are returned from all sources. If multiple values are received (e.g. 'century,wiktionary'), results are returned from the first specified dictionary that has definitions. If left blank, results are returned from the first dictionary that has definitions. By default, dictionaries are searched in this order: ahd-5, wiktionary, webster, century, wordnet"""
    ALL = 'all'
    AHD_5 = 'ahd-5'
    CENTURY = 'century'
    WIKTIONARY = 'wiktionary'
    WEBSTER = 'webster'
    WORDNET = 'wordnet'

class GetDefinitionsUseCanonicalEnum(str, Enum):
    r"""If true will try to return the correct word root ('cats' -> 'cat'). If false returns exactly what was requested."""
    FALSE = 'false'
    TRUE = 'true'


@dataclasses.dataclass
class GetDefinitionsRequest:
    
    word: str = dataclasses.field(metadata={'path_param': { 'field_name': 'word', 'style': 'simple', 'explode': False }})
    r"""Word to return definitions for"""  
    include_related: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'includeRelated', 'style': 'form', 'explode': True }})
    r"""Return related words with definitions"""  
    include_tags: Optional[GetDefinitionsIncludeTagsEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'includeTags', 'style': 'form', 'explode': True }})
    r"""Return a closed set of XML tags in response"""  
    limit: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'limit', 'style': 'form', 'explode': True }})
    r"""Maximum number of results to return"""  
    part_of_speech: Optional[GetDefinitionsPartOfSpeechEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'partOfSpeech', 'style': 'form', 'explode': True }})
    r"""CSV list of part-of-speech types"""  
    source_dictionaries: Optional[GetDefinitionsSourceDictionariesEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'sourceDictionaries', 'style': 'form', 'explode': False }})
    r"""Source dictionary to return definitions from.  If 'all' is received, results are returned from all sources. If multiple values are received (e.g. 'century,wiktionary'), results are returned from the first specified dictionary that has definitions. If left blank, results are returned from the first dictionary that has definitions. By default, dictionaries are searched in this order: ahd-5, wiktionary, webster, century, wordnet"""  
    use_canonical: Optional[GetDefinitionsUseCanonicalEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'useCanonical', 'style': 'form', 'explode': True }})
    r"""If true will try to return the correct word root ('cats' -> 'cat'). If false returns exactly what was requested."""  
    

@dataclasses.dataclass
class GetDefinitionsResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    body: Optional[bytes] = dataclasses.field(default=None)  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    