"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Any, Optional

class Labels:
    r"""Print shipping labels for any of the top global carriers in minutesâ€”instead of weeks. Simply [connect your existing carrier accounts](https://www.shipengine.com/docs/carriers/setup/) in the API dashboard, and then [begin creating labels](https://www.shipengine.com/docs/shipping/use-a-carrier-service/).
    https://www.shipengine.com/docs/labels/create-a-label/ - Follow this quick start guide to create your first shipping label with ShipEngine
    """
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def create_label(self, request: shared.CreateLabelRequestBodyInput) -> operations.CreateLabelResponse:
        r"""Purchase Label
        Purchase and print a label for shipment
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v1/labels'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateLabelResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.CreateLabelResponseBodyOutput])
                res.create_label_response_body = out
        elif http_res.status_code in [400, 404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorResponseBody])
                res.error_response_body = out

        return res

    def create_label_from_rate(self, request: operations.CreateLabelFromRateRequest) -> operations.CreateLabelFromRateResponse:
        r"""Purchase Label with Rate ID
        When retrieving rates for shipments using the `/rates` endpoint, the returned information contains a `rate_id` property that can be used
        to generate a label without having to refill in the shipment information repeatedly.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.CreateLabelFromRateRequest, base_url, '/v1/labels/rates/{rate_id}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "create_label_from_rate_request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateLabelFromRateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.CreateLabelFromRateResponseBodyOutput])
                res.create_label_from_rate_response_body = out
        elif http_res.status_code in [400, 404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorResponseBody])
                res.error_response_body = out

        return res

    def create_label_from_shipment(self, request: operations.CreateLabelFromShipmentRequest) -> operations.CreateLabelFromShipmentResponse:
        r"""Purchase Label with Shipment ID
        Purchase a label using a shipment ID that has already been created with the desired address and
        package info.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.CreateLabelFromShipmentRequest, base_url, '/v1/labels/shipment/{shipment_id}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "create_label_from_shipment_request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateLabelFromShipmentResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.CreateLabelFromShipmentResponseBodyOutput])
                res.create_label_from_shipment_response_body = out
        elif http_res.status_code in [400, 404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorResponseBody])
                res.error_response_body = out

        return res

    def create_return_label(self, request: operations.CreateReturnLabelRequest) -> operations.CreateReturnLabelResponse:
        r"""Create a return label
        Create a return label
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.CreateReturnLabelRequest, base_url, '/v1/labels/{label_id}/return', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "create_return_label_request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateReturnLabelResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.CreateReturnLabelResponseBodyOutput])
                res.create_return_label_response_body = out
        elif http_res.status_code in [400, 404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorResponseBody])
                res.error_response_body = out

        return res

    def get_label_by_external_shipment_id(self, request: operations.GetLabelByExternalShipmentIDRequest) -> operations.GetLabelByExternalShipmentIDResponse:
        r"""Get Label By External Shipment ID
        Find a label by using the external shipment id that was used during label creation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetLabelByExternalShipmentIDRequest, base_url, '/v1/labels/external_shipment_id/{external_shipment_id}', request)
        
        query_params = utils.get_query_params(operations.GetLabelByExternalShipmentIDRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetLabelByExternalShipmentIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GetLabelByExternalShipmentIDResponseBodyOutput])
                res.get_label_by_external_shipment_id_response_body = out
        elif http_res.status_code in [400, 404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorResponseBody])
                res.error_response_body = out

        return res

    def get_label_by_id(self, request: operations.GetLabelByIDRequest) -> operations.GetLabelByIDResponse:
        r"""Get Label By ID
        Retrieve information for individual labels.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetLabelByIDRequest, base_url, '/v1/labels/{label_id}', request)
        
        query_params = utils.get_query_params(operations.GetLabelByIDRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetLabelByIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GetLabelByIDResponseBodyOutput])
                res.get_label_by_id_response_body = out
        elif http_res.status_code in [400, 404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorResponseBody])
                res.error_response_body = out

        return res

    def get_tracking_log_from_label(self, request: operations.GetTrackingLogFromLabelRequest) -> operations.GetTrackingLogFromLabelResponse:
        r"""Get Label Tracking Information
        Retrieve the label's tracking information
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetTrackingLogFromLabelRequest, base_url, '/v1/labels/{label_id}/track', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetTrackingLogFromLabelResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GetTrackingLogFromLabelResponseBody])
                res.get_tracking_log_from_label_response_body = out
        elif http_res.status_code in [400, 404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorResponseBody])
                res.error_response_body = out

        return res

    def list_labels(self, request: operations.ListLabelsRequest) -> operations.ListLabelsResponse:
        r"""List labels
        This endpoint returns a list of labels that you've [created](https://www.shipengine.com/docs/labels/create-a-label/). You can optionally filter the results as well as control their sort order and the number of results returned at a time.
        
        By default, all labels are returned, 25 at a time, starting with the most recently created ones.  You can combine multiple filter options to narrow-down the results.  For example, if you only want to get your UPS labels for your east coast warehouse you could query by both `warehouse_id` and `carrier_id`
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v1/labels'
        
        query_params = utils.get_query_params(operations.ListLabelsRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ListLabelsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.list_labels_response_body = out
        elif http_res.status_code in [400, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorResponseBody])
                res.error_response_body = out

        return res

    def void_label(self, request: operations.VoidLabelRequest) -> operations.VoidLabelResponse:
        r"""Void a Label By ID
        Void a label by ID to get a refund.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.VoidLabelRequest, base_url, '/v1/labels/{label_id}/void', request)
        
        
        client = self._security_client
        
        http_res = client.request('PUT', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.VoidLabelResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.VoidLabelResponseBody])
                res.void_label_response_body = out
        elif http_res.status_code in [400, 404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorResponseBody])
                res.error_response_body = out

        return res

    