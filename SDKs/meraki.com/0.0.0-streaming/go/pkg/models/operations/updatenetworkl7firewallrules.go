// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// UpdateNetworkL7FirewallRulesRequestBodyRulesPolicyEnum - 'Deny' traffic specified by this rule
type UpdateNetworkL7FirewallRulesRequestBodyRulesPolicyEnum string

const (
	UpdateNetworkL7FirewallRulesRequestBodyRulesPolicyEnumDeny UpdateNetworkL7FirewallRulesRequestBodyRulesPolicyEnum = "deny"
)

func (e *UpdateNetworkL7FirewallRulesRequestBodyRulesPolicyEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "deny":
		*e = UpdateNetworkL7FirewallRulesRequestBodyRulesPolicyEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateNetworkL7FirewallRulesRequestBodyRulesPolicyEnum: %s", s)
	}
}

// UpdateNetworkL7FirewallRulesRequestBodyRulesTypeEnum - Type of the L7 rule. One of: 'application', 'applicationCategory', 'host', 'port', 'ipRange'
type UpdateNetworkL7FirewallRulesRequestBodyRulesTypeEnum string

const (
	UpdateNetworkL7FirewallRulesRequestBodyRulesTypeEnumApplication         UpdateNetworkL7FirewallRulesRequestBodyRulesTypeEnum = "application"
	UpdateNetworkL7FirewallRulesRequestBodyRulesTypeEnumApplicationCategory UpdateNetworkL7FirewallRulesRequestBodyRulesTypeEnum = "applicationCategory"
	UpdateNetworkL7FirewallRulesRequestBodyRulesTypeEnumHost                UpdateNetworkL7FirewallRulesRequestBodyRulesTypeEnum = "host"
	UpdateNetworkL7FirewallRulesRequestBodyRulesTypeEnumIPRange             UpdateNetworkL7FirewallRulesRequestBodyRulesTypeEnum = "ipRange"
	UpdateNetworkL7FirewallRulesRequestBodyRulesTypeEnumPort                UpdateNetworkL7FirewallRulesRequestBodyRulesTypeEnum = "port"
)

func (e *UpdateNetworkL7FirewallRulesRequestBodyRulesTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "application":
		fallthrough
	case "applicationCategory":
		fallthrough
	case "host":
		fallthrough
	case "ipRange":
		fallthrough
	case "port":
		*e = UpdateNetworkL7FirewallRulesRequestBodyRulesTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateNetworkL7FirewallRulesRequestBodyRulesTypeEnum: %s", s)
	}
}

type UpdateNetworkL7FirewallRulesRequestBodyRules struct {
	// 'Deny' traffic specified by this rule
	Policy *UpdateNetworkL7FirewallRulesRequestBodyRulesPolicyEnum `json:"policy,omitempty"`
	// Type of the L7 rule. One of: 'application', 'applicationCategory', 'host', 'port', 'ipRange'
	Type *UpdateNetworkL7FirewallRulesRequestBodyRulesTypeEnum `json:"type,omitempty"`
	// The 'value' of what you want to block. Format of 'value' varies depending on type of the rule. The application categories and application ids can be retrieved from the the 'MX L7 application categories' endpoint. The countries follow the two-letter ISO 3166-1 alpha-2 format.
	Value *string `json:"value,omitempty"`
}

type UpdateNetworkL7FirewallRulesRequestBody struct {
	// An ordered array of the MX L7 firewall rules
	Rules []UpdateNetworkL7FirewallRulesRequestBodyRules `json:"rules,omitempty"`
}

type UpdateNetworkL7FirewallRulesRequest struct {
	RequestBody *UpdateNetworkL7FirewallRulesRequestBody `request:"mediaType=application/json"`
	NetworkID   string                                   `pathParam:"style=simple,explode=false,name=networkId"`
}

type UpdateNetworkL7FirewallRulesResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Successful operation
	UpdateNetworkL7FirewallRules200ApplicationJSONObject map[string]interface{}
}
