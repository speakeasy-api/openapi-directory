// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
	"time"
)

// GetAssetPropertyValueHistoryTimeOrderingEnum - <p>The chronological sorting order of the requested information.</p> <p>Default: <code>ASCENDING</code> </p>
type GetAssetPropertyValueHistoryTimeOrderingEnum string

const (
	GetAssetPropertyValueHistoryTimeOrderingEnumAscending  GetAssetPropertyValueHistoryTimeOrderingEnum = "ASCENDING"
	GetAssetPropertyValueHistoryTimeOrderingEnumDescending GetAssetPropertyValueHistoryTimeOrderingEnum = "DESCENDING"
)

func (e *GetAssetPropertyValueHistoryTimeOrderingEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "ASCENDING":
		fallthrough
	case "DESCENDING":
		*e = GetAssetPropertyValueHistoryTimeOrderingEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetAssetPropertyValueHistoryTimeOrderingEnum: %s", s)
	}
}

type GetAssetPropertyValueHistoryQueryParams struct {
	// The ID of the asset.
	AssetID *string `queryParam:"style=form,explode=true,name=assetId"`
	// The inclusive end of the range from which to query historical data, expressed in seconds in Unix epoch time.
	EndDate *time.Time `queryParam:"style=form,explode=true,name=endDate"`
	// <p>The maximum number of results to return for each paginated request.</p> <p>Default: 100</p>
	MaxResults *int64 `queryParam:"style=form,explode=true,name=maxResults"`
	// The token to be used for the next set of paginated results.
	NextToken *string `queryParam:"style=form,explode=true,name=nextToken"`
	// The alias that identifies the property, such as an OPC-UA server data stream path (for example, <code>/company/windfarm/3/turbine/7/temperature</code>). For more information, see <a href="https://docs.aws.amazon.com/iot-sitewise/latest/userguide/connect-data-streams.html">Mapping industrial data streams to asset properties</a> in the <i>IoT SiteWise User Guide</i>.
	PropertyAlias *string `queryParam:"style=form,explode=true,name=propertyAlias"`
	// The ID of the asset property.
	PropertyID *string `queryParam:"style=form,explode=true,name=propertyId"`
	// The quality by which to filter asset data.
	Qualities []shared.QualityEnum `queryParam:"style=form,explode=true,name=qualities"`
	// The exclusive start of the range from which to query historical data, expressed in seconds in Unix epoch time.
	StartDate *time.Time `queryParam:"style=form,explode=true,name=startDate"`
	// <p>The chronological sorting order of the requested information.</p> <p>Default: <code>ASCENDING</code> </p>
	TimeOrdering *GetAssetPropertyValueHistoryTimeOrderingEnum `queryParam:"style=form,explode=true,name=timeOrdering"`
}

type GetAssetPropertyValueHistoryHeaders struct {
	XAmzAlgorithm     *string `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
}

type GetAssetPropertyValueHistoryRequest struct {
	QueryParams GetAssetPropertyValueHistoryQueryParams
	Headers     GetAssetPropertyValueHistoryHeaders
}

type GetAssetPropertyValueHistoryResponse struct {
	ContentType string
	// Success
	GetAssetPropertyValueHistoryResponse *shared.GetAssetPropertyValueHistoryResponse
	// InternalFailureException
	InternalFailureException interface{}
	// InvalidRequestException
	InvalidRequestException interface{}
	// ServiceUnavailableException
	ServiceUnavailableException interface{}
	StatusCode                  int
	RawResponse                 *http.Response
	// ResourceNotFoundException
	ResourceNotFoundException interface{}
	// ThrottlingException
	ThrottlingException interface{}
}
