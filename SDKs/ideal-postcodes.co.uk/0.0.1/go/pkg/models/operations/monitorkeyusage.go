// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"net/http"
	"openapi/pkg/models/shared"
)

type MonitorKeyUsageSecurity struct {
	APIKey    shared.SchemeAPIKey    `security:"scheme,type=apiKey,subtype=query"`
	UserToken shared.SchemeUserToken `security:"scheme,type=apiKey,subtype=query"`
}

type MonitorKeyUsagePathParams struct {
	Key string `pathParam:"style=simple,explode=false,name=key"`
}

type MonitorKeyUsageQueryParams struct {
	// An end date/time in the form of a UNIX Timestamp in milliseconds, e.g. `1418556452651`. If no end time is provided, the current time will be used.
	End *int `queryParam:"style=form,explode=true,name=end"`
	// Sublicensed keys only. This will restrict the analysed dataset to a specific licensee.
	Licensee *string `queryParam:"style=form,explode=true,name=licensee"`
	// A start date/time in the form of a UNIX Timestamp in milliseconds, e.g. `1418556452651`. If no start time is provided, the start time will be assigned to a time 21 days prior to the end time.
	Start *int `queryParam:"style=form,explode=true,name=start"`
	// An comma separated list of tags you wish to query for. This is useful if you want to specify the circumstances in which the request was made. If multiple tags are specified, the analysed dataset will only comprise of requests for which all the tags are satisfied - i.e. searching `foo,bar` will only query requests which tagged both `'foo'` and `'bar'`.
	Tags *string `queryParam:"style=form,explode=true,name=tags"`
}

type MonitorKeyUsageRequest struct {
	PathParams  MonitorKeyUsagePathParams
	QueryParams MonitorKeyUsageQueryParams
	Security    MonitorKeyUsageSecurity
}

type MonitorKeyUsageResponse struct {
	ContentType string
	// Bad request
	ErrorResponseSchema *shared.ErrorResponseSchema
	// Success
	KeyUsageResponseSchema *shared.KeyUsageResponseSchema
	StatusCode             int
	RawResponse            *http.Response
}
