<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Groups 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Count the groups associated to the user.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GroupsCountRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GroupsCountResponse
     */
	public function groupsCount(
        \OpenAPI\OpenAPI\Models\Operations\GroupsCountRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GroupsCountResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/groups/count');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GroupsCountRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GroupsCountResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiCoreResponsesCountResponce = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApiCoreResponsesCountResponce', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'text/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiCoreResponsesCountResponce = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApiCoreResponsesCountResponce', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'application/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
            if (Utils\Utils::matchContentType($contentType, 'text/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Delete group specified by id
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GroupsDeleteRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GroupsDeleteResponse
     */
	public function groupsDelete(
        \OpenAPI\OpenAPI\Models\Operations\GroupsDeleteRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GroupsDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/groups/{id}', \OpenAPI\OpenAPI\Models\Operations\GroupsDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GroupsDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiCoreResponsesEntityUriSystemInt64 = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApiCoreResponsesEntityUriSystemInt64', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'text/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiCoreResponsesEntityUriSystemInt64 = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApiCoreResponsesEntityUriSystemInt64', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'application/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
            if (Utils\Utils::matchContentType($contentType, 'text/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * List of all the groups associated to the user.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GroupsGetRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GroupsGetResponse
     */
	public function groupsGet(
        \OpenAPI\OpenAPI\Models\Operations\GroupsGetRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GroupsGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/groups');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GroupsGetRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GroupsGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiCoreResponsesEntitiesResponseApiCoreResponsesEntityUriSystemInt64 = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApiCoreResponsesEntitiesResponseApiCoreResponsesEntityUriSystemInt64', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'text/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiCoreResponsesEntitiesResponseApiCoreResponsesEntityUriSystemInt64 = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApiCoreResponsesEntitiesResponseApiCoreResponsesEntityUriSystemInt64', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * List of all the datapoints associated to the user in this group.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GroupsGetDatapointsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GroupsGetDatapointsResponse
     */
	public function groupsGetDatapoints(
        \OpenAPI\OpenAPI\Models\Operations\GroupsGetDatapointsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GroupsGetDatapointsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/groups/{id}/datapoints', \OpenAPI\OpenAPI\Models\Operations\GroupsGetDatapointsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GroupsGetDatapointsRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GroupsGetDatapointsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiCoreResponsesEntitiesResponseApiCoreResponsesEntityUriSystemInt64 = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApiCoreResponsesEntitiesResponseApiCoreResponsesEntityUriSystemInt64', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'text/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiCoreResponsesEntitiesResponseApiCoreResponsesEntityUriSystemInt64 = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApiCoreResponsesEntitiesResponseApiCoreResponsesEntityUriSystemInt64', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Count the datapoints associated to the user in this group.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GroupsGetDatapointsCountRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GroupsGetDatapointsCountResponse
     */
	public function groupsGetDatapointsCount(
        \OpenAPI\OpenAPI\Models\Operations\GroupsGetDatapointsCountRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GroupsGetDatapointsCountResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/groups/{id}/datapoints/count', \OpenAPI\OpenAPI\Models\Operations\GroupsGetDatapointsCountRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GroupsGetDatapointsCountRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GroupsGetDatapointsCountResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiCoreResponsesCountResponce = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApiCoreResponsesCountResponce', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'text/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiCoreResponsesCountResponce = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApiCoreResponsesCountResponce', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'application/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
            if (Utils\Utils::matchContentType($contentType, 'text/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Retrieve statistics about a subset of datapoints for a timeframe with datapoints data
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GroupsGetDatapointsSummaryRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GroupsGetDatapointsSummaryResponse
     */
	public function groupsGetDatapointsSummary(
        \OpenAPI\OpenAPI\Models\Operations\GroupsGetDatapointsSummaryRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GroupsGetDatapointsSummaryResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/groups/{id}/aggregated/summary', \OpenAPI\OpenAPI\Models\Operations\GroupsGetDatapointsSummaryRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GroupsGetDatapointsSummaryRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GroupsGetDatapointsSummaryResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiCoreDtoAggregatedAggregatedSummaryResult = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApiCoreDtoAggregatedAggregatedSummaryResult', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'text/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiCoreDtoAggregatedAggregatedSummaryResult = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApiCoreDtoAggregatedAggregatedSummaryResult', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Retrieve the list of events related to this group.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GroupsGetHitsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GroupsGetHitsResponse
     */
	public function groupsGetHits(
        \OpenAPI\OpenAPI\Models\Operations\GroupsGetHitsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GroupsGetHitsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/groups/{id}/hits', \OpenAPI\OpenAPI\Models\Operations\GroupsGetHitsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GroupsGetHitsRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GroupsGetHitsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiCoreDtoClickStreamHitListPage = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApiCoreDtoClickStreamHitListPage', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'text/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiCoreDtoClickStreamHitListPage = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApiCoreDtoClickStreamHitListPage', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Retrieve statistics about this customer for a timeframe by groups
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GroupsGetStatisticsAggregatedSingleRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GroupsGetStatisticsAggregatedSingleResponse
     */
	public function groupsGetStatisticsAggregatedSingle(
        \OpenAPI\OpenAPI\Models\Operations\GroupsGetStatisticsAggregatedSingleRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GroupsGetStatisticsAggregatedSingleResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/groups/aggregated');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GroupsGetStatisticsAggregatedSingleRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GroupsGetStatisticsAggregatedSingleResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiCoreDtoAggregatedAggregatedResult = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApiCoreDtoAggregatedAggregatedResult', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'text/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiCoreDtoAggregatedAggregatedResult = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApiCoreDtoAggregatedAggregatedResult', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Retrieve statistics about all groups of this customer for a timeframe grouped by some temporal entity (day/week/month)
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GroupsGetStatisticsAllListRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GroupsGetStatisticsAllListResponse
     */
	public function groupsGetStatisticsAllList(
        \OpenAPI\OpenAPI\Models\Operations\GroupsGetStatisticsAllListRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GroupsGetStatisticsAllListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/groups/aggregated/list');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GroupsGetStatisticsAllListRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GroupsGetStatisticsAllListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiCoreResponsesEntitiesResponseApiCoreDtoAggregatedAggregatedResult = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApiCoreResponsesEntitiesResponseApiCoreDtoAggregatedAggregatedResult', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'text/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiCoreResponsesEntitiesResponseApiCoreDtoAggregatedAggregatedResult = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApiCoreResponsesEntitiesResponseApiCoreDtoAggregatedAggregatedResult', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Retrieve statistics about this group for a timeframe grouped by some temporal entity (day/week/month)
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GroupsGetStatisticsListRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GroupsGetStatisticsListResponse
     */
	public function groupsGetStatisticsList(
        \OpenAPI\OpenAPI\Models\Operations\GroupsGetStatisticsListRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GroupsGetStatisticsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/groups/{id}/aggregated/list', \OpenAPI\OpenAPI\Models\Operations\GroupsGetStatisticsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GroupsGetStatisticsListRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GroupsGetStatisticsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiCoreResponsesEntitiesResponseApiCoreDtoAggregatedAggregatedResult = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApiCoreResponsesEntitiesResponseApiCoreDtoAggregatedAggregatedResult', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'text/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiCoreResponsesEntitiesResponseApiCoreDtoAggregatedAggregatedResult = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApiCoreResponsesEntitiesResponseApiCoreDtoAggregatedAggregatedResult', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Retrieve statistics about this group for a timeframe
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GroupsGetStatisticsSingleRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GroupsGetStatisticsSingleResponse
     */
	public function groupsGetStatisticsSingle(
        \OpenAPI\OpenAPI\Models\Operations\GroupsGetStatisticsSingleRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GroupsGetStatisticsSingleResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/groups/{id}/aggregated', \OpenAPI\OpenAPI\Models\Operations\GroupsGetStatisticsSingleRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GroupsGetStatisticsSingleRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GroupsGetStatisticsSingleResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiCoreDtoAggregatedAggregatedResult = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApiCoreDtoAggregatedAggregatedResult', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'text/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiCoreDtoAggregatedAggregatedResult = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApiCoreDtoAggregatedAggregatedResult', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Fast switch the "favourite" field of a group
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GroupsPatchFavouriteRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GroupsPatchFavouriteResponse
     */
	public function groupsPatchFavourite(
        \OpenAPI\OpenAPI\Models\Operations\GroupsPatchFavouriteRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GroupsPatchFavouriteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/groups/{id}/favourite', \OpenAPI\OpenAPI\Models\Operations\GroupsPatchFavouriteRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GroupsPatchFavouriteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiCoreResponsesEntityUriSystemInt64 = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApiCoreResponsesEntityUriSystemInt64', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'text/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiCoreResponsesEntityUriSystemInt64 = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApiCoreResponsesEntityUriSystemInt64', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'application/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
            if (Utils\Utils::matchContentType($contentType, 'text/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Fast patch the "notes" field of a group
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GroupsPatchNotesFormRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GroupsPatchNotesFormResponse
     */
	public function groupsPatchNotesForm(
        \OpenAPI\OpenAPI\Models\Operations\GroupsPatchNotesFormRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GroupsPatchNotesFormResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/groups/{id}/notes', \OpenAPI\OpenAPI\Models\Operations\GroupsPatchNotesFormRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "apiCoreRequestsGenericTextPatch", "form");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GroupsPatchNotesFormResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiCoreResponsesEntityUriSystemInt64 = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApiCoreResponsesEntityUriSystemInt64', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'text/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiCoreResponsesEntityUriSystemInt64 = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApiCoreResponsesEntityUriSystemInt64', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'application/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
            if (Utils\Utils::matchContentType($contentType, 'text/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Fast patch the "notes" field of a group
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GroupsPatchNotesJsonRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GroupsPatchNotesJsonResponse
     */
	public function groupsPatchNotesJson(
        \OpenAPI\OpenAPI\Models\Operations\GroupsPatchNotesJsonRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GroupsPatchNotesJsonResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/groups/{id}/notes', \OpenAPI\OpenAPI\Models\Operations\GroupsPatchNotesJsonRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "apiCoreRequestsGenericTextPatch", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GroupsPatchNotesJsonResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiCoreResponsesEntityUriSystemInt64 = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApiCoreResponsesEntityUriSystemInt64', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'text/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiCoreResponsesEntityUriSystemInt64 = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApiCoreResponsesEntityUriSystemInt64', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'application/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
            if (Utils\Utils::matchContentType($contentType, 'text/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Fast patch the "notes" field of a group
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GroupsPatchNotesRawRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GroupsPatchNotesRawResponse
     */
	public function groupsPatchNotesRaw(
        \OpenAPI\OpenAPI\Models\Operations\GroupsPatchNotesRawRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GroupsPatchNotesRawResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/groups/{id}/notes', \OpenAPI\OpenAPI\Models\Operations\GroupsPatchNotesRawRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "raw");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GroupsPatchNotesRawResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiCoreResponsesEntityUriSystemInt64 = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApiCoreResponsesEntityUriSystemInt64', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'text/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiCoreResponsesEntityUriSystemInt64 = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApiCoreResponsesEntityUriSystemInt64', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'application/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
            if (Utils\Utils::matchContentType($contentType, 'text/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Update a group
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GroupsPostRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GroupsPostResponse
     */
	public function groupsPost(
        \OpenAPI\OpenAPI\Models\Operations\GroupsPostRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GroupsPostResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/groups/{id}', \OpenAPI\OpenAPI\Models\Operations\GroupsPostRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "apiCoreDtoGroupsGroup", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GroupsPostResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiCoreResponsesEntityUriSystemInt64 = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApiCoreResponsesEntityUriSystemInt64', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'text/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiCoreResponsesEntityUriSystemInt64 = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApiCoreResponsesEntityUriSystemInt64', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'application/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
            if (Utils\Utils::matchContentType($contentType, 'text/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Create a group
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\ApiCoreDtoGroupsGroup $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GroupsPutResponse
     */
	public function groupsPut(
        \OpenAPI\OpenAPI\Models\Shared\ApiCoreDtoGroupsGroup $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GroupsPutResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/groups');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GroupsPutResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiCoreResponsesEntityUriSystemInt64 = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApiCoreResponsesEntityUriSystemInt64', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'text/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiCoreResponsesEntityUriSystemInt64 = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApiCoreResponsesEntityUriSystemInt64', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'application/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
            if (Utils\Utils::matchContentType($contentType, 'text/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Create a datapoint in this group
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GroupsPutDatapointRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GroupsPutDatapointResponse
     */
	public function groupsPutDatapoint(
        \OpenAPI\OpenAPI\Models\Operations\GroupsPutDatapointRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GroupsPutDatapointResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/groups/{id}/datapoints', \OpenAPI\OpenAPI\Models\Operations\GroupsPutDatapointRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "apiCoreDtoDatapointsDatapoint", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GroupsPutDatapointResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiCoreResponsesEntityUriSystemInt64 = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApiCoreResponsesEntityUriSystemInt64', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'text/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiCoreResponsesEntityUriSystemInt64 = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApiCoreResponsesEntityUriSystemInt64', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'application/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
            if (Utils\Utils::matchContentType($contentType, 'text/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Get a group
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetGroupsIdRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetGroupsIdResponse
     */
	public function getGroupsId(
        \OpenAPI\OpenAPI\Models\Operations\GetGroupsIdRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetGroupsIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/groups/{id}', \OpenAPI\OpenAPI\Models\Operations\GetGroupsIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetGroupsIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiCoreDtoGroupsGroup = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApiCoreDtoGroupsGroup', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'text/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiCoreDtoGroupsGroup = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApiCoreDtoGroupsGroup', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
}