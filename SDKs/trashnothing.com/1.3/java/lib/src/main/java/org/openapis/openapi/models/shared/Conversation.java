/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

/**
 * Conversation - A conversation between the current user and another user.
 */
public class Conversation {
    /**
     * Whether or not this conversation is archived.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("archived")
    public Boolean archived;
    public Conversation withArchived(Boolean archived) {
        this.archived = archived;
        return this;
    }
    
    /**
     * Whether or not this conversation is blocked.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("blocked")
    public Boolean blocked;
    public Conversation withBlocked(Boolean blocked) {
        this.blocked = blocked;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("conversation_id")
    public String conversationId;
    public Conversation withConversationId(String conversationId) {
        this.conversationId = conversationId;
        return this;
    }
    
    /**
     * The UTC date and time of the last message in this conversation.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("last_message_date")
    public OffsetDateTime lastMessageDate;
    public Conversation withLastMessageDate(OffsetDateTime lastMessageDate) {
        this.lastMessageDate = lastMessageDate;
        return this;
    }
    
    /**
     * The latest messages in this conversation.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("messages")
    public Message[] messages;
    public Conversation withMessages(Message[] messages) {
        this.messages = messages;
        return this;
    }
    
    /**
     * The count of how many unread messages this conversation has.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("num_unread_messages")
    public Long numUnreadMessages;
    public Conversation withNumUnreadMessages(Long numUnreadMessages) {
        this.numUnreadMessages = numUnreadMessages;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("user")
    public User user;
    public Conversation withUser(User user) {
        this.user = user;
        return this;
    }
    
}
