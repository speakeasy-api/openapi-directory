"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from enum import Enum
from marshmallow import fields
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class IterationInput:
    r"""Iteration model to be sent over JSON."""
    
    name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name') }, 'form': { 'field_name': 'name' }})
    r"""Gets or sets the name of the iteration."""  
    
class IterationClassificationTypeEnum(str, Enum):
    r"""Gets the classification type of the project."""
    MULTICLASS = 'Multiclass'
    MULTILABEL = 'Multilabel'

class IterationExportableToEnum(str, Enum):
    CORE_ML = 'CoreML'
    TENSOR_FLOW = 'TensorFlow'
    DOCKER_FILE = 'DockerFile'
    ONNX = 'ONNX'
    VAIDK = 'VAIDK'

class IterationTrainingTypeEnum(str, Enum):
    r"""Gets the training type of the iteration."""
    REGULAR = 'Regular'
    ADVANCED = 'Advanced'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Iteration:
    r"""Iteration model to be sent over JSON."""
    
    name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name') }})
    r"""Gets or sets the name of the iteration."""  
    classification_type: Optional[IterationClassificationTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('classificationType'), 'exclude': lambda f: f is None }})
    r"""Gets the classification type of the project."""  
    created: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('created'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""Gets the time this iteration was completed."""  
    domain_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('domainId'), 'exclude': lambda f: f is None }})
    r"""Get or sets a guid of the domain the iteration has been trained on."""  
    exportable: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('exportable'), 'exclude': lambda f: f is None }})
    r"""Whether the iteration can be exported to another format for download."""  
    exportable_to: Optional[list[IterationExportableToEnum]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('exportableTo'), 'exclude': lambda f: f is None }})
    r"""A set of platforms this iteration can export to."""  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""Gets the id of the iteration."""  
    last_modified: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lastModified'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""Gets the time this iteration was last modified."""  
    original_publish_resource_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('originalPublishResourceId'), 'exclude': lambda f: f is None }})
    r"""Resource Provider Id this iteration was originally published to."""  
    project_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('projectId'), 'exclude': lambda f: f is None }})
    r"""Gets the project id of the iteration."""  
    publish_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('publishName'), 'exclude': lambda f: f is None }})
    r"""Name of the published model."""  
    reserved_budget_in_hours: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('reservedBudgetInHours'), 'exclude': lambda f: f is None }})
    r"""Gets the reserved advanced training budget for the iteration."""  
    status: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status'), 'exclude': lambda f: f is None }})
    r"""Gets the current iteration status."""  
    trained_at: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('trainedAt'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""Gets the time this iteration was last modified."""  
    training_type: Optional[IterationTrainingTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('trainingType'), 'exclude': lambda f: f is None }})
    r"""Gets the training type of the iteration."""  
    