"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import clusterconfig as shared_clusterconfig
from ..shared import encryptionconfig as shared_encryptionconfig
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class ClusterDefaultStorageTypeEnum(str, Enum):
    r"""Immutable. The type of storage used by this cluster to serve its parent instance's tables, unless explicitly overridden."""
    STORAGE_TYPE_UNSPECIFIED = 'STORAGE_TYPE_UNSPECIFIED'
    SSD = 'SSD'
    HDD = 'HDD'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ClusterInput:
    r"""A resizable group of nodes in a particular cloud location, capable of serving all Tables in the parent Instance."""
    
    cluster_config: Optional[shared_clusterconfig.ClusterConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('clusterConfig'), 'exclude': lambda f: f is None }})
    r"""Configuration for a cluster."""  
    default_storage_type: Optional[ClusterDefaultStorageTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('defaultStorageType'), 'exclude': lambda f: f is None }})
    r"""Immutable. The type of storage used by this cluster to serve its parent instance's tables, unless explicitly overridden."""  
    encryption_config: Optional[shared_encryptionconfig.EncryptionConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('encryptionConfig'), 'exclude': lambda f: f is None }})
    r"""Cloud Key Management Service (Cloud KMS) settings for a CMEK-protected cluster."""  
    location: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('location'), 'exclude': lambda f: f is None }})
    r"""Immutable. The location where this cluster's nodes and storage reside. For best performance, clients should be located as close as possible to this cluster. Currently only zones are supported, so values should be of the form `projects/{project}/locations/{zone}`."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""The unique name of the cluster. Values are of the form `projects/{project}/instances/{instance}/clusters/a-z*`."""  
    serve_nodes: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('serveNodes'), 'exclude': lambda f: f is None }})
    r"""The number of nodes allocated to this cluster. More nodes enable higher throughput and more consistent performance."""  
    
class ClusterStateEnum(str, Enum):
    r"""Output only. The current state of the cluster."""
    STATE_NOT_KNOWN = 'STATE_NOT_KNOWN'
    READY = 'READY'
    CREATING = 'CREATING'
    RESIZING = 'RESIZING'
    DISABLED = 'DISABLED'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Cluster:
    r"""A resizable group of nodes in a particular cloud location, capable of serving all Tables in the parent Instance."""
    
    cluster_config: Optional[shared_clusterconfig.ClusterConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('clusterConfig'), 'exclude': lambda f: f is None }})
    r"""Configuration for a cluster."""  
    default_storage_type: Optional[ClusterDefaultStorageTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('defaultStorageType'), 'exclude': lambda f: f is None }})
    r"""Immutable. The type of storage used by this cluster to serve its parent instance's tables, unless explicitly overridden."""  
    encryption_config: Optional[shared_encryptionconfig.EncryptionConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('encryptionConfig'), 'exclude': lambda f: f is None }})
    r"""Cloud Key Management Service (Cloud KMS) settings for a CMEK-protected cluster."""  
    location: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('location'), 'exclude': lambda f: f is None }})
    r"""Immutable. The location where this cluster's nodes and storage reside. For best performance, clients should be located as close as possible to this cluster. Currently only zones are supported, so values should be of the form `projects/{project}/locations/{zone}`."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""The unique name of the cluster. Values are of the form `projects/{project}/instances/{instance}/clusters/a-z*`."""  
    serve_nodes: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('serveNodes'), 'exclude': lambda f: f is None }})
    r"""The number of nodes allocated to this cluster. More nodes enable higher throughput and more consistent performance."""  
    state: Optional[ClusterStateEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('state'), 'exclude': lambda f: f is None }})
    r"""Output only. The current state of the cluster."""  
    