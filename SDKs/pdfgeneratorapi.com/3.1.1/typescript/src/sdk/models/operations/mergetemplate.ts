/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

export class MergeTemplateRequest extends SpeakeasyBase {
  /**
   * Data used to generate the PDF. This can be JSON encoded string or a public URL to your JSON file.
   */
  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  data: shared.Data;

  /**
   * Document format. The zip option will return a ZIP file with PDF files.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=format",
  })
  format?: shared.FormatEnum;

  /**
   * Document name, returned in the meta data.
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=name" })
  name?: string;

  /**
   * Response format. With the url option, the document is stored for 30 days and automatically deleted.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=output",
  })
  output?: shared.OutputEnum;

  /**
   * Template unique identifier
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=templateId",
  })
  templateId: number;
}

/**
 * Internal Server Error
 */
export class MergeTemplate500ApplicationJSON extends SpeakeasyBase {
  /**
   * Error description
   */
  @SpeakeasyMetadata()
  @Expose({ name: "error" })
  error?: string;

  /**
   * HTTP Error code
   */
  @SpeakeasyMetadata()
  @Expose({ name: "status" })
  status?: number;
}

/**
 * Error description
 */
export enum MergeTemplate422ApplicationJSONErrorEnum {
  UnableToParseJSONPleaseCheckFormatting = "Unable to parse JSON, please check formatting",
  RequiredParameterMissing = "Required parameter missing",
  RequiredParameterMissingTemplateDefinitionNotDefined = "Required parameter missing: template definition not defined",
  RequiredParameterMissingTemplateNotDefined = "Required parameter missing: template not defined",
}

/**
 * Unprocessable Entity
 */
export class MergeTemplate422ApplicationJSON extends SpeakeasyBase {
  /**
   * Error description
   */
  @SpeakeasyMetadata()
  @Expose({ name: "error" })
  error?: MergeTemplate422ApplicationJSONErrorEnum;

  /**
   * HTTP Error code
   */
  @SpeakeasyMetadata()
  @Expose({ name: "status" })
  status?: number;
}

/**
 * Error description
 */
export enum MergeTemplate404ApplicationJSONErrorEnum {
  EntityNotFound = "Entity not found",
  ResourceNotFound = "Resource not found",
  NoneOfTheTemplatesIsAvailableForTheWorkspace = "None of the templates is available for the workspace.",
}

/**
 * Not Found
 */
export class MergeTemplate404ApplicationJSON extends SpeakeasyBase {
  /**
   * Error description
   */
  @SpeakeasyMetadata()
  @Expose({ name: "error" })
  error?: MergeTemplate404ApplicationJSONErrorEnum;

  /**
   * HTTP Error code
   */
  @SpeakeasyMetadata()
  @Expose({ name: "status" })
  status?: number;
}

/**
 * Error description
 */
export enum MergeTemplate403ApplicationJSONErrorEnum {
  YourAccountHasExceededTheMonthlyDocumentGenerationLimit = "Your account has exceeded the monthly document generation limit.",
}

/**
 * Forbidden
 */
export class MergeTemplate403ApplicationJSON extends SpeakeasyBase {
  /**
   * Error description
   */
  @SpeakeasyMetadata()
  @Expose({ name: "error" })
  error?: MergeTemplate403ApplicationJSONErrorEnum;

  /**
   * HTTP Error code
   */
  @SpeakeasyMetadata()
  @Expose({ name: "status" })
  status?: number;
}

/**
 * Error description
 */
export enum MergeTemplate401ApplicationJSONErrorEnum {
  AuthenticationFailedRequestExpired = "Authentication failed: request expired",
  AuthenticationFailedSignatureOrSecretMissing = "Authentication failed: signature or secret missing",
  AuthenticationFailedWorkspaceMissing = "Authentication failed: workspace missing",
  AuthenticationFailedKeyMissing = "Authentication failed: key missing",
  AuthenticationFailedPropertyIssIssuerMissingInJWT = "Authentication failed: property 'iss' (issuer) missing in JWT",
  AuthenticationFailedPropertySubSubjectMissingInJWT = "Authentication failed: property 'sub' (subject) missing in JWT",
  AuthenticationFailedPropertyExpExpirationTimeMissingInJWT = "Authentication failed: property 'exp' (expiration time) missing in JWT",
  AuthenticationFailedInvalidIssIssuer = "Authentication failed: invalid 'iss' (issuer)",
  AuthenticationFailedIncorrectSignature = "Authentication failed: incorrect signature",
  AuthenticationFailed = "Authentication failed",
}

/**
 * Unauthorized
 */
export class MergeTemplate401ApplicationJSON extends SpeakeasyBase {
  /**
   * Error description
   */
  @SpeakeasyMetadata()
  @Expose({ name: "error" })
  error?: MergeTemplate401ApplicationJSONErrorEnum;

  /**
   * HTTP Error code
   */
  @SpeakeasyMetadata()
  @Expose({ name: "status" })
  status?: number;
}

export class MergeTemplate200ApplicationJSONMeta extends SpeakeasyBase {
  /**
   * Document content type.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "content-type" })
  contentType?: string;

  /**
   * Document name without the file extension.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "display_name" })
  displayName?: string;

  /**
   * Document encoding
   */
  @SpeakeasyMetadata()
  @Expose({ name: "encoding" })
  encoding?: string;

  /**
   * Document name. This value is automatically generated if name attribute is not defined in request.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name?: string;
}

/**
 * Document data
 */
export class MergeTemplate200ApplicationJSON extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "meta" })
  @Type(() => MergeTemplate200ApplicationJSONMeta)
  meta?: MergeTemplate200ApplicationJSONMeta;

  /**
   * Base64 encoded document if the output=base64 is used or URL to the document when the output=url is used.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "response" })
  response?: string;
}

export class MergeTemplateResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * Document data
   */
  @SpeakeasyMetadata()
  mergeTemplate200ApplicationJSONObject?: MergeTemplate200ApplicationJSON;

  /**
   * Unauthorized
   */
  @SpeakeasyMetadata()
  mergeTemplate401ApplicationJSONObject?: MergeTemplate401ApplicationJSON;

  /**
   * Forbidden
   */
  @SpeakeasyMetadata()
  mergeTemplate403ApplicationJSONObject?: MergeTemplate403ApplicationJSON;

  /**
   * Not Found
   */
  @SpeakeasyMetadata()
  mergeTemplate404ApplicationJSONObject?: MergeTemplate404ApplicationJSON;

  /**
   * Unprocessable Entity
   */
  @SpeakeasyMetadata()
  mergeTemplate422ApplicationJSONObject?: MergeTemplate422ApplicationJSON;

  /**
   * Internal Server Error
   */
  @SpeakeasyMetadata()
  mergeTemplate500ApplicationJSONObject?: MergeTemplate500ApplicationJSON;
}
