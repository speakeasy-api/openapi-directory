// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type CreateDedicatedIPPoolHeaders struct {
	XAmzAlgorithm     *string `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
}

// CreateDedicatedIPPoolRequestBodyScalingModeEnum - The type of scaling mode.
type CreateDedicatedIPPoolRequestBodyScalingModeEnum string

const (
	CreateDedicatedIPPoolRequestBodyScalingModeEnumStandard CreateDedicatedIPPoolRequestBodyScalingModeEnum = "STANDARD"
	CreateDedicatedIPPoolRequestBodyScalingModeEnumManaged  CreateDedicatedIPPoolRequestBodyScalingModeEnum = "MANAGED"
)

func (e *CreateDedicatedIPPoolRequestBodyScalingModeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "STANDARD":
		fallthrough
	case "MANAGED":
		*e = CreateDedicatedIPPoolRequestBodyScalingModeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateDedicatedIPPoolRequestBodyScalingModeEnum: %s", s)
	}
}

type CreateDedicatedIPPoolRequestBody struct {
	// The name of a dedicated IP pool.
	PoolName string `json:"PoolName"`
	// The type of scaling mode.
	ScalingMode *CreateDedicatedIPPoolRequestBodyScalingModeEnum `json:"ScalingMode,omitempty"`
	// An object that defines the tags (keys and values) that you want to associate with the pool.
	Tags []shared.Tag `json:"Tags,omitempty"`
}

type CreateDedicatedIPPoolRequest struct {
	Headers CreateDedicatedIPPoolHeaders
	Request CreateDedicatedIPPoolRequestBody `request:"mediaType=application/json"`
}

type CreateDedicatedIPPoolResponse struct {
	// AlreadyExistsException
	AlreadyExistsException interface{}
	// BadRequestException
	BadRequestException interface{}
	// ConcurrentModificationException
	ConcurrentModificationException interface{}
	ContentType                     string
	// Success
	CreateDedicatedIPPoolResponse map[string]interface{}
	// LimitExceededException
	LimitExceededException interface{}
	StatusCode             int
	RawResponse            *http.Response
	// TooManyRequestsException
	TooManyRequestsException interface{}
}
