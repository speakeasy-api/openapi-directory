// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// SearchSystemTemplatesXAmzTargetEnum
type SearchSystemTemplatesXAmzTargetEnum string

const (
	SearchSystemTemplatesXAmzTargetEnumIotThingsGraphFrontEndServiceSearchSystemTemplates SearchSystemTemplatesXAmzTargetEnum = "IotThingsGraphFrontEndService.SearchSystemTemplates"
)

func (e *SearchSystemTemplatesXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "IotThingsGraphFrontEndService.SearchSystemTemplates":
		*e = SearchSystemTemplatesXAmzTargetEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for SearchSystemTemplatesXAmzTargetEnum: %s", s)
	}
}

type SearchSystemTemplatesRequest struct {
	SearchSystemTemplatesRequest shared.SearchSystemTemplatesRequest `request:"mediaType=application/json"`
	XAmzAlgorithm                *string                             `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256            *string                             `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential               *string                             `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate                     *string                             `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken            *string                             `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature                *string                             `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders            *string                             `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget                   SearchSystemTemplatesXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
	// Pagination limit
	MaxResults *string `queryParam:"style=form,explode=true,name=maxResults"`
	// Pagination token
	NextToken *string `queryParam:"style=form,explode=true,name=nextToken"`
}

type SearchSystemTemplatesResponse struct {
	ContentType string
	// InternalFailureException
	InternalFailureException interface{}
	// InvalidRequestException
	InvalidRequestException interface{}
	// Success
	SearchSystemTemplatesResponse *shared.SearchSystemTemplatesResponse
	StatusCode                    int
	RawResponse                   *http.Response
	// ThrottlingException
	ThrottlingException interface{}
}
