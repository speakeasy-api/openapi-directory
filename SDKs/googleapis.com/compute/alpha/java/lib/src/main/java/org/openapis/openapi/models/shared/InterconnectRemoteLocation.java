/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * InterconnectRemoteLocation - Represents an Cross-Cloud Interconnect Remote Location resource. You can use this resource to find remote location details about an Interconnect attachment (VLAN).
 */
public class InterconnectRemoteLocation {
    /**
     * [Output Only] The postal address of the Point of Presence, each line in the address is separated by a newline character.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("address")
    public String address;

    public InterconnectRemoteLocation withAddress(String address) {
        this.address = address;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("attachmentConfigurationConstraints")
    public InterconnectAttachmentConfigurationConstraints attachmentConfigurationConstraints;

    public InterconnectRemoteLocation withAttachmentConfigurationConstraints(InterconnectAttachmentConfigurationConstraints attachmentConfigurationConstraints) {
        this.attachmentConfigurationConstraints = attachmentConfigurationConstraints;
        return this;
    }
    
    /**
     * [Output Only] Metropolitan area designator that indicates which city an interconnect is located. For example: "Chicago, IL", "Amsterdam, Netherlands".
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("city")
    public String city;

    public InterconnectRemoteLocation withCity(String city) {
        this.city = city;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("constraints")
    public InterconnectRemoteLocationConstraints constraints;

    public InterconnectRemoteLocation withConstraints(InterconnectRemoteLocationConstraints constraints) {
        this.constraints = constraints;
        return this;
    }
    
    /**
     * [Output Only] Continent for this location, which can take one of the following values: - AFRICA - ASIA_PAC - EUROPE - NORTH_AMERICA - SOUTH_AMERICA 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("continent")
    public InterconnectRemoteLocationContinentEnum continent;

    public InterconnectRemoteLocation withContinent(InterconnectRemoteLocationContinentEnum continent) {
        this.continent = continent;
        return this;
    }
    
    /**
     * [Output Only] Creation timestamp in RFC3339 text format.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("creationTimestamp")
    public String creationTimestamp;

    public InterconnectRemoteLocation withCreationTimestamp(String creationTimestamp) {
        this.creationTimestamp = creationTimestamp;
        return this;
    }
    
    /**
     * [Output Only] An optional description of the resource.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    public String description;

    public InterconnectRemoteLocation withDescription(String description) {
        this.description = description;
        return this;
    }
    
    /**
     * [Output Only] The name of the provider for this facility (e.g., EQUINIX).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("facilityProvider")
    public String facilityProvider;

    public InterconnectRemoteLocation withFacilityProvider(String facilityProvider) {
        this.facilityProvider = facilityProvider;
        return this;
    }
    
    /**
     * [Output Only] A provider-assigned Identifier for this facility (e.g., Ashburn-DC1).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("facilityProviderFacilityId")
    public String facilityProviderFacilityId;

    public InterconnectRemoteLocation withFacilityProviderFacilityId(String facilityProviderFacilityId) {
        this.facilityProviderFacilityId = facilityProviderFacilityId;
        return this;
    }
    
    /**
     * [Output Only] The unique identifier for the resource. This identifier is defined by the server.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    public String id;

    public InterconnectRemoteLocation withId(String id) {
        this.id = id;
        return this;
    }
    
    /**
     * [Output Only] Type of the resource. Always compute#interconnectRemoteLocation for interconnect remote locations.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("kind")
    public String kind;

    public InterconnectRemoteLocation withKind(String kind) {
        this.kind = kind;
        return this;
    }
    
    /**
     * [Output Only] Link Aggregation Control Protocol (LACP) constraints, which can take one of the following values: LACP_SUPPORTED, LACP_UNSUPPORTED
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("lacp")
    public InterconnectRemoteLocationLacpEnum lacp;

    public InterconnectRemoteLocation withLacp(InterconnectRemoteLocationLacpEnum lacp) {
        this.lacp = lacp;
        return this;
    }
    
    /**
     * [Output Only] The maximum number of 100 Gbps ports supported in a link aggregation group (LAG). When linkType is 100 Gbps, requestedLinkCount cannot exceed max_lag_size_100_gbps.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("maxLagSize100Gbps")
    public Integer maxLagSize100Gbps;

    public InterconnectRemoteLocation withMaxLagSize100Gbps(Integer maxLagSize100Gbps) {
        this.maxLagSize100Gbps = maxLagSize100Gbps;
        return this;
    }
    
    /**
     * [Output Only] The maximum number of 10 Gbps ports supported in a link aggregation group (LAG). When linkType is 10 Gbps, requestedLinkCount cannot exceed max_lag_size_10_gbps.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("maxLagSize10Gbps")
    public Integer maxLagSize10Gbps;

    public InterconnectRemoteLocation withMaxLagSize10Gbps(Integer maxLagSize10Gbps) {
        this.maxLagSize10Gbps = maxLagSize10Gbps;
        return this;
    }
    
    /**
     * [Output Only] Name of the resource.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    public String name;

    public InterconnectRemoteLocation withName(String name) {
        this.name = name;
        return this;
    }
    
    /**
     * [Output Only] The peeringdb identifier for this facility (corresponding with a netfac type in peeringdb).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("peeringdbFacilityId")
    public String peeringdbFacilityId;

    public InterconnectRemoteLocation withPeeringdbFacilityId(String peeringdbFacilityId) {
        this.peeringdbFacilityId = peeringdbFacilityId;
        return this;
    }
    
    /**
     * [Output Only] Permitted connections.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("permittedConnections")
    public InterconnectRemoteLocationPermittedConnections[] permittedConnections;

    public InterconnectRemoteLocation withPermittedConnections(InterconnectRemoteLocationPermittedConnections[] permittedConnections) {
        this.permittedConnections = permittedConnections;
        return this;
    }
    
    /**
     * [Output Only] Indicates the service provider present at the remote location. Example values: "Amazon Web Services", "Microsoft Azure".
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("remoteService")
    public String remoteService;

    public InterconnectRemoteLocation withRemoteService(String remoteService) {
        this.remoteService = remoteService;
        return this;
    }
    
    /**
     * [Output Only] Server-defined URL for the resource.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("selfLink")
    public String selfLink;

    public InterconnectRemoteLocation withSelfLink(String selfLink) {
        this.selfLink = selfLink;
        return this;
    }
    
    /**
     * [Output Only] Server-defined URL for this resource with the resource id.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("selfLinkWithId")
    public String selfLinkWithId;

    public InterconnectRemoteLocation withSelfLinkWithId(String selfLinkWithId) {
        this.selfLinkWithId = selfLinkWithId;
        return this;
    }
    
    /**
     * [Output Only] The status of this InterconnectRemoteLocation, which can take one of the following values: - CLOSED: The InterconnectRemoteLocation is closed and is unavailable for provisioning new Cross-Cloud Interconnects. - AVAILABLE: The InterconnectRemoteLocation is available for provisioning new Cross-Cloud Interconnects. 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("status")
    public InterconnectRemoteLocationStatusEnum status;

    public InterconnectRemoteLocation withStatus(InterconnectRemoteLocationStatusEnum status) {
        this.status = status;
        return this;
    }
    
    public InterconnectRemoteLocation(){}
}
