/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * CounterUpdate - An update to a Counter sent from a worker.
 */
public class CounterUpdate {
    /**
     * Boolean value for And, Or.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("boolean")
    public Boolean boolean_;

    public CounterUpdate withBoolean(Boolean boolean_) {
        this.boolean_ = boolean_;
        return this;
    }
    
    /**
     * True if this counter is reported as the total cumulative aggregate value accumulated since the worker started working on this WorkItem. By default this is false, indicating that this counter is reported as a delta.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("cumulative")
    public Boolean cumulative;

    public CounterUpdate withCumulative(Boolean cumulative) {
        this.cumulative = cumulative;
        return this;
    }
    
    /**
     * A metric value representing a distribution.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("distribution")
    public DistributionUpdate distribution;

    public CounterUpdate withDistribution(DistributionUpdate distribution) {
        this.distribution = distribution;
        return this;
    }
    
    /**
     * Floating point value for Sum, Max, Min.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("floatingPoint")
    public Double floatingPoint;

    public CounterUpdate withFloatingPoint(Double floatingPoint) {
        this.floatingPoint = floatingPoint;
        return this;
    }
    
    /**
     * A metric value representing a list of floating point numbers.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("floatingPointList")
    public FloatingPointList floatingPointList;

    public CounterUpdate withFloatingPointList(FloatingPointList floatingPointList) {
        this.floatingPointList = floatingPointList;
        return this;
    }
    
    /**
     * A representation of a floating point mean metric contribution.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("floatingPointMean")
    public FloatingPointMean floatingPointMean;

    public CounterUpdate withFloatingPointMean(FloatingPointMean floatingPointMean) {
        this.floatingPointMean = floatingPointMean;
        return this;
    }
    
    /**
     * A representation of an int64, n, that is immune to precision loss when encoded in JSON.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("integer")
    public SplitInt64 integer;

    public CounterUpdate withInteger(SplitInt64 integer) {
        this.integer = integer;
        return this;
    }
    
    /**
     * A metric value representing temporal values of a variable.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("integerGauge")
    public IntegerGauge integerGauge;

    public CounterUpdate withIntegerGauge(IntegerGauge integerGauge) {
        this.integerGauge = integerGauge;
        return this;
    }
    
    /**
     * A metric value representing a list of integers.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("integerList")
    public IntegerList integerList;

    public CounterUpdate withIntegerList(IntegerList integerList) {
        this.integerList = integerList;
        return this;
    }
    
    /**
     * A representation of an integer mean metric contribution.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("integerMean")
    public IntegerMean integerMean;

    public CounterUpdate withIntegerMean(IntegerMean integerMean) {
        this.integerMean = integerMean;
        return this;
    }
    
    /**
     * Value for internally-defined counters used by the Dataflow service.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("internal")
    public Object internal;

    public CounterUpdate withInternal(Object internal) {
        this.internal = internal;
        return this;
    }
    
    /**
     * Basic metadata about a counter.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("nameAndKind")
    public NameAndKind nameAndKind;

    public CounterUpdate withNameAndKind(NameAndKind nameAndKind) {
        this.nameAndKind = nameAndKind;
        return this;
    }
    
    /**
     * The service-generated short identifier for this counter. The short_id -&gt; (name, metadata) mapping is constant for the lifetime of a job.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("shortId")
    public String shortId;

    public CounterUpdate withShortId(String shortId) {
        this.shortId = shortId;
        return this;
    }
    
    /**
     * A metric value representing a list of strings.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("stringList")
    public StringList stringList;

    public CounterUpdate withStringList(StringList stringList) {
        this.stringList = stringList;
        return this;
    }
    
    /**
     * A single message which encapsulates structured name and metadata for a given counter.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("structuredNameAndMetadata")
    public CounterStructuredNameAndMetadata structuredNameAndMetadata;

    public CounterUpdate withStructuredNameAndMetadata(CounterStructuredNameAndMetadata structuredNameAndMetadata) {
        this.structuredNameAndMetadata = structuredNameAndMetadata;
        return this;
    }
    
    public CounterUpdate(){}
}
