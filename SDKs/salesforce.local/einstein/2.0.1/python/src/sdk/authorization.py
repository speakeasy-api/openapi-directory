"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Authorization:
    r"""Resources that manage authorization tokens."""
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def generate_token_v2(self, request: operations.GenerateTokenV2RequestBody) -> operations.GenerateTokenV2Response:
        r"""Generate an OAuth Token
        Returns an OAuth access token or a refresh token. You must pass a valid access token in the header of each API call.
        https://metamind.readme.io/docs/generate-an-oauth-access-token - authentication guid
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v2/oauth2/token'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'form')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GenerateTokenV2Response(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GenerateAccessTokenResponse])
                res.generate_access_token_response = out

        return res

    def revoke_refresh_token_v2(self, request: operations.RevokeRefreshTokenV2Request, security: operations.RevokeRefreshTokenV2Security) -> operations.RevokeRefreshTokenV2Response:
        r"""Delete a Refresh Token"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.RevokeRefreshTokenV2Request, base_url, '/v2/oauth2/tokens/{token}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.RevokeRefreshTokenV2Response(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    