"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from marshmallow import fields
from sdk import utils


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class DeviceRegistrationWindow:
    
    end_date: datetime = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('endDate'), 'encoder': utils.datetimeisoformat(False), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso') }})
    r"""The end date of the current period.
    
    This is based on the value of `startDate` plus the number of days defined by  `periodDays`.
    """  
    limit: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('limit') }})
    r"""The maximum de/registrations that can be made in a period."""  
    period_days: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('periodDays') }})
    r"""The number of days a de/registration period runs for."""  
    remaining: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('remaining') }})
    r"""The remaining de/registrations that can be made in the current period."""  
    start_date: datetime = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('startDate'), 'encoder': utils.datetimeisoformat(False), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso') }})
    r"""The start date of the current period.
    
    This is based on the earliest device de/registrations in the past N days, where
    N is defined by `periodDays`.
    
    If no device has been de/registered then start date will be from the current date.
    """  
    