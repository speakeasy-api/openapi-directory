"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import application as shared_application
from ..shared import autoterminationpolicy as shared_autoterminationpolicy
from ..shared import bootstrapactionconfig as shared_bootstrapactionconfig
from ..shared import configuration as shared_configuration
from ..shared import jobflowinstancesconfig as shared_jobflowinstancesconfig
from ..shared import kerberosattributes as shared_kerberosattributes
from ..shared import managedscalingpolicy as shared_managedscalingpolicy
from ..shared import placementgroupconfig as shared_placementgroupconfig
from ..shared import repoupgradeonboot_enum as shared_repoupgradeonboot_enum
from ..shared import scaledownbehavior_enum as shared_scaledownbehavior_enum
from ..shared import stepconfig as shared_stepconfig
from ..shared import supportedproductconfig as shared_supportedproductconfig
from ..shared import tag as shared_tag
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class RunJobFlowInput:
    r"""Input to the <a>RunJobFlow</a> operation."""
    
    instances: shared_jobflowinstancesconfig.JobFlowInstancesConfig = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Instances') }})  
    name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Name') }})  
    additional_info: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AdditionalInfo'), 'exclude': lambda f: f is None }})  
    ami_version: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AmiVersion'), 'exclude': lambda f: f is None }})  
    applications: Optional[list[shared_application.Application]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Applications'), 'exclude': lambda f: f is None }})  
    auto_scaling_role: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AutoScalingRole'), 'exclude': lambda f: f is None }})  
    auto_termination_policy: Optional[shared_autoterminationpolicy.AutoTerminationPolicy] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AutoTerminationPolicy'), 'exclude': lambda f: f is None }})
    r"""An auto-termination policy for an Amazon EMR cluster. An auto-termination policy defines the amount of idle time in seconds after which a cluster automatically terminates. For alternative cluster termination options, see <a href=\\"https://docs.aws.amazon.com/emr/latest/ManagementGuide/emr-plan-termination.html\\">Control cluster termination</a>."""  
    bootstrap_actions: Optional[list[shared_bootstrapactionconfig.BootstrapActionConfig]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('BootstrapActions'), 'exclude': lambda f: f is None }})  
    configurations: Optional[list[shared_configuration.Configuration]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Configurations'), 'exclude': lambda f: f is None }})  
    custom_ami_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CustomAmiId'), 'exclude': lambda f: f is None }})  
    ebs_root_volume_size: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('EbsRootVolumeSize'), 'exclude': lambda f: f is None }})  
    job_flow_role: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('JobFlowRole'), 'exclude': lambda f: f is None }})  
    kerberos_attributes: Optional[shared_kerberosattributes.KerberosAttributes] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('KerberosAttributes'), 'exclude': lambda f: f is None }})  
    log_encryption_kms_key_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('LogEncryptionKmsKeyId'), 'exclude': lambda f: f is None }})  
    log_uri: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('LogUri'), 'exclude': lambda f: f is None }})  
    managed_scaling_policy: Optional[shared_managedscalingpolicy.ManagedScalingPolicy] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ManagedScalingPolicy'), 'exclude': lambda f: f is None }})  
    new_supported_products: Optional[list[shared_supportedproductconfig.SupportedProductConfig]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('NewSupportedProducts'), 'exclude': lambda f: f is None }})  
    os_release_label: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('OSReleaseLabel'), 'exclude': lambda f: f is None }})  
    placement_group_configs: Optional[list[shared_placementgroupconfig.PlacementGroupConfig]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PlacementGroupConfigs'), 'exclude': lambda f: f is None }})  
    release_label: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ReleaseLabel'), 'exclude': lambda f: f is None }})  
    repo_upgrade_on_boot: Optional[shared_repoupgradeonboot_enum.RepoUpgradeOnBootEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('RepoUpgradeOnBoot'), 'exclude': lambda f: f is None }})  
    scale_down_behavior: Optional[shared_scaledownbehavior_enum.ScaleDownBehaviorEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ScaleDownBehavior'), 'exclude': lambda f: f is None }})  
    security_configuration: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SecurityConfiguration'), 'exclude': lambda f: f is None }})  
    service_role: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ServiceRole'), 'exclude': lambda f: f is None }})  
    step_concurrency_level: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('StepConcurrencyLevel'), 'exclude': lambda f: f is None }})  
    steps: Optional[list[shared_stepconfig.StepConfig]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Steps'), 'exclude': lambda f: f is None }})  
    supported_products: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SupportedProducts'), 'exclude': lambda f: f is None }})  
    tags: Optional[list[shared_tag.Tag]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Tags'), 'exclude': lambda f: f is None }})  
    visible_to_all_users: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('VisibleToAllUsers'), 'exclude': lambda f: f is None }})  
    