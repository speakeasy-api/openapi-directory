// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// GetCostForecastXAmzTargetEnum
type GetCostForecastXAmzTargetEnum string

const (
	GetCostForecastXAmzTargetEnumAwsInsightsIndexServiceGetCostForecast GetCostForecastXAmzTargetEnum = "AWSInsightsIndexService.GetCostForecast"
)

func (e GetCostForecastXAmzTargetEnum) ToPointer() *GetCostForecastXAmzTargetEnum {
	return &e
}

func (e *GetCostForecastXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "AWSInsightsIndexService.GetCostForecast":
		*e = GetCostForecastXAmzTargetEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetCostForecastXAmzTargetEnum: %v", v)
	}
}

type GetCostForecastRequest struct {
	GetCostForecastRequest shared.GetCostForecastRequest `request:"mediaType=application/json"`
	XAmzAlgorithm          *string                       `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256      *string                       `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential         *string                       `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate               *string                       `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken      *string                       `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature          *string                       `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders      *string                       `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget             GetCostForecastXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type GetCostForecastResponse struct {
	ContentType string
	// DataUnavailableException
	DataUnavailableException interface{}
	// Success
	GetCostForecastResponse *shared.GetCostForecastResponse
	// LimitExceededException
	LimitExceededException interface{}
	StatusCode             int
	RawResponse            *http.Response
}
