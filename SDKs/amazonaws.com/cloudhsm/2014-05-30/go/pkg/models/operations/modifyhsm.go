// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// ModifyHsmXAmzTargetEnum
type ModifyHsmXAmzTargetEnum string

const (
	ModifyHsmXAmzTargetEnumCloudHsmFrontendServiceModifyHsm ModifyHsmXAmzTargetEnum = "CloudHsmFrontendService.ModifyHsm"
)

func (e ModifyHsmXAmzTargetEnum) ToPointer() *ModifyHsmXAmzTargetEnum {
	return &e
}

func (e *ModifyHsmXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "CloudHsmFrontendService.ModifyHsm":
		*e = ModifyHsmXAmzTargetEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ModifyHsmXAmzTargetEnum: %v", v)
	}
}

type ModifyHsmRequest struct {
	ModifyHsmRequest  shared.ModifyHsmRequest `request:"mediaType=application/json"`
	XAmzAlgorithm     *string                 `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string                 `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string                 `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string                 `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string                 `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string                 `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string                 `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget        ModifyHsmXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type ModifyHsmResponse struct {
	// CloudHsmInternalException
	CloudHsmInternalException interface{}
	// CloudHsmServiceException
	CloudHsmServiceException interface{}
	ContentType              string
	// InvalidRequestException
	InvalidRequestException interface{}
	// Success
	ModifyHsmResponse *shared.ModifyHsmResponse
	StatusCode        int
	RawResponse       *http.Response
}
