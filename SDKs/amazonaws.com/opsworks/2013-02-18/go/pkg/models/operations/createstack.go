// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// CreateStackXAmzTargetEnum
type CreateStackXAmzTargetEnum string

const (
	CreateStackXAmzTargetEnumOpsWorks20130218CreateStack CreateStackXAmzTargetEnum = "OpsWorks_20130218.CreateStack"
)

func (e CreateStackXAmzTargetEnum) ToPointer() *CreateStackXAmzTargetEnum {
	return &e
}

func (e *CreateStackXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "OpsWorks_20130218.CreateStack":
		*e = CreateStackXAmzTargetEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateStackXAmzTargetEnum: %v", v)
	}
}

type CreateStackRequest struct {
	CreateStackRequest shared.CreateStackRequest `request:"mediaType=application/json"`
	XAmzAlgorithm      *string                   `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256  *string                   `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential     *string                   `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate           *string                   `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken  *string                   `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature      *string                   `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders  *string                   `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget         CreateStackXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type CreateStackResponse struct {
	ContentType string
	// Success
	CreateStackResult *shared.CreateStackResult
	StatusCode        int
	RawResponse       *http.Response
	// ValidationException
	ValidationException interface{}
}
