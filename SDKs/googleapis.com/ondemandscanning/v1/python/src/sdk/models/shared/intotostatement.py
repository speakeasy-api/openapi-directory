"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import intotoprovenance as shared_intotoprovenance
from ..shared import slsaprovenance as shared_slsaprovenance
from ..shared import slsaprovenancezerotwo as shared_slsaprovenancezerotwo
from ..shared import subject as shared_subject
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class InTotoStatement:
    r"""Spec defined at https://github.com/in-toto/attestation/tree/main/spec#statement The serialized InTotoStatement will be stored as Envelope.payload. Envelope.payloadType is always \\"application/vnd.in-toto+json\\"."""
    
    type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('_type'), 'exclude': lambda f: f is None }})
    r"""Always `https://in-toto.io/Statement/v0.1`."""  
    predicate_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('predicateType'), 'exclude': lambda f: f is None }})
    r"""`https://slsa.dev/provenance/v0.1` for SlsaProvenance."""  
    provenance: Optional[shared_intotoprovenance.InTotoProvenance] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('provenance'), 'exclude': lambda f: f is None }})  
    slsa_provenance: Optional[shared_slsaprovenance.SlsaProvenance] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('slsaProvenance'), 'exclude': lambda f: f is None }})  
    slsa_provenance_zero_two: Optional[shared_slsaprovenancezerotwo.SlsaProvenanceZeroTwo] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('slsaProvenanceZeroTwo'), 'exclude': lambda f: f is None }})
    r"""See full explanation of fields at slsa.dev/provenance/v0.2."""  
    subject: Optional[list[shared_subject.Subject]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('subject'), 'exclude': lambda f: f is None }})  
    