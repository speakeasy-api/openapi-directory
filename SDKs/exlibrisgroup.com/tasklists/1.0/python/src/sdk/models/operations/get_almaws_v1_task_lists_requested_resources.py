"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from datetime import date, datetime
from enum import Enum
from marshmallow import fields
from sdk import utils
from typing import Optional


@dataclasses.dataclass
class GetAlmawsV1TaskListsRequestedResourcesRequest:
    
    circ_desk: str = dataclasses.field(metadata={'query_param': { 'field_name': 'circ_desk', 'style': 'form', 'explode': True }})
    r"""The circulation desk where the action is being performed. Mandatory."""  
    library: str = dataclasses.field(metadata={'query_param': { 'field_name': 'library', 'style': 'form', 'explode': True }})
    r"""The library of the given circulation desk or department where the resources are located. Mandatory."""  
    direction: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'direction', 'style': 'form', 'explode': True }})
    r"""The order direction in which to retrieve the results. Optional."""  
    limit: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'limit', 'style': 'form', 'explode': True }})
    r"""Limits the number of results. Optional. Valid values are 0-100. Default value: 10."""  
    location: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'location', 'style': 'form', 'explode': True }})
    r"""The location code. Optional."""  
    offset: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'offset', 'style': 'form', 'explode': True }})
    r"""Offset of the results returned. Optional. Default value: 0, which means that the first results will be returned."""  
    order_by: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'order_by', 'style': 'form', 'explode': True }})
    r"""The order in which to retrieve the results: location/call_number (default)."""  
    pickup_inst: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'pickup_inst', 'style': 'form', 'explode': True }})
    r"""The pickup institution. Optional."""  
    printed: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'printed', 'style': 'form', 'explode': True }})
    r"""Show printed results: Y/N. Optional."""  
    reported: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'reported', 'style': 'form', 'explode': True }})
    r"""Show reported results: Y/N. Optional."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetAlmawsV1TaskListsRequestedResources200ApplicationJSONRequestedResourceLocationCopyBaseStatus:
    
    desc: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('desc'), 'exclude': lambda f: f is None }})  
    value: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('value'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetAlmawsV1TaskListsRequestedResources200ApplicationJSONRequestedResourceLocationCopy:
    r"""Specific copy of resource in a specific location."""
    
    alternative_call_number: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('alternative_call_number'), 'exclude': lambda f: f is None }})
    r"""Alternative call number."""  
    barcode: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('barcode'), 'exclude': lambda f: f is None }})
    r"""The item's barcode."""  
    base_status: Optional[GetAlmawsV1TaskListsRequestedResources200ApplicationJSONRequestedResourceLocationCopyBaseStatus] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('base_status'), 'exclude': lambda f: f is None }})  
    link: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('link'), 'exclude': lambda f: f is None }})  
    pid: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('pid'), 'exclude': lambda f: f is None }})
    r"""The resource's pid."""  
    storage_location_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('storage_location_id'), 'exclude': lambda f: f is None }})
    r"""The item's storage location id."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetAlmawsV1TaskListsRequestedResources200ApplicationJSONRequestedResourceLocationHoldingID:
    r"""Holding pid, a unique holding id that the resource is associated with."""
    
    link: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('link'), 'exclude': lambda f: f is None }})  
    value: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('value'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetAlmawsV1TaskListsRequestedResources200ApplicationJSONRequestedResourceLocationLibrary:
    r"""Library of the requested resource. See [Get libraries API](https://developers.exlibrisgroup.com/alma/apis/conf/GET/gwPcGly021p29HpB7XTI4Dp4I8TKv6CAxBlD4LyRaVE=/37088dc9-c685-4641-bc7f-60b5ca7cabed)."""
    
    desc: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('desc'), 'exclude': lambda f: f is None }})  
    value: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('value'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetAlmawsV1TaskListsRequestedResources200ApplicationJSONRequestedResourceLocation:
    r"""Location of the requested resource."""
    
    call_number: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('call_number'), 'exclude': lambda f: f is None }})
    r"""Call number of the item."""  
    copy: Optional[list[GetAlmawsV1TaskListsRequestedResources200ApplicationJSONRequestedResourceLocationCopy]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('copy'), 'exclude': lambda f: f is None }})
    r"""Copies of resource in a specific location."""  
    holding_id: Optional[GetAlmawsV1TaskListsRequestedResources200ApplicationJSONRequestedResourceLocationHoldingID] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('holding_id'), 'exclude': lambda f: f is None }})
    r"""Holding pid, a unique holding id that the resource is associated with."""  
    library: Optional[GetAlmawsV1TaskListsRequestedResources200ApplicationJSONRequestedResourceLocationLibrary] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('library'), 'exclude': lambda f: f is None }})
    r"""Library of the requested resource. See [Get libraries API](https://developers.exlibrisgroup.com/alma/apis/conf/GET/gwPcGly021p29HpB7XTI4Dp4I8TKv6CAxBlD4LyRaVE=/37088dc9-c685-4641-bc7f-60b5ca7cabed)."""  
    shelving_location: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('shelving_location'), 'exclude': lambda f: f is None }})
    r"""The location."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetAlmawsV1TaskListsRequestedResources200ApplicationJSONRequestedResourceRequestDestination:
    r"""The destination will be a library in most cases. However, it may at times be: A circulation desk (when the pickup location is a reading room) A Home/Office code, where the request is for personal delivery A Work Order department"""
    
    desc: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('desc'), 'exclude': lambda f: f is None }})  
    value: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('value'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetAlmawsV1TaskListsRequestedResources200ApplicationJSONRequestedResourceRequestRequestSubType:
    r"""The sub type of the request."""
    
    desc: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('desc'), 'exclude': lambda f: f is None }})  
    value: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('value'), 'exclude': lambda f: f is None }})  
    
class GetAlmawsV1TaskListsRequestedResources200ApplicationJSONRequestedResourceRequestRequestTypeEnum(str, Enum):
    BOOKING = 'BOOKING'
    DIGITIZATION = 'DIGITIZATION'
    HOLD = 'HOLD'
    MOVE = 'MOVE'
    WORK_ORDER = 'WORK_ORDER'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetAlmawsV1TaskListsRequestedResources200ApplicationJSONRequestedResourceRequestRequester:
    r"""A description of the requester."""
    
    desc: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('desc'), 'exclude': lambda f: f is None }})  
    value: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('value'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetAlmawsV1TaskListsRequestedResources200ApplicationJSONRequestedResourceRequest:
    r"""Request object."""
    
    request_type: GetAlmawsV1TaskListsRequestedResources200ApplicationJSONRequestedResourceRequestRequestTypeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('request_type') }})  
    comment: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('comment'), 'exclude': lambda f: f is None }})
    r"""The related note of the request."""  
    destination: Optional[GetAlmawsV1TaskListsRequestedResources200ApplicationJSONRequestedResourceRequestDestination] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('destination'), 'exclude': lambda f: f is None }})
    r"""The destination will be a library in most cases. However, it may at times be: A circulation desk (when the pickup location is a reading room) A Home/Office code, where the request is for personal delivery A Work Order department"""  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""The identifier of the request in Alma."""  
    link: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('link'), 'exclude': lambda f: f is None }})  
    printed: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('printed'), 'exclude': lambda f: f is None }})
    r"""Indication whether the request is printed."""  
    reported: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('reported'), 'exclude': lambda f: f is None }})
    r"""Indication whether the request is reported."""  
    request_date: Optional[date] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('request_date'), 'encoder': utils.dateisoformat(True), 'decoder': utils.datefromisoformat, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""Deprecated - use request_time instead. The request date."""  
    request_sub_type: Optional[GetAlmawsV1TaskListsRequestedResources200ApplicationJSONRequestedResourceRequestRequestSubType] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('request_sub_type'), 'exclude': lambda f: f is None }})
    r"""The sub type of the request."""  
    request_time: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('request_time'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""The creation date and exact time of the request. Output parameter."""  
    requester: Optional[GetAlmawsV1TaskListsRequestedResources200ApplicationJSONRequestedResourceRequestRequester] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('requester'), 'exclude': lambda f: f is None }})
    r"""A description of the requester."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetAlmawsV1TaskListsRequestedResources200ApplicationJSONRequestedResourceResourceMetadataMmsID:
    r"""The MMS id of the resource. See [GET BIB API](https://developers.exlibrisgroup.com/alma/apis/bibs/GET/gwPcGly021om4RTvtjbPleCklCGxeYAf3JPdiJpJhUA=/af2fb69d-64f4-42bc-bb05-d8a0ae56936e)."""
    
    link: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('link'), 'exclude': lambda f: f is None }})  
    value: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('value'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetAlmawsV1TaskListsRequestedResources200ApplicationJSONRequestedResourceResourceMetadata:
    r"""Metadata about the requested resource."""
    
    author: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('author'), 'exclude': lambda f: f is None }})
    r"""An entity primarily responsible for making the resource."""  
    isbn: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('isbn'), 'exclude': lambda f: f is None }})
    r"""ISBN"""  
    issn: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('issn'), 'exclude': lambda f: f is None }})
    r"""ISSN"""  
    mms_id: Optional[GetAlmawsV1TaskListsRequestedResources200ApplicationJSONRequestedResourceResourceMetadataMmsID] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('mms_id'), 'exclude': lambda f: f is None }})
    r"""The MMS id of the resource. See [GET BIB API](https://developers.exlibrisgroup.com/alma/apis/bibs/GET/gwPcGly021om4RTvtjbPleCklCGxeYAf3JPdiJpJhUA=/af2fb69d-64f4-42bc-bb05-d8a0ae56936e)."""  
    publication_place: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('publication_place'), 'exclude': lambda f: f is None }})
    r"""Place of publication."""  
    publication_year: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('publication_year'), 'exclude': lambda f: f is None }})
    r"""The year associated with the publication of the resource."""  
    publisher: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('publisher'), 'exclude': lambda f: f is None }})
    r"""An entity responsible for making the resource available."""  
    title: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('title'), 'exclude': lambda f: f is None }})
    r"""The resource title."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetAlmawsV1TaskListsRequestedResources200ApplicationJSONRequestedResource:
    r"""Requested resource to be picked from the shelf."""
    
    location: Optional[GetAlmawsV1TaskListsRequestedResources200ApplicationJSONRequestedResourceLocation] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('location'), 'exclude': lambda f: f is None }})
    r"""Location of the requested resource."""  
    request: Optional[list[GetAlmawsV1TaskListsRequestedResources200ApplicationJSONRequestedResourceRequest]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('request'), 'exclude': lambda f: f is None }})
    r"""Requests for resource."""  
    resource_metadata: Optional[GetAlmawsV1TaskListsRequestedResources200ApplicationJSONRequestedResourceResourceMetadata] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('resource_metadata'), 'exclude': lambda f: f is None }})
    r"""Metadata about the requested resource."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetAlmawsV1TaskListsRequestedResources200ApplicationJSON:
    r"""A list of requested resources."""
    
    requested_resource: Optional[list[GetAlmawsV1TaskListsRequestedResources200ApplicationJSONRequestedResource]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('requested_resource'), 'exclude': lambda f: f is None }})
    r"""Requested resource object."""  
    total_record_count: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('total_record_count'), 'exclude': lambda f: f is None }})
    r"""The total number of requested resources."""  
    

@dataclasses.dataclass
class GetAlmawsV1TaskListsRequestedResourcesResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    body: Optional[bytes] = dataclasses.field(default=None)  
    get_almaws_v1_task_lists_requested_resources_200_application_json_object: Optional[GetAlmawsV1TaskListsRequestedResources200ApplicationJSON] = dataclasses.field(default=None)
    r"""OK - This method returns an object based on rest_requested_resources.xsd. See [here](/alma/apis/docs/xsd/rest_requested_resources.xsd)"""  
    headers: Optional[dict[str, list[str]]] = dataclasses.field(default=None)  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    