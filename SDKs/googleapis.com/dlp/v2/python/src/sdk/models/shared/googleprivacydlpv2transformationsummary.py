"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import googleprivacydlpv2fieldid as shared_googleprivacydlpv2fieldid
from ..shared import googleprivacydlpv2fieldtransformation as shared_googleprivacydlpv2fieldtransformation
from ..shared import googleprivacydlpv2infotype as shared_googleprivacydlpv2infotype
from ..shared import googleprivacydlpv2primitivetransformation as shared_googleprivacydlpv2primitivetransformation
from ..shared import googleprivacydlpv2recordsuppression as shared_googleprivacydlpv2recordsuppression
from ..shared import googleprivacydlpv2summaryresult as shared_googleprivacydlpv2summaryresult
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GooglePrivacyDlpV2TransformationSummary:
    r"""Summary of a single transformation. Only one of 'transformation', 'field_transformation', or 'record_suppress' will be set."""
    
    field: Optional[shared_googleprivacydlpv2fieldid.GooglePrivacyDlpV2FieldID] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('field'), 'exclude': lambda f: f is None }})
    r"""General identifier of a data field in a storage service."""  
    field_transformations: Optional[list[shared_googleprivacydlpv2fieldtransformation.GooglePrivacyDlpV2FieldTransformation]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('fieldTransformations'), 'exclude': lambda f: f is None }})
    r"""The field transformation that was applied. If multiple field transformations are requested for a single field, this list will contain all of them; otherwise, only one is supplied."""  
    info_type: Optional[shared_googleprivacydlpv2infotype.GooglePrivacyDlpV2InfoType] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('infoType'), 'exclude': lambda f: f is None }})
    r"""Type of information detected by the API."""  
    record_suppress: Optional[shared_googleprivacydlpv2recordsuppression.GooglePrivacyDlpV2RecordSuppression] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('recordSuppress'), 'exclude': lambda f: f is None }})
    r"""Configuration to suppress records whose suppression conditions evaluate to true."""  
    results: Optional[list[shared_googleprivacydlpv2summaryresult.GooglePrivacyDlpV2SummaryResult]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('results'), 'exclude': lambda f: f is None }})
    r"""Collection of all transformations that took place or had an error."""  
    transformation: Optional[shared_googleprivacydlpv2primitivetransformation.GooglePrivacyDlpV2PrimitiveTransformation] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('transformation'), 'exclude': lambda f: f is None }})
    r"""A rule for transforming a value."""  
    transformed_bytes: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('transformedBytes'), 'exclude': lambda f: f is None }})
    r"""Total size in bytes that were transformed in some way."""  
    