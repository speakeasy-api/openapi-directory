/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
import { Expose, Transform } from "class-transformer";

export class PutApiV1ScheduledStatusesIdSecurity extends SpeakeasyBase {
  @SpeakeasyMetadata({
    data: "security, scheme=true;type=http;subtype=bearer;name=Authorization",
  })
  bearerAuth: string;
}

export class PutApiV1ScheduledStatusesIdRequestBody extends SpeakeasyBase {
  /**
   * ISO 8601 Datetime at which the status will be published. Must be at least 5 minutes into the future.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "scheduled_at" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  scheduledAt?: Date;
}

export class PutApiV1ScheduledStatusesIdRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  requestBody?: PutApiV1ScheduledStatusesIdRequestBody;

  /**
   * ID of the scheduled status in the database.
   */
  @SpeakeasyMetadata({ data: "pathParam, style=simple;explode=false;name=id" })
  id: string;
}

export class PutApiV1ScheduledStatusesIdResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  /**
   * Invalid or missing Authorization header
   */
  @SpeakeasyMetadata()
  error?: shared.ErrorT;

  /**
   * Success.
   */
  @SpeakeasyMetadata()
  scheduledStatus?: shared.ScheduledStatus;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;
}
