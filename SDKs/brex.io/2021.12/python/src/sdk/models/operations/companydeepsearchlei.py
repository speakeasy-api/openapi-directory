"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Any, Optional


@dataclasses.dataclass
class CompanyDeepsearchLEISecurity:
    
    user_key: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'apiKey', 'sub_type': 'header', 'field_name': 'user_key' }})  
    

@dataclasses.dataclass
class CompanyDeepsearchLEIRequest:
    
    number: str = dataclasses.field(metadata={'path_param': { 'field_name': 'number', 'style': 'simple', 'explode': False }})
    r"""lei number"""  
    page: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'page', 'style': 'form', 'explode': True }})
    r"""Pagination for the ISIN number results (1000 numbers per page)"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CompanyDeepsearchLEIDefaultApplicationJSON:
    r"""Detailed information about the error"""
    
    code: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('code') }})  
    message: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('message') }})  
    tag: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tag') }})  
    fault: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('fault'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CompanyDeepsearchLEI200ApplicationJSONCompany:
    
    country: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('country') }})  
    id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id') }})  
    name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name') }})  
    registration_number: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('registrationNumber') }})  
    address: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('address'), 'exclude': lambda f: f is None }})  
    date_of_incorporation: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dateOfIncorporation'), 'exclude': lambda f: f is None }})  
    extra_data: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('extraData'), 'exclude': lambda f: f is None }})  
    formatted_address: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('formattedAddress'), 'exclude': lambda f: f is None }})  
    legal_form: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('legalForm'), 'exclude': lambda f: f is None }})  
    managing_directors: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('managingDirectors'), 'exclude': lambda f: f is None }})  
    request_time: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('requestTime'), 'exclude': lambda f: f is None }})  
    secretaries: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('secretaries'), 'exclude': lambda f: f is None }})  
    sic_nace_codes: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sicNaceCodes'), 'exclude': lambda f: f is None }})  
    status: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CompanyDeepsearchLEI200ApplicationJSON:
    r"""Result of a lookup by LEI number"""
    
    company: Optional[CompanyDeepsearchLEI200ApplicationJSONCompany] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('company'), 'exclude': lambda f: f is None }})  
    current_page: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('current_page'), 'exclude': lambda f: f is None }})  
    isins: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('isins'), 'exclude': lambda f: f is None }})  
    last_page: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('last_page'), 'exclude': lambda f: f is None }})  
    lei: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lei'), 'exclude': lambda f: f is None }})  
    next_page: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('next_page'), 'exclude': lambda f: f is None }})  
    total_num_isins: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('total_num_isins'), 'exclude': lambda f: f is None }})  
    valid_lei: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('validLei'), 'exclude': lambda f: f is None }})  
    

@dataclasses.dataclass
class CompanyDeepsearchLEIResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    company_deepsearch_lei_200_application_json_object: Optional[CompanyDeepsearchLEI200ApplicationJSON] = dataclasses.field(default=None)
    r"""Result of a lookup by LEI number"""  
    company_deepsearch_lei_default_application_json_object: Optional[CompanyDeepsearchLEIDefaultApplicationJSON] = dataclasses.field(default=None)
    r"""Detailed information about the error"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    