"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import collection as shared_collection
from ..shared import collectionsearch as shared_collectionsearch
from typing import Optional


@dataclasses.dataclass
class CollectionsSearchRequest:
    
    collection_search: Optional[shared_collectionsearch.CollectionSearch] = dataclasses.field(default=None, metadata={'request': { 'media_type': 'application/json' }})
    r"""Search Parameters"""  
    x_cursor: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Cursor', 'style': 'simple', 'explode': False }})
    r"""Unique hash used for bypassing the item retrieval limit of 9,000 entities. When using this parameter, please note that the offset parameter will not be available, but the limit parameter will still work as expected."""  
    

@dataclasses.dataclass
class CollectionsSearchResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    collections: Optional[list[shared_collection.Collection]] = dataclasses.field(default=None)
    r"""OK. An array of collections"""  
    headers: Optional[dict[str, list[str]]] = dataclasses.field(default=None)  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    