"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import flight as shared_flight
from dataclasses_json import Undefined, dataclass_json
from datetime import date
from enum import Enum
from marshmallow import fields
from sdk import utils
from typing import Optional

class PricingCapCostTypeEnum(str, Enum):
    r"""Cap cost type of this inventory item."""
    PLANNING_PLACEMENT_CAP_COST_TYPE_NONE = 'PLANNING_PLACEMENT_CAP_COST_TYPE_NONE'
    PLANNING_PLACEMENT_CAP_COST_TYPE_MONTHLY = 'PLANNING_PLACEMENT_CAP_COST_TYPE_MONTHLY'
    PLANNING_PLACEMENT_CAP_COST_TYPE_CUMULATIVE = 'PLANNING_PLACEMENT_CAP_COST_TYPE_CUMULATIVE'

class PricingGroupTypeEnum(str, Enum):
    r"""Group type of this inventory item if it represents a placement group. Is null otherwise. There are two type of placement groups: PLANNING_PLACEMENT_GROUP_TYPE_PACKAGE is a simple group of inventory items that acts as a single pricing point for a group of tags. PLANNING_PLACEMENT_GROUP_TYPE_ROADBLOCK is a group of inventory items that not only acts as a single pricing point, but also assumes that all the tags in it will be served at the same time. A roadblock requires one of its assigned inventory items to be marked as primary."""
    PLANNING_PLACEMENT_GROUP_TYPE_PACKAGE = 'PLANNING_PLACEMENT_GROUP_TYPE_PACKAGE'
    PLANNING_PLACEMENT_GROUP_TYPE_ROADBLOCK = 'PLANNING_PLACEMENT_GROUP_TYPE_ROADBLOCK'

class PricingPricingTypeEnum(str, Enum):
    r"""Pricing type of this inventory item."""
    PLANNING_PLACEMENT_PRICING_TYPE_IMPRESSIONS = 'PLANNING_PLACEMENT_PRICING_TYPE_IMPRESSIONS'
    PLANNING_PLACEMENT_PRICING_TYPE_CPM = 'PLANNING_PLACEMENT_PRICING_TYPE_CPM'
    PLANNING_PLACEMENT_PRICING_TYPE_CLICKS = 'PLANNING_PLACEMENT_PRICING_TYPE_CLICKS'
    PLANNING_PLACEMENT_PRICING_TYPE_CPC = 'PLANNING_PLACEMENT_PRICING_TYPE_CPC'
    PLANNING_PLACEMENT_PRICING_TYPE_CPA = 'PLANNING_PLACEMENT_PRICING_TYPE_CPA'
    PLANNING_PLACEMENT_PRICING_TYPE_FLAT_RATE_IMPRESSIONS = 'PLANNING_PLACEMENT_PRICING_TYPE_FLAT_RATE_IMPRESSIONS'
    PLANNING_PLACEMENT_PRICING_TYPE_FLAT_RATE_CLICKS = 'PLANNING_PLACEMENT_PRICING_TYPE_FLAT_RATE_CLICKS'
    PLANNING_PLACEMENT_PRICING_TYPE_CPM_ACTIVEVIEW = 'PLANNING_PLACEMENT_PRICING_TYPE_CPM_ACTIVEVIEW'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Pricing:
    r"""Pricing Information"""
    
    cap_cost_type: Optional[PricingCapCostTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('capCostType'), 'exclude': lambda f: f is None }})
    r"""Cap cost type of this inventory item."""  
    end_date: Optional[date] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('endDate'), 'encoder': utils.dateisoformat(True), 'decoder': utils.datefromisoformat, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})  
    flights: Optional[list[shared_flight.Flight]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('flights'), 'exclude': lambda f: f is None }})
    r"""Flights of this inventory item. A flight (a.k.a. pricing period) represents the inventory item pricing information for a specific period of time."""  
    group_type: Optional[PricingGroupTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('groupType'), 'exclude': lambda f: f is None }})
    r"""Group type of this inventory item if it represents a placement group. Is null otherwise. There are two type of placement groups: PLANNING_PLACEMENT_GROUP_TYPE_PACKAGE is a simple group of inventory items that acts as a single pricing point for a group of tags. PLANNING_PLACEMENT_GROUP_TYPE_ROADBLOCK is a group of inventory items that not only acts as a single pricing point, but also assumes that all the tags in it will be served at the same time. A roadblock requires one of its assigned inventory items to be marked as primary."""  
    pricing_type: Optional[PricingPricingTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('pricingType'), 'exclude': lambda f: f is None }})
    r"""Pricing type of this inventory item."""  
    start_date: Optional[date] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('startDate'), 'encoder': utils.dateisoformat(True), 'decoder': utils.datefromisoformat, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})  
    