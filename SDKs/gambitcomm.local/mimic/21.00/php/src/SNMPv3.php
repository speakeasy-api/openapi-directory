<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class SNMPv3 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Adds a new access entry with the specified parameters.
     * 
     * Adds a new access entry with the specified parameters.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ProtocolSnmpv3AccessAddRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ProtocolSnmpv3AccessAddResponse
     */
	public function protocolSnmpv3AccessAdd(
        \OpenAPI\OpenAPI\Models\Operations\ProtocolSnmpv3AccessAddRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ProtocolSnmpv3AccessAddResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/mimic/agent/{agentNum}/protocol/msg/snmpv3/access/add/{groupName}/{prefix}/{securityModel}/{securityLevel}/{contextMatch}/{readView}/{writeView}/{notifyView}', \OpenAPI\OpenAPI\Models\Operations\ProtocolSnmpv3AccessAddRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ProtocolSnmpv3AccessAddResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $response->protocolSnmpv3AccessAdd200ApplicationJSONString = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
	
    /**
     * Clears all access entries.
     * 
     * Clears all access entries.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ProtocolSnmpv3AccessClearRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ProtocolSnmpv3AccessClearResponse
     */
	public function protocolSnmpv3AccessClear(
        \OpenAPI\OpenAPI\Models\Operations\ProtocolSnmpv3AccessClearRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ProtocolSnmpv3AccessClearResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/mimic/agent/{agentNum}/protocol/msg/snmpv3/access/clear', \OpenAPI\OpenAPI\Models\Operations\ProtocolSnmpv3AccessClearRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ProtocolSnmpv3AccessClearResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $response->protocolSnmpv3AccessClear200ApplicationJSONString = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
	
    /**
     * Deletes the specified access entry.
     * 
     * Deletes the specified access entry.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ProtocolSnmpv3AccessDelRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ProtocolSnmpv3AccessDelResponse
     */
	public function protocolSnmpv3AccessDel(
        \OpenAPI\OpenAPI\Models\Operations\ProtocolSnmpv3AccessDelRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ProtocolSnmpv3AccessDelResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/mimic/agent/{agentNum}/protocol/msg/snmpv3/access/del/{accessName}', \OpenAPI\OpenAPI\Models\Operations\ProtocolSnmpv3AccessDelRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ProtocolSnmpv3AccessDelResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $response->protocolSnmpv3AccessDel200ApplicationJSONString = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
	
    /**
     * Returns the current acccess entries as an array of strings.
     * 
     * Returns the current acccess entries as an array of strings.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ProtocolSnmpv3AccessListRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ProtocolSnmpv3AccessListResponse
     */
	public function protocolSnmpv3AccessList(
        \OpenAPI\OpenAPI\Models\Operations\ProtocolSnmpv3AccessListRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ProtocolSnmpv3AccessListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/mimic/agent/{agentNum}/protocol/msg/snmpv3/access/list', \OpenAPI\OpenAPI\Models\Operations\ProtocolSnmpv3AccessListRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ProtocolSnmpv3AccessListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->protocolSnmpv3AccessList200ApplicationJSONStrings = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
	
    /**
     * Returns the SNMPv3 configuration.
     * 
     * Returns the SNMPv3 configuration.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ProtocolSnmpv3GetConfigRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ProtocolSnmpv3GetConfigResponse
     */
	public function protocolSnmpv3GetConfig(
        \OpenAPI\OpenAPI\Models\Operations\ProtocolSnmpv3GetConfigRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ProtocolSnmpv3GetConfigResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/mimic/agent/{agentNum}/protocol/msg/snmpv3/get/config', \OpenAPI\OpenAPI\Models\Operations\ProtocolSnmpv3GetConfigRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ProtocolSnmpv3GetConfigResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->configSNMPv3 = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ConfigSNMPv3', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
	
    /**
     * Retrieves the contextEngineID for the agent instance.
     * 
     * Retrieves the contextEngineID for the agent instance.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ProtocolSnmpv3GetContextEngineidRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ProtocolSnmpv3GetContextEngineidResponse
     */
	public function protocolSnmpv3GetContextEngineid(
        \OpenAPI\OpenAPI\Models\Operations\ProtocolSnmpv3GetContextEngineidRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ProtocolSnmpv3GetContextEngineidResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/mimic/agent/{agentNum}/protocol/msg/snmpv3/get/context_engineid', \OpenAPI\OpenAPI\Models\Operations\ProtocolSnmpv3GetContextEngineidRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ProtocolSnmpv3GetContextEngineidResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $response->protocolSnmpv3GetContextEngineid200ApplicationJSONString = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
	
    /**
     * Retrieves the number of times the agent has been restarted.
     * 
     * Retrieves the number of times the agent has been restarted.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ProtocolSnmpv3GetEnginebootsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ProtocolSnmpv3GetEnginebootsResponse
     */
	public function protocolSnmpv3GetEngineboots(
        \OpenAPI\OpenAPI\Models\Operations\ProtocolSnmpv3GetEnginebootsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ProtocolSnmpv3GetEnginebootsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/mimic/agent/{agentNum}/protocol/msg/snmpv3/get/engineboots', \OpenAPI\OpenAPI\Models\Operations\ProtocolSnmpv3GetEnginebootsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ProtocolSnmpv3GetEnginebootsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->protocolSnmpv3GetEngineboots200ApplicationJSONInt32Integer = $serializer->deserialize((string)$httpResponse->getBody(), 'int', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
	
    /**
     * For started agents, retrieves the current engineID in use by the snmpv3 module.
     * 
     * For stopped agents, this operation is meaningless. If not explicitly set by the user then the autogenerated engineID is returned. The format of the engineID is in the familiar hex format, eg. \x01 23 45 67 89...
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ProtocolSnmpv3GetEngineidRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ProtocolSnmpv3GetEngineidResponse
     */
	public function protocolSnmpv3GetEngineid(
        \OpenAPI\OpenAPI\Models\Operations\ProtocolSnmpv3GetEngineidRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ProtocolSnmpv3GetEngineidResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/mimic/agent/{agentNum}/protocol/msg/snmpv3/get/engineid', \OpenAPI\OpenAPI\Models\Operations\ProtocolSnmpv3GetEngineidRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ProtocolSnmpv3GetEngineidResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $response->protocolSnmpv3GetEngineid200ApplicationJSONString = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
	
    /**
     * Retrieves the time in seconds for which the agent has been running.
     * 
     * Retrieves the time in seconds for which the agent has been running.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ProtocolSnmpv3GetEnginetimeRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ProtocolSnmpv3GetEnginetimeResponse
     */
	public function protocolSnmpv3GetEnginetime(
        \OpenAPI\OpenAPI\Models\Operations\ProtocolSnmpv3GetEnginetimeRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ProtocolSnmpv3GetEnginetimeResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/mimic/agent/{agentNum}/protocol/msg/snmpv3/get/enginetime', \OpenAPI\OpenAPI\Models\Operations\ProtocolSnmpv3GetEnginetimeRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ProtocolSnmpv3GetEnginetimeResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->protocolSnmpv3GetEnginetime200ApplicationJSONInt32Integer = $serializer->deserialize((string)$httpResponse->getBody(), 'int', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
	
    /**
     * Adds a new group entry with the specified parameters.
     * 
     * Adds a new group entry with the specified parameters.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ProtocolSnmpv3GroupAddRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ProtocolSnmpv3GroupAddResponse
     */
	public function protocolSnmpv3GroupAdd(
        \OpenAPI\OpenAPI\Models\Operations\ProtocolSnmpv3GroupAddRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ProtocolSnmpv3GroupAddResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/mimic/agent/{agentNum}/protocol/msg/snmpv3/group/add/{groupName}/{securityModel}/{securityName}', \OpenAPI\OpenAPI\Models\Operations\ProtocolSnmpv3GroupAddRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ProtocolSnmpv3GroupAddResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $response->protocolSnmpv3GroupAdd200ApplicationJSONString = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
	
    /**
     * Clears all group entries.
     * 
     * Clears all group entries.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ProtocolSnmpv3GroupClearRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ProtocolSnmpv3GroupClearResponse
     */
	public function protocolSnmpv3GroupClear(
        \OpenAPI\OpenAPI\Models\Operations\ProtocolSnmpv3GroupClearRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ProtocolSnmpv3GroupClearResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/mimic/agent/{agentNum}/protocol/msg/snmpv3/group/clear', \OpenAPI\OpenAPI\Models\Operations\ProtocolSnmpv3GroupClearRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ProtocolSnmpv3GroupClearResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $response->protocolSnmpv3GroupClear200ApplicationJSONString = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
	
    /**
     * Deletes the specified group entry.
     * 
     * Deletes the specified group entry.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ProtocolSnmpv3GroupDelRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ProtocolSnmpv3GroupDelResponse
     */
	public function protocolSnmpv3GroupDel(
        \OpenAPI\OpenAPI\Models\Operations\ProtocolSnmpv3GroupDelRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ProtocolSnmpv3GroupDelResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/mimic/agent/{agentNum}/protocol/msg/snmpv3/group/del/{groupName}', \OpenAPI\OpenAPI\Models\Operations\ProtocolSnmpv3GroupDelRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ProtocolSnmpv3GroupDelResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $response->protocolSnmpv3GroupDel200ApplicationJSONString = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
	
    /**
     * Returns the current group entries as an array of strings.
     * 
     * Returns the current group entries as an array of strings.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ProtocolSnmpv3GroupListRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ProtocolSnmpv3GroupListResponse
     */
	public function protocolSnmpv3GroupList(
        \OpenAPI\OpenAPI\Models\Operations\ProtocolSnmpv3GroupListRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ProtocolSnmpv3GroupListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/mimic/agent/{agentNum}/protocol/msg/snmpv3/group/list', \OpenAPI\OpenAPI\Models\Operations\ProtocolSnmpv3GroupListRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ProtocolSnmpv3GroupListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->protocolSnmpv3GroupList200ApplicationJSONStrings = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
	
    /**
     * Changes the SNMPv3 configuration.
     * 
     * Changes the SNMPv3 configuration.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ProtocolSnmpv3SetConfigRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ProtocolSnmpv3SetConfigResponse
     */
	public function protocolSnmpv3SetConfig(
        \OpenAPI\OpenAPI\Models\Operations\ProtocolSnmpv3SetConfigRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ProtocolSnmpv3SetConfigResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/mimic/agent/{agentNum}/protocol/msg/snmpv3/set/config/{parameter}/{value}', \OpenAPI\OpenAPI\Models\Operations\ProtocolSnmpv3SetConfigRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ProtocolSnmpv3SetConfigResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $response->protocolSnmpv3SetConfig200ApplicationJSONString = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
	
    /**
     * Adds a new user entry with the specified parameters.
     * 
     * Adds a new user entry with the specified parameters.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ProtocolSnmpv3UserAddRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ProtocolSnmpv3UserAddResponse
     */
	public function protocolSnmpv3UserAdd(
        \OpenAPI\OpenAPI\Models\Operations\ProtocolSnmpv3UserAddRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ProtocolSnmpv3UserAddResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/mimic/agent/{agentNum}/protocol/msg/snmpv3/user/add/{userName}/{securityName}/{authProtocol}/{authKey}/{privProtocol}/{privKey}', \OpenAPI\OpenAPI\Models\Operations\ProtocolSnmpv3UserAddRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ProtocolSnmpv3UserAddResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $response->protocolSnmpv3UserAdd200ApplicationJSONString = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
	
    /**
     * Clears all user entries.
     * 
     * Clears all user entries.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ProtocolSnmpv3UserClearRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ProtocolSnmpv3UserClearResponse
     */
	public function protocolSnmpv3UserClear(
        \OpenAPI\OpenAPI\Models\Operations\ProtocolSnmpv3UserClearRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ProtocolSnmpv3UserClearResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/mimic/agent/{agentNum}/protocol/msg/snmpv3/user/clear', \OpenAPI\OpenAPI\Models\Operations\ProtocolSnmpv3UserClearRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ProtocolSnmpv3UserClearResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $response->protocolSnmpv3UserClear200ApplicationJSONString = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
	
    /**
     * Deletes the specified user entry.
     * 
     * Deletes the specified user entry.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ProtocolSnmpv3UserDelRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ProtocolSnmpv3UserDelResponse
     */
	public function protocolSnmpv3UserDel(
        \OpenAPI\OpenAPI\Models\Operations\ProtocolSnmpv3UserDelRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ProtocolSnmpv3UserDelResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/mimic/agent/{agentNum}/protocol/msg/snmpv3/user/del/{userName}', \OpenAPI\OpenAPI\Models\Operations\ProtocolSnmpv3UserDelRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ProtocolSnmpv3UserDelResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $response->protocolSnmpv3UserDel200ApplicationJSONString = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
	
    /**
     * Returns the current user entries as a Tcl list.
     * 
     * Returns the current user entries as a Tcl list.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ProtocolSnmpv3UserListRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ProtocolSnmpv3UserListResponse
     */
	public function protocolSnmpv3UserList(
        \OpenAPI\OpenAPI\Models\Operations\ProtocolSnmpv3UserListRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ProtocolSnmpv3UserListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/mimic/agent/{agentNum}/protocol/msg/snmpv3/user/list', \OpenAPI\OpenAPI\Models\Operations\ProtocolSnmpv3UserListRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ProtocolSnmpv3UserListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->protocolSnmpv3UserList200ApplicationJSONStrings = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
	
    /**
     * Saves current user settings in the currently loaded USM config file.
     * 
     * Saves current user settings in the currently loaded USM config file.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ProtocolSnmpv3UsmSaveRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ProtocolSnmpv3UsmSaveResponse
     */
	public function protocolSnmpv3UsmSave(
        \OpenAPI\OpenAPI\Models\Operations\ProtocolSnmpv3UsmSaveRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ProtocolSnmpv3UsmSaveResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/mimic/agent/{agentNum}/protocol/msg/snmpv3/usm/save', \OpenAPI\OpenAPI\Models\Operations\ProtocolSnmpv3UsmSaveRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ProtocolSnmpv3UsmSaveResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->protocolSnmpv3UsmSave200ApplicationJSONStrings = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
	
    /**
     * Saves current user settings in the specified USM config file.
     * 
     * Saves current user settings in the specified USM config file.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ProtocolSnmpv3UsmSaveasRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ProtocolSnmpv3UsmSaveasResponse
     */
	public function protocolSnmpv3UsmSaveas(
        \OpenAPI\OpenAPI\Models\Operations\ProtocolSnmpv3UsmSaveasRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ProtocolSnmpv3UsmSaveasResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/mimic/agent/{agentNum}/protocol/msg/snmpv3/usm/saveas/{filename}', \OpenAPI\OpenAPI\Models\Operations\ProtocolSnmpv3UsmSaveasRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ProtocolSnmpv3UsmSaveasResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->protocolSnmpv3UsmSaveas200ApplicationJSONStrings = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
	
    /**
     * Saves current group, access, view settings in the currently loaded VACM config file.
     * 
     * Saves current group, access, view settings in the currently loaded VACM config file.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ProtocolSnmpv3VacmSaveRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ProtocolSnmpv3VacmSaveResponse
     */
	public function protocolSnmpv3VacmSave(
        \OpenAPI\OpenAPI\Models\Operations\ProtocolSnmpv3VacmSaveRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ProtocolSnmpv3VacmSaveResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/mimic/agent/{agentNum}/protocol/msg/snmpv3/vacm/save', \OpenAPI\OpenAPI\Models\Operations\ProtocolSnmpv3VacmSaveRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ProtocolSnmpv3VacmSaveResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->protocolSnmpv3VacmSave200ApplicationJSONStrings = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
	
    /**
     * Saves current group, access, view settings in the specified VACM config file.
     * 
     * Saves current group, access, view settings in the specified VACM config file.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ProtocolSnmpv3VacmSaveasRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ProtocolSnmpv3VacmSaveasResponse
     */
	public function protocolSnmpv3VacmSaveas(
        \OpenAPI\OpenAPI\Models\Operations\ProtocolSnmpv3VacmSaveasRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ProtocolSnmpv3VacmSaveasResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/mimic/agent/{agentNum}/protocol/msg/snmpv3/vacm/saveas/{filename}', \OpenAPI\OpenAPI\Models\Operations\ProtocolSnmpv3VacmSaveasRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ProtocolSnmpv3VacmSaveasResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->protocolSnmpv3VacmSaveas200ApplicationJSONStrings = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
	
    /**
     * Adds a new view entry with the specified parameters.
     * 
     * Adds a new view entry with the specified parameters.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ProtocolSnmpv3ViewAddRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ProtocolSnmpv3ViewAddResponse
     */
	public function protocolSnmpv3ViewAdd(
        \OpenAPI\OpenAPI\Models\Operations\ProtocolSnmpv3ViewAddRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ProtocolSnmpv3ViewAddResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/mimic/agent/{agentNum}/protocol/msg/snmpv3/view/add/{viewName}/{viewType}/{subtree}/{mask}', \OpenAPI\OpenAPI\Models\Operations\ProtocolSnmpv3ViewAddRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ProtocolSnmpv3ViewAddResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $response->protocolSnmpv3ViewAdd200ApplicationJSONString = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
	
    /**
     * Clears all view entries.
     * 
     * Clears all view entries.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ProtocolSnmpv3ViewClearRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ProtocolSnmpv3ViewClearResponse
     */
	public function protocolSnmpv3ViewClear(
        \OpenAPI\OpenAPI\Models\Operations\ProtocolSnmpv3ViewClearRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ProtocolSnmpv3ViewClearResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/mimic/agent/{agentNum}/protocol/msg/snmpv3/view/clear', \OpenAPI\OpenAPI\Models\Operations\ProtocolSnmpv3ViewClearRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ProtocolSnmpv3ViewClearResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $response->protocolSnmpv3ViewClear200ApplicationJSONString = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
	
    /**
     * Deletes the specified view entry.
     * 
     * Deletes the specified view entry.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ProtocolSnmpv3ViewDelRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ProtocolSnmpv3ViewDelResponse
     */
	public function protocolSnmpv3ViewDel(
        \OpenAPI\OpenAPI\Models\Operations\ProtocolSnmpv3ViewDelRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ProtocolSnmpv3ViewDelResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/mimic/agent/{agentNum}/protocol/msg/snmpv3/view/del/{viewName}', \OpenAPI\OpenAPI\Models\Operations\ProtocolSnmpv3ViewDelRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ProtocolSnmpv3ViewDelResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $response->protocolSnmpv3ViewDel200ApplicationJSONString = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
	
    /**
     * Returns the current view entries as an array of strings.
     * 
     * Returns the current view entries as an array of strings.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ProtocolSnmpv3ViewListRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ProtocolSnmpv3ViewListResponse
     */
	public function protocolSnmpv3ViewList(
        \OpenAPI\OpenAPI\Models\Operations\ProtocolSnmpv3ViewListRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ProtocolSnmpv3ViewListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/mimic/agent/{agentNum}/protocol/msg/snmpv3/view/list', \OpenAPI\OpenAPI\Models\Operations\ProtocolSnmpv3ViewListRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ProtocolSnmpv3ViewListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->protocolSnmpv3ViewList200ApplicationJSONStrings = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
}