// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package sdk

import (
	"context"
	"fmt"
	"net/http"
	"openapi/pkg/models/operations"
	"openapi/pkg/models/shared"
	"openapi/pkg/utils"
)

type pricesAndFixedPrices struct {
	defaultClient  HTTPClient
	securityClient HTTPClient
	serverURL      string
	language       string
	sdkVersion     string
	genVersion     string
}

func newPricesAndFixedPrices(defaultClient, securityClient HTTPClient, serverURL, language, sdkVersion, genVersion string) *pricesAndFixedPrices {
	return &pricesAndFixedPrices{
		defaultClient:  defaultClient,
		securityClient: securityClient,
		serverURL:      serverURL,
		language:       language,
		sdkVersion:     sdkVersion,
		genVersion:     genVersion,
	}
}

// CreateUpdatePriceOrFixedPrice - Create or Update Base Price or Fixed Prices
// Creates or updates an SKU Base Price or Fixed Prices. The **base price** is the basic selling price of a product, it comprises the cost price and the markup wanted in the sale of the product. The **fixed price** is an optional price of the SKU for a specific trade policy with a specific minimum quantity to be activated.
//
//	<p> You may optionally set a list price. Additionally, you may set either a cost price or a markup value. By defining either one of them, the other will be calculated to conform to the formula <code>costPrice * (1 + markup) = basePrice</code>.</p> <h2>Request body example</h2>
//
// ```json
//
//	{
//	    "markup": 30,
//	    "basePrice": 100,
//	    "listPrice": 35,
//	    "fixedPrices": [
//	        {
//	            "tradePolicyId": "1",
//	            "value": 31,
//	            "listPrice": 32,
//	            "minQuantity": 1,
//	            "dateRange": {
//	                "from": "2022-05-21T22:00:00Z",
//	                "to": "2023-05-28T22:00:00Z"
//	            }
//	        },
//	        {
//	            "tradePolicyId": "1",
//	            "value": 31.5,
//	            "listPrice": 33,
//	            "minQuantity": 2
//	        }
//	    ]
//	}
//
// ```
func (s *pricesAndFixedPrices) CreateUpdatePriceOrFixedPrice(ctx context.Context, request operations.CreateUpdatePriceOrFixedPriceRequest) (*operations.CreateUpdatePriceOrFixedPriceResponse, error) {
	baseURL := s.serverURL
	url, err := utils.GenerateURL(ctx, baseURL, "/pricing/prices/{itemId}", request, nil)
	if err != nil {
		return nil, fmt.Errorf("error generating URL: %w", err)
	}

	bodyReader, reqContentType, err := utils.SerializeRequestBody(ctx, request, "RequestBody", "json")
	if err != nil {
		return nil, fmt.Errorf("error serializing request body: %w", err)
	}

	req, err := http.NewRequestWithContext(ctx, "PUT", url, bodyReader)
	if err != nil {
		return nil, fmt.Errorf("error creating request: %w", err)
	}

	req.Header.Set("Content-Type", reqContentType)

	utils.PopulateHeaders(ctx, req, request)

	client := s.securityClient

	httpRes, err := client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %w", err)
	}
	if httpRes == nil {
		return nil, fmt.Errorf("error sending request: no response")
	}
	defer httpRes.Body.Close()

	contentType := httpRes.Header.Get("Content-Type")

	res := &operations.CreateUpdatePriceOrFixedPriceResponse{
		StatusCode:  httpRes.StatusCode,
		ContentType: contentType,
		RawResponse: httpRes,
	}
	switch {
	case httpRes.StatusCode == 200:
	}

	return res, nil
}

// DeletePrice - Delete Price
// Deletes the Base Price and all available Fixed Prices for an SKU in all trade policies.
func (s *pricesAndFixedPrices) DeletePrice(ctx context.Context, request operations.DeletePriceRequest) (*operations.DeletePriceResponse, error) {
	baseURL := s.serverURL
	url, err := utils.GenerateURL(ctx, baseURL, "/pricing/prices/{itemId}", request, nil)
	if err != nil {
		return nil, fmt.Errorf("error generating URL: %w", err)
	}

	req, err := http.NewRequestWithContext(ctx, "DELETE", url, nil)
	if err != nil {
		return nil, fmt.Errorf("error creating request: %w", err)
	}

	utils.PopulateHeaders(ctx, req, request)

	client := s.securityClient

	httpRes, err := client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %w", err)
	}
	if httpRes == nil {
		return nil, fmt.Errorf("error sending request: no response")
	}
	defer httpRes.Body.Close()

	contentType := httpRes.Header.Get("Content-Type")

	res := &operations.DeletePriceResponse{
		StatusCode:  httpRes.StatusCode,
		ContentType: contentType,
		RawResponse: httpRes,
	}
	switch {
	case httpRes.StatusCode == 200:
	}

	return res, nil
}

// Deletefixedpricesonapricetableortradepolicy - Delete Fixed Prices on a price table or trade policy
// Deletes all Fixed Prices of an SKU in a specific Price Table or Trade Policy.
func (s *pricesAndFixedPrices) Deletefixedpricesonapricetableortradepolicy(ctx context.Context, request operations.DeletefixedpricesonapricetableortradepolicyRequest) (*operations.DeletefixedpricesonapricetableortradepolicyResponse, error) {
	baseURL := s.serverURL
	url, err := utils.GenerateURL(ctx, baseURL, "/pricing/prices/{itemId}/fixed/{priceTableId}", request, nil)
	if err != nil {
		return nil, fmt.Errorf("error generating URL: %w", err)
	}

	req, err := http.NewRequestWithContext(ctx, "DELETE", url, nil)
	if err != nil {
		return nil, fmt.Errorf("error creating request: %w", err)
	}

	utils.PopulateHeaders(ctx, req, request)

	client := s.securityClient

	httpRes, err := client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %w", err)
	}
	if httpRes == nil {
		return nil, fmt.Errorf("error sending request: no response")
	}
	defer httpRes.Body.Close()

	contentType := httpRes.Header.Get("Content-Type")

	res := &operations.DeletefixedpricesonapricetableortradepolicyResponse{
		StatusCode:  httpRes.StatusCode,
		ContentType: contentType,
		RawResponse: httpRes,
	}
	switch {
	case httpRes.StatusCode == 200:
	}

	return res, nil
}

// GetComputedPricebypricetable - Get Computed Price by price table or trade policy
// Gets the Computed Price, which is the price after all the steps in the Pricing pipeline, for an SKU in a specific price table or trade policy.
//
// ## Response body example
//
// ```json
//
//	{
//	    "tradePolicyId": "1",
//	    "listPrice": 30,
//	    "costPrice": 76.92,
//	    "sellingPrice": 18.9,
//	    "priceValidUntil": "2018-12-20T18:12:14Z"
//	}
//
// ```
func (s *pricesAndFixedPrices) GetComputedPricebypricetable(ctx context.Context, request operations.GetComputedPricebypricetableRequest, opts ...operations.Option) (*operations.GetComputedPricebypricetableResponse, error) {
	o := operations.Options{}
	supportedOptions := []string{
		operations.SupportedOptionServerURL,
	}

	for _, opt := range opts {
		if err := opt(&o, supportedOptions...); err != nil {
			return nil, fmt.Errorf("error applying option: %w", err)
		}
	}
	baseURL := operations.GetComputedPricebypricetableServerList[0]
	if o.ServerURL != nil {
		baseURL = *o.ServerURL
	}

	url, err := utils.GenerateURL(ctx, baseURL, "/pricing/prices/{itemId}/computed/{priceTableId}", request, nil)
	if err != nil {
		return nil, fmt.Errorf("error generating URL: %w", err)
	}

	req, err := http.NewRequestWithContext(ctx, "GET", url, nil)
	if err != nil {
		return nil, fmt.Errorf("error creating request: %w", err)
	}

	utils.PopulateHeaders(ctx, req, request)

	if err := utils.PopulateQueryParams(ctx, req, request, nil); err != nil {
		return nil, fmt.Errorf("error populating query params: %w", err)
	}

	client := s.securityClient

	httpRes, err := client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %w", err)
	}
	if httpRes == nil {
		return nil, fmt.Errorf("error sending request: no response")
	}
	defer httpRes.Body.Close()

	contentType := httpRes.Header.Get("Content-Type")

	res := &operations.GetComputedPricebypricetableResponse{
		StatusCode:  httpRes.StatusCode,
		ContentType: contentType,
		RawResponse: httpRes,
	}
	switch {
	case httpRes.StatusCode == 200:
		switch {
		case utils.MatchContentType(contentType, `application/json; charset=utf-8`):
			var out *shared.Getcomputedprice
			if err := utils.UnmarshalJsonFromResponseBody(httpRes.Body, &out); err != nil {
				return nil, err
			}

			res.Getcomputedprice = out
		}
	}

	return res, nil
}

// GetFixedPrices - Get Fixed Prices
// The **fixed price** is an optional price of the SKU for a specific trade policy with a specific minimum quantity to be activated. This method retrieves an array of Fixed Prices for an SKU in a Trade Policy with Minimum Quantities.
//
//	The default value for a Minimum Quantity is `1`. This means a Fixed Price will be valid for a SKU in a Trade Policy for orders containing the specified number of Minimum Quantity or above, unless a higher Minimum Quantity is specified.
//
//	Fixed prices may, optionally, be scheduled. If so, these objects will contain the `dateRange` object with `from` and `to` properties, indicating the start and end time of the scheduled fixed price in the RFC3339 timestamp format (`YYYY-MM-DDT23:59:60Z`).
//
//	Note that the 'Z', at the end, represents the UTC time (GMT+00:00). If it was in GMT-03:00, for example, it would be (`YYYY-MM-DDT23:59:60-03:00`).
//
//	## Response body example
//
// ```json
// [
//
//	{
//	    "tradePolicyId": "6",
//	    "value": 20.9,
//	    "listPrice": 22.9,
//	    "minQuantity": 1,
//	    "dateRange": {
//	        "from": "2021-12-30T22:00:00-03:00",
//	        "to": "2021-12-30T22:00:00-03:00"
//	    }
//	},
//	{
//	    "tradePolicyId": "1",
//	    "value": 18.9,
//	    "listPrice": null,
//	    "minQuantity": 1,
//	    "dateRange": {
//	        "from": "2021-12-30T22:00:00-03:00",
//	        "to": "2021-12-30T22:00:00-03:00"
//	    }
//	}
//
// ]
// ```
func (s *pricesAndFixedPrices) GetFixedPrices(ctx context.Context, request operations.GetFixedPricesRequest) (*operations.GetFixedPricesResponse, error) {
	baseURL := s.serverURL
	url, err := utils.GenerateURL(ctx, baseURL, "/pricing/prices/{itemId}/fixed", request, nil)
	if err != nil {
		return nil, fmt.Errorf("error generating URL: %w", err)
	}

	req, err := http.NewRequestWithContext(ctx, "GET", url, nil)
	if err != nil {
		return nil, fmt.Errorf("error creating request: %w", err)
	}

	utils.PopulateHeaders(ctx, req, request)

	client := s.securityClient

	httpRes, err := client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %w", err)
	}
	if httpRes == nil {
		return nil, fmt.Errorf("error sending request: no response")
	}
	defer httpRes.Body.Close()

	contentType := httpRes.Header.Get("Content-Type")

	res := &operations.GetFixedPricesResponse{
		StatusCode:  httpRes.StatusCode,
		ContentType: contentType,
		RawResponse: httpRes,
	}
	switch {
	case httpRes.StatusCode == 200:
		switch {
		case utils.MatchContentType(contentType, `application/json; charset=utf-8`):
			var out []shared.FixedPrice
			if err := utils.UnmarshalJsonFromResponseBody(httpRes.Body, &out); err != nil {
				return nil, err
			}

			res.FixedPrices = out
		}
	}

	return res, nil
}

// GetFixedPricesonapricetable - Get Fixed Prices on a price table or trade policy
// Retrieves all Fixed Prices on a price table or trade policy.
//
// ## Response body example
//
// ```json
// [
//
//	{
//	    "tradePolicyId": "6",
//	    "value": 20.9,
//	    "listPrice": 22.9,
//	    "minQuantity": 1,
//	    "dateRange": {
//	        "from": "2021-12-30T22:00:00-03:00",
//	        "to": "2021-12-30T22:00:00-04:00"
//	    }
//	},
//	{
//	    "tradePolicyId": "1",
//	    "value": 18.9,
//	    "listPrice": null,
//	    "minQuantity": 1
//	}
//
// ]
// ```
func (s *pricesAndFixedPrices) GetFixedPricesonapricetable(ctx context.Context, request operations.GetFixedPricesonapricetableRequest) (*operations.GetFixedPricesonapricetableResponse, error) {
	baseURL := s.serverURL
	url, err := utils.GenerateURL(ctx, baseURL, "/pricing/prices/{itemId}/fixed/{priceTableId}", request, nil)
	if err != nil {
		return nil, fmt.Errorf("error generating URL: %w", err)
	}

	req, err := http.NewRequestWithContext(ctx, "GET", url, nil)
	if err != nil {
		return nil, fmt.Errorf("error creating request: %w", err)
	}

	utils.PopulateHeaders(ctx, req, request)

	client := s.securityClient

	httpRes, err := client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %w", err)
	}
	if httpRes == nil {
		return nil, fmt.Errorf("error sending request: no response")
	}
	defer httpRes.Body.Close()

	contentType := httpRes.Header.Get("Content-Type")

	res := &operations.GetFixedPricesonapricetableResponse{
		StatusCode:  httpRes.StatusCode,
		ContentType: contentType,
		RawResponse: httpRes,
	}
	switch {
	case httpRes.StatusCode == 200:
		switch {
		case utils.MatchContentType(contentType, `application/json; charset=utf-8`):
			var out []shared.FixedPrice
			if err := utils.UnmarshalJsonFromResponseBody(httpRes.Body, &out); err != nil {
				return nil, err
			}

			res.FixedPrices = out
		}
	}

	return res, nil
}

// GetPrice - Get Price
// Retrieves price data given a specific SKU ID. Within the `fixedPrices` object, there might be a list of prices for specific Trade Policies and Minimium Quantities of the SKU. Fixed Prices may also be scheduled.
//
//	## Response body example
//
// ```json
//
//	{
//	    "itemId": "1",
//	    "listPrice": 50,
//	    "costPrice": 90,
//	    "markup": 30,
//	    "basePrice": 117,
//	    "fixedPrices": [
//	        {
//	            "tradePolicyId": "1",
//	            "value": 50.5,
//	            "listPrice": 50.5,
//	            "minQuantity": 2,
//	            "dateRange": {
//	                "from": "2021-12-31T01:00:00Z",
//	                "to": "2022-12-31T01:00:00Z"
//	            }
//	        },
//	        {
//	            "tradePolicyId": "2",
//	            "value": 30,
//	            "listPrice": 50,
//	            "minQuantity": 2
//	        }
//	    ]
//	}
//
// ```
func (s *pricesAndFixedPrices) GetPrice(ctx context.Context, request operations.GetPriceRequest) (*operations.GetPriceResponse, error) {
	baseURL := s.serverURL
	url, err := utils.GenerateURL(ctx, baseURL, "/pricing/prices/{itemId}", request, nil)
	if err != nil {
		return nil, fmt.Errorf("error generating URL: %w", err)
	}

	req, err := http.NewRequestWithContext(ctx, "GET", url, nil)
	if err != nil {
		return nil, fmt.Errorf("error creating request: %w", err)
	}

	utils.PopulateHeaders(ctx, req, request)

	client := s.securityClient

	httpRes, err := client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %w", err)
	}
	if httpRes == nil {
		return nil, fmt.Errorf("error sending request: no response")
	}
	defer httpRes.Body.Close()

	contentType := httpRes.Header.Get("Content-Type")

	res := &operations.GetPriceResponse{
		StatusCode:  httpRes.StatusCode,
		ContentType: contentType,
		RawResponse: httpRes,
	}
	switch {
	case httpRes.StatusCode == 200:
		switch {
		case utils.MatchContentType(contentType, `application/json`):
			var out *shared.Getprice
			if err := utils.UnmarshalJsonFromResponseBody(httpRes.Body, &out); err != nil {
				return nil, err
			}

			res.Getprice = out
		}
	}

	return res, nil
}

// Createorupdatefixedpricesonpricetableortradepolicy - Create or Update Fixed Prices on a price table or trade policy
// Creates or updates the fixed prices of an SKU for a specific price table or trade policy. You can add one or multiple fixed prices per SKU.
//
//	## Request body example
//
// ```json
// [
//
//	{
//	  "value": 50.5,
//	  "listPrice": 50.5,
//	  "minQuantity": 2,
//	  "dateRange": {
//	    "from": "2021-12-30T22:00:00-03:00",
//	    "to": "2021-12-30T22:00:00-04:00"
//	  }
//	}
//
// ]
// ```
func (s *pricesAndFixedPrices) Createorupdatefixedpricesonpricetableortradepolicy(ctx context.Context, request operations.CreateorupdatefixedpricesonpricetableortradepolicyRequest) (*operations.CreateorupdatefixedpricesonpricetableortradepolicyResponse, error) {
	baseURL := s.serverURL
	url, err := utils.GenerateURL(ctx, baseURL, "/pricing/prices/{itemId}/fixed/{priceTableId}", request, nil)
	if err != nil {
		return nil, fmt.Errorf("error generating URL: %w", err)
	}

	bodyReader, reqContentType, err := utils.SerializeRequestBody(ctx, request, "RequestBody", "json")
	if err != nil {
		return nil, fmt.Errorf("error serializing request body: %w", err)
	}

	req, err := http.NewRequestWithContext(ctx, "POST", url, bodyReader)
	if err != nil {
		return nil, fmt.Errorf("error creating request: %w", err)
	}

	req.Header.Set("Content-Type", reqContentType)

	utils.PopulateHeaders(ctx, req, request)

	client := s.securityClient

	httpRes, err := client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %w", err)
	}
	if httpRes == nil {
		return nil, fmt.Errorf("error sending request: no response")
	}
	defer httpRes.Body.Close()

	contentType := httpRes.Header.Get("Content-Type")

	res := &operations.CreateorupdatefixedpricesonpricetableortradepolicyResponse{
		StatusCode:  httpRes.StatusCode,
		ContentType: contentType,
		RawResponse: httpRes,
	}
	switch {
	case httpRes.StatusCode == 200:
	}

	return res, nil
}
