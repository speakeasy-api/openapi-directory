// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// CreateFacetRequestBodyObjectTypeEnum - <p>Specifies whether a given object created from this facet is of type node, leaf node, policy or index.</p> <ul> <li> <p>Node: Can have multiple children but one parent.</p> </li> </ul> <ul> <li> <p>Leaf node: Cannot have children but can have multiple parents.</p> </li> </ul> <ul> <li> <p>Policy: Allows you to store a policy document and policy type. For more information, see <a href="http://docs.aws.amazon.com/directoryservice/latest/admin-guide/cd_key_concepts.html#policies">Policies</a>.</p> </li> </ul> <ul> <li> <p>Index: Can be created with the Index API.</p> </li> </ul>
type CreateFacetRequestBodyObjectTypeEnum string

const (
	CreateFacetRequestBodyObjectTypeEnumNode     CreateFacetRequestBodyObjectTypeEnum = "NODE"
	CreateFacetRequestBodyObjectTypeEnumLeafNode CreateFacetRequestBodyObjectTypeEnum = "LEAF_NODE"
	CreateFacetRequestBodyObjectTypeEnumPolicy   CreateFacetRequestBodyObjectTypeEnum = "POLICY"
	CreateFacetRequestBodyObjectTypeEnumIndex    CreateFacetRequestBodyObjectTypeEnum = "INDEX"
)

func (e CreateFacetRequestBodyObjectTypeEnum) ToPointer() *CreateFacetRequestBodyObjectTypeEnum {
	return &e
}

func (e *CreateFacetRequestBodyObjectTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "NODE":
		fallthrough
	case "LEAF_NODE":
		fallthrough
	case "POLICY":
		fallthrough
	case "INDEX":
		*e = CreateFacetRequestBodyObjectTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateFacetRequestBodyObjectTypeEnum: %v", v)
	}
}

type CreateFacetRequestBody struct {
	// The attributes that are associated with the <a>Facet</a>.
	Attributes []shared.FacetAttribute `json:"Attributes,omitempty"`
	// The name of the <a>Facet</a>, which is unique for a given schema.
	Name string `json:"Name"`
	// <p>Specifies whether a given object created from this facet is of type node, leaf node, policy or index.</p> <ul> <li> <p>Node: Can have multiple children but one parent.</p> </li> </ul> <ul> <li> <p>Leaf node: Cannot have children but can have multiple parents.</p> </li> </ul> <ul> <li> <p>Policy: Allows you to store a policy document and policy type. For more information, see <a href="http://docs.aws.amazon.com/directoryservice/latest/admin-guide/cd_key_concepts.html#policies">Policies</a>.</p> </li> </ul> <ul> <li> <p>Index: Can be created with the Index API.</p> </li> </ul>
	ObjectType CreateFacetRequestBodyObjectTypeEnum `json:"ObjectType"`
}

type CreateFacetRequest struct {
	RequestBody       CreateFacetRequestBody `request:"mediaType=application/json"`
	XAmzAlgorithm     *string                `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string                `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string                `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string                `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string                `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string                `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string                `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	// The schema ARN in which the new <a>Facet</a> will be created. For more information, see <a>arns</a>.
	XAmzDataPartition string `header:"style=simple,explode=false,name=x-amz-data-partition"`
}

type CreateFacetResponse struct {
	// AccessDeniedException
	AccessDeniedException *shared.AccessDeniedException
	ContentType           string
	// Success
	CreateFacetResponse map[string]interface{}
	// FacetAlreadyExistsException
	FacetAlreadyExistsException *shared.FacetAlreadyExistsException
	// FacetValidationException
	FacetValidationException *shared.FacetValidationException
	// InternalServiceException
	InternalServiceException *shared.InternalServiceException
	// InvalidArnException
	InvalidArnException *shared.InvalidArnException
	// InvalidRuleException
	InvalidRuleException *shared.InvalidRuleException
	// LimitExceededException
	LimitExceededException *shared.LimitExceededException
	StatusCode             int
	RawResponse            *http.Response
	// ResourceNotFoundException
	ResourceNotFoundException *shared.ResourceNotFoundException
	// RetryableConflictException
	RetryableConflictException *shared.RetryableConflictException
	// ValidationException
	ValidationException *shared.ValidationException
}
