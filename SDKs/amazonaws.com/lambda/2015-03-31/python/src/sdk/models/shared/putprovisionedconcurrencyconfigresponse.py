"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import provisionedconcurrencystatusenum_enum as shared_provisionedconcurrencystatusenum_enum
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PutProvisionedConcurrencyConfigResponse:
    r"""Success"""
    
    allocated_provisioned_concurrent_executions: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AllocatedProvisionedConcurrentExecutions'), 'exclude': lambda f: f is None }})  
    available_provisioned_concurrent_executions: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AvailableProvisionedConcurrentExecutions'), 'exclude': lambda f: f is None }})  
    last_modified: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('LastModified'), 'exclude': lambda f: f is None }})  
    requested_provisioned_concurrent_executions: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('RequestedProvisionedConcurrentExecutions'), 'exclude': lambda f: f is None }})  
    status: Optional[shared_provisionedconcurrencystatusenum_enum.ProvisionedConcurrencyStatusEnumEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Status'), 'exclude': lambda f: f is None }})  
    status_reason: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('StatusReason'), 'exclude': lambda f: f is None }})  
    