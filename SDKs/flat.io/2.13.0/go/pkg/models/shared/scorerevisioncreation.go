// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// ScoreRevisionCreationDataEncodingEnum - The optional encoding of the score data. This property must match the encoding used for the `data` property.
type ScoreRevisionCreationDataEncodingEnum string

const (
	ScoreRevisionCreationDataEncodingEnumBase64 ScoreRevisionCreationDataEncodingEnum = "base64"
)

func (e *ScoreRevisionCreationDataEncodingEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "base64":
		*e = ScoreRevisionCreationDataEncodingEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ScoreRevisionCreationDataEncodingEnum: %s", s)
	}
}

// ScoreRevisionCreation - A new created revision
type ScoreRevisionCreation struct {
	// Must be set to `true` if the revision was created automatically.
	//
	Autosave *bool `json:"autosave,omitempty"`
	// The data of the score file. It must be a MusicXML 3 file (`vnd.recordare.musicxml` or `vnd.recordare.musicxml+xml`), a MIDI file (`audio/midi`) or a Flat.json (aka Adagio.json) file.
	// Binary payloads (`vnd.recordare.musicxml` and `audio/midi`) can be encoded in Base64, in this case the `dataEncoding` property must match the encoding used for the API request.
	//
	Data string `json:"data"`
	// The optional encoding of the score data. This property must match the encoding used for the `data` property.
	DataEncoding *ScoreRevisionCreationDataEncodingEnum `json:"dataEncoding,omitempty"`
	// A description associated to the revision
	Description *string `json:"description,omitempty"`
}
