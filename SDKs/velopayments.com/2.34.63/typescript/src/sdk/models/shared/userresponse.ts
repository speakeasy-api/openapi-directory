/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { Role } from "./role";
import { Expose, Transform, Type } from "class-transformer";

/**
 * The status of the MFA device
 */
export enum UserResponseMfaStatusEnum {
  Registered = "REGISTERED",
  Unregistered = "UNREGISTERED",
}

/**
 * The type of the MFA device
 */
export enum UserResponseMfaTypeEnum {
  Sms = "SMS",
  Yubikey = "YUBIKEY",
  Totp = "TOTP",
}

/**
 * The status of the user
 *
 * @remarks
 * when the user has been invited but not yet enrolled they will have a PENDING status
 *
 */
export enum UserResponseStatusEnum {
  Enabled = "ENABLED",
  Disabled = "DISABLED",
  Pending = "PENDING",
}

/**
 * Indicates the type of user. Could be BACKOFFICE, PAYOR or PAYEE.
 */
export enum UserResponseUserTypeEnum {
  Backoffice = "BACKOFFICE",
  Payor = "PAYOR",
  Payee = "PAYEE",
}

/**
 * Get User Details
 */
export class UserResponse extends SpeakeasyBase {
  /**
   * The payor or payee company name or null if the user is not a payor or payee user
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "companyName" })
  companyName?: string;

  /**
   * the email address of the user
   */
  @SpeakeasyMetadata()
  @Expose({ name: "email" })
  email?: string;

  /**
   * The payorId or payeeId or null if the user is not a payor or payee user
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "entityId" })
  entityId?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "firstName" })
  firstName?: string;

  /**
   * The id of the user
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "lastName" })
  lastName?: string;

  /**
   * If true the user is currently locked out and unable to log in
   */
  @SpeakeasyMetadata()
  @Expose({ name: "lockedOut" })
  lockedOut?: boolean;

  /**
   * A timestamp showing when the user was locked out
   *
   * @remarks
   * If null then the user is not currently locked out
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "lockedOutTimestamp" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  lockedOutTimestamp?: Date;

  /**
   * The status of the MFA device
   */
  @SpeakeasyMetadata()
  @Expose({ name: "mfaStatus" })
  mfaStatus?: UserResponseMfaStatusEnum;

  /**
   * The type of the MFA device
   */
  @SpeakeasyMetadata()
  @Expose({ name: "mfaType" })
  mfaType?: UserResponseMfaTypeEnum;

  /**
   * The main contact number for the user
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "primaryContactNumber" })
  primaryContactNumber?: string;

  /**
   * The role(s) for the user
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata({ elemType: Role })
  @Expose({ name: "roles" })
  @Type(() => Role)
  roles?: Role[];

  /**
   * The secondary contact number for the user
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "secondaryContactNumber" })
  secondaryContactNumber?: string;

  /**
   * The phone number of a device that the user can receive sms messages on
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "smsNumber" })
  smsNumber?: string;

  /**
   * The status of the user
   *
   * @remarks
   * when the user has been invited but not yet enrolled they will have a PENDING status
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "status" })
  status?: UserResponseStatusEnum;

  /**
   * Indicates the type of user. Could be BACKOFFICE, PAYOR or PAYEE.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "userType" })
  userType?: UserResponseUserTypeEnum;
}
