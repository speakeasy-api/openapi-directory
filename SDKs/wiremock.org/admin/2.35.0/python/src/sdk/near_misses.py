"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations
from typing import Optional

class NearMisses:
    r"""Near misses allow querying of received requests or request patterns according to similarity
    http://wiremock.org/docs/verifying/#near-misses - User documentation
    """
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def get_admin_requests_unmatched_near_misses(self) -> operations.GetAdminRequestsUnmatchedNearMissesResponse:
        r"""Retrieve near-misses for all unmatched requests"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/__admin/requests/unmatched/near-misses'
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetAdminRequestsUnmatchedNearMissesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetAdminRequestsUnmatchedNearMisses200ApplicationJSON])
                res.get_admin_requests_unmatched_near_misses_200_application_json_object = out

        return res

    def post_admin_near_misses_request(self, request: operations.PostAdminNearMissesRequestRequestBody) -> operations.PostAdminNearMissesRequestResponse:
        r"""Find near misses matching specific request
        Find at most 3 near misses for closest stub mappings to the specified request
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/__admin/near-misses/request'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostAdminNearMissesRequestResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.PostAdminNearMissesRequest200ApplicationJSON])
                res.post_admin_near_misses_request_200_application_json_object = out

        return res

    def post_admin_near_misses_request_pattern(self, request: operations.PostAdminNearMissesRequestPatternRequestBody) -> operations.PostAdminNearMissesRequestPatternResponse:
        r"""Find near misses matching request pattern
        Find at most 3 near misses for closest logged requests to the specified request pattern
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/__admin/near-misses/request-pattern'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostAdminNearMissesRequestPatternResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.PostAdminNearMissesRequestPattern200ApplicationJSON])
                res.post_admin_near_misses_request_pattern_200_application_json_object = out

        return res

    