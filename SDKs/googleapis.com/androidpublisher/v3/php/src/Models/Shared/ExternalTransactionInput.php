<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Shared;


/**
 * ExternalTransactionInput - The details of an external transaction.
 * 
 * @package OpenAPI\OpenAPI\Models\Shared
 * @access public
 */
class ExternalTransactionInput
{
    /**
     * Definition of a price, i.e. currency and units.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\Price $currentPreTaxAmount
     */
	#[\JMS\Serializer\Annotation\SerializedName('currentPreTaxAmount')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\Price')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?Price $currentPreTaxAmount = null;
    
    /**
     * Definition of a price, i.e. currency and units.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\Price $currentTaxAmount
     */
	#[\JMS\Serializer\Annotation\SerializedName('currentTaxAmount')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\Price')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?Price $currentTaxAmount = null;
    
    /**
     * Represents a one-time transaction.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\OneTimeExternalTransaction $oneTimeTransaction
     */
	#[\JMS\Serializer\Annotation\SerializedName('oneTimeTransaction')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\OneTimeExternalTransaction')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?OneTimeExternalTransaction $oneTimeTransaction = null;
    
    /**
     * Definition of a price, i.e. currency and units.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\Price $originalPreTaxAmount
     */
	#[\JMS\Serializer\Annotation\SerializedName('originalPreTaxAmount')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\Price')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?Price $originalPreTaxAmount = null;
    
    /**
     * Definition of a price, i.e. currency and units.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\Price $originalTaxAmount
     */
	#[\JMS\Serializer\Annotation\SerializedName('originalTaxAmount')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\Price')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?Price $originalTaxAmount = null;
    
    /**
     * Represents a transaction that is part of a recurring series of payments. This can be a subscription or a one-time product with multiple payments (such as preorder).
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\RecurringExternalTransaction $recurringTransaction
     */
	#[\JMS\Serializer\Annotation\SerializedName('recurringTransaction')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\RecurringExternalTransaction')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?RecurringExternalTransaction $recurringTransaction = null;
    
    /**
     * Represents a transaction performed using a test account. These transactions will not be charged by Google.
     * 
     * @var ?array<string, mixed> $testPurchase
     */
	#[\JMS\Serializer\Annotation\SerializedName('testPurchase')]
    #[\JMS\Serializer\Annotation\Type('array<string, mixed>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $testPurchase = null;
    
    /**
     * Required. The time when the transaction was completed.
     * 
     * @var ?string $transactionTime
     */
	#[\JMS\Serializer\Annotation\SerializedName('transactionTime')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $transactionTime = null;
    
    /**
     * User's address for the external transaction.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\ExternalTransactionAddress $userTaxAddress
     */
	#[\JMS\Serializer\Annotation\SerializedName('userTaxAddress')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\ExternalTransactionAddress')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?ExternalTransactionAddress $userTaxAddress = null;
    
	public function __construct()
	{
		$this->currentPreTaxAmount = null;
		$this->currentTaxAmount = null;
		$this->oneTimeTransaction = null;
		$this->originalPreTaxAmount = null;
		$this->originalTaxAmount = null;
		$this->recurringTransaction = null;
		$this->testPurchase = null;
		$this->transactionTime = null;
		$this->userTaxAddress = null;
	}
}
