"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import advancedrecognitionsetting as shared_advancedrecognitionsetting
from ..shared import grammarslottypesetting as shared_grammarslottypesetting
from ..shared import slottypevalue as shared_slottypevalue
from ..shared import slotvalueregexfilter as shared_slotvalueregexfilter
from ..shared import slotvalueresolutionstrategy_enum as shared_slotvalueresolutionstrategy_enum
from ..shared import subslottypecomposition as shared_subslottypecomposition
from ..shared import updateslottyperesponse as shared_updateslottyperesponse
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Any, Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateSlotTypeRequestBodyCompositeSlotTypeSetting:
    r"""A composite slot is a combination of two or more slots that capture multiple pieces of information in a single user input."""
    
    sub_slots: Optional[list[shared_subslottypecomposition.SubSlotTypeComposition]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('subSlots'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateSlotTypeRequestBodyExternalSourceSetting:
    r"""Provides information about the external source of the slot type's definition."""
    
    grammar_slot_type_setting: Optional[shared_grammarslottypesetting.GrammarSlotTypeSetting] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('grammarSlotTypeSetting'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateSlotTypeRequestBodyValueSelectionSetting:
    r"""Contains settings used by Amazon Lex to select a slot value."""
    
    advanced_recognition_setting: Optional[shared_advancedrecognitionsetting.AdvancedRecognitionSetting] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('advancedRecognitionSetting'), 'exclude': lambda f: f is None }})  
    regex_filter: Optional[shared_slotvalueregexfilter.SlotValueRegexFilter] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('regexFilter'), 'exclude': lambda f: f is None }})  
    resolution_strategy: Optional[shared_slotvalueresolutionstrategy_enum.SlotValueResolutionStrategyEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('resolutionStrategy'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateSlotTypeRequestBody:
    
    slot_type_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('slotTypeName') }})
    r"""The new name of the slot type."""  
    composite_slot_type_setting: Optional[UpdateSlotTypeRequestBodyCompositeSlotTypeSetting] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('compositeSlotTypeSetting'), 'exclude': lambda f: f is None }})
    r"""A composite slot is a combination of two or more slots that capture multiple pieces of information in a single user input."""  
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description'), 'exclude': lambda f: f is None }})
    r"""The new description of the slot type."""  
    external_source_setting: Optional[UpdateSlotTypeRequestBodyExternalSourceSetting] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('externalSourceSetting'), 'exclude': lambda f: f is None }})
    r"""Provides information about the external source of the slot type's definition."""  
    parent_slot_type_signature: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('parentSlotTypeSignature'), 'exclude': lambda f: f is None }})
    r"""The new built-in slot type that should be used as the parent of this slot type."""  
    slot_type_values: Optional[list[shared_slottypevalue.SlotTypeValue]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('slotTypeValues'), 'exclude': lambda f: f is None }})
    r"""A new list of values and their optional synonyms that define the values that the slot type can take."""  
    value_selection_setting: Optional[UpdateSlotTypeRequestBodyValueSelectionSetting] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('valueSelectionSetting'), 'exclude': lambda f: f is None }})
    r"""Contains settings used by Amazon Lex to select a slot value."""  
    

@dataclasses.dataclass
class UpdateSlotTypeRequest:
    
    bot_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'botId', 'style': 'simple', 'explode': False }})
    r"""The identifier of the bot that contains the slot type."""  
    bot_version: str = dataclasses.field(metadata={'path_param': { 'field_name': 'botVersion', 'style': 'simple', 'explode': False }})
    r"""The version of the bot that contains the slot type. Must be <code>DRAFT</code>."""  
    locale_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'localeId', 'style': 'simple', 'explode': False }})
    r"""The identifier of the language and locale that contains the slot type. The string must match one of the supported locales. For more information, see <a href=\\"https://docs.aws.amazon.com/lexv2/latest/dg/how-languages.html\\">Supported languages</a>."""  
    request_body: UpdateSlotTypeRequestBody = dataclasses.field(metadata={'request': { 'media_type': 'application/json' }})  
    slot_type_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'slotTypeId', 'style': 'simple', 'explode': False }})
    r"""The unique identifier of the slot type to update."""  
    x_amz_algorithm: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Algorithm', 'style': 'simple', 'explode': False }})  
    x_amz_content_sha256: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Content-Sha256', 'style': 'simple', 'explode': False }})  
    x_amz_credential: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Credential', 'style': 'simple', 'explode': False }})  
    x_amz_date: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Date', 'style': 'simple', 'explode': False }})  
    x_amz_security_token: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Security-Token', 'style': 'simple', 'explode': False }})  
    x_amz_signature: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Signature', 'style': 'simple', 'explode': False }})  
    x_amz_signed_headers: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-SignedHeaders', 'style': 'simple', 'explode': False }})  
    

@dataclasses.dataclass
class UpdateSlotTypeResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    conflict_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ConflictException"""  
    internal_server_exception: Optional[Any] = dataclasses.field(default=None)
    r"""InternalServerException"""  
    precondition_failed_exception: Optional[Any] = dataclasses.field(default=None)
    r"""PreconditionFailedException"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    service_quota_exceeded_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ServiceQuotaExceededException"""  
    throttling_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ThrottlingException"""  
    update_slot_type_response: Optional[shared_updateslottyperesponse.UpdateSlotTypeResponse] = dataclasses.field(default=None)
    r"""Success"""  
    validation_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ValidationException"""  
    