"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from typing import Optional


@dataclasses.dataclass
class SearchInIndexRequest:
    
    attributes_to_crop: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'attributesToCrop', 'style': 'form', 'explode': True }})  
    attributes_to_highlight: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'attributesToHighlight', 'style': 'form', 'explode': True }})  
    attributes_to_retrieve: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'attributesToRetrieve', 'style': 'form', 'explode': True }})  
    crop_length: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'cropLength', 'style': 'form', 'explode': True }})  
    crop_marker: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'cropMarker', 'style': 'form', 'explode': True }})  
    facets: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'facets', 'style': 'form', 'explode': True }})  
    filter: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'filter', 'style': 'form', 'explode': True }})  
    highlight_post_tag: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'highlightPostTag', 'style': 'form', 'explode': True }})  
    highlight_pre_tag: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'highlightPreTag', 'style': 'form', 'explode': True }})  
    hits_per_page: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'hitsPerPage', 'style': 'form', 'explode': True }})  
    limit: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'limit', 'style': 'form', 'explode': True }})  
    matching_strategy: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'matchingStrategy', 'style': 'form', 'explode': True }})  
    offset: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'offset', 'style': 'form', 'explode': True }})  
    page: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'page', 'style': 'form', 'explode': True }})  
    q: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'q', 'style': 'form', 'explode': True }})  
    show_matches_position: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'showMatchesPosition', 'style': 'form', 'explode': True }})  
    sort: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'sort', 'style': 'form', 'explode': True }})  
    

@dataclasses.dataclass
class SearchInIndexResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    