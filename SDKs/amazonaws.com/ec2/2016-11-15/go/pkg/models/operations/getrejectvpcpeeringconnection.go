// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// GETRejectVpcPeeringConnectionActionEnum
type GETRejectVpcPeeringConnectionActionEnum string

const (
	GETRejectVpcPeeringConnectionActionEnumRejectVpcPeeringConnection GETRejectVpcPeeringConnectionActionEnum = "RejectVpcPeeringConnection"
)

func (e GETRejectVpcPeeringConnectionActionEnum) ToPointer() *GETRejectVpcPeeringConnectionActionEnum {
	return &e
}

func (e *GETRejectVpcPeeringConnectionActionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "RejectVpcPeeringConnection":
		*e = GETRejectVpcPeeringConnectionActionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GETRejectVpcPeeringConnectionActionEnum: %v", v)
	}
}

// GETRejectVpcPeeringConnectionVersionEnum
type GETRejectVpcPeeringConnectionVersionEnum string

const (
	GETRejectVpcPeeringConnectionVersionEnumTwoThousandAndSixteen1115 GETRejectVpcPeeringConnectionVersionEnum = "2016-11-15"
)

func (e GETRejectVpcPeeringConnectionVersionEnum) ToPointer() *GETRejectVpcPeeringConnectionVersionEnum {
	return &e
}

func (e *GETRejectVpcPeeringConnectionVersionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "2016-11-15":
		*e = GETRejectVpcPeeringConnectionVersionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GETRejectVpcPeeringConnectionVersionEnum: %v", v)
	}
}

type GETRejectVpcPeeringConnectionRequest struct {
	Action GETRejectVpcPeeringConnectionActionEnum `queryParam:"style=form,explode=true,name=Action"`
	// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
	DryRun  *bool                                    `queryParam:"style=form,explode=true,name=DryRun"`
	Version GETRejectVpcPeeringConnectionVersionEnum `queryParam:"style=form,explode=true,name=Version"`
	// The ID of the VPC peering connection.
	VpcPeeringConnectionID string  `queryParam:"style=form,explode=true,name=VpcPeeringConnectionId"`
	XAmzAlgorithm          *string `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256      *string `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential         *string `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate               *string `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken      *string `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature          *string `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders      *string `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
}

type GETRejectVpcPeeringConnectionResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
