"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import _xgafv_enum as shared__xgafv_enum
from ..shared import alt_enum as shared_alt_enum
from ..shared import chromeosdevices as shared_chromeosdevices
from enum import Enum
from typing import Optional


@dataclasses.dataclass
class DirectoryChromeosdevicesListSecurityOption1:
    
    oauth2: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'oauth2', 'field_name': 'Authorization' }})  
    oauth2c: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'oauth2', 'field_name': 'Authorization' }})  
    

@dataclasses.dataclass
class DirectoryChromeosdevicesListSecurityOption2:
    
    oauth2: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'oauth2', 'field_name': 'Authorization' }})  
    oauth2c: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'oauth2', 'field_name': 'Authorization' }})  
    

@dataclasses.dataclass
class DirectoryChromeosdevicesListSecurity:
    
    option1: Optional[DirectoryChromeosdevicesListSecurityOption1] = dataclasses.field(default=None, metadata={'security': { 'option': True }})  
    option2: Optional[DirectoryChromeosdevicesListSecurityOption2] = dataclasses.field(default=None, metadata={'security': { 'option': True }})  
    
class DirectoryChromeosdevicesListOrderByEnum(str, Enum):
    r"""Device property to use for sorting results."""
    ANNOTATED_LOCATION = 'annotatedLocation'
    ANNOTATED_USER = 'annotatedUser'
    LAST_SYNC = 'lastSync'
    NOTES = 'notes'
    SERIAL_NUMBER = 'serialNumber'
    STATUS = 'status'

class DirectoryChromeosdevicesListProjectionEnum(str, Enum):
    r"""Restrict information returned to a set of selected fields."""
    BASIC = 'BASIC'
    FULL = 'FULL'

class DirectoryChromeosdevicesListSortOrderEnum(str, Enum):
    r"""Whether to return results in ascending or descending order. Must be used with the `orderBy` parameter."""
    ASCENDING = 'ASCENDING'
    DESCENDING = 'DESCENDING'


@dataclasses.dataclass
class DirectoryChromeosdevicesListRequest:
    
    customer_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'customerId', 'style': 'simple', 'explode': False }})
    r"""The unique ID for the customer's Google Workspace account. As an account administrator, you can also use the `my_customer` alias to represent your account's `customerId`. The `customerId` is also returned as part of the [Users resource](/admin-sdk/directory/v1/reference/users)."""  
    dollar_xgafv: Optional[shared__xgafv_enum.XgafvEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': '$.xgafv', 'style': 'form', 'explode': True }})
    r"""V1 error format."""  
    access_token: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'access_token', 'style': 'form', 'explode': True }})
    r"""OAuth access token."""  
    alt: Optional[shared_alt_enum.AltEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'alt', 'style': 'form', 'explode': True }})
    r"""Data format for response."""  
    callback: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'callback', 'style': 'form', 'explode': True }})
    r"""JSONP"""  
    fields_: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'fields', 'style': 'form', 'explode': True }})
    r"""Selector specifying which fields to include in a partial response."""  
    include_child_orgunits: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'includeChildOrgunits', 'style': 'form', 'explode': True }})
    r"""Return devices from all child orgunits, as well as the specified org unit. If this is set to true, 'orgUnitPath' must be provided."""  
    key: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'key', 'style': 'form', 'explode': True }})
    r"""API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."""  
    max_results: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'maxResults', 'style': 'form', 'explode': True }})
    r"""Maximum number of results to return."""  
    oauth_token: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'oauth_token', 'style': 'form', 'explode': True }})
    r"""OAuth 2.0 token for the current user."""  
    order_by: Optional[DirectoryChromeosdevicesListOrderByEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'orderBy', 'style': 'form', 'explode': True }})
    r"""Device property to use for sorting results."""  
    org_unit_path: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'orgUnitPath', 'style': 'form', 'explode': True }})
    r"""The full path of the organizational unit (minus the leading `/`) or its unique ID."""  
    page_token: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'pageToken', 'style': 'form', 'explode': True }})
    r"""The `pageToken` query parameter is used to request the next page of query results. The follow-on request's `pageToken` query parameter is the `nextPageToken` from your previous response."""  
    pretty_print: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'prettyPrint', 'style': 'form', 'explode': True }})
    r"""Returns response with indentations and line breaks."""  
    projection: Optional[DirectoryChromeosdevicesListProjectionEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'projection', 'style': 'form', 'explode': True }})
    r"""Restrict information returned to a set of selected fields."""  
    query: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'query', 'style': 'form', 'explode': True }})
    r"""Search string in the format given at https://developers.google.com/admin-sdk/directory/v1/list-query-operators"""  
    quota_user: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'quotaUser', 'style': 'form', 'explode': True }})
    r"""Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."""  
    sort_order: Optional[DirectoryChromeosdevicesListSortOrderEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'sortOrder', 'style': 'form', 'explode': True }})
    r"""Whether to return results in ascending or descending order. Must be used with the `orderBy` parameter."""  
    upload_protocol: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'upload_protocol', 'style': 'form', 'explode': True }})
    r"""Upload protocol for media (e.g. \\"raw\\", \\"multipart\\")."""  
    upload_type: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'uploadType', 'style': 'form', 'explode': True }})
    r"""Legacy upload protocol for media (e.g. \\"media\\", \\"multipart\\")."""  
    

@dataclasses.dataclass
class DirectoryChromeosdevicesListResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    chrome_os_devices: Optional[shared_chromeosdevices.ChromeOsDevices] = dataclasses.field(default=None)
    r"""Successful response"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    