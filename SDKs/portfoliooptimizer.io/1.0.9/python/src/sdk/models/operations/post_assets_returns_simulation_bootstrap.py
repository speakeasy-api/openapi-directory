"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PostAssetsReturnsSimulationBootstrapRequestBodyAssets:
    
    asset_returns: list[float] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('assetReturns') }})
    r"""assetReturns[t] is the return of the asset over the time period t; all the assetReturns arrays must have the same length"""  
    
class PostAssetsReturnsSimulationBootstrapRequestBodyBootstrapMethodEnum(str, Enum):
    r"""The bootstrap method to use"""
    IID = 'iid'
    CIRCULAR_BLOCK = 'circularBlock'
    STATIONARY_BLOCK = 'stationaryBlock'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PostAssetsReturnsSimulationBootstrapRequestBody:
    
    assets: list[PostAssetsReturnsSimulationBootstrapRequestBodyAssets] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('assets') }})  
    bootstrap_average_block_length: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bootstrapAverageBlockLength'), 'exclude': lambda f: f is None }})
    r"""The average length of the blocks to use in case the bootstrap method is 'stationaryBlock', in time periods; if not provided, defaults to the inverse of 3.15 * the common length of the assetReturns arrays^1/3"""  
    bootstrap_block_length: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bootstrapBlockLength'), 'exclude': lambda f: f is None }})
    r"""The length of the blocks to use in case the bootstrap method is 'circularBlock', in time periods; if not provided, defaults to [3.15 * the common length of the assetReturns arrays^1/3]"""  
    bootstrap_method: Optional[PostAssetsReturnsSimulationBootstrapRequestBodyBootstrapMethodEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bootstrapMethod'), 'exclude': lambda f: f is None }})
    r"""The bootstrap method to use"""  
    simulations: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('simulations'), 'exclude': lambda f: f is None }})
    r"""The number of simulations to perform"""  
    simulations_length: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('simulationsLength'), 'exclude': lambda f: f is None }})
    r"""The number of time period(s) to simulate per simulation; if not provided, defaults to the common length of the assetReturns arrays"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PostAssetsReturnsSimulationBootstrap200ApplicationJSONSimulationsAssets:
    
    asset_returns: list[float] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('assetReturns') }})
    r"""assetReturns[t] is the simulated return of the i-th asset for the t-th time period, in percentage"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PostAssetsReturnsSimulationBootstrap200ApplicationJSONSimulations:
    
    assets: list[PostAssetsReturnsSimulationBootstrap200ApplicationJSONSimulationsAssets] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('assets') }})
    r"""assets[i] is the data for the i-th asset"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PostAssetsReturnsSimulationBootstrap200ApplicationJSON:
    r"""OK"""
    
    simulations: list[PostAssetsReturnsSimulationBootstrap200ApplicationJSONSimulations] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('simulations') }})  
    

@dataclasses.dataclass
class PostAssetsReturnsSimulationBootstrapResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    post_assets_returns_simulation_bootstrap_200_application_json_object: Optional[PostAssetsReturnsSimulationBootstrap200ApplicationJSON] = dataclasses.field(default=None)
    r"""OK"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    