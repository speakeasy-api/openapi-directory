// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// GetApplicationXAmzTargetEnum
type GetApplicationXAmzTargetEnum string

const (
	GetApplicationXAmzTargetEnumCodeDeploy20141006GetApplication GetApplicationXAmzTargetEnum = "CodeDeploy_20141006.GetApplication"
)

func (e *GetApplicationXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "CodeDeploy_20141006.GetApplication":
		*e = GetApplicationXAmzTargetEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetApplicationXAmzTargetEnum: %s", s)
	}
}

type GetApplicationRequest struct {
	GetApplicationInput shared.GetApplicationInput   `request:"mediaType=application/json"`
	XAmzAlgorithm       *string                      `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256   *string                      `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential      *string                      `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate            *string                      `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken   *string                      `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature       *string                      `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders   *string                      `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget          GetApplicationXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type GetApplicationResponse struct {
	// ApplicationDoesNotExistException
	ApplicationDoesNotExistException interface{}
	// ApplicationNameRequiredException
	ApplicationNameRequiredException interface{}
	ContentType                      string
	// Success
	GetApplicationOutput *shared.GetApplicationOutput
	// InvalidApplicationNameException
	InvalidApplicationNameException interface{}
	StatusCode                      int
	RawResponse                     *http.Response
}
