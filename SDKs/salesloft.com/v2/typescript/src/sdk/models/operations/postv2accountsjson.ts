/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { AxiosResponse } from "axios";

export class PostV2AccountsJsonRequestBody extends SpeakeasyBase {
  /**
   * ID of the Account Tier for this Account
   */
  @SpeakeasyMetadata({ data: "form, name=account_tier_id" })
  accountTierId?: number;

  /**
   * City
   */
  @SpeakeasyMetadata({ data: "form, name=city" })
  city?: string;

  /**
   * ID of the CompanyStage assigned to this Account
   */
  @SpeakeasyMetadata({ data: "form, name=company_stage_id" })
  companyStageId?: number;

  /**
   * Type of the Account's company
   */
  @SpeakeasyMetadata({ data: "form, name=company_type" })
  companyType?: string;

  /**
   * Conversational name of the Account
   */
  @SpeakeasyMetadata({ data: "form, name=conversational_name" })
  conversationalName?: string;

  /**
   * Country
   */
  @SpeakeasyMetadata({ data: "form, name=country" })
  country?: string;

  /**
   * Requires Salesforce.
   *
   * @remarks
   *
   * ID of the person in your external CRM. You must provide a crm_id_type if this is included.
   *
   * Validations will be applied to the crm_id depending on the crm_id_type. A "salesforce" ID must be exactly 18 characters. A "salesforce" ID must be either an Account (001) object. The type will be validated using the 18 character ID.
   *
   * This field can only be used if your application or API key has the "account:set_crm_id" scope.
   *
   *
   */
  @SpeakeasyMetadata({ data: "form, name=crm_id" })
  crmId?: string;

  /**
   * The CRM that the provided crm_id is for. Must be one of: salesforce
   */
  @SpeakeasyMetadata({ data: "form, name=crm_id_type" })
  crmIdType?: string;

  /**
   * Custom fields are defined by the user's team. Only fields with values are presented in the API.
   */
  @SpeakeasyMetadata({ data: "form, name=custom_fields;json=true" })
  customFields?: Record<string, any>[];

  /**
   * Description
   */
  @SpeakeasyMetadata({ data: "form, name=description" })
  description?: string;

  /**
   * Whether this company can not be contacted. Values are either true or false. Setting this to true will remove all associated people from all active communications
   */
  @SpeakeasyMetadata({ data: "form, name=do_not_contact" })
  doNotContact?: boolean;

  /**
   * Website domain, not a fully qualified URI
   */
  @SpeakeasyMetadata({ data: "form, name=domain" })
  domain: string;

  /**
   * Date or year of founding
   */
  @SpeakeasyMetadata({ data: "form, name=founded" })
  founded?: string;

  /**
   * Industry
   */
  @SpeakeasyMetadata({ data: "form, name=industry" })
  industry?: string;

  /**
   * Full LinkedIn url
   */
  @SpeakeasyMetadata({ data: "form, name=linkedin_url" })
  linkedinUrl?: string;

  /**
   * Time locale
   */
  @SpeakeasyMetadata({ data: "form, name=locale" })
  locale?: string;

  /**
   * Account Full Name
   */
  @SpeakeasyMetadata({ data: "form, name=name" })
  name: string;

  /**
   * ID of the User that owns this Account
   */
  @SpeakeasyMetadata({ data: "form, name=owner_id" })
  ownerId?: number;

  /**
   * Phone number without formatting
   */
  @SpeakeasyMetadata({ data: "form, name=phone" })
  phone?: string;

  /**
   * Postal code
   */
  @SpeakeasyMetadata({ data: "form, name=postal_code" })
  postalCode?: string;

  /**
   * Estimated revenue range
   */
  @SpeakeasyMetadata({ data: "form, name=revenue_range" })
  revenueRange?: string;

  /**
   * Estimated number of people in employment
   */
  @SpeakeasyMetadata({ data: "form, name=size" })
  size?: string;

  /**
   * State
   */
  @SpeakeasyMetadata({ data: "form, name=state" })
  state?: string;

  /**
   * Street name and number
   */
  @SpeakeasyMetadata({ data: "form, name=street" })
  street?: string;

  /**
   * All tags applied to this Account
   */
  @SpeakeasyMetadata({ data: "form, name=tags" })
  tags?: string[];

  /**
   * Twitter handle, with @
   */
  @SpeakeasyMetadata({ data: "form, name=twitter_handle" })
  twitterHandle?: string;

  /**
   * Website
   */
  @SpeakeasyMetadata({ data: "form, name=website" })
  website?: string;
}

export class PostV2AccountsJsonResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  body?: Uint8Array;

  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;
}
