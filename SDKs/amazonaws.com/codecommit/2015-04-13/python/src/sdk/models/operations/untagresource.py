"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import untagresourceinput as shared_untagresourceinput
from enum import Enum
from typing import Any, Optional

class UntagResourceXAmzTargetEnum(str, Enum):
    CODE_COMMIT_20150413_UNTAG_RESOURCE = 'CodeCommit_20150413.UntagResource'


@dataclasses.dataclass
class UntagResourceRequest:
    
    untag_resource_input: shared_untagresourceinput.UntagResourceInput = dataclasses.field(metadata={'request': { 'media_type': 'application/json' }})  
    x_amz_target: UntagResourceXAmzTargetEnum = dataclasses.field(metadata={'header': { 'field_name': 'X-Amz-Target', 'style': 'simple', 'explode': False }})  
    x_amz_algorithm: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Algorithm', 'style': 'simple', 'explode': False }})  
    x_amz_content_sha256: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Content-Sha256', 'style': 'simple', 'explode': False }})  
    x_amz_credential: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Credential', 'style': 'simple', 'explode': False }})  
    x_amz_date: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Date', 'style': 'simple', 'explode': False }})  
    x_amz_security_token: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Security-Token', 'style': 'simple', 'explode': False }})  
    x_amz_signature: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Signature', 'style': 'simple', 'explode': False }})  
    x_amz_signed_headers: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-SignedHeaders', 'style': 'simple', 'explode': False }})  
    

@dataclasses.dataclass
class UntagResourceResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    invalid_repository_name_exception: Optional[Any] = dataclasses.field(default=None)
    r"""InvalidRepositoryNameException"""  
    invalid_resource_arn_exception: Optional[Any] = dataclasses.field(default=None)
    r"""InvalidResourceArnException"""  
    invalid_system_tag_usage_exception: Optional[Any] = dataclasses.field(default=None)
    r"""InvalidSystemTagUsageException"""  
    invalid_tag_keys_list_exception: Optional[Any] = dataclasses.field(default=None)
    r"""InvalidTagKeysListException"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    repository_does_not_exist_exception: Optional[Any] = dataclasses.field(default=None)
    r"""RepositoryDoesNotExistException"""  
    resource_arn_required_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ResourceArnRequiredException"""  
    tag_keys_list_required_exception: Optional[Any] = dataclasses.field(default=None)
    r"""TagKeysListRequiredException"""  
    tag_policy_exception: Optional[Any] = dataclasses.field(default=None)
    r"""TagPolicyException"""  
    too_many_tags_exception: Optional[Any] = dataclasses.field(default=None)
    r"""TooManyTagsException"""  
    