// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// CallRecipientVoiceEnum - The voice to be used (MALE1, FEMALE1, FEMALE2, SPANISH1, FRENCHCANADIAN1)
type CallRecipientVoiceEnum string

const (
	CallRecipientVoiceEnumMale1           CallRecipientVoiceEnum = "MALE1"
	CallRecipientVoiceEnumFemale1         CallRecipientVoiceEnum = "FEMALE1"
	CallRecipientVoiceEnumFemale2         CallRecipientVoiceEnum = "FEMALE2"
	CallRecipientVoiceEnumSpanish1        CallRecipientVoiceEnum = "SPANISH1"
	CallRecipientVoiceEnumFrenchcanadian1 CallRecipientVoiceEnum = "FRENCHCANADIAN1"
)

func (e CallRecipientVoiceEnum) ToPointer() *CallRecipientVoiceEnum {
	return &e
}

func (e *CallRecipientVoiceEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "MALE1":
		fallthrough
	case "FEMALE1":
		fallthrough
	case "FEMALE2":
		fallthrough
	case "SPANISH1":
		fallthrough
	case "FRENCHCANADIAN1":
		*e = CallRecipientVoiceEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CallRecipientVoiceEnum: %v", v)
	}
}

// CallRecipient - Recipient of a campaign action. Can be a phone number, contact, or contact list with attributes added to action. It is required to specify one of this values
type CallRecipient struct {
	// Map of user-defined string attributes associated with recipient
	Attributes map[string]string `json:"attributes,omitempty"`
	// An id of existing contact used as recipient
	ContactID *int64 `json:"contactId,omitempty"`
	// An IVR xml document describing dialplan to setup an IVR broadcast. If dialplan is set there is no need to set live, machine and transfer sounds (or vice versa)
	DialplanXML *string `json:"dialplanXml,omitempty"`
	// ~
	FromNumber *string `json:"fromNumber,omitempty"`
	// Text to be turned into a sound, this text will be played when the phone is answered
	LiveMessage *string `json:"liveMessage,omitempty"`
	// An id of a sound file to play if phone is answered
	LiveMessageSoundID *int64 `json:"liveMessageSoundId,omitempty"`
	// Text to be used to turn into sound, this text will be played when answering machine is detected
	MachineMessage *string `json:"machineMessage,omitempty"`
	// An id of a sound file to play if answering machine is detected
	MachineMessageSoundID *int64 `json:"machineMessageSoundId,omitempty"`
	// Recipient's phone number in E.164 format (11-digit) or short code. Example: 12132000384
	PhoneNumber *string `json:"phoneNumber,omitempty"`
	// A digit pressed to initiate the transfer
	TransferDigit *string `json:"transferDigit,omitempty"`
	// Text to be turned into sound, this text will be played when the transfer digit is played
	TransferMessage *string `json:"transferMessage,omitempty"`
	// An id of a sound file to play if call is transferred
	TransferMessageSoundID *int64 `json:"transferMessageSoundId,omitempty"`
	// Phone number in E.164 format (11-digit) to transfer the call to. Example: 12132000384
	TransferNumber *string `json:"transferNumber,omitempty"`
	// The voice to be used (MALE1, FEMALE1, FEMALE2, SPANISH1, FRENCHCANADIAN1)
	Voice *CallRecipientVoiceEnum `json:"voice,omitempty"`
}
