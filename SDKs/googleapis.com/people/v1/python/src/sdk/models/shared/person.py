"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import address as shared_address
from ..shared import agerangetype as shared_agerangetype
from ..shared import biography as shared_biography
from ..shared import birthday as shared_birthday
from ..shared import braggingrights as shared_braggingrights
from ..shared import calendarurl as shared_calendarurl
from ..shared import clientdata as shared_clientdata
from ..shared import coverphoto as shared_coverphoto
from ..shared import emailaddress as shared_emailaddress
from ..shared import event as shared_event
from ..shared import externalid as shared_externalid
from ..shared import fileas as shared_fileas
from ..shared import gender as shared_gender
from ..shared import imclient as shared_imclient
from ..shared import interest as shared_interest
from ..shared import locale as shared_locale
from ..shared import location as shared_location
from ..shared import membership as shared_membership
from ..shared import misckeyword as shared_misckeyword
from ..shared import name as shared_name
from ..shared import nickname as shared_nickname
from ..shared import occupation as shared_occupation
from ..shared import organization as shared_organization
from ..shared import personmetadata as shared_personmetadata
from ..shared import phonenumber as shared_phonenumber
from ..shared import photo as shared_photo
from ..shared import relation as shared_relation
from ..shared import relationshipinterest as shared_relationshipinterest
from ..shared import relationshipstatus as shared_relationshipstatus
from ..shared import residence as shared_residence
from ..shared import sipaddress as shared_sipaddress
from ..shared import skill as shared_skill
from ..shared import tagline as shared_tagline
from ..shared import url as shared_url
from ..shared import userdefined as shared_userdefined
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class PersonAgeRangeEnum(str, Enum):
    r"""Output only. **DEPRECATED** (Please use `person.ageRanges` instead) The person's age range."""
    AGE_RANGE_UNSPECIFIED = 'AGE_RANGE_UNSPECIFIED'
    LESS_THAN_EIGHTEEN = 'LESS_THAN_EIGHTEEN'
    EIGHTEEN_TO_TWENTY = 'EIGHTEEN_TO_TWENTY'
    TWENTY_ONE_OR_OLDER = 'TWENTY_ONE_OR_OLDER'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Person:
    r"""Information about a person merged from various data sources such as the authenticated user's contacts and profile data. Most fields can have multiple items. The items in a field have no guaranteed order, but each non-empty field is guaranteed to have exactly one field with `metadata.primary` set to true."""
    
    addresses: Optional[list[shared_address.Address]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('addresses'), 'exclude': lambda f: f is None }})
    r"""The person's street addresses."""  
    age_range: Optional[PersonAgeRangeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ageRange'), 'exclude': lambda f: f is None }})
    r"""Output only. **DEPRECATED** (Please use `person.ageRanges` instead) The person's age range."""  
    age_ranges: Optional[list[shared_agerangetype.AgeRangeType]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ageRanges'), 'exclude': lambda f: f is None }})
    r"""Output only. The person's age ranges."""  
    biographies: Optional[list[shared_biography.Biography]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('biographies'), 'exclude': lambda f: f is None }})
    r"""The person's biographies. This field is a singleton for contact sources."""  
    birthdays: Optional[list[shared_birthday.Birthday]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('birthdays'), 'exclude': lambda f: f is None }})
    r"""The person's birthdays. This field is a singleton for contact sources."""  
    bragging_rights: Optional[list[shared_braggingrights.BraggingRights]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('braggingRights'), 'exclude': lambda f: f is None }})
    r"""**DEPRECATED**: No data will be returned The person's bragging rights."""  
    calendar_urls: Optional[list[shared_calendarurl.CalendarURL]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('calendarUrls'), 'exclude': lambda f: f is None }})
    r"""The person's calendar URLs."""  
    client_data: Optional[list[shared_clientdata.ClientData]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('clientData'), 'exclude': lambda f: f is None }})
    r"""The person's client data."""  
    cover_photos: Optional[list[shared_coverphoto.CoverPhoto]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('coverPhotos'), 'exclude': lambda f: f is None }})
    r"""Output only. The person's cover photos."""  
    email_addresses: Optional[list[shared_emailaddress.EmailAddress]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('emailAddresses'), 'exclude': lambda f: f is None }})
    r"""The person's email addresses. For `people.connections.list` and `otherContacts.list` the number of email addresses is limited to 100. If a Person has more email addresses the entire set can be obtained by calling GetPeople."""  
    etag: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('etag'), 'exclude': lambda f: f is None }})
    r"""The [HTTP entity tag](https://en.wikipedia.org/wiki/HTTP_ETag) of the resource. Used for web cache validation."""  
    events: Optional[list[shared_event.Event]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('events'), 'exclude': lambda f: f is None }})
    r"""The person's events."""  
    external_ids: Optional[list[shared_externalid.ExternalID]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('externalIds'), 'exclude': lambda f: f is None }})
    r"""The person's external IDs."""  
    file_ases: Optional[list[shared_fileas.FileAs]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('fileAses'), 'exclude': lambda f: f is None }})
    r"""The person's file-ases."""  
    genders: Optional[list[shared_gender.Gender]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('genders'), 'exclude': lambda f: f is None }})
    r"""The person's genders. This field is a singleton for contact sources."""  
    im_clients: Optional[list[shared_imclient.ImClient]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('imClients'), 'exclude': lambda f: f is None }})
    r"""The person's instant messaging clients."""  
    interests: Optional[list[shared_interest.Interest]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('interests'), 'exclude': lambda f: f is None }})
    r"""The person's interests."""  
    locales: Optional[list[shared_locale.Locale]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('locales'), 'exclude': lambda f: f is None }})
    r"""The person's locale preferences."""  
    locations: Optional[list[shared_location.Location]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('locations'), 'exclude': lambda f: f is None }})
    r"""The person's locations."""  
    memberships: Optional[list[shared_membership.Membership]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('memberships'), 'exclude': lambda f: f is None }})
    r"""The person's group memberships."""  
    metadata: Optional[shared_personmetadata.PersonMetadata] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('metadata'), 'exclude': lambda f: f is None }})
    r"""The metadata about a person."""  
    misc_keywords: Optional[list[shared_misckeyword.MiscKeyword]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('miscKeywords'), 'exclude': lambda f: f is None }})
    r"""The person's miscellaneous keywords."""  
    names: Optional[list[shared_name.Name]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('names'), 'exclude': lambda f: f is None }})
    r"""The person's names. This field is a singleton for contact sources."""  
    nicknames: Optional[list[shared_nickname.Nickname]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('nicknames'), 'exclude': lambda f: f is None }})
    r"""The person's nicknames."""  
    occupations: Optional[list[shared_occupation.Occupation]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('occupations'), 'exclude': lambda f: f is None }})
    r"""The person's occupations."""  
    organizations: Optional[list[shared_organization.Organization]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('organizations'), 'exclude': lambda f: f is None }})
    r"""The person's past or current organizations."""  
    phone_numbers: Optional[list[shared_phonenumber.PhoneNumber]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('phoneNumbers'), 'exclude': lambda f: f is None }})
    r"""The person's phone numbers. For `people.connections.list` and `otherContacts.list` the number of phone numbers is limited to 100. If a Person has more phone numbers the entire set can be obtained by calling GetPeople."""  
    photos: Optional[list[shared_photo.Photo]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('photos'), 'exclude': lambda f: f is None }})
    r"""Output only. The person's photos."""  
    relations: Optional[list[shared_relation.Relation]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('relations'), 'exclude': lambda f: f is None }})
    r"""The person's relations."""  
    relationship_interests: Optional[list[shared_relationshipinterest.RelationshipInterest]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('relationshipInterests'), 'exclude': lambda f: f is None }})
    r"""Output only. **DEPRECATED**: No data will be returned The person's relationship interests."""  
    relationship_statuses: Optional[list[shared_relationshipstatus.RelationshipStatus]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('relationshipStatuses'), 'exclude': lambda f: f is None }})
    r"""Output only. **DEPRECATED**: No data will be returned The person's relationship statuses."""  
    residences: Optional[list[shared_residence.Residence]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('residences'), 'exclude': lambda f: f is None }})
    r"""**DEPRECATED**: (Please use `person.locations` instead) The person's residences."""  
    resource_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('resourceName'), 'exclude': lambda f: f is None }})
    r"""The resource name for the person, assigned by the server. An ASCII string in the form of `people/{person_id}`."""  
    sip_addresses: Optional[list[shared_sipaddress.SipAddress]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sipAddresses'), 'exclude': lambda f: f is None }})
    r"""The person's SIP addresses."""  
    skills: Optional[list[shared_skill.Skill]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('skills'), 'exclude': lambda f: f is None }})
    r"""The person's skills."""  
    taglines: Optional[list[shared_tagline.Tagline]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('taglines'), 'exclude': lambda f: f is None }})
    r"""Output only. **DEPRECATED**: No data will be returned The person's taglines."""  
    urls: Optional[list[shared_url.URL]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('urls'), 'exclude': lambda f: f is None }})
    r"""The person's associated URLs."""  
    user_defined: Optional[list[shared_userdefined.UserDefined]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('userDefined'), 'exclude': lambda f: f is None }})
    r"""The person's user defined data."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PersonInput:
    r"""Information about a person merged from various data sources such as the authenticated user's contacts and profile data. Most fields can have multiple items. The items in a field have no guaranteed order, but each non-empty field is guaranteed to have exactly one field with `metadata.primary` set to true."""
    
    addresses: Optional[list[shared_address.AddressInput]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('addresses'), 'exclude': lambda f: f is None }})
    r"""The person's street addresses."""  
    biographies: Optional[list[shared_biography.BiographyInput]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('biographies'), 'exclude': lambda f: f is None }})
    r"""The person's biographies. This field is a singleton for contact sources."""  
    birthdays: Optional[list[shared_birthday.BirthdayInput]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('birthdays'), 'exclude': lambda f: f is None }})
    r"""The person's birthdays. This field is a singleton for contact sources."""  
    bragging_rights: Optional[list[shared_braggingrights.BraggingRightsInput]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('braggingRights'), 'exclude': lambda f: f is None }})
    r"""**DEPRECATED**: No data will be returned The person's bragging rights."""  
    calendar_urls: Optional[list[shared_calendarurl.CalendarURLInput]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('calendarUrls'), 'exclude': lambda f: f is None }})
    r"""The person's calendar URLs."""  
    client_data: Optional[list[shared_clientdata.ClientDataInput]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('clientData'), 'exclude': lambda f: f is None }})
    r"""The person's client data."""  
    email_addresses: Optional[list[shared_emailaddress.EmailAddressInput]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('emailAddresses'), 'exclude': lambda f: f is None }})
    r"""The person's email addresses. For `people.connections.list` and `otherContacts.list` the number of email addresses is limited to 100. If a Person has more email addresses the entire set can be obtained by calling GetPeople."""  
    etag: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('etag'), 'exclude': lambda f: f is None }})
    r"""The [HTTP entity tag](https://en.wikipedia.org/wiki/HTTP_ETag) of the resource. Used for web cache validation."""  
    events: Optional[list[shared_event.EventInput]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('events'), 'exclude': lambda f: f is None }})
    r"""The person's events."""  
    external_ids: Optional[list[shared_externalid.ExternalIDInput]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('externalIds'), 'exclude': lambda f: f is None }})
    r"""The person's external IDs."""  
    file_ases: Optional[list[shared_fileas.FileAsInput]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('fileAses'), 'exclude': lambda f: f is None }})
    r"""The person's file-ases."""  
    genders: Optional[list[shared_gender.GenderInput]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('genders'), 'exclude': lambda f: f is None }})
    r"""The person's genders. This field is a singleton for contact sources."""  
    im_clients: Optional[list[shared_imclient.ImClientInput]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('imClients'), 'exclude': lambda f: f is None }})
    r"""The person's instant messaging clients."""  
    interests: Optional[list[shared_interest.InterestInput]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('interests'), 'exclude': lambda f: f is None }})
    r"""The person's interests."""  
    locales: Optional[list[shared_locale.LocaleInput]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('locales'), 'exclude': lambda f: f is None }})
    r"""The person's locale preferences."""  
    locations: Optional[list[shared_location.LocationInput]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('locations'), 'exclude': lambda f: f is None }})
    r"""The person's locations."""  
    memberships: Optional[list[shared_membership.MembershipInput]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('memberships'), 'exclude': lambda f: f is None }})
    r"""The person's group memberships."""  
    metadata: Optional[shared_personmetadata.PersonMetadataInput] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('metadata'), 'exclude': lambda f: f is None }})
    r"""The metadata about a person."""  
    misc_keywords: Optional[list[shared_misckeyword.MiscKeywordInput]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('miscKeywords'), 'exclude': lambda f: f is None }})
    r"""The person's miscellaneous keywords."""  
    names: Optional[list[shared_name.NameInput]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('names'), 'exclude': lambda f: f is None }})
    r"""The person's names. This field is a singleton for contact sources."""  
    nicknames: Optional[list[shared_nickname.NicknameInput]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('nicknames'), 'exclude': lambda f: f is None }})
    r"""The person's nicknames."""  
    occupations: Optional[list[shared_occupation.OccupationInput]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('occupations'), 'exclude': lambda f: f is None }})
    r"""The person's occupations."""  
    organizations: Optional[list[shared_organization.OrganizationInput]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('organizations'), 'exclude': lambda f: f is None }})
    r"""The person's past or current organizations."""  
    phone_numbers: Optional[list[shared_phonenumber.PhoneNumberInput]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('phoneNumbers'), 'exclude': lambda f: f is None }})
    r"""The person's phone numbers. For `people.connections.list` and `otherContacts.list` the number of phone numbers is limited to 100. If a Person has more phone numbers the entire set can be obtained by calling GetPeople."""  
    relations: Optional[list[shared_relation.RelationInput]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('relations'), 'exclude': lambda f: f is None }})
    r"""The person's relations."""  
    residences: Optional[list[shared_residence.ResidenceInput]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('residences'), 'exclude': lambda f: f is None }})
    r"""**DEPRECATED**: (Please use `person.locations` instead) The person's residences."""  
    resource_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('resourceName'), 'exclude': lambda f: f is None }})
    r"""The resource name for the person, assigned by the server. An ASCII string in the form of `people/{person_id}`."""  
    sip_addresses: Optional[list[shared_sipaddress.SipAddressInput]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sipAddresses'), 'exclude': lambda f: f is None }})
    r"""The person's SIP addresses."""  
    skills: Optional[list[shared_skill.SkillInput]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('skills'), 'exclude': lambda f: f is None }})
    r"""The person's skills."""  
    urls: Optional[list[shared_url.URLInput]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('urls'), 'exclude': lambda f: f is None }})
    r"""The person's associated URLs."""  
    user_defined: Optional[list[shared_userdefined.UserDefinedInput]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('userDefined'), 'exclude': lambda f: f is None }})
    r"""The person's user defined data."""  
    