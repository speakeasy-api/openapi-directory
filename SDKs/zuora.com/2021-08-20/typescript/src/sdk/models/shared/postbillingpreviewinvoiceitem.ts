/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { Expose, Transform } from "class-transformer";

export class POSTBillingPreviewInvoiceItem extends SpeakeasyBase {
  /**
   * The unique ID of the invoice item that the discount charge is applied to.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "appliedToItemId" })
  appliedToItemId?: string;

  /**
   * The amount of the charge. This amount doesn't include taxes regardless if the charge's tax mode is inclusive or exclusive.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "chargeAmount" })
  chargeAmount?: string;

  /**
   * The date when the invoice item was created.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "chargeDate" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  chargeDate?: Date;

  /**
   * Description of the charge.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "chargeDescription" })
  chargeDescription?: string;

  /**
   * Id of the charge.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "chargeId" })
  chargeId?: string;

  /**
   * Name of the charge.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "chargeName" })
  chargeName?: string;

  /**
   * Number of the charge.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "chargeNumber" })
  chargeNumber?: string;

  /**
   * The type of charge.
   *
   * @remarks
   *
   * Possible values are `OneTime`, `Recurring`, and `Usage`.
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "chargeType" })
  chargeType?: string;

  /**
   * Invoice item ID.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id?: string;

  /**
   * Identifies the kind of charge.
   *
   * @remarks
   *
   * Possible values:
   * * charge
   * * discount
   * * prepayment
   * * tax
   */
  @SpeakeasyMetadata()
  @Expose({ name: "processingType" })
  processingType?: string;

  /**
   * Name of the product associated with this item.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "productName" })
  productName?: string;

  /**
   * Quantity of this item, in the configured unit of measure for the charge.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "quantity" })
  quantity?: string;

  /**
   * End date of the service period for this item, i.e., the last day of the service period, in `yyyy-mm-dd` format.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "serviceEndDate" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  serviceEndDate?: Date;

  /**
   * Start date of the service period for this item, in `yyyy-mm-dd` format. If the charge is a one-time fee, this is the date of that charge.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "serviceStartDate" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  serviceStartDate?: Date;

  /**
   * ID of the subscription associated with this item.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "subscriptionId" })
  subscriptionId?: string;

  /**
   * Name of the subscription associated with this item.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "subscriptionName" })
  subscriptionName?: string;

  /**
   * Number of the subscription associated with this item.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "subscriptionNumber" })
  subscriptionNumber?: string;

  /**
   * Tax applied to the charge. This field returns `0` becasue the BillingPreview operation does not calculate taxes for charges in the subscription.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "taxAmount" })
  taxAmount?: string;

  /**
   * Unit used to measure consumption.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "unitOfMeasure" })
  unitOfMeasure?: string;
}
