// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

type GetOrganizationConfigTemplateSwitchProfilePortsRequest struct {
	ConfigTemplateID string `pathParam:"style=simple,explode=false,name=configTemplateId"`
	OrganizationID   string `pathParam:"style=simple,explode=false,name=organizationId"`
	ProfileID        string `pathParam:"style=simple,explode=false,name=profileId"`
}

// GetOrganizationConfigTemplateSwitchProfilePorts200ApplicationJSONAccessPolicyTypeEnum - The type of the access policy of the switch profile port. Only applicable to access ports. Can be one of 'Open', 'Custom access policy', 'MAC allow list' or 'Sticky MAC allow list'.
type GetOrganizationConfigTemplateSwitchProfilePorts200ApplicationJSONAccessPolicyTypeEnum string

const (
	GetOrganizationConfigTemplateSwitchProfilePorts200ApplicationJSONAccessPolicyTypeEnumCustomAccessPolicy GetOrganizationConfigTemplateSwitchProfilePorts200ApplicationJSONAccessPolicyTypeEnum = "Custom access policy"
	GetOrganizationConfigTemplateSwitchProfilePorts200ApplicationJSONAccessPolicyTypeEnumMacAllowList       GetOrganizationConfigTemplateSwitchProfilePorts200ApplicationJSONAccessPolicyTypeEnum = "MAC allow list"
	GetOrganizationConfigTemplateSwitchProfilePorts200ApplicationJSONAccessPolicyTypeEnumOpen               GetOrganizationConfigTemplateSwitchProfilePorts200ApplicationJSONAccessPolicyTypeEnum = "Open"
	GetOrganizationConfigTemplateSwitchProfilePorts200ApplicationJSONAccessPolicyTypeEnumStickyMacAllowList GetOrganizationConfigTemplateSwitchProfilePorts200ApplicationJSONAccessPolicyTypeEnum = "Sticky MAC allow list"
)

func (e *GetOrganizationConfigTemplateSwitchProfilePorts200ApplicationJSONAccessPolicyTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Custom access policy":
		fallthrough
	case "MAC allow list":
		fallthrough
	case "Open":
		fallthrough
	case "Sticky MAC allow list":
		*e = GetOrganizationConfigTemplateSwitchProfilePorts200ApplicationJSONAccessPolicyTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetOrganizationConfigTemplateSwitchProfilePorts200ApplicationJSONAccessPolicyTypeEnum: %s", s)
	}
}

// GetOrganizationConfigTemplateSwitchProfilePorts200ApplicationJSONProfile - Profile attributes
type GetOrganizationConfigTemplateSwitchProfilePorts200ApplicationJSONProfile struct {
	// When enabled, override this port's configuration with a port profile.
	Enabled *bool `json:"enabled,omitempty"`
	// When enabled, the ID of the port profile used to override the port's configuration.
	ID *string `json:"id,omitempty"`
	// When enabled, the IName of the profile.
	Iname *string `json:"iname,omitempty"`
}

// GetOrganizationConfigTemplateSwitchProfilePorts200ApplicationJSONStpGuardEnum - The state of the STP guard ('disabled', 'root guard', 'bpdu guard' or 'loop guard').
type GetOrganizationConfigTemplateSwitchProfilePorts200ApplicationJSONStpGuardEnum string

const (
	GetOrganizationConfigTemplateSwitchProfilePorts200ApplicationJSONStpGuardEnumBpduGuard GetOrganizationConfigTemplateSwitchProfilePorts200ApplicationJSONStpGuardEnum = "bpdu guard"
	GetOrganizationConfigTemplateSwitchProfilePorts200ApplicationJSONStpGuardEnumDisabled  GetOrganizationConfigTemplateSwitchProfilePorts200ApplicationJSONStpGuardEnum = "disabled"
	GetOrganizationConfigTemplateSwitchProfilePorts200ApplicationJSONStpGuardEnumLoopGuard GetOrganizationConfigTemplateSwitchProfilePorts200ApplicationJSONStpGuardEnum = "loop guard"
	GetOrganizationConfigTemplateSwitchProfilePorts200ApplicationJSONStpGuardEnumRootGuard GetOrganizationConfigTemplateSwitchProfilePorts200ApplicationJSONStpGuardEnum = "root guard"
)

func (e *GetOrganizationConfigTemplateSwitchProfilePorts200ApplicationJSONStpGuardEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "bpdu guard":
		fallthrough
	case "disabled":
		fallthrough
	case "loop guard":
		fallthrough
	case "root guard":
		*e = GetOrganizationConfigTemplateSwitchProfilePorts200ApplicationJSONStpGuardEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetOrganizationConfigTemplateSwitchProfilePorts200ApplicationJSONStpGuardEnum: %s", s)
	}
}

// GetOrganizationConfigTemplateSwitchProfilePorts200ApplicationJSONTypeEnum - The type of the switch profile port ('trunk' or 'access').
type GetOrganizationConfigTemplateSwitchProfilePorts200ApplicationJSONTypeEnum string

const (
	GetOrganizationConfigTemplateSwitchProfilePorts200ApplicationJSONTypeEnumAccess GetOrganizationConfigTemplateSwitchProfilePorts200ApplicationJSONTypeEnum = "access"
	GetOrganizationConfigTemplateSwitchProfilePorts200ApplicationJSONTypeEnumTrunk  GetOrganizationConfigTemplateSwitchProfilePorts200ApplicationJSONTypeEnum = "trunk"
)

func (e *GetOrganizationConfigTemplateSwitchProfilePorts200ApplicationJSONTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "access":
		fallthrough
	case "trunk":
		*e = GetOrganizationConfigTemplateSwitchProfilePorts200ApplicationJSONTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetOrganizationConfigTemplateSwitchProfilePorts200ApplicationJSONTypeEnum: %s", s)
	}
}

// GetOrganizationConfigTemplateSwitchProfilePorts200ApplicationJSONUdldEnum - The action to take when Unidirectional Link is detected (Alert only, Enforce). Default configuration is Alert only.
type GetOrganizationConfigTemplateSwitchProfilePorts200ApplicationJSONUdldEnum string

const (
	GetOrganizationConfigTemplateSwitchProfilePorts200ApplicationJSONUdldEnumAlertOnly GetOrganizationConfigTemplateSwitchProfilePorts200ApplicationJSONUdldEnum = "Alert only"
	GetOrganizationConfigTemplateSwitchProfilePorts200ApplicationJSONUdldEnumEnforce   GetOrganizationConfigTemplateSwitchProfilePorts200ApplicationJSONUdldEnum = "Enforce"
)

func (e *GetOrganizationConfigTemplateSwitchProfilePorts200ApplicationJSONUdldEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Alert only":
		fallthrough
	case "Enforce":
		*e = GetOrganizationConfigTemplateSwitchProfilePorts200ApplicationJSONUdldEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetOrganizationConfigTemplateSwitchProfilePorts200ApplicationJSONUdldEnum: %s", s)
	}
}

type GetOrganizationConfigTemplateSwitchProfilePorts200ApplicationJSON struct {
	// The number of a custom access policy to configure on the switch profile port. Only applicable when 'accessPolicyType' is 'Custom access policy'.
	AccessPolicyNumber *int64 `json:"accessPolicyNumber,omitempty"`
	// The type of the access policy of the switch profile port. Only applicable to access ports. Can be one of 'Open', 'Custom access policy', 'MAC allow list' or 'Sticky MAC allow list'.
	AccessPolicyType *GetOrganizationConfigTemplateSwitchProfilePorts200ApplicationJSONAccessPolicyTypeEnum `json:"accessPolicyType,omitempty"`
	// The VLANs allowed on the switch profile port. Only applicable to trunk ports.
	AllowedVlans *string `json:"allowedVlans,omitempty"`
	// If true, ARP packets for this port will be considered trusted, and Dynamic ARP Inspection will allow the traffic.
	DaiTrusted *bool `json:"daiTrusted,omitempty"`
	// The status of the switch profile port.
	Enabled *bool `json:"enabled,omitempty"`
	// For supported switches (e.g. MS420/MS425), whether or not the port has flexible stacking enabled.
	FlexibleStackingEnabled *bool `json:"flexibleStackingEnabled,omitempty"`
	// The isolation status of the switch profile port.
	IsolationEnabled *bool `json:"isolationEnabled,omitempty"`
	// The link speed for the switch profile port.
	LinkNegotiation *string `json:"linkNegotiation,omitempty"`
	// Available link speeds for the switch profile port.
	LinkNegotiationCapabilities []string `json:"linkNegotiationCapabilities,omitempty"`
	// Only devices with MAC addresses specified in this list will have access to this port. Up to 20 MAC addresses can be defined. Only applicable when 'accessPolicyType' is 'MAC allow list'.
	MacAllowList []string `json:"macAllowList,omitempty"`
	// The name of the switch profile port.
	Name *string `json:"name,omitempty"`
	// The PoE status of the switch profile port.
	PoeEnabled *bool `json:"poeEnabled,omitempty"`
	// The identifier of the switch profile port.
	PortID *string `json:"portId,omitempty"`
	// The ID of the port schedule. A value of null will clear the port schedule.
	PortScheduleID *string `json:"portScheduleId,omitempty"`
	// Profile attributes
	Profile *GetOrganizationConfigTemplateSwitchProfilePorts200ApplicationJSONProfile `json:"profile,omitempty"`
	// The rapid spanning tree protocol status.
	RstpEnabled *bool `json:"rstpEnabled,omitempty"`
	// The initial list of MAC addresses for sticky Mac allow list. Only applicable when 'accessPolicyType' is 'Sticky MAC allow list'.
	StickyMacAllowList []string `json:"stickyMacAllowList,omitempty"`
	// The maximum number of MAC addresses for sticky MAC allow list. Only applicable when 'accessPolicyType' is 'Sticky MAC allow list'.
	StickyMacAllowListLimit *int64 `json:"stickyMacAllowListLimit,omitempty"`
	// The storm control status of the switch profile port.
	StormControlEnabled *bool `json:"stormControlEnabled,omitempty"`
	// The state of the STP guard ('disabled', 'root guard', 'bpdu guard' or 'loop guard').
	StpGuard *GetOrganizationConfigTemplateSwitchProfilePorts200ApplicationJSONStpGuardEnum `json:"stpGuard,omitempty"`
	// The list of tags of the switch profile port.
	Tags []string `json:"tags,omitempty"`
	// The type of the switch profile port ('trunk' or 'access').
	Type *GetOrganizationConfigTemplateSwitchProfilePorts200ApplicationJSONTypeEnum `json:"type,omitempty"`
	// The action to take when Unidirectional Link is detected (Alert only, Enforce). Default configuration is Alert only.
	Udld *GetOrganizationConfigTemplateSwitchProfilePorts200ApplicationJSONUdldEnum `json:"udld,omitempty"`
	// The VLAN of the switch profile port. A null value will clear the value set for trunk ports.
	Vlan *int64 `json:"vlan,omitempty"`
	// The voice VLAN of the switch profile port. Only applicable to access ports.
	VoiceVlan *int64 `json:"voiceVlan,omitempty"`
}

type GetOrganizationConfigTemplateSwitchProfilePortsResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Successful operation
	GetOrganizationConfigTemplateSwitchProfilePorts200ApplicationJSONObjects []GetOrganizationConfigTemplateSwitchProfilePorts200ApplicationJSON
}
