"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from datetime import date
from enum import Enum
from marshmallow import fields
from sdk import utils
from typing import Optional

class DependentEditRequestPersonContactEmailAddressTypeEnum(str, Enum):
    r"""Type of email address"""
    HOME = 'home'
    WORK = 'work'

class DependentEditRequestPersonContactPreferredMethodEnum(str, Enum):
    r"""Preferred method of contact for the person"""
    EMAIL = 'email'
    HOME_PHONE = 'home-phone'
    MAIL = 'mail'
    OTHER = 'other'
    WORK_PHONE = 'work-phone'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class DependentEditRequestPersonContact:
    r"""Contact information for the person"""
    
    email_address: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('email_address'), 'exclude': lambda f: f is None }})
    r"""Email address of the person"""  
    email_address_type: Optional[DependentEditRequestPersonContactEmailAddressTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('email_address_type'), 'exclude': lambda f: f is None }})
    r"""Type of email address"""  
    home_phone: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('home_phone'), 'exclude': lambda f: f is None }})
    r"""Home phone number in E.164 format"""  
    preferred_language: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('preferred_language'), 'exclude': lambda f: f is None }})
    r"""Preferred written or spoken language of the person"""  
    preferred_method: Optional[DependentEditRequestPersonContactPreferredMethodEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('preferred_method'), 'exclude': lambda f: f is None }})
    r"""Preferred method of contact for the person"""  
    speaks_english: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('speaks_english'), 'exclude': lambda f: f is None }})
    r"""True if the person can speak or communicate in English"""  
    work_phone: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('work_phone'), 'exclude': lambda f: f is None }})
    r"""Work phone number in E.164 format"""  
    
class DependentEditRequestPersonDetailsAmericanIndianStateEnum(str, Enum):
    r"""Primary state of the federally-recognized American Indian or Alaska Native tribe, if applicable"""
    AK = 'AK'
    AL = 'AL'
    AR = 'AR'
    AS = 'AS'
    AZ = 'AZ'
    CA = 'CA'
    CO = 'CO'
    CT = 'CT'
    DC = 'DC'
    DE = 'DE'
    FL = 'FL'
    FM = 'FM'
    GA = 'GA'
    GU = 'GU'
    HI = 'HI'
    IA = 'IA'
    ID = 'ID'
    IL = 'IL'
    IN = 'IN'
    KS = 'KS'
    KY = 'KY'
    LA = 'LA'
    MA = 'MA'
    MD = 'MD'
    ME = 'ME'
    MH = 'MH'
    MI = 'MI'
    MN = 'MN'
    MO = 'MO'
    MP = 'MP'
    MS = 'MS'
    MT = 'MT'
    NC = 'NC'
    ND = 'ND'
    NE = 'NE'
    NH = 'NH'
    NJ = 'NJ'
    NM = 'NM'
    NV = 'NV'
    NY = 'NY'
    OH = 'OH'
    OK = 'OK'
    OR = 'OR'
    PA = 'PA'
    PR = 'PR'
    PW = 'PW'
    RI = 'RI'
    SC = 'SC'
    SD = 'SD'
    TN = 'TN'
    TX = 'TX'
    UM = 'UM'
    UT = 'UT'
    VA = 'VA'
    VI = 'VI'
    VT = 'VT'
    WA = 'WA'
    WI = 'WI'
    WV = 'WV'
    WY = 'WY'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class DependentEditRequestPersonDetailsAmericanIndian:
    r"""American Indian status details (if applicable)"""
    
    state: Optional[DependentEditRequestPersonDetailsAmericanIndianStateEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('state'), 'exclude': lambda f: f is None }})
    r"""Primary state of the federally-recognized American Indian or Alaska Native tribe, if applicable"""  
    tribe: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tribe'), 'exclude': lambda f: f is None }})
    r"""Name of the federally-recognized American Indian or Alaska Native tribe, if applicable"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class DependentEditRequestPersonDetailsDisability:
    r"""Disability details (if applicable)"""
    
    communication: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('communication'), 'exclude': lambda f: f is None }})
    r"""True if the disability impacts the ability to communicate or read"""  
    disabled: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('disabled'), 'exclude': lambda f: f is None }})
    r"""True if the member has a disability"""  
    reason: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('reason'), 'exclude': lambda f: f is None }})
    r"""Description of the disability"""  
    
class DependentEditRequestPersonDetailsTobaccoTypesEnum(str, Enum):
    r"""Type of tobacco use"""
    CHEWING_TOBACCO = 'chewing-tobacco'
    CIGARETTES = 'cigarettes'
    PIPE = 'pipe'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class DependentEditRequestPersonDetailsTobacco:
    r"""Tobacco usage details (if applicable)"""
    
    duration: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('duration'), 'exclude': lambda f: f is None }})
    r"""Duration of tobacco use"""  
    frequency: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('frequency'), 'exclude': lambda f: f is None }})
    r"""Frequency of tobacco use"""  
    types: Optional[list[DependentEditRequestPersonDetailsTobaccoTypesEnum]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('types'), 'exclude': lambda f: f is None }})
    r"""List of types of tobacco use"""  
    user: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('user'), 'exclude': lambda f: f is None }})
    r"""True if the person uses tobacco of any kind"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class DependentEditRequestPersonDetails:
    r"""Additional personal details of the person"""
    
    american_indian: Optional[DependentEditRequestPersonDetailsAmericanIndian] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('american_indian'), 'exclude': lambda f: f is None }})
    r"""American Indian status details (if applicable)"""  
    disability: Optional[DependentEditRequestPersonDetailsDisability] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('disability'), 'exclude': lambda f: f is None }})
    r"""Disability details (if applicable)"""  
    is_military: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('is_military'), 'exclude': lambda f: f is None }})
    r"""True if the person is in the military"""  
    is_student: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('is_student'), 'exclude': lambda f: f is None }})
    r"""True if the person is a student"""  
    tobacco: Optional[DependentEditRequestPersonDetailsTobacco] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tobacco'), 'exclude': lambda f: f is None }})
    r"""Tobacco usage details (if applicable)"""  
    
class DependentEditRequestPersonHomeAddressStateEnum(str, Enum):
    r"""State postal code of the address"""
    AK = 'AK'
    AL = 'AL'
    AR = 'AR'
    AS = 'AS'
    AZ = 'AZ'
    CA = 'CA'
    CO = 'CO'
    CT = 'CT'
    DC = 'DC'
    DE = 'DE'
    FL = 'FL'
    FM = 'FM'
    GA = 'GA'
    GU = 'GU'
    HI = 'HI'
    IA = 'IA'
    ID = 'ID'
    IL = 'IL'
    IN = 'IN'
    KS = 'KS'
    KY = 'KY'
    LA = 'LA'
    MA = 'MA'
    MD = 'MD'
    ME = 'ME'
    MH = 'MH'
    MI = 'MI'
    MN = 'MN'
    MO = 'MO'
    MP = 'MP'
    MS = 'MS'
    MT = 'MT'
    NC = 'NC'
    ND = 'ND'
    NE = 'NE'
    NH = 'NH'
    NJ = 'NJ'
    NM = 'NM'
    NV = 'NV'
    NY = 'NY'
    OH = 'OH'
    OK = 'OK'
    OR = 'OR'
    PA = 'PA'
    PR = 'PR'
    PW = 'PW'
    RI = 'RI'
    SC = 'SC'
    SD = 'SD'
    TN = 'TN'
    TX = 'TX'
    UM = 'UM'
    UT = 'UT'
    VA = 'VA'
    VI = 'VI'
    VT = 'VT'
    WA = 'WA'
    WI = 'WI'
    WV = 'WV'
    WY = 'WY'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class DependentEditRequestPersonHomeAddress:
    r"""Home address of the person"""
    
    city: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('city') }})
    r"""City of the address"""  
    state: DependentEditRequestPersonHomeAddressStateEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('state') }})
    r"""State postal code of the address"""  
    street_one: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('street_one') }})
    r"""Line one of the address"""  
    zip_code: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('zip_code') }})
    r"""Zip code of the address"""  
    county: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('county'), 'exclude': lambda f: f is None }})
    r"""County of the address"""  
    street_two: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('street_two'), 'exclude': lambda f: f is None }})
    r"""Line two of the address"""  
    
class DependentEditRequestPersonMailingAddressStateEnum(str, Enum):
    r"""State postal code of the address"""
    AK = 'AK'
    AL = 'AL'
    AR = 'AR'
    AS = 'AS'
    AZ = 'AZ'
    CA = 'CA'
    CO = 'CO'
    CT = 'CT'
    DC = 'DC'
    DE = 'DE'
    FL = 'FL'
    FM = 'FM'
    GA = 'GA'
    GU = 'GU'
    HI = 'HI'
    IA = 'IA'
    ID = 'ID'
    IL = 'IL'
    IN = 'IN'
    KS = 'KS'
    KY = 'KY'
    LA = 'LA'
    MA = 'MA'
    MD = 'MD'
    ME = 'ME'
    MH = 'MH'
    MI = 'MI'
    MN = 'MN'
    MO = 'MO'
    MP = 'MP'
    MS = 'MS'
    MT = 'MT'
    NC = 'NC'
    ND = 'ND'
    NE = 'NE'
    NH = 'NH'
    NJ = 'NJ'
    NM = 'NM'
    NV = 'NV'
    NY = 'NY'
    OH = 'OH'
    OK = 'OK'
    OR = 'OR'
    PA = 'PA'
    PR = 'PR'
    PW = 'PW'
    RI = 'RI'
    SC = 'SC'
    SD = 'SD'
    TN = 'TN'
    TX = 'TX'
    UM = 'UM'
    UT = 'UT'
    VA = 'VA'
    VI = 'VI'
    VT = 'VT'
    WA = 'WA'
    WI = 'WI'
    WV = 'WV'
    WY = 'WY'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class DependentEditRequestPersonMailingAddress:
    r"""Mailing address for the person"""
    
    city: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('city') }})
    r"""City of the address"""  
    state: DependentEditRequestPersonMailingAddressStateEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('state') }})
    r"""State postal code of the address"""  
    street_one: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('street_one') }})
    r"""Line one of the address"""  
    zip_code: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('zip_code') }})
    r"""Zip code of the address"""  
    county: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('county'), 'exclude': lambda f: f is None }})
    r"""County of the address"""  
    street_two: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('street_two'), 'exclude': lambda f: f is None }})
    r"""Line two of the address"""  
    
class DependentEditRequestPersonMaritalStatusEnum(str, Enum):
    r"""Marital status of the person"""
    DIVORCED = 'divorced'
    DOMESTIC_PARTNER = 'domestic-partner'
    LEGALLY_SEPARATED = 'legally-separated'
    MARRIED = 'married'
    SINGLE = 'single'
    WIDOWED = 'widowed'

class DependentEditRequestPersonSexEnum(str, Enum):
    r"""Sex of the person"""
    F = 'F'
    M = 'M'
    U = 'U'
    X = 'X'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class DependentEditRequestPerson:
    r"""Personal information for the dependent"""
    
    contact: Optional[DependentEditRequestPersonContact] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('contact'), 'exclude': lambda f: f is None }})
    r"""Contact information for the person"""  
    date_of_birth: Optional[date] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('date_of_birth'), 'encoder': utils.dateisoformat(True), 'decoder': utils.datefromisoformat, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""ISO-8601 date string for the date of birth of the person"""  
    details: Optional[DependentEditRequestPersonDetails] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('details'), 'exclude': lambda f: f is None }})
    r"""Additional personal details of the person"""  
    first_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('first_name'), 'exclude': lambda f: f is None }})
    r"""First name of the person"""  
    home_address: Optional[DependentEditRequestPersonHomeAddress] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('home_address'), 'exclude': lambda f: f is None }})
    r"""Home address of the person"""  
    last_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('last_name'), 'exclude': lambda f: f is None }})
    r"""Last name of the person"""  
    mailing_address: Optional[DependentEditRequestPersonMailingAddress] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('mailing_address'), 'exclude': lambda f: f is None }})
    r"""Mailing address for the person"""  
    marital_status: Optional[DependentEditRequestPersonMaritalStatusEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('marital_status'), 'exclude': lambda f: f is None }})
    r"""Marital status of the person"""  
    middle_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('middle_name'), 'exclude': lambda f: f is None }})
    r"""Middle name of the person"""  
    sex: Optional[DependentEditRequestPersonSexEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sex'), 'exclude': lambda f: f is None }})
    r"""Sex of the person"""  
    ssn: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ssn'), 'exclude': lambda f: f is None }})
    r"""Social Security Number of the person"""  
    suffix: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('suffix'), 'exclude': lambda f: f is None }})
    r"""Suffix of the person"""  
    
class DependentEditRequestRelationshipEnum(str, Enum):
    r"""Relationship of the dependent to the employee"""
    ADOPTED_CHILD = 'adopted-child'
    CHILD = 'child'
    CIVIL_UNION = 'civil-union'
    DOMESTIC_PARTNER = 'domestic-partner'
    EX_SPOUSE = 'ex-spouse'
    FOSTER_CHILD = 'foster-child'
    GRANDCHILD = 'grandchild'
    LEGAL_GUARDIANSHIP = 'legal-guardianship'
    OTHER = 'other'
    SPOUSE = 'spouse'
    STEP_CHILD = 'step-child'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class DependentEditRequest:
    
    person: Optional[DependentEditRequestPerson] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('person'), 'exclude': lambda f: f is None }})
    r"""Personal information for the dependent"""  
    relationship: Optional[DependentEditRequestRelationshipEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('relationship'), 'exclude': lambda f: f is None }})
    r"""Relationship of the dependent to the employee"""  
    