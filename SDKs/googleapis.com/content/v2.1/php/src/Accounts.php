<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Accounts 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Returns information about the authenticated user.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ContentAccountsAuthinfoRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ContentAccountsAuthinfoSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ContentAccountsAuthinfoResponse
     */
	public function contentAccountsAuthinfo(
        \OpenAPI\OpenAPI\Models\Operations\ContentAccountsAuthinfoRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ContentAccountsAuthinfoSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ContentAccountsAuthinfoResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/accounts/authinfo');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ContentAccountsAuthinfoRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ContentAccountsAuthinfoResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->accountsAuthInfoResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\AccountsAuthInfoResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Claims the website of a Merchant Center sub-account. Merchant accounts with approved third-party CSSs aren't required to claim a website.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ContentAccountsClaimwebsiteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ContentAccountsClaimwebsiteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ContentAccountsClaimwebsiteResponse
     */
	public function contentAccountsClaimwebsite(
        \OpenAPI\OpenAPI\Models\Operations\ContentAccountsClaimwebsiteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ContentAccountsClaimwebsiteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ContentAccountsClaimwebsiteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{merchantId}/accounts/{accountId}/claimwebsite', \OpenAPI\OpenAPI\Models\Operations\ContentAccountsClaimwebsiteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ContentAccountsClaimwebsiteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ContentAccountsClaimwebsiteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->accountsClaimWebsiteResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\AccountsClaimWebsiteResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Uploads credentials for the Merchant Center account. If credentials already exist for this Merchant Center account and purpose, this method updates them.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ContentAccountsCredentialsCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ContentAccountsCredentialsCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ContentAccountsCredentialsCreateResponse
     */
	public function contentAccountsCredentialsCreate(
        \OpenAPI\OpenAPI\Models\Operations\ContentAccountsCredentialsCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ContentAccountsCredentialsCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ContentAccountsCredentialsCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/accounts/{accountId}/credentials', \OpenAPI\OpenAPI\Models\Operations\ContentAccountsCredentialsCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "accountCredentials", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ContentAccountsCredentialsCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ContentAccountsCredentialsCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->accountCredentials = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\AccountCredentials', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieves, inserts, updates, and deletes multiple Merchant Center (sub-)accounts in a single request.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ContentAccountsCustombatchRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ContentAccountsCustombatchSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ContentAccountsCustombatchResponse
     */
	public function contentAccountsCustombatch(
        \OpenAPI\OpenAPI\Models\Operations\ContentAccountsCustombatchRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ContentAccountsCustombatchSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ContentAccountsCustombatchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/accounts/batch');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "accountsCustomBatchRequestInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ContentAccountsCustombatchRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ContentAccountsCustombatchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->accountsCustomBatchResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\AccountsCustomBatchResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Deletes a Merchant Center sub-account.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ContentAccountsDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ContentAccountsDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ContentAccountsDeleteResponse
     */
	public function contentAccountsDelete(
        \OpenAPI\OpenAPI\Models\Operations\ContentAccountsDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ContentAccountsDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ContentAccountsDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{merchantId}/accounts/{accountId}', \OpenAPI\OpenAPI\Models\Operations\ContentAccountsDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ContentAccountsDeleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ContentAccountsDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Retrieves a Merchant Center account.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ContentAccountsGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ContentAccountsGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ContentAccountsGetResponse
     */
	public function contentAccountsGet(
        \OpenAPI\OpenAPI\Models\Operations\ContentAccountsGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ContentAccountsGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ContentAccountsGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{merchantId}/accounts/{accountId}', \OpenAPI\OpenAPI\Models\Operations\ContentAccountsGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ContentAccountsGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ContentAccountsGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->account = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Account', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a Merchant Center sub-account.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ContentAccountsInsertRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ContentAccountsInsertSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ContentAccountsInsertResponse
     */
	public function contentAccountsInsert(
        \OpenAPI\OpenAPI\Models\Operations\ContentAccountsInsertRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ContentAccountsInsertSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ContentAccountsInsertResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{merchantId}/accounts', \OpenAPI\OpenAPI\Models\Operations\ContentAccountsInsertRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "accountInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ContentAccountsInsertRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ContentAccountsInsertResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->account = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Account', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a new label, not assigned to any account.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ContentAccountsLabelsCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ContentAccountsLabelsCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ContentAccountsLabelsCreateResponse
     */
	public function contentAccountsLabelsCreate(
        \OpenAPI\OpenAPI\Models\Operations\ContentAccountsLabelsCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ContentAccountsLabelsCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ContentAccountsLabelsCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/accounts/{accountId}/labels', \OpenAPI\OpenAPI\Models\Operations\ContentAccountsLabelsCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "accountLabelInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ContentAccountsLabelsCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ContentAccountsLabelsCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->accountLabel = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\AccountLabel', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Deletes a label and removes it from all accounts to which it was assigned.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ContentAccountsLabelsDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ContentAccountsLabelsDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ContentAccountsLabelsDeleteResponse
     */
	public function contentAccountsLabelsDelete(
        \OpenAPI\OpenAPI\Models\Operations\ContentAccountsLabelsDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ContentAccountsLabelsDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ContentAccountsLabelsDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/accounts/{accountId}/labels/{labelId}', \OpenAPI\OpenAPI\Models\Operations\ContentAccountsLabelsDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ContentAccountsLabelsDeleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ContentAccountsLabelsDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Lists the labels assigned to an account.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ContentAccountsLabelsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ContentAccountsLabelsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ContentAccountsLabelsListResponse
     */
	public function contentAccountsLabelsList(
        \OpenAPI\OpenAPI\Models\Operations\ContentAccountsLabelsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ContentAccountsLabelsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ContentAccountsLabelsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/accounts/{accountId}/labels', \OpenAPI\OpenAPI\Models\Operations\ContentAccountsLabelsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ContentAccountsLabelsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ContentAccountsLabelsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listAccountLabelsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListAccountLabelsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates a label.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ContentAccountsLabelsPatchRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ContentAccountsLabelsPatchSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ContentAccountsLabelsPatchResponse
     */
	public function contentAccountsLabelsPatch(
        \OpenAPI\OpenAPI\Models\Operations\ContentAccountsLabelsPatchRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ContentAccountsLabelsPatchSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ContentAccountsLabelsPatchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/accounts/{accountId}/labels/{labelId}', \OpenAPI\OpenAPI\Models\Operations\ContentAccountsLabelsPatchRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "accountLabelInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ContentAccountsLabelsPatchRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ContentAccountsLabelsPatchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->accountLabel = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\AccountLabel', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Performs an action on a link between two Merchant Center accounts, namely accountId and linkedAccountId.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ContentAccountsLinkRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ContentAccountsLinkSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ContentAccountsLinkResponse
     */
	public function contentAccountsLink(
        \OpenAPI\OpenAPI\Models\Operations\ContentAccountsLinkRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ContentAccountsLinkSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ContentAccountsLinkResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{merchantId}/accounts/{accountId}/link', \OpenAPI\OpenAPI\Models\Operations\ContentAccountsLinkRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "accountsLinkRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ContentAccountsLinkRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ContentAccountsLinkResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->accountsLinkResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\AccountsLinkResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists the sub-accounts in your Merchant Center account.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ContentAccountsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ContentAccountsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ContentAccountsListResponse
     */
	public function contentAccountsList(
        \OpenAPI\OpenAPI\Models\Operations\ContentAccountsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ContentAccountsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ContentAccountsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{merchantId}/accounts', \OpenAPI\OpenAPI\Models\Operations\ContentAccountsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ContentAccountsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ContentAccountsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->accountsListResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\AccountsListResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns the list of accounts linked to your Merchant Center account.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ContentAccountsListlinksRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ContentAccountsListlinksSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ContentAccountsListlinksResponse
     */
	public function contentAccountsListlinks(
        \OpenAPI\OpenAPI\Models\Operations\ContentAccountsListlinksRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ContentAccountsListlinksSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ContentAccountsListlinksResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{merchantId}/accounts/{accountId}/listlinks', \OpenAPI\OpenAPI\Models\Operations\ContentAccountsListlinksRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ContentAccountsListlinksRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ContentAccountsListlinksResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->accountsListLinksResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\AccountsListLinksResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Request verification code to start phone verification.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ContentAccountsRequestphoneverificationRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ContentAccountsRequestphoneverificationSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ContentAccountsRequestphoneverificationResponse
     */
	public function contentAccountsRequestphoneverification(
        \OpenAPI\OpenAPI\Models\Operations\ContentAccountsRequestphoneverificationRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ContentAccountsRequestphoneverificationSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ContentAccountsRequestphoneverificationResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{merchantId}/accounts/{accountId}/requestphoneverification', \OpenAPI\OpenAPI\Models\Operations\ContentAccountsRequestphoneverificationRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestPhoneVerificationRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ContentAccountsRequestphoneverificationRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ContentAccountsRequestphoneverificationResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->requestPhoneVerificationResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\RequestPhoneVerificationResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Links return carrier to a merchant account.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ContentAccountsReturncarrierCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ContentAccountsReturncarrierCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ContentAccountsReturncarrierCreateResponse
     */
	public function contentAccountsReturncarrierCreate(
        \OpenAPI\OpenAPI\Models\Operations\ContentAccountsReturncarrierCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ContentAccountsReturncarrierCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ContentAccountsReturncarrierCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/accounts/{accountId}/returncarrier', \OpenAPI\OpenAPI\Models\Operations\ContentAccountsReturncarrierCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "accountReturnCarrierInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ContentAccountsReturncarrierCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ContentAccountsReturncarrierCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->accountReturnCarrier = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\AccountReturnCarrier', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Delete a return carrier in the merchant account.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ContentAccountsReturncarrierDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ContentAccountsReturncarrierDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ContentAccountsReturncarrierDeleteResponse
     */
	public function contentAccountsReturncarrierDelete(
        \OpenAPI\OpenAPI\Models\Operations\ContentAccountsReturncarrierDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ContentAccountsReturncarrierDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ContentAccountsReturncarrierDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/accounts/{accountId}/returncarrier/{carrierAccountId}', \OpenAPI\OpenAPI\Models\Operations\ContentAccountsReturncarrierDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ContentAccountsReturncarrierDeleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ContentAccountsReturncarrierDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Lists available return carriers in the merchant account.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ContentAccountsReturncarrierListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ContentAccountsReturncarrierListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ContentAccountsReturncarrierListResponse
     */
	public function contentAccountsReturncarrierList(
        \OpenAPI\OpenAPI\Models\Operations\ContentAccountsReturncarrierListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ContentAccountsReturncarrierListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ContentAccountsReturncarrierListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/accounts/{accountId}/returncarrier', \OpenAPI\OpenAPI\Models\Operations\ContentAccountsReturncarrierListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ContentAccountsReturncarrierListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ContentAccountsReturncarrierListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listAccountReturnCarrierResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListAccountReturnCarrierResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates a return carrier in the merchant account.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ContentAccountsReturncarrierPatchRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ContentAccountsReturncarrierPatchSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ContentAccountsReturncarrierPatchResponse
     */
	public function contentAccountsReturncarrierPatch(
        \OpenAPI\OpenAPI\Models\Operations\ContentAccountsReturncarrierPatchRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ContentAccountsReturncarrierPatchSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ContentAccountsReturncarrierPatchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/accounts/{accountId}/returncarrier/{carrierAccountId}', \OpenAPI\OpenAPI\Models\Operations\ContentAccountsReturncarrierPatchRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "accountReturnCarrierInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ContentAccountsReturncarrierPatchRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ContentAccountsReturncarrierPatchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->accountReturnCarrier = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\AccountReturnCarrier', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates a Merchant Center account. Any fields that are not provided are deleted from the resource.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ContentAccountsUpdateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ContentAccountsUpdateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ContentAccountsUpdateResponse
     */
	public function contentAccountsUpdate(
        \OpenAPI\OpenAPI\Models\Operations\ContentAccountsUpdateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ContentAccountsUpdateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ContentAccountsUpdateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{merchantId}/accounts/{accountId}', \OpenAPI\OpenAPI\Models\Operations\ContentAccountsUpdateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "accountInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ContentAccountsUpdateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ContentAccountsUpdateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->account = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Account', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates labels that are assigned to the Merchant Center account by CSS user.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ContentAccountsUpdatelabelsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ContentAccountsUpdatelabelsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ContentAccountsUpdatelabelsResponse
     */
	public function contentAccountsUpdatelabels(
        \OpenAPI\OpenAPI\Models\Operations\ContentAccountsUpdatelabelsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ContentAccountsUpdatelabelsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ContentAccountsUpdatelabelsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{merchantId}/accounts/{accountId}/updatelabels', \OpenAPI\OpenAPI\Models\Operations\ContentAccountsUpdatelabelsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "accountsUpdateLabelsRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ContentAccountsUpdatelabelsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ContentAccountsUpdatelabelsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->accountsUpdateLabelsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\AccountsUpdateLabelsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Validates verification code to verify phone number for the account. If successful this will overwrite the value of `accounts.businessinformation.phoneNumber`. Only verified phone number will replace an existing verified phone number.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ContentAccountsVerifyphonenumberRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ContentAccountsVerifyphonenumberSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ContentAccountsVerifyphonenumberResponse
     */
	public function contentAccountsVerifyphonenumber(
        \OpenAPI\OpenAPI\Models\Operations\ContentAccountsVerifyphonenumberRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ContentAccountsVerifyphonenumberSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ContentAccountsVerifyphonenumberResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{merchantId}/accounts/{accountId}/verifyphonenumber', \OpenAPI\OpenAPI\Models\Operations\ContentAccountsVerifyphonenumberRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "verifyPhoneNumberRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ContentAccountsVerifyphonenumberRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ContentAccountsVerifyphonenumberResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->verifyPhoneNumberResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\VerifyPhoneNumberResponse', 'json');
            }
        }

        return $response;
    }
}