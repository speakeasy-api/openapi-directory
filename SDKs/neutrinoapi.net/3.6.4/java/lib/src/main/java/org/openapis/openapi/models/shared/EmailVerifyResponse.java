/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonProperty;

public class EmailVerifyResponse {
    /**
     * The email domain
     */
    @JsonProperty("domain")
    public String domain;

    public EmailVerifyResponse withDomain(String domain) {
        this.domain = domain;
        return this;
    }
    
    /**
     * True if this address has a domain error (e.g. no valid mail server records)
     */
    @JsonProperty("domain-error")
    public Boolean domainError;

    public EmailVerifyResponse withDomainError(Boolean domainError) {
        this.domainError = domainError;
        return this;
    }
    
    /**
     * The email address. If you have used the fix-typos option then this will be the fixed address
     */
    @JsonProperty("email")
    public String email;

    public EmailVerifyResponse withEmail(String email) {
        this.email = email;
        return this;
    }
    
    /**
     * True if this email domain has a catch-all policy (it will accept mail for any username)
     */
    @JsonProperty("is-catch-all")
    public Boolean isCatchAll;

    public EmailVerifyResponse withIsCatchAll(Boolean isCatchAll) {
        this.isCatchAll = isCatchAll;
        return this;
    }
    
    /**
     * True if the mail server responded with a temporary failure (either a 4xx response code or unresponsive server). You can retry this address later, we recommend waiting at least 15 minutes before retrying
     */
    @JsonProperty("is-deferred")
    public Boolean isDeferred;

    public EmailVerifyResponse withIsDeferred(Boolean isDeferred) {
        this.isDeferred = isDeferred;
        return this;
    }
    
    /**
     * True if this address is a disposable, temporary or darknet related email address
     */
    @JsonProperty("is-disposable")
    public Boolean isDisposable;

    public EmailVerifyResponse withIsDisposable(Boolean isDisposable) {
        this.isDisposable = isDisposable;
        return this;
    }
    
    /**
     * True if this address is a free-mail address
     */
    @JsonProperty("is-freemail")
    public Boolean isFreemail;

    public EmailVerifyResponse withIsFreemail(Boolean isFreemail) {
        this.isFreemail = isFreemail;
        return this;
    }
    
    /**
     * True if this address is for a person. False if this is a role based address, e.g. admin@, help@, office@, etc.
     */
    @JsonProperty("is-personal")
    public Boolean isPersonal;

    public EmailVerifyResponse withIsPersonal(Boolean isPersonal) {
        this.isPersonal = isPersonal;
        return this;
    }
    
    /**
     * The email service provider domain
     */
    @JsonProperty("provider")
    public String provider;

    public EmailVerifyResponse withProvider(String provider) {
        this.provider = provider;
        return this;
    }
    
    /**
     * The raw SMTP response message received during verification
     */
    @JsonProperty("smtp-response")
    public String smtpResponse;

    public EmailVerifyResponse withSmtpResponse(String smtpResponse) {
        this.smtpResponse = smtpResponse;
        return this;
    }
    
    /**
     * The SMTP verification status for the address: &lt;br&gt; &lt;ul&gt; &lt;li&gt;ok - SMTP verification was successful, this is a real address that can receive mail&lt;/li&gt; &lt;li&gt;invalid - this is not a valid email address (has either a domain or syntax error)&lt;/li&gt; &lt;li&gt;absent - this address is not registered with the email service provider&lt;/li&gt; &lt;li&gt;unresponsive - the mail server(s) for this address timed-out or refused to open an SMTP connection&lt;/li&gt; &lt;li&gt;unknown - sorry, we could not reliably determine the real status of this address (this address may or may not exist)&lt;/li&gt; &lt;/ul&gt;
     */
    @JsonProperty("smtp-status")
    public String smtpStatus;

    public EmailVerifyResponse withSmtpStatus(String smtpStatus) {
        this.smtpStatus = smtpStatus;
        return this;
    }
    
    /**
     * True if this address has a syntax error
     */
    @JsonProperty("syntax-error")
    public Boolean syntaxError;

    public EmailVerifyResponse withSyntaxError(Boolean syntaxError) {
        this.syntaxError = syntaxError;
        return this;
    }
    
    /**
     * True if typos have been fixed
     */
    @JsonProperty("typos-fixed")
    public Boolean typosFixed;

    public EmailVerifyResponse withTyposFixed(Boolean typosFixed) {
        this.typosFixed = typosFixed;
        return this;
    }
    
    /**
     * Is this a valid email address (syntax and domain is valid)
     */
    @JsonProperty("valid")
    public Boolean valid;

    public EmailVerifyResponse withValid(Boolean valid) {
        this.valid = valid;
        return this;
    }
    
    /**
     * True if this address has passed SMTP verification. Check the smtp-status and smtp-response fields for specific verification details
     */
    @JsonProperty("verified")
    public Boolean verified;

    public EmailVerifyResponse withVerified(Boolean verified) {
        this.verified = verified;
        return this;
    }
    
    public EmailVerifyResponse(@JsonProperty("domain") String domain, @JsonProperty("domain-error") Boolean domainError, @JsonProperty("email") String email, @JsonProperty("is-catch-all") Boolean isCatchAll, @JsonProperty("is-deferred") Boolean isDeferred, @JsonProperty("is-disposable") Boolean isDisposable, @JsonProperty("is-freemail") Boolean isFreemail, @JsonProperty("is-personal") Boolean isPersonal, @JsonProperty("provider") String provider, @JsonProperty("smtp-response") String smtpResponse, @JsonProperty("smtp-status") String smtpStatus, @JsonProperty("syntax-error") Boolean syntaxError, @JsonProperty("typos-fixed") Boolean typosFixed, @JsonProperty("valid") Boolean valid, @JsonProperty("verified") Boolean verified) {
        this.domain = domain;
        this.domainError = domainError;
        this.email = email;
        this.isCatchAll = isCatchAll;
        this.isDeferred = isDeferred;
        this.isDisposable = isDisposable;
        this.isFreemail = isFreemail;
        this.isPersonal = isPersonal;
        this.provider = provider;
        this.smtpResponse = smtpResponse;
        this.smtpStatus = smtpStatus;
        this.syntaxError = syntaxError;
        this.typosFixed = typosFixed;
        this.valid = valid;
        this.verified = verified;
  }
}
