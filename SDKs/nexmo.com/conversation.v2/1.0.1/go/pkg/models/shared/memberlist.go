// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type MemberListLinksSelf struct {
	Href *string `json:"href,omitempty"`
}

type MemberListLinks struct {
	Self *MemberListLinksSelf `json:"self,omitempty"`
}

// MemberListStateEnum - The state that the member is in for this conversation
type MemberListStateEnum string

const (
	MemberListStateEnumInvited MemberListStateEnum = "INVITED"
	MemberListStateEnumJoined  MemberListStateEnum = "JOINED"
)

func (e MemberListStateEnum) ToPointer() *MemberListStateEnum {
	return &e
}

func (e *MemberListStateEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "INVITED":
		fallthrough
	case "JOINED":
		*e = MemberListStateEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for MemberListStateEnum: %v", v)
	}
}

type MemberList struct {
	Links *MemberListLinks `json:"_links,omitempty"`
	// The display name of the User
	DisplayName *string `json:"display_name,omitempty"`
	// Member ID
	ID *string `json:"id,omitempty"`
	// The name of the User
	Name *string `json:"name,omitempty"`
	// The state that the member is in for this conversation
	State *MemberListStateEnum `json:"state,omitempty"`
	// The ID of the User
	UserID *string `json:"user_id,omitempty"`
}
