"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import listinsightsanystatusfilter as shared_listinsightsanystatusfilter
from ..shared import listinsightsclosedstatusfilter as shared_listinsightsclosedstatusfilter
from ..shared import listinsightsongoingstatusfilter as shared_listinsightsongoingstatusfilter
from ..shared import listorganizationinsightsresponse as shared_listorganizationinsightsresponse
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Any, Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ListOrganizationInsightsRequestBodyStatusFilter:
    r"""A filter used by <code>ListInsights</code> to specify which insights to return."""
    
    any: Optional[shared_listinsightsanystatusfilter.ListInsightsAnyStatusFilter] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Any'), 'exclude': lambda f: f is None }})  
    closed: Optional[shared_listinsightsclosedstatusfilter.ListInsightsClosedStatusFilter] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Closed'), 'exclude': lambda f: f is None }})  
    ongoing: Optional[shared_listinsightsongoingstatusfilter.ListInsightsOngoingStatusFilter] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Ongoing'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ListOrganizationInsightsRequestBody:
    
    status_filter: ListOrganizationInsightsRequestBodyStatusFilter = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('StatusFilter') }})
    r"""A filter used by <code>ListInsights</code> to specify which insights to return."""  
    account_ids: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AccountIds'), 'exclude': lambda f: f is None }})
    r"""The ID of the Amazon Web Services account."""  
    max_results: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('MaxResults'), 'exclude': lambda f: f is None }})
    r"""The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned <code>nextToken</code> value."""  
    next_token: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('NextToken'), 'exclude': lambda f: f is None }})
    r"""The pagination token to use to retrieve the next page of results for this operation. If this value is null, it retrieves the first page."""  
    organizational_unit_ids: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('OrganizationalUnitIds'), 'exclude': lambda f: f is None }})
    r"""The ID of the organizational unit."""  
    

@dataclasses.dataclass
class ListOrganizationInsightsRequest:
    
    request_body: ListOrganizationInsightsRequestBody = dataclasses.field(metadata={'request': { 'media_type': 'application/json' }})  
    max_results: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'MaxResults', 'style': 'form', 'explode': True }})
    r"""Pagination limit"""  
    next_token: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'NextToken', 'style': 'form', 'explode': True }})
    r"""Pagination token"""  
    x_amz_algorithm: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Algorithm', 'style': 'simple', 'explode': False }})  
    x_amz_content_sha256: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Content-Sha256', 'style': 'simple', 'explode': False }})  
    x_amz_credential: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Credential', 'style': 'simple', 'explode': False }})  
    x_amz_date: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Date', 'style': 'simple', 'explode': False }})  
    x_amz_security_token: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Security-Token', 'style': 'simple', 'explode': False }})  
    x_amz_signature: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Signature', 'style': 'simple', 'explode': False }})  
    x_amz_signed_headers: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-SignedHeaders', 'style': 'simple', 'explode': False }})  
    

@dataclasses.dataclass
class ListOrganizationInsightsResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    access_denied_exception: Optional[Any] = dataclasses.field(default=None)
    r"""AccessDeniedException"""  
    internal_server_exception: Optional[Any] = dataclasses.field(default=None)
    r"""InternalServerException"""  
    list_organization_insights_response: Optional[shared_listorganizationinsightsresponse.ListOrganizationInsightsResponse] = dataclasses.field(default=None)
    r"""Success"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    throttling_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ThrottlingException"""  
    validation_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ValidationException"""  
    