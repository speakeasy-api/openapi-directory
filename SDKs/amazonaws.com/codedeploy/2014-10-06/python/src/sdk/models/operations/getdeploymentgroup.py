"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import getdeploymentgroupinput as shared_getdeploymentgroupinput
from ..shared import getdeploymentgroupoutput as shared_getdeploymentgroupoutput
from enum import Enum
from typing import Any, Optional

class GetDeploymentGroupXAmzTargetEnum(str, Enum):
    CODE_DEPLOY_20141006_GET_DEPLOYMENT_GROUP = 'CodeDeploy_20141006.GetDeploymentGroup'


@dataclasses.dataclass
class GetDeploymentGroupRequest:
    
    get_deployment_group_input: shared_getdeploymentgroupinput.GetDeploymentGroupInput = dataclasses.field(metadata={'request': { 'media_type': 'application/json' }})  
    x_amz_target: GetDeploymentGroupXAmzTargetEnum = dataclasses.field(metadata={'header': { 'field_name': 'X-Amz-Target', 'style': 'simple', 'explode': False }})  
    x_amz_algorithm: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Algorithm', 'style': 'simple', 'explode': False }})  
    x_amz_content_sha256: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Content-Sha256', 'style': 'simple', 'explode': False }})  
    x_amz_credential: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Credential', 'style': 'simple', 'explode': False }})  
    x_amz_date: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Date', 'style': 'simple', 'explode': False }})  
    x_amz_security_token: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Security-Token', 'style': 'simple', 'explode': False }})  
    x_amz_signature: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Signature', 'style': 'simple', 'explode': False }})  
    x_amz_signed_headers: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-SignedHeaders', 'style': 'simple', 'explode': False }})  
    

@dataclasses.dataclass
class GetDeploymentGroupResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    application_does_not_exist_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ApplicationDoesNotExistException"""  
    application_name_required_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ApplicationNameRequiredException"""  
    deployment_config_does_not_exist_exception: Optional[Any] = dataclasses.field(default=None)
    r"""DeploymentConfigDoesNotExistException"""  
    deployment_group_does_not_exist_exception: Optional[Any] = dataclasses.field(default=None)
    r"""DeploymentGroupDoesNotExistException"""  
    deployment_group_name_required_exception: Optional[Any] = dataclasses.field(default=None)
    r"""DeploymentGroupNameRequiredException"""  
    get_deployment_group_output: Optional[shared_getdeploymentgroupoutput.GetDeploymentGroupOutput] = dataclasses.field(default=None)
    r"""Success"""  
    invalid_application_name_exception: Optional[Any] = dataclasses.field(default=None)
    r"""InvalidApplicationNameException"""  
    invalid_deployment_group_name_exception: Optional[Any] = dataclasses.field(default=None)
    r"""InvalidDeploymentGroupNameException"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    