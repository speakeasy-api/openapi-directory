/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.LocalDate;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

/**
 * GETDebitMemoType - Container for custom fields of a Debit Memo object.
 * 
 */
public class GETDebitMemoType {
    /**
     * ID of the corresponding object in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("IntegrationId__NS")
    public String integrationIdNS;
    public GETDebitMemoType withIntegrationIdNS(String integrationIdNS) {
        this.integrationIdNS = integrationIdNS;
        return this;
    }
    
    /**
     * Status of the debit memo's synchronization with NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("IntegrationStatus__NS")
    public String integrationStatusNS;
    public GETDebitMemoType withIntegrationStatusNS(String integrationStatusNS) {
        this.integrationStatusNS = integrationStatusNS;
        return this;
    }
    
    /**
     * Date when the debit memo was synchronized with NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("SyncDate__NS")
    public String syncDateNS;
    public GETDebitMemoType withSyncDateNS(String syncDateNS) {
        this.syncDateNS = syncDateNS;
        return this;
    }
    
    /**
     * The ID of the customer account associated with the debit memo.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("accountId")
    public String accountId;
    public GETDebitMemoType withAccountId(String accountId) {
        this.accountId = accountId;
        return this;
    }
    
    /**
     * The total amount of the debit memo.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("amount")
    public Double amount;
    public GETDebitMemoType withAmount(Double amount) {
        this.amount = amount;
        return this;
    }
    
    /**
     * Whether debit memos are automatically picked up for processing in the corresponding payment run. 
     * 
     * By default, debit memos are automatically picked up for processing in the corresponding payment run.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("autoPay")
    public Boolean autoPay;
    public GETDebitMemoType withAutoPay(Boolean autoPay) {
        this.autoPay = autoPay;
        return this;
    }
    
    /**
     * The balance of the debit memo.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("balance")
    public Double balance;
    public GETDebitMemoType withBalance(Double balance) {
        this.balance = balance;
        return this;
    }
    
    /**
     * The amount that is applied to the debit memo.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("beAppliedAmount")
    public Double beAppliedAmount;
    public GETDebitMemoType withBeAppliedAmount(Double beAppliedAmount) {
        this.beAppliedAmount = beAppliedAmount;
        return this;
    }
    
    /**
     * The ID of the Zuora user who cancelled the debit memo.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("cancelledById")
    public String cancelledById;
    public GETDebitMemoType withCancelledById(String cancelledById) {
        this.cancelledById = cancelledById;
        return this;
    }
    
    /**
     * The date and time when the debit memo was cancelled, in `yyyy-mm-dd hh:mm:ss` format.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("cancelledOn")
    public OffsetDateTime cancelledOn;
    public GETDebitMemoType withCancelledOn(OffsetDateTime cancelledOn) {
        this.cancelledOn = cancelledOn;
        return this;
    }
    
    /**
     * Comments about the debit memo.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("comment")
    public String comment;
    public GETDebitMemoType withComment(String comment) {
        this.comment = comment;
        return this;
    }
    
    /**
     * The ID of the Zuora user who created the debit memo.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("createdById")
    public String createdById;
    public GETDebitMemoType withCreatedById(String createdById) {
        this.createdById = createdById;
        return this;
    }
    
    /**
     * The date and time when the debit memo was created, in `yyyy-mm-dd hh:mm:ss` format. For example, 2017-03-01 15:31:10.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("createdDate")
    public OffsetDateTime createdDate;
    public GETDebitMemoType withCreatedDate(OffsetDateTime createdDate) {
        this.createdDate = createdDate;
        return this;
    }
    
    /**
     * The date when the debit memo takes effect, in `yyyy-mm-dd` format. For example, 2017-05-20.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd")
    @JsonProperty("debitMemoDate")
    public LocalDate debitMemoDate;
    public GETDebitMemoType withDebitMemoDate(LocalDate debitMemoDate) {
        this.debitMemoDate = debitMemoDate;
        return this;
    }
    
    /**
     * The date by which the payment for the debit memo is due, in `yyyy-mm-dd` format.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd")
    @JsonProperty("dueDate")
    public LocalDate dueDate;
    public GETDebitMemoType withDueDate(LocalDate dueDate) {
        this.dueDate = dueDate;
        return this;
    }
    
    /**
     * The unique ID of the debit memo.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    public String id;
    public GETDebitMemoType withId(String id) {
        this.id = id;
        return this;
    }
    
    /**
     * The ID of the latest PDF file generated for the debit memo.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("latestPDFFileId")
    public String latestPDFFileId;
    public GETDebitMemoType withLatestPDFFileId(String latestPDFFileId) {
        this.latestPDFFileId = latestPDFFileId;
        return this;
    }
    
    /**
     * The unique identification number of the debit memo.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("number")
    public String number;
    public GETDebitMemoType withNumber(String number) {
        this.number = number;
        return this;
    }
    
    /**
     * The ID of the Zuora user who posted the debit memo. 
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("postedById")
    public String postedById;
    public GETDebitMemoType withPostedById(String postedById) {
        this.postedById = postedById;
        return this;
    }
    
    /**
     * The date and time when the debit memo was posted, in `yyyy-mm-dd hh:mm:ss` format.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("postedOn")
    public OffsetDateTime postedOn;
    public GETDebitMemoType withPostedOn(OffsetDateTime postedOn) {
        this.postedOn = postedOn;
        return this;
    }
    
    /**
     * A code identifying the reason for the transaction. The value must be an existing reason code or empty.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("reasonCode")
    public String reasonCode;
    public GETDebitMemoType withReasonCode(String reasonCode) {
        this.reasonCode = reasonCode;
        return this;
    }
    
    /**
     * The ID of a referred invoice.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("referredInvoiceId")
    public String referredInvoiceId;
    public GETDebitMemoType withReferredInvoiceId(String referredInvoiceId) {
        this.referredInvoiceId = referredInvoiceId;
        return this;
    }
    
    /**
     * The status of the debit memo.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("status")
    public GETDebitMemoTypeStatusEnum status;
    public GETDebitMemoType withStatus(GETDebitMemoTypeStatusEnum status) {
        this.status = status;
        return this;
    }
    
    /**
     * Returns `true` if the request was processed successfully.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("success")
    public Boolean success;
    public GETDebitMemoType withSuccess(Boolean success) {
        this.success = success;
        return this;
    }
    
    /**
     * The target date for the debit memo, in `yyyy-mm-dd` format. For example, 2017-07-20.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd")
    @JsonProperty("targetDate")
    public LocalDate targetDate;
    public GETDebitMemoType withTargetDate(LocalDate targetDate) {
        this.targetDate = targetDate;
        return this;
    }
    
    /**
     * The amount of taxation.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("taxAmount")
    public Double taxAmount;
    public GETDebitMemoType withTaxAmount(Double taxAmount) {
        this.taxAmount = taxAmount;
        return this;
    }
    
    /**
     * The message about the status of tax calculation related to the debit memo. If tax calculation fails in one debit memo, this field displays the reason for the failure.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("taxMessage")
    public String taxMessage;
    public GETDebitMemoType withTaxMessage(String taxMessage) {
        this.taxMessage = taxMessage;
        return this;
    }
    
    /**
     * The status of tax calculation related to the debit memo.
     * 
     * **Note**: This field is only applicable to tax calculation by third-party tax engines.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("taxStatus")
    public GETDebitMemoTypeTaxStatusEnum taxStatus;
    public GETDebitMemoType withTaxStatus(GETDebitMemoTypeTaxStatusEnum taxStatus) {
        this.taxStatus = taxStatus;
        return this;
    }
    
    /**
     * The total amount of taxes or VAT for which the customer has an exemption.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("totalTaxExemptAmount")
    public Double totalTaxExemptAmount;
    public GETDebitMemoType withTotalTaxExemptAmount(Double totalTaxExemptAmount) {
        this.totalTaxExemptAmount = totalTaxExemptAmount;
        return this;
    }
    
    /**
     * Whether the debit memo was transferred to an external accounting system. Use this field for integration with accounting systems, such as NetSuite. 
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("transferredToAccounting")
    public GETDebitMemoTypeTransferredToAccountingEnum transferredToAccounting;
    public GETDebitMemoType withTransferredToAccounting(GETDebitMemoTypeTransferredToAccountingEnum transferredToAccounting) {
        this.transferredToAccounting = transferredToAccounting;
        return this;
    }
    
    /**
     * The ID of the Zuora user who last updated the debit memo.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("updatedById")
    public String updatedById;
    public GETDebitMemoType withUpdatedById(String updatedById) {
        this.updatedById = updatedById;
        return this;
    }
    
    /**
     * The date and time when the debit memo was last updated, in `yyyy-mm-dd hh:mm:ss` format. For example, 2017-03-02 15:36:10.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("updatedDate")
    public OffsetDateTime updatedDate;
    public GETDebitMemoType withUpdatedDate(OffsetDateTime updatedDate) {
        this.updatedDate = updatedDate;
        return this;
    }
    
}
