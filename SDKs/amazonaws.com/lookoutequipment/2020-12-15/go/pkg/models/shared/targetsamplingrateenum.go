// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type TargetSamplingRateEnum string

const (
	TargetSamplingRateEnumPt1S  TargetSamplingRateEnum = "PT1S"
	TargetSamplingRateEnumPt5S  TargetSamplingRateEnum = "PT5S"
	TargetSamplingRateEnumPt10S TargetSamplingRateEnum = "PT10S"
	TargetSamplingRateEnumPt15S TargetSamplingRateEnum = "PT15S"
	TargetSamplingRateEnumPt30S TargetSamplingRateEnum = "PT30S"
	TargetSamplingRateEnumPt1M  TargetSamplingRateEnum = "PT1M"
	TargetSamplingRateEnumPt5M  TargetSamplingRateEnum = "PT5M"
	TargetSamplingRateEnumPt10M TargetSamplingRateEnum = "PT10M"
	TargetSamplingRateEnumPt15M TargetSamplingRateEnum = "PT15M"
	TargetSamplingRateEnumPt30M TargetSamplingRateEnum = "PT30M"
	TargetSamplingRateEnumPt1H  TargetSamplingRateEnum = "PT1H"
)

func (e TargetSamplingRateEnum) ToPointer() *TargetSamplingRateEnum {
	return &e
}

func (e *TargetSamplingRateEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "PT1S":
		fallthrough
	case "PT5S":
		fallthrough
	case "PT10S":
		fallthrough
	case "PT15S":
		fallthrough
	case "PT30S":
		fallthrough
	case "PT1M":
		fallthrough
	case "PT5M":
		fallthrough
	case "PT10M":
		fallthrough
	case "PT15M":
		fallthrough
	case "PT30M":
		fallthrough
	case "PT1H":
		*e = TargetSamplingRateEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TargetSamplingRateEnum: %v", v)
	}
}
