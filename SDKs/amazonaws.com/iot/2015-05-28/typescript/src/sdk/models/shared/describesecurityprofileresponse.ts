/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import {
  objectToClass,
  SpeakeasyBase,
  SpeakeasyMetadata,
} from "../../../internal/utils";
import { AlertTarget } from "./alerttarget";
import { Behavior } from "./behavior";
import { MetricToRetain } from "./metrictoretain";
import { Expose, Transform, Type } from "class-transformer";

/**
 * Success
 */
export class DescribeSecurityProfileResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "additionalMetricsToRetain" })
  additionalMetricsToRetain?: string[];

  @SpeakeasyMetadata({ elemType: MetricToRetain })
  @Expose({ name: "additionalMetricsToRetainV2" })
  @Type(() => MetricToRetain)
  additionalMetricsToRetainV2?: MetricToRetain[];

  @SpeakeasyMetadata({ elemType: AlertTarget })
  @Expose({ name: "alertTargets" })
  @Transform(
    ({ value }) => {
      const obj: Record<string, AlertTarget> = {};
      for (const key in value) {
        obj[key] = objectToClass(value[key], AlertTarget);
      }
      return obj;
    },
    { toClassOnly: true }
  )
  alertTargets?: Record<string, AlertTarget>;

  @SpeakeasyMetadata({ elemType: Behavior })
  @Expose({ name: "behaviors" })
  @Type(() => Behavior)
  behaviors?: Behavior[];

  @SpeakeasyMetadata()
  @Expose({ name: "creationDate" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  creationDate?: Date;

  @SpeakeasyMetadata()
  @Expose({ name: "lastModifiedDate" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  lastModifiedDate?: Date;

  @SpeakeasyMetadata()
  @Expose({ name: "securityProfileArn" })
  securityProfileArn?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "securityProfileDescription" })
  securityProfileDescription?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "securityProfileName" })
  securityProfileName?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "version" })
  version?: number;
}
