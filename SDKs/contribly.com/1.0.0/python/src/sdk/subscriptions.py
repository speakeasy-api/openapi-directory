"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Subscriptions:
    r"""Subscribe to be alerted when events occur. For example receive email notification when a contribution is flagged."""
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def delete_subscriptions_id_(self, request: operations.DeleteSubscriptionsIDRequest) -> operations.DeleteSubscriptionsIDResponse:
        r"""Delete a subscription."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteSubscriptionsIDRequest, base_url, '/subscriptions/{id}', request)
        
        
        client = self._client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteSubscriptionsIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def get_subscription_types(self) -> operations.GetSubscriptionTypesResponse:
        r"""Subscription types
        List available subscription types
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/subscription-types'
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetSubscriptionTypesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.SubscriptionType]])
                res.subscription_types = out

        return res

    def get_subscriptions(self, request: shared.SubscriptionSubmission) -> operations.GetSubscriptionsResponse:
        r"""List subscriptions for the authorised user."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/subscriptions'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('GET', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetSubscriptionsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.Subscription]])
                res.subscriptions = out

        return res

    