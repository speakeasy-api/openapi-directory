"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Properties:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def drive_properties_delete(self, request: operations.DrivePropertiesDeleteRequest, security: operations.DrivePropertiesDeleteSecurity) -> operations.DrivePropertiesDeleteResponse:
        r"""Deletes a property."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DrivePropertiesDeleteRequest, base_url, '/files/{fileId}/properties/{propertyKey}', request)
        
        query_params = utils.get_query_params(operations.DrivePropertiesDeleteRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DrivePropertiesDeleteResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def drive_properties_get(self, request: operations.DrivePropertiesGetRequest, security: operations.DrivePropertiesGetSecurity) -> operations.DrivePropertiesGetResponse:
        r"""Gets a property by its key."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DrivePropertiesGetRequest, base_url, '/files/{fileId}/properties/{propertyKey}', request)
        
        query_params = utils.get_query_params(operations.DrivePropertiesGetRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DrivePropertiesGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Property])
                res.property = out

        return res

    def drive_properties_insert(self, request: operations.DrivePropertiesInsertRequest, security: operations.DrivePropertiesInsertSecurity) -> operations.DrivePropertiesInsertResponse:
        r"""Adds a property to a file, or updates it if it already exists."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DrivePropertiesInsertRequest, base_url, '/files/{fileId}/properties', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "property", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.DrivePropertiesInsertRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DrivePropertiesInsertResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Property])
                res.property = out

        return res

    def drive_properties_list(self, request: operations.DrivePropertiesListRequest, security: operations.DrivePropertiesListSecurity) -> operations.DrivePropertiesListResponse:
        r"""Lists a file's properties."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DrivePropertiesListRequest, base_url, '/files/{fileId}/properties', request)
        
        query_params = utils.get_query_params(operations.DrivePropertiesListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DrivePropertiesListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.PropertyList])
                res.property_list = out

        return res

    def drive_properties_patch(self, request: operations.DrivePropertiesPatchRequest, security: operations.DrivePropertiesPatchSecurity) -> operations.DrivePropertiesPatchResponse:
        r"""Updates a property."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DrivePropertiesPatchRequest, base_url, '/files/{fileId}/properties/{propertyKey}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "property", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.DrivePropertiesPatchRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PATCH', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DrivePropertiesPatchResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Property])
                res.property = out

        return res

    def drive_properties_update(self, request: operations.DrivePropertiesUpdateRequest, security: operations.DrivePropertiesUpdateSecurity) -> operations.DrivePropertiesUpdateResponse:
        r"""Updates a property."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DrivePropertiesUpdateRequest, base_url, '/files/{fileId}/properties/{propertyKey}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "property", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.DrivePropertiesUpdateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PUT', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DrivePropertiesUpdateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Property])
                res.property = out

        return res

    