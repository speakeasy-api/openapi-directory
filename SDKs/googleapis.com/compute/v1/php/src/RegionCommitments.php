<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class RegionCommitments 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Retrieves an aggregated list of commitments by region.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeRegionCommitmentsAggregatedListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeRegionCommitmentsAggregatedListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeRegionCommitmentsAggregatedListResponse
     */
	public function computeRegionCommitmentsAggregatedList(
        \OpenAPI\OpenAPI\Models\Operations\ComputeRegionCommitmentsAggregatedListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeRegionCommitmentsAggregatedListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeRegionCommitmentsAggregatedListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/aggregated/commitments', \OpenAPI\OpenAPI\Models\Operations\ComputeRegionCommitmentsAggregatedListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeRegionCommitmentsAggregatedListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeRegionCommitmentsAggregatedListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->commitmentAggregatedList = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CommitmentAggregatedList', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns the specified commitment resource.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeRegionCommitmentsGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeRegionCommitmentsGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeRegionCommitmentsGetResponse
     */
	public function computeRegionCommitmentsGet(
        \OpenAPI\OpenAPI\Models\Operations\ComputeRegionCommitmentsGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeRegionCommitmentsGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeRegionCommitmentsGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/regions/{region}/commitments/{commitment}', \OpenAPI\OpenAPI\Models\Operations\ComputeRegionCommitmentsGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeRegionCommitmentsGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeRegionCommitmentsGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->commitment = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Commitment', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a commitment in the specified project using the data included in the request.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeRegionCommitmentsInsertRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeRegionCommitmentsInsertSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeRegionCommitmentsInsertResponse
     */
	public function computeRegionCommitmentsInsert(
        \OpenAPI\OpenAPI\Models\Operations\ComputeRegionCommitmentsInsertRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeRegionCommitmentsInsertSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeRegionCommitmentsInsertResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/regions/{region}/commitments', \OpenAPI\OpenAPI\Models\Operations\ComputeRegionCommitmentsInsertRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "commitment", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeRegionCommitmentsInsertRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeRegionCommitmentsInsertResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieves a list of commitments contained within the specified region.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeRegionCommitmentsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeRegionCommitmentsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeRegionCommitmentsListResponse
     */
	public function computeRegionCommitmentsList(
        \OpenAPI\OpenAPI\Models\Operations\ComputeRegionCommitmentsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeRegionCommitmentsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeRegionCommitmentsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/regions/{region}/commitments', \OpenAPI\OpenAPI\Models\Operations\ComputeRegionCommitmentsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeRegionCommitmentsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeRegionCommitmentsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->commitmentList = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CommitmentList', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates the specified commitment with the data included in the request. Update is performed only on selected fields included as part of update-mask. Only the following fields can be modified: auto_renew.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeRegionCommitmentsUpdateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeRegionCommitmentsUpdateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeRegionCommitmentsUpdateResponse
     */
	public function computeRegionCommitmentsUpdate(
        \OpenAPI\OpenAPI\Models\Operations\ComputeRegionCommitmentsUpdateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeRegionCommitmentsUpdateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeRegionCommitmentsUpdateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/regions/{region}/commitments/{commitment}', \OpenAPI\OpenAPI\Models\Operations\ComputeRegionCommitmentsUpdateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "commitment1", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeRegionCommitmentsUpdateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeRegionCommitmentsUpdateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
}