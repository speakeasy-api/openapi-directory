/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

/**
 * Structure that contains <code>payloadVersion</code> and <code>targetArn</code>.
 */
export class CreateProvisioningTemplateRequestBodyPreProvisioningHook extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "payloadVersion" })
  payloadVersion?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "targetArn" })
  targetArn?: string;
}

/**
 * The type you define in a provisioning template. You can create a template with only one type. You can't change the template type after its creation. The default value is <code>FLEET_PROVISIONING</code>. For more information about provisioning template, see: <a href="https://docs.aws.amazon.com/iot/latest/developerguide/provision-template.html">Provisioning template</a>.
 */
export enum CreateProvisioningTemplateRequestBodyTypeEnum {
  FleetProvisioning = "FLEET_PROVISIONING",
  Jitp = "JITP",
}

export class CreateProvisioningTemplateRequestBody extends SpeakeasyBase {
  /**
   * The description of the provisioning template.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "description" })
  description?: string;

  /**
   * True to enable the provisioning template, otherwise false.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "enabled" })
  enabled?: boolean;

  /**
   * Structure that contains <code>payloadVersion</code> and <code>targetArn</code>.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "preProvisioningHook" })
  @Type(() => CreateProvisioningTemplateRequestBodyPreProvisioningHook)
  preProvisioningHook?: CreateProvisioningTemplateRequestBodyPreProvisioningHook;

  /**
   * The role ARN for the role associated with the provisioning template. This IoT role grants permission to provision a device.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "provisioningRoleArn" })
  provisioningRoleArn: string;

  /**
   * <p>Metadata which can be used to manage the provisioning template.</p> <note> <p>For URI Request parameters use format: ...key1=value1&amp;key2=value2...</p> <p>For the CLI command-line parameter use format: &amp;&amp;tags "key1=value1&amp;key2=value2..."</p> <p>For the cli-input-json file use format: "tags": "key1=value1&amp;key2=value2..."</p> </note>
   */
  @SpeakeasyMetadata({ elemType: shared.Tag })
  @Expose({ name: "tags" })
  @Type(() => shared.Tag)
  tags?: shared.Tag[];

  /**
   * The JSON formatted contents of the provisioning template.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "templateBody" })
  templateBody: string;

  /**
   * The name of the provisioning template.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "templateName" })
  templateName: string;

  /**
   * The type you define in a provisioning template. You can create a template with only one type. You can't change the template type after its creation. The default value is <code>FLEET_PROVISIONING</code>. For more information about provisioning template, see: <a href="https://docs.aws.amazon.com/iot/latest/developerguide/provision-template.html">Provisioning template</a>.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "type" })
  type?: CreateProvisioningTemplateRequestBodyTypeEnum;
}

export class CreateProvisioningTemplateRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  requestBody: CreateProvisioningTemplateRequestBody;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Algorithm",
  })
  xAmzAlgorithm?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Content-Sha256",
  })
  xAmzContentSha256?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Credential",
  })
  xAmzCredential?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Date",
  })
  xAmzDate?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Security-Token",
  })
  xAmzSecurityToken?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Signature",
  })
  xAmzSignature?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-SignedHeaders",
  })
  xAmzSignedHeaders?: string;
}

export class CreateProvisioningTemplateResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  /**
   * Success
   */
  @SpeakeasyMetadata()
  createProvisioningTemplateResponse?: shared.CreateProvisioningTemplateResponse;

  /**
   * InternalFailureException
   */
  @SpeakeasyMetadata()
  internalFailureException?: any;

  /**
   * InvalidRequestException
   */
  @SpeakeasyMetadata()
  invalidRequestException?: any;

  /**
   * LimitExceededException
   */
  @SpeakeasyMetadata()
  limitExceededException?: any;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * ResourceAlreadyExistsException
   */
  @SpeakeasyMetadata()
  resourceAlreadyExistsException?: any;

  /**
   * ThrottlingException
   */
  @SpeakeasyMetadata()
  throttlingException?: any;

  /**
   * UnauthorizedException
   */
  @SpeakeasyMetadata()
  unauthorizedException?: any;
}
