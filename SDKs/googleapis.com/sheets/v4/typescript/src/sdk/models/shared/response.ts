/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { AddBandingResponse } from "./addbandingresponse";
import { AddChartResponse } from "./addchartresponse";
import { AddDataSourceResponse } from "./adddatasourceresponse";
import { AddDimensionGroupResponse } from "./adddimensiongroupresponse";
import { AddFilterViewResponse } from "./addfilterviewresponse";
import { AddNamedRangeResponse } from "./addnamedrangeresponse";
import { AddProtectedRangeResponse } from "./addprotectedrangeresponse";
import { AddSheetResponse } from "./addsheetresponse";
import { AddSlicerResponse } from "./addslicerresponse";
import { CreateDeveloperMetadataResponse } from "./createdevelopermetadataresponse";
import { DeleteConditionalFormatRuleResponse } from "./deleteconditionalformatruleresponse";
import { DeleteDeveloperMetadataResponse } from "./deletedevelopermetadataresponse";
import { DeleteDimensionGroupResponse } from "./deletedimensiongroupresponse";
import { DeleteDuplicatesResponse } from "./deleteduplicatesresponse";
import { DuplicateFilterViewResponse } from "./duplicatefilterviewresponse";
import { DuplicateSheetResponse } from "./duplicatesheetresponse";
import { FindReplaceResponse } from "./findreplaceresponse";
import { RefreshDataSourceResponse } from "./refreshdatasourceresponse";
import { TrimWhitespaceResponse } from "./trimwhitespaceresponse";
import { UpdateConditionalFormatRuleResponse } from "./updateconditionalformatruleresponse";
import { UpdateDataSourceResponse } from "./updatedatasourceresponse";
import { UpdateDeveloperMetadataResponse } from "./updatedevelopermetadataresponse";
import { UpdateEmbeddedObjectPositionResponse } from "./updateembeddedobjectpositionresponse";
import { Expose, Type } from "class-transformer";

/**
 * A single response from an update.
 */
export class Response extends SpeakeasyBase {
  /**
   * The result of adding a banded range.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "addBanding" })
  @Type(() => AddBandingResponse)
  addBanding?: AddBandingResponse;

  /**
   * The result of adding a chart to a spreadsheet.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "addChart" })
  @Type(() => AddChartResponse)
  addChart?: AddChartResponse;

  /**
   * The result of adding a data source.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "addDataSource" })
  @Type(() => AddDataSourceResponse)
  addDataSource?: AddDataSourceResponse;

  /**
   * The result of adding a group.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "addDimensionGroup" })
  @Type(() => AddDimensionGroupResponse)
  addDimensionGroup?: AddDimensionGroupResponse;

  /**
   * The result of adding a filter view.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "addFilterView" })
  @Type(() => AddFilterViewResponse)
  addFilterView?: AddFilterViewResponse;

  /**
   * The result of adding a named range.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "addNamedRange" })
  @Type(() => AddNamedRangeResponse)
  addNamedRange?: AddNamedRangeResponse;

  /**
   * The result of adding a new protected range.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "addProtectedRange" })
  @Type(() => AddProtectedRangeResponse)
  addProtectedRange?: AddProtectedRangeResponse;

  /**
   * The result of adding a sheet.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "addSheet" })
  @Type(() => AddSheetResponse)
  addSheet?: AddSheetResponse;

  /**
   * The result of adding a slicer to a spreadsheet.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "addSlicer" })
  @Type(() => AddSlicerResponse)
  addSlicer?: AddSlicerResponse;

  /**
   * The response from creating developer metadata.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "createDeveloperMetadata" })
  @Type(() => CreateDeveloperMetadataResponse)
  createDeveloperMetadata?: CreateDeveloperMetadataResponse;

  /**
   * The result of deleting a conditional format rule.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "deleteConditionalFormatRule" })
  @Type(() => DeleteConditionalFormatRuleResponse)
  deleteConditionalFormatRule?: DeleteConditionalFormatRuleResponse;

  /**
   * The response from deleting developer metadata.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "deleteDeveloperMetadata" })
  @Type(() => DeleteDeveloperMetadataResponse)
  deleteDeveloperMetadata?: DeleteDeveloperMetadataResponse;

  /**
   * The result of deleting a group.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "deleteDimensionGroup" })
  @Type(() => DeleteDimensionGroupResponse)
  deleteDimensionGroup?: DeleteDimensionGroupResponse;

  /**
   * The result of removing duplicates in a range.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "deleteDuplicates" })
  @Type(() => DeleteDuplicatesResponse)
  deleteDuplicates?: DeleteDuplicatesResponse;

  /**
   * The result of a filter view being duplicated.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "duplicateFilterView" })
  @Type(() => DuplicateFilterViewResponse)
  duplicateFilterView?: DuplicateFilterViewResponse;

  /**
   * The result of duplicating a sheet.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "duplicateSheet" })
  @Type(() => DuplicateSheetResponse)
  duplicateSheet?: DuplicateSheetResponse;

  /**
   * The result of the find/replace.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "findReplace" })
  @Type(() => FindReplaceResponse)
  findReplace?: FindReplaceResponse;

  /**
   * The response from refreshing one or multiple data source objects.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "refreshDataSource" })
  @Type(() => RefreshDataSourceResponse)
  refreshDataSource?: RefreshDataSourceResponse;

  /**
   * The result of trimming whitespace in cells.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "trimWhitespace" })
  @Type(() => TrimWhitespaceResponse)
  trimWhitespace?: TrimWhitespaceResponse;

  /**
   * The result of updating a conditional format rule.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "updateConditionalFormatRule" })
  @Type(() => UpdateConditionalFormatRuleResponse)
  updateConditionalFormatRule?: UpdateConditionalFormatRuleResponse;

  /**
   * The response from updating data source.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "updateDataSource" })
  @Type(() => UpdateDataSourceResponse)
  updateDataSource?: UpdateDataSourceResponse;

  /**
   * The response from updating developer metadata.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "updateDeveloperMetadata" })
  @Type(() => UpdateDeveloperMetadataResponse)
  updateDeveloperMetadata?: UpdateDeveloperMetadataResponse;

  /**
   * The result of updating an embedded object's position.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "updateEmbeddedObjectPosition" })
  @Type(() => UpdateEmbeddedObjectPositionResponse)
  updateEmbeddedObjectPosition?: UpdateEmbeddedObjectPositionResponse;
}
