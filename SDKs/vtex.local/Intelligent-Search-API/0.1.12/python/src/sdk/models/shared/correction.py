"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CorrectionCorrection:
    r"""Object that indicates if the term was misspelled and suggests a possible correction."""
    
    correction: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('correction'), 'exclude': lambda f: f is None }})
    r"""Whether the API was able to suggest a correction (`true`) or not (`false`)."""  
    highlighted: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('highlighted'), 'exclude': lambda f: f is None }})
    r"""The same as `text`, but it highlights the corrected word. Useful when there is more than one word."""  
    misspelled: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('misspelled'), 'exclude': lambda f: f is None }})
    r"""Whether the term was misspelled (`true`) or not (`false`)."""  
    text: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('text'), 'exclude': lambda f: f is None }})
    r"""The corrected term. If the API was not able to correct the term, it will show the original search term."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Correction:
    r"""OK"""
    
    correction: Optional[CorrectionCorrection] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('correction'), 'exclude': lambda f: f is None }})
    r"""Object that indicates if the term was misspelled and suggests a possible correction."""  
    