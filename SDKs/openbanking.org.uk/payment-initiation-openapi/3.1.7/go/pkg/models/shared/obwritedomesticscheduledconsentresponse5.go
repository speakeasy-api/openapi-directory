// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"time"
)

// OBWriteDomesticScheduledConsentResponse5DataAuthorisationAuthorisationTypeEnum - Type of authorisation flow requested.
type OBWriteDomesticScheduledConsentResponse5DataAuthorisationAuthorisationTypeEnum string

const (
	OBWriteDomesticScheduledConsentResponse5DataAuthorisationAuthorisationTypeEnumAny    OBWriteDomesticScheduledConsentResponse5DataAuthorisationAuthorisationTypeEnum = "Any"
	OBWriteDomesticScheduledConsentResponse5DataAuthorisationAuthorisationTypeEnumSingle OBWriteDomesticScheduledConsentResponse5DataAuthorisationAuthorisationTypeEnum = "Single"
)

func (e OBWriteDomesticScheduledConsentResponse5DataAuthorisationAuthorisationTypeEnum) ToPointer() *OBWriteDomesticScheduledConsentResponse5DataAuthorisationAuthorisationTypeEnum {
	return &e
}

func (e *OBWriteDomesticScheduledConsentResponse5DataAuthorisationAuthorisationTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Any":
		fallthrough
	case "Single":
		*e = OBWriteDomesticScheduledConsentResponse5DataAuthorisationAuthorisationTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for OBWriteDomesticScheduledConsentResponse5DataAuthorisationAuthorisationTypeEnum: %v", v)
	}
}

// OBWriteDomesticScheduledConsentResponse5DataAuthorisation - The authorisation type request from the TPP.
type OBWriteDomesticScheduledConsentResponse5DataAuthorisation struct {
	// Type of authorisation flow requested.
	AuthorisationType OBWriteDomesticScheduledConsentResponse5DataAuthorisationAuthorisationTypeEnum `json:"AuthorisationType"`
	// Date and time at which the requested authorisation flow must be completed.All dates in the JSON payloads are represented in ISO 8601 date-time format.
	// All date-time fields in responses must include the timezone. An example is below:
	// 2017-04-05T10:43:07+00:00
	CompletionDateTime *time.Time `json:"CompletionDateTime,omitempty"`
}

// OBWriteDomesticScheduledConsentResponse5DataCharges - Set of elements used to provide details of a charge for the payment initiation.
type OBWriteDomesticScheduledConsentResponse5DataCharges struct {
	// Amount of money associated with the charge type.
	Amount OBActiveOrHistoricCurrencyAndAmount `json:"Amount"`
	// Specifies which party/parties will bear the charges associated with the processing of the payment transaction.
	ChargeBearer OBChargeBearerType1CodeEnum `json:"ChargeBearer"`
	// Charge type, in a coded form.
	Type string `json:"Type"`
}

// OBWriteDomesticScheduledConsentResponse5DataInitiationCreditorAccount - Unambiguous identification of the account of the creditor to which a credit entry will be posted as a result of the payment transaction.
type OBWriteDomesticScheduledConsentResponse5DataInitiationCreditorAccount struct {
	// Identification assigned by an institution to identify an account. This identification is known by the account owner.
	Identification string `json:"Identification"`
	// The account name is the name or names of the account owner(s) represented at an account level.
	// Note, the account name is not the product name or the nickname of the account.
	// OB: ASPSPs may carry out name validation for Confirmation of Payee, but it is not mandatory.
	Name string `json:"Name"`
	// Name of the identification scheme, in a coded form as published in an external list.
	SchemeName string `json:"SchemeName"`
	// This is secondary identification of the account, as assigned by the account servicing institution.
	// This can be used by building societies to additionally identify accounts with a roll number (in addition to a sort code and account number combination).
	SecondaryIdentification *string `json:"SecondaryIdentification,omitempty"`
}

// OBWriteDomesticScheduledConsentResponse5DataInitiationDebtorAccount - Unambiguous identification of the account of the debtor to which a debit entry will be made as a result of the transaction.
type OBWriteDomesticScheduledConsentResponse5DataInitiationDebtorAccount struct {
	// Identification assigned by an institution to identify an account. This identification is known by the account owner.
	Identification string `json:"Identification"`
	// The account name is the name or names of the account owner(s) represented at an account level, as displayed by the ASPSP's online channels.
	// Note, the account name is not the product name or the nickname of the account.
	Name *string `json:"Name,omitempty"`
	// Name of the identification scheme, in a coded form as published in an external list.
	SchemeName string `json:"SchemeName"`
	// This is secondary identification of the account, as assigned by the account servicing institution.
	// This can be used by building societies to additionally identify accounts with a roll number (in addition to a sort code and account number combination).
	SecondaryIdentification *string `json:"SecondaryIdentification,omitempty"`
}

// OBWriteDomesticScheduledConsentResponse5DataInitiationInstructedAmount - Amount of money to be moved between the debtor and creditor, before deduction of charges, expressed in the currency as ordered by the initiating party.
// Usage: This amount has to be transported unchanged through the transaction chain.
type OBWriteDomesticScheduledConsentResponse5DataInitiationInstructedAmount struct {
	// A number of monetary units specified in an active currency where the unit of currency is explicit and compliant with ISO 4217.
	Amount string `json:"Amount"`
	// A code allocated to a currency by a Maintenance Agency under an international identification scheme, as described in the latest edition of the international standard ISO 4217 "Codes for the representation of currencies and funds".
	Currency string `json:"Currency"`
}

// OBWriteDomesticScheduledConsentResponse5DataInitiationRemittanceInformation - Information supplied to enable the matching of an entry with the items that the transfer is intended to settle, such as commercial invoices in an accounts' receivable system.
type OBWriteDomesticScheduledConsentResponse5DataInitiationRemittanceInformation struct {
	// Unique reference, as assigned by the creditor, to unambiguously refer to the payment transaction.
	// Usage: If available, the initiating party should provide this reference in the structured remittance information, to enable reconciliation by the creditor upon receipt of the amount of money.
	// If the business context requires the use of a creditor reference or a payment remit identification, and only one identifier can be passed through the end-to-end chain, the creditor's reference or payment remittance identification should be quoted in the end-to-end transaction identification.
	// OB: The Faster Payments Scheme can only accept 18 characters for the ReferenceInformation field - which is where this ISO field will be mapped.
	Reference *string `json:"Reference,omitempty"`
	// Information supplied to enable the matching/reconciliation of an entry with the items that the payment is intended to settle, such as commercial invoices in an accounts' receivable system, in an unstructured form.
	Unstructured *string `json:"Unstructured,omitempty"`
}

// OBWriteDomesticScheduledConsentResponse5DataInitiation - The Initiation payload is sent by the initiating party to the ASPSP. It is used to request movement of funds from the debtor account to a creditor for a single scheduled domestic payment.
type OBWriteDomesticScheduledConsentResponse5DataInitiation struct {
	// Unambiguous identification of the account of the creditor to which a credit entry will be posted as a result of the payment transaction.
	CreditorAccount OBWriteDomesticScheduledConsentResponse5DataInitiationCreditorAccount `json:"CreditorAccount"`
	// Information that locates and identifies a specific address, as defined by postal services.
	CreditorPostalAddress *OBPostalAddress6 `json:"CreditorPostalAddress,omitempty"`
	// Unambiguous identification of the account of the debtor to which a debit entry will be made as a result of the transaction.
	DebtorAccount *OBWriteDomesticScheduledConsentResponse5DataInitiationDebtorAccount `json:"DebtorAccount,omitempty"`
	// Unique identification assigned by the initiating party to unambiguously identify the transaction. This identification is passed on, unchanged, throughout the entire end-to-end chain.
	// Usage: The end-to-end identification can be used for reconciliation or to link tasks relating to the transaction. It can be included in several messages related to the transaction.
	// OB: The Faster Payments Scheme can only access 31 characters for the EndToEndIdentification field.
	EndToEndIdentification *string `json:"EndToEndIdentification,omitempty"`
	// Amount of money to be moved between the debtor and creditor, before deduction of charges, expressed in the currency as ordered by the initiating party.
	// Usage: This amount has to be transported unchanged through the transaction chain.
	InstructedAmount OBWriteDomesticScheduledConsentResponse5DataInitiationInstructedAmount `json:"InstructedAmount"`
	// Unique identification as assigned by an instructing party for an instructed party to unambiguously identify the instruction.
	// Usage: the  instruction identification is a point to point reference that can be used between the instructing party and the instructed party to refer to the individual instruction. It can be included in several messages related to the instruction.
	InstructionIdentification string `json:"InstructionIdentification"`
	// User community specific instrument.
	// Usage: This element is used to specify a local instrument, local clearing option and/or further qualify the service or service level.
	LocalInstrument *string `json:"LocalInstrument,omitempty"`
	// Information supplied to enable the matching of an entry with the items that the transfer is intended to settle, such as commercial invoices in an accounts' receivable system.
	RemittanceInformation *OBWriteDomesticScheduledConsentResponse5DataInitiationRemittanceInformation `json:"RemittanceInformation,omitempty"`
	// Date at which the initiating party requests the clearing agent to process the payment.
	// Usage: This is the date on which the debtor's account is to be debited.All dates in the JSON payloads are represented in ISO 8601 date-time format.
	// All date-time fields in responses must include the timezone. An example is below:
	// 2017-04-05T10:43:07+00:00
	RequestedExecutionDateTime time.Time `json:"RequestedExecutionDateTime"`
	// Additional information that can not be captured in the structured fields and/or any other specific block.
	SupplementaryData map[string]interface{} `json:"SupplementaryData,omitempty"`
}

// OBWriteDomesticScheduledConsentResponse5DataPermissionEnum - Specifies the Open Banking service request types.
type OBWriteDomesticScheduledConsentResponse5DataPermissionEnum string

const (
	OBWriteDomesticScheduledConsentResponse5DataPermissionEnumCreate OBWriteDomesticScheduledConsentResponse5DataPermissionEnum = "Create"
)

func (e OBWriteDomesticScheduledConsentResponse5DataPermissionEnum) ToPointer() *OBWriteDomesticScheduledConsentResponse5DataPermissionEnum {
	return &e
}

func (e *OBWriteDomesticScheduledConsentResponse5DataPermissionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Create":
		*e = OBWriteDomesticScheduledConsentResponse5DataPermissionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for OBWriteDomesticScheduledConsentResponse5DataPermissionEnum: %v", v)
	}
}

// OBWriteDomesticScheduledConsentResponse5DataReadRefundAccountEnum - Specifies to share the refund account details with PISP
type OBWriteDomesticScheduledConsentResponse5DataReadRefundAccountEnum string

const (
	OBWriteDomesticScheduledConsentResponse5DataReadRefundAccountEnumNo  OBWriteDomesticScheduledConsentResponse5DataReadRefundAccountEnum = "No"
	OBWriteDomesticScheduledConsentResponse5DataReadRefundAccountEnumYes OBWriteDomesticScheduledConsentResponse5DataReadRefundAccountEnum = "Yes"
)

func (e OBWriteDomesticScheduledConsentResponse5DataReadRefundAccountEnum) ToPointer() *OBWriteDomesticScheduledConsentResponse5DataReadRefundAccountEnum {
	return &e
}

func (e *OBWriteDomesticScheduledConsentResponse5DataReadRefundAccountEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "No":
		fallthrough
	case "Yes":
		*e = OBWriteDomesticScheduledConsentResponse5DataReadRefundAccountEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for OBWriteDomesticScheduledConsentResponse5DataReadRefundAccountEnum: %v", v)
	}
}

// OBWriteDomesticScheduledConsentResponse5DataStatusEnum - Specifies the status of consent resource in code form.
type OBWriteDomesticScheduledConsentResponse5DataStatusEnum string

const (
	OBWriteDomesticScheduledConsentResponse5DataStatusEnumAuthorised            OBWriteDomesticScheduledConsentResponse5DataStatusEnum = "Authorised"
	OBWriteDomesticScheduledConsentResponse5DataStatusEnumAwaitingAuthorisation OBWriteDomesticScheduledConsentResponse5DataStatusEnum = "AwaitingAuthorisation"
	OBWriteDomesticScheduledConsentResponse5DataStatusEnumConsumed              OBWriteDomesticScheduledConsentResponse5DataStatusEnum = "Consumed"
	OBWriteDomesticScheduledConsentResponse5DataStatusEnumRejected              OBWriteDomesticScheduledConsentResponse5DataStatusEnum = "Rejected"
)

func (e OBWriteDomesticScheduledConsentResponse5DataStatusEnum) ToPointer() *OBWriteDomesticScheduledConsentResponse5DataStatusEnum {
	return &e
}

func (e *OBWriteDomesticScheduledConsentResponse5DataStatusEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Authorised":
		fallthrough
	case "AwaitingAuthorisation":
		fallthrough
	case "Consumed":
		fallthrough
	case "Rejected":
		*e = OBWriteDomesticScheduledConsentResponse5DataStatusEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for OBWriteDomesticScheduledConsentResponse5DataStatusEnum: %v", v)
	}
}

type OBWriteDomesticScheduledConsentResponse5Data struct {
	// The authorisation type request from the TPP.
	Authorisation *OBWriteDomesticScheduledConsentResponse5DataAuthorisation `json:"Authorisation,omitempty"`
	Charges       []OBWriteDomesticScheduledConsentResponse5DataCharges      `json:"Charges,omitempty"`
	// OB: Unique identification as assigned by the ASPSP to uniquely identify the consent resource.
	ConsentID string `json:"ConsentId"`
	// Date and time at which the resource was created.All dates in the JSON payloads are represented in ISO 8601 date-time format.
	// All date-time fields in responses must include the timezone. An example is below:
	// 2017-04-05T10:43:07+00:00
	CreationDateTime time.Time `json:"CreationDateTime"`
	// Specified cut-off date and time for the payment consent.All dates in the JSON payloads are represented in ISO 8601 date-time format.
	// All date-time fields in responses must include the timezone. An example is below:
	// 2017-04-05T10:43:07+00:00
	CutOffDateTime *time.Time `json:"CutOffDateTime,omitempty"`
	// ^ Only incuded in the response if `Data. ReadRefundAccount` is set to `Yes` in the consent.
	Debtor *OBCashAccountDebtor4 `json:"Debtor,omitempty"`
	// Expected execution date and time for the payment resource.All dates in the JSON payloads are represented in ISO 8601 date-time format.
	// All date-time fields in responses must include the timezone. An example is below:
	// 2017-04-05T10:43:07+00:00
	ExpectedExecutionDateTime *time.Time `json:"ExpectedExecutionDateTime,omitempty"`
	// Expected settlement date and time for the payment resource.All dates in the JSON payloads are represented in ISO 8601 date-time format.
	// All date-time fields in responses must include the timezone. An example is below:
	// 2017-04-05T10:43:07+00:00
	ExpectedSettlementDateTime *time.Time `json:"ExpectedSettlementDateTime,omitempty"`
	// The Initiation payload is sent by the initiating party to the ASPSP. It is used to request movement of funds from the debtor account to a creditor for a single scheduled domestic payment.
	Initiation OBWriteDomesticScheduledConsentResponse5DataInitiation `json:"Initiation"`
	// Specifies the Open Banking service request types.
	Permission OBWriteDomesticScheduledConsentResponse5DataPermissionEnum `json:"Permission"`
	// Specifies to share the refund account details with PISP
	ReadRefundAccount *OBWriteDomesticScheduledConsentResponse5DataReadRefundAccountEnum `json:"ReadRefundAccount,omitempty"`
	// Supporting Data provided by TPP, when requesting SCA Exemption.
	SCASupportData *OBSCASupportData1 `json:"SCASupportData,omitempty"`
	// Specifies the status of consent resource in code form.
	Status OBWriteDomesticScheduledConsentResponse5DataStatusEnum `json:"Status"`
	// Date and time at which the consent resource status was updated.All dates in the JSON payloads are represented in ISO 8601 date-time format.
	// All date-time fields in responses must include the timezone. An example is below:
	// 2017-04-05T10:43:07+00:00
	StatusUpdateDateTime time.Time `json:"StatusUpdateDateTime"`
}

// OBWriteDomesticScheduledConsentResponse5 - Domestic Scheduled Payment Consents Created
type OBWriteDomesticScheduledConsentResponse5 struct {
	Data OBWriteDomesticScheduledConsentResponse5Data `json:"Data"`
	// Links relevant to the payload
	Links *Links `json:"Links,omitempty"`
	// Meta Data relevant to the payload
	Meta *Meta `json:"Meta,omitempty"`
	// The Risk section is sent by the initiating party to the ASPSP. It is used to specify additional details for risk scoring for Payments.
	Risk OBRisk1 `json:"Risk"`
}
