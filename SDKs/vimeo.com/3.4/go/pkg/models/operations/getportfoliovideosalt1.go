// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type GetPortfolioVideosAlt1PathParams struct {
	// The ID of the portfolio.
	PortfolioID float64 `pathParam:"style=simple,explode=false,name=portfolio_id"`
}

// GetPortfolioVideosAlt1FilterEnum - The attribute by which to filter the results.
type GetPortfolioVideosAlt1FilterEnum string

const (
	GetPortfolioVideosAlt1FilterEnumEmbeddable GetPortfolioVideosAlt1FilterEnum = "embeddable"
)

func (e *GetPortfolioVideosAlt1FilterEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "embeddable":
		*e = GetPortfolioVideosAlt1FilterEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetPortfolioVideosAlt1FilterEnum: %s", s)
	}
}

// GetPortfolioVideosAlt1SortEnum - The way to sort the results.
//
// Option descriptions:
//   - `default` - This will sort to the default sort set on the portfolio.
type GetPortfolioVideosAlt1SortEnum string

const (
	GetPortfolioVideosAlt1SortEnumAlphabetical GetPortfolioVideosAlt1SortEnum = "alphabetical"
	GetPortfolioVideosAlt1SortEnumComments     GetPortfolioVideosAlt1SortEnum = "comments"
	GetPortfolioVideosAlt1SortEnumDate         GetPortfolioVideosAlt1SortEnum = "date"
	GetPortfolioVideosAlt1SortEnumDefault      GetPortfolioVideosAlt1SortEnum = "default"
	GetPortfolioVideosAlt1SortEnumLikes        GetPortfolioVideosAlt1SortEnum = "likes"
	GetPortfolioVideosAlt1SortEnumManual       GetPortfolioVideosAlt1SortEnum = "manual"
	GetPortfolioVideosAlt1SortEnumPlays        GetPortfolioVideosAlt1SortEnum = "plays"
)

func (e *GetPortfolioVideosAlt1SortEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "alphabetical":
		fallthrough
	case "comments":
		fallthrough
	case "date":
		fallthrough
	case "default":
		fallthrough
	case "likes":
		fallthrough
	case "manual":
		fallthrough
	case "plays":
		*e = GetPortfolioVideosAlt1SortEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetPortfolioVideosAlt1SortEnum: %s", s)
	}
}

type GetPortfolioVideosAlt1QueryParams struct {
	// The page that contains the video URI.
	ContainingURI *string `queryParam:"style=form,explode=true,name=containing_uri"`
	// The attribute by which to filter the results.
	Filter *GetPortfolioVideosAlt1FilterEnum `queryParam:"style=form,explode=true,name=filter"`
	// Whether to filter the results by embeddable videos (`true`) or non-embeddable videos (`false`). Required only if **filter** is `embeddable`.
	FilterEmbeddable *bool `queryParam:"style=form,explode=true,name=filter_embeddable"`
	// The page number of the results to show.
	Page *float64 `queryParam:"style=form,explode=true,name=page"`
	// The number of items to show on each page of results, up to a maximum of 100.
	PerPage *float64 `queryParam:"style=form,explode=true,name=per_page"`
	// The way to sort the results.
	//
	// Option descriptions:
	//  * `default` - This will sort to the default sort set on the portfolio.
	//
	Sort *GetPortfolioVideosAlt1SortEnum `queryParam:"style=form,explode=true,name=sort"`
}

type GetPortfolioVideosAlt1Request struct {
	PathParams  GetPortfolioVideosAlt1PathParams
	QueryParams GetPortfolioVideosAlt1QueryParams
}

type GetPortfolioVideosAlt1Response struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// The videos were returned.
	Videos []shared.Video
}
