"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import source as shared_source
from ..shared import sourcecrowdingconfig as shared_sourcecrowdingconfig
from ..shared import sourcescoringconfig as shared_sourcescoringconfig
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SourceConfig:
    r"""Configurations for a source while processing a Search or Suggest request."""
    
    crowding_config: Optional[shared_sourcecrowdingconfig.SourceCrowdingConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('crowdingConfig'), 'exclude': lambda f: f is None }})
    r"""Set search results crowding limits. Crowding is a situation in which multiple results from the same source or host \\"crowd out\\" other results, diminishing the quality of search for users. To foster better search quality and source diversity in search results, you can set a condition to reduce repetitive results by source."""  
    scoring_config: Optional[shared_sourcescoringconfig.SourceScoringConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('scoringConfig'), 'exclude': lambda f: f is None }})
    r"""Set the scoring configuration. This allows modifying the ranking of results for a source."""  
    source: Optional[shared_source.Source] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('source'), 'exclude': lambda f: f is None }})
    r"""Defines sources for the suggest/search APIs."""  
    