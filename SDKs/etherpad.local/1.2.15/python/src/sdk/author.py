"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations
from typing import Optional

class Author:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def create_author_if_not_exists_for_using_get(self, request: operations.CreateAuthorIfNotExistsForUsingGETRequest) -> operations.CreateAuthorIfNotExistsForUsingGETResponse:
        r"""this functions helps you to map your application author ids to Etherpad author ids"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/createAuthorIfNotExistsFor'
        
        query_params = utils.get_query_params(operations.CreateAuthorIfNotExistsForUsingGETRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateAuthorIfNotExistsForUsingGETResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.CreateAuthorIfNotExistsForUsingGET200ApplicationJSON])
                res.create_author_if_not_exists_for_using_get_200_application_json_object = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.CreateAuthorIfNotExistsForUsingGET400ApplicationJSON])
                res.create_author_if_not_exists_for_using_get_400_application_json_object = out
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.CreateAuthorIfNotExistsForUsingGET401ApplicationJSON])
                res.create_author_if_not_exists_for_using_get_401_application_json_object = out
        elif http_res.status_code == 500:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.CreateAuthorIfNotExistsForUsingGET500ApplicationJSON])
                res.create_author_if_not_exists_for_using_get_500_application_json_object = out

        return res

    def create_author_if_not_exists_for_using_post(self, request: operations.CreateAuthorIfNotExistsForUsingPOSTRequest) -> operations.CreateAuthorIfNotExistsForUsingPOSTResponse:
        r"""this functions helps you to map your application author ids to Etherpad author ids"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/createAuthorIfNotExistsFor'
        
        query_params = utils.get_query_params(operations.CreateAuthorIfNotExistsForUsingPOSTRequest, request)
        
        client = self._security_client
        
        http_res = client.request('POST', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateAuthorIfNotExistsForUsingPOSTResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.CreateAuthorIfNotExistsForUsingPOST200ApplicationJSON])
                res.create_author_if_not_exists_for_using_post_200_application_json_object = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.CreateAuthorIfNotExistsForUsingPOST400ApplicationJSON])
                res.create_author_if_not_exists_for_using_post_400_application_json_object = out
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.CreateAuthorIfNotExistsForUsingPOST401ApplicationJSON])
                res.create_author_if_not_exists_for_using_post_401_application_json_object = out
        elif http_res.status_code == 500:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.CreateAuthorIfNotExistsForUsingPOST500ApplicationJSON])
                res.create_author_if_not_exists_for_using_post_500_application_json_object = out

        return res

    def create_author_using_get(self, request: operations.CreateAuthorUsingGETRequest) -> operations.CreateAuthorUsingGETResponse:
        r"""creates a new author"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/createAuthor'
        
        query_params = utils.get_query_params(operations.CreateAuthorUsingGETRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateAuthorUsingGETResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.CreateAuthorUsingGET200ApplicationJSON])
                res.create_author_using_get_200_application_json_object = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.CreateAuthorUsingGET400ApplicationJSON])
                res.create_author_using_get_400_application_json_object = out
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.CreateAuthorUsingGET401ApplicationJSON])
                res.create_author_using_get_401_application_json_object = out
        elif http_res.status_code == 500:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.CreateAuthorUsingGET500ApplicationJSON])
                res.create_author_using_get_500_application_json_object = out

        return res

    def create_author_using_post(self, request: operations.CreateAuthorUsingPOSTRequest) -> operations.CreateAuthorUsingPOSTResponse:
        r"""creates a new author"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/createAuthor'
        
        query_params = utils.get_query_params(operations.CreateAuthorUsingPOSTRequest, request)
        
        client = self._security_client
        
        http_res = client.request('POST', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateAuthorUsingPOSTResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.CreateAuthorUsingPOST200ApplicationJSON])
                res.create_author_using_post_200_application_json_object = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.CreateAuthorUsingPOST400ApplicationJSON])
                res.create_author_using_post_400_application_json_object = out
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.CreateAuthorUsingPOST401ApplicationJSON])
                res.create_author_using_post_401_application_json_object = out
        elif http_res.status_code == 500:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.CreateAuthorUsingPOST500ApplicationJSON])
                res.create_author_using_post_500_application_json_object = out

        return res

    def get_author_name_using_get(self, request: operations.GETAuthorNameUsingGETRequest) -> operations.GETAuthorNameUsingGETResponse:
        r"""Returns the Author Name of the author"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/getAuthorName'
        
        query_params = utils.get_query_params(operations.GETAuthorNameUsingGETRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GETAuthorNameUsingGETResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GETAuthorNameUsingGET200ApplicationJSON])
                res.get_author_name_using_get_200_application_json_object = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GETAuthorNameUsingGET400ApplicationJSON])
                res.get_author_name_using_get_400_application_json_object = out
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GETAuthorNameUsingGET401ApplicationJSON])
                res.get_author_name_using_get_401_application_json_object = out
        elif http_res.status_code == 500:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GETAuthorNameUsingGET500ApplicationJSON])
                res.get_author_name_using_get_500_application_json_object = out

        return res

    def get_author_name_using_post(self, request: operations.GetAuthorNameUsingPOSTRequest) -> operations.GetAuthorNameUsingPOSTResponse:
        r"""Returns the Author Name of the author"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/getAuthorName'
        
        query_params = utils.get_query_params(operations.GetAuthorNameUsingPOSTRequest, request)
        
        client = self._security_client
        
        http_res = client.request('POST', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetAuthorNameUsingPOSTResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetAuthorNameUsingPOST200ApplicationJSON])
                res.get_author_name_using_post_200_application_json_object = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetAuthorNameUsingPOST400ApplicationJSON])
                res.get_author_name_using_post_400_application_json_object = out
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetAuthorNameUsingPOST401ApplicationJSON])
                res.get_author_name_using_post_401_application_json_object = out
        elif http_res.status_code == 500:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetAuthorNameUsingPOST500ApplicationJSON])
                res.get_author_name_using_post_500_application_json_object = out

        return res

    def list_pads_of_author_using_get(self, request: operations.ListPadsOfAuthorUsingGETRequest) -> operations.ListPadsOfAuthorUsingGETResponse:
        r"""returns an array of all pads this author contributed to"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/listPadsOfAuthor'
        
        query_params = utils.get_query_params(operations.ListPadsOfAuthorUsingGETRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ListPadsOfAuthorUsingGETResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.ListPadsOfAuthorUsingGET200ApplicationJSON])
                res.list_pads_of_author_using_get_200_application_json_object = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.ListPadsOfAuthorUsingGET400ApplicationJSON])
                res.list_pads_of_author_using_get_400_application_json_object = out
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.ListPadsOfAuthorUsingGET401ApplicationJSON])
                res.list_pads_of_author_using_get_401_application_json_object = out
        elif http_res.status_code == 500:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.ListPadsOfAuthorUsingGET500ApplicationJSON])
                res.list_pads_of_author_using_get_500_application_json_object = out

        return res

    def list_pads_of_author_using_post(self, request: operations.ListPadsOfAuthorUsingPOSTRequest) -> operations.ListPadsOfAuthorUsingPOSTResponse:
        r"""returns an array of all pads this author contributed to"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/listPadsOfAuthor'
        
        query_params = utils.get_query_params(operations.ListPadsOfAuthorUsingPOSTRequest, request)
        
        client = self._security_client
        
        http_res = client.request('POST', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ListPadsOfAuthorUsingPOSTResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.ListPadsOfAuthorUsingPOST200ApplicationJSON])
                res.list_pads_of_author_using_post_200_application_json_object = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.ListPadsOfAuthorUsingPOST400ApplicationJSON])
                res.list_pads_of_author_using_post_400_application_json_object = out
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.ListPadsOfAuthorUsingPOST401ApplicationJSON])
                res.list_pads_of_author_using_post_401_application_json_object = out
        elif http_res.status_code == 500:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.ListPadsOfAuthorUsingPOST500ApplicationJSON])
                res.list_pads_of_author_using_post_500_application_json_object = out

        return res

    def list_sessions_of_author_using_get(self, request: operations.ListSessionsOfAuthorUsingGETRequest) -> operations.ListSessionsOfAuthorUsingGETResponse:
        r"""returns all sessions of an author"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/listSessionsOfAuthor'
        
        query_params = utils.get_query_params(operations.ListSessionsOfAuthorUsingGETRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ListSessionsOfAuthorUsingGETResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.ListSessionsOfAuthorUsingGET200ApplicationJSON])
                res.list_sessions_of_author_using_get_200_application_json_object = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.ListSessionsOfAuthorUsingGET400ApplicationJSON])
                res.list_sessions_of_author_using_get_400_application_json_object = out
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.ListSessionsOfAuthorUsingGET401ApplicationJSON])
                res.list_sessions_of_author_using_get_401_application_json_object = out
        elif http_res.status_code == 500:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.ListSessionsOfAuthorUsingGET500ApplicationJSON])
                res.list_sessions_of_author_using_get_500_application_json_object = out

        return res

    def list_sessions_of_author_using_post(self, request: operations.ListSessionsOfAuthorUsingPOSTRequest) -> operations.ListSessionsOfAuthorUsingPOSTResponse:
        r"""returns all sessions of an author"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/listSessionsOfAuthor'
        
        query_params = utils.get_query_params(operations.ListSessionsOfAuthorUsingPOSTRequest, request)
        
        client = self._security_client
        
        http_res = client.request('POST', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ListSessionsOfAuthorUsingPOSTResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.ListSessionsOfAuthorUsingPOST200ApplicationJSON])
                res.list_sessions_of_author_using_post_200_application_json_object = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.ListSessionsOfAuthorUsingPOST400ApplicationJSON])
                res.list_sessions_of_author_using_post_400_application_json_object = out
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.ListSessionsOfAuthorUsingPOST401ApplicationJSON])
                res.list_sessions_of_author_using_post_401_application_json_object = out
        elif http_res.status_code == 500:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.ListSessionsOfAuthorUsingPOST500ApplicationJSON])
                res.list_sessions_of_author_using_post_500_application_json_object = out

        return res

    