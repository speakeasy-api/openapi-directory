/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { Expose, Transform } from "class-transformer";

/**
 * Type of action
 */
export enum ActionEntityActionEnum {
  Create = "create",
  Read = "read",
  Update = "update",
  Destroy = "destroy",
  Move = "move",
  Login = "login",
  Failedlogin = "failedlogin",
  Copy = "copy",
  UserCreate = "user_create",
  UserUpdate = "user_update",
  UserDestroy = "user_destroy",
  GroupCreate = "group_create",
  GroupUpdate = "group_update",
  GroupDestroy = "group_destroy",
  PermissionCreate = "permission_create",
  PermissionDestroy = "permission_destroy",
  ApiKeyCreate = "api_key_create",
  ApiKeyUpdate = "api_key_update",
  ApiKeyDestroy = "api_key_destroy",
}

/**
 * Failure type.  If action was a user login or session failure, why did it fail?
 */
export enum ActionEntityFailureTypeEnum {
  ExpiredTrial = "expired_trial",
  AccountOverdue = "account_overdue",
  LockedOut = "locked_out",
  IpMismatch = "ip_mismatch",
  PasswordMismatch = "password_mismatch",
  SiteMismatch = "site_mismatch",
  UsernameNotFound = "username_not_found",
  None = "none",
  NoFtpPermission = "no_ftp_permission",
  NoWebPermission = "no_web_permission",
  NoDirectory = "no_directory",
  ErrnoEnoent = "errno_enoent",
  NoSftpPermission = "no_sftp_permission",
  NoDavPermission = "no_dav_permission",
  NoRestapiPermission = "no_restapi_permission",
  KeyMismatch = "key_mismatch",
  RegionMismatch = "region_mismatch",
  ExpiredAccess = "expired_access",
  DesktopIpMismatch = "desktop_ip_mismatch",
  DesktopApiKeyNotUsedQuicklyEnough = "desktop_api_key_not_used_quickly_enough",
  Disabled = "disabled",
  CountryMismatch = "country_mismatch",
}

/**
 * Interface on which this action occurred.
 */
export enum ActionEntityInterfaceEnum {
  Web = "web",
  Ftp = "ftp",
  Robot = "robot",
  Jsapi = "jsapi",
  Webdesktopapi = "webdesktopapi",
  Sftp = "sftp",
  Dav = "dav",
  Desktop = "desktop",
  Restapi = "restapi",
  Scim = "scim",
  Office = "office",
  Mobile = "mobile",
  As2 = "as2",
  InboundEmail = "inbound_email",
  Remote = "remote",
}

/**
 * List site full action history.
 */
export class ActionEntity extends SpeakeasyBase {
  /**
   * Type of action
   */
  @SpeakeasyMetadata()
  @Expose({ name: "action" })
  action?: ActionEntityActionEnum;

  /**
   * The destination path for this action, if applicable
   */
  @SpeakeasyMetadata()
  @Expose({ name: "destination" })
  destination?: string;

  /**
   * Friendly displayed output
   */
  @SpeakeasyMetadata()
  @Expose({ name: "display" })
  display?: string;

  /**
   * Failure type.  If action was a user login or session failure, why did it fail?
   */
  @SpeakeasyMetadata()
  @Expose({ name: "failure_type" })
  failureType?: ActionEntityFailureTypeEnum;

  /**
   * Action ID
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id?: number;

  /**
   * Interface on which this action occurred.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "interface" })
  interface?: ActionEntityInterfaceEnum;

  /**
   * IP Address that performed this action
   */
  @SpeakeasyMetadata()
  @Expose({ name: "ip" })
  ip?: string;

  /**
   * Path
   */
  @SpeakeasyMetadata()
  @Expose({ name: "path" })
  path?: string;

  /**
   * The source path for this action, if applicable
   */
  @SpeakeasyMetadata()
  @Expose({ name: "source" })
  source?: string;

  /**
   * Targets
   */
  @SpeakeasyMetadata()
  @Expose({ name: "targets" })
  targets?: Record<string, any>[];

  /**
   * User ID
   */
  @SpeakeasyMetadata()
  @Expose({ name: "user_id" })
  userId?: number;

  /**
   * Username
   */
  @SpeakeasyMetadata()
  @Expose({ name: "username" })
  username?: string;

  /**
   * Action occurrence date/time
   */
  @SpeakeasyMetadata()
  @Expose({ name: "when" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  when?: Date;
}
