/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Html - Creates a video recording or a screenshot of the provided HTML snippet
 */
public class Html {
    /**
     * Element's cache policy. When true, the cached version (if exists) is used. When false, the assets is downloaded.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("cache")
    public Boolean cache;
    public Html withCache(Boolean cache) {
        this.cache = cache;
        return this;
    }
    
    /**
     * Allows to define a color (or a range of colors) that will be converted to transparent
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("chroma-key")
    public HtmlChromaKey chromaKey;
    public Html withChromaKey(HtmlChromaKey chromaKey) {
        this.chromaKey = chromaKey;
        return this;
    }
    
    /**
     * Used for adding your comments
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("comment")
    public String comment;
    public Html withComment(String comment) {
        this.comment = comment;
        return this;
    }
    
    /**
     * Crops the element
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("crop")
    public HtmlCrop crop;
    public Html withCrop(HtmlCrop crop) {
        this.crop = crop;
        return this;
    }
    
    /**
     * Element's duration in seconds. A value of -1 auto calculates the duration based on the asset intrinsic length or the scene duration.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("duration")
    public Float duration;
    public Html withDuration(Float duration) {
        this.duration = duration;
        return this;
    }
    
    /**
     * Element's time span added after the playback.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("extra-time")
    public Float extraTime;
    public Html withExtraTime(Float extraTime) {
        this.extraTime = extraTime;
        return this;
    }
    
    /**
     * Adds a fade in effect to the element. Value in seconds.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("fade-in")
    public Float fadeIn;
    public Html withFadeIn(Float fadeIn) {
        this.fadeIn = fadeIn;
        return this;
    }
    
    /**
     * Adds a fade out effect to the element. Value in seconds.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("fade-out")
    public Float fadeOut;
    public Html withFadeOut(Float fadeOut) {
        this.fadeOut = fadeOut;
        return this;
    }
    
    /**
     * Desired text element height. A value of &lt;code&gt;-1&lt;/code&gt; means inherits scenes or movie height
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("height")
    public Long height;
    public Html withHeight(Long height) {
        this.height = height;
        return this;
    }
    
    /**
     * HTML snippet to render. Compatible with HTML5, CSS3 and Javascript
     */
    @JsonProperty("html")
    public String html;
    public Html withHtml(String html) {
        this.html = html;
        return this;
    }
    
    /**
     * Pans the element to the specified direction. If &lt;code&gt;zoom&lt;/code&gt; property is not specified, the effect is a non-zooming pan
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("pan")
    public HtmlPanEnum pan;
    public Html withPan(HtmlPanEnum pan) {
        this.pan = pan;
        return this;
    }
    
    /**
     * Sets the element position in the scene. A value of 'custom' sets a custom position based on the provided 'x' and 'y' properties
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("position")
    public HtmlPositionEnum position;
    public Html withPosition(HtmlPositionEnum position) {
        this.position = position;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("rotate")
    public HtmlRotate rotate;
    public Html withRotate(HtmlRotate rotate) {
        this.rotate = rotate;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("scale")
    public HtmlScale scale;
    public Html withScale(HtmlScale scale) {
        this.scale = scale;
        return this;
    }
    
    /**
     * Element's starting time in seconds relative to the container scene or the movie if the element is in the Movie's elements array.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("start")
    public Float start;
    public Html withStart(Float start) {
        this.start = start;
        return this;
    }
    
    /**
     * Enables usage of TailwindCSS for the HTML snippet
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tailwindcss")
    public Boolean tailwindcss;
    public Html withTailwindcss(Boolean tailwindcss) {
        this.tailwindcss = tailwindcss;
        return this;
    }
    
    @JsonProperty("type")
    public HtmlTypeEnum type;
    public Html withType(HtmlTypeEnum type) {
        this.type = type;
        return this;
    }
    
    /**
     * Desired text element width. A value of &lt;code&gt;-1&lt;/code&gt; means inherits scenes or movie width
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("width")
    public Long width;
    public Html withWidth(Long width) {
        this.width = width;
        return this;
    }
    
    /**
     * Sets the horizontal position of the element in the scene. The value &lt;code&gt;0&lt;/code&gt; is on the left side
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("x")
    public Double x;
    public Html withX(Double x) {
        this.x = x;
        return this;
    }
    
    /**
     * Sets the vertical position of the element in the scene. The value &lt;code&gt;0&lt;/code&gt; is on the top side
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("y")
    public Double y;
    public Html withY(Double y) {
        this.y = y;
        return this;
    }
    
    /**
     * Element's z-index. Use this property to reorganize the layering of the elements like in HTML
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("z-index")
    public Double zIndex;
    public Html withZIndex(Double zIndex) {
        this.zIndex = zIndex;
        return this;
    }
    
    /**
     * Zooms the element with the specified level percentage. Positive values zoom in, negative values zoom out, zero does not zoom. Zoom can be combined with the &lt;code&gt;pan&lt;/code&gt; property to set the focus point of the zooming
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("zoom")
    public Long zoom;
    public Html withZoom(Long zoom) {
        this.zoom = zoom;
        return this;
    }
    
}
