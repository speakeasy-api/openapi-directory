// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

type GetNetworksIDPathParams struct {
	// ID of the network
	ID int64 `pathParam:"style=simple,explode=false,name=id"`
}

type GetNetworksIDRequest struct {
	PathParams GetNetworksIDPathParams
}

// GetNetworksID200ApplicationJSONNetworkProtection - Protection configuration for the Network
type GetNetworksID200ApplicationJSONNetworkProtection struct {
	// If true, prevents the Network from being deleted
	Delete bool `json:"delete"`
}

type GetNetworksID200ApplicationJSONNetworkRoutes struct {
	// Destination network or host of this route. Must not overlap with an existing ip_range in any subnets or with any destinations in other routes or with the first IP of the networks ip_range or with 172.31.1.1. Must be one of the private IPv4 ranges of RFC1918.
	Destination string `json:"destination"`
	// Gateway for the route. Cannot be the first IP of the networks ip_range and also cannot be 172.31.1.1 as this IP is being used as a gateway for the public network interface of Servers.
	Gateway string `json:"gateway"`
}

// GetNetworksID200ApplicationJSONNetworkSubnetsTypeEnum - Type of Subnetwork
type GetNetworksID200ApplicationJSONNetworkSubnetsTypeEnum string

const (
	GetNetworksID200ApplicationJSONNetworkSubnetsTypeEnumCloud   GetNetworksID200ApplicationJSONNetworkSubnetsTypeEnum = "cloud"
	GetNetworksID200ApplicationJSONNetworkSubnetsTypeEnumServer  GetNetworksID200ApplicationJSONNetworkSubnetsTypeEnum = "server"
	GetNetworksID200ApplicationJSONNetworkSubnetsTypeEnumVswitch GetNetworksID200ApplicationJSONNetworkSubnetsTypeEnum = "vswitch"
)

func (e *GetNetworksID200ApplicationJSONNetworkSubnetsTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "cloud":
		fallthrough
	case "server":
		fallthrough
	case "vswitch":
		*e = GetNetworksID200ApplicationJSONNetworkSubnetsTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetNetworksID200ApplicationJSONNetworkSubnetsTypeEnum: %s", s)
	}
}

type GetNetworksID200ApplicationJSONNetworkSubnets struct {
	// Gateway for Servers attached to this subnet. For subnets of type Server this is always the first IP of the network IP range.
	Gateway string `json:"gateway"`
	// Range to allocate IPs from. Must be a Subnet of the ip_range of the parent network object and must not overlap with any other subnets or with any destinations in routes. Minimum Network size is /30. We suggest that you pick a bigger Network with a /24 netmask.
	IPRange *string `json:"ip_range,omitempty"`
	// Name of Network zone. The Location object contains the `network_zone` property each Location belongs to.
	NetworkZone string `json:"network_zone"`
	// Type of Subnetwork
	Type GetNetworksID200ApplicationJSONNetworkSubnetsTypeEnum `json:"type"`
}

type GetNetworksID200ApplicationJSONNetwork struct {
	// Point in time when the Network was created (in ISO-8601 format)
	Created string `json:"created"`
	// ID of the Network
	ID int64 `json:"id"`
	// IPv4 prefix of the whole Network
	IPRange string `json:"ip_range"`
	// User-defined labels (key-value pairs)
	Labels map[string]interface{} `json:"labels"`
	// Array of IDs of Load Balancers attached to this Network
	LoadBalancers []int64 `json:"load_balancers,omitempty"`
	// Name of the Network
	Name string `json:"name"`
	// Protection configuration for the Network
	Protection GetNetworksID200ApplicationJSONNetworkProtection `json:"protection"`
	// Array of routes set in this Network
	Routes []GetNetworksID200ApplicationJSONNetworkRoutes `json:"routes"`
	// Array of IDs of Servers attached to this Network
	Servers []int64 `json:"servers"`
	// Array subnets allocated in this Network
	Subnets []GetNetworksID200ApplicationJSONNetworkSubnets `json:"subnets"`
}

// GetNetworksID200ApplicationJSON - The `network` key contains the network
type GetNetworksID200ApplicationJSON struct {
	Network *GetNetworksID200ApplicationJSONNetwork `json:"network,omitempty"`
}

type GetNetworksIDResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// The `network` key contains the network
	GetNetworksID200ApplicationJSONObject *GetNetworksID200ApplicationJSON
}
