"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class CreateNetworkApplianceVlanRequestBodyIpv6PrefixAssignmentsOriginTypeEnum(str, Enum):
    r"""Type of the origin"""
    INDEPENDENT = 'independent'
    INTERNET = 'internet'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateNetworkApplianceVlanRequestBodyIpv6PrefixAssignmentsOrigin:
    r"""The origin of the prefix"""
    
    type: CreateNetworkApplianceVlanRequestBodyIpv6PrefixAssignmentsOriginTypeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type') }})
    r"""Type of the origin"""  
    interfaces: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('interfaces'), 'exclude': lambda f: f is None }})
    r"""Interfaces associated with the prefix"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateNetworkApplianceVlanRequestBodyIpv6PrefixAssignments:
    
    autonomous: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('autonomous'), 'exclude': lambda f: f is None }})
    r"""Auto assign a /64 prefix from the origin to the VLAN"""  
    origin: Optional[CreateNetworkApplianceVlanRequestBodyIpv6PrefixAssignmentsOrigin] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('origin'), 'exclude': lambda f: f is None }})
    r"""The origin of the prefix"""  
    static_appliance_ip6: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('staticApplianceIp6'), 'exclude': lambda f: f is None }})
    r"""Manual configuration of the IPv6 Appliance IP"""  
    static_prefix: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('staticPrefix'), 'exclude': lambda f: f is None }})
    r"""Manual configuration of a /64 prefix on the VLAN"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateNetworkApplianceVlanRequestBodyIpv6:
    r"""IPv6 configuration on the VLAN"""
    
    enabled: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('enabled'), 'exclude': lambda f: f is None }})
    r"""Enable IPv6 on VLAN."""  
    prefix_assignments: Optional[list[CreateNetworkApplianceVlanRequestBodyIpv6PrefixAssignments]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('prefixAssignments'), 'exclude': lambda f: f is None }})
    r"""Prefix assignments on the VLAN"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateNetworkApplianceVlanRequestBodyMandatoryDhcp:
    r"""Mandatory DHCP will enforce that clients connecting to this VLAN must use the IP address assigned by the DHCP server. Clients who use a static IP address won't be able to associate. Only available on firmware versions 17.0 and above"""
    
    enabled: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('enabled'), 'exclude': lambda f: f is None }})
    r"""Enable Mandatory DHCP on VLAN."""  
    
class CreateNetworkApplianceVlanRequestBodyTemplateVlanTypeEnum(str, Enum):
    r"""Type of subnetting of the VLAN. Applicable only for template network."""
    SAME = 'same'
    UNIQUE = 'unique'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateNetworkApplianceVlanRequestBody:
    
    id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id') }})
    r"""The VLAN ID of the new VLAN (must be between 1 and 4094)"""  
    name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name') }})
    r"""The name of the new VLAN"""  
    appliance_ip: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('applianceIp'), 'exclude': lambda f: f is None }})
    r"""The local IP of the appliance on the VLAN"""  
    cidr: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cidr'), 'exclude': lambda f: f is None }})
    r"""CIDR of the pool of subnets. Applicable only for template network. Each network bound to the template will automatically pick a subnet from this pool to build its own VLAN."""  
    group_policy_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('groupPolicyId'), 'exclude': lambda f: f is None }})
    r"""The id of the desired group policy to apply to the VLAN"""  
    ipv6: Optional[CreateNetworkApplianceVlanRequestBodyIpv6] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ipv6'), 'exclude': lambda f: f is None }})
    r"""IPv6 configuration on the VLAN"""  
    mandatory_dhcp: Optional[CreateNetworkApplianceVlanRequestBodyMandatoryDhcp] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('mandatoryDhcp'), 'exclude': lambda f: f is None }})
    r"""Mandatory DHCP will enforce that clients connecting to this VLAN must use the IP address assigned by the DHCP server. Clients who use a static IP address won't be able to associate. Only available on firmware versions 17.0 and above"""  
    mask: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('mask'), 'exclude': lambda f: f is None }})
    r"""Mask used for the subnet of all bound to the template networks. Applicable only for template network."""  
    subnet: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('subnet'), 'exclude': lambda f: f is None }})
    r"""The subnet of the VLAN"""  
    template_vlan_type: Optional[CreateNetworkApplianceVlanRequestBodyTemplateVlanTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('templateVlanType'), 'exclude': lambda f: f is None }})
    r"""Type of subnetting of the VLAN. Applicable only for template network."""  
    

@dataclasses.dataclass
class CreateNetworkApplianceVlanRequest:
    
    network_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'networkId', 'style': 'simple', 'explode': False }})  
    request_body: CreateNetworkApplianceVlanRequestBody = dataclasses.field(metadata={'request': { 'media_type': 'application/json' }})  
    
class CreateNetworkApplianceVlan201ApplicationJSONIpv6PrefixAssignmentsOriginTypeEnum(str, Enum):
    r"""Type of the origin"""
    INDEPENDENT = 'independent'
    INTERNET = 'internet'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateNetworkApplianceVlan201ApplicationJSONIpv6PrefixAssignmentsOrigin:
    r"""The origin of the prefix"""
    
    interfaces: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('interfaces'), 'exclude': lambda f: f is None }})
    r"""Interfaces associated with the prefix"""  
    type: Optional[CreateNetworkApplianceVlan201ApplicationJSONIpv6PrefixAssignmentsOriginTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})
    r"""Type of the origin"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateNetworkApplianceVlan201ApplicationJSONIpv6PrefixAssignments:
    
    autonomous: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('autonomous'), 'exclude': lambda f: f is None }})
    r"""Auto assign a /64 prefix from the origin to the VLAN"""  
    origin: Optional[CreateNetworkApplianceVlan201ApplicationJSONIpv6PrefixAssignmentsOrigin] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('origin'), 'exclude': lambda f: f is None }})
    r"""The origin of the prefix"""  
    static_appliance_ip6: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('staticApplianceIp6'), 'exclude': lambda f: f is None }})
    r"""Manual configuration of the IPv6 Appliance IP"""  
    static_prefix: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('staticPrefix'), 'exclude': lambda f: f is None }})
    r"""Manual configuration of a /64 prefix on the VLAN"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateNetworkApplianceVlan201ApplicationJSONIpv6:
    r"""IPv6 configuration on the VLAN"""
    
    enabled: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('enabled'), 'exclude': lambda f: f is None }})
    r"""Enable IPv6 on VLAN"""  
    prefix_assignments: Optional[list[CreateNetworkApplianceVlan201ApplicationJSONIpv6PrefixAssignments]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('prefixAssignments'), 'exclude': lambda f: f is None }})
    r"""Prefix assignments on the VLAN"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateNetworkApplianceVlan201ApplicationJSONMandatoryDhcp:
    r"""Mandatory DHCP will enforce that clients connecting to this VLAN must use the IP address assigned by the DHCP server. Clients who use a static IP address won't be able to associate. Only available on firmware versions 17.0 and above"""
    
    enabled: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('enabled'), 'exclude': lambda f: f is None }})
    r"""Enable Mandatory DHCP on VLAN."""  
    
class CreateNetworkApplianceVlan201ApplicationJSONTemplateVlanTypeEnum(str, Enum):
    r"""Type of subnetting of the VLAN. Applicable only for template network."""
    SAME = 'same'
    UNIQUE = 'unique'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateNetworkApplianceVlan201ApplicationJSON:
    r"""Successful operation"""
    
    appliance_ip: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('applianceIp'), 'exclude': lambda f: f is None }})
    r"""The local IP of the appliance on the VLAN"""  
    cidr: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cidr'), 'exclude': lambda f: f is None }})
    r"""CIDR of the pool of subnets. Applicable only for template network. Each network bound to the template will automatically pick a subnet from this pool to build its own VLAN."""  
    group_policy_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('groupPolicyId'), 'exclude': lambda f: f is None }})
    r"""The id of the desired group policy to apply to the VLAN"""  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""The VLAN ID of the VLAN"""  
    interface_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('interfaceId'), 'exclude': lambda f: f is None }})
    r"""The interface ID of the VLAN"""  
    ipv6: Optional[CreateNetworkApplianceVlan201ApplicationJSONIpv6] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ipv6'), 'exclude': lambda f: f is None }})
    r"""IPv6 configuration on the VLAN"""  
    mandatory_dhcp: Optional[CreateNetworkApplianceVlan201ApplicationJSONMandatoryDhcp] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('mandatoryDhcp'), 'exclude': lambda f: f is None }})
    r"""Mandatory DHCP will enforce that clients connecting to this VLAN must use the IP address assigned by the DHCP server. Clients who use a static IP address won't be able to associate. Only available on firmware versions 17.0 and above"""  
    mask: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('mask'), 'exclude': lambda f: f is None }})
    r"""Mask used for the subnet of all bound to the template networks. Applicable only for template network."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""The name of the VLAN"""  
    subnet: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('subnet'), 'exclude': lambda f: f is None }})
    r"""The subnet of the VLAN"""  
    template_vlan_type: Optional[CreateNetworkApplianceVlan201ApplicationJSONTemplateVlanTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('templateVlanType'), 'exclude': lambda f: f is None }})
    r"""Type of subnetting of the VLAN. Applicable only for template network."""  
    

@dataclasses.dataclass
class CreateNetworkApplianceVlanResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    create_network_appliance_vlan_201_application_json_object: Optional[CreateNetworkApplianceVlan201ApplicationJSON] = dataclasses.field(default=None)
    r"""Successful operation"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    