/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

/**
 * Type of the origin
 */
export enum CreateNetworkApplianceVlanRequestBodyIpv6PrefixAssignmentsOriginTypeEnum {
  Independent = "independent",
  Internet = "internet",
}

/**
 * The origin of the prefix
 */
export class CreateNetworkApplianceVlanRequestBodyIpv6PrefixAssignmentsOrigin extends SpeakeasyBase {
  /**
   * Interfaces associated with the prefix
   */
  @SpeakeasyMetadata()
  @Expose({ name: "interfaces" })
  interfaces?: string[];

  /**
   * Type of the origin
   */
  @SpeakeasyMetadata()
  @Expose({ name: "type" })
  type: CreateNetworkApplianceVlanRequestBodyIpv6PrefixAssignmentsOriginTypeEnum;
}

export class CreateNetworkApplianceVlanRequestBodyIpv6PrefixAssignments extends SpeakeasyBase {
  /**
   * Auto assign a /64 prefix from the origin to the VLAN
   */
  @SpeakeasyMetadata()
  @Expose({ name: "autonomous" })
  autonomous?: boolean;

  /**
   * The origin of the prefix
   */
  @SpeakeasyMetadata()
  @Expose({ name: "origin" })
  @Type(() => CreateNetworkApplianceVlanRequestBodyIpv6PrefixAssignmentsOrigin)
  origin?: CreateNetworkApplianceVlanRequestBodyIpv6PrefixAssignmentsOrigin;

  /**
   * Manual configuration of the IPv6 Appliance IP
   */
  @SpeakeasyMetadata()
  @Expose({ name: "staticApplianceIp6" })
  staticApplianceIp6?: string;

  /**
   * Manual configuration of a /64 prefix on the VLAN
   */
  @SpeakeasyMetadata()
  @Expose({ name: "staticPrefix" })
  staticPrefix?: string;
}

/**
 * IPv6 configuration on the VLAN
 */
export class CreateNetworkApplianceVlanRequestBodyIpv6 extends SpeakeasyBase {
  /**
   * Enable IPv6 on VLAN.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "enabled" })
  enabled?: boolean;

  /**
   * Prefix assignments on the VLAN
   */
  @SpeakeasyMetadata({
    elemType: CreateNetworkApplianceVlanRequestBodyIpv6PrefixAssignments,
  })
  @Expose({ name: "prefixAssignments" })
  @Type(() => CreateNetworkApplianceVlanRequestBodyIpv6PrefixAssignments)
  prefixAssignments?: CreateNetworkApplianceVlanRequestBodyIpv6PrefixAssignments[];
}

/**
 * Mandatory DHCP will enforce that clients connecting to this VLAN must use the IP address assigned by the DHCP server. Clients who use a static IP address won't be able to associate. Only available on firmware versions 17.0 and above
 */
export class CreateNetworkApplianceVlanRequestBodyMandatoryDhcp extends SpeakeasyBase {
  /**
   * Enable Mandatory DHCP on VLAN.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "enabled" })
  enabled?: boolean;
}

/**
 * Type of subnetting of the VLAN. Applicable only for template network.
 */
export enum CreateNetworkApplianceVlanRequestBodyTemplateVlanTypeEnum {
  Same = "same",
  Unique = "unique",
}

export class CreateNetworkApplianceVlanRequestBody extends SpeakeasyBase {
  /**
   * The local IP of the appliance on the VLAN
   */
  @SpeakeasyMetadata()
  @Expose({ name: "applianceIp" })
  applianceIp?: string;

  /**
   * CIDR of the pool of subnets. Applicable only for template network. Each network bound to the template will automatically pick a subnet from this pool to build its own VLAN.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "cidr" })
  cidr?: string;

  /**
   * The id of the desired group policy to apply to the VLAN
   */
  @SpeakeasyMetadata()
  @Expose({ name: "groupPolicyId" })
  groupPolicyId?: string;

  /**
   * The VLAN ID of the new VLAN (must be between 1 and 4094)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id: string;

  /**
   * IPv6 configuration on the VLAN
   */
  @SpeakeasyMetadata()
  @Expose({ name: "ipv6" })
  @Type(() => CreateNetworkApplianceVlanRequestBodyIpv6)
  ipv6?: CreateNetworkApplianceVlanRequestBodyIpv6;

  /**
   * Mandatory DHCP will enforce that clients connecting to this VLAN must use the IP address assigned by the DHCP server. Clients who use a static IP address won't be able to associate. Only available on firmware versions 17.0 and above
   */
  @SpeakeasyMetadata()
  @Expose({ name: "mandatoryDhcp" })
  @Type(() => CreateNetworkApplianceVlanRequestBodyMandatoryDhcp)
  mandatoryDhcp?: CreateNetworkApplianceVlanRequestBodyMandatoryDhcp;

  /**
   * Mask used for the subnet of all bound to the template networks. Applicable only for template network.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "mask" })
  mask?: number;

  /**
   * The name of the new VLAN
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name: string;

  /**
   * The subnet of the VLAN
   */
  @SpeakeasyMetadata()
  @Expose({ name: "subnet" })
  subnet?: string;

  /**
   * Type of subnetting of the VLAN. Applicable only for template network.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "templateVlanType" })
  templateVlanType?: CreateNetworkApplianceVlanRequestBodyTemplateVlanTypeEnum;
}

export class CreateNetworkApplianceVlanRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  requestBody: CreateNetworkApplianceVlanRequestBody;

  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=networkId",
  })
  networkId: string;
}

/**
 * Type of the origin
 */
export enum CreateNetworkApplianceVlan201ApplicationJSONIpv6PrefixAssignmentsOriginTypeEnum {
  Independent = "independent",
  Internet = "internet",
}

/**
 * The origin of the prefix
 */
export class CreateNetworkApplianceVlan201ApplicationJSONIpv6PrefixAssignmentsOrigin extends SpeakeasyBase {
  /**
   * Interfaces associated with the prefix
   */
  @SpeakeasyMetadata()
  @Expose({ name: "interfaces" })
  interfaces?: string[];

  /**
   * Type of the origin
   */
  @SpeakeasyMetadata()
  @Expose({ name: "type" })
  type?: CreateNetworkApplianceVlan201ApplicationJSONIpv6PrefixAssignmentsOriginTypeEnum;
}

export class CreateNetworkApplianceVlan201ApplicationJSONIpv6PrefixAssignments extends SpeakeasyBase {
  /**
   * Auto assign a /64 prefix from the origin to the VLAN
   */
  @SpeakeasyMetadata()
  @Expose({ name: "autonomous" })
  autonomous?: boolean;

  /**
   * The origin of the prefix
   */
  @SpeakeasyMetadata()
  @Expose({ name: "origin" })
  @Type(
    () =>
      CreateNetworkApplianceVlan201ApplicationJSONIpv6PrefixAssignmentsOrigin
  )
  origin?: CreateNetworkApplianceVlan201ApplicationJSONIpv6PrefixAssignmentsOrigin;

  /**
   * Manual configuration of the IPv6 Appliance IP
   */
  @SpeakeasyMetadata()
  @Expose({ name: "staticApplianceIp6" })
  staticApplianceIp6?: string;

  /**
   * Manual configuration of a /64 prefix on the VLAN
   */
  @SpeakeasyMetadata()
  @Expose({ name: "staticPrefix" })
  staticPrefix?: string;
}

/**
 * IPv6 configuration on the VLAN
 */
export class CreateNetworkApplianceVlan201ApplicationJSONIpv6 extends SpeakeasyBase {
  /**
   * Enable IPv6 on VLAN
   */
  @SpeakeasyMetadata()
  @Expose({ name: "enabled" })
  enabled?: boolean;

  /**
   * Prefix assignments on the VLAN
   */
  @SpeakeasyMetadata({
    elemType: CreateNetworkApplianceVlan201ApplicationJSONIpv6PrefixAssignments,
  })
  @Expose({ name: "prefixAssignments" })
  @Type(() => CreateNetworkApplianceVlan201ApplicationJSONIpv6PrefixAssignments)
  prefixAssignments?: CreateNetworkApplianceVlan201ApplicationJSONIpv6PrefixAssignments[];
}

/**
 * Mandatory DHCP will enforce that clients connecting to this VLAN must use the IP address assigned by the DHCP server. Clients who use a static IP address won't be able to associate. Only available on firmware versions 17.0 and above
 */
export class CreateNetworkApplianceVlan201ApplicationJSONMandatoryDhcp extends SpeakeasyBase {
  /**
   * Enable Mandatory DHCP on VLAN.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "enabled" })
  enabled?: boolean;
}

/**
 * Type of subnetting of the VLAN. Applicable only for template network.
 */
export enum CreateNetworkApplianceVlan201ApplicationJSONTemplateVlanTypeEnum {
  Same = "same",
  Unique = "unique",
}

/**
 * Successful operation
 */
export class CreateNetworkApplianceVlan201ApplicationJSON extends SpeakeasyBase {
  /**
   * The local IP of the appliance on the VLAN
   */
  @SpeakeasyMetadata()
  @Expose({ name: "applianceIp" })
  applianceIp?: string;

  /**
   * CIDR of the pool of subnets. Applicable only for template network. Each network bound to the template will automatically pick a subnet from this pool to build its own VLAN.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "cidr" })
  cidr?: string;

  /**
   * The id of the desired group policy to apply to the VLAN
   */
  @SpeakeasyMetadata()
  @Expose({ name: "groupPolicyId" })
  groupPolicyId?: string;

  /**
   * The VLAN ID of the VLAN
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id?: string;

  /**
   * The interface ID of the VLAN
   */
  @SpeakeasyMetadata()
  @Expose({ name: "interfaceId" })
  interfaceId?: string;

  /**
   * IPv6 configuration on the VLAN
   */
  @SpeakeasyMetadata()
  @Expose({ name: "ipv6" })
  @Type(() => CreateNetworkApplianceVlan201ApplicationJSONIpv6)
  ipv6?: CreateNetworkApplianceVlan201ApplicationJSONIpv6;

  /**
   * Mandatory DHCP will enforce that clients connecting to this VLAN must use the IP address assigned by the DHCP server. Clients who use a static IP address won't be able to associate. Only available on firmware versions 17.0 and above
   */
  @SpeakeasyMetadata()
  @Expose({ name: "mandatoryDhcp" })
  @Type(() => CreateNetworkApplianceVlan201ApplicationJSONMandatoryDhcp)
  mandatoryDhcp?: CreateNetworkApplianceVlan201ApplicationJSONMandatoryDhcp;

  /**
   * Mask used for the subnet of all bound to the template networks. Applicable only for template network.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "mask" })
  mask?: number;

  /**
   * The name of the VLAN
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name?: string;

  /**
   * The subnet of the VLAN
   */
  @SpeakeasyMetadata()
  @Expose({ name: "subnet" })
  subnet?: string;

  /**
   * Type of subnetting of the VLAN. Applicable only for template network.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "templateVlanType" })
  templateVlanType?: CreateNetworkApplianceVlan201ApplicationJSONTemplateVlanTypeEnum;
}

export class CreateNetworkApplianceVlanResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * Successful operation
   */
  @SpeakeasyMetadata()
  createNetworkApplianceVlan201ApplicationJSONObject?: CreateNetworkApplianceVlan201ApplicationJSON;
}
