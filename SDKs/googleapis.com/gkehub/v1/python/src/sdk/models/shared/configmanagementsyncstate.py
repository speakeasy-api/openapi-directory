"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import configmanagementsyncerror as shared_configmanagementsyncerror
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class ConfigManagementSyncStateCodeEnum(str, Enum):
    r"""Sync status code"""
    SYNC_CODE_UNSPECIFIED = 'SYNC_CODE_UNSPECIFIED'
    SYNCED = 'SYNCED'
    PENDING = 'PENDING'
    ERROR = 'ERROR'
    NOT_CONFIGURED = 'NOT_CONFIGURED'
    NOT_INSTALLED = 'NOT_INSTALLED'
    UNAUTHORIZED = 'UNAUTHORIZED'
    UNREACHABLE = 'UNREACHABLE'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ConfigManagementSyncState:
    r"""State indicating an ACM's progress syncing configurations to a cluster"""
    
    code: Optional[ConfigManagementSyncStateCodeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('code'), 'exclude': lambda f: f is None }})
    r"""Sync status code"""  
    errors: Optional[list[shared_configmanagementsyncerror.ConfigManagementSyncError]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('errors'), 'exclude': lambda f: f is None }})
    r"""A list of errors resulting from problematic configs. This list will be truncated after 100 errors, although it is unlikely for that many errors to simultaneously exist."""  
    import_token: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('importToken'), 'exclude': lambda f: f is None }})
    r"""Token indicating the state of the importer."""  
    last_sync: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lastSync'), 'exclude': lambda f: f is None }})
    r"""Deprecated: use last_sync_time instead. Timestamp of when ACM last successfully synced the repo The time format is specified in https://golang.org/pkg/time/#Time.String"""  
    last_sync_time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lastSyncTime'), 'exclude': lambda f: f is None }})
    r"""Timestamp type of when ACM last successfully synced the repo"""  
    source_token: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sourceToken'), 'exclude': lambda f: f is None }})
    r"""Token indicating the state of the repo."""  
    sync_token: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('syncToken'), 'exclude': lambda f: f is None }})
    r"""Token indicating the state of the syncer."""  
    