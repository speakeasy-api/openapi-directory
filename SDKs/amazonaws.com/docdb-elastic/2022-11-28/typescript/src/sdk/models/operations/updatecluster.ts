/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
import { Expose } from "class-transformer";

/**
 * The authentication type for the Elastic DocumentDB cluster.
 */
export enum UpdateClusterRequestBodyAuthTypeEnum {
  PlainText = "PLAIN_TEXT",
  SecretArn = "SECRET_ARN",
}

export class UpdateClusterRequestBody extends SpeakeasyBase {
  /**
   * <p>The password for the Elastic DocumentDB cluster administrator. This password can contain any printable ASCII character except forward slash (/), double quote ("), or the "at" symbol (@).</p> <p> <i>Constraints</i>: Must contain from 8 to 100 characters.</p>
   */
  @SpeakeasyMetadata()
  @Expose({ name: "adminUserPassword" })
  adminUserPassword?: string;

  /**
   * The authentication type for the Elastic DocumentDB cluster.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "authType" })
  authType?: UpdateClusterRequestBodyAuthTypeEnum;

  /**
   * The client token for the Elastic DocumentDB cluster.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "clientToken" })
  clientToken?: string;

  /**
   * <p>The weekly time range during which system maintenance can occur, in Universal Coordinated Time (UTC).</p> <p> <i>Format</i>: <code>ddd:hh24:mi-ddd:hh24:mi</code> </p> <p> <i>Default</i>: a 30-minute window selected at random from an 8-hour block of time for each Amazon Web Services Region, occurring on a random day of the week.</p> <p> <i>Valid days</i>: Mon, Tue, Wed, Thu, Fri, Sat, Sun</p> <p> <i>Constraints</i>: Minimum 30-minute window.</p>
   */
  @SpeakeasyMetadata()
  @Expose({ name: "preferredMaintenanceWindow" })
  preferredMaintenanceWindow?: string;

  /**
   * The capacity of each shard in the Elastic DocumentDB cluster.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "shardCapacity" })
  shardCapacity?: number;

  /**
   * The number of shards to create in the Elastic DocumentDB cluster.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "shardCount" })
  shardCount?: number;

  /**
   * The number of shards to create in the Elastic DocumentDB cluster.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "subnetIds" })
  subnetIds?: string[];

  /**
   * A list of EC2 VPC security groups to associate with the new Elastic DocumentDB cluster.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "vpcSecurityGroupIds" })
  vpcSecurityGroupIds?: string[];
}

export class UpdateClusterRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  requestBody: UpdateClusterRequestBody;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Algorithm",
  })
  xAmzAlgorithm?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Content-Sha256",
  })
  xAmzContentSha256?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Credential",
  })
  xAmzCredential?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Date",
  })
  xAmzDate?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Security-Token",
  })
  xAmzSecurityToken?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Signature",
  })
  xAmzSignature?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-SignedHeaders",
  })
  xAmzSignedHeaders?: string;

  /**
   * The arn of the Elastic DocumentDB cluster.
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=clusterArn",
  })
  clusterArn: string;
}

export class UpdateClusterResponse extends SpeakeasyBase {
  /**
   * AccessDeniedException
   */
  @SpeakeasyMetadata()
  accessDeniedException?: any;

  /**
   * ConflictException
   */
  @SpeakeasyMetadata()
  conflictException?: any;

  @SpeakeasyMetadata()
  contentType: string;

  /**
   * InternalServerException
   */
  @SpeakeasyMetadata()
  internalServerException?: any;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * ResourceNotFoundException
   */
  @SpeakeasyMetadata()
  resourceNotFoundException?: any;

  /**
   * ThrottlingException
   */
  @SpeakeasyMetadata()
  throttlingException?: any;

  /**
   * Success
   */
  @SpeakeasyMetadata()
  updateClusterOutput?: shared.UpdateClusterOutput;

  /**
   * ValidationException
   */
  @SpeakeasyMetadata()
  validationException?: any;
}
