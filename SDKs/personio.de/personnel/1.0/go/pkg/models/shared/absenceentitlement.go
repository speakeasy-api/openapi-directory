// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type AbsenceEntitlementValueAttributes struct {
	Entitlement *float64 `json:"entitlement,omitempty"`
	ID          *int64   `json:"id,omitempty"`
	Name        *string  `json:"name,omitempty"`
}

type AbsenceEntitlementValueTypeEnum string

const (
	AbsenceEntitlementValueTypeEnumTimeOffType AbsenceEntitlementValueTypeEnum = "TimeOffType"
)

func (e AbsenceEntitlementValueTypeEnum) ToPointer() *AbsenceEntitlementValueTypeEnum {
	return &e
}

func (e *AbsenceEntitlementValueTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "TimeOffType":
		*e = AbsenceEntitlementValueTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AbsenceEntitlementValueTypeEnum: %v", v)
	}
}

type AbsenceEntitlementValue struct {
	Attributes *AbsenceEntitlementValueAttributes `json:"attributes,omitempty"`
	Type       *AbsenceEntitlementValueTypeEnum   `json:"type,omitempty"`
}

type AbsenceEntitlement struct {
	Label string                    `json:"label"`
	Value []AbsenceEntitlementValue `json:"value"`
}
