"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import orfiltersforsegment as shared_orfiltersforsegment
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class SegmentSequenceStepMatchTypeEnum(str, Enum):
    r"""Specifies if the step immediately precedes or can be any time before the next step."""
    UNSPECIFIED_MATCH_TYPE = 'UNSPECIFIED_MATCH_TYPE'
    PRECEDES = 'PRECEDES'
    IMMEDIATELY_PRECEDES = 'IMMEDIATELY_PRECEDES'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SegmentSequenceStep:
    r"""A segment sequence definition."""
    
    match_type: Optional[SegmentSequenceStepMatchTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('matchType'), 'exclude': lambda f: f is None }})
    r"""Specifies if the step immediately precedes or can be any time before the next step."""  
    or_filters_for_segment: Optional[list[shared_orfiltersforsegment.OrFiltersForSegment]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('orFiltersForSegment'), 'exclude': lambda f: f is None }})
    r"""A sequence is specified with a list of Or grouped filters which are combined with `AND` operator."""  
    