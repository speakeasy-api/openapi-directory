// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"time"
)

// DescribeVpcEndpointConnectionsResultVpcEndpointConnectionsDNSEntries - Describes a DNS entry.
type DescribeVpcEndpointConnectionsResultVpcEndpointConnectionsDNSEntries struct {
	DNSName      *string
	HostedZoneID *string
}

// DescribeVpcEndpointConnectionsResultVpcEndpointConnectionsIPAddressTypeEnum - The IP address type for the endpoint.
type DescribeVpcEndpointConnectionsResultVpcEndpointConnectionsIPAddressTypeEnum string

const (
	DescribeVpcEndpointConnectionsResultVpcEndpointConnectionsIPAddressTypeEnumIpv4      DescribeVpcEndpointConnectionsResultVpcEndpointConnectionsIPAddressTypeEnum = "ipv4"
	DescribeVpcEndpointConnectionsResultVpcEndpointConnectionsIPAddressTypeEnumDualstack DescribeVpcEndpointConnectionsResultVpcEndpointConnectionsIPAddressTypeEnum = "dualstack"
	DescribeVpcEndpointConnectionsResultVpcEndpointConnectionsIPAddressTypeEnumIpv6      DescribeVpcEndpointConnectionsResultVpcEndpointConnectionsIPAddressTypeEnum = "ipv6"
)

func (e *DescribeVpcEndpointConnectionsResultVpcEndpointConnectionsIPAddressTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "ipv4":
		fallthrough
	case "dualstack":
		fallthrough
	case "ipv6":
		*e = DescribeVpcEndpointConnectionsResultVpcEndpointConnectionsIPAddressTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for DescribeVpcEndpointConnectionsResultVpcEndpointConnectionsIPAddressTypeEnum: %s", s)
	}
}

// DescribeVpcEndpointConnectionsResultVpcEndpointConnectionsTags - Describes a tag.
type DescribeVpcEndpointConnectionsResultVpcEndpointConnectionsTags struct {
	Key   *string
	Value *string
}

// DescribeVpcEndpointConnectionsResultVpcEndpointConnectionsVpcEndpointStateEnum - The state of the VPC endpoint.
type DescribeVpcEndpointConnectionsResultVpcEndpointConnectionsVpcEndpointStateEnum string

const (
	DescribeVpcEndpointConnectionsResultVpcEndpointConnectionsVpcEndpointStateEnumPendingAcceptance DescribeVpcEndpointConnectionsResultVpcEndpointConnectionsVpcEndpointStateEnum = "PendingAcceptance"
	DescribeVpcEndpointConnectionsResultVpcEndpointConnectionsVpcEndpointStateEnumPending           DescribeVpcEndpointConnectionsResultVpcEndpointConnectionsVpcEndpointStateEnum = "Pending"
	DescribeVpcEndpointConnectionsResultVpcEndpointConnectionsVpcEndpointStateEnumAvailable         DescribeVpcEndpointConnectionsResultVpcEndpointConnectionsVpcEndpointStateEnum = "Available"
	DescribeVpcEndpointConnectionsResultVpcEndpointConnectionsVpcEndpointStateEnumDeleting          DescribeVpcEndpointConnectionsResultVpcEndpointConnectionsVpcEndpointStateEnum = "Deleting"
	DescribeVpcEndpointConnectionsResultVpcEndpointConnectionsVpcEndpointStateEnumDeleted           DescribeVpcEndpointConnectionsResultVpcEndpointConnectionsVpcEndpointStateEnum = "Deleted"
	DescribeVpcEndpointConnectionsResultVpcEndpointConnectionsVpcEndpointStateEnumRejected          DescribeVpcEndpointConnectionsResultVpcEndpointConnectionsVpcEndpointStateEnum = "Rejected"
	DescribeVpcEndpointConnectionsResultVpcEndpointConnectionsVpcEndpointStateEnumFailed            DescribeVpcEndpointConnectionsResultVpcEndpointConnectionsVpcEndpointStateEnum = "Failed"
	DescribeVpcEndpointConnectionsResultVpcEndpointConnectionsVpcEndpointStateEnumExpired           DescribeVpcEndpointConnectionsResultVpcEndpointConnectionsVpcEndpointStateEnum = "Expired"
)

func (e *DescribeVpcEndpointConnectionsResultVpcEndpointConnectionsVpcEndpointStateEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "PendingAcceptance":
		fallthrough
	case "Pending":
		fallthrough
	case "Available":
		fallthrough
	case "Deleting":
		fallthrough
	case "Deleted":
		fallthrough
	case "Rejected":
		fallthrough
	case "Failed":
		fallthrough
	case "Expired":
		*e = DescribeVpcEndpointConnectionsResultVpcEndpointConnectionsVpcEndpointStateEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for DescribeVpcEndpointConnectionsResultVpcEndpointConnectionsVpcEndpointStateEnum: %s", s)
	}
}

// DescribeVpcEndpointConnectionsResultVpcEndpointConnections - Describes a VPC endpoint connection to a service.
type DescribeVpcEndpointConnectionsResultVpcEndpointConnections struct {
	CreationTimestamp       *time.Time
	DNSEntries              []DescribeVpcEndpointConnectionsResultVpcEndpointConnectionsDNSEntries
	GatewayLoadBalancerArns []string
	IPAddressType           *DescribeVpcEndpointConnectionsResultVpcEndpointConnectionsIPAddressTypeEnum
	NetworkLoadBalancerArns []string
	ServiceID               *string
	Tags                    []DescribeVpcEndpointConnectionsResultVpcEndpointConnectionsTags
	VpcEndpointConnectionID *string
	VpcEndpointID           *string
	VpcEndpointOwner        *string
	VpcEndpointState        *DescribeVpcEndpointConnectionsResultVpcEndpointConnectionsVpcEndpointStateEnum
}

// DescribeVpcEndpointConnectionsResult - Success
type DescribeVpcEndpointConnectionsResult struct {
	NextToken              *string
	VpcEndpointConnections []DescribeVpcEndpointConnectionsResultVpcEndpointConnections
}
