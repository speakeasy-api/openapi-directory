<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class NetworkFirewallPolicies 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Inserts an association for the specified firewall policy.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeNetworkFirewallPoliciesAddAssociationRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeNetworkFirewallPoliciesAddAssociationSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeNetworkFirewallPoliciesAddAssociationResponse
     */
	public function computeNetworkFirewallPoliciesAddAssociation(
        \OpenAPI\OpenAPI\Models\Operations\ComputeNetworkFirewallPoliciesAddAssociationRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeNetworkFirewallPoliciesAddAssociationSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeNetworkFirewallPoliciesAddAssociationResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/global/firewallPolicies/{firewallPolicy}/addAssociation', \OpenAPI\OpenAPI\Models\Operations\ComputeNetworkFirewallPoliciesAddAssociationRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "firewallPolicyAssociation", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeNetworkFirewallPoliciesAddAssociationRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeNetworkFirewallPoliciesAddAssociationResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Inserts a rule into a firewall policy.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeNetworkFirewallPoliciesAddRuleRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeNetworkFirewallPoliciesAddRuleSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeNetworkFirewallPoliciesAddRuleResponse
     */
	public function computeNetworkFirewallPoliciesAddRule(
        \OpenAPI\OpenAPI\Models\Operations\ComputeNetworkFirewallPoliciesAddRuleRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeNetworkFirewallPoliciesAddRuleSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeNetworkFirewallPoliciesAddRuleResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/global/firewallPolicies/{firewallPolicy}/addRule', \OpenAPI\OpenAPI\Models\Operations\ComputeNetworkFirewallPoliciesAddRuleRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "firewallPolicyRule", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeNetworkFirewallPoliciesAddRuleRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeNetworkFirewallPoliciesAddRuleResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Copies rules to the specified firewall policy.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeNetworkFirewallPoliciesCloneRulesRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeNetworkFirewallPoliciesCloneRulesSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeNetworkFirewallPoliciesCloneRulesResponse
     */
	public function computeNetworkFirewallPoliciesCloneRules(
        \OpenAPI\OpenAPI\Models\Operations\ComputeNetworkFirewallPoliciesCloneRulesRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeNetworkFirewallPoliciesCloneRulesSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeNetworkFirewallPoliciesCloneRulesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/global/firewallPolicies/{firewallPolicy}/cloneRules', \OpenAPI\OpenAPI\Models\Operations\ComputeNetworkFirewallPoliciesCloneRulesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeNetworkFirewallPoliciesCloneRulesRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeNetworkFirewallPoliciesCloneRulesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Deletes the specified policy.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeNetworkFirewallPoliciesDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeNetworkFirewallPoliciesDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeNetworkFirewallPoliciesDeleteResponse
     */
	public function computeNetworkFirewallPoliciesDelete(
        \OpenAPI\OpenAPI\Models\Operations\ComputeNetworkFirewallPoliciesDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeNetworkFirewallPoliciesDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeNetworkFirewallPoliciesDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/global/firewallPolicies/{firewallPolicy}', \OpenAPI\OpenAPI\Models\Operations\ComputeNetworkFirewallPoliciesDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeNetworkFirewallPoliciesDeleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeNetworkFirewallPoliciesDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns the specified network firewall policy.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeNetworkFirewallPoliciesGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeNetworkFirewallPoliciesGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeNetworkFirewallPoliciesGetResponse
     */
	public function computeNetworkFirewallPoliciesGet(
        \OpenAPI\OpenAPI\Models\Operations\ComputeNetworkFirewallPoliciesGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeNetworkFirewallPoliciesGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeNetworkFirewallPoliciesGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/global/firewallPolicies/{firewallPolicy}', \OpenAPI\OpenAPI\Models\Operations\ComputeNetworkFirewallPoliciesGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeNetworkFirewallPoliciesGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeNetworkFirewallPoliciesGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->firewallPolicy = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\FirewallPolicy', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets an association with the specified name.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeNetworkFirewallPoliciesGetAssociationRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeNetworkFirewallPoliciesGetAssociationSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeNetworkFirewallPoliciesGetAssociationResponse
     */
	public function computeNetworkFirewallPoliciesGetAssociation(
        \OpenAPI\OpenAPI\Models\Operations\ComputeNetworkFirewallPoliciesGetAssociationRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeNetworkFirewallPoliciesGetAssociationSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeNetworkFirewallPoliciesGetAssociationResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/global/firewallPolicies/{firewallPolicy}/getAssociation', \OpenAPI\OpenAPI\Models\Operations\ComputeNetworkFirewallPoliciesGetAssociationRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeNetworkFirewallPoliciesGetAssociationRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeNetworkFirewallPoliciesGetAssociationResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->firewallPolicyAssociation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\FirewallPolicyAssociation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets the access control policy for a resource. May be empty if no such policy or resource exists.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeNetworkFirewallPoliciesGetIamPolicyRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeNetworkFirewallPoliciesGetIamPolicySecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeNetworkFirewallPoliciesGetIamPolicyResponse
     */
	public function computeNetworkFirewallPoliciesGetIamPolicy(
        \OpenAPI\OpenAPI\Models\Operations\ComputeNetworkFirewallPoliciesGetIamPolicyRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeNetworkFirewallPoliciesGetIamPolicySecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeNetworkFirewallPoliciesGetIamPolicyResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/global/firewallPolicies/{resource}/getIamPolicy', \OpenAPI\OpenAPI\Models\Operations\ComputeNetworkFirewallPoliciesGetIamPolicyRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeNetworkFirewallPoliciesGetIamPolicyRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeNetworkFirewallPoliciesGetIamPolicyResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->policy = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Policy', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets a rule of the specified priority.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeNetworkFirewallPoliciesGetRuleRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeNetworkFirewallPoliciesGetRuleSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeNetworkFirewallPoliciesGetRuleResponse
     */
	public function computeNetworkFirewallPoliciesGetRule(
        \OpenAPI\OpenAPI\Models\Operations\ComputeNetworkFirewallPoliciesGetRuleRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeNetworkFirewallPoliciesGetRuleSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeNetworkFirewallPoliciesGetRuleResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/global/firewallPolicies/{firewallPolicy}/getRule', \OpenAPI\OpenAPI\Models\Operations\ComputeNetworkFirewallPoliciesGetRuleRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeNetworkFirewallPoliciesGetRuleRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeNetworkFirewallPoliciesGetRuleResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->firewallPolicyRule = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\FirewallPolicyRule', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a new policy in the specified project using the data included in the request.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeNetworkFirewallPoliciesInsertRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeNetworkFirewallPoliciesInsertSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeNetworkFirewallPoliciesInsertResponse
     */
	public function computeNetworkFirewallPoliciesInsert(
        \OpenAPI\OpenAPI\Models\Operations\ComputeNetworkFirewallPoliciesInsertRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeNetworkFirewallPoliciesInsertSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeNetworkFirewallPoliciesInsertResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/global/firewallPolicies', \OpenAPI\OpenAPI\Models\Operations\ComputeNetworkFirewallPoliciesInsertRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "firewallPolicy", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeNetworkFirewallPoliciesInsertRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeNetworkFirewallPoliciesInsertResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists all the policies that have been configured for the specified project.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeNetworkFirewallPoliciesListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeNetworkFirewallPoliciesListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeNetworkFirewallPoliciesListResponse
     */
	public function computeNetworkFirewallPoliciesList(
        \OpenAPI\OpenAPI\Models\Operations\ComputeNetworkFirewallPoliciesListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeNetworkFirewallPoliciesListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeNetworkFirewallPoliciesListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/global/firewallPolicies', \OpenAPI\OpenAPI\Models\Operations\ComputeNetworkFirewallPoliciesListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeNetworkFirewallPoliciesListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeNetworkFirewallPoliciesListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->firewallPolicyList = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\FirewallPolicyList', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Patches the specified policy with the data included in the request.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeNetworkFirewallPoliciesPatchRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeNetworkFirewallPoliciesPatchSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeNetworkFirewallPoliciesPatchResponse
     */
	public function computeNetworkFirewallPoliciesPatch(
        \OpenAPI\OpenAPI\Models\Operations\ComputeNetworkFirewallPoliciesPatchRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeNetworkFirewallPoliciesPatchSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeNetworkFirewallPoliciesPatchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/global/firewallPolicies/{firewallPolicy}', \OpenAPI\OpenAPI\Models\Operations\ComputeNetworkFirewallPoliciesPatchRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "firewallPolicy1", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeNetworkFirewallPoliciesPatchRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeNetworkFirewallPoliciesPatchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Patches a rule of the specified priority.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeNetworkFirewallPoliciesPatchRuleRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeNetworkFirewallPoliciesPatchRuleSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeNetworkFirewallPoliciesPatchRuleResponse
     */
	public function computeNetworkFirewallPoliciesPatchRule(
        \OpenAPI\OpenAPI\Models\Operations\ComputeNetworkFirewallPoliciesPatchRuleRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeNetworkFirewallPoliciesPatchRuleSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeNetworkFirewallPoliciesPatchRuleResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/global/firewallPolicies/{firewallPolicy}/patchRule', \OpenAPI\OpenAPI\Models\Operations\ComputeNetworkFirewallPoliciesPatchRuleRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "firewallPolicyRule", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeNetworkFirewallPoliciesPatchRuleRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeNetworkFirewallPoliciesPatchRuleResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Removes an association for the specified firewall policy.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeNetworkFirewallPoliciesRemoveAssociationRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeNetworkFirewallPoliciesRemoveAssociationSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeNetworkFirewallPoliciesRemoveAssociationResponse
     */
	public function computeNetworkFirewallPoliciesRemoveAssociation(
        \OpenAPI\OpenAPI\Models\Operations\ComputeNetworkFirewallPoliciesRemoveAssociationRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeNetworkFirewallPoliciesRemoveAssociationSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeNetworkFirewallPoliciesRemoveAssociationResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/global/firewallPolicies/{firewallPolicy}/removeAssociation', \OpenAPI\OpenAPI\Models\Operations\ComputeNetworkFirewallPoliciesRemoveAssociationRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeNetworkFirewallPoliciesRemoveAssociationRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeNetworkFirewallPoliciesRemoveAssociationResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Deletes a rule of the specified priority.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeNetworkFirewallPoliciesRemoveRuleRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeNetworkFirewallPoliciesRemoveRuleSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeNetworkFirewallPoliciesRemoveRuleResponse
     */
	public function computeNetworkFirewallPoliciesRemoveRule(
        \OpenAPI\OpenAPI\Models\Operations\ComputeNetworkFirewallPoliciesRemoveRuleRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeNetworkFirewallPoliciesRemoveRuleSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeNetworkFirewallPoliciesRemoveRuleResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/global/firewallPolicies/{firewallPolicy}/removeRule', \OpenAPI\OpenAPI\Models\Operations\ComputeNetworkFirewallPoliciesRemoveRuleRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeNetworkFirewallPoliciesRemoveRuleRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeNetworkFirewallPoliciesRemoveRuleResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Sets the access control policy on the specified resource. Replaces any existing policy.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeNetworkFirewallPoliciesSetIamPolicyRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeNetworkFirewallPoliciesSetIamPolicySecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeNetworkFirewallPoliciesSetIamPolicyResponse
     */
	public function computeNetworkFirewallPoliciesSetIamPolicy(
        \OpenAPI\OpenAPI\Models\Operations\ComputeNetworkFirewallPoliciesSetIamPolicyRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeNetworkFirewallPoliciesSetIamPolicySecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeNetworkFirewallPoliciesSetIamPolicyResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/global/firewallPolicies/{resource}/setIamPolicy', \OpenAPI\OpenAPI\Models\Operations\ComputeNetworkFirewallPoliciesSetIamPolicyRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "globalSetPolicyRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeNetworkFirewallPoliciesSetIamPolicyRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeNetworkFirewallPoliciesSetIamPolicyResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->policy = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Policy', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns permissions that a caller has on the specified resource.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeNetworkFirewallPoliciesTestIamPermissionsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeNetworkFirewallPoliciesTestIamPermissionsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeNetworkFirewallPoliciesTestIamPermissionsResponse
     */
	public function computeNetworkFirewallPoliciesTestIamPermissions(
        \OpenAPI\OpenAPI\Models\Operations\ComputeNetworkFirewallPoliciesTestIamPermissionsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeNetworkFirewallPoliciesTestIamPermissionsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeNetworkFirewallPoliciesTestIamPermissionsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/global/firewallPolicies/{resource}/testIamPermissions', \OpenAPI\OpenAPI\Models\Operations\ComputeNetworkFirewallPoliciesTestIamPermissionsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "testPermissionsRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeNetworkFirewallPoliciesTestIamPermissionsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeNetworkFirewallPoliciesTestIamPermissionsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->testPermissionsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\TestPermissionsResponse', 'json');
            }
        }

        return $response;
    }
}