// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// CreateAuthorizerRequestBodyStatusEnum - The status of the create authorizer request.
type CreateAuthorizerRequestBodyStatusEnum string

const (
	CreateAuthorizerRequestBodyStatusEnumActive   CreateAuthorizerRequestBodyStatusEnum = "ACTIVE"
	CreateAuthorizerRequestBodyStatusEnumInactive CreateAuthorizerRequestBodyStatusEnum = "INACTIVE"
)

func (e CreateAuthorizerRequestBodyStatusEnum) ToPointer() *CreateAuthorizerRequestBodyStatusEnum {
	return &e
}

func (e *CreateAuthorizerRequestBodyStatusEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ACTIVE":
		fallthrough
	case "INACTIVE":
		*e = CreateAuthorizerRequestBodyStatusEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateAuthorizerRequestBodyStatusEnum: %v", v)
	}
}

type CreateAuthorizerRequestBody struct {
	// The ARN of the authorizer's Lambda function.
	AuthorizerFunctionArn string `json:"authorizerFunctionArn"`
	// <p>When <code>true</code>, the result from the authorizerâ€™s Lambda function is cached for clients that use persistent HTTP connections. The results are cached for the time specified by the Lambda function in <code>refreshAfterInSeconds</code>. This value does not affect authorization of clients that use MQTT connections.</p> <p>The default value is <code>false</code>.</p>
	EnableCachingForHTTP *bool `json:"enableCachingForHttp,omitempty"`
	// Specifies whether IoT validates the token signature in an authorization request.
	SigningDisabled *bool `json:"signingDisabled,omitempty"`
	// The status of the create authorizer request.
	Status *CreateAuthorizerRequestBodyStatusEnum `json:"status,omitempty"`
	// <p>Metadata which can be used to manage the custom authorizer.</p> <note> <p>For URI Request parameters use format: ...key1=value1&amp;key2=value2...</p> <p>For the CLI command-line parameter use format: &amp;&amp;tags "key1=value1&amp;key2=value2..."</p> <p>For the cli-input-json file use format: "tags": "key1=value1&amp;key2=value2..."</p> </note>
	Tags []shared.Tag `json:"tags,omitempty"`
	// The name of the token key used to extract the token from the HTTP headers.
	TokenKeyName *string `json:"tokenKeyName,omitempty"`
	// The public keys used to verify the digital signature returned by your custom authentication service.
	TokenSigningPublicKeys map[string]string `json:"tokenSigningPublicKeys,omitempty"`
}

type CreateAuthorizerRequest struct {
	RequestBody       CreateAuthorizerRequestBody `request:"mediaType=application/json"`
	XAmzAlgorithm     *string                     `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string                     `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string                     `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string                     `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string                     `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string                     `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string                     `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	// The authorizer name.
	AuthorizerName string `pathParam:"style=simple,explode=false,name=authorizerName"`
}

type CreateAuthorizerResponse struct {
	ContentType string
	// Success
	CreateAuthorizerResponse *shared.CreateAuthorizerResponse
	// InternalFailureException
	InternalFailureException interface{}
	// InvalidRequestException
	InvalidRequestException interface{}
	// LimitExceededException
	LimitExceededException interface{}
	// ResourceAlreadyExistsException
	ResourceAlreadyExistsException interface{}
	StatusCode                     int
	RawResponse                    *http.Response
	// ServiceUnavailableException
	ServiceUnavailableException interface{}
	// ThrottlingException
	ThrottlingException interface{}
	// UnauthorizedException
	UnauthorizedException interface{}
}
