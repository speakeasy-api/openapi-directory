/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * CatalogItem - A [CatalogObject](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogObject) instance of the `ITEM` type, also referred to as an item, in the catalog.
 */
public class CatalogItem {
    /**
     * The text of the item's display label in the Square Point of Sale app. Only up to the first five characters of the string are used.
     * This attribute is searchable, and its value length is of Unicode code points.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("abbreviation")
    public String abbreviation;
    public CatalogItem withAbbreviation(String abbreviation) {
        this.abbreviation = abbreviation;
        return this;
    }
    
    /**
     * If `true`, the item can be added to electronically fulfilled orders from the merchant's online store.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("available_electronically")
    public Boolean availableElectronically;
    public CatalogItem withAvailableElectronically(Boolean availableElectronically) {
        this.availableElectronically = availableElectronically;
        return this;
    }
    
    /**
     * If `true`, the item can be added to pickup orders from the merchant's online store.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("available_for_pickup")
    public Boolean availableForPickup;
    public CatalogItem withAvailableForPickup(Boolean availableForPickup) {
        this.availableForPickup = availableForPickup;
        return this;
    }
    
    /**
     * If `true`, the item can be added to shipping orders from the merchant's online store.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("available_online")
    public Boolean availableOnline;
    public CatalogItem withAvailableOnline(Boolean availableOnline) {
        this.availableOnline = availableOnline;
        return this;
    }
    
    /**
     * The ID of the item's category, if any.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("category_id")
    public String categoryId;
    public CatalogItem withCategoryId(String categoryId) {
        this.categoryId = categoryId;
        return this;
    }
    
    /**
     * The item's description. This is a searchable attribute for use in applicable query filters, and its value length is of Unicode code points.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    public String description;
    public CatalogItem withDescription(String description) {
        this.description = description;
        return this;
    }
    
    /**
     * List of item options IDs for this item. Used to manage and group item
     * variations in a specified order.
     * 
     * Maximum: 6 item options.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("item_options")
    public CatalogItemOptionForItem[] itemOptions;
    public CatalogItem withItemOptions(CatalogItemOptionForItem[] itemOptions) {
        this.itemOptions = itemOptions;
        return this;
    }
    
    /**
     * The color of the item's display label in the Square Point of Sale app. This must be a valid hex color code.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("label_color")
    public String labelColor;
    public CatalogItem withLabelColor(String labelColor) {
        this.labelColor = labelColor;
        return this;
    }
    
    /**
     * A set of `CatalogItemModifierListInfo` objects
     * representing the modifier lists that apply to this item, along with the overrides and min
     * and max limits that are specific to this item. Modifier lists
     * may also be added to or deleted from an item using `UpdateItemModifierLists`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("modifier_list_info")
    public CatalogItemModifierListInfo[] modifierListInfo;
    public CatalogItem withModifierListInfo(CatalogItemModifierListInfo[] modifierListInfo) {
        this.modifierListInfo = modifierListInfo;
        return this;
    }
    
    /**
     * The item's name. This is a searchable attribute for use in applicable query filters, its value must not be empty, and the length is of Unicode code points.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    public String name;
    public CatalogItem withName(String name) {
        this.name = name;
        return this;
    }
    
    /**
     * The product type of the item. May not be changed once an item has been created.
     * 
     * Only items of product type `REGULAR` or `APPOINTMENTS_SERVICE` may be created by this API; items with other product
     * types are read-only.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("product_type")
    public String productType;
    public CatalogItem withProductType(String productType) {
        this.productType = productType;
        return this;
    }
    
    /**
     * If `false`, the Square Point of Sale app will present the `CatalogItem`'s
     * details screen immediately, allowing the merchant to choose `CatalogModifier`s
     * before adding the item to the cart.  This is the default behavior.
     * 
     * If `true`, the Square Point of Sale app will immediately add the item to the cart with the pre-selected
     * modifiers, and merchants can edit modifiers by drilling down onto the item's details.
     * 
     * Third-party clients are encouraged to implement similar behaviors.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("skip_modifier_screen")
    public Boolean skipModifierScreen;
    public CatalogItem withSkipModifierScreen(Boolean skipModifierScreen) {
        this.skipModifierScreen = skipModifierScreen;
        return this;
    }
    
    /**
     * A name to sort the item by. If this name is unspecified, namely, the `sort_name` field is absent, the regular `name` field is used for sorting.
     * 
     * It is currently supported for sellers of the Japanese locale only.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sort_name")
    public String sortName;
    public CatalogItem withSortName(String sortName) {
        this.sortName = sortName;
        return this;
    }
    
    /**
     * A set of IDs indicating the taxes enabled for
     * this item. When updating an item, any taxes listed here will be added to the item.
     * Taxes may also be added to or deleted from an item using `UpdateItemTaxes`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tax_ids")
    public String[] taxIds;
    public CatalogItem withTaxIds(String[] taxIds) {
        this.taxIds = taxIds;
        return this;
    }
    
    /**
     * A list of [CatalogItemVariation](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogItemVariation) objects for this item. An item must have
     * at least one variation.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("variations")
    public CatalogObject[] variations;
    public CatalogItem withVariations(CatalogObject[] variations) {
        this.variations = variations;
        return this;
    }
    
}
