/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

public class UpdateReplicationConfigurationRequestBody {
    /**
     * Whether to associate the default Elastic Disaster Recovery Security group with the Replication Configuration.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("associateDefaultSecurityGroup")
    public Boolean associateDefaultSecurityGroup;

    public UpdateReplicationConfigurationRequestBody withAssociateDefaultSecurityGroup(Boolean associateDefaultSecurityGroup) {
        this.associateDefaultSecurityGroup = associateDefaultSecurityGroup;
        return this;
    }
    
    /**
     * Whether to allow the AWS replication agent to automatically replicate newly added disks.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("autoReplicateNewDisks")
    public Boolean autoReplicateNewDisks;

    public UpdateReplicationConfigurationRequestBody withAutoReplicateNewDisks(Boolean autoReplicateNewDisks) {
        this.autoReplicateNewDisks = autoReplicateNewDisks;
        return this;
    }
    
    /**
     * Configure bandwidth throttling for the outbound data transfer rate of the Source Server in Mbps.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("bandwidthThrottling")
    public Long bandwidthThrottling;

    public UpdateReplicationConfigurationRequestBody withBandwidthThrottling(Long bandwidthThrottling) {
        this.bandwidthThrottling = bandwidthThrottling;
        return this;
    }
    
    /**
     * Whether to create a Public IP for the Recovery Instance by default.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("createPublicIP")
    public Boolean createPublicIP;

    public UpdateReplicationConfigurationRequestBody withCreatePublicIP(Boolean createPublicIP) {
        this.createPublicIP = createPublicIP;
        return this;
    }
    
    /**
     * The data plane routing mechanism that will be used for replication.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("dataPlaneRouting")
    public UpdateReplicationConfigurationRequestBodyDataPlaneRoutingEnum dataPlaneRouting;

    public UpdateReplicationConfigurationRequestBody withDataPlaneRouting(UpdateReplicationConfigurationRequestBodyDataPlaneRoutingEnum dataPlaneRouting) {
        this.dataPlaneRouting = dataPlaneRouting;
        return this;
    }
    
    /**
     * The Staging Disk EBS volume type to be used during replication.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("defaultLargeStagingDiskType")
    public UpdateReplicationConfigurationRequestBodyDefaultLargeStagingDiskTypeEnum defaultLargeStagingDiskType;

    public UpdateReplicationConfigurationRequestBody withDefaultLargeStagingDiskType(UpdateReplicationConfigurationRequestBodyDefaultLargeStagingDiskTypeEnum defaultLargeStagingDiskType) {
        this.defaultLargeStagingDiskType = defaultLargeStagingDiskType;
        return this;
    }
    
    /**
     * The type of EBS encryption to be used during replication.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ebsEncryption")
    public UpdateReplicationConfigurationRequestBodyEbsEncryptionEnum ebsEncryption;

    public UpdateReplicationConfigurationRequestBody withEbsEncryption(UpdateReplicationConfigurationRequestBodyEbsEncryptionEnum ebsEncryption) {
        this.ebsEncryption = ebsEncryption;
        return this;
    }
    
    /**
     * The ARN of the EBS encryption key to be used during replication.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ebsEncryptionKeyArn")
    public String ebsEncryptionKeyArn;

    public UpdateReplicationConfigurationRequestBody withEbsEncryptionKeyArn(String ebsEncryptionKeyArn) {
        this.ebsEncryptionKeyArn = ebsEncryptionKeyArn;
        return this;
    }
    
    /**
     * The name of the Replication Configuration.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    public String name;

    public UpdateReplicationConfigurationRequestBody withName(String name) {
        this.name = name;
        return this;
    }
    
    /**
     * The Point in time (PIT) policy to manage snapshots taken during replication.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("pitPolicy")
    public org.openapis.openapi.models.shared.PITPolicyRule[] pitPolicy;

    public UpdateReplicationConfigurationRequestBody withPitPolicy(org.openapis.openapi.models.shared.PITPolicyRule[] pitPolicy) {
        this.pitPolicy = pitPolicy;
        return this;
    }
    
    /**
     * The configuration of the disks of the Source Server to be replicated.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("replicatedDisks")
    public org.openapis.openapi.models.shared.ReplicationConfigurationReplicatedDisk[] replicatedDisks;

    public UpdateReplicationConfigurationRequestBody withReplicatedDisks(org.openapis.openapi.models.shared.ReplicationConfigurationReplicatedDisk[] replicatedDisks) {
        this.replicatedDisks = replicatedDisks;
        return this;
    }
    
    /**
     * The instance type to be used for the replication server.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("replicationServerInstanceType")
    public String replicationServerInstanceType;

    public UpdateReplicationConfigurationRequestBody withReplicationServerInstanceType(String replicationServerInstanceType) {
        this.replicationServerInstanceType = replicationServerInstanceType;
        return this;
    }
    
    /**
     * The security group IDs that will be used by the replication server.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("replicationServersSecurityGroupsIDs")
    public String[] replicationServersSecurityGroupsIDs;

    public UpdateReplicationConfigurationRequestBody withReplicationServersSecurityGroupsIDs(String[] replicationServersSecurityGroupsIDs) {
        this.replicationServersSecurityGroupsIDs = replicationServersSecurityGroupsIDs;
        return this;
    }
    
    /**
     * The ID of the Source Server for this Replication Configuration.
     */
    @JsonProperty("sourceServerID")
    public String sourceServerID;

    public UpdateReplicationConfigurationRequestBody withSourceServerID(String sourceServerID) {
        this.sourceServerID = sourceServerID;
        return this;
    }
    
    /**
     * The subnet to be used by the replication staging area.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("stagingAreaSubnetId")
    public String stagingAreaSubnetId;

    public UpdateReplicationConfigurationRequestBody withStagingAreaSubnetId(String stagingAreaSubnetId) {
        this.stagingAreaSubnetId = stagingAreaSubnetId;
        return this;
    }
    
    /**
     * A set of tags to be associated with all resources created in the replication staging area: EC2 replication server, EBS volumes, EBS snapshots, etc.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("stagingAreaTags")
    public java.util.Map<String, String> stagingAreaTags;

    public UpdateReplicationConfigurationRequestBody withStagingAreaTags(java.util.Map<String, String> stagingAreaTags) {
        this.stagingAreaTags = stagingAreaTags;
        return this;
    }
    
    /**
     * Whether to use a dedicated Replication Server in the replication staging area.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("useDedicatedReplicationServer")
    public Boolean useDedicatedReplicationServer;

    public UpdateReplicationConfigurationRequestBody withUseDedicatedReplicationServer(Boolean useDedicatedReplicationServer) {
        this.useDedicatedReplicationServer = useDedicatedReplicationServer;
        return this;
    }
    
    public UpdateReplicationConfigurationRequestBody(@JsonProperty("sourceServerID") String sourceServerID) {
        this.sourceServerID = sourceServerID;
  }
}
