"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import customarticlefieldadd as shared_customarticlefieldadd
from ..shared import fundingcreate as shared_fundingcreate
from ..shared import timelineupdate as shared_timelineupdate
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Any, Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CollectionUpdate:
    r"""Collection description"""
    
    articles: Optional[list[int]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('articles'), 'exclude': lambda f: f is None }})
    r"""List of articles to be associated with the collection"""  
    authors: Optional[list[dict[str, Any]]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('authors'), 'exclude': lambda f: f is None }})
    r"""List of authors to be associated with the collection. The list can contain the following fields: id, name, first_name, last_name, email, orcid_id. If an id is supplied, it will take priority and everything else will be ignored. No more than 10 authors. For adding more authors use the specific authors endpoint."""  
    categories: Optional[list[int]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('categories'), 'exclude': lambda f: f is None }})
    r"""List of category ids to be associated with the collection (e.g [1, 23, 33, 66])"""  
    categories_by_source_id: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('categories_by_source_id'), 'exclude': lambda f: f is None }})
    r"""List of category source ids to be associated with the article, supersedes the categories property"""  
    custom_fields: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('custom_fields'), 'exclude': lambda f: f is None }})
    r"""List of key, values pairs to be associated with the collection"""  
    custom_fields_list: Optional[list[shared_customarticlefieldadd.CustomArticleFieldAdd]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('custom_fields_list'), 'exclude': lambda f: f is None }})
    r"""List of custom fields values, supersedes custom_fields parameter"""  
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description'), 'exclude': lambda f: f is None }})
    r"""The collection description. In a publisher case, usually this is the remote collection description"""  
    doi: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('doi'), 'exclude': lambda f: f is None }})
    r"""Not applicable for regular users. In an institutional case, make sure your group supports setting DOIs. This setting is applied by figshare via opening a ticket through our support/helpdesk system."""  
    funding: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('funding'), 'exclude': lambda f: f is None }})
    r"""Grant number or funding authority"""  
    funding_list: Optional[list[shared_fundingcreate.FundingCreate]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('funding_list'), 'exclude': lambda f: f is None }})
    r"""Funding creation / update items"""  
    group_id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('group_id'), 'exclude': lambda f: f is None }})
    r"""Not applicable to regular users. This field is reserved to institutions/publishers with access to assign to specific groups"""  
    handle: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('handle'), 'exclude': lambda f: f is None }})
    r"""Not applicable for regular users. In an institutional case, make sure your group supports setting Handles. This setting is applied by figshare via opening a ticket through our support/helpdesk system."""  
    keywords: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('keywords'), 'exclude': lambda f: f is None }})
    r"""List of tags to be associated with the collection. Tags can be used instead"""  
    references: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('references'), 'exclude': lambda f: f is None }})
    r"""List of links to be associated with the collection (e.g [\\"http://link1\\", \\"http://link2\\", \\"http://link3\\"])"""  
    resource_doi: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('resource_doi'), 'exclude': lambda f: f is None }})
    r"""Not applicable to regular users. In a publisher case, this is the publisher article DOI."""  
    resource_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('resource_id'), 'exclude': lambda f: f is None }})
    r"""Not applicable to regular users. In a publisher case, this is the publisher article id"""  
    resource_link: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('resource_link'), 'exclude': lambda f: f is None }})
    r"""Not applicable to regular users. In a publisher case, this is the publisher article link"""  
    resource_title: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('resource_title'), 'exclude': lambda f: f is None }})
    r"""Not applicable to regular users. In a publisher case, this is the publisher article title."""  
    resource_version: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('resource_version'), 'exclude': lambda f: f is None }})
    r"""Not applicable to regular users. In a publisher case, this is the publisher article version"""  
    tags: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tags'), 'exclude': lambda f: f is None }})
    r"""List of tags to be associated with the collection. Keywords can be used instead"""  
    timeline: Optional[shared_timelineupdate.TimelineUpdate] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('timeline'), 'exclude': lambda f: f is None }})  
    title: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('title'), 'exclude': lambda f: f is None }})
    r"""Title of collection"""  
    