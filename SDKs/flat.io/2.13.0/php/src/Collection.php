<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Collection 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Add a score to the collection
     * 
     * This operation will add a score to a collection. The default behavior will make the score available across multiple collections.
     * You must have the capability `canAddScores` on the provided `collection` to perform the action.
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AddScoreToCollectionRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AddScoreToCollectionSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AddScoreToCollectionResponse
     */
	public function addScoreToCollection(
        \OpenAPI\OpenAPI\Models\Operations\AddScoreToCollectionRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AddScoreToCollectionSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AddScoreToCollectionResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/collections/{collection}/scores/{score}', \OpenAPI\OpenAPI\Models\Operations\AddScoreToCollectionRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AddScoreToCollectionRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AddScoreToCollectionResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->scoreDetails = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ScoreDetails', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->flatErrorResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\FlatErrorResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create a new collection
     * 
     * This method will create a new collection and add it to your `root` collection.
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\CollectionCreation $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateCollectionSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateCollectionResponse
     */
	public function createCollection(
        \OpenAPI\OpenAPI\Models\Shared\CollectionCreation $request,
        \OpenAPI\OpenAPI\Models\Operations\CreateCollectionSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateCollectionResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/collections');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateCollectionResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->collection = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Collection', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->flatErrorResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\FlatErrorResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Delete the collection
     * 
     * This method will schedule the deletion of the collection. Until deleted, the collection will be available in the `trash`.
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteCollectionRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteCollectionSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteCollectionResponse
     */
	public function deleteCollection(
        \OpenAPI\OpenAPI\Models\Operations\DeleteCollectionRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeleteCollectionSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteCollectionResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/collections/{collection}', \OpenAPI\OpenAPI\Models\Operations\DeleteCollectionRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteCollectionResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->flatErrorResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\FlatErrorResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Delete a score from the collection
     * 
     * This method will delete a score from the collection. Unlike [`DELETE /scores/{score}`](#operation/deleteScore), this score will not remove the score from your account, but only from the collection.
     * This can be used to *move* a score from one collection to another, or simply remove a score from one collection when this one is contained in multiple collections.
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteScoreFromCollectionRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteScoreFromCollectionSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteScoreFromCollectionResponse
     */
	public function deleteScoreFromCollection(
        \OpenAPI\OpenAPI\Models\Operations\DeleteScoreFromCollectionRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeleteScoreFromCollectionSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteScoreFromCollectionResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/collections/{collection}/scores/{score}', \OpenAPI\OpenAPI\Models\Operations\DeleteScoreFromCollectionRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DeleteScoreFromCollectionRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteScoreFromCollectionResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->flatErrorResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\FlatErrorResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update a collection's metadata
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\EditCollectionRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\EditCollectionSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\EditCollectionResponse
     */
	public function editCollection(
        \OpenAPI\OpenAPI\Models\Operations\EditCollectionRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\EditCollectionSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\EditCollectionResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/collections/{collection}', \OpenAPI\OpenAPI\Models\Operations\EditCollectionRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "collectionModification", "json");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\EditCollectionResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->collection = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Collection', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->flatErrorResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\FlatErrorResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get collection details
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetCollectionRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetCollectionSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetCollectionResponse
     */
	public function getCollection(
        \OpenAPI\OpenAPI\Models\Operations\GetCollectionRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetCollectionSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetCollectionResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/collections/{collection}', \OpenAPI\OpenAPI\Models\Operations\GetCollectionRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetCollectionRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetCollectionResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->collection = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Collection', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->flatErrorResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\FlatErrorResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List the scores contained in a collection
     * 
     * Use this method to list the scores contained in a collection.
     * If no sort option is provided, the scores are sorted by `modificationDate` `desc`.
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListCollectionScoresRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListCollectionScoresSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ListCollectionScoresResponse
     */
	public function listCollectionScores(
        \OpenAPI\OpenAPI\Models\Operations\ListCollectionScoresRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListCollectionScoresSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ListCollectionScoresResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/collections/{collection}/scores', \OpenAPI\OpenAPI\Models\Operations\ListCollectionScoresRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListCollectionScoresRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListCollectionScoresResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->scoreDetails = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\ScoreDetails>', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->flatErrorResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\FlatErrorResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List the collections
     * 
     * Use this method to list the user's collections contained in `parent` (by default in the `root` collection).
     * If no sort option is provided, the collections are sorted by `creationDate` `desc`.
     * 
     * Note that this method will not include the `parent` collection in the listing.
     * For example, if you need the details of the `root` collection, you can use `GET /v2/collections/root`.
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListCollectionsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListCollectionsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ListCollectionsResponse
     */
	public function listCollections(
        \OpenAPI\OpenAPI\Models\Operations\ListCollectionsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListCollectionsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ListCollectionsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/collections');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListCollectionsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListCollectionsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->collections = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Collection>', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->flatErrorResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\FlatErrorResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Untrash a collection
     * 
     * This method will restore the collection by removing it from the `trash` and add it back to the `root` collection.
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UntrashCollectionRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UntrashCollectionSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\UntrashCollectionResponse
     */
	public function untrashCollection(
        \OpenAPI\OpenAPI\Models\Operations\UntrashCollectionRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\UntrashCollectionSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\UntrashCollectionResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/collections/{collection}/untrash', \OpenAPI\OpenAPI\Models\Operations\UntrashCollectionRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UntrashCollectionResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->flatErrorResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\FlatErrorResponse', 'json');
            }
        }

        return $response;
    }
}