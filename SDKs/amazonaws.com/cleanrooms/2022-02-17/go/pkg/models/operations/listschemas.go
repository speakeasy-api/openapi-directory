// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// ListSchemasSchemaTypeEnum - If present, filter schemas by schema type. The only valid schema type is currently `TABLE`.
type ListSchemasSchemaTypeEnum string

const (
	ListSchemasSchemaTypeEnumTable ListSchemasSchemaTypeEnum = "TABLE"
)

func (e ListSchemasSchemaTypeEnum) ToPointer() *ListSchemasSchemaTypeEnum {
	return &e
}

func (e *ListSchemasSchemaTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "TABLE":
		*e = ListSchemasSchemaTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListSchemasSchemaTypeEnum: %v", v)
	}
}

type ListSchemasRequest struct {
	XAmzAlgorithm     *string `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	// A unique identifier for the collaboration that the schema belongs to. Currently accepts a collaboration ID.
	CollaborationIdentifier string `pathParam:"style=simple,explode=false,name=collaborationIdentifier"`
	// The maximum size of the results that is returned per call.
	MaxResults *int64 `queryParam:"style=form,explode=true,name=maxResults"`
	// The token value retrieved from a previous call to access the next page of results.
	NextToken *string `queryParam:"style=form,explode=true,name=nextToken"`
	// If present, filter schemas by schema type. The only valid schema type is currently `TABLE`.
	SchemaType *ListSchemasSchemaTypeEnum `queryParam:"style=form,explode=true,name=schemaType"`
}

type ListSchemasResponse struct {
	// AccessDeniedException
	AccessDeniedException interface{}
	ContentType           string
	// InternalServerException
	InternalServerException interface{}
	// Success
	ListSchemasOutput *shared.ListSchemasOutput
	// ResourceNotFoundException
	ResourceNotFoundException interface{}
	StatusCode                int
	RawResponse               *http.Response
	// ThrottlingException
	ThrottlingException interface{}
	// ValidationException
	ValidationException interface{}
}
