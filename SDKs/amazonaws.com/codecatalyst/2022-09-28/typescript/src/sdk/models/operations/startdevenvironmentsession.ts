/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

/**
 * Information about the configuration of a Dev Environment session.
 */
export class StartDevEnvironmentSessionRequestBodySessionConfiguration extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "executeCommandSessionConfiguration" })
  @Type(() => shared.ExecuteCommandSessionConfiguration)
  executeCommandSessionConfiguration?: shared.ExecuteCommandSessionConfiguration;

  @SpeakeasyMetadata()
  @Expose({ name: "sessionType" })
  sessionType?: shared.DevEnvironmentSessionTypeEnum;
}

export class StartDevEnvironmentSessionRequestBody extends SpeakeasyBase {
  /**
   * Information about the configuration of a Dev Environment session.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "sessionConfiguration" })
  @Type(() => StartDevEnvironmentSessionRequestBodySessionConfiguration)
  sessionConfiguration: StartDevEnvironmentSessionRequestBodySessionConfiguration;
}

export class StartDevEnvironmentSessionRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  requestBody: StartDevEnvironmentSessionRequestBody;

  /**
   * The system-generated unique ID of the Dev Environment.
   */
  @SpeakeasyMetadata({ data: "pathParam, style=simple;explode=false;name=id" })
  id: string;

  /**
   * The name of the project in the space.
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=projectName",
  })
  projectName: string;

  /**
   * The name of the space.
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=spaceName",
  })
  spaceName: string;
}

export class StartDevEnvironmentSessionResponse extends SpeakeasyBase {
  /**
   * AccessDeniedException
   */
  @SpeakeasyMetadata()
  accessDeniedException?: any;

  /**
   * ConflictException
   */
  @SpeakeasyMetadata()
  conflictException?: any;

  @SpeakeasyMetadata()
  contentType: string;

  /**
   * ResourceNotFoundException
   */
  @SpeakeasyMetadata()
  resourceNotFoundException?: any;

  /**
   * ServiceQuotaExceededException
   */
  @SpeakeasyMetadata()
  serviceQuotaExceededException?: any;

  /**
   * Success
   */
  @SpeakeasyMetadata()
  startDevEnvironmentSessionResponse?: shared.StartDevEnvironmentSessionResponse;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * ThrottlingException
   */
  @SpeakeasyMetadata()
  throttlingException?: any;

  /**
   * ValidationException
   */
  @SpeakeasyMetadata()
  validationException?: any;
}
