// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// ReloadAll200ApplicationJSONActionEnum - The id of the action
type ReloadAll200ApplicationJSONActionEnum string

const (
	ReloadAll200ApplicationJSONActionEnumReloadAll ReloadAll200ApplicationJSONActionEnum = "reloadAll"
)

func (e *ReloadAll200ApplicationJSONActionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "reloadAll":
		*e = ReloadAll200ApplicationJSONActionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ReloadAll200ApplicationJSONActionEnum: %s", s)
	}
}

type ReloadAll200ApplicationJSONDataGroupsEnum string

const (
	ReloadAll200ApplicationJSONDataGroupsEnumStarted ReloadAll200ApplicationJSONDataGroupsEnum = "Started"
)

func (e *ReloadAll200ApplicationJSONDataGroupsEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Started":
		*e = ReloadAll200ApplicationJSONDataGroupsEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ReloadAll200ApplicationJSONDataGroupsEnum: %s", s)
	}
}

type ReloadAll200ApplicationJSONDataTechniquesEnum string

const (
	ReloadAll200ApplicationJSONDataTechniquesEnumStarted ReloadAll200ApplicationJSONDataTechniquesEnum = "Started"
)

func (e *ReloadAll200ApplicationJSONDataTechniquesEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Started":
		*e = ReloadAll200ApplicationJSONDataTechniquesEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ReloadAll200ApplicationJSONDataTechniquesEnum: %s", s)
	}
}

type ReloadAll200ApplicationJSONData struct {
	Groups     ReloadAll200ApplicationJSONDataGroupsEnum     `json:"groups"`
	Techniques ReloadAll200ApplicationJSONDataTechniquesEnum `json:"techniques"`
}

// ReloadAll200ApplicationJSONResultEnum - Result of the request
type ReloadAll200ApplicationJSONResultEnum string

const (
	ReloadAll200ApplicationJSONResultEnumSuccess ReloadAll200ApplicationJSONResultEnum = "success"
	ReloadAll200ApplicationJSONResultEnumError   ReloadAll200ApplicationJSONResultEnum = "error"
)

func (e *ReloadAll200ApplicationJSONResultEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "success":
		fallthrough
	case "error":
		*e = ReloadAll200ApplicationJSONResultEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ReloadAll200ApplicationJSONResultEnum: %s", s)
	}
}

// ReloadAll200ApplicationJSON - Service reload
type ReloadAll200ApplicationJSON struct {
	// The id of the action
	Action ReloadAll200ApplicationJSONActionEnum `json:"action"`
	Data   ReloadAll200ApplicationJSONData       `json:"data"`
	// Result of the request
	Result ReloadAll200ApplicationJSONResultEnum `json:"result"`
}

type ReloadAllResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Service reload
	ReloadAll200ApplicationJSONObject *ReloadAll200ApplicationJSON
}
