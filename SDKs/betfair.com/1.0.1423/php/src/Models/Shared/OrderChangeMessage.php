<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Shared;


class OrderChangeMessage
{
    /**
     * Token value (non-null) should be stored and passed in a MarketSubscriptionMessage to resume subscription (in case of disconnect)
     * 
     * @var ?string $clk
     */
	#[\JMS\Serializer\Annotation\SerializedName('clk')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $clk = null;
    
    /**
     * Conflate Milliseconds - the conflation rate (may differ from that requested if subscription is delayed)
     * 
     * @var ?int $conflateMs
     */
	#[\JMS\Serializer\Annotation\SerializedName('conflateMs')]
    #[\JMS\Serializer\Annotation\Type('int')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?int $conflateMs = null;
    
    /**
     * Change Type - set to indicate the type of change - if null this is a delta)
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\OrderChangeMessageCtEnum $ct
     */
	#[\JMS\Serializer\Annotation\SerializedName('ct')]
    #[\JMS\Serializer\Annotation\Type('enum<OpenAPI\OpenAPI\Models\Shared\OrderChangeMessageCtEnum>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?OrderChangeMessageCtEnum $ct = null;
    
    /**
     * Heartbeat Milliseconds - the heartbeat rate (may differ from requested: bounds are 500 to 30000)
     * 
     * @var ?int $heartbeatMs
     */
	#[\JMS\Serializer\Annotation\SerializedName('heartbeatMs')]
    #[\JMS\Serializer\Annotation\Type('int')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?int $heartbeatMs = null;
    
    /**
     * Client generated unique id to link request with response (like json rpc)
     * 
     * @var ?int $id
     */
	#[\JMS\Serializer\Annotation\SerializedName('id')]
    #[\JMS\Serializer\Annotation\Type('int')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?int $id = null;
    
    /**
     * Token value (non-null) should be stored and passed in a MarketSubscriptionMessage to resume subscription (in case of disconnect)
     * 
     * @var ?string $initialClk
     */
	#[\JMS\Serializer\Annotation\SerializedName('initialClk')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $initialClk = null;
    
    /**
     * OrderMarketChanges - the modifications to account's orders (will be null on a heartbeat
     * 
     * @var ?array<\OpenAPI\OpenAPI\Models\Shared\OrderMarketChange> $oc
     */
	#[\JMS\Serializer\Annotation\SerializedName('oc')]
    #[\JMS\Serializer\Annotation\Type('array<OpenAPI\OpenAPI\Models\Shared\OrderMarketChange>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $oc = null;
    
    /**
     * The operation type
     * 
     * @var ?string $op
     */
	#[\JMS\Serializer\Annotation\SerializedName('op')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $op = null;
    
    /**
     * Publish Time (in millis since epoch) that the changes were generated
     * 
     * @var ?int $pt
     */
	#[\JMS\Serializer\Annotation\SerializedName('pt')]
    #[\JMS\Serializer\Annotation\Type('int')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?int $pt = null;
    
    /**
     * Segment Type - if the change is split into multiple segments, this denotes the beginning and end of a change, and segments in between. Will be null if data is not segmented
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\OrderChangeMessageSegmentTypeEnum $segmentType
     */
	#[\JMS\Serializer\Annotation\SerializedName('segmentType')]
    #[\JMS\Serializer\Annotation\Type('enum<OpenAPI\OpenAPI\Models\Shared\OrderChangeMessageSegmentTypeEnum>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?OrderChangeMessageSegmentTypeEnum $segmentType = null;
    
    /**
     * Stream status: set to null if the exchange stream data is up to date and 503 if the downstream services are experiencing latencies
     * 
     * @var ?int $status
     */
	#[\JMS\Serializer\Annotation\SerializedName('status')]
    #[\JMS\Serializer\Annotation\Type('int')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?int $status = null;
    
	public function __construct()
	{
		$this->clk = null;
		$this->conflateMs = null;
		$this->ct = null;
		$this->heartbeatMs = null;
		$this->id = null;
		$this->initialClk = null;
		$this->oc = null;
		$this->op = null;
		$this->pt = null;
		$this->segmentType = null;
		$this->status = null;
	}
}
