/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { Expose, Transform } from "class-transformer";

/**
 * Container for custom fields of a Feature object.
 *
 * @remarks
 *
 */
export class ProxyGetFeature extends SpeakeasyBase {
  /**
   *  Internal Zuora ID of the user who created the feature **Character limit**: 32
   */
  @SpeakeasyMetadata()
  @Expose({ name: "CreatedById" })
  createdById?: string;

  /**
   *  Date and time when the feature was created **Character limit**: 29
   */
  @SpeakeasyMetadata()
  @Expose({ name: "CreatedDate" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  createdDate?: Date;

  /**
   *  Description of the feature **Character limit**: 1000
   */
  @SpeakeasyMetadata()
  @Expose({ name: "Description" })
  description?: string;

  /**
   *  Unique code of the feature **Character limit**: 255
   */
  @SpeakeasyMetadata()
  @Expose({ name: "FeatureCode" })
  featureCode?: string;

  /**
   * Object identifier.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "Id" })
  id?: string;

  /**
   *  Name of the feature **Character limit**: 255
   */
  @SpeakeasyMetadata()
  @Expose({ name: "Name" })
  name?: string;

  /**
   *  Status of the feature, Active or Inactive **Character limit**: 8
   */
  @SpeakeasyMetadata()
  @Expose({ name: "Status" })
  status?: string;

  /**
   *  Internal Zuora ID of the user who last updated the feature **Character limit**: 32
   */
  @SpeakeasyMetadata()
  @Expose({ name: "UpdatedById" })
  updatedById?: string;

  /**
   *  Date and time when the feature was last updated **Character limit**: 29
   */
  @SpeakeasyMetadata()
  @Expose({ name: "UpdatedDate" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  updatedDate?: Date;
}
