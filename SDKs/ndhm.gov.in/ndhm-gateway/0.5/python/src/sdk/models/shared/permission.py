"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from enum import Enum
from marshmallow import fields
from sdk import utils
from typing import Optional

class PermissionAccessModeEnum(str, Enum):
    VIEW = 'VIEW'
    STORE = 'STORE'
    QUERY = 'QUERY'
    STREAM = 'STREAM'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PermissionDateRange:
    
    from_: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('from'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})  
    to: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('to'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})  
    
class PermissionFrequencyUnitEnum(str, Enum):
    HOUR = 'HOUR'
    WEEK = 'WEEK'
    DAY = 'DAY'
    MONTH = 'MONTH'
    YEAR = 'YEAR'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PermissionFrequency:
    
    repeats: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('repeats'), 'exclude': lambda f: f is None }})  
    unit: Optional[PermissionFrequencyUnitEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('unit'), 'exclude': lambda f: f is None }})  
    value: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('value'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Permission:
    
    access_mode: PermissionAccessModeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('accessMode') }})  
    data_erase_at: datetime = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dataEraseAt'), 'encoder': utils.datetimeisoformat(False), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso') }})  
    date_range: PermissionDateRange = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dateRange') }})  
    frequency: PermissionFrequency = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('frequency') }})  
    