<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class V1Company 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Retrieves a list of companies from the KYC API company index
     * 
     * KYC API company index lookup by country and mixed parameters. This function requires a country code then a mixture of name
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CompanyAlternativeSearchRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CompanyAlternativeSearchSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CompanyAlternativeSearchResponse
     */
	public function companyAlternativeSearch(
        \OpenAPI\OpenAPI\Models\Operations\CompanyAlternativeSearchRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CompanyAlternativeSearchSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CompanyAlternativeSearchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v1/company/search/{country}', \OpenAPI\OpenAPI\Models\Operations\CompanyAlternativeSearchRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CompanyAlternativeSearchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->companyAlternativeSearch200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Operations\CompanyAlternativeSearch200ApplicationJSON>', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->companyAlternativeSearchDefaultApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\CompanyAlternativeSearchDefaultApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieves announcement data
     * 
     * Request full announcement data identified by announcement id
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CompanyAnnouncementRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CompanyAnnouncementSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CompanyAnnouncementResponse
     */
	public function companyAnnouncement(
        \OpenAPI\OpenAPI\Models\Operations\CompanyAnnouncementRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CompanyAnnouncementSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CompanyAnnouncementResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v1/company/announcement/{id}', \OpenAPI\OpenAPI\Models\Operations\CompanyAnnouncementRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CompanyAnnouncementResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->companyAnnouncement200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Operations\CompanyAnnouncement200ApplicationJSON>', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->companyAnnouncementDefaultApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\CompanyAnnouncementDefaultApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieves a list of stock exchange listings
     * 
     * Lookup stock exchange listings identified by an ISIN (International Securities Identification Number) number. Search is forwarded to a provider.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CompanyDeepsearchISINRequestBody $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CompanyDeepsearchISINSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CompanyDeepsearchISINResponse
     */
	public function companyDeepsearchISIN(
        \OpenAPI\OpenAPI\Models\Operations\CompanyDeepsearchISINRequestBody $request,
        \OpenAPI\OpenAPI\Models\Operations\CompanyDeepsearchISINSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CompanyDeepsearchISINResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v1/company/deepsearch/isin');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CompanyDeepsearchISINResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->companyDeepsearchISIN200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Operations\CompanyDeepsearchISIN200ApplicationJSON>', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->companyDeepsearchISINDefaultApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\CompanyDeepsearchISINDefaultApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieves a list of companies
     * 
     * Lookup companies identified by a LEI (Legal Entity Identifier) number. Search is forwarded to a provider.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CompanyDeepsearchLEIRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CompanyDeepsearchLEISecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CompanyDeepsearchLEIResponse
     */
	public function companyDeepsearchLEI(
        \OpenAPI\OpenAPI\Models\Operations\CompanyDeepsearchLEIRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CompanyDeepsearchLEISecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CompanyDeepsearchLEIResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v1/company/deepsearch/lei/{number}', \OpenAPI\OpenAPI\Models\Operations\CompanyDeepsearchLEIRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\CompanyDeepsearchLEIRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CompanyDeepsearchLEIResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->companyDeepsearchLEI200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\CompanyDeepsearchLEI200ApplicationJSON', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->companyDeepsearchLEIDefaultApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\CompanyDeepsearchLEIDefaultApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieves a list of companies from the official business register
     * 
     * Search for companies with a certain name. Search is forwarded to the respective business register of the country.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CompanyDeepsearchNameRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CompanyDeepsearchNameSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CompanyDeepsearchNameResponse
     */
	public function companyDeepsearchName(
        \OpenAPI\OpenAPI\Models\Operations\CompanyDeepsearchNameRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CompanyDeepsearchNameSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CompanyDeepsearchNameResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v1/company/deepsearch/name/{country}/{name}', \OpenAPI\OpenAPI\Models\Operations\CompanyDeepsearchNameRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CompanyDeepsearchNameResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->companyDeepsearchName200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Operations\CompanyDeepsearchName200ApplicationJSON>', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->companyDeepsearchNameDefaultApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\CompanyDeepsearchNameDefaultApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieves a list of companies from the official business register
     * 
     * Search for companies with a certain register number. Search is forwarded to the respective business register of the country.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CompanyDeepsearchNumberRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CompanyDeepsearchNumberSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CompanyDeepsearchNumberResponse
     */
	public function companyDeepsearchNumber(
        \OpenAPI\OpenAPI\Models\Operations\CompanyDeepsearchNumberRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CompanyDeepsearchNumberSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CompanyDeepsearchNumberResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v1/company/deepsearch/number/{country}/{number}', \OpenAPI\OpenAPI\Models\Operations\CompanyDeepsearchNumberRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CompanyDeepsearchNumberResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->companyDeepsearchNumber200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Operations\CompanyDeepsearchNumber200ApplicationJSON>', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->companyDeepsearchNumberDefaultApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\CompanyDeepsearchNumberDefaultApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieves company announcements
     * 
     * Search announcements filed to the business register from a company identified by an id
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CompanyIdAnnouncementsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CompanyIdAnnouncementsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CompanyIdAnnouncementsResponse
     */
	public function companyIdAnnouncements(
        \OpenAPI\OpenAPI\Models\Operations\CompanyIdAnnouncementsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CompanyIdAnnouncementsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CompanyIdAnnouncementsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v1/company/{id}/announcements', \OpenAPI\OpenAPI\Models\Operations\CompanyIdAnnouncementsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\CompanyIdAnnouncementsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CompanyIdAnnouncementsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->companyIdAnnouncements200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Operations\CompanyIdAnnouncements200ApplicationJSON>', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->companyIdAnnouncementsDefaultApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\CompanyIdAnnouncementsDefaultApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieves company details
     * 
     * Get company details by id. The level of details is defined by the dataset parameter
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CompanyIdDatasetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CompanyIdDatasetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CompanyIdDatasetResponse
     */
	public function companyIdDataset(
        \OpenAPI\OpenAPI\Models\Operations\CompanyIdDatasetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CompanyIdDatasetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CompanyIdDatasetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v1/company/{id}/{dataset}', \OpenAPI\OpenAPI\Models\Operations\CompanyIdDatasetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\CompanyIdDatasetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CompanyIdDatasetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->oneapi1v11company1deepsearch1lei1Percent7BnumberPercent7DGetResponses200ContentApplication1jsonSchemaPropertiesCompany = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Oneapi1v11company1deepsearch1lei1Percent7BnumberPercent7DGetResponses200ContentApplication1jsonSchemaPropertiesCompany', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->companyIdDatasetDefaultApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\CompanyIdDatasetDefaultApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieves structured data extracted from a company document
     * 
     * Request company superdata identified by company id
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CompanyIdSuperRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CompanyIdSuperSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CompanyIdSuperResponse
     */
	public function companyIdSuper(
        \OpenAPI\OpenAPI\Models\Operations\CompanyIdSuperRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CompanyIdSuperSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CompanyIdSuperResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v1/company/{id}/super/{country}', \OpenAPI\OpenAPI\Models\Operations\CompanyIdSuperRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\CompanyIdSuperRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CompanyIdSuperResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->companyIdSuper200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Operations\CompanyIdSuper200ApplicationJSON>', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->companyIdSuperDefaultApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\CompanyIdSuperDefaultApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get available ChangeTypes
     * 
     * Get current list of available ChangeTypes to subscribe to
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\CompanyMonitorChangeTypesListResponse
     */
	public function companyMonitorChangeTypesList(
    ): \OpenAPI\OpenAPI\Models\Operations\CompanyMonitorChangeTypesListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v1/company/monitoring/changeTypes');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CompanyMonitorChangeTypesListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->companyMonitorChangeTypesList200ApplicationJSONStrings = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string>', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->companyMonitorChangeTypesListDefaultApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\CompanyMonitorChangeTypesListDefaultApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get monitor status for specific company id
     * 
     * Query status of registered monitors for a specific company identified by a company id
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CompanyMonitorIdRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CompanyMonitorIdSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CompanyMonitorIdResponse
     */
	public function companyMonitorId(
        \OpenAPI\OpenAPI\Models\Operations\CompanyMonitorIdRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CompanyMonitorIdSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CompanyMonitorIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v1/company/monitoring/list/{id}', \OpenAPI\OpenAPI\Models\Operations\CompanyMonitorIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CompanyMonitorIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->companyMonitorId200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Operations\CompanyMonitorId200ApplicationJSON>', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->companyMonitorIdDefaultApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\CompanyMonitorIdDefaultApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieves a list of registered monitors
     * 
     * Query list of all registered monitors for logged in user
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\CompanyMonitorListResponse
     */
	public function companyMonitorList(
    ): \OpenAPI\OpenAPI\Models\Operations\CompanyMonitorListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v1/company/monitoring/list');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CompanyMonitorListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->companyMonitorList200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Operations\CompanyMonitorList200ApplicationJSON>', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->companyMonitorListDefaultApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\CompanyMonitorListDefaultApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Register a Company for monitoring
     * 
     * Add a company to your perpetual monitoring list and register a callback URL to get monitoring alerts.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CompanyMonitorRegisterRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CompanyMonitorRegisterSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CompanyMonitorRegisterResponse
     */
	public function companyMonitorRegister(
        \OpenAPI\OpenAPI\Models\Operations\CompanyMonitorRegisterRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CompanyMonitorRegisterSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CompanyMonitorRegisterResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v1/company/monitoring/register/{id}', \OpenAPI\OpenAPI\Models\Operations\CompanyMonitorRegisterRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CompanyMonitorRegisterResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->companyMonitorRegister200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\CompanyMonitorRegister200ApplicationJSON', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->companyMonitorRegisterDefaultApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\CompanyMonitorRegisterDefaultApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Deactivates an active notification
     * 
     * Deactivate a previously registered company monitor identified by the notifier id
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CompanyMonitorUnregisterRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CompanyMonitorUnregisterSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CompanyMonitorUnregisterResponse
     */
	public function companyMonitorUnregister(
        \OpenAPI\OpenAPI\Models\Operations\CompanyMonitorUnregisterRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CompanyMonitorUnregisterSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CompanyMonitorUnregisterResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v1/company/monitoring/unregister/{id}', \OpenAPI\OpenAPI\Models\Operations\CompanyMonitorUnregisterRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CompanyMonitorUnregisterResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->companyMonitorUnregisterDefaultApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\CompanyMonitorUnregisterDefaultApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieves a list of registered notifications
     * 
     * Query list of registered notifications for a specific company identified by a company id
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CompanyNotificationIdRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CompanyNotificationIdSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CompanyNotificationIdResponse
     */
	public function companyNotificationId(
        \OpenAPI\OpenAPI\Models\Operations\CompanyNotificationIdRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CompanyNotificationIdSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CompanyNotificationIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v1/company/notification/list/{id}', \OpenAPI\OpenAPI\Models\Operations\CompanyNotificationIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CompanyNotificationIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->companyNotificationId200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Operations\CompanyNotificationId200ApplicationJSON>', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->companyNotificationIdDefaultApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\CompanyNotificationIdDefaultApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieves a list of registered notifications
     * 
     * Query list of registered callback URLs for logged in user
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\CompanyNotificationListResponse
     */
	public function companyNotificationList(
    ): \OpenAPI\OpenAPI\Models\Operations\CompanyNotificationListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v1/company/notification/list');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CompanyNotificationListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->companyNotificationList200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Operations\CompanyNotificationList200ApplicationJSON>', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->companyNotificationListDefaultApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\CompanyNotificationListDefaultApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a new notification
     * 
     * Register a new callback URL to get notifications about companies.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CompanyNotificationRegisterRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CompanyNotificationRegisterSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CompanyNotificationRegisterResponse
     */
	public function companyNotificationRegister(
        \OpenAPI\OpenAPI\Models\Operations\CompanyNotificationRegisterRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CompanyNotificationRegisterSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CompanyNotificationRegisterResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v1/company/notification/register/{id}', \OpenAPI\OpenAPI\Models\Operations\CompanyNotificationRegisterRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CompanyNotificationRegisterResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->companyNotificationRegister200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\CompanyNotificationRegister200ApplicationJSON', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->companyNotificationRegisterDefaultApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\CompanyNotificationRegisterDefaultApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Unregister a company from Monitoring
     * 
     * Deactivate a previously registered company monitor identified by the notifier id
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CompanyNotificationUnregisterRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CompanyNotificationUnregisterSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CompanyNotificationUnregisterResponse
     */
	public function companyNotificationUnregister(
        \OpenAPI\OpenAPI\Models\Operations\CompanyNotificationUnregisterRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CompanyNotificationUnregisterSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CompanyNotificationUnregisterResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v1/company/notification/unregister/{id}', \OpenAPI\OpenAPI\Models\Operations\CompanyNotificationUnregisterRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CompanyNotificationUnregisterResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->companyNotificationUnregisterDefaultApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\CompanyNotificationUnregisterDefaultApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieves a list of companies from the KYC API company index
     * 
     * KYC API company index lookup for companies with a certain name in a country.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CompanySearchNameRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CompanySearchNameSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CompanySearchNameResponse
     */
	public function companySearchName(
        \OpenAPI\OpenAPI\Models\Operations\CompanySearchNameRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CompanySearchNameSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CompanySearchNameResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v1/company/search/name/{country}/{name}', \OpenAPI\OpenAPI\Models\Operations\CompanySearchNameRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\CompanySearchNameRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CompanySearchNameResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->companySearchName200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Operations\CompanySearchName200ApplicationJSON>', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->companySearchNameDefaultApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\CompanySearchNameDefaultApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieves a list of companies from the KYC API company index
     * 
     * KYC API company index lookup for companies with a certain register number in a country.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CompanySearchNumberRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CompanySearchNumberSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CompanySearchNumberResponse
     */
	public function companySearchNumber(
        \OpenAPI\OpenAPI\Models\Operations\CompanySearchNumberRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CompanySearchNumberSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CompanySearchNumberResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v1/company/search/number/{country}/{number}', \OpenAPI\OpenAPI\Models\Operations\CompanySearchNumberRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\CompanySearchNumberRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CompanySearchNumberResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->companySearchNumber200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Operations\CompanySearchNumber200ApplicationJSON>', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->companySearchNumberDefaultApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\CompanySearchNumberDefaultApplicationJSON', 'json');
            }
        }

        return $response;
    }
}