"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import autoinstallpolicy as shared_autoinstallpolicy
from ..shared import enterpriseauthenticationapplinkconfig as shared_enterpriseauthenticationapplinkconfig
from ..shared import managedconfiguration as shared_managedconfiguration
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class ProductPolicyAutoUpdateModeEnum(str, Enum):
    r"""The auto-update mode for the product."""
    AUTO_UPDATE_MODE_UNSPECIFIED = 'autoUpdateModeUnspecified'
    AUTO_UPDATE_DEFAULT = 'autoUpdateDefault'
    AUTO_UPDATE_POSTPONED = 'autoUpdatePostponed'
    AUTO_UPDATE_HIGH_PRIORITY = 'autoUpdateHighPriority'

class ProductPolicyTracksEnum(str, Enum):
    APP_TRACK_UNSPECIFIED = 'appTrackUnspecified'
    PRODUCTION = 'production'
    BETA = 'beta'
    ALPHA = 'alpha'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ProductPolicy:
    r"""The policy for a product."""
    
    auto_install_policy: Optional[shared_autoinstallpolicy.AutoInstallPolicy] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('autoInstallPolicy'), 'exclude': lambda f: f is None }})  
    auto_update_mode: Optional[ProductPolicyAutoUpdateModeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('autoUpdateMode'), 'exclude': lambda f: f is None }})
    r"""The auto-update mode for the product."""  
    enterprise_authentication_app_link_configs: Optional[list[shared_enterpriseauthenticationapplinkconfig.EnterpriseAuthenticationAppLinkConfig]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('enterpriseAuthenticationAppLinkConfigs'), 'exclude': lambda f: f is None }})
    r"""An authentication URL configuration for the authenticator app of an identity provider. This helps to launch the identity provider's authenticator app during the authentication happening in a private app using Android WebView. Authenticator app should already be the [default handler](https://developer.android.com/training/app-links/verify-site-associations) for the authentication url on the device."""  
    managed_configuration: Optional[shared_managedconfiguration.ManagedConfiguration] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('managedConfiguration'), 'exclude': lambda f: f is None }})
    r"""A managed configuration resource contains the set of managed properties defined by the app developer in the app's managed configurations schema, as well as any configuration variables defined for the user."""  
    product_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('productId'), 'exclude': lambda f: f is None }})
    r"""The ID of the product. For example, \\"app:com.google.android.gm\\"."""  
    track_ids: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('trackIds'), 'exclude': lambda f: f is None }})
    r"""Grants the device visibility to the specified product release track(s), identified by trackIds. The list of release tracks of a product can be obtained by calling Products.Get."""  
    tracks: Optional[list[ProductPolicyTracksEnum]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tracks'), 'exclude': lambda f: f is None }})
    r"""Deprecated. Use trackIds instead."""  
    