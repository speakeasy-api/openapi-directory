"use strict";
/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SDK = exports.ServerList = void 0;
var contact_1 = require("./contact");
var country_1 = require("./country");
var deactivationreason_1 = require("./deactivationreason");
var estimate_1 = require("./estimate");
var exchangerate_1 = require("./exchangerate");
var file_1 = require("./file");
var invoice_1 = require("./invoice");
var myinfo_1 = require("./myinfo");
var order_1 = require("./order");
var project_1 = require("./project");
var projectcategory_1 = require("./projectcategory");
var projectstatus_1 = require("./projectstatus");
var quote_1 = require("./quote");
var rfe_1 = require("./rfe");
var rfq_1 = require("./rfq");
var shipment_1 = require("./shipment");
var spec_1 = require("./spec");
var spectemplate_1 = require("./spectemplate");
var task_1 = require("./task");
var teammember_1 = require("./teammember");
var teammemberrole_1 = require("./teammemberrole");
var timecard_1 = require("./timecard");
var userfields_1 = require("./userfields");
var workgroup_1 = require("./workgroup");
var workgroupmembers_1 = require("./workgroupmembers");
var axios_1 = __importDefault(require("axios"));
/**
 * Contains the list of servers available to the SDK
 */
exports.ServerList = ["http://example.com:80/v1"];
/**
 * Full description of Noosh API
 */
var SDK = /** @class */ (function () {
    function SDK(props) {
        var _a, _b;
        this._language = "typescript";
        this._sdkVersion = "0.0.1";
        this._genVersion = "internal";
        this._serverURL = (_a = props === null || props === void 0 ? void 0 : props.serverURL) !== null && _a !== void 0 ? _a : exports.ServerList[0];
        this._defaultClient =
            (_b = props === null || props === void 0 ? void 0 : props.defaultClient) !== null && _b !== void 0 ? _b : axios_1.default.create({ baseURL: this._serverURL });
        this._securityClient = this._defaultClient;
        this.contact = new contact_1.Contact(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.country = new country_1.Country(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.deactivationReason = new deactivationreason_1.DeactivationReason(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.estimate = new estimate_1.Estimate(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.exchangeRate = new exchangerate_1.ExchangeRate(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.file = new file_1.File(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.invoice = new invoice_1.Invoice(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.myInfo = new myinfo_1.MyInfo(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.order = new order_1.Order(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.project = new project_1.Project(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.projectCategory = new projectcategory_1.ProjectCategory(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.projectStatus = new projectstatus_1.ProjectStatus(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.quote = new quote_1.Quote(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.rfe = new rfe_1.Rfe(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.rfq = new rfq_1.Rfq(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.shipment = new shipment_1.Shipment(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.spec = new spec_1.Spec(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.specTemplate = new spectemplate_1.SpecTemplate(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.task = new task_1.Task(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.teamMember = new teammember_1.TeamMember(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.teamMemberRole = new teammemberrole_1.TeamMemberRole(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.timeCard = new timecard_1.TimeCard(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.userFields = new userfields_1.UserFields(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.workgroup = new workgroup_1.Workgroup(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.workgroupMembers = new workgroupmembers_1.WorkgroupMembers(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
    }
    return SDK;
}());
exports.SDK = SDK;
