/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { AxiosResponse } from "axios";

export enum GETPutLifecycleHookActionEnum {
  PutLifecycleHook = "PutLifecycleHook",
}

export enum GETPutLifecycleHookVersionEnum {
  TwoThousandAndEleven0101 = "2011-01-01",
}

export class GETPutLifecycleHookRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=Action",
  })
  action: GETPutLifecycleHookActionEnum;

  /**
   * The name of the Auto Scaling group.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=AutoScalingGroupName",
  })
  autoScalingGroupName: string;

  /**
   * <p>The action the Auto Scaling group takes when the lifecycle hook timeout elapses or if an unexpected failure occurs. The default value is <code>ABANDON</code>.</p> <p>Valid values: <code>CONTINUE</code> | <code>ABANDON</code> </p>
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=DefaultResult",
  })
  defaultResult?: string;

  /**
   * The maximum time, in seconds, that can elapse before the lifecycle hook times out. The range is from <code>30</code> to <code>7200</code> seconds. The default value is <code>3600</code> seconds (1 hour).
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=HeartbeatTimeout",
  })
  heartbeatTimeout?: number;

  /**
   * The name of the lifecycle hook.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=LifecycleHookName",
  })
  lifecycleHookName: string;

  /**
   * <p>The lifecycle transition. For Auto Scaling groups, there are two major lifecycle transitions.</p> <ul> <li> <p>To create a lifecycle hook for scale-out events, specify <code>autoscaling:EC2_INSTANCE_LAUNCHING</code>.</p> </li> <li> <p>To create a lifecycle hook for scale-in events, specify <code>autoscaling:EC2_INSTANCE_TERMINATING</code>.</p> </li> </ul> <p>Required for new lifecycle hooks, but optional when updating existing hooks.</p>
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=LifecycleTransition",
  })
  lifecycleTransition?: string;

  /**
   * Additional information that you want to include any time Amazon EC2 Auto Scaling sends a message to the notification target.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=NotificationMetadata",
  })
  notificationMetadata?: string;

  /**
   * <p>The Amazon Resource Name (ARN) of the notification target that Amazon EC2 Auto Scaling uses to notify you when an instance is in a wait state for the lifecycle hook. You can specify either an Amazon SNS topic or an Amazon SQS queue.</p> <p>If you specify an empty string, this overrides the current ARN.</p> <p>This operation uses the JSON format when sending notifications to an Amazon SQS queue, and an email key-value pair format when sending notifications to an Amazon SNS topic.</p> <p>When you specify a notification target, Amazon EC2 Auto Scaling sends it a test message. Test messages contain the following additional key-value pair: <code>"Event": "autoscaling:TEST_NOTIFICATION"</code>.</p>
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=NotificationTargetARN",
  })
  notificationTargetARN?: string;

  /**
   * <p>The ARN of the IAM role that allows the Auto Scaling group to publish to the specified notification target.</p> <p>Valid only if the notification target is an Amazon SNS topic or an Amazon SQS queue. Required for new lifecycle hooks, but optional when updating existing hooks.</p>
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=RoleARN",
  })
  roleARN?: string;

  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=Version",
  })
  version: GETPutLifecycleHookVersionEnum;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Algorithm",
  })
  xAmzAlgorithm?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Content-Sha256",
  })
  xAmzContentSha256?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Credential",
  })
  xAmzCredential?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Date",
  })
  xAmzDate?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Security-Token",
  })
  xAmzSecurityToken?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Signature",
  })
  xAmzSignature?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-SignedHeaders",
  })
  xAmzSignedHeaders?: string;
}

export class GETPutLifecycleHookResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  body?: Uint8Array;

  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;
}
