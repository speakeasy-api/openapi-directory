// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// GetNhFurnitureCategoryEnum - Specify the category of furniture to return (houswares, miscellaneous, or wall-mounted).
type GetNhFurnitureCategoryEnum string

const (
	GetNhFurnitureCategoryEnumHousewares    GetNhFurnitureCategoryEnum = "Housewares"
	GetNhFurnitureCategoryEnumMiscellaneous GetNhFurnitureCategoryEnum = "Miscellaneous"
	GetNhFurnitureCategoryEnumWallMounted   GetNhFurnitureCategoryEnum = "Wall-mounted"
)

func (e *GetNhFurnitureCategoryEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Housewares":
		fallthrough
	case "Miscellaneous":
		fallthrough
	case "Wall-mounted":
		*e = GetNhFurnitureCategoryEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetNhFurnitureCategoryEnum: %s", s)
	}
}

type GetNhFurnitureColorEnum string

const (
	GetNhFurnitureColorEnumAqua     GetNhFurnitureColorEnum = "Aqua"
	GetNhFurnitureColorEnumBeige    GetNhFurnitureColorEnum = "Beige"
	GetNhFurnitureColorEnumBlack    GetNhFurnitureColorEnum = "Black"
	GetNhFurnitureColorEnumBlue     GetNhFurnitureColorEnum = "Blue"
	GetNhFurnitureColorEnumBrown    GetNhFurnitureColorEnum = "Brown"
	GetNhFurnitureColorEnumColorful GetNhFurnitureColorEnum = "Colorful"
	GetNhFurnitureColorEnumGray     GetNhFurnitureColorEnum = "Gray"
	GetNhFurnitureColorEnumGreen    GetNhFurnitureColorEnum = "Green"
	GetNhFurnitureColorEnumOrange   GetNhFurnitureColorEnum = "Orange"
	GetNhFurnitureColorEnumPink     GetNhFurnitureColorEnum = "Pink"
	GetNhFurnitureColorEnumPurple   GetNhFurnitureColorEnum = "Purple"
	GetNhFurnitureColorEnumRed      GetNhFurnitureColorEnum = "Red"
	GetNhFurnitureColorEnumWhite    GetNhFurnitureColorEnum = "White"
	GetNhFurnitureColorEnumYellow   GetNhFurnitureColorEnum = "Yellow"
)

func (e *GetNhFurnitureColorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Aqua":
		fallthrough
	case "Beige":
		fallthrough
	case "Black":
		fallthrough
	case "Blue":
		fallthrough
	case "Brown":
		fallthrough
	case "Colorful":
		fallthrough
	case "Gray":
		fallthrough
	case "Green":
		fallthrough
	case "Orange":
		fallthrough
	case "Pink":
		fallthrough
	case "Purple":
		fallthrough
	case "Red":
		fallthrough
	case "White":
		fallthrough
	case "Yellow":
		*e = GetNhFurnitureColorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetNhFurnitureColorEnum: %s", s)
	}
}

type GetNhFurnitureQueryParams struct {
	// Specify the category of furniture to return (houswares, miscellaneous, or wall-mounted).
	Category *GetNhFurnitureCategoryEnum `queryParam:"style=form,explode=true,name=category"`
	// Return furniture that matches the provided colors (may specify one or two colors).
	Color []GetNhFurnitureColorEnum `queryParam:"style=form,explode=true,name=color"`
	// When set to `true`, only furniture names are returned. Instead of an array of objects with all details, the return will be an array of strings.
	Excludedetails *string `queryParam:"style=form,explode=true,name=excludedetails"`
}

type GetNhFurnitureHeaders struct {
	// The version of the API you are calling, written as `1.0.0`. This is specified as required as good practice, but it is not actually enforced by the API. If you do not specify a version, you will be served the latest version, which may eventually result in breaking changes.
	AcceptVersion string `header:"style=simple,explode=false,name=Accept-Version"`
	// Your UUID secret key, granted to you by the Nookipedia team. Required for accessing the API.
	XAPIKey string `header:"style=simple,explode=false,name=X-API-KEY"`
}

type GetNhFurnitureRequest struct {
	QueryParams GetNhFurnitureQueryParams
	Headers     GetNhFurnitureHeaders
}

type GetNhFurnitureResponse struct {
	ContentType string
	// Failed to authenticate user from `X-API-KEY`.
	Error401 *shared.Error401
	// There was an error fetching the requested data.
	Error500 *shared.Error500
	// A JSON array of furniture.
	NHFurnitures []shared.NHFurniture
	StatusCode   int
	RawResponse  *http.Response
}
