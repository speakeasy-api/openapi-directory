/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { AccessTokenValidity } from "./accesstokenvalidity";
import { ErrorT } from "./error";
import { PatientDemographicResponse } from "./patientdemographicresponse";
import { RequestReference } from "./requestreference";
import { Expose, Transform, Type } from "class-transformer";

/**
 * depending on the purpose of auth, as specified in /auth/init, the response may include the following
 *
 * @remarks
 *   1. LINK - only returns **accessToken**
 *   2. KYC - only returns **patient**
 *   3. KYC_AND_LINK - returns both **accessToken** and **patient**
 *
 */
export class PatientAuthConfirmResponseAuth extends SpeakeasyBase {
  /**
   * access token for initialization of subsequent action.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "accessToken" })
  accessToken?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "patient" })
  @Type(() => PatientDemographicResponse)
  patient?: PatientDemographicResponse;

  @SpeakeasyMetadata()
  @Expose({ name: "validity" })
  @Type(() => AccessTokenValidity)
  validity?: AccessTokenValidity;
}

export class PatientAuthConfirmResponse extends SpeakeasyBase {
  /**
   * depending on the purpose of auth, as specified in /auth/init, the response may include the following
   *
   * @remarks
   *   1. LINK - only returns **accessToken**
   *   2. KYC - only returns **patient**
   *   3. KYC_AND_LINK - returns both **accessToken** and **patient**
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "auth" })
  @Type(() => PatientAuthConfirmResponseAuth)
  auth?: PatientAuthConfirmResponseAuth;

  @SpeakeasyMetadata()
  @Expose({ name: "error" })
  @Type(() => ErrorT)
  error?: ErrorT;

  /**
   * a nonce, unique for each HTTP request
   */
  @SpeakeasyMetadata()
  @Expose({ name: "requestId" })
  requestId: string;

  @SpeakeasyMetadata()
  @Expose({ name: "resp" })
  @Type(() => RequestReference)
  resp: RequestReference;

  /**
   * Date time format in UTC, includes miliseconds YYYY-MM-DDThh:mm:ss.vZ
   */
  @SpeakeasyMetadata()
  @Expose({ name: "timestamp" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  timestamp: Date;
}
