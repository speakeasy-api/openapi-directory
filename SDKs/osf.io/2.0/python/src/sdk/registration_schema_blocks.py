"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations

class RegistrationSchemaBlocks:
    r"""Registration Schema Blocks are read-only entities, they represent question prompts and form inputs known as \\"blocks\\" that make up a Registration Schemas. Each block has a designated `block_type` that determines what type of information that Schema Block's corresponding block in the Schema Response."""
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def get_schema_responses_schema_response_id_schema_blocks_schema_response_block_id_(self, request: operations.GetSchemaResponsesSchemaResponseIDSchemaBlocksSchemaResponseBlockIDRequest) -> operations.GetSchemaResponsesSchemaResponseIDSchemaBlocksSchemaResponseBlockIDResponse:
        r"""Retrieve a Registration Schema Block
        This returns a Registration Schema Block by it's ID.
        #### Returns
        Returns a JSON object with a `data` key containing the representation of the requested Registration Schemas, if the request is successful.
        #### Errors
        If the request is unsuccessful, an `errors` key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetSchemaResponsesSchemaResponseIDSchemaBlocksSchemaResponseBlockIDRequest, base_url, '/schema_responses/{schema_response_id}/schema_blocks/{schema_response_block_id}', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetSchemaResponsesSchemaResponseIDSchemaBlocksSchemaResponseBlockIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content

        return res

    def schema_response_blocks_read(self, request: operations.SchemaResponseBlocksReadRequest) -> operations.SchemaResponseBlocksReadResponse:
        r"""Retrieve a list of Registration Schema Blocks for a Schema Response
        This returns a list of all the Registration Schema Blocks are contained in Registration Schema.
        #### Returns
        Returns a JSON object with a `data` key containing the representation of the requested Registration Schemas, if the request is successful.
        #### Errors
        If the request is unsuccessful, an `errors` key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.SchemaResponseBlocksReadRequest, base_url, '/schema_responses/{schema_response_id}/schema_blocks/', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.SchemaResponseBlocksReadResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content

        return res

    