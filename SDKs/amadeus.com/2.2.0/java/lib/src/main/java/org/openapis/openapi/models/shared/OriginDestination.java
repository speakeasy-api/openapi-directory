/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

public class OriginDestination {
    /**
     * Set of alternative destination location, such as a city or an airport. Currently, only the locations defined in [IATA](http://www.iata.org/publications/Pages/code-search.aspx) are supported.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("alternativeDestinationsCodes")
    public String[] alternativeDestinationsCodes;

    public OriginDestination withAlternativeDestinationsCodes(String[] alternativeDestinationsCodes) {
        this.alternativeDestinationsCodes = alternativeDestinationsCodes;
        return this;
    }
    
    /**
     * Set of alternative origin location, such as a city or an airport. Currently, only the locations defined in [IATA](http://www.iata.org/publications/Pages/code-search.aspx) are supported.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("alternativeOriginsCodes")
    public String[] alternativeOriginsCodes;

    public OriginDestination withAlternativeOriginsCodes(String[] alternativeOriginsCodes) {
        this.alternativeOriginsCodes = alternativeOriginsCodes;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("arrivalDateTimeRange")
    public DateTimeRange arrivalDateTimeRange;

    public OriginDestination withArrivalDateTimeRange(DateTimeRange arrivalDateTimeRange) {
        this.arrivalDateTimeRange = arrivalDateTimeRange;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("departureDateTimeRange")
    public DateTimeRange departureDateTimeRange;

    public OriginDestination withDepartureDateTimeRange(DateTimeRange departureDateTimeRange) {
        this.departureDateTimeRange = departureDateTimeRange;
        return this;
    }
    
    /**
     * Destination location, such as a city or an airport. Currently, only the locations defined in [IATA](http://www.iata.org/publications/Pages/code-search.aspx) are supported.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("destinationLocationCode")
    public String destinationLocationCode;

    public OriginDestination withDestinationLocationCode(String destinationLocationCode) {
        this.destinationLocationCode = destinationLocationCode;
        return this;
    }
    
    /**
     * Include other possible locations around the point, located less than this distance in kilometers away. Max:300
     * 
     * Can not be combined with "dateWindow" or "timeWindow".
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("destinationRadius")
    public Double destinationRadius;

    public OriginDestination withDestinationRadius(Double destinationRadius) {
        this.destinationRadius = destinationRadius;
        return this;
    }
    
    /**
     * List of excluded connections points. Any FlightOffer with these connections points will be present in response. Currently, only the locations defined in IATA are supported. Used only by the AMADEUS provider
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("excludedConnectionPoints")
    public String[] excludedConnectionPoints;

    public OriginDestination withExcludedConnectionPoints(String[] excludedConnectionPoints) {
        this.excludedConnectionPoints = excludedConnectionPoints;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    public String id;

    public OriginDestination withId(String id) {
        this.id = id;
        return this;
    }
    
    /**
     * List of included connections points. When an includedViaPoints option is specified, all FlightOffer returned must at least go via this Connecting Point. Currently, only the locations defined in IATA are supported. Used only by the AMADEUS provider
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("includedConnectionPoints")
    public String[] includedConnectionPoints;

    public OriginDestination withIncludedConnectionPoints(String[] includedConnectionPoints) {
        this.includedConnectionPoints = includedConnectionPoints;
        return this;
    }
    
    /**
     * Origin location, such as a city or an airport. Currently, only the locations defined in [IATA](http://www.iata.org/publications/Pages/code-search.aspx) are supported.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("originLocationCode")
    public String originLocationCode;

    public OriginDestination withOriginLocationCode(String originLocationCode) {
        this.originLocationCode = originLocationCode;
        return this;
    }
    
    /**
     * Include other possible locations around the point, located less than this distance in kilometers away. Max:300
     * 
     * Can not be combined with "dateWindow" or "timeWindow".
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("originRadius")
    public Double originRadius;

    public OriginDestination withOriginRadius(Double originRadius) {
        this.originRadius = originRadius;
        return this;
    }
    
    public OriginDestination(){}
}
