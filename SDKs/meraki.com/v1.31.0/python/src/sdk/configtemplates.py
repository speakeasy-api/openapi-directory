"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations
from typing import Any, Optional

class ConfigTemplates:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def create_organization_config_template(self, request: operations.CreateOrganizationConfigTemplateRequest) -> operations.CreateOrganizationConfigTemplateResponse:
        r"""Create a new configuration template
        Create a new configuration template
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.CreateOrganizationConfigTemplateRequest, base_url, '/organizations/{organizationId}/configTemplates', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateOrganizationConfigTemplateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.create_organization_config_template_201_application_json_object = out

        return res

    def delete_organization_config_template(self, request: operations.DeleteOrganizationConfigTemplateRequest) -> operations.DeleteOrganizationConfigTemplateResponse:
        r"""Remove a configuration template
        Remove a configuration template
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteOrganizationConfigTemplateRequest, base_url, '/organizations/{organizationId}/configTemplates/{configTemplateId}', request)
        
        
        client = self._security_client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteOrganizationConfigTemplateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def get_organization_config_template(self, request: operations.GetOrganizationConfigTemplateRequest) -> operations.GetOrganizationConfigTemplateResponse:
        r"""Return a single configuration template
        Return a single configuration template
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetOrganizationConfigTemplateRequest, base_url, '/organizations/{organizationId}/configTemplates/{configTemplateId}', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetOrganizationConfigTemplateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.get_organization_config_template_200_application_json_object = out

        return res

    def get_organization_config_template_switch_profile_port(self, request: operations.GetOrganizationConfigTemplateSwitchProfilePortRequest) -> operations.GetOrganizationConfigTemplateSwitchProfilePortResponse:
        r"""Return a switch profile port
        Return a switch profile port
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetOrganizationConfigTemplateSwitchProfilePortRequest, base_url, '/organizations/{organizationId}/configTemplates/{configTemplateId}/switch/profiles/{profileId}/ports/{portId}', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetOrganizationConfigTemplateSwitchProfilePortResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetOrganizationConfigTemplateSwitchProfilePort200ApplicationJSON])
                res.get_organization_config_template_switch_profile_port_200_application_json_object = out

        return res

    def get_organization_config_template_switch_profile_ports(self, request: operations.GetOrganizationConfigTemplateSwitchProfilePortsRequest) -> operations.GetOrganizationConfigTemplateSwitchProfilePortsResponse:
        r"""Return all the ports of a switch profile
        Return all the ports of a switch profile
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetOrganizationConfigTemplateSwitchProfilePortsRequest, base_url, '/organizations/{organizationId}/configTemplates/{configTemplateId}/switch/profiles/{profileId}/ports', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetOrganizationConfigTemplateSwitchProfilePortsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[operations.GetOrganizationConfigTemplateSwitchProfilePorts200ApplicationJSON]])
                res.get_organization_config_template_switch_profile_ports_200_application_json_objects = out

        return res

    def get_organization_config_template_switch_profiles(self, request: operations.GetOrganizationConfigTemplateSwitchProfilesRequest) -> operations.GetOrganizationConfigTemplateSwitchProfilesResponse:
        r"""List the switch profiles for your switch template configuration
        List the switch profiles for your switch template configuration
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetOrganizationConfigTemplateSwitchProfilesRequest, base_url, '/organizations/{organizationId}/configTemplates/{configTemplateId}/switch/profiles', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetOrganizationConfigTemplateSwitchProfilesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetOrganizationConfigTemplateSwitchProfiles200ApplicationJSON])
                res.get_organization_config_template_switch_profiles_200_application_json_object = out

        return res

    def get_organization_config_templates(self, request: operations.GetOrganizationConfigTemplatesRequest) -> operations.GetOrganizationConfigTemplatesResponse:
        r"""List the configuration templates for this organization
        List the configuration templates for this organization
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetOrganizationConfigTemplatesRequest, base_url, '/organizations/{organizationId}/configTemplates', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetOrganizationConfigTemplatesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[dict[str, Any]]])
                res.get_organization_config_templates_200_application_json_objects = out

        return res

    def update_organization_config_template(self, request: operations.UpdateOrganizationConfigTemplateRequest) -> operations.UpdateOrganizationConfigTemplateResponse:
        r"""Update a configuration template
        Update a configuration template
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.UpdateOrganizationConfigTemplateRequest, base_url, '/organizations/{organizationId}/configTemplates/{configTemplateId}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._security_client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateOrganizationConfigTemplateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.update_organization_config_template_200_application_json_object = out

        return res

    def update_organization_config_template_switch_profile_port(self, request: operations.UpdateOrganizationConfigTemplateSwitchProfilePortRequest) -> operations.UpdateOrganizationConfigTemplateSwitchProfilePortResponse:
        r"""Update a switch profile port
        Update a switch profile port
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.UpdateOrganizationConfigTemplateSwitchProfilePortRequest, base_url, '/organizations/{organizationId}/configTemplates/{configTemplateId}/switch/profiles/{profileId}/ports/{portId}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._security_client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateOrganizationConfigTemplateSwitchProfilePortResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.UpdateOrganizationConfigTemplateSwitchProfilePort200ApplicationJSON])
                res.update_organization_config_template_switch_profile_port_200_application_json_object = out

        return res

    