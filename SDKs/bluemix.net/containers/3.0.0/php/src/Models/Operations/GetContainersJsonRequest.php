<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Operations;

use \OpenAPI\OpenAPI\Utils\SpeakeasyMetadata;
class GetContainersJsonRequest
{
    /**
     * The unique ID of your organization space where you want to create or work with your containers. Run `cf space <space_name> --guid`, where `<space_name>` is the name of your space, to retrieve your space ID.
     * 
     * @var string $xAuthProjectId
     */
	#[SpeakeasyMetadata('header:style=simple,explode=false,name=X-Auth-Project-Id')]
    public string $xAuthProjectId;
    
    /**
     * The Bluemix JSON web token that you receive when logging into Bluemix. Run `cf oauth-token` to retrieve your access token.
     * 
     * @var string $xAuthToken
     */
	#[SpeakeasyMetadata('header:style=simple,explode=false,name=X-Auth-Token')]
    public string $xAuthToken;
    
    /**
     * By default, the `GET /containers/json` endpoint returns a list of all single containers in a space that are in a running state. To request a list of all containers independent of their current state, set the `all` query parameter to true. Allowed values are: `all=true`, `all=True`, and `all=1`. 
     * 
     * @var ?string $all
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=all')]
    public ?string $all = null;
    
    /**
     * You can filter your containers by any environment variable key or value that is listed in the `Env` section of your CLI/ API response when you run the `cf ic inspect <container>` command, or call the `GET /containers/{id}/json` endpoint. Your search criteria does not need to be an exact match. It can also be a part of the key or value you are looking for. For example, to filter all containers with an environment variable that contains `id` in one of their environment variables, use `filter=id`.
     * 
     * @var ?string $filters
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=filters')]
    public ?string $filters = null;
    
	public function __construct()
	{
		$this->xAuthProjectId = "";
		$this->xAuthToken = "";
		$this->all = null;
		$this->filters = null;
	}
}
