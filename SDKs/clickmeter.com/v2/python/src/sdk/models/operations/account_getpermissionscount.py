"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import api_core_responses_countresponce as shared_api_core_responses_countresponce
from enum import Enum
from typing import Optional

class AccountGetPermissionsCountEntityTypeEnum(str, Enum):
    r"""Can be \\"datapoint\\" or \\"group\\" """
    DATAPOINT = 'datapoint'
    GROUP = 'group'

class AccountGetPermissionsCountTypeEnum(str, Enum):
    r"""Can be \\"w\\" or \\"r\\" """
    R = 'r'
    W = 'w'


@dataclasses.dataclass
class AccountGetPermissionsCountRequest:
    
    guest_id: int = dataclasses.field(metadata={'path_param': { 'field_name': 'guestId', 'style': 'simple', 'explode': False }})
    r"""Id of the guest"""  
    entity_id: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'entityId', 'style': 'form', 'explode': True }})
    r"""Optional id of the datapoint/group entity to filter by"""  
    entity_type: Optional[AccountGetPermissionsCountEntityTypeEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'entityType', 'style': 'form', 'explode': True }})
    r"""Can be \\"datapoint\\" or \\"group\\" """  
    type: Optional[AccountGetPermissionsCountTypeEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'type', 'style': 'form', 'explode': True }})
    r"""Can be \\"w\\" or \\"r\\" """  
    

@dataclasses.dataclass
class AccountGetPermissionsCountResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    api_core_responses_count_responce: Optional[shared_api_core_responses_countresponce.APICoreResponsesCountResponce] = dataclasses.field(default=None)  
    body: Optional[bytes] = dataclasses.field(default=None)  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    