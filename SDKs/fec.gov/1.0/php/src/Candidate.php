<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Candidate 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * 
     * This endpoint is useful for finding detailed information about a particular candidate. Use the
     * `candidate_id` to find the most recent information about that candidate.
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetCandidateCandidateIdRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetCandidateCandidateIdResponse
     */
	public function getCandidateCandidateId(
        \OpenAPI\OpenAPI\Models\Operations\GetCandidateCandidateIdRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetCandidateCandidateIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/candidate/{candidate_id}/', \OpenAPI\OpenAPI\Models\Operations\GetCandidateCandidateIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetCandidateCandidateIdRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetCandidateCandidateIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (true) { /** @phpstan-ignore-line */
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->candidateDetailPage = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CandidateDetailPage', 'json');
            }
        }

        return $response;
    }
	
    /**
     * 
     * Find out a candidate's characteristics over time. This is particularly useful if the
     * candidate runs for the same office in different districts or you want to know more about a candidate's
     * previous races.
     * 
     * This information is organized by `candidate_id`, so it won't help you find a candidate
     * who ran for different offices over time; candidates get a new ID for each office.
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetCandidateCandidateIdHistoryRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetCandidateCandidateIdHistoryResponse
     */
	public function getCandidateCandidateIdHistory(
        \OpenAPI\OpenAPI\Models\Operations\GetCandidateCandidateIdHistoryRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetCandidateCandidateIdHistoryResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/candidate/{candidate_id}/history/', \OpenAPI\OpenAPI\Models\Operations\GetCandidateCandidateIdHistoryRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetCandidateCandidateIdHistoryRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetCandidateCandidateIdHistoryResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (true) { /** @phpstan-ignore-line */
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->candidateHistoryPage = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CandidateHistoryPage', 'json');
            }
        }

        return $response;
    }
	
    /**
     * 
     * Find out a candidate's characteristics over time. This is particularly useful if the
     * candidate runs for the same office in different districts or you want to know more about a candidate's
     * previous races.
     * 
     * This information is organized by `candidate_id`, so it won't help you find a candidate
     * who ran for different offices over time; candidates get a new ID for each office.
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetCandidateCandidateIdHistoryCycleRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetCandidateCandidateIdHistoryCycleResponse
     */
	public function getCandidateCandidateIdHistoryCycle(
        \OpenAPI\OpenAPI\Models\Operations\GetCandidateCandidateIdHistoryCycleRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetCandidateCandidateIdHistoryCycleResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/candidate/{candidate_id}/history/{cycle}/', \OpenAPI\OpenAPI\Models\Operations\GetCandidateCandidateIdHistoryCycleRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetCandidateCandidateIdHistoryCycleRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetCandidateCandidateIdHistoryCycleResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (true) { /** @phpstan-ignore-line */
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->candidateHistoryPage = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CandidateHistoryPage', 'json');
            }
        }

        return $response;
    }
	
    /**
     * 
     * This endpoint provides information about a committee's Form 3, Form 3X, or Form 3P financial reports,
     * which are aggregated by two-year period. We refer to two-year periods as a `cycle`.
     * 
     * The cycle is named after the even-numbered year and includes the year before it. To obtain
     * totals from 2013 and 2014, you would use 2014. In odd-numbered years, the current cycle
     * is the next year â€” for example, in 2015, the current cycle is 2016.
     * 
     * For presidential and Senate candidates, multiple two-year cycles exist between elections.
     * 
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetCandidateCandidateIdTotalsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetCandidateCandidateIdTotalsResponse
     */
	public function getCandidateCandidateIdTotals(
        \OpenAPI\OpenAPI\Models\Operations\GetCandidateCandidateIdTotalsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetCandidateCandidateIdTotalsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/candidate/{candidate_id}/totals/', \OpenAPI\OpenAPI\Models\Operations\GetCandidateCandidateIdTotalsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetCandidateCandidateIdTotalsRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetCandidateCandidateIdTotalsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (true) { /** @phpstan-ignore-line */
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->committeeTotalsPage = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CommitteeTotalsPage', 'json');
            }
        }

        return $response;
    }
	
    /**
     * 
     * Fetch basic information about candidates, and use parameters to filter results to the
     * candidates you're looking for.
     * 
     * Each result reflects a unique FEC candidate ID. That ID is particular to the candidate for a
     * particular office sought. If a candidate runs for the same office multiple times, the ID
     * stays the same. If the same person runs for another office â€” for example, a House
     * candidate runs for a Senate office â€” that candidate will get a unique ID for each office.
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetCandidatesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetCandidatesResponse
     */
	public function getCandidates(
        \OpenAPI\OpenAPI\Models\Operations\GetCandidatesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetCandidatesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/candidates/');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetCandidatesRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetCandidatesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (true) { /** @phpstan-ignore-line */
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->candidatePage = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CandidatePage', 'json');
            }
        }

        return $response;
    }
	
    /**
     * 
     * Fetch basic information about candidates and their principal committees.
     * 
     * Each result reflects a unique FEC candidate ID. That ID is assigned to the candidate for a
     * particular office sought. If a candidate runs for the same office over time, that ID
     * stays the same. If the same person runs for multiple offices â€” for example, a House
     * candidate runs for a Senate office â€” that candidate will get a unique ID for each office.
     * 
     * The candidate endpoints primarily use data from FEC registration
     * [Form 1](https://www.fec.gov/pdf/forms/fecfrm1.pdf) for committee information and
     * [Form 2](https://www.fec.gov/pdf/forms/fecfrm2.pdf) for candidate information.
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetCandidatesSearchRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetCandidatesSearchResponse
     */
	public function getCandidatesSearch(
        \OpenAPI\OpenAPI\Models\Operations\GetCandidatesSearchRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetCandidatesSearchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/candidates/search/');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetCandidatesSearchRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetCandidatesSearchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (true) { /** @phpstan-ignore-line */
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->candidatePage = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CandidatePage', 'json');
            }
        }

        return $response;
    }
	
    /**
     * 
     * Aggregated candidate receipts and disbursements grouped by cycle.
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetCandidatesTotalsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetCandidatesTotalsResponse
     */
	public function getCandidatesTotals(
        \OpenAPI\OpenAPI\Models\Operations\GetCandidatesTotalsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetCandidatesTotalsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/candidates/totals/');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetCandidatesTotalsRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetCandidatesTotalsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (true) { /** @phpstan-ignore-line */
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->candidateHistoryTotalPage = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CandidateHistoryTotalPage', 'json');
            }
        }

        return $response;
    }
	
    /**
     *  Candidate total receipts and disbursements aggregated by `aggregate_by`.
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetCandidatesTotalsAggregatesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetCandidatesTotalsAggregatesResponse
     */
	public function getCandidatesTotalsAggregates(
        \OpenAPI\OpenAPI\Models\Operations\GetCandidatesTotalsAggregatesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetCandidatesTotalsAggregatesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/candidates/totals/aggregates/');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetCandidatesTotalsAggregatesRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetCandidatesTotalsAggregatesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (true) { /** @phpstan-ignore-line */
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->candidateTotalAggregatePage = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CandidateTotalAggregatePage', 'json');
            }
        }

        return $response;
    }
	
    /**
     *  Aggregated candidate receipts and disbursements grouped by office by cycle.
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetCandidatesTotalsByOfficeRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetCandidatesTotalsByOfficeResponse
     */
	public function getCandidatesTotalsByOffice(
        \OpenAPI\OpenAPI\Models\Operations\GetCandidatesTotalsByOfficeRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetCandidatesTotalsByOfficeResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/candidates/totals/by_office/');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetCandidatesTotalsByOfficeRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetCandidatesTotalsByOfficeResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (true) { /** @phpstan-ignore-line */
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->totalByOfficePage = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\TotalByOfficePage', 'json');
            }
        }

        return $response;
    }
	
    /**
     *  Aggregated candidate receipts and disbursements grouped by office by party by cycle.
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetCandidatesTotalsByOfficeByPartyRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetCandidatesTotalsByOfficeByPartyResponse
     */
	public function getCandidatesTotalsByOfficeByParty(
        \OpenAPI\OpenAPI\Models\Operations\GetCandidatesTotalsByOfficeByPartyRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetCandidatesTotalsByOfficeByPartyResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/candidates/totals/by_office/by_party/');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetCandidatesTotalsByOfficeByPartyRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetCandidatesTotalsByOfficeByPartyResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (true) { /** @phpstan-ignore-line */
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->totalByOfficeByPartyPage = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\TotalByOfficeByPartyPage', 'json');
            }
        }

        return $response;
    }
	
    /**
     * 
     * This endpoint is useful for finding detailed information about a particular candidate. Use the
     * `candidate_id` to find the most recent information about that candidate.
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetCommitteeCommitteeIdCandidatesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetCommitteeCommitteeIdCandidatesResponse
     */
	public function getCommitteeCommitteeIdCandidates(
        \OpenAPI\OpenAPI\Models\Operations\GetCommitteeCommitteeIdCandidatesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetCommitteeCommitteeIdCandidatesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/committee/{committee_id}/candidates/', \OpenAPI\OpenAPI\Models\Operations\GetCommitteeCommitteeIdCandidatesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetCommitteeCommitteeIdCandidatesRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetCommitteeCommitteeIdCandidatesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (true) { /** @phpstan-ignore-line */
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->candidateDetailPage = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CandidateDetailPage', 'json');
            }
        }

        return $response;
    }
	
    /**
     * 
     * Find out a candidate's characteristics over time. This is particularly useful if the
     * candidate runs for the same office in different districts or you want to know more about a candidate's
     * previous races.
     * 
     * This information is organized by `candidate_id`, so it won't help you find a candidate
     * who ran for different offices over time; candidates get a new ID for each office.
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetCommitteeCommitteeIdCandidatesHistoryRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetCommitteeCommitteeIdCandidatesHistoryResponse
     */
	public function getCommitteeCommitteeIdCandidatesHistory(
        \OpenAPI\OpenAPI\Models\Operations\GetCommitteeCommitteeIdCandidatesHistoryRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetCommitteeCommitteeIdCandidatesHistoryResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/committee/{committee_id}/candidates/history/', \OpenAPI\OpenAPI\Models\Operations\GetCommitteeCommitteeIdCandidatesHistoryRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetCommitteeCommitteeIdCandidatesHistoryRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetCommitteeCommitteeIdCandidatesHistoryResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (true) { /** @phpstan-ignore-line */
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->candidateHistoryPage = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CandidateHistoryPage', 'json');
            }
        }

        return $response;
    }
	
    /**
     * 
     * Find out a candidate's characteristics over time. This is particularly useful if the
     * candidate runs for the same office in different districts or you want to know more about a candidate's
     * previous races.
     * 
     * This information is organized by `candidate_id`, so it won't help you find a candidate
     * who ran for different offices over time; candidates get a new ID for each office.
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetCommitteeCommitteeIdCandidatesHistoryCycleRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetCommitteeCommitteeIdCandidatesHistoryCycleResponse
     */
	public function getCommitteeCommitteeIdCandidatesHistoryCycle(
        \OpenAPI\OpenAPI\Models\Operations\GetCommitteeCommitteeIdCandidatesHistoryCycleRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetCommitteeCommitteeIdCandidatesHistoryCycleResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/committee/{committee_id}/candidates/history/{cycle}/', \OpenAPI\OpenAPI\Models\Operations\GetCommitteeCommitteeIdCandidatesHistoryCycleRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetCommitteeCommitteeIdCandidatesHistoryCycleRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetCommitteeCommitteeIdCandidatesHistoryCycleResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (true) { /** @phpstan-ignore-line */
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->candidateHistoryPage = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CandidateHistoryPage', 'json');
            }
        }

        return $response;
    }
}