/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

/**
 * If 'above', an alert will be sent when a sensor reads above the threshold. If 'below', an alert will be sent when a sensor reads below the threshold. Only applicable for temperature and humidity thresholds.
 */
export enum CreateNetworkSensorAlertsProfileRequestBodyConditionsDirectionEnum {
  Above = "above",
  Below = "below",
}

/**
 * Length of time in seconds that the triggering state must persist before an alert is sent. Available options are 0 seconds, 1 minute, 2 minutes, 3 minutes, 4 minutes, 5 minutes, 10 minutes, 15 minutes, 30 minutes, and 1 hour. Default is 0.
 */
export enum CreateNetworkSensorAlertsProfileRequestBodyConditionsDurationEnum {
  Zero = "0",
  Sixty = "60",
  OneHundredAndTwenty = "120",
  OneHundredAndEighty = "180",
  TwoHundredAndForty = "240",
  ThreeHundred = "300",
  SixHundred = "600",
  NineHundred = "900",
  OneThousandEightHundred = "1800",
  ThreeThousandSixHundred = "3600",
}

/**
 * Door open threshold. 'open' must be provided and set to true.
 */
export class CreateNetworkSensorAlertsProfileRequestBodyConditionsThresholdDoor extends SpeakeasyBase {
  /**
   * Alerting threshold for a door open event. Must be set to true.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "open" })
  open: boolean;
}

/**
 * Alerting threshold as a qualitative humidity level.
 */
export enum CreateNetworkSensorAlertsProfileRequestBodyConditionsThresholdHumidityQualityEnum {
  Fair = "fair",
  Good = "good",
  Inadequate = "inadequate",
  Poor = "poor",
}

/**
 * Humidity threshold. One of 'relativePercentage' or 'quality' must be provided.
 */
export class CreateNetworkSensorAlertsProfileRequestBodyConditionsThresholdHumidity extends SpeakeasyBase {
  /**
   * Alerting threshold as a qualitative humidity level.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "quality" })
  quality?: CreateNetworkSensorAlertsProfileRequestBodyConditionsThresholdHumidityQualityEnum;

  /**
   * Alerting threshold in %RH.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "relativePercentage" })
  relativePercentage?: number;
}

/**
 * Alerting threshold as a qualitative indoor air quality level.
 */
export enum CreateNetworkSensorAlertsProfileRequestBodyConditionsThresholdIndoorAirQualityQualityEnum {
  Fair = "fair",
  Good = "good",
  Inadequate = "inadequate",
  Poor = "poor",
}

/**
 * Indoor air quality score threshold. One of 'score' or 'quality' must be provided.
 */
export class CreateNetworkSensorAlertsProfileRequestBodyConditionsThresholdIndoorAirQuality extends SpeakeasyBase {
  /**
   * Alerting threshold as a qualitative indoor air quality level.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "quality" })
  quality?: CreateNetworkSensorAlertsProfileRequestBodyConditionsThresholdIndoorAirQualityQualityEnum;

  /**
   * Alerting threshold as indoor air quality score.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "score" })
  score?: number;
}

/**
 * Alerting threshold as a qualitative ambient noise level.
 */
export enum CreateNetworkSensorAlertsProfileRequestBodyConditionsThresholdNoiseAmbientQualityEnum {
  Fair = "fair",
  Good = "good",
  Inadequate = "inadequate",
  Poor = "poor",
}

/**
 * Ambient noise threshold. One of 'level' or 'quality' must be provided.
 */
export class CreateNetworkSensorAlertsProfileRequestBodyConditionsThresholdNoiseAmbient extends SpeakeasyBase {
  /**
   * Alerting threshold as adjusted decibels.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "level" })
  level?: number;

  /**
   * Alerting threshold as a qualitative ambient noise level.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "quality" })
  quality?: CreateNetworkSensorAlertsProfileRequestBodyConditionsThresholdNoiseAmbientQualityEnum;
}

/**
 * Noise threshold. 'ambient' must be provided.
 */
export class CreateNetworkSensorAlertsProfileRequestBodyConditionsThresholdNoise extends SpeakeasyBase {
  /**
   * Ambient noise threshold. One of 'level' or 'quality' must be provided.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "ambient" })
  @Type(
    () =>
      CreateNetworkSensorAlertsProfileRequestBodyConditionsThresholdNoiseAmbient
  )
  ambient: CreateNetworkSensorAlertsProfileRequestBodyConditionsThresholdNoiseAmbient;
}

/**
 * Alerting threshold as a qualitative PM2.5 level.
 */
export enum CreateNetworkSensorAlertsProfileRequestBodyConditionsThresholdPm25QualityEnum {
  Fair = "fair",
  Good = "good",
  Inadequate = "inadequate",
  Poor = "poor",
}

/**
 * PM2.5 concentration threshold. One of 'concentration' or 'quality' must be provided.
 */
export class CreateNetworkSensorAlertsProfileRequestBodyConditionsThresholdPm25 extends SpeakeasyBase {
  /**
   * Alerting threshold as PM2.5 parts per million.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "concentration" })
  concentration?: number;

  /**
   * Alerting threshold as a qualitative PM2.5 level.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "quality" })
  quality?: CreateNetworkSensorAlertsProfileRequestBodyConditionsThresholdPm25QualityEnum;
}

/**
 * Alerting threshold as a qualitative temperature level.
 */
export enum CreateNetworkSensorAlertsProfileRequestBodyConditionsThresholdTemperatureQualityEnum {
  Fair = "fair",
  Good = "good",
  Inadequate = "inadequate",
  Poor = "poor",
}

/**
 * Temperature threshold. One of 'celsius', 'fahrenheit', or 'quality' must be provided.
 */
export class CreateNetworkSensorAlertsProfileRequestBodyConditionsThresholdTemperature extends SpeakeasyBase {
  /**
   * Alerting threshold in degrees Celsius.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "celsius" })
  celsius?: number;

  /**
   * Alerting threshold in degrees Fahrenheit.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "fahrenheit" })
  fahrenheit?: number;

  /**
   * Alerting threshold as a qualitative temperature level.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "quality" })
  quality?: CreateNetworkSensorAlertsProfileRequestBodyConditionsThresholdTemperatureQualityEnum;
}

/**
 * Alerting threshold as a qualitative TVOC level.
 */
export enum CreateNetworkSensorAlertsProfileRequestBodyConditionsThresholdTvocQualityEnum {
  Fair = "fair",
  Good = "good",
  Inadequate = "inadequate",
  Poor = "poor",
}

/**
 * TVOC concentration threshold. One of 'concentration' or 'quality' must be provided.
 */
export class CreateNetworkSensorAlertsProfileRequestBodyConditionsThresholdTvoc extends SpeakeasyBase {
  /**
   * Alerting threshold as TVOC micrograms per cubic meter.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "concentration" })
  concentration?: number;

  /**
   * Alerting threshold as a qualitative TVOC level.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "quality" })
  quality?: CreateNetworkSensorAlertsProfileRequestBodyConditionsThresholdTvocQualityEnum;
}

/**
 * Water detection threshold. 'present' must be provided and set to true.
 */
export class CreateNetworkSensorAlertsProfileRequestBodyConditionsThresholdWater extends SpeakeasyBase {
  /**
   * Alerting threshold for a water detection event. Must be set to true.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "present" })
  present: boolean;
}

/**
 * Threshold for sensor readings that will cause an alert to be sent. This object should contain a single property key matching the condition's 'metric' value.
 */
export class CreateNetworkSensorAlertsProfileRequestBodyConditionsThreshold extends SpeakeasyBase {
  /**
   * Door open threshold. 'open' must be provided and set to true.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "door" })
  @Type(
    () => CreateNetworkSensorAlertsProfileRequestBodyConditionsThresholdDoor
  )
  door?: CreateNetworkSensorAlertsProfileRequestBodyConditionsThresholdDoor;

  /**
   * Humidity threshold. One of 'relativePercentage' or 'quality' must be provided.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "humidity" })
  @Type(
    () => CreateNetworkSensorAlertsProfileRequestBodyConditionsThresholdHumidity
  )
  humidity?: CreateNetworkSensorAlertsProfileRequestBodyConditionsThresholdHumidity;

  /**
   * Indoor air quality score threshold. One of 'score' or 'quality' must be provided.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "indoorAirQuality" })
  @Type(
    () =>
      CreateNetworkSensorAlertsProfileRequestBodyConditionsThresholdIndoorAirQuality
  )
  indoorAirQuality?: CreateNetworkSensorAlertsProfileRequestBodyConditionsThresholdIndoorAirQuality;

  /**
   * Noise threshold. 'ambient' must be provided.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "noise" })
  @Type(
    () => CreateNetworkSensorAlertsProfileRequestBodyConditionsThresholdNoise
  )
  noise?: CreateNetworkSensorAlertsProfileRequestBodyConditionsThresholdNoise;

  /**
   * PM2.5 concentration threshold. One of 'concentration' or 'quality' must be provided.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "pm25" })
  @Type(
    () => CreateNetworkSensorAlertsProfileRequestBodyConditionsThresholdPm25
  )
  pm25?: CreateNetworkSensorAlertsProfileRequestBodyConditionsThresholdPm25;

  /**
   * Temperature threshold. One of 'celsius', 'fahrenheit', or 'quality' must be provided.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "temperature" })
  @Type(
    () =>
      CreateNetworkSensorAlertsProfileRequestBodyConditionsThresholdTemperature
  )
  temperature?: CreateNetworkSensorAlertsProfileRequestBodyConditionsThresholdTemperature;

  /**
   * TVOC concentration threshold. One of 'concentration' or 'quality' must be provided.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "tvoc" })
  @Type(
    () => CreateNetworkSensorAlertsProfileRequestBodyConditionsThresholdTvoc
  )
  tvoc?: CreateNetworkSensorAlertsProfileRequestBodyConditionsThresholdTvoc;

  /**
   * Water detection threshold. 'present' must be provided and set to true.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "water" })
  @Type(
    () => CreateNetworkSensorAlertsProfileRequestBodyConditionsThresholdWater
  )
  water?: CreateNetworkSensorAlertsProfileRequestBodyConditionsThresholdWater;
}

export class CreateNetworkSensorAlertsProfileRequestBodyConditions extends SpeakeasyBase {
  /**
   * If 'above', an alert will be sent when a sensor reads above the threshold. If 'below', an alert will be sent when a sensor reads below the threshold. Only applicable for temperature and humidity thresholds.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "direction" })
  direction?: CreateNetworkSensorAlertsProfileRequestBodyConditionsDirectionEnum;

  /**
   * Length of time in seconds that the triggering state must persist before an alert is sent. Available options are 0 seconds, 1 minute, 2 minutes, 3 minutes, 4 minutes, 5 minutes, 10 minutes, 15 minutes, 30 minutes, and 1 hour. Default is 0.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "duration" })
  duration?: CreateNetworkSensorAlertsProfileRequestBodyConditionsDurationEnum;

  /**
   * The type of sensor metric that will be monitored for changes. Available metrics are door, humidity, indoorAirQuality, noise, pm25, temperature, tvoc, and water.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "metric" })
  metric: string;

  /**
   * Threshold for sensor readings that will cause an alert to be sent. This object should contain a single property key matching the condition's 'metric' value.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "threshold" })
  @Type(() => CreateNetworkSensorAlertsProfileRequestBodyConditionsThreshold)
  threshold: CreateNetworkSensorAlertsProfileRequestBodyConditionsThreshold;
}

/**
 * List of recipients that will recieve the alert.
 */
export class CreateNetworkSensorAlertsProfileRequestBodyRecipients extends SpeakeasyBase {
  /**
   * A list of emails that will receive information about the alert.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "emails" })
  emails?: string[];

  /**
   * A list of webhook endpoint IDs that will receive information about the alert.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "httpServerIds" })
  httpServerIds?: string[];

  /**
   * A list of SMS numbers that will receive information about the alert.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "smsNumbers" })
  smsNumbers?: string[];
}

/**
 * The sensor schedule to use with the alert profile.
 */
export class CreateNetworkSensorAlertsProfileRequestBodySchedule extends SpeakeasyBase {
  /**
   * ID of the sensor schedule to use with the alert profile. If not defined, the alert profile will be active at all times.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id?: string;
}

export class CreateNetworkSensorAlertsProfileRequestBody extends SpeakeasyBase {
  /**
   * List of conditions that will cause the profile to send an alert.
   */
  @SpeakeasyMetadata({
    elemType: CreateNetworkSensorAlertsProfileRequestBodyConditions,
  })
  @Expose({ name: "conditions" })
  @Type(() => CreateNetworkSensorAlertsProfileRequestBodyConditions)
  conditions: CreateNetworkSensorAlertsProfileRequestBodyConditions[];

  /**
   * Name of the sensor alert profile.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name: string;

  /**
   * List of recipients that will recieve the alert.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "recipients" })
  @Type(() => CreateNetworkSensorAlertsProfileRequestBodyRecipients)
  recipients?: CreateNetworkSensorAlertsProfileRequestBodyRecipients;

  /**
   * The sensor schedule to use with the alert profile.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "schedule" })
  @Type(() => CreateNetworkSensorAlertsProfileRequestBodySchedule)
  schedule?: CreateNetworkSensorAlertsProfileRequestBodySchedule;

  /**
   * List of device serials assigned to this sensor alert profile.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "serials" })
  serials?: string[];
}

export class CreateNetworkSensorAlertsProfileRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  requestBody: CreateNetworkSensorAlertsProfileRequestBody;

  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=networkId",
  })
  networkId: string;
}

/**
 * If 'above', an alert will be sent when a sensor reads above the threshold. If 'below', an alert will be sent when a sensor reads below the threshold. Only applicable for temperature and humidity thresholds.
 */
export enum CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsDirectionEnum {
  Above = "above",
  Below = "below",
}

/**
 * Length of time in seconds that the triggering state must persist before an alert is sent. Available options are 0 seconds, 1 minute, 2 minutes, 3 minutes, 4 minutes, 5 minutes, 10 minutes, 15 minutes, 30 minutes, and 1 hour. Default is 0.
 */
export enum CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsDurationEnum {
  Zero = "0",
  Sixty = "60",
  OneHundredAndTwenty = "120",
  OneHundredAndEighty = "180",
  TwoHundredAndForty = "240",
  ThreeHundred = "300",
  SixHundred = "600",
  NineHundred = "900",
  OneThousandEightHundred = "1800",
  ThreeThousandSixHundred = "3600",
}

/**
 * Door open threshold. 'open' must be provided and set to true.
 */
export class CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdDoor extends SpeakeasyBase {
  /**
   * Alerting threshold for a door open event. Must be set to true.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "open" })
  open: boolean;
}

/**
 * Alerting threshold as a qualitative humidity level.
 */
export enum CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdHumidityQualityEnum {
  Fair = "fair",
  Good = "good",
  Inadequate = "inadequate",
  Poor = "poor",
}

/**
 * Humidity threshold. One of 'relativePercentage' or 'quality' must be provided.
 */
export class CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdHumidity extends SpeakeasyBase {
  /**
   * Alerting threshold as a qualitative humidity level.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "quality" })
  quality?: CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdHumidityQualityEnum;

  /**
   * Alerting threshold in %RH.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "relativePercentage" })
  relativePercentage?: number;
}

/**
 * Alerting threshold as a qualitative indoor air quality level.
 */
export enum CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdIndoorAirQualityQualityEnum {
  Fair = "fair",
  Good = "good",
  Inadequate = "inadequate",
  Poor = "poor",
}

/**
 * Indoor air quality score threshold. One of 'score' or 'quality' must be provided.
 */
export class CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdIndoorAirQuality extends SpeakeasyBase {
  /**
   * Alerting threshold as a qualitative indoor air quality level.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "quality" })
  quality?: CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdIndoorAirQualityQualityEnum;

  /**
   * Alerting threshold as indoor air quality score.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "score" })
  score?: number;
}

/**
 * Alerting threshold as a qualitative ambient noise level.
 */
export enum CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdNoiseAmbientQualityEnum {
  Fair = "fair",
  Good = "good",
  Inadequate = "inadequate",
  Poor = "poor",
}

/**
 * Ambient noise threshold. One of 'level' or 'quality' must be provided.
 */
export class CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdNoiseAmbient extends SpeakeasyBase {
  /**
   * Alerting threshold as adjusted decibels.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "level" })
  level?: number;

  /**
   * Alerting threshold as a qualitative ambient noise level.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "quality" })
  quality?: CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdNoiseAmbientQualityEnum;
}

/**
 * Noise threshold. 'ambient' must be provided.
 */
export class CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdNoise extends SpeakeasyBase {
  /**
   * Ambient noise threshold. One of 'level' or 'quality' must be provided.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "ambient" })
  @Type(
    () =>
      CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdNoiseAmbient
  )
  ambient: CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdNoiseAmbient;
}

/**
 * Alerting threshold as a qualitative PM2.5 level.
 */
export enum CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdPm25QualityEnum {
  Fair = "fair",
  Good = "good",
  Inadequate = "inadequate",
  Poor = "poor",
}

/**
 * PM2.5 concentration threshold. One of 'concentration' or 'quality' must be provided.
 */
export class CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdPm25 extends SpeakeasyBase {
  /**
   * Alerting threshold as PM2.5 parts per million.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "concentration" })
  concentration?: number;

  /**
   * Alerting threshold as a qualitative PM2.5 level.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "quality" })
  quality?: CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdPm25QualityEnum;
}

/**
 * Alerting threshold as a qualitative temperature level.
 */
export enum CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdTemperatureQualityEnum {
  Fair = "fair",
  Good = "good",
  Inadequate = "inadequate",
  Poor = "poor",
}

/**
 * Temperature threshold. One of 'celsius', 'fahrenheit', or 'quality' must be provided.
 */
export class CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdTemperature extends SpeakeasyBase {
  /**
   * Alerting threshold in degrees Celsius.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "celsius" })
  celsius?: number;

  /**
   * Alerting threshold in degrees Fahrenheit.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "fahrenheit" })
  fahrenheit?: number;

  /**
   * Alerting threshold as a qualitative temperature level.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "quality" })
  quality?: CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdTemperatureQualityEnum;
}

/**
 * Alerting threshold as a qualitative TVOC level.
 */
export enum CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdTvocQualityEnum {
  Fair = "fair",
  Good = "good",
  Inadequate = "inadequate",
  Poor = "poor",
}

/**
 * TVOC concentration threshold. One of 'concentration' or 'quality' must be provided.
 */
export class CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdTvoc extends SpeakeasyBase {
  /**
   * Alerting threshold as TVOC micrograms per cubic meter.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "concentration" })
  concentration?: number;

  /**
   * Alerting threshold as a qualitative TVOC level.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "quality" })
  quality?: CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdTvocQualityEnum;
}

/**
 * Water detection threshold. 'present' must be provided and set to true.
 */
export class CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdWater extends SpeakeasyBase {
  /**
   * Alerting threshold for a water detection event. Must be set to true.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "present" })
  present: boolean;
}

/**
 * Threshold for sensor readings that will cause an alert to be sent. This object should contain a single property key matching the condition's 'metric' value.
 */
export class CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThreshold extends SpeakeasyBase {
  /**
   * Door open threshold. 'open' must be provided and set to true.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "door" })
  @Type(
    () =>
      CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdDoor
  )
  door?: CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdDoor;

  /**
   * Humidity threshold. One of 'relativePercentage' or 'quality' must be provided.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "humidity" })
  @Type(
    () =>
      CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdHumidity
  )
  humidity?: CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdHumidity;

  /**
   * Indoor air quality score threshold. One of 'score' or 'quality' must be provided.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "indoorAirQuality" })
  @Type(
    () =>
      CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdIndoorAirQuality
  )
  indoorAirQuality?: CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdIndoorAirQuality;

  /**
   * Noise threshold. 'ambient' must be provided.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "noise" })
  @Type(
    () =>
      CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdNoise
  )
  noise?: CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdNoise;

  /**
   * PM2.5 concentration threshold. One of 'concentration' or 'quality' must be provided.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "pm25" })
  @Type(
    () =>
      CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdPm25
  )
  pm25?: CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdPm25;

  /**
   * Temperature threshold. One of 'celsius', 'fahrenheit', or 'quality' must be provided.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "temperature" })
  @Type(
    () =>
      CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdTemperature
  )
  temperature?: CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdTemperature;

  /**
   * TVOC concentration threshold. One of 'concentration' or 'quality' must be provided.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "tvoc" })
  @Type(
    () =>
      CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdTvoc
  )
  tvoc?: CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdTvoc;

  /**
   * Water detection threshold. 'present' must be provided and set to true.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "water" })
  @Type(
    () =>
      CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdWater
  )
  water?: CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThresholdWater;
}

export class CreateNetworkSensorAlertsProfile200ApplicationJSONConditions extends SpeakeasyBase {
  /**
   * If 'above', an alert will be sent when a sensor reads above the threshold. If 'below', an alert will be sent when a sensor reads below the threshold. Only applicable for temperature and humidity thresholds.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "direction" })
  direction?: CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsDirectionEnum;

  /**
   * Length of time in seconds that the triggering state must persist before an alert is sent. Available options are 0 seconds, 1 minute, 2 minutes, 3 minutes, 4 minutes, 5 minutes, 10 minutes, 15 minutes, 30 minutes, and 1 hour. Default is 0.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "duration" })
  duration?: CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsDurationEnum;

  /**
   * The type of sensor metric that will be monitored for changes. Available metrics are door, humidity, indoorAirQuality, noise, pm25, temperature, tvoc, and water.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "metric" })
  metric: string;

  /**
   * Threshold for sensor readings that will cause an alert to be sent. This object should contain a single property key matching the condition's 'metric' value.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "threshold" })
  @Type(
    () => CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThreshold
  )
  threshold: CreateNetworkSensorAlertsProfile200ApplicationJSONConditionsThreshold;
}

/**
 * List of recipients that will recieve the alert.
 */
export class CreateNetworkSensorAlertsProfile200ApplicationJSONRecipients extends SpeakeasyBase {
  /**
   * A list of emails that will receive information about the alert.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "emails" })
  emails?: string[];

  /**
   * A list of webhook endpoint IDs that will receive information about the alert.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "httpServerIds" })
  httpServerIds?: string[];

  /**
   * A list of SMS numbers that will receive information about the alert.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "smsNumbers" })
  smsNumbers?: string[];
}

/**
 * The sensor schedule to use with the alert profile.
 */
export class CreateNetworkSensorAlertsProfile200ApplicationJSONSchedule extends SpeakeasyBase {
  /**
   * ID of the sensor schedule to use with the alert profile. If not defined, the alert profile will be active at all times.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id?: string;

  /**
   * Name of the sensor schedule to use with the alert profile.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name?: string;
}

/**
 * Successful operation
 */
export class CreateNetworkSensorAlertsProfile200ApplicationJSON extends SpeakeasyBase {
  /**
   * List of conditions that will cause the profile to send an alert.
   */
  @SpeakeasyMetadata({
    elemType: CreateNetworkSensorAlertsProfile200ApplicationJSONConditions,
  })
  @Expose({ name: "conditions" })
  @Type(() => CreateNetworkSensorAlertsProfile200ApplicationJSONConditions)
  conditions: CreateNetworkSensorAlertsProfile200ApplicationJSONConditions[];

  /**
   * Name of the sensor alert profile.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name?: string;

  /**
   * ID of the sensor alert profile.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "profileId" })
  profileId?: string;

  /**
   * List of recipients that will recieve the alert.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "recipients" })
  @Type(() => CreateNetworkSensorAlertsProfile200ApplicationJSONRecipients)
  recipients?: CreateNetworkSensorAlertsProfile200ApplicationJSONRecipients;

  /**
   * The sensor schedule to use with the alert profile.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "schedule" })
  @Type(() => CreateNetworkSensorAlertsProfile200ApplicationJSONSchedule)
  schedule?: CreateNetworkSensorAlertsProfile200ApplicationJSONSchedule;

  /**
   * List of device serials assigned to this sensor alert profile.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "serials" })
  serials?: string[];
}

export class CreateNetworkSensorAlertsProfileResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * Successful operation
   */
  @SpeakeasyMetadata()
  createNetworkSensorAlertsProfile200ApplicationJSONObject?: CreateNetworkSensorAlertsProfile200ApplicationJSON;
}
