/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

export class DeleteConfigRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=config",
  })
  config: string;

  @SpeakeasyMetadata({ data: "pathParam, style=simple;explode=false;name=key" })
  key: string;

  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=false;name=user_token",
  })
  userToken?: string;
}

export enum DeleteConfigConfigDeleteResponseCodeEnum {
  TwoThousand = "2000",
}

export enum DeleteConfigConfigDeleteResponseMessageEnum {
  Success = "Success",
}

export class DeleteConfigConfigDeleteResponseResult extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "deleted" })
  deleted: number;
}

/**
 * Success
 */
export class DeleteConfigConfigDeleteResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "code" })
  code: DeleteConfigConfigDeleteResponseCodeEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "message" })
  message: DeleteConfigConfigDeleteResponseMessageEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "result" })
  @Type(() => DeleteConfigConfigDeleteResponseResult)
  result: DeleteConfigConfigDeleteResponseResult;
}

export class DeleteConfigResponse extends SpeakeasyBase {
  /**
   * Bad Request
   */
  @SpeakeasyMetadata()
  badRequestResponse?: shared.BadRequestResponse;

  /**
   * Success
   */
  @SpeakeasyMetadata()
  configDeleteResponse?: DeleteConfigConfigDeleteResponse;

  @SpeakeasyMetadata()
  contentType: string;

  /**
   * Not Found
   */
  @SpeakeasyMetadata()
  notFoundResponse?: shared.NotFoundResponse;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * Unauthorized Request
   */
  @SpeakeasyMetadata()
  unauthorizedResponse?: shared.UnauthorizedResponse;
}
