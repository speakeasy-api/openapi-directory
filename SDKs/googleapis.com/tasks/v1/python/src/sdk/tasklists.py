"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Tasklists:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def tasks_tasklists_delete(self, request: operations.TasksTasklistsDeleteRequest, security: operations.TasksTasklistsDeleteSecurity) -> operations.TasksTasklistsDeleteResponse:
        r"""Deletes the authenticated user's specified task list."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.TasksTasklistsDeleteRequest, base_url, '/tasks/v1/users/@me/lists/{tasklist}', request)
        
        query_params = utils.get_query_params(operations.TasksTasklistsDeleteRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.TasksTasklistsDeleteResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def tasks_tasklists_get(self, request: operations.TasksTasklistsGetRequest, security: operations.TasksTasklistsGetSecurity) -> operations.TasksTasklistsGetResponse:
        r"""Returns the authenticated user's specified task list."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.TasksTasklistsGetRequest, base_url, '/tasks/v1/users/@me/lists/{tasklist}', request)
        
        query_params = utils.get_query_params(operations.TasksTasklistsGetRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.TasksTasklistsGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.TaskList])
                res.task_list = out

        return res

    def tasks_tasklists_insert(self, request: operations.TasksTasklistsInsertRequest, security: operations.TasksTasklistsInsertSecurity) -> operations.TasksTasklistsInsertResponse:
        r"""Creates a new task list and adds it to the authenticated user's task lists."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/tasks/v1/users/@me/lists'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "task_list", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.TasksTasklistsInsertRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.TasksTasklistsInsertResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.TaskList])
                res.task_list = out

        return res

    def tasks_tasklists_list(self, request: operations.TasksTasklistsListRequest, security: operations.TasksTasklistsListSecurity) -> operations.TasksTasklistsListResponse:
        r"""Returns all the authenticated user's task lists."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/tasks/v1/users/@me/lists'
        
        query_params = utils.get_query_params(operations.TasksTasklistsListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.TasksTasklistsListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.TaskLists])
                res.task_lists = out

        return res

    def tasks_tasklists_patch(self, request: operations.TasksTasklistsPatchRequest, security: operations.TasksTasklistsPatchSecurity) -> operations.TasksTasklistsPatchResponse:
        r"""Updates the authenticated user's specified task list. This method supports patch semantics."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.TasksTasklistsPatchRequest, base_url, '/tasks/v1/users/@me/lists/{tasklist}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "task_list", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.TasksTasklistsPatchRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PATCH', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.TasksTasklistsPatchResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.TaskList])
                res.task_list = out

        return res

    def tasks_tasklists_update(self, request: operations.TasksTasklistsUpdateRequest, security: operations.TasksTasklistsUpdateSecurity) -> operations.TasksTasklistsUpdateResponse:
        r"""Updates the authenticated user's specified task list."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.TasksTasklistsUpdateRequest, base_url, '/tasks/v1/users/@me/lists/{tasklist}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "task_list", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.TasksTasklistsUpdateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PUT', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.TasksTasklistsUpdateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.TaskList])
                res.task_list = out

        return res

    