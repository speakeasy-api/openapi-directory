"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from ..shared import beezup_common_usererrormessage as shared_beezup_common_usererrormessage
from ..shared import importationreportinglinks as shared_importationreportinglinks
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from marshmallow import fields
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ImportationReporting:
    r"""The catalog importation reporting"""
    
    begin_utc_date: datetime = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('beginUtcDate'), 'encoder': utils.datetimeisoformat(False), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso') }})
    r"""Indicate the begin UTC date of this importation."""  
    execution_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('executionId') }})
    r"""The execution identifier of the catalog importation"""  
    last_update_utc_date: datetime = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lastUpdateUtcDate'), 'encoder': utils.datetimeisoformat(False), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso') }})
    r"""Indicate the last update UTC date of the reporting."""  
    steps: dict[str, bool] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('steps') }})
    r"""Indicate the steps that have been passed during the importation process"""  
    auto_imported: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('autoImported'), 'exclude': lambda f: f is None }})
    r"""Indicate if this importation is an auto import or not."""  
    end_utc_date: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('endUtcDate'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""Indicate the end UTC date of this importation."""  
    errors: Optional[list[shared_beezup_common_usererrormessage.BeezUPCommonUserErrorMessage]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('errors'), 'exclude': lambda f: f is None }})
    r"""Indicate the error message list related to this importation."""  
    input_configuration_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('inputConfigurationUrl'), 'exclude': lambda f: f is None }})
    r"""Indicate the input url of this importation."""  
    links: Optional[shared_importationreportinglinks.ImportationReportingLinks] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('links'), 'exclude': lambda f: f is None }})  
    step_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('stepName'), 'exclude': lambda f: f is None }})
    r"""The last step name of the importation process"""  
    success: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('success'), 'exclude': lambda f: f is None }})
    r"""Indicate if the importation succeed or not."""  
    total_product_count: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('totalProductCount'), 'exclude': lambda f: f is None }})
    r"""Indicate the total product count detected in the catalog during the importation."""  
    total_product_error_count: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('totalProductErrorCount'), 'exclude': lambda f: f is None }})
    r"""Indicate the total product count in error detected in the catalog during the importation."""  
    total_product_success_count: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('totalProductSuccessCount'), 'exclude': lambda f: f is None }})
    r"""Indicate the total product count in success in the catalog during the importation."""  
    user_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('userId'), 'exclude': lambda f: f is None }})
    r"""The user identifier"""  
    