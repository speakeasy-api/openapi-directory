<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Shared;


/**
 * PaymentInitiationBulkElementJson - Generic body for a bulk payment initation entry.
 * 
 * 
 * The bulk entry type is a type which follows the JSON formats for the supported products for single payments
 * excluding the data elements (if supported):
 *   * debtorAccount
 *   * requestedExecutionDate,
 *   * requestedExecutionTime.
 * These data elements may not be contained in any bulk entry.
 * 
 * This data object can be used to represent valid bulk payment initiations entry for the following JSON based payment product,
 * which where defined in the Implementation Guidelines:
 * 
 *   * domestic-swiss-credit-transfers-isr
 *   * domestic-swiss-credit-transfers
 *   * domestic-swiss-credit-transfers-qr
 *   * domestic-swiss-foreign-credit-transfers
 *   * swiss-sepa-credit-transfers
 *   * swiss-cross-border-credit-transfers
 * 
 * For the convenience of the implementer additional which are already predefinded in the Implementation Guidelines
 * are included (but commented in source code), such that an ASPSP may add them easily.
 * 
 * Take care: Since the format is intended to fit for all payment products
 * there are additional conditions which are NOT covered by this specification.
 * Please check the SIX Swiss Payment Standards implementation guidelines for details.
 * 
 * 
 * The following data element are depending on the actual payment product available (in source code):
 * 
 * <table style="width:100%">
 * <tr><td></td><td>Payment Type 1: ISR</td><td>Payment Type 3: IBAN/postal account and IID/BIC</td><td>Payment Type 3: QR-bill</td><td>Payment Type 4: Foreign currency</td><td>Payment Type 5: Foreign SEPA</td><td>Payment Type 6: Foreign</td></tr>
 * <tr><td>CH Domestic Data Element</td><td>domestic-swiss-credit-transfers-isr</td><td>domestic-swiss-credit-transfers</td><td>domestic-swiss-credit-transfers-qr</td><td>domestic-swiss-foreign-credit-transfers</td><td>swiss-sepa-credit-transfers</td><td>swiss-cross-border-credit-transfers</td></tr>
 * <tr><td>endToEndIdentification</td><td>mandatory</td><td>mandatory</td><td>mandatory</td><td>mandatory</td><td>mandatory</td><td>mandatory</td></tr>
 * <tr><td>instructionIdentification</td><td>n.a.</td><td>n.a.</td><td>n.a.</td><td>n.a.</td><td>n.a.</td><td>n.a.</td></tr>
 * <tr><td>debtorName</td><td>mandatory</td><td>mandatory</td><td>mandatory</td><td>mandatory</td><td>mandatory</td><td>mandatory</td></tr>
 * <tr><td>debtorId</td><td>optional 3)</td><td>optional 3)</td><td>optional 3)</td><td>optional 3)</td><td>optional 3)</td><td>optional 3)</td></tr>
 * <tr><td>ultimateDebtor</td><td>optional</td><td>optional</td><td>optional</td><td>optional</td><td>optional</td><td>optional</td></tr>
 * <tr><td>instructedAmount (incl. currency)</td><td>mandatory</td><td>dependent 1)</td><td>dependent 1)</td><td>dependent 1)</td><td>dependent 1)</td><td>dependent 1)</td></tr>
 * <tr><td>equivalentAmount</td><td>n.a.</td><td>dependent 1)</td><td>dependent 1)</td><td>dependent 1)</td><td>dependent 1)</td><td>dependent 1)</td></tr>
 * <tr><td>transactionCurrency</td><td>n.a.</td><td>dependent 1)</td><td>dependent 1)</td><td>dependent 1)</td><td>dependent 1)</td><td>dependent 1)</td></tr>
 * <tr><td>exchangeRateInformation</td><td>n.a.</td><td>optional 2)</td><td>optional 2)</td><td>optional 2)</td><td>optional 2)</td><td>optional 2)</td></tr>
 * <tr><td>creditorAccount</td><td>mandatory</td><td>mandatory</td><td>mandatory 8)</td><td>mandatory</td><td>mandatory</td><td>mandatory</td></tr>
 * <tr><td>creditorAgent</td><td>n.a.</td><td>dependent 4)</td><td>dependent 4)</td><td>dependent 4)</td><td>dependent 4)</td><td>dependent 4)</td></tr>
 * <tr><td>creditorAgentName</td><td>n.a.</td><td>n.a.</td><td>n.a.</td><td>dependent 5)</td><td>n.a.</td><td>dependent 5)</td></tr>
 * <tr><td>creditorName</td><td>mandatory</td><td>mandatory</td><td>mandatory</td><td>mandatory</td><td>mandatory</td><td>mandatory</td></tr>
 * <tr><td>creditorId</td><td>n.a.</td><td>optional</td><td>optional</td><td>optional</td><td>optional</td><td>optional</td></tr>
 * <tr><td>creditorAddress</td><td>optional</td><td>optional</td><td>optional</td><td>optional</td><td>optional</td><td>optional</td></tr>
 * <tr><td>creditorNameAndAddress</td><td>n.a.</td><td>dependent</td><td>dependent</td><td>dependent</td><td>dependent</td><td>dependent</td></tr>
 * <tr><td>ultimateCreditor</td><td>n.a.</td><td>optional</td><td>n.a. (for future use)</td><td>optional</td><td>optional</td><td>optional</td></tr>
 * <tr><td>chargeBearer</td><td>n.a.</td><td>optional</td><td>optional</td><td>optional</td><td>mandatory</td><td>optional</td></tr>
 * <tr><td>purposeCode</td><td>optional</td><td>optional</td><td>optional</td><td>optional</td><td>optional</td><td>optional</td></tr>
 * <tr><td>serviceLevel</td><td>n.a.</td><td>optional</td><td>optional</td><td>optional</td><td>mandatory</td><td>optional</td></tr>
 * <tr><td>remittanceInformationUnstructured</td><td>n.a.</td><td>optional</td><td>n.a.</td><td>optional</td><td>optional</td><td>optional</td></tr>
 * <tr><td>remittanceInformationUnstructuredArray</td><td>n.a.</td><td>n.a.</td><td>n.a.</td><td>n.a.</td><td>n.a.</td><td>n.a.</td></tr>
 * <tr><td>remittanceInformationStructured</td><td>mandatory</td><td>optional</td><td>mandatory 6)</td><td>optional</td><td>optional</td><td>optional</td></tr>
 * <tr><td>remittanceInformationStructuredArray</td><td>n.a.</td><td>n.a.</td><td>n.a.</td><td>n.a.</td><td>n.a.</td><td>n.a.</td></tr>
 * <tr><td>intermediaryAgent</td><td>n.a.</td><td>n.a.</td><td>n.a.</td><td>optional 2)</td><td>n.a.</td><td>optional 2)</td></tr>
 * </table>
 * 
 * Footnotes from the table:
 * 1) This element may only be used by agreement with the instructed financial institution.
 * 2) The element may only be used in consultation with the financial institution commissioned.
 * 3) The element is currently ignored by financial institutions.
 * 4) Dependence on creditorAccount, see SIX Swiss Payments Standards implementation guidelines.
 * 5) Type 4(V3), 6(V2, V3): Must be present. Type 4(V2): May be present. Other species: May not be present.
 * 6) QR-reference, creditor reference or IPI reference
 * 7) currencyOfTransfer is a subfield of equivalentAmount and may only be used if equivalentAmount is used instead of instructedAmount.
 * 8) QR-IBAN (CH/LI) must be present.
 * 
 * IMPORTANT: In this API definition the following holds:
 *   *  All data elements mentioned above are defined, but some of them are commented,
 *     i.e. they are only visible in the source code and can be used by uncommenting them.
 *   * Data elements which are mandatory in the table above for all payment products
 *     are set to be mandatory in this specification.
 *   * Data elements which are indicated in the table above as n.a. for all payment products are commented in the source code.
 *   * Data elements which are indicated to be option, conditional or mandatory for at least one payment product
 *     in the table above are set to be optional in the s specification except the case where all are definde to be mandatory.
 *   * Data element which are inticated to be n.a. can be used by the ASPS if needed.
 *     In this case uncomment tthe the relatetd lines in the source code.
 *   * If one uses this data types for some payment products he has to ensure that the used data type is
 *     valid according to the underlying payment product, e.g. by some appropriate validations.
 * 
 * 
 * @package OpenAPI\OpenAPI\Models\Shared
 * @access public
 */
class PaymentInitiationBulkElementJson
{
    /**
     * Charge Bearer. ChargeBearerType1Code from ISO20022.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\ChargeBearerEnum $chargeBearer
     */
	#[\JMS\Serializer\Annotation\SerializedName('chargeBearer')]
    #[\JMS\Serializer\Annotation\Type('enum<OpenAPI\OpenAPI\Models\Shared\ChargeBearerEnum>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?ChargeBearerEnum $chargeBearer = null;
    
    /**
     * Reference to an account by either
     * 
     *   * IBAN, of a payment accounts, or
     *   * otherAccountIdentification, for payment accounts if there is no IBAN
     * adapted from ISO pain.001.001.03.ch.02 CashAccount16-CH_IdTpCcy
     * 
     * 
     * @var \OpenAPI\OpenAPI\Models\Shared\AccountReference16CH $creditorAccount
     */
	#[\JMS\Serializer\Annotation\SerializedName('creditorAccount')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\AccountReference16CH')]
    public AccountReference16CH $creditorAccount;
    
	#[\JMS\Serializer\Annotation\SerializedName('creditorAddress')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\Address')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?Address $creditorAddress = null;
    
    /**
     * Reference to an creditorAgent by either
     * 
     *   * BIC, of the creditor bank, or
     *   * IID, of the creditor bank, or
     *   * IID and optional name and address of the creditor bank or
     *   * Name and address of the creditor bank
     * adapted from ISO pain.001.001.03.ch.02 FinancialInstitutionIdentification7-CH
     * 
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\CreditorAgent7CH $creditorAgent
     */
	#[\JMS\Serializer\Annotation\SerializedName('creditorAgent')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\CreditorAgent7CH')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?CreditorAgent7CH $creditorAgent = null;
    
    /**
     * Creditor agent name.
     * 
     * @var ?string $creditorAgentName
     */
	#[\JMS\Serializer\Annotation\SerializedName('creditorAgentName')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $creditorAgentName = null;
    
    /**
     * Identification of Creditors, e.g. a SEPA Creditor ID.
     * 
     * @var ?string $creditorId
     */
	#[\JMS\Serializer\Annotation\SerializedName('creditorId')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $creditorId = null;
    
    /**
     * Creditor name.
     * 
     * @var string $creditorName
     */
	#[\JMS\Serializer\Annotation\SerializedName('creditorName')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $creditorName;
    
    /**
     * Creditor Name and Address in a free text field.
     * 
     * @var ?string $creditorNameAndAddress
     */
	#[\JMS\Serializer\Annotation\SerializedName('creditorNameAndAddress')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $creditorNameAndAddress = null;
    
    /**
     * Debtor Id.
     * 
     * @var ?string $debtorId
     */
	#[\JMS\Serializer\Annotation\SerializedName('debtorId')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $debtorId = null;
    
    /**
     * Debtor name.
     * 
     * @var string $debtorName
     */
	#[\JMS\Serializer\Annotation\SerializedName('debtorName')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $debtorName;
    
	#[\JMS\Serializer\Annotation\SerializedName('endToEndIdentification')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $endToEndIdentification;
    
	#[\JMS\Serializer\Annotation\SerializedName('equivalentAmount')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\Amount')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?Amount $equivalentAmount = null;
    
    /**
     * as in ISO pain.001.001.03.ch.02 ExchangeRateInformation1
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\ExchangeRateInformation1 $exchangeRateInformation
     */
	#[\JMS\Serializer\Annotation\SerializedName('exchangeRateInformation')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\ExchangeRateInformation1')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?ExchangeRateInformation1 $exchangeRateInformation = null;
    
	#[\JMS\Serializer\Annotation\SerializedName('instructedAmount')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\Amount')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?Amount $instructedAmount = null;
    
    /**
     * BICFI
     * 
     * 
     * 
     * @var ?string $intermediaryAgent
     */
	#[\JMS\Serializer\Annotation\SerializedName('intermediaryAgent')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $intermediaryAgent = null;
    
    /**
     * ExternalPurpose1Code from ISO 20022.
     * 
     * 
     * Values from ISO 20022 External Code List ExternalCodeSets_1Q2018 June 2018.
     * 
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\PurposeCodeEnum $purposeCode
     */
	#[\JMS\Serializer\Annotation\SerializedName('purposeCode')]
    #[\JMS\Serializer\Annotation\Type('enum<OpenAPI\OpenAPI\Models\Shared\PurposeCodeEnum>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?PurposeCodeEnum $purposeCode = null;
    
    /**
     * Structured remittance information.
     * 
     * 
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\RemittanceInformationStructured $remittanceInformationStructured
     */
	#[\JMS\Serializer\Annotation\SerializedName('remittanceInformationStructured')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\RemittanceInformationStructured')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?RemittanceInformationStructured $remittanceInformationStructured = null;
    
    /**
     * Unstructured remittance information.
     * 
     * 
     * 
     * @var ?string $remittanceInformationUnstructured
     */
	#[\JMS\Serializer\Annotation\SerializedName('remittanceInformationUnstructured')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $remittanceInformationUnstructured = null;
    
    /**
     * Specifies the external service level code in the format of character string with a maximum length of 4 characters.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\ExternalServiceLevel1CodeEnum $serviceLevel
     */
	#[\JMS\Serializer\Annotation\SerializedName('serviceLevel')]
    #[\JMS\Serializer\Annotation\Type('enum<OpenAPI\OpenAPI\Models\Shared\ExternalServiceLevel1CodeEnum>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?ExternalServiceLevel1CodeEnum $serviceLevel = null;
    
    /**
     * ISO 4217 Alpha 3 currency code.
     * 
     * 
     * 
     * @var ?string $transactionCurrency
     */
	#[\JMS\Serializer\Annotation\SerializedName('transactionCurrency')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $transactionCurrency = null;
    
    /**
     * Ultimate creditor.
     * 
     * @var ?string $ultimateCreditor
     */
	#[\JMS\Serializer\Annotation\SerializedName('ultimateCreditor')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $ultimateCreditor = null;
    
    /**
     * Ultimate debtor.
     * 
     * @var ?string $ultimateDebtor
     */
	#[\JMS\Serializer\Annotation\SerializedName('ultimateDebtor')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $ultimateDebtor = null;
    
	public function __construct()
	{
		$this->chargeBearer = null;
		$this->creditorAccount = new \OpenAPI\OpenAPI\Models\Shared\AccountReference16CH();
		$this->creditorAddress = null;
		$this->creditorAgent = null;
		$this->creditorAgentName = null;
		$this->creditorId = null;
		$this->creditorName = "";
		$this->creditorNameAndAddress = null;
		$this->debtorId = null;
		$this->debtorName = "";
		$this->endToEndIdentification = "";
		$this->equivalentAmount = null;
		$this->exchangeRateInformation = null;
		$this->instructedAmount = null;
		$this->intermediaryAgent = null;
		$this->purposeCode = null;
		$this->remittanceInformationStructured = null;
		$this->remittanceInformationUnstructured = null;
		$this->serviceLevel = null;
		$this->transactionCurrency = null;
		$this->ultimateCreditor = null;
		$this->ultimateDebtor = null;
	}
}
