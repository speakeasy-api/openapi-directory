<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Occupants 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Geocode an address and identify site occupants
     * 
     * Represents the set of occupants whose addresses best match a given query address. Every occupant has an associated site which has a standardized address and a coordinate location on the Earth.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetOccupantsAddressesOutputFormatRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetOccupantsAddressesOutputFormatResponse
     */
	public function getOccupantsAddressesOutputFormat(
        \OpenAPI\OpenAPI\Models\Operations\GetOccupantsAddressesOutputFormatRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetOccupantsAddressesOutputFormatResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/occupants/addresses.{outputFormat}', \OpenAPI\OpenAPI\Models\Operations\GetOccupantsAddressesOutputFormatRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetOccupantsAddressesOutputFormatRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetOccupantsAddressesOutputFormatResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Find occupants of sites near to a geographic point
     * 
     * Represents occupants near a given point in order of closest to farthest
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetOccupantsNearOutputFormatRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetOccupantsNearOutputFormatResponse
     */
	public function getOccupantsNearOutputFormat(
        \OpenAPI\OpenAPI\Models\Operations\GetOccupantsNearOutputFormatRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetOccupantsNearOutputFormatResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/occupants/near.{outputFormat}', \OpenAPI\OpenAPI\Models\Operations\GetOccupantsNearOutputFormatRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetOccupantsNearOutputFormatRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetOccupantsNearOutputFormatResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Find occupants of the site nearest to a geographic point
     * 
     * Represents the closest occupant to a given point
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetOccupantsNearestOutputFormatRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetOccupantsNearestOutputFormatResponse
     */
	public function getOccupantsNearestOutputFormat(
        \OpenAPI\OpenAPI\Models\Operations\GetOccupantsNearestOutputFormatRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetOccupantsNearestOutputFormatResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/occupants/nearest.{outputFormat}', \OpenAPI\OpenAPI\Models\Operations\GetOccupantsNearestOutputFormatRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetOccupantsNearestOutputFormatRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetOccupantsNearestOutputFormatResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Find occupants of sites in a geographic area
     * 
     * Represents all occupants within a given area
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetOccupantsWithinOutputFormatRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetOccupantsWithinOutputFormatResponse
     */
	public function getOccupantsWithinOutputFormat(
        \OpenAPI\OpenAPI\Models\Operations\GetOccupantsWithinOutputFormatRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetOccupantsWithinOutputFormatResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/occupants/within.{outputFormat}', \OpenAPI\OpenAPI\Models\Operations\GetOccupantsWithinOutputFormatRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetOccupantsWithinOutputFormatRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetOccupantsWithinOutputFormatResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Get an occupant (of a site) by its unique ID
     * 
     * Represents an individual occupant
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetOccupantsOccupantIDOutputFormatRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetOccupantsOccupantIDOutputFormatResponse
     */
	public function getOccupantsOccupantIDOutputFormat(
        \OpenAPI\OpenAPI\Models\Operations\GetOccupantsOccupantIDOutputFormatRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetOccupantsOccupantIDOutputFormatResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/occupants/{occupantID}.{outputFormat}', \OpenAPI\OpenAPI\Models\Operations\GetOccupantsOccupantIDOutputFormatRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetOccupantsOccupantIDOutputFormatRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetOccupantsOccupantIDOutputFormatResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
}