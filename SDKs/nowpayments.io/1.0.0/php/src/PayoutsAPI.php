<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class PayoutsAPI 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Verify payout
     * 
     * This method is required to verify payouts by using your 2fa code.  
     * You’ll have 10 attempts to verify the payout. If it is not verified after 10 attempts, the payout will remain in ‘creating’ status.  
     * Payout will be processed only when it is verified.
     * 
     * Make sure to have your 2fa authentication enabled in your NOWPayments Account (in Account Settings).  
     * When 2fa is disabled, the code automatically goes to your registration email.  
     * The code sent by email is valid for one hour.
     * 
     * Next is a description of the required request fields:
     * 
     * - :batch-withdrawal-id - payout id you received in `2. Create payout` method
     * - verification_code - 2fa code you received with your Google Auth app or via email
     *     
     * 
     * In order to establish an automatic verification of payouts, you should switch 2FA through the application.  
     * There are several libraries for different frameworks aimed on generating a 2FA codes based on a secret key from your account settings.  
     * e.g: Speakeasy for JavaScript.  
     * We do not recommend to change any default settings.  
     * 
     * ```
     * const 2faVerificationCode = speakeasy.totp({
     *       your_2fa_secret_key,
     *       encoding: 'base32',
     * })
     * ```
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\VerifyPayoutRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\VerifyPayoutResponse
     */
	public function verifyPayout(
        \OpenAPI\OpenAPI\Models\Operations\VerifyPayoutRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\VerifyPayoutResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/payout/{withdrawals-id}/verify', \OpenAPI\OpenAPI\Models\Operations\VerifyPayoutRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\VerifyPayoutResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
}