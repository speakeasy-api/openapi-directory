/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import {
  objectToClass,
  SpeakeasyBase,
  SpeakeasyMetadata,
} from "../../../internal/utils";
import { CapabilityProblem } from "./capabilityproblem";
import { DocumentReference } from "./documentreference";
import { EntityReference } from "./entityreference";
import { Individual } from "./individual";
import { LegalEntityAssociation } from "./legalentityassociation";
import { LegalEntityCapability } from "./legalentitycapability";
import { Organization } from "./organization";
import { SoleProprietorship } from "./soleproprietorship";
import { TransferInstrumentReference } from "./transferinstrumentreference";
import { Expose, Transform, Type } from "class-transformer";

/**
 * The type of legal entity.
 *
 * @remarks
 *
 *  Possible values: **individual**, **organization**, or **soleProprietorship**.
 */
export enum LegalEntityTypeEnum {
  Individual = "individual",
  Organization = "organization",
  SoleProprietorship = "soleProprietorship",
  Trust = "trust",
  UnincorporatedPartnership = "unincorporatedPartnership",
}

/**
 * OK - the request has succeeded.
 */
export class LegalEntity extends SpeakeasyBase {
  /**
   * Contains key-value pairs that specify the actions that the legal entity can do in your platform.The key is a capability required for your integration. For example, **issueCard** for Issuing.The value is an object containing the settings for the capability.
   */
  @SpeakeasyMetadata({ elemType: LegalEntityCapability })
  @Expose({ name: "capabilities" })
  @Transform(
    ({ value }) => {
      const obj: Record<string, LegalEntityCapability> = {};
      for (const key in value) {
        obj[key] = objectToClass(value[key], LegalEntityCapability);
      }
      return obj;
    },
    { toClassOnly: true }
  )
  capabilities?: Record<string, LegalEntityCapability>;

  /**
   * List of documents uploaded for the legal entity.
   */
  @SpeakeasyMetadata({ elemType: DocumentReference })
  @Expose({ name: "documentDetails" })
  @Type(() => DocumentReference)
  documentDetails?: DocumentReference[];

  /**
   * List of documents uploaded for the legal entity.
   */
  @SpeakeasyMetadata({ elemType: EntityReference })
  @Expose({ name: "documents" })
  @Type(() => EntityReference)
  documents?: EntityReference[];

  /**
   * List of legal entities associated with the current legal entity.
   *
   * @remarks
   * For example, ultimate beneficial owners associated with an organization through ownership or control, or as signatories.
   */
  @SpeakeasyMetadata({ elemType: LegalEntityAssociation })
  @Expose({ name: "entityAssociations" })
  @Type(() => LegalEntityAssociation)
  entityAssociations?: LegalEntityAssociation[];

  /**
   * The unique identifier of the legal entity.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id: string;

  @SpeakeasyMetadata()
  @Expose({ name: "individual" })
  @Type(() => Individual)
  individual?: Individual;

  @SpeakeasyMetadata()
  @Expose({ name: "organization" })
  @Type(() => Organization)
  organization?: Organization;

  /**
   * List of the verification errors from capabilities for the legal entity.
   */
  @SpeakeasyMetadata({ elemType: CapabilityProblem })
  @Expose({ name: "problems" })
  @Type(() => CapabilityProblem)
  problems?: CapabilityProblem[];

  /**
   * Your reference for the legal entity, maximum 150 characters.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "reference" })
  reference?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "soleProprietorship" })
  @Type(() => SoleProprietorship)
  soleProprietorship?: SoleProprietorship;

  /**
   * List of transfer instruments that the legal entity owns.
   */
  @SpeakeasyMetadata({ elemType: TransferInstrumentReference })
  @Expose({ name: "transferInstruments" })
  @Type(() => TransferInstrumentReference)
  transferInstruments?: TransferInstrumentReference[];

  /**
   * The type of legal entity.
   *
   * @remarks
   *
   *  Possible values: **individual**, **organization**, or **soleProprietorship**.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "type" })
  type?: LegalEntityTypeEnum;
}
