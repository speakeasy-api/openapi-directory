<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Shared;


/**
 * VerifyJobRun - VerifyJobRun contains information specific to a verify `JobRun`.
 * 
 * @package OpenAPI\OpenAPI\Models\Shared
 * @access public
 */
class VerifyJobRun
{
    /**
     * Output only. URI of a directory containing the verify artifacts. This contains the Skaffold event log.
     * 
     * @var ?string $artifactUri
     */
	#[\JMS\Serializer\Annotation\SerializedName('artifactUri')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $artifactUri = null;
    
    /**
     * Output only. The resource name of the Cloud Build `Build` object that is used to verify. Format is projects/{project}/locations/{location}/builds/{build}.
     * 
     * @var ?string $build
     */
	#[\JMS\Serializer\Annotation\SerializedName('build')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $build = null;
    
    /**
     * Output only. File path of the Skaffold event log relative to the artifact URI.
     * 
     * @var ?string $eventLogPath
     */
	#[\JMS\Serializer\Annotation\SerializedName('eventLogPath')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $eventLogPath = null;
    
    /**
     * Output only. The reason the verify failed. This will always be unspecified while the verify is in progress or if it succeeded.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\VerifyJobRunFailureCauseEnum $failureCause
     */
	#[\JMS\Serializer\Annotation\SerializedName('failureCause')]
    #[\JMS\Serializer\Annotation\Type('enum<OpenAPI\OpenAPI\Models\Shared\VerifyJobRunFailureCauseEnum>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?VerifyJobRunFailureCauseEnum $failureCause = null;
    
    /**
     * Output only. Additional information about the verify failure, if available.
     * 
     * @var ?string $failureMessage
     */
	#[\JMS\Serializer\Annotation\SerializedName('failureMessage')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $failureMessage = null;
    
	public function __construct()
	{
		$this->artifactUri = null;
		$this->build = null;
		$this->eventLogPath = null;
		$this->failureCause = null;
		$this->failureMessage = null;
	}
}
