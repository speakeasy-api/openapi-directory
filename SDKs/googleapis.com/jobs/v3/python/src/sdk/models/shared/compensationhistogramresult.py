"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import numericbucketingresult as shared_numericbucketingresult
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class CompensationHistogramResultTypeEnum(str, Enum):
    r"""Type of the request, corresponding to CompensationHistogramRequest.type."""
    COMPENSATION_HISTOGRAM_REQUEST_TYPE_UNSPECIFIED = 'COMPENSATION_HISTOGRAM_REQUEST_TYPE_UNSPECIFIED'
    BASE = 'BASE'
    ANNUALIZED_BASE = 'ANNUALIZED_BASE'
    ANNUALIZED_TOTAL = 'ANNUALIZED_TOTAL'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CompensationHistogramResult:
    r"""Output only. Compensation based histogram result."""
    
    result: Optional[shared_numericbucketingresult.NumericBucketingResult] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('result'), 'exclude': lambda f: f is None }})
    r"""Output only. Custom numeric bucketing result."""  
    type: Optional[CompensationHistogramResultTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})
    r"""Type of the request, corresponding to CompensationHistogramRequest.type."""  
    