"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import breakpoint as shared_breakpoint
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ListActiveBreakpointsResponse:
    r"""Response for listing active breakpoints."""
    
    breakpoints: Optional[list[shared_breakpoint.Breakpoint]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('breakpoints'), 'exclude': lambda f: f is None }})
    r"""List of all active breakpoints. The fields `id` and `location` are guaranteed to be set on each breakpoint."""  
    next_wait_token: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('nextWaitToken'), 'exclude': lambda f: f is None }})
    r"""A token that can be used in the next method call to block until the list of breakpoints changes."""  
    wait_expired: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('waitExpired'), 'exclude': lambda f: f is None }})
    r"""If set to `true`, indicates that there is no change to the list of active breakpoints and the server-selected timeout has expired. The `breakpoints` field would be empty and should be ignored."""  
    