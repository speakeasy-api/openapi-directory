/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * RackPhysicalProperties -  Information about the physical and logistical details for racks at sites. For more information about hardware requirements for racks, see &lt;a href="https://docs.aws.amazon.com/outposts/latest/userguide/outposts-requirements.html#checklist"&gt;Network readiness checklist&lt;/a&gt; in the Amazon Web Services Outposts User Guide. 
 */
public class RackPhysicalProperties {
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("FiberOpticCableType")
    public FiberOpticCableTypeEnum fiberOpticCableType;
    public RackPhysicalProperties withFiberOpticCableType(FiberOpticCableTypeEnum fiberOpticCableType) {
        this.fiberOpticCableType = fiberOpticCableType;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("MaximumSupportedWeightLbs")
    public MaximumSupportedWeightLbsEnum maximumSupportedWeightLbs;
    public RackPhysicalProperties withMaximumSupportedWeightLbs(MaximumSupportedWeightLbsEnum maximumSupportedWeightLbs) {
        this.maximumSupportedWeightLbs = maximumSupportedWeightLbs;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("OpticalStandard")
    public OpticalStandardEnum opticalStandard;
    public RackPhysicalProperties withOpticalStandard(OpticalStandardEnum opticalStandard) {
        this.opticalStandard = opticalStandard;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("PowerConnector")
    public PowerConnectorEnum powerConnector;
    public RackPhysicalProperties withPowerConnector(PowerConnectorEnum powerConnector) {
        this.powerConnector = powerConnector;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("PowerDrawKva")
    public PowerDrawKvaEnum powerDrawKva;
    public RackPhysicalProperties withPowerDrawKva(PowerDrawKvaEnum powerDrawKva) {
        this.powerDrawKva = powerDrawKva;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("PowerFeedDrop")
    public PowerFeedDropEnum powerFeedDrop;
    public RackPhysicalProperties withPowerFeedDrop(PowerFeedDropEnum powerFeedDrop) {
        this.powerFeedDrop = powerFeedDrop;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("PowerPhase")
    public PowerPhaseEnum powerPhase;
    public RackPhysicalProperties withPowerPhase(PowerPhaseEnum powerPhase) {
        this.powerPhase = powerPhase;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("UplinkCount")
    public UplinkCountEnum uplinkCount;
    public RackPhysicalProperties withUplinkCount(UplinkCountEnum uplinkCount) {
        this.uplinkCount = uplinkCount;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("UplinkGbps")
    public UplinkGbpsEnum uplinkGbps;
    public RackPhysicalProperties withUplinkGbps(UplinkGbpsEnum uplinkGbps) {
        this.uplinkGbps = uplinkGbps;
        return this;
    }
    
}
