<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

/**
 * SDK - This is the public Twilio REST API.
 * 
 * @package OpenAPI\OpenAPI
 * @access public
 */
class SDK
{
	public const SERVERS = [
		'https://insights.twilio.com',
	];
	
	public const FETCH_ACCOUNT_SETTINGS_SERVERS = [
		'https://insights.twilio.com',
	];
	
	public const FETCH_ANNOTATION_SERVERS = [
		'https://insights.twilio.com',
	];
	
	public const FETCH_CALL_SERVERS = [
		'https://insights.twilio.com',
	];
	
	public const FETCH_CONFERENCE_SERVERS = [
		'https://insights.twilio.com',
	];
	
	public const FETCH_CONFERENCE_PARTICIPANT_SERVERS = [
		'https://insights.twilio.com',
	];
	
	public const FETCH_SUMMARY_SERVERS = [
		'https://insights.twilio.com',
	];
	
	public const FETCH_VIDEO_PARTICIPANT_SUMMARY_SERVERS = [
		'https://insights.twilio.com',
	];
	
	public const FETCH_VIDEO_ROOM_SUMMARY_SERVERS = [
		'https://insights.twilio.com',
	];
	
	public const LIST_CALL_SUMMARIES_SERVERS = [
		'https://insights.twilio.com',
	];
	
	public const LIST_CONFERENCE_SERVERS = [
		'https://insights.twilio.com',
	];
	
	public const LIST_CONFERENCE_PARTICIPANT_SERVERS = [
		'https://insights.twilio.com',
	];
	
	public const LIST_EVENT_SERVERS = [
		'https://insights.twilio.com',
	];
	
	public const LIST_METRIC_SERVERS = [
		'https://insights.twilio.com',
	];
	
	public const LIST_VIDEO_PARTICIPANT_SUMMARY_SERVERS = [
		'https://insights.twilio.com',
	];
	
	public const LIST_VIDEO_ROOM_SUMMARY_SERVERS = [
		'https://insights.twilio.com',
	];
	
	public const UPDATE_ACCOUNT_SETTINGS_SERVERS = [
		'https://insights.twilio.com',
	];
	
	public const UPDATE_ANNOTATION_SERVERS = [
		'https://insights.twilio.com',
	];
  		
	// SDK private variables namespaced with _ to avoid conflicts with API models
	private ?\GuzzleHttp\ClientInterface $_defaultClient;
	private ?\GuzzleHttp\ClientInterface $_securityClient;
	
	private string $_serverUrl;
	private string $_language = 'php';
	private string $_sdkVersion = '0.0.1';
	private string $_genVersion = 'internal';

	/**
	 * Returns a new instance of the SDK builder used to configure and create the SDK instance.
	 * 
	 * @return SDKBuilder
	 */
	public static function builder(): SDKBuilder
	{
		return new SDKBuilder();
	}

	/**
	 * @param \GuzzleHttp\ClientInterface|null $client
	 * @param string $serverUrl
	 * @param array<string, string>|null $params
	 */
	public function __construct(?\GuzzleHttp\ClientInterface $client, string $serverUrl, ?array $params)
	{
		$this->_defaultClient = $client;
		
		if ($this->_defaultClient === null) {
			$this->_defaultClient = new \GuzzleHttp\Client([
				'timeout' => 60,
			]);
		}

		$this->_securityClient = null;
		if ($this->_securityClient === null) {
			$this->_securityClient = $this->_defaultClient;
		}

		if (!empty($serverUrl)) {
			$this->_serverUrl = Utils\Utils::templateUrl($serverUrl, $params);
		}
		
		if (empty($this->_serverUrl)) {
			$this->_serverUrl = $this::SERVERS[0];
		}
	}
	
    /**
     * fetchAccountSettings
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchAccountSettingsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchAccountSettingsSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\FetchAccountSettingsResponse
     */
	public function fetchAccountSettings(
        \OpenAPI\OpenAPI\Models\Operations\FetchAccountSettingsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FetchAccountSettingsSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\FetchAccountSettingsResponse
    {
        $baseUrl = SDK::FETCH_ACCOUNT_SETTINGS_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Voice/Settings');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\FetchAccountSettingsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FetchAccountSettingsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->insightsV1AccountSettings = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\InsightsV1AccountSettings', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Fetch a specific Annotation.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchAnnotationRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchAnnotationSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\FetchAnnotationResponse
     */
	public function fetchAnnotation(
        \OpenAPI\OpenAPI\Models\Operations\FetchAnnotationRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FetchAnnotationSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\FetchAnnotationResponse
    {
        $baseUrl = SDK::FETCH_ANNOTATION_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Voice/{CallSid}/Annotation', \OpenAPI\OpenAPI\Models\Operations\FetchAnnotationRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FetchAnnotationResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->insightsV1CallAnnotation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\InsightsV1CallAnnotation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * fetchCall
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchCallRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchCallSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\FetchCallResponse
     */
	public function fetchCall(
        \OpenAPI\OpenAPI\Models\Operations\FetchCallRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FetchCallSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\FetchCallResponse
    {
        $baseUrl = SDK::FETCH_CALL_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Voice/{Sid}', \OpenAPI\OpenAPI\Models\Operations\FetchCallRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FetchCallResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->insightsV1Call = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\InsightsV1Call', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Fetch a specific Conference.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchConferenceRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchConferenceSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\FetchConferenceResponse
     */
	public function fetchConference(
        \OpenAPI\OpenAPI\Models\Operations\FetchConferenceRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FetchConferenceSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\FetchConferenceResponse
    {
        $baseUrl = SDK::FETCH_CONFERENCE_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Conferences/{ConferenceSid}', \OpenAPI\OpenAPI\Models\Operations\FetchConferenceRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FetchConferenceResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->insightsV1Conference = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\InsightsV1Conference', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Fetch a specific Conference Participant Summary.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchConferenceParticipantRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchConferenceParticipantSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\FetchConferenceParticipantResponse
     */
	public function fetchConferenceParticipant(
        \OpenAPI\OpenAPI\Models\Operations\FetchConferenceParticipantRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FetchConferenceParticipantSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\FetchConferenceParticipantResponse
    {
        $baseUrl = SDK::FETCH_CONFERENCE_PARTICIPANT_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Conferences/{ConferenceSid}/Participants/{ParticipantSid}', \OpenAPI\OpenAPI\Models\Operations\FetchConferenceParticipantRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\FetchConferenceParticipantRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FetchConferenceParticipantResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->insightsV1ConferenceConferenceParticipant = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\InsightsV1ConferenceConferenceParticipant', 'json');
            }
        }

        return $response;
    }
	
    /**
     * fetchSummary
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchSummaryRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchSummarySecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\FetchSummaryResponse
     */
	public function fetchSummary(
        \OpenAPI\OpenAPI\Models\Operations\FetchSummaryRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FetchSummarySecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\FetchSummaryResponse
    {
        $baseUrl = SDK::FETCH_SUMMARY_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Voice/{CallSid}/Summary', \OpenAPI\OpenAPI\Models\Operations\FetchSummaryRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\FetchSummaryRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FetchSummaryResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->insightsV1CallSummary = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\InsightsV1CallSummary', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get Video Log Analyzer data for a Room Participant.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchVideoParticipantSummaryRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchVideoParticipantSummarySecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\FetchVideoParticipantSummaryResponse
     */
	public function fetchVideoParticipantSummary(
        \OpenAPI\OpenAPI\Models\Operations\FetchVideoParticipantSummaryRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FetchVideoParticipantSummarySecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\FetchVideoParticipantSummaryResponse
    {
        $baseUrl = SDK::FETCH_VIDEO_PARTICIPANT_SUMMARY_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Video/Rooms/{RoomSid}/Participants/{ParticipantSid}', \OpenAPI\OpenAPI\Models\Operations\FetchVideoParticipantSummaryRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FetchVideoParticipantSummaryResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->insightsV1VideoRoomSummaryVideoParticipantSummary = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\InsightsV1VideoRoomSummaryVideoParticipantSummary', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get Video Log Analyzer data for a Room.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchVideoRoomSummaryRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchVideoRoomSummarySecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\FetchVideoRoomSummaryResponse
     */
	public function fetchVideoRoomSummary(
        \OpenAPI\OpenAPI\Models\Operations\FetchVideoRoomSummaryRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FetchVideoRoomSummarySecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\FetchVideoRoomSummaryResponse
    {
        $baseUrl = SDK::FETCH_VIDEO_ROOM_SUMMARY_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Video/Rooms/{RoomSid}', \OpenAPI\OpenAPI\Models\Operations\FetchVideoRoomSummaryRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FetchVideoRoomSummaryResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->insightsV1VideoRoomSummary = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\InsightsV1VideoRoomSummary', 'json');
            }
        }

        return $response;
    }
	
    /**
     * listCallSummaries
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListCallSummariesRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListCallSummariesSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\ListCallSummariesResponse
     */
	public function listCallSummaries(
        \OpenAPI\OpenAPI\Models\Operations\ListCallSummariesRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListCallSummariesSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\ListCallSummariesResponse
    {
        $baseUrl = SDK::LIST_CALL_SUMMARIES_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Voice/Summaries');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListCallSummariesRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListCallSummariesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listCallSummariesResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ListCallSummariesListCallSummariesResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieve a list of Conferences.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListConferenceRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListConferenceSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\ListConferenceResponse
     */
	public function listConference(
        \OpenAPI\OpenAPI\Models\Operations\ListConferenceRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListConferenceSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\ListConferenceResponse
    {
        $baseUrl = SDK::LIST_CONFERENCE_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Conferences');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListConferenceRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListConferenceResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listConferenceResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ListConferenceListConferenceResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List Conference Participants.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListConferenceParticipantRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListConferenceParticipantSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\ListConferenceParticipantResponse
     */
	public function listConferenceParticipant(
        \OpenAPI\OpenAPI\Models\Operations\ListConferenceParticipantRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListConferenceParticipantSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\ListConferenceParticipantResponse
    {
        $baseUrl = SDK::LIST_CONFERENCE_PARTICIPANT_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Conferences/{ConferenceSid}/Participants', \OpenAPI\OpenAPI\Models\Operations\ListConferenceParticipantRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListConferenceParticipantRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListConferenceParticipantResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listConferenceParticipantResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ListConferenceParticipantListConferenceParticipantResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * listEvent
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListEventRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListEventSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\ListEventResponse
     */
	public function listEvent(
        \OpenAPI\OpenAPI\Models\Operations\ListEventRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListEventSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\ListEventResponse
    {
        $baseUrl = SDK::LIST_EVENT_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Voice/{CallSid}/Events', \OpenAPI\OpenAPI\Models\Operations\ListEventRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListEventRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListEventResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listEventResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ListEventListEventResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * listMetric
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListMetricRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListMetricSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\ListMetricResponse
     */
	public function listMetric(
        \OpenAPI\OpenAPI\Models\Operations\ListMetricRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListMetricSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\ListMetricResponse
    {
        $baseUrl = SDK::LIST_METRIC_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Voice/{CallSid}/Metrics', \OpenAPI\OpenAPI\Models\Operations\ListMetricRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListMetricRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListMetricResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listMetricResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ListMetricListMetricResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get a list of room participants.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListVideoParticipantSummaryRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListVideoParticipantSummarySecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\ListVideoParticipantSummaryResponse
     */
	public function listVideoParticipantSummary(
        \OpenAPI\OpenAPI\Models\Operations\ListVideoParticipantSummaryRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListVideoParticipantSummarySecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\ListVideoParticipantSummaryResponse
    {
        $baseUrl = SDK::LIST_VIDEO_PARTICIPANT_SUMMARY_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Video/Rooms/{RoomSid}/Participants', \OpenAPI\OpenAPI\Models\Operations\ListVideoParticipantSummaryRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListVideoParticipantSummaryRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListVideoParticipantSummaryResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listVideoParticipantSummaryResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ListVideoParticipantSummaryListVideoParticipantSummaryResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get a list of Programmable Video Rooms.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListVideoRoomSummaryRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListVideoRoomSummarySecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\ListVideoRoomSummaryResponse
     */
	public function listVideoRoomSummary(
        \OpenAPI\OpenAPI\Models\Operations\ListVideoRoomSummaryRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListVideoRoomSummarySecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\ListVideoRoomSummaryResponse
    {
        $baseUrl = SDK::LIST_VIDEO_ROOM_SUMMARY_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Video/Rooms');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListVideoRoomSummaryRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListVideoRoomSummaryResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listVideoRoomSummaryResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ListVideoRoomSummaryListVideoRoomSummaryResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * updateAccountSettings
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateAccountSettingsUpdateAccountSettingsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateAccountSettingsSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateAccountSettingsResponse
     */
	public function updateAccountSettings(
        \OpenAPI\OpenAPI\Models\Operations\UpdateAccountSettingsUpdateAccountSettingsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\UpdateAccountSettingsSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateAccountSettingsResponse
    {
        $baseUrl = SDK::UPDATE_ACCOUNT_SETTINGS_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Voice/Settings');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateAccountSettingsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->insightsV1AccountSettings = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\InsightsV1AccountSettings', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create/Update the annotation for the call
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateAnnotationRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateAnnotationSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateAnnotationResponse
     */
	public function updateAnnotation(
        \OpenAPI\OpenAPI\Models\Operations\UpdateAnnotationRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\UpdateAnnotationSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateAnnotationResponse
    {
        $baseUrl = SDK::UPDATE_ANNOTATION_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Voice/{CallSid}/Annotation', \OpenAPI\OpenAPI\Models\Operations\UpdateAnnotationRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateAnnotationResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->insightsV1CallAnnotation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\InsightsV1CallAnnotation', 'json');
            }
        }

        return $response;
    }
}