// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"net/http"
	"openapi/pkg/models/shared"
)

type ReadAccountDetailsSecurity struct {
	BearerAuthOAuth *string `security:"scheme,type=http,subtype=bearer,name=Authorization"`
}

type ReadAccountDetailsRequest struct {
	// This then contains the consentId of the related AIS consent, which was performed prior to this payment initiation.
	//
	ConsentID string `header:"style=simple,explode=false,name=Consent-ID"`
	// Is contained if and only if the "Signature" element is contained in the header of the request.
	Digest *string `header:"style=simple,explode=false,name=Digest"`
	// The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.
	//
	PSUAccept *string `header:"style=simple,explode=false,name=PSU-Accept"`
	// The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.
	//
	PSUAcceptCharset *string `header:"style=simple,explode=false,name=PSU-Accept-Charset"`
	// The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.
	//
	PSUAcceptEncoding *string `header:"style=simple,explode=false,name=PSU-Accept-Encoding"`
	// The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.
	//
	PSUAcceptLanguage *string `header:"style=simple,explode=false,name=PSU-Accept-Language"`
	// UUID (Universally Unique Identifier) for a device, which is used by the PSU, if available.
	// UUID identifies either a device or a device dependant application installation.
	// In case of an installation identification this ID needs to be unaltered until removal from device.
	//
	PSUDeviceID *string `header:"style=simple,explode=false,name=PSU-Device-ID"`
	// The forwarded Geo Location of the corresponding http request between PSU and TPP if available.
	//
	PSUGeoLocation *string `header:"style=simple,explode=false,name=PSU-Geo-Location"`
	// HTTP method used at the PSU ? TPP interface, if available.
	// Valid values are:
	// * GET
	// * POST
	// * PUT
	// * PATCH
	// * DELETE
	//
	PSUHTTPMethod *shared.PSUHTTPMethodEnum `header:"style=simple,explode=false,name=PSU-Http-Method"`
	// The forwarded IP Address header field consists of the corresponding HTTP request
	// IP Address field between PSU and TPP.
	// It shall be contained if and only if this request was actively initiated by the PSU.
	//
	PSUIPAddress *string `header:"style=simple,explode=false,name=PSU-IP-Address"`
	// The forwarded IP Port header field consists of the corresponding HTTP request IP Port field between PSU and TPP, if available.
	//
	PSUIPPort *string `header:"style=simple,explode=false,name=PSU-IP-Port"`
	// The forwarded Agent header field of the HTTP request between PSU and TPP, if available.
	//
	PSUUserAgent *string `header:"style=simple,explode=false,name=PSU-User-Agent"`
	// A signature of the request by the TPP on application level. This might be mandated by ASPSP.
	//
	Signature *string `header:"style=simple,explode=false,name=Signature"`
	// The certificate used for signing the request, in base64 encoding.
	// Must be contained if a signature is contained.
	//
	TPPSignatureCertificate *string `header:"style=simple,explode=false,name=TPP-Signature-Certificate"`
	// ID of the request, unique to the call, as determined by the initiating party.
	XRequestID string `header:"style=simple,explode=false,name=X-Request-ID"`
	// This identification is denoting the addressed (card) account.
	// The account-id is retrieved by using a "Read Account List" or "Read Card Account list" call.
	// The account-id is the "resourceId" attribute of the account structure.
	// Its value is constant at least throughout the lifecycle of a given consent.
	//
	AccountID string `pathParam:"style=simple,explode=false,name=account-id"`
	// If contained, this function reads the list of accessible payment accounts including the booking balance,
	// if granted by the PSU in the related consent and available by the ASPSP.
	// This parameter might be ignored by the ASPSP.
	//
	WithBalance *bool `queryParam:"style=form,explode=true,name=withBalance"`
}

// ReadAccountDetails200ApplicationJSON - OK
type ReadAccountDetails200ApplicationJSON struct {
	// The ASPSP shall give at least one of the account reference identifiers:
	//   - iban
	//   - bban
	//   - pan
	//   - maskedPan
	//   - msisdn
	// If the account is a multicurrency account currency code in "currency" is set to "XXX".
	//
	Account shared.AccountDetails `json:"account"`
}

type ReadAccountDetailsResponse struct {
	ContentType string
	// Bad Request
	Error400AIS *shared.Error400AIS
	// Bad Request
	Error400NGAIS *shared.Error400NGAIS
	// Unauthorized
	Error401AIS *shared.Error401AIS
	// Unauthorized
	Error401NGAIS *shared.Error401NGAIS
	// Forbidden
	Error403AIS *shared.Error403AIS
	// Forbidden
	Error403NGAIS *shared.Error403NGAIS
	// Not found
	Error404AIS *shared.Error404AIS
	// Not found
	Error404NGAIS *shared.Error404NGAIS
	// Method Not Allowed
	Error405AIS *shared.Error405AIS
	// Method Not Allowed
	Error405NGAIS *shared.Error405NGAIS
	// Not Acceptable
	Error406AIS *shared.Error406AIS
	// Not Acceptable
	Error406NGAIS *shared.Error406NGAIS
	// Conflict
	Error409AIS *shared.Error409AIS
	// Conflict
	Error409NGAIS *shared.Error409NGAIS
	// Too Many Requests
	Error429AIS *shared.Error429AIS
	// Too Many Requests
	Error429NGAIS *shared.Error429NGAIS
	Headers       map[string][]string
	StatusCode    int
	RawResponse   *http.Response
	// OK
	ReadAccountDetails200ApplicationJSONObject *ReadAccountDetails200ApplicationJSON
}
