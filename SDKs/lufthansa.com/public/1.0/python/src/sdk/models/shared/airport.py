"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import coordinate as shared_coordinate
from ..shared import name as shared_name
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class AirportNames:
    r"""Container for airport names."""
    
    name: Optional[list[shared_name.Name]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Name'), 'exclude': lambda f: f is None }})
    r"""Array: language specific full name of airport."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class AirportPosition:
    r"""Physical location of an airport. This data section is optional and therefore not always present."""
    
    coordinate: Optional[shared_coordinate.Coordinate] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Coordinate'), 'exclude': lambda f: f is None }})
    r"""Container for coordinates."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Airport:
    r"""Array of all available airports or one airport matching the request."""
    
    airport_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AirportCode'), 'exclude': lambda f: f is None }})
    r"""3-letter IATA airport code, e.g. “TXL”."""  
    city_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CityCode'), 'exclude': lambda f: f is None }})
    r"""3-letter IATA city code, e.g. “BER”."""  
    country_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CountryCode'), 'exclude': lambda f: f is None }})
    r"""2-letter ISO 3166-1 country code, e.g. “DE”."""  
    location_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('LocationType'), 'exclude': lambda f: f is None }})
    r"""“Airport”, “RailwayStation” or “BusStation”."""  
    names: Optional[AirportNames] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Names'), 'exclude': lambda f: f is None }})
    r"""Container for airport names."""  
    position: Optional[AirportPosition] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Position'), 'exclude': lambda f: f is None }})
    r"""Physical location of an airport. This data section is optional and therefore not always present."""  
    time_zone_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TimeZoneId'), 'exclude': lambda f: f is None }})
    r"""Time zone name airport is in"""  
    utc_offset: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('UtcOffset'), 'exclude': lambda f: f is None }})
    r"""Hour offset of airport to UTC time zone"""  
    