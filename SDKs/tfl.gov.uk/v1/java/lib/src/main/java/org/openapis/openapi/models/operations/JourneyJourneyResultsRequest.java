/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import org.openapis.openapi.utils.SpeakeasyMetadata;

public class JourneyJourneyResultsRequest {
    /**
     * The accessibility preference must be a comma separated list eg. "noSolidStairs,noEscalators,noElevators,stepFreeToVehicle,stepFreeToPlatform"
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=accessibilityPreference")
    public JourneyJourneyResultsAccessibilityPreferenceEnum[] accessibilityPreference;
    public JourneyJourneyResultsRequest withAccessibilityPreference(JourneyJourneyResultsAccessibilityPreferenceEnum[] accessibilityPreference) {
        this.accessibilityPreference = accessibilityPreference;
        return this;
    }
    
    /**
     * Time adjustment command. eg possible options: "TripFirst" | "TripLast"
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=adjustment")
    public String adjustment;
    public JourneyJourneyResultsRequest withAdjustment(String adjustment) {
        this.adjustment = adjustment;
        return this;
    }
    
    /**
     * Option to determine whether to return alternative cycling journey
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=alternativeCycle")
    public Boolean alternativeCycle;
    public JourneyJourneyResultsRequest withAlternativeCycle(Boolean alternativeCycle) {
        this.alternativeCycle = alternativeCycle;
        return this;
    }
    
    /**
     * Option to determine whether to return alternative walking journey
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=alternativeWalking")
    public Boolean alternativeWalking;
    public JourneyJourneyResultsRequest withAlternativeWalking(Boolean alternativeWalking) {
        this.alternativeWalking = alternativeWalking;
        return this;
    }
    
    /**
     * Flag to determine whether certain text (e.g. walking instructions) should be output with HTML tags or not.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=applyHtmlMarkup")
    public Boolean applyHtmlMarkup;
    public JourneyJourneyResultsRequest withApplyHtmlMarkup(Boolean applyHtmlMarkup) {
        this.applyHtmlMarkup = applyHtmlMarkup;
        return this;
    }
    
    /**
     * A comma separated list of cycling proficiency levels. eg possible options: "easy,moderate,fast"
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=bikeProficiency")
    public JourneyJourneyResultsBikeProficiencyEnum[] bikeProficiency;
    public JourneyJourneyResultsRequest withBikeProficiency(JourneyJourneyResultsBikeProficiencyEnum[] bikeProficiency) {
        this.bikeProficiency = bikeProficiency;
        return this;
    }
    
    /**
     * A boolean to make Journey Planner calculate journeys in one temporal direction only. In other words, only calculate journeys after the 'depart' time, or before the 'arrive' time. By default, the Journey Planner engine (EFA) calculates journeys in both temporal directions.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=calcOneDirection")
    public Boolean calcOneDirection;
    public JourneyJourneyResultsRequest withCalcOneDirection(Boolean calcOneDirection) {
        this.calcOneDirection = calcOneDirection;
        return this;
    }
    
    /**
     * The cycle preference. eg possible options: "allTheWay" | "leaveAtStation" | "takeOnTransport" | "cycleHire"
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=cyclePreference")
    public JourneyJourneyResultsCyclePreferenceEnum cyclePreference;
    public JourneyJourneyResultsRequest withCyclePreference(JourneyJourneyResultsCyclePreferenceEnum cyclePreference) {
        this.cyclePreference = cyclePreference;
        return this;
    }
    
    /**
     * The date must be in yyyyMMdd format
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=date")
    public String date;
    public JourneyJourneyResultsRequest withDate(String date) {
        this.date = date;
        return this;
    }
    
    /**
     * Origin of the journey. Can be WGS84 coordinates expressed as "lat,long", a UK postcode, a Naptan (StopPoint) id, an ICS StopId, or a free-text string (will cause disambiguation unless it exactly matches a point of interest name).
     */
    @SpeakeasyMetadata("pathParam:style=simple,explode=false,name=from")
    public String from;
    public JourneyJourneyResultsRequest withFrom(String from) {
        this.from = from;
        return this;
    }
    
    /**
     * An optional name to associate with the origin of the journey in the results.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=fromName")
    public String fromName;
    public JourneyJourneyResultsRequest withFromName(String fromName) {
        this.fromName = fromName;
        return this;
    }
    
    /**
     * The journey preference eg possible options: "leastinterchange" | "leasttime" | "leastwalking"
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=journeyPreference")
    public JourneyJourneyResultsJourneyPreferenceEnum journeyPreference;
    public JourneyJourneyResultsRequest withJourneyPreference(JourneyJourneyResultsJourneyPreferenceEnum journeyPreference) {
        this.journeyPreference = journeyPreference;
        return this;
    }
    
    /**
     * The max walking time in minutes for transfer eg. "120"
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=maxTransferMinutes")
    public String maxTransferMinutes;
    public JourneyJourneyResultsRequest withMaxTransferMinutes(String maxTransferMinutes) {
        this.maxTransferMinutes = maxTransferMinutes;
        return this;
    }
    
    /**
     * The max walking time in minutes for journeys eg. "120"
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=maxWalkingMinutes")
    public String maxWalkingMinutes;
    public JourneyJourneyResultsRequest withMaxWalkingMinutes(String maxWalkingMinutes) {
        this.maxWalkingMinutes = maxWalkingMinutes;
        return this;
    }
    
    /**
     * The mode must be a comma separated list of modes. eg possible options: "public-bus,overground,train,tube,coach,dlr,cablecar,tram,river,walking,cycle"
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=mode")
    public String[] mode;
    public JourneyJourneyResultsRequest withMode(String[] mode) {
        this.mode = mode;
        return this;
    }
    
    /**
     * Does the journey cover stops outside London? eg. "nationalSearch=true"
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=nationalSearch")
    public Boolean nationalSearch;
    public JourneyJourneyResultsRequest withNationalSearch(Boolean nationalSearch) {
        this.nationalSearch = nationalSearch;
        return this;
    }
    
    /**
     * A boolean to indicate whether public transport routes should include directions between platforms and station entrances.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=routeBetweenEntrances")
    public Boolean routeBetweenEntrances;
    public JourneyJourneyResultsRequest withRouteBetweenEntrances(Boolean routeBetweenEntrances) {
        this.routeBetweenEntrances = routeBetweenEntrances;
        return this;
    }
    
    /**
     * A boolean to indicate whether to return one or more taxi journeys. Note, setting this to true will override "useMultiModalCall".
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=taxiOnlyTrip")
    public Boolean taxiOnlyTrip;
    public JourneyJourneyResultsRequest withTaxiOnlyTrip(Boolean taxiOnlyTrip) {
        this.taxiOnlyTrip = taxiOnlyTrip;
        return this;
    }
    
    /**
     * The time must be in HHmm format
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=time")
    public String time;
    public JourneyJourneyResultsRequest withTime(String time) {
        this.time = time;
        return this;
    }
    
    /**
     * Does the time given relate to arrival or leaving time? Possible options: "departing" | "arriving"
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=timeIs")
    public JourneyJourneyResultsTimeIsEnum timeIs;
    public JourneyJourneyResultsRequest withTimeIs(JourneyJourneyResultsTimeIsEnum timeIs) {
        this.timeIs = timeIs;
        return this;
    }
    
    /**
     * Destination of the journey. Can be WGS84 coordinates expressed as "lat,long", a UK postcode, a Naptan (StopPoint) id, an ICS StopId, or a free-text string (will cause disambiguation unless it exactly matches a point of interest name).
     */
    @SpeakeasyMetadata("pathParam:style=simple,explode=false,name=to")
    public String to;
    public JourneyJourneyResultsRequest withTo(String to) {
        this.to = to;
        return this;
    }
    
    /**
     * An optional name to associate with the destination of the journey in the results.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=toName")
    public String toName;
    public JourneyJourneyResultsRequest withToName(String toName) {
        this.toName = toName;
        return this;
    }
    
    /**
     * A boolean to indicate whether or not to return 3 public transport journeys, a bus journey, a cycle hire journey, a personal cycle journey and a walking journey
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=useMultiModalCall")
    public Boolean useMultiModalCall;
    public JourneyJourneyResultsRequest withUseMultiModalCall(Boolean useMultiModalCall) {
        this.useMultiModalCall = useMultiModalCall;
        return this;
    }
    
    /**
     * A boolean to indicate if we want to receive real time live arrivals data where available.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=useRealTimeLiveArrivals")
    public Boolean useRealTimeLiveArrivals;
    public JourneyJourneyResultsRequest withUseRealTimeLiveArrivals(Boolean useRealTimeLiveArrivals) {
        this.useRealTimeLiveArrivals = useRealTimeLiveArrivals;
        return this;
    }
    
    /**
     * Travel through point on the journey. Can be WGS84 coordinates expressed as "lat,long", a UK postcode, a Naptan (StopPoint) id, an ICS StopId, or a free-text string (will cause disambiguation unless it exactly matches a point of interest name).
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=via")
    public String via;
    public JourneyJourneyResultsRequest withVia(String via) {
        this.via = via;
        return this;
    }
    
    /**
     * An optional name to associate with the via point of the journey in the results.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=viaName")
    public String viaName;
    public JourneyJourneyResultsRequest withViaName(String viaName) {
        this.viaName = viaName;
        return this;
    }
    
    /**
     * A boolean to indicate whether to optimize journeys using walking
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=walkingOptimization")
    public Boolean walkingOptimization;
    public JourneyJourneyResultsRequest withWalkingOptimization(Boolean walkingOptimization) {
        this.walkingOptimization = walkingOptimization;
        return this;
    }
    
    /**
     * The walking speed. eg possible options: "slow" | "average" | "fast".
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=walkingSpeed")
    public JourneyJourneyResultsWalkingSpeedEnum walkingSpeed;
    public JourneyJourneyResultsRequest withWalkingSpeed(JourneyJourneyResultsWalkingSpeedEnum walkingSpeed) {
        this.walkingSpeed = walkingSpeed;
        return this;
    }
    
}
