/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

export class UploadVideoRequestBodyEmbedButtons extends SpeakeasyBase {
  /**
   * Show or hide the Embed button.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "embed" })
  embed?: boolean;

  /**
   * Show or hide the Fullscreen button.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "fullscreen" })
  fullscreen?: boolean;

  /**
   * Show or hide the HD button.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "hd" })
  hd?: boolean;

  /**
   * Show or hide the Like button.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "like" })
  like?: boolean;

  /**
   * Show or hide the Scaling button (shown only in Fullscreen mode).
   */
  @SpeakeasyMetadata()
  @Expose({ name: "scaling" })
  scaling?: boolean;

  /**
   * Show or hide the Share button.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "share" })
  share?: boolean;

  /**
   * Show or hide the Watch Later button.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "watchlater" })
  watchlater?: boolean;
}

export class UploadVideoRequestBodyEmbedLogosCustom extends SpeakeasyBase {
  /**
   * Show or hide your custom logo.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "active" })
  active?: boolean;

  /**
   * The URL that loads when the user clicks your custom logo.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "link" })
  link?: string;

  /**
   * Whether always to show the custom logo or to hide it after time with the rest of the UI.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "sticky" })
  sticky?: boolean;
}

export class UploadVideoRequestBodyEmbedLogos extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "custom" })
  @Type(() => UploadVideoRequestBodyEmbedLogosCustom)
  custom?: UploadVideoRequestBodyEmbedLogosCustom;

  /**
   * Show or hide the Vimeo logo.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "vimeo" })
  vimeo?: boolean;
}

/**
 * Show or hide the video title, or enable the user to determine whether the video title appears.
 */
export enum UploadVideoRequestBodyEmbedTitleNameEnum {
  Hide = "hide",
  Show = "show",
  User = "user",
}

/**
 * Show or hide the owner information, or enable the user to determine whether the owner information appears.
 */
export enum UploadVideoRequestBodyEmbedTitleOwnerEnum {
  Hide = "hide",
  Show = "show",
  User = "user",
}

/**
 * Show or hide the owner portrait, or enable the user to determine whether the owner portrait appears.
 */
export enum UploadVideoRequestBodyEmbedTitlePortraitEnum {
  Hide = "hide",
  Show = "show",
  User = "user",
}

export class UploadVideoRequestBodyEmbedTitle extends SpeakeasyBase {
  /**
   * Show or hide the video title, or enable the user to determine whether the video title appears.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name?: UploadVideoRequestBodyEmbedTitleNameEnum;

  /**
   * Show or hide the owner information, or enable the user to determine whether the owner information appears.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "owner" })
  owner?: UploadVideoRequestBodyEmbedTitleOwnerEnum;

  /**
   * Show or hide the owner portrait, or enable the user to determine whether the owner portrait appears.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "portrait" })
  portrait?: UploadVideoRequestBodyEmbedTitlePortraitEnum;
}

export class UploadVideoRequestBodyEmbed extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "buttons" })
  @Type(() => UploadVideoRequestBodyEmbedButtons)
  buttons?: UploadVideoRequestBodyEmbedButtons;

  /**
   * The main color of the embed player.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "color" })
  color?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "logos" })
  @Type(() => UploadVideoRequestBodyEmbedLogos)
  logos?: UploadVideoRequestBodyEmbedLogos;

  /**
   * Show or hide the playbar.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "playbar" })
  playbar?: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "title" })
  @Type(() => UploadVideoRequestBodyEmbedTitle)
  title?: UploadVideoRequestBodyEmbedTitle;

  /**
   * Show or hide the volume selector.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "volume" })
  volume?: boolean;
}

/**
 * The Creative Commons license.
 */
export enum UploadVideoRequestBodyLicenseEnum {
  By = "by",
  ByNc = "by-nc",
  ByNcNd = "by-nc-nd",
  ByNcSa = "by-nc-sa",
  ByNd = "by-nd",
  BySa = "by-sa",
  Cc0 = "cc0",
}

/**
 * The privacy level required to comment on the video.
 */
export enum UploadVideoRequestBodyPrivacyCommentsEnum {
  Anybody = "anybody",
  Contacts = "contacts",
  Nobody = "nobody",
}

/**
 * The video's embed settings. The `whitelist` value enables you to define all valid embed domains. See our [documentation](https://developer.vimeo.com/api/endpoints/videos#/{video_id}/privacy/domains) for details on adding and removing domains.
 */
export enum UploadVideoRequestBodyPrivacyEmbedEnum {
  Private = "private",
  Public = "public",
  Whitelist = "whitelist",
}

/**
 * The video's privacy setting. When privacy is `users`, `application/json` is the only valid content type. Basic users can't set privacy to `unlisted`.
 */
export enum UploadVideoRequestBodyPrivacyViewEnum {
  Anybody = "anybody",
  Contacts = "contacts",
  Disable = "disable",
  Nobody = "nobody",
  Password = "password",
  Unlisted = "unlisted",
  Users = "users",
}

export class UploadVideoRequestBodyPrivacy extends SpeakeasyBase {
  /**
   * Whether a user can add the video to an album, channel, or group.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "add" })
  add?: boolean;

  /**
   * The privacy level required to comment on the video.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "comments" })
  comments?: UploadVideoRequestBodyPrivacyCommentsEnum;

  /**
   * Whether a user can download the video. Not available to users with a Basic membership
   */
  @SpeakeasyMetadata()
  @Expose({ name: "download" })
  download?: boolean;

  /**
   * The video's embed settings. The `whitelist` value enables you to define all valid embed domains. See our [documentation](https://developer.vimeo.com/api/endpoints/videos#/{video_id}/privacy/domains) for details on adding and removing domains.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "embed" })
  embed?: UploadVideoRequestBodyPrivacyEmbedEnum;

  /**
   * The video's privacy setting. When privacy is `users`, `application/json` is the only valid content type. Basic users can't set privacy to `unlisted`.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "view" })
  view?: UploadVideoRequestBodyPrivacyViewEnum;
}

/**
 * The reason for the video's MPAA rating.
 *
 * @remarks
 *
 * Option descriptions:
 *  * `at` - Adult themes
 *  * `bn` - Brief nudity
 *  * `n` - Nudity
 *  * `sl` - Strong language
 *  * `ss` - Sexual situations
 *  * `v` - Violence
 *
 */
export enum UploadVideoRequestBodyRatingsMpaaReasonEnum {
  At = "at",
  Bn = "bn",
  N = "n",
  Sl = "sl",
  Ss = "ss",
  V = "v",
}

export class UploadVideoRequestBodyRatingsMpaa extends SpeakeasyBase {
  /**
   * The reason for the video's MPAA rating.
   *
   * @remarks
   *
   * Option descriptions:
   *  * `at` - Adult themes
   *  * `bn` - Brief nudity
   *  * `n` - Nudity
   *  * `sl` - Strong language
   *  * `ss` - Sexual situations
   *  * `v` - Violence
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "reason" })
  reason?: UploadVideoRequestBodyRatingsMpaaReasonEnum;
}

/**
 * The reason for the video's TV rating.
 *
 * @remarks
 *
 * Option descriptions:
 *  * `d` - Suggestive dialogue
 *  * `fv` - Fantasy violence
 *  * `l` - Language
 *  * `ss` - Sexual situations
 *  * `v` - Violence
 *
 */
export enum UploadVideoRequestBodyRatingsTvReasonEnum {
  D = "d",
  Fv = "fv",
  L = "l",
  Ss = "ss",
  V = "v",
}

export class UploadVideoRequestBodyRatingsTv extends SpeakeasyBase {
  /**
   * The reason for the video's TV rating.
   *
   * @remarks
   *
   * Option descriptions:
   *  * `d` - Suggestive dialogue
   *  * `fv` - Fantasy violence
   *  * `l` - Language
   *  * `ss` - Sexual situations
   *  * `v` - Violence
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "reason" })
  reason?: UploadVideoRequestBodyRatingsTvReasonEnum;
}

export class UploadVideoRequestBodyRatings extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "mpaa" })
  @Type(() => UploadVideoRequestBodyRatingsMpaa)
  mpaa?: UploadVideoRequestBodyRatingsMpaa;

  @SpeakeasyMetadata()
  @Expose({ name: "tv" })
  @Type(() => UploadVideoRequestBodyRatingsTv)
  tv?: UploadVideoRequestBodyRatingsTv;
}

export class UploadVideoRequestBodyReviewPage extends SpeakeasyBase {
  /**
   * Enable or disable video review.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "active" })
  active?: boolean;
}

export class UploadVideoRequestBodySpatialDirectorTimeline extends SpeakeasyBase {
  /**
   * The timeline pitch. This value must be between -90 and 90.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "pitch" })
  pitch: number;

  /**
   * The timeline roll.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "roll" })
  roll?: number;

  /**
   * The 360 director timeline time code.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "time_code" })
  timeCode: number;

  /**
   * The timeline yaw. This value must be between 0 and 360.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "yaw" })
  yaw: number;
}

/**
 * The 360 spatial projection.
 */
export enum UploadVideoRequestBodySpatialProjectionEnum {
  Cubical = "cubical",
  Cylindrical = "cylindrical",
  Dome = "dome",
  Equirectangular = "equirectangular",
  Pyramid = "pyramid",
}

/**
 * The 360 spatial stereo format.
 */
export enum UploadVideoRequestBodySpatialStereoFormatEnum {
  LeftRight = "left-right",
  Mono = "mono",
  TopBottom = "top-bottom",
}

export class UploadVideoRequestBodySpatial extends SpeakeasyBase {
  /**
   * The 360 director timeline.
   */
  @SpeakeasyMetadata({
    elemType: UploadVideoRequestBodySpatialDirectorTimeline,
  })
  @Expose({ name: "director_timeline" })
  @Type(() => UploadVideoRequestBodySpatialDirectorTimeline)
  directorTimeline?: UploadVideoRequestBodySpatialDirectorTimeline[];

  /**
   * The 360 field of view: default 50, minimum 30, maximum 90.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "field_of_view" })
  fieldOfView?: number;

  /**
   * The 360 spatial projection.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "projection" })
  projection?: UploadVideoRequestBodySpatialProjectionEnum;

  /**
   * The 360 spatial stereo format.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "stereo_format" })
  stereoFormat?: UploadVideoRequestBodySpatialStereoFormatEnum;
}

/**
 * The upload approach.
 */
export enum UploadVideoRequestBodyUploadApproachEnum {
  Post = "post",
  Pull = "pull",
  Streaming = "streaming",
  Tus = "tus",
}

export class UploadVideoRequestBodyUpload extends SpeakeasyBase {
  /**
   * The upload approach.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "approach" })
  approach: UploadVideoRequestBodyUploadApproachEnum;

  /**
   * The public URL at which the video is hosted. The URL must be valid for at least 24 hours. Use this parameter when `approach` is `pull`.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "link" })
  link?: string;

  /**
   * The app's redirect URL. Use this parameter when `approach` is `post`.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "redirect_url" })
  redirectUrl?: string;

  /**
   * The size in bytes of the video to upload.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "size" })
  size?: string;
}

export class UploadVideoRequestBody extends SpeakeasyBase {
  /**
   * A list of values describing the content in this video. Find the full list in the [/contentratings](https://developer.vimeo.com/api/endpoints/videos#GET/contentratings) endpoint.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "content_rating" })
  contentRating?: string[];

  /**
   * The description of the video.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "description" })
  description?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "embed" })
  @Type(() => UploadVideoRequestBodyEmbed)
  embed?: UploadVideoRequestBodyEmbed;

  /**
   * The Creative Commons license.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "license" })
  license?: UploadVideoRequestBodyLicenseEnum;

  /**
   * The video's default language. For a full list of valid languages, use the [/languages?filter=texttracks](https://developer.vimeo.com/api/endpoints/videos#GET/languages) endpoint.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "locale" })
  locale?: string;

  /**
   * The title of the video.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name?: string;

  /**
   * The password. When you set `privacy.view` to `password`, you must provide the password as an additional parameter.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "password" })
  password?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "privacy" })
  @Type(() => UploadVideoRequestBodyPrivacy)
  privacy?: UploadVideoRequestBodyPrivacy;

  @SpeakeasyMetadata()
  @Expose({ name: "ratings" })
  @Type(() => UploadVideoRequestBodyRatings)
  ratings?: UploadVideoRequestBodyRatings;

  @SpeakeasyMetadata()
  @Expose({ name: "review_page" })
  @Type(() => UploadVideoRequestBodyReviewPage)
  reviewPage?: UploadVideoRequestBodyReviewPage;

  @SpeakeasyMetadata()
  @Expose({ name: "spatial" })
  @Type(() => UploadVideoRequestBodySpatial)
  spatial?: UploadVideoRequestBodySpatial;

  @SpeakeasyMetadata()
  @Expose({ name: "upload" })
  @Type(() => UploadVideoRequestBodyUpload)
  upload: UploadVideoRequestBodyUpload;
}

export class UploadVideoRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({
    data: "request, media_type=application/vnd.vimeo.video+json",
  })
  requestBody: UploadVideoRequestBody;

  /**
   * The ID of the user.
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=user_id",
  })
  userId: number;
}

export class UploadVideoResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * * Error code 2205: The body of the request isn't formatted properly.
   *
   * @remarks
   * * Error code 2204: The request contains invalid parameters.
   * * Error code 2204: The request contains invalid body parameters.
   * * Error code 2230: The upload type is invalid.
   * * Error code 3116: If a `type` payload parameter was supplied instead of `upload.approach`.
   */
  @SpeakeasyMetadata()
  error?: shared.ErrorT;

  /**
   * The upload procedure has begun.
   */
  @SpeakeasyMetadata()
  video?: shared.Video;
}
