// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type ReposCreatePagesSitePathParams struct {
	// The account owner of the repository. The name is not case sensitive.
	Owner string `pathParam:"style=simple,explode=false,name=owner"`
	// The name of the repository. The name is not case sensitive.
	Repo string `pathParam:"style=simple,explode=false,name=repo"`
}

// ReposCreatePagesSiteRequestBody1SourcePathEnum - The repository directory that includes the source files for the Pages site. Allowed paths are `/` or `/docs`. Default: `/`
type ReposCreatePagesSiteRequestBody1SourcePathEnum string

const (
	ReposCreatePagesSiteRequestBody1SourcePathEnumRoot     ReposCreatePagesSiteRequestBody1SourcePathEnum = "/"
	ReposCreatePagesSiteRequestBody1SourcePathEnumRootDocs ReposCreatePagesSiteRequestBody1SourcePathEnum = "/docs"
)

func (e *ReposCreatePagesSiteRequestBody1SourcePathEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "/":
		fallthrough
	case "/docs":
		*e = ReposCreatePagesSiteRequestBody1SourcePathEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ReposCreatePagesSiteRequestBody1SourcePathEnum: %s", s)
	}
}

// ReposCreatePagesSiteRequestBody1Source - The source branch and directory used to publish your Pages site.
type ReposCreatePagesSiteRequestBody1Source struct {
	// The repository branch used to publish your site's source files.
	Branch string `json:"branch"`
	// The repository directory that includes the source files for the Pages site. Allowed paths are `/` or `/docs`. Default: `/`
	Path *ReposCreatePagesSiteRequestBody1SourcePathEnum `json:"path,omitempty"`
}

// ReposCreatePagesSiteRequestBody1 - The source branch and directory used to publish your Pages site.
type ReposCreatePagesSiteRequestBody1 struct {
	// The source branch and directory used to publish your Pages site.
	Source ReposCreatePagesSiteRequestBody1Source `json:"source"`
}

type ReposCreatePagesSiteRequest struct {
	PathParams ReposCreatePagesSitePathParams
	Request    interface{} `request:"mediaType=application/json"`
}

type ReposCreatePagesSiteResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Conflict
	BasicError *shared.BasicError
	// Response
	Page *shared.Page
	// Validation failed
	ValidationError *shared.ValidationError
}
