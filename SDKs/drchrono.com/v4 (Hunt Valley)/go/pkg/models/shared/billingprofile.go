// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// BillingProfileCptCodesNdcCodeUnitsEnum - Can be one of `F2`(International Unit), `GR`(Gram), `ME`(Milligram), `ML`(Millimeter) or `UN`(Unit)
type BillingProfileCptCodesNdcCodeUnitsEnum string

const (
	BillingProfileCptCodesNdcCodeUnitsEnumF2 BillingProfileCptCodesNdcCodeUnitsEnum = "F2"
	BillingProfileCptCodesNdcCodeUnitsEnumGr BillingProfileCptCodesNdcCodeUnitsEnum = "GR"
	BillingProfileCptCodesNdcCodeUnitsEnumMe BillingProfileCptCodesNdcCodeUnitsEnum = "ME"
	BillingProfileCptCodesNdcCodeUnitsEnumMl BillingProfileCptCodesNdcCodeUnitsEnum = "ML"
	BillingProfileCptCodesNdcCodeUnitsEnumUn BillingProfileCptCodesNdcCodeUnitsEnum = "UN"
)

func (e *BillingProfileCptCodesNdcCodeUnitsEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "F2":
		fallthrough
	case "GR":
		fallthrough
	case "ME":
		fallthrough
	case "ML":
		fallthrough
	case "UN":
		*e = BillingProfileCptCodesNdcCodeUnitsEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for BillingProfileCptCodesNdcCodeUnitsEnum: %s", s)
	}
}

// BillingProfileCptCodesNdcCode - NDC code object
type BillingProfileCptCodesNdcCode struct {
	NdcPackageCode *string `json:"ndc_package_code,omitempty"`
	Quantity       *string `json:"quantity,omitempty"`
	// Can be one of `F2`(International Unit), `GR`(Gram), `ME`(Milligram), `ML`(Millimeter) or `UN`(Unit)
	Units *BillingProfileCptCodesNdcCodeUnitsEnum `json:"units,omitempty"`
}

// BillingProfileCptCodes - CPT Code object
type BillingProfileCptCodes struct {
	Code *string `json:"code,omitempty"`
	// ICD10 codes represented in strings
	DiagnosisPointersIcd10 []string `json:"diagnosis_pointers_icd10,omitempty"`
	// ICD9 codes represented in strings
	DiagnosisPointersIcd9 []string `json:"diagnosis_pointers_icd9,omitempty"`
	// Modifiers represented in strings
	Modifiers []string `json:"modifiers,omitempty"`
	// Array of NDC Code objects
	NdcCode []BillingProfileCptCodesNdcCode `json:"ndc_code,omitempty"`
	// This field is represented in string format
	Price *string `json:"price,omitempty"`
	// This field is represented in string format
	Quantity *string `json:"quantity,omitempty"`
}

// BillingProfileCustomProcedureCodes - Custom procedure code object
type BillingProfileCustomProcedureCodes struct {
	Code *string `json:"code,omitempty"`
	// This field is represented in string format
	Price *string `json:"price,omitempty"`
	// This field is represented in string format
	Quantity *string `json:"quantity,omitempty"`
}

// BillingProfileHcpcsCodesNdcCodeUnitsEnum - Can be one of `F2`(International Unit), `GR`(Gram), `ME`(Milligram), `ML`(Millimeter) or `UN`(Unit)
type BillingProfileHcpcsCodesNdcCodeUnitsEnum string

const (
	BillingProfileHcpcsCodesNdcCodeUnitsEnumF2 BillingProfileHcpcsCodesNdcCodeUnitsEnum = "F2"
	BillingProfileHcpcsCodesNdcCodeUnitsEnumGr BillingProfileHcpcsCodesNdcCodeUnitsEnum = "GR"
	BillingProfileHcpcsCodesNdcCodeUnitsEnumMe BillingProfileHcpcsCodesNdcCodeUnitsEnum = "ME"
	BillingProfileHcpcsCodesNdcCodeUnitsEnumMl BillingProfileHcpcsCodesNdcCodeUnitsEnum = "ML"
	BillingProfileHcpcsCodesNdcCodeUnitsEnumUn BillingProfileHcpcsCodesNdcCodeUnitsEnum = "UN"
)

func (e *BillingProfileHcpcsCodesNdcCodeUnitsEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "F2":
		fallthrough
	case "GR":
		fallthrough
	case "ME":
		fallthrough
	case "ML":
		fallthrough
	case "UN":
		*e = BillingProfileHcpcsCodesNdcCodeUnitsEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for BillingProfileHcpcsCodesNdcCodeUnitsEnum: %s", s)
	}
}

// BillingProfileHcpcsCodesNdcCode - NDC code object
type BillingProfileHcpcsCodesNdcCode struct {
	NdcPackageCode *string `json:"ndc_package_code,omitempty"`
	Quantity       *string `json:"quantity,omitempty"`
	// Can be one of `F2`(International Unit), `GR`(Gram), `ME`(Milligram), `ML`(Millimeter) or `UN`(Unit)
	Units *BillingProfileHcpcsCodesNdcCodeUnitsEnum `json:"units,omitempty"`
}

// BillingProfileHcpcsCodes - HCPCS code object
type BillingProfileHcpcsCodes struct {
	Code *string `json:"code,omitempty"`
	// ICD10 codes represented in array of strings
	DiagnosisPointersIcd10 []string `json:"diagnosis_pointers_icd10,omitempty"`
	// ICD9 codes represented in array of strings
	DiagnosisPointersIcd9 []string `json:"diagnosis_pointers_icd9,omitempty"`
	// Modifiers represented in array of strings
	Modifiers []string `json:"modifiers,omitempty"`
	// Array of NDC Code objects
	NdcCode []BillingProfileHcpcsCodesNdcCode `json:"ndc_code,omitempty"`
	// This field is represented in string format
	Price *string `json:"price,omitempty"`
	// This field is represented in string format
	Quantity *string `json:"quantity,omitempty"`
}

// BillingProfile - OK
type BillingProfile struct {
	Archived *bool `json:"archived,omitempty"`
	// Array of CPT Code objects
	CptCodes  []BillingProfileCptCodes `json:"cpt_codes,omitempty"`
	CreatedAt *string                  `json:"created_at,omitempty"`
	// Array of custom procedure code objects
	CustomProcedureCodes []BillingProfileCustomProcedureCodes `json:"custom_procedure_codes,omitempty"`
	Doctor               *string                              `json:"doctor,omitempty"`
	// Array of HCPCS Code objects
	HcpcsCodes []BillingProfileHcpcsCodes `json:"hcpcs_codes,omitempty"`
	// ICD10 Codes represented in string format
	Icd10Codes []string `json:"icd10_codes,omitempty"`
	// ICD9 Codes represented in string format
	Icd9Codes []string `json:"icd9_codes,omitempty"`
	ID        *int64   `json:"id,omitempty"`
	Name      *string  `json:"name,omitempty"`
	UpdatedAt *string  `json:"updated_at,omitempty"`
}
