// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"time"
)

type GetOrganizationInventoryDevicesPathParams struct {
	OrganizationID string `pathParam:"style=simple,explode=false,name=organizationId"`
}

type GetOrganizationInventoryDevicesProductTypesEnum string

const (
	GetOrganizationInventoryDevicesProductTypesEnumAppliance       GetOrganizationInventoryDevicesProductTypesEnum = "appliance"
	GetOrganizationInventoryDevicesProductTypesEnumCamera          GetOrganizationInventoryDevicesProductTypesEnum = "camera"
	GetOrganizationInventoryDevicesProductTypesEnumCellularGateway GetOrganizationInventoryDevicesProductTypesEnum = "cellularGateway"
	GetOrganizationInventoryDevicesProductTypesEnumSensor          GetOrganizationInventoryDevicesProductTypesEnum = "sensor"
	GetOrganizationInventoryDevicesProductTypesEnumSwitch          GetOrganizationInventoryDevicesProductTypesEnum = "switch"
	GetOrganizationInventoryDevicesProductTypesEnumSystemsManager  GetOrganizationInventoryDevicesProductTypesEnum = "systemsManager"
	GetOrganizationInventoryDevicesProductTypesEnumWireless        GetOrganizationInventoryDevicesProductTypesEnum = "wireless"
)

func (e *GetOrganizationInventoryDevicesProductTypesEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "appliance":
		fallthrough
	case "camera":
		fallthrough
	case "cellularGateway":
		fallthrough
	case "sensor":
		fallthrough
	case "switch":
		fallthrough
	case "systemsManager":
		fallthrough
	case "wireless":
		*e = GetOrganizationInventoryDevicesProductTypesEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetOrganizationInventoryDevicesProductTypesEnum: %s", s)
	}
}

// GetOrganizationInventoryDevicesTagsFilterTypeEnum - To use with 'tags' parameter, to filter devices which contain ANY or ALL given tags. Accepted values are 'withAnyTags' or 'withAllTags', default is 'withAnyTags'.
type GetOrganizationInventoryDevicesTagsFilterTypeEnum string

const (
	GetOrganizationInventoryDevicesTagsFilterTypeEnumWithAllTags GetOrganizationInventoryDevicesTagsFilterTypeEnum = "withAllTags"
	GetOrganizationInventoryDevicesTagsFilterTypeEnumWithAnyTags GetOrganizationInventoryDevicesTagsFilterTypeEnum = "withAnyTags"
)

func (e *GetOrganizationInventoryDevicesTagsFilterTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "withAllTags":
		fallthrough
	case "withAnyTags":
		*e = GetOrganizationInventoryDevicesTagsFilterTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetOrganizationInventoryDevicesTagsFilterTypeEnum: %s", s)
	}
}

// GetOrganizationInventoryDevicesUsedStateEnum - Filter results by used or unused inventory. Accepted values are 'used' or 'unused'.
type GetOrganizationInventoryDevicesUsedStateEnum string

const (
	GetOrganizationInventoryDevicesUsedStateEnumUnused GetOrganizationInventoryDevicesUsedStateEnum = "unused"
	GetOrganizationInventoryDevicesUsedStateEnumUsed   GetOrganizationInventoryDevicesUsedStateEnum = "used"
)

func (e *GetOrganizationInventoryDevicesUsedStateEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "unused":
		fallthrough
	case "used":
		*e = GetOrganizationInventoryDevicesUsedStateEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetOrganizationInventoryDevicesUsedStateEnum: %s", s)
	}
}

type GetOrganizationInventoryDevicesQueryParams struct {
	// A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
	EndingBefore *string `queryParam:"style=form,explode=true,name=endingBefore"`
	// Search for devices in inventory based on mac addresses.
	Macs []string `queryParam:"style=form,explode=false,name=macs"`
	// Search for devices in inventory based on model.
	Models []string `queryParam:"style=form,explode=false,name=models"`
	// Search for devices in inventory based on network ids.
	NetworkIds []string `queryParam:"style=form,explode=false,name=networkIds"`
	// The number of entries per page returned. Acceptable range is 3 - 1000. Default is 1000.
	PerPage *int64 `queryParam:"style=form,explode=true,name=perPage"`
	// Filter devices by product type. Accepted values are appliance, camera, cellularGateway, sensor, switch, systemsManager, and wireless.
	ProductTypes []GetOrganizationInventoryDevicesProductTypesEnum `queryParam:"style=form,explode=false,name=productTypes"`
	// Search for devices in inventory based on serial number, mac address, or model.
	Search *string `queryParam:"style=form,explode=true,name=search"`
	// Search for devices in inventory based on serials.
	Serials []string `queryParam:"style=form,explode=false,name=serials"`
	// A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
	StartingAfter *string `queryParam:"style=form,explode=true,name=startingAfter"`
	// Filter devices by tags. The filtering is case-sensitive. If tags are included, 'tagsFilterType' should also be included (see below).
	Tags []string `queryParam:"style=form,explode=false,name=tags"`
	// To use with 'tags' parameter, to filter devices which contain ANY or ALL given tags. Accepted values are 'withAnyTags' or 'withAllTags', default is 'withAnyTags'.
	TagsFilterType *GetOrganizationInventoryDevicesTagsFilterTypeEnum `queryParam:"style=form,explode=true,name=tagsFilterType"`
	// Filter results by used or unused inventory. Accepted values are 'used' or 'unused'.
	UsedState *GetOrganizationInventoryDevicesUsedStateEnum `queryParam:"style=form,explode=true,name=usedState"`
}

type GetOrganizationInventoryDevicesRequest struct {
	PathParams  GetOrganizationInventoryDevicesPathParams
	QueryParams GetOrganizationInventoryDevicesQueryParams
}

type GetOrganizationInventoryDevices200ApplicationJSON struct {
	// Claimed time of the device
	ClaimedAt *time.Time `json:"claimedAt,omitempty"`
	// License expiration date of the device
	LicenseExpirationDate *time.Time `json:"licenseExpirationDate,omitempty"`
	// MAC address of the device
	Mac *string `json:"mac,omitempty"`
	// Model type of the device
	Model *string `json:"model,omitempty"`
	// Name of the device
	Name *string `json:"name,omitempty"`
	// Network Id of the device
	NetworkID *string `json:"networkId,omitempty"`
	// Order number of the device
	OrderNumber *string `json:"orderNumber,omitempty"`
	// Product type of the device
	ProductType *string `json:"productType,omitempty"`
	// Serial number of the device
	Serial *string `json:"serial,omitempty"`
	// Device tags
	Tags []string `json:"tags,omitempty"`
}

type GetOrganizationInventoryDevicesResponse struct {
	ContentType string
	Headers     map[string][]string
	StatusCode  int
	RawResponse *http.Response
	// Successful operation
	GetOrganizationInventoryDevices200ApplicationJSONObjects []GetOrganizationInventoryDevices200ApplicationJSON
}
