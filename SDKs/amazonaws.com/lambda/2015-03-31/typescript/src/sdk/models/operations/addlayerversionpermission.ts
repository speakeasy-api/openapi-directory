/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
import { Expose } from "class-transformer";

export class AddLayerVersionPermissionRequestBody extends SpeakeasyBase {
  /**
   * The API action that grants access to the layer. For example, <code>lambda:GetLayerVersion</code>.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "Action" })
  action: string;

  /**
   * With the principal set to <code>*</code>, grant permission to all accounts in the specified organization.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "OrganizationId" })
  organizationId?: string;

  /**
   * An account ID, or <code>*</code> to grant layer usage permission to all accounts in an organization, or all Amazon Web Services accounts (if <code>organizationId</code> is not specified). For the last case, make sure that you really do want all Amazon Web Services accounts to have usage permission to this layer.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "Principal" })
  principal: string;

  /**
   * An identifier that distinguishes the policy from others on the same layer version.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "StatementId" })
  statementId: string;
}

export class AddLayerVersionPermissionRequest extends SpeakeasyBase {
  /**
   * The name or Amazon Resource Name (ARN) of the layer.
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=LayerName",
  })
  layerName: string;

  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  requestBody: AddLayerVersionPermissionRequestBody;

  /**
   * Only update the policy if the revision ID matches the ID specified. Use this option to avoid modifying a policy that has changed since you last read it.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=RevisionId",
  })
  revisionId?: string;

  /**
   * The version number.
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=VersionNumber",
  })
  versionNumber: number;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Algorithm",
  })
  xAmzAlgorithm?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Content-Sha256",
  })
  xAmzContentSha256?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Credential",
  })
  xAmzCredential?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Date",
  })
  xAmzDate?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Security-Token",
  })
  xAmzSecurityToken?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Signature",
  })
  xAmzSignature?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-SignedHeaders",
  })
  xAmzSignedHeaders?: string;
}

export class AddLayerVersionPermissionResponse extends SpeakeasyBase {
  /**
   * Success
   */
  @SpeakeasyMetadata()
  addLayerVersionPermissionResponse?: shared.AddLayerVersionPermissionResponse;

  @SpeakeasyMetadata()
  contentType: string;

  /**
   * InvalidParameterValueException
   */
  @SpeakeasyMetadata()
  invalidParameterValueException?: any;

  /**
   * PolicyLengthExceededException
   */
  @SpeakeasyMetadata()
  policyLengthExceededException?: any;

  /**
   * PreconditionFailedException
   */
  @SpeakeasyMetadata()
  preconditionFailedException?: any;

  /**
   * ResourceConflictException
   */
  @SpeakeasyMetadata()
  resourceConflictException?: any;

  /**
   * ResourceNotFoundException
   */
  @SpeakeasyMetadata()
  resourceNotFoundException?: any;

  /**
   * ServiceException
   */
  @SpeakeasyMetadata()
  serviceException?: any;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * TooManyRequestsException
   */
  @SpeakeasyMetadata()
  tooManyRequestsException?: any;
}
