/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

/**
 * VideoV1CompositionHook - Created
 */
public class VideoV1CompositionHook {
    /**
     * The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the CompositionHook resource.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("account_sid")
    public String accountSid;

    public VideoV1CompositionHook withAccountSid(String accountSid) {
        this.accountSid = accountSid;
        return this;
    }
    
    /**
     * The array of track names to include in the compositions created by the composition hook. A composition triggered by the composition hook includes all audio sources specified in `audio_sources` except those specified in `audio_sources_excluded`. The track names in this property can include an asterisk as a wild card character, which matches zero or more characters in a track name. For example, `student*` includes tracks named `student` as well as `studentTeam`. Please, be aware that either video_layout or audio_sources have to be provided to get a valid creation request
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("audio_sources")
    public String[] audioSources;

    public VideoV1CompositionHook withAudioSources(String[] audioSources) {
        this.audioSources = audioSources;
        return this;
    }
    
    /**
     * The array of track names to exclude from the compositions created by the composition hook. A composition triggered by the composition hook includes all audio sources specified in `audio_sources` except for those specified in `audio_sources_excluded`. The track names in this property can include an asterisk as a wild card character, which matches zero or more characters in a track name. For example, `student*` excludes `student` as well as `studentTeam`. This parameter can also be empty.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("audio_sources_excluded")
    public String[] audioSourcesExcluded;

    public VideoV1CompositionHook withAudioSourcesExcluded(String[] audioSourcesExcluded) {
        this.audioSourcesExcluded = audioSourcesExcluded;
        return this;
    }
    
    /**
     * The date and time in GMT when the resource was created specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("date_created")
    public OffsetDateTime dateCreated;

    public VideoV1CompositionHook withDateCreated(OffsetDateTime dateCreated) {
        this.dateCreated = dateCreated;
        return this;
    }
    
    /**
     * The date and time in GMT when the resource was last updated specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("date_updated")
    public OffsetDateTime dateUpdated;

    public VideoV1CompositionHook withDateUpdated(OffsetDateTime dateUpdated) {
        this.dateUpdated = dateUpdated;
        return this;
    }
    
    /**
     * Whether the CompositionHook is active. When `true`, the CompositionHook is triggered for every completed Group Room on the account. When `false`, the CompositionHook is never triggered.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("enabled")
    public Boolean enabled;

    public VideoV1CompositionHook withEnabled(Boolean enabled) {
        this.enabled = enabled;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("format")
    public CompositionHookEnumFormatEnum format;

    public VideoV1CompositionHook withFormat(CompositionHookEnumFormatEnum format) {
        this.format = format;
        return this;
    }
    
    /**
     * The string that you assigned to describe the resource. Can be up to 100 characters long and must be unique within the account.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("friendly_name")
    public String friendlyName;

    public VideoV1CompositionHook withFriendlyName(String friendlyName) {
        this.friendlyName = friendlyName;
        return this;
    }
    
    /**
     * The dimensions of the video image in pixels expressed as columns (width) and rows (height). The string's format is `{width}x{height}`, such as `640x480`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("resolution")
    public String resolution;

    public VideoV1CompositionHook withResolution(String resolution) {
        this.resolution = resolution;
        return this;
    }
    
    /**
     * The unique string that we created to identify the CompositionHook resource.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sid")
    public String sid;

    public VideoV1CompositionHook withSid(String sid) {
        this.sid = sid;
        return this;
    }
    
    /**
     * The URL we call using the `status_callback_method` to send status information to your application.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("status_callback")
    public String statusCallback;

    public VideoV1CompositionHook withStatusCallback(String statusCallback) {
        this.statusCallback = statusCallback;
        return this;
    }
    
    /**
     * The HTTP method we should use to call `status_callback`. Can be `POST` or `GET` and defaults to `POST`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("status_callback_method")
    public VideoV1CompositionHookStatusCallbackMethodEnum statusCallbackMethod;

    public VideoV1CompositionHook withStatusCallbackMethod(VideoV1CompositionHookStatusCallbackMethodEnum statusCallbackMethod) {
        this.statusCallbackMethod = statusCallbackMethod;
        return this;
    }
    
    /**
     * Whether intervals with no media are clipped, as specified in the POST request that created the CompositionHook resource. Compositions with `trim` enabled are shorter when the Room is created and no Participant joins for a while as well as if all the Participants leave the room and join later, because those gaps will be removed. See [Specifying Video Layouts](https://www.twilio.com/docs/video/api/compositions-resource#specifying-video-layouts) for more info.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("trim")
    public Boolean trim;

    public VideoV1CompositionHook withTrim(Boolean trim) {
        this.trim = trim;
        return this;
    }
    
    /**
     * The absolute URL of the resource.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("url")
    public String url;

    public VideoV1CompositionHook withUrl(String url) {
        this.url = url;
        return this;
    }
    
    /**
     * A JSON object that describes the video layout of the composition in terms of regions as specified in the HTTP POST request that created the CompositionHook resource. See [POST Parameters](https://www.twilio.com/docs/video/api/compositions-resource#http-post-parameters) for more information. Please, be aware that either video_layout or audio_sources have to be provided to get a valid creation request
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("video_layout")
    public Object videoLayout;

    public VideoV1CompositionHook withVideoLayout(Object videoLayout) {
        this.videoLayout = videoLayout;
        return this;
    }
    
    public VideoV1CompositionHook(){}
}
