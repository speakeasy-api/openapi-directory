"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import channel as shared_channel
from ..shared import checkpointconfig as shared_checkpointconfig
from ..shared import hyperparameteralgorithmspecification as shared_hyperparameteralgorithmspecification
from ..shared import hyperparametertuningjobobjective as shared_hyperparametertuningjobobjective
from ..shared import hyperparametertuningresourceconfig as shared_hyperparametertuningresourceconfig
from ..shared import outputdataconfig as shared_outputdataconfig
from ..shared import parameterranges as shared_parameterranges
from ..shared import resourceconfig as shared_resourceconfig
from ..shared import retrystrategy as shared_retrystrategy
from ..shared import stoppingcondition as shared_stoppingcondition
from ..shared import vpcconfig as shared_vpcconfig
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class HyperParameterTrainingJobDefinition:
    r"""Defines the training jobs launched by a hyperparameter tuning job."""
    
    algorithm_specification: shared_hyperparameteralgorithmspecification.HyperParameterAlgorithmSpecification = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AlgorithmSpecification') }})  
    output_data_config: shared_outputdataconfig.OutputDataConfig = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('OutputDataConfig') }})  
    role_arn: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('RoleArn') }})  
    stopping_condition: shared_stoppingcondition.StoppingCondition = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('StoppingCondition') }})  
    checkpoint_config: Optional[shared_checkpointconfig.CheckpointConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CheckpointConfig'), 'exclude': lambda f: f is None }})
    r"""Contains information about the output location for managed spot training checkpoint data."""  
    definition_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DefinitionName'), 'exclude': lambda f: f is None }})  
    enable_inter_container_traffic_encryption: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('EnableInterContainerTrafficEncryption'), 'exclude': lambda f: f is None }})  
    enable_managed_spot_training: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('EnableManagedSpotTraining'), 'exclude': lambda f: f is None }})  
    enable_network_isolation: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('EnableNetworkIsolation'), 'exclude': lambda f: f is None }})  
    environment: Optional[dict[str, str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Environment'), 'exclude': lambda f: f is None }})  
    hyper_parameter_ranges: Optional[shared_parameterranges.ParameterRanges] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('HyperParameterRanges'), 'exclude': lambda f: f is None }})
    r"""<p>Specifies ranges of integer, continuous, and categorical hyperparameters that a hyperparameter tuning job searches. The hyperparameter tuning job launches training jobs with hyperparameter values within these ranges to find the combination of values that result in the training job with the best performance as measured by the objective metric of the hyperparameter tuning job.</p> <note> <p>The maximum number of items specified for <code>Array Members</code> refers to the maximum number of hyperparameters for each range and also the maximum for the hyperparameter tuning job itself. That is, the sum of the number of hyperparameters for all the ranges can't exceed the maximum number specified.</p> </note>"""  
    hyper_parameter_tuning_resource_config: Optional[shared_hyperparametertuningresourceconfig.HyperParameterTuningResourceConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('HyperParameterTuningResourceConfig'), 'exclude': lambda f: f is None }})  
    input_data_config: Optional[list[shared_channel.Channel]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('InputDataConfig'), 'exclude': lambda f: f is None }})  
    resource_config: Optional[shared_resourceconfig.ResourceConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ResourceConfig'), 'exclude': lambda f: f is None }})  
    retry_strategy: Optional[shared_retrystrategy.RetryStrategy] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('RetryStrategy'), 'exclude': lambda f: f is None }})  
    static_hyper_parameters: Optional[dict[str, str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('StaticHyperParameters'), 'exclude': lambda f: f is None }})  
    tuning_objective: Optional[shared_hyperparametertuningjobobjective.HyperParameterTuningJobObjective] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TuningObjective'), 'exclude': lambda f: f is None }})
    r"""Defines the objective metric for a hyperparameter tuning job. Hyperparameter tuning uses the value of this metric to evaluate the training jobs it launches, and returns the training job that results in either the highest or lowest value for this metric, depending on the value you specify for the <code>Type</code> parameter."""  
    vpc_config: Optional[shared_vpcconfig.VpcConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('VpcConfig'), 'exclude': lambda f: f is None }})  
    