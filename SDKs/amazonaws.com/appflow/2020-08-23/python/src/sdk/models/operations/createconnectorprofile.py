"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import connectorprofilecredentials as shared_connectorprofilecredentials
from ..shared import connectorprofileproperties as shared_connectorprofileproperties
from ..shared import createconnectorprofileresponse as shared_createconnectorprofileresponse
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Any, Optional

class CreateConnectorProfileRequestBodyConnectionModeEnum(str, Enum):
    r"""Indicates the connection mode and specifies whether it is public or private. Private flows use Amazon Web Services PrivateLink to route data over Amazon Web Services infrastructure without exposing it to the public internet."""
    PUBLIC = 'Public'
    PRIVATE = 'Private'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateConnectorProfileRequestBodyConnectorProfileConfig:
    r"""Defines the connector-specific configuration and credentials for the connector profile."""
    
    connector_profile_credentials: Optional[shared_connectorprofilecredentials.ConnectorProfileCredentials] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('connectorProfileCredentials'), 'exclude': lambda f: f is None }})  
    connector_profile_properties: Optional[shared_connectorprofileproperties.ConnectorProfileProperties] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('connectorProfileProperties'), 'exclude': lambda f: f is None }})  
    
class CreateConnectorProfileRequestBodyConnectorTypeEnum(str, Enum):
    r"""The type of connector, such as Salesforce, Amplitude, and so on."""
    SALESFORCE = 'Salesforce'
    SINGULAR = 'Singular'
    SLACK = 'Slack'
    REDSHIFT = 'Redshift'
    S3 = 'S3'
    MARKETO = 'Marketo'
    GOOGLEANALYTICS = 'Googleanalytics'
    ZENDESK = 'Zendesk'
    SERVICENOW = 'Servicenow'
    DATADOG = 'Datadog'
    TRENDMICRO = 'Trendmicro'
    SNOWFLAKE = 'Snowflake'
    DYNATRACE = 'Dynatrace'
    INFORNEXUS = 'Infornexus'
    AMPLITUDE = 'Amplitude'
    VEEVA = 'Veeva'
    EVENT_BRIDGE = 'EventBridge'
    LOOKOUT_METRICS = 'LookoutMetrics'
    UPSOLVER = 'Upsolver'
    HONEYCODE = 'Honeycode'
    CUSTOMER_PROFILES = 'CustomerProfiles'
    SAPO_DATA = 'SAPOData'
    CUSTOM_CONNECTOR = 'CustomConnector'
    PARDOT = 'Pardot'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateConnectorProfileRequestBody:
    
    connection_mode: CreateConnectorProfileRequestBodyConnectionModeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('connectionMode') }})
    r"""Indicates the connection mode and specifies whether it is public or private. Private flows use Amazon Web Services PrivateLink to route data over Amazon Web Services infrastructure without exposing it to the public internet."""  
    connector_profile_config: CreateConnectorProfileRequestBodyConnectorProfileConfig = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('connectorProfileConfig') }})
    r"""Defines the connector-specific configuration and credentials for the connector profile."""  
    connector_profile_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('connectorProfileName') }})
    r"""The name of the connector profile. The name is unique for each <code>ConnectorProfile</code> in your Amazon Web Services account."""  
    connector_type: CreateConnectorProfileRequestBodyConnectorTypeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('connectorType') }})
    r"""The type of connector, such as Salesforce, Amplitude, and so on."""  
    connector_label: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('connectorLabel'), 'exclude': lambda f: f is None }})
    r"""The label of the connector. The label is unique for each <code>ConnectorRegistration</code> in your Amazon Web Services account. Only needed if calling for CUSTOMCONNECTOR connector type/."""  
    kms_arn: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('kmsArn'), 'exclude': lambda f: f is None }})
    r"""The ARN (Amazon Resource Name) of the Key Management Service (KMS) key you provide for encryption. This is required if you do not want to use the Amazon AppFlow-managed KMS key. If you don't provide anything here, Amazon AppFlow uses the Amazon AppFlow-managed KMS key."""  
    

@dataclasses.dataclass
class CreateConnectorProfileRequest:
    
    request_body: CreateConnectorProfileRequestBody = dataclasses.field(metadata={'request': { 'media_type': 'application/json' }})  
    x_amz_algorithm: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Algorithm', 'style': 'simple', 'explode': False }})  
    x_amz_content_sha256: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Content-Sha256', 'style': 'simple', 'explode': False }})  
    x_amz_credential: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Credential', 'style': 'simple', 'explode': False }})  
    x_amz_date: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Date', 'style': 'simple', 'explode': False }})  
    x_amz_security_token: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Security-Token', 'style': 'simple', 'explode': False }})  
    x_amz_signature: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Signature', 'style': 'simple', 'explode': False }})  
    x_amz_signed_headers: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-SignedHeaders', 'style': 'simple', 'explode': False }})  
    

@dataclasses.dataclass
class CreateConnectorProfileResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    conflict_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ConflictException"""  
    connector_authentication_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ConnectorAuthenticationException"""  
    create_connector_profile_response: Optional[shared_createconnectorprofileresponse.CreateConnectorProfileResponse] = dataclasses.field(default=None)
    r"""Success"""  
    internal_server_exception: Optional[Any] = dataclasses.field(default=None)
    r"""InternalServerException"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    service_quota_exceeded_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ServiceQuotaExceededException"""  
    validation_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ValidationException"""  
    