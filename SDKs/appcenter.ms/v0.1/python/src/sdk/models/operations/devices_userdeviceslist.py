"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class DevicesUserDevicesList403ApplicationJSONCodeEnum(str, Enum):
    BAD_REQUEST = 'BadRequest'
    CONFLICT = 'Conflict'
    NOT_ACCEPTABLE = 'NotAcceptable'
    NOT_FOUND = 'NotFound'
    INTERNAL_SERVER_ERROR = 'InternalServerError'
    UNAUTHORIZED = 'Unauthorized'
    TOO_MANY_REQUESTS = 'TooManyRequests'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class DevicesUserDevicesList403ApplicationJSON:
    r"""<b>forbidden</b>: The user is not allowed to view someone else's devices."""
    
    code: DevicesUserDevicesList403ApplicationJSONCodeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('code') }})  
    message: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('message') }})  
    
class DevicesUserDevicesList400ApplicationJSONCodeEnum(str, Enum):
    BAD_REQUEST = 'BadRequest'
    CONFLICT = 'Conflict'
    NOT_ACCEPTABLE = 'NotAcceptable'
    NOT_FOUND = 'NotFound'
    INTERNAL_SERVER_ERROR = 'InternalServerError'
    UNAUTHORIZED = 'Unauthorized'
    TOO_MANY_REQUESTS = 'TooManyRequests'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class DevicesUserDevicesList400ApplicationJSON:
    r"""<b>bad_request</b>: Devices information can only be requested for iOS apps."""
    
    code: DevicesUserDevicesList400ApplicationJSONCodeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('code') }})  
    message: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('message') }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class DevicesUserDevicesList200ApplicationJSON:
    r"""The information for a single iOS device"""
    
    device_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('device_name') }})
    r"""The device description, in the format \\"iPhone 7 Plus (A1784)\\" """  
    model: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('model') }})
    r"""The model identifier of the device, in the format iDeviceM,N"""  
    os_build: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('os_build') }})
    r"""The last known OS version running on the device"""  
    os_version: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('os_version') }})
    r"""The last known OS version running on the device"""  
    status: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status') }})
    r"""The provisioning status of the device."""  
    udid: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('udid') }})
    r"""The Unique Device IDentifier of the device"""  
    full_device_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('full_device_name'), 'exclude': lambda f: f is None }})
    r"""A combination of the device model name and the owner name."""  
    imei: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('imei'), 'exclude': lambda f: f is None }})
    r"""The device's International Mobile Equipment Identity number. Always empty or undefined at present."""  
    owner_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('owner_id'), 'exclude': lambda f: f is None }})
    r"""The user ID of the device owner."""  
    registered_at: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('registered_at'), 'exclude': lambda f: f is None }})
    r"""Timestamp of when the device was registered in ISO format."""  
    serial: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('serial'), 'exclude': lambda f: f is None }})
    r"""The device's serial number. Always empty or undefined at present."""  
    

@dataclasses.dataclass
class DevicesUserDevicesListResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    devices_user_devices_list_200_application_json_objects: Optional[list[DevicesUserDevicesList200ApplicationJSON]] = dataclasses.field(default=None)
    r"""Success"""  
    devices_user_devices_list_400_application_json_object: Optional[DevicesUserDevicesList400ApplicationJSON] = dataclasses.field(default=None)
    r"""<b>bad_request</b>: Devices information can only be requested for iOS apps."""  
    devices_user_devices_list_403_application_json_object: Optional[DevicesUserDevicesList403ApplicationJSON] = dataclasses.field(default=None)
    r"""<b>forbidden</b>: The user is not allowed to view someone else's devices."""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    