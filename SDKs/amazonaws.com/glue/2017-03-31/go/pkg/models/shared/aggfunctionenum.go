// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type AggFunctionEnum string

const (
	AggFunctionEnumAvg           AggFunctionEnum = "avg"
	AggFunctionEnumCountDistinct AggFunctionEnum = "countDistinct"
	AggFunctionEnumCount         AggFunctionEnum = "count"
	AggFunctionEnumFirst         AggFunctionEnum = "first"
	AggFunctionEnumLast          AggFunctionEnum = "last"
	AggFunctionEnumKurtosis      AggFunctionEnum = "kurtosis"
	AggFunctionEnumMax           AggFunctionEnum = "max"
	AggFunctionEnumMin           AggFunctionEnum = "min"
	AggFunctionEnumSkewness      AggFunctionEnum = "skewness"
	AggFunctionEnumStddevSamp    AggFunctionEnum = "stddev_samp"
	AggFunctionEnumStddevPop     AggFunctionEnum = "stddev_pop"
	AggFunctionEnumSum           AggFunctionEnum = "sum"
	AggFunctionEnumSumDistinct   AggFunctionEnum = "sumDistinct"
	AggFunctionEnumVarSamp       AggFunctionEnum = "var_samp"
	AggFunctionEnumVarPop        AggFunctionEnum = "var_pop"
)

func (e AggFunctionEnum) ToPointer() *AggFunctionEnum {
	return &e
}

func (e *AggFunctionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "avg":
		fallthrough
	case "countDistinct":
		fallthrough
	case "count":
		fallthrough
	case "first":
		fallthrough
	case "last":
		fallthrough
	case "kurtosis":
		fallthrough
	case "max":
		fallthrough
	case "min":
		fallthrough
	case "skewness":
		fallthrough
	case "stddev_samp":
		fallthrough
	case "stddev_pop":
		fallthrough
	case "sum":
		fallthrough
	case "sumDistinct":
		fallthrough
	case "var_samp":
		fallthrough
	case "var_pop":
		*e = AggFunctionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AggFunctionEnum: %v", v)
	}
}
