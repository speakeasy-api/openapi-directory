"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import distribution as shared_distribution
from ..shared import updatedistributionconfigurationresponse as shared_updatedistributionconfigurationresponse
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Any, Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateDistributionConfigurationRequestBody:
    
    client_token: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('clientToken') }})
    r"""The idempotency token of the distribution configuration."""  
    distribution_configuration_arn: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('distributionConfigurationArn') }})
    r"""The Amazon Resource Name (ARN) of the distribution configuration that you want to update."""  
    distributions: list[shared_distribution.Distribution] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('distributions') }})
    r"""The distributions of the distribution configuration."""  
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description'), 'exclude': lambda f: f is None }})
    r"""The description of the distribution configuration."""  
    

@dataclasses.dataclass
class UpdateDistributionConfigurationRequest:
    
    request_body: UpdateDistributionConfigurationRequestBody = dataclasses.field(metadata={'request': { 'media_type': 'application/json' }})  
    x_amz_algorithm: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Algorithm', 'style': 'simple', 'explode': False }})  
    x_amz_content_sha256: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Content-Sha256', 'style': 'simple', 'explode': False }})  
    x_amz_credential: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Credential', 'style': 'simple', 'explode': False }})  
    x_amz_date: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Date', 'style': 'simple', 'explode': False }})  
    x_amz_security_token: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Security-Token', 'style': 'simple', 'explode': False }})  
    x_amz_signature: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Signature', 'style': 'simple', 'explode': False }})  
    x_amz_signed_headers: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-SignedHeaders', 'style': 'simple', 'explode': False }})  
    

@dataclasses.dataclass
class UpdateDistributionConfigurationResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    call_rate_limit_exceeded_exception: Optional[Any] = dataclasses.field(default=None)
    r"""CallRateLimitExceededException"""  
    client_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ClientException"""  
    forbidden_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ForbiddenException"""  
    idempotent_parameter_mismatch_exception: Optional[Any] = dataclasses.field(default=None)
    r"""IdempotentParameterMismatchException"""  
    invalid_parameter_combination_exception: Optional[Any] = dataclasses.field(default=None)
    r"""InvalidParameterCombinationException"""  
    invalid_request_exception: Optional[Any] = dataclasses.field(default=None)
    r"""InvalidRequestException"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    resource_in_use_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ResourceInUseException"""  
    service_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ServiceException"""  
    service_unavailable_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ServiceUnavailableException"""  
    update_distribution_configuration_response: Optional[shared_updatedistributionconfigurationresponse.UpdateDistributionConfigurationResponse] = dataclasses.field(default=None)
    r"""Success"""  
    