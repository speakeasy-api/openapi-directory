"use strict";
/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CustomEvent = exports.CustomEventEventTypeEnum = void 0;
var utils_1 = require("../../../internal/utils");
var customeventclickannotation_1 = require("./customeventclickannotation");
var customeventimpressionannotation_1 = require("./customeventimpressionannotation");
var customeventinsert_1 = require("./customeventinsert");
var customvariable_1 = require("./customvariable");
var class_transformer_1 = require("class-transformer");
/**
 * The type of event. If INSERT, the fields in insertEvent need to be populated. If ANNOTATE, the fields in either annotateClickEvent or annotateImpressionEvent need to be populated.
 */
var CustomEventEventTypeEnum;
(function (CustomEventEventTypeEnum) {
    CustomEventEventTypeEnum["Unknown"] = "UNKNOWN";
    CustomEventEventTypeEnum["Insert"] = "INSERT";
    CustomEventEventTypeEnum["Annotate"] = "ANNOTATE";
})(CustomEventEventTypeEnum = exports.CustomEventEventTypeEnum || (exports.CustomEventEventTypeEnum = {}));
/**
 * Experimental feature (no support provided) A custom event represents a third party impression, a third party click, an annotation on a first party impression, or an annotation on a first party click.
 */
var CustomEvent = /** @class */ (function (_super) {
    __extends(CustomEvent, _super);
    function CustomEvent() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "annotateClickEvent" }),
        (0, class_transformer_1.Type)(function () { return customeventclickannotation_1.CustomEventClickAnnotation; }),
        __metadata("design:type", customeventclickannotation_1.CustomEventClickAnnotation)
    ], CustomEvent.prototype, "annotateClickEvent", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "annotateImpressionEvent" }),
        (0, class_transformer_1.Type)(function () { return customeventimpressionannotation_1.CustomEventImpressionAnnotation; }),
        __metadata("design:type", customeventimpressionannotation_1.CustomEventImpressionAnnotation)
    ], CustomEvent.prototype, "annotateImpressionEvent", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({ elemType: customvariable_1.CustomVariable }),
        (0, class_transformer_1.Expose)({ name: "customVariables" }),
        (0, class_transformer_1.Type)(function () { return customvariable_1.CustomVariable; }),
        __metadata("design:type", Array)
    ], CustomEvent.prototype, "customVariables", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "eventType" }),
        __metadata("design:type", String)
    ], CustomEvent.prototype, "eventType", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "floodlightConfigurationId" }),
        __metadata("design:type", String)
    ], CustomEvent.prototype, "floodlightConfigurationId", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "insertEvent" }),
        (0, class_transformer_1.Type)(function () { return customeventinsert_1.CustomEventInsert; }),
        __metadata("design:type", customeventinsert_1.CustomEventInsert)
    ], CustomEvent.prototype, "insertEvent", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "kind" }),
        __metadata("design:type", String)
    ], CustomEvent.prototype, "kind", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "ordinal" }),
        __metadata("design:type", String)
    ], CustomEvent.prototype, "ordinal", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "timestampMicros" }),
        __metadata("design:type", String)
    ], CustomEvent.prototype, "timestampMicros", void 0);
    return CustomEvent;
}(utils_1.SpeakeasyBase));
exports.CustomEvent = CustomEvent;
