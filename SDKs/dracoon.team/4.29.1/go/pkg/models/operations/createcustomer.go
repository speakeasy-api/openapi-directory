// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"bytes"
	"encoding/json"
	"errors"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// CreateCustomerXSdsDateFormatEnum - Date time format (cf. [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) & [leettime.de](http://leettime.de/))
type CreateCustomerXSdsDateFormatEnum string

const (
	CreateCustomerXSdsDateFormatEnumUtc    CreateCustomerXSdsDateFormatEnum = "UTC"
	CreateCustomerXSdsDateFormatEnumLocal  CreateCustomerXSdsDateFormatEnum = "LOCAL"
	CreateCustomerXSdsDateFormatEnumOffset CreateCustomerXSdsDateFormatEnum = "OFFSET"
	CreateCustomerXSdsDateFormatEnumEpoch  CreateCustomerXSdsDateFormatEnum = "EPOCH"
	CreateCustomerXSdsDateFormatEnumLeet   CreateCustomerXSdsDateFormatEnum = "LEET"
)

func (e *CreateCustomerXSdsDateFormatEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "UTC":
		fallthrough
	case "LOCAL":
		fallthrough
	case "OFFSET":
		fallthrough
	case "EPOCH":
		fallthrough
	case "LEET":
		*e = CreateCustomerXSdsDateFormatEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateCustomerXSdsDateFormatEnum: %s", s)
	}
}

type CreateCustomerHeaders struct {
	// Date time format (cf. [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) & [leettime.de](http://leettime.de/))
	XSdsDateFormat *CreateCustomerXSdsDateFormatEnum `header:"style=simple,explode=false,name=X-Sds-Date-Format"`
	// Service Authentication token
	XSdsServiceToken *string `header:"style=simple,explode=false,name=X-Sds-Service-Token"`
}

type CreateCustomerRequest struct {
	Headers CreateCustomerHeaders
	Request shared.NewCustomerRequest `request:"mediaType=application/json"`
}

type CreateCustomer400ApplicationJSONType string

const (
	CreateCustomer400ApplicationJSONTypeErrorResponse                   CreateCustomer400ApplicationJSONType = "ErrorResponse"
	CreateCustomer400ApplicationJSONTypePasswordPolicyViolationResponse CreateCustomer400ApplicationJSONType = "PasswordPolicyViolationResponse"
)

type CreateCustomer400ApplicationJSON struct {
	ErrorResponse                   *shared.ErrorResponse
	PasswordPolicyViolationResponse *shared.PasswordPolicyViolationResponse

	Type CreateCustomer400ApplicationJSONType
}

func CreateCreateCustomer400ApplicationJSONErrorResponse(errorResponse shared.ErrorResponse) CreateCustomer400ApplicationJSON {
	typ := CreateCustomer400ApplicationJSONTypeErrorResponse

	return CreateCustomer400ApplicationJSON{
		ErrorResponse: &errorResponse,
		Type:          typ,
	}
}

func CreateCreateCustomer400ApplicationJSONPasswordPolicyViolationResponse(passwordPolicyViolationResponse shared.PasswordPolicyViolationResponse) CreateCustomer400ApplicationJSON {
	typ := CreateCustomer400ApplicationJSONTypePasswordPolicyViolationResponse

	return CreateCustomer400ApplicationJSON{
		PasswordPolicyViolationResponse: &passwordPolicyViolationResponse,
		Type:                            typ,
	}
}

func (u *CreateCustomer400ApplicationJSON) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	errorResponse := new(shared.ErrorResponse)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&errorResponse); err == nil {
		u.ErrorResponse = errorResponse
		u.Type = CreateCustomer400ApplicationJSONTypeErrorResponse
		return nil
	}

	passwordPolicyViolationResponse := new(shared.PasswordPolicyViolationResponse)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&passwordPolicyViolationResponse); err == nil {
		u.PasswordPolicyViolationResponse = passwordPolicyViolationResponse
		u.Type = CreateCustomer400ApplicationJSONTypePasswordPolicyViolationResponse
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u CreateCustomer400ApplicationJSON) MarshalJSON() ([]byte, error) {
	if u.ErrorResponse != nil {
		return json.Marshal(u.ErrorResponse)
	}

	if u.PasswordPolicyViolationResponse != nil {
		return json.Marshal(u.PasswordPolicyViolationResponse)
	}

	return nil, nil
}

type CreateCustomerResponse struct {
	ContentType string
	// Unauthorized
	ErrorResponse *shared.ErrorResponse
	// Created
	NewCustomerResponse *shared.NewCustomerResponse
	StatusCode          int
	RawResponse         *http.Response
	// Bad Request
	CreateCustomer400ApplicationJSONOneOf *CreateCustomer400ApplicationJSON
}
