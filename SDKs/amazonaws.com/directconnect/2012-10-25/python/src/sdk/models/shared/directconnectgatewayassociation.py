"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import associatedgateway as shared_associatedgateway
from ..shared import directconnectgatewayassociationstate_enum as shared_directconnectgatewayassociationstate_enum
from ..shared import routefilterprefix as shared_routefilterprefix
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class DirectConnectGatewayAssociation:
    r"""Information about an association between a Direct Connect gateway and a virtual private gateway or transit gateway."""
    
    allowed_prefixes_to_direct_connect_gateway: Optional[list[shared_routefilterprefix.RouteFilterPrefix]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('allowedPrefixesToDirectConnectGateway'), 'exclude': lambda f: f is None }})  
    associated_gateway: Optional[shared_associatedgateway.AssociatedGateway] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('associatedGateway'), 'exclude': lambda f: f is None }})  
    association_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('associationId'), 'exclude': lambda f: f is None }})  
    association_state: Optional[shared_directconnectgatewayassociationstate_enum.DirectConnectGatewayAssociationStateEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('associationState'), 'exclude': lambda f: f is None }})  
    direct_connect_gateway_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('directConnectGatewayId'), 'exclude': lambda f: f is None }})  
    direct_connect_gateway_owner_account: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('directConnectGatewayOwnerAccount'), 'exclude': lambda f: f is None }})  
    state_change_error: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('stateChangeError'), 'exclude': lambda f: f is None }})  
    virtual_gateway_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('virtualGatewayId'), 'exclude': lambda f: f is None }})  
    virtual_gateway_owner_account: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('virtualGatewayOwnerAccount'), 'exclude': lambda f: f is None }})  
    virtual_gateway_region: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('virtualGatewayRegion'), 'exclude': lambda f: f is None }})  
    