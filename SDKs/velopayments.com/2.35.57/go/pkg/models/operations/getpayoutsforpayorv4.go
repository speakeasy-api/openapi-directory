// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
	"openapi/pkg/types"
)

// GetPayoutsForPayorV4ScheduleStatusEnum - Payout Schedule Status
type GetPayoutsForPayorV4ScheduleStatusEnum string

const (
	GetPayoutsForPayorV4ScheduleStatusEnumAny       GetPayoutsForPayorV4ScheduleStatusEnum = "ANY"
	GetPayoutsForPayorV4ScheduleStatusEnumScheduled GetPayoutsForPayorV4ScheduleStatusEnum = "SCHEDULED"
	GetPayoutsForPayorV4ScheduleStatusEnumExecuted  GetPayoutsForPayorV4ScheduleStatusEnum = "EXECUTED"
	GetPayoutsForPayorV4ScheduleStatusEnumFailed    GetPayoutsForPayorV4ScheduleStatusEnum = "FAILED"
)

func (e GetPayoutsForPayorV4ScheduleStatusEnum) ToPointer() *GetPayoutsForPayorV4ScheduleStatusEnum {
	return &e
}

func (e *GetPayoutsForPayorV4ScheduleStatusEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ANY":
		fallthrough
	case "SCHEDULED":
		fallthrough
	case "EXECUTED":
		fallthrough
	case "FAILED":
		*e = GetPayoutsForPayorV4ScheduleStatusEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetPayoutsForPayorV4ScheduleStatusEnum: %v", v)
	}
}

// GetPayoutsForPayorV4StatusEnum - Payout Status
type GetPayoutsForPayorV4StatusEnum string

const (
	GetPayoutsForPayorV4StatusEnumAccepted   GetPayoutsForPayorV4StatusEnum = "ACCEPTED"
	GetPayoutsForPayorV4StatusEnumRejected   GetPayoutsForPayorV4StatusEnum = "REJECTED"
	GetPayoutsForPayorV4StatusEnumSubmitted  GetPayoutsForPayorV4StatusEnum = "SUBMITTED"
	GetPayoutsForPayorV4StatusEnumQuoted     GetPayoutsForPayorV4StatusEnum = "QUOTED"
	GetPayoutsForPayorV4StatusEnumInstructed GetPayoutsForPayorV4StatusEnum = "INSTRUCTED"
	GetPayoutsForPayorV4StatusEnumCompleted  GetPayoutsForPayorV4StatusEnum = "COMPLETED"
	GetPayoutsForPayorV4StatusEnumIncomplete GetPayoutsForPayorV4StatusEnum = "INCOMPLETE"
	GetPayoutsForPayorV4StatusEnumConfirmed  GetPayoutsForPayorV4StatusEnum = "CONFIRMED"
	GetPayoutsForPayorV4StatusEnumWithdrawn  GetPayoutsForPayorV4StatusEnum = "WITHDRAWN"
)

func (e GetPayoutsForPayorV4StatusEnum) ToPointer() *GetPayoutsForPayorV4StatusEnum {
	return &e
}

func (e *GetPayoutsForPayorV4StatusEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ACCEPTED":
		fallthrough
	case "REJECTED":
		fallthrough
	case "SUBMITTED":
		fallthrough
	case "QUOTED":
		fallthrough
	case "INSTRUCTED":
		fallthrough
	case "COMPLETED":
		fallthrough
	case "INCOMPLETE":
		fallthrough
	case "CONFIRMED":
		fallthrough
	case "WITHDRAWN":
		*e = GetPayoutsForPayorV4StatusEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetPayoutsForPayorV4StatusEnum: %v", v)
	}
}

type GetPayoutsForPayorV4Request struct {
	// The name of the payor whose payees are being paid. This filters via a case insensitive substring match.
	FromPayorName *string `queryParam:"style=form,explode=true,name=fromPayorName"`
	// Page number. Default is 1.
	Page *int `queryParam:"style=form,explode=true,name=page"`
	// The number of results to return in a page
	PageSize *int `queryParam:"style=form,explode=true,name=pageSize"`
	// The id (UUID) of the payor funding the payout or the payor whose payees are being paid.
	PayorID *string `queryParam:"style=form,explode=true,name=payorId"`
	// Payout Memo filter - case insensitive sub-string match
	PayoutMemo *string `queryParam:"style=form,explode=true,name=payoutMemo"`
	// Payout Schedule Status
	ScheduleStatus *GetPayoutsForPayorV4ScheduleStatusEnum `queryParam:"style=form,explode=true,name=scheduleStatus"`
	// Filter payouts scheduled to run on or after the given date. Format is yyyy-MM-dd.
	ScheduledForDateFrom *types.Date `queryParam:"style=form,explode=true,name=scheduledForDateFrom"`
	// Filter payouts scheduled to run on or before the given date. Format is yyyy-MM-dd.
	ScheduledForDateTo *types.Date `queryParam:"style=form,explode=true,name=scheduledForDateTo"`
	// List of sort fields (e.g. ?sort=submittedDateTime:asc,instructedDateTime:asc,status:asc)
	// Default is submittedDateTime:asc
	// The supported sort fields are: submittedDateTime, instructedDateTime, status, totalPayments, payoutId, scheduledFor
	//
	Sort *string `queryParam:"style=form,explode=true,name=sort"`
	// Payout Status
	Status *GetPayoutsForPayorV4StatusEnum `queryParam:"style=form,explode=true,name=status"`
	// The submitted date from range filter. Format is yyyy-MM-dd.
	SubmittedDateFrom *types.Date `queryParam:"style=form,explode=true,name=submittedDateFrom"`
	// The submitted date to range filter. Format is yyyy-MM-dd.
	SubmittedDateTo *types.Date `queryParam:"style=form,explode=true,name=submittedDateTo"`
}

type GetPayoutsForPayorV4Response struct {
	ContentType string
	// Payor data found
	GetPayoutsResponse *shared.GetPayoutsResponse
	StatusCode         int
	RawResponse        *http.Response
	// Invalid request. See Error message payload for details of failure
	InlineResponse400 *shared.InlineResponse400
	// Invalid access token. May be expired or invalid
	InlineResponse401 *shared.InlineResponse401
	// The authentication does not have permissions to access the resource
	// This usually occurs when there is a valid authentication instance (client or user) but they do not have the required permissions
	//
	InlineResponse403 *shared.InlineResponse403
	// The resource was not found or is no longer available
	//
	InlineResponse404 *shared.InlineResponse404
}
