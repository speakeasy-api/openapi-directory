// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type GetVillagersGameEnum string

const (
	GetVillagersGameEnumDnm   GetVillagersGameEnum = "DNM"
	GetVillagersGameEnumAc    GetVillagersGameEnum = "AC"
	GetVillagersGameEnumEPlus GetVillagersGameEnum = "E_PLUS"
	GetVillagersGameEnumWw    GetVillagersGameEnum = "WW"
	GetVillagersGameEnumCf    GetVillagersGameEnum = "CF"
	GetVillagersGameEnumNl    GetVillagersGameEnum = "NL"
	GetVillagersGameEnumWa    GetVillagersGameEnum = "WA"
	GetVillagersGameEnumNh    GetVillagersGameEnum = "NH"
	GetVillagersGameEnumFilm  GetVillagersGameEnum = "FILM"
	GetVillagersGameEnumHhd   GetVillagersGameEnum = "HHD"
	GetVillagersGameEnumPc    GetVillagersGameEnum = "PC"
)

func (e GetVillagersGameEnum) ToPointer() *GetVillagersGameEnum {
	return &e
}

func (e *GetVillagersGameEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "DNM":
		fallthrough
	case "AC":
		fallthrough
	case "E_PLUS":
		fallthrough
	case "WW":
		fallthrough
	case "CF":
		fallthrough
	case "NL":
		fallthrough
	case "WA":
		fallthrough
	case "NH":
		fallthrough
	case "FILM":
		fallthrough
	case "HHD":
		fallthrough
	case "PC":
		*e = GetVillagersGameEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetVillagersGameEnum: %v", v)
	}
}

// GetVillagersPersonalityEnum - Retrieve villagers with a certain personality. For 'sisterly', note that the community often also calls it 'uchi' or 'big sister'.
type GetVillagersPersonalityEnum string

const (
	GetVillagersPersonalityEnumBigSister GetVillagersPersonalityEnum = "big sister"
	GetVillagersPersonalityEnumCranky    GetVillagersPersonalityEnum = "cranky"
	GetVillagersPersonalityEnumJock      GetVillagersPersonalityEnum = "jock"
	GetVillagersPersonalityEnumLazy      GetVillagersPersonalityEnum = "lazy"
	GetVillagersPersonalityEnumNormal    GetVillagersPersonalityEnum = "normal"
	GetVillagersPersonalityEnumPeppy     GetVillagersPersonalityEnum = "peppy"
	GetVillagersPersonalityEnumSisterly  GetVillagersPersonalityEnum = "sisterly"
	GetVillagersPersonalityEnumSmug      GetVillagersPersonalityEnum = "smug"
	GetVillagersPersonalityEnumSnooty    GetVillagersPersonalityEnum = "snooty"
)

func (e GetVillagersPersonalityEnum) ToPointer() *GetVillagersPersonalityEnum {
	return &e
}

func (e *GetVillagersPersonalityEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "big sister":
		fallthrough
	case "cranky":
		fallthrough
	case "jock":
		fallthrough
	case "lazy":
		fallthrough
	case "normal":
		fallthrough
	case "peppy":
		fallthrough
	case "sisterly":
		fallthrough
	case "smug":
		fallthrough
	case "snooty":
		*e = GetVillagersPersonalityEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetVillagersPersonalityEnum: %v", v)
	}
}

// GetVillagersSpeciesEnum - Retrieve villagers of a certain species.
type GetVillagersSpeciesEnum string

const (
	GetVillagersSpeciesEnumAlligator  GetVillagersSpeciesEnum = "alligator"
	GetVillagersSpeciesEnumAnteater   GetVillagersSpeciesEnum = "anteater"
	GetVillagersSpeciesEnumBear       GetVillagersSpeciesEnum = "bear"
	GetVillagersSpeciesEnumBearCub    GetVillagersSpeciesEnum = "bear cub"
	GetVillagersSpeciesEnumBird       GetVillagersSpeciesEnum = "bird"
	GetVillagersSpeciesEnumBull       GetVillagersSpeciesEnum = "bull"
	GetVillagersSpeciesEnumCat        GetVillagersSpeciesEnum = "cat"
	GetVillagersSpeciesEnumCub        GetVillagersSpeciesEnum = "cub"
	GetVillagersSpeciesEnumChicken    GetVillagersSpeciesEnum = "chicken"
	GetVillagersSpeciesEnumCow        GetVillagersSpeciesEnum = "cow"
	GetVillagersSpeciesEnumDeer       GetVillagersSpeciesEnum = "deer"
	GetVillagersSpeciesEnumDog        GetVillagersSpeciesEnum = "dog"
	GetVillagersSpeciesEnumDuck       GetVillagersSpeciesEnum = "duck"
	GetVillagersSpeciesEnumEagle      GetVillagersSpeciesEnum = "eagle"
	GetVillagersSpeciesEnumElephant   GetVillagersSpeciesEnum = "elephant"
	GetVillagersSpeciesEnumFrog       GetVillagersSpeciesEnum = "frog"
	GetVillagersSpeciesEnumGoat       GetVillagersSpeciesEnum = "goat"
	GetVillagersSpeciesEnumGorilla    GetVillagersSpeciesEnum = "gorilla"
	GetVillagersSpeciesEnumHamster    GetVillagersSpeciesEnum = "hamster"
	GetVillagersSpeciesEnumHippo      GetVillagersSpeciesEnum = "hippo"
	GetVillagersSpeciesEnumHorse      GetVillagersSpeciesEnum = "horse"
	GetVillagersSpeciesEnumKoala      GetVillagersSpeciesEnum = "koala"
	GetVillagersSpeciesEnumKangaroo   GetVillagersSpeciesEnum = "kangaroo"
	GetVillagersSpeciesEnumLion       GetVillagersSpeciesEnum = "lion"
	GetVillagersSpeciesEnumMonkey     GetVillagersSpeciesEnum = "monkey"
	GetVillagersSpeciesEnumMouse      GetVillagersSpeciesEnum = "mouse"
	GetVillagersSpeciesEnumOctopus    GetVillagersSpeciesEnum = "octopus"
	GetVillagersSpeciesEnumOstrich    GetVillagersSpeciesEnum = "ostrich"
	GetVillagersSpeciesEnumPenguin    GetVillagersSpeciesEnum = "penguin"
	GetVillagersSpeciesEnumPig        GetVillagersSpeciesEnum = "pig"
	GetVillagersSpeciesEnumRabbit     GetVillagersSpeciesEnum = "rabbit"
	GetVillagersSpeciesEnumRhino      GetVillagersSpeciesEnum = "rhino"
	GetVillagersSpeciesEnumRhinoceros GetVillagersSpeciesEnum = "rhinoceros"
	GetVillagersSpeciesEnumSheep      GetVillagersSpeciesEnum = "sheep"
	GetVillagersSpeciesEnumSquirrel   GetVillagersSpeciesEnum = "squirrel"
	GetVillagersSpeciesEnumTiger      GetVillagersSpeciesEnum = "tiger"
	GetVillagersSpeciesEnumWolf       GetVillagersSpeciesEnum = "wolf"
)

func (e GetVillagersSpeciesEnum) ToPointer() *GetVillagersSpeciesEnum {
	return &e
}

func (e *GetVillagersSpeciesEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "alligator":
		fallthrough
	case "anteater":
		fallthrough
	case "bear":
		fallthrough
	case "bear cub":
		fallthrough
	case "bird":
		fallthrough
	case "bull":
		fallthrough
	case "cat":
		fallthrough
	case "cub":
		fallthrough
	case "chicken":
		fallthrough
	case "cow":
		fallthrough
	case "deer":
		fallthrough
	case "dog":
		fallthrough
	case "duck":
		fallthrough
	case "eagle":
		fallthrough
	case "elephant":
		fallthrough
	case "frog":
		fallthrough
	case "goat":
		fallthrough
	case "gorilla":
		fallthrough
	case "hamster":
		fallthrough
	case "hippo":
		fallthrough
	case "horse":
		fallthrough
	case "koala":
		fallthrough
	case "kangaroo":
		fallthrough
	case "lion":
		fallthrough
	case "monkey":
		fallthrough
	case "mouse":
		fallthrough
	case "octopus":
		fallthrough
	case "ostrich":
		fallthrough
	case "penguin":
		fallthrough
	case "pig":
		fallthrough
	case "rabbit":
		fallthrough
	case "rhino":
		fallthrough
	case "rhinoceros":
		fallthrough
	case "sheep":
		fallthrough
	case "squirrel":
		fallthrough
	case "tiger":
		fallthrough
	case "wolf":
		*e = GetVillagersSpeciesEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetVillagersSpeciesEnum: %v", v)
	}
}

type GetVillagersRequest struct {
	// The version of the API you are calling, written as `1.0.0`. This is specified as required as good practice, but it is not actually enforced by the API. If you do not specify a version, you will be served the latest version, which may eventually result in breaking changes.
	AcceptVersion string `header:"style=simple,explode=false,name=Accept-Version"`
	// Your UUID secret key, granted to you by the Nookipedia team. Required for accessing the API.
	XAPIKey string `header:"style=simple,explode=false,name=X-API-KEY"`
	// Use with `birthmonth` to get villager(s) born on a specific day. Value should be an int, 1 through 31.
	Birthday *string `queryParam:"style=form,explode=true,name=birthday"`
	// Retrieve villagers born in a specific month. Value may be the month's name (`jan`, `january`) or the integer representing the month (`01`, `1`).
	Birthmonth *string `queryParam:"style=form,explode=true,name=birthmonth"`
	// When set to `true`, only villager names are returned. Instead of an array of objects with all details, the return will be an array of strings.
	Excludedetails *string `queryParam:"style=form,explode=true,name=excludedetails"`
	// Retrieve villagers that appear in all listed games. For example, if you want only villagers that appear in both *New Horizons* and *Pocket Camp*, you would send in `?game=nh&game=pc`.
	Game []GetVillagersGameEnum `queryParam:"style=form,explode=true,name=game"`
	// Villager name. For most names you will get back an array with one object, but note that names are not a unique identifier across the series, as there are 3 names that are shared by multiple villagers (Lulu, Petunia, Carmen). For those 3 names you will get back an array with 2 objects. How you disambiguate between these villagers is up to you.
	Name *string `queryParam:"style=form,explode=true,name=name"`
	// When set to `true`, an `nh_details` object will be included that contains *New Horizons* details about the villager. If the villager does not appear in *New Horizons*, the returned `nh_details` field will be set to null.
	Nhdetails *string `queryParam:"style=form,explode=true,name=nhdetails"`
	// Retrieve villagers with a certain personality. For 'sisterly', note that the community often also calls it 'uchi' or 'big sister'.
	Personality *GetVillagersPersonalityEnum `queryParam:"style=form,explode=true,name=personality"`
	// Retrieve villagers of a certain species.
	Species *GetVillagersSpeciesEnum `queryParam:"style=form,explode=true,name=species"`
	// Specify the desired width of returned image URLs. When unspecified, the linked image(s) returned by the API will be full-resolution. Note that images can only be reduced in size; specifying a width greater than than the maximum size will return the default full-size image URL. Note that requesting specific image sizes for long lists may result in a very long response time.
	Thumbsize *int64 `queryParam:"style=form,explode=true,name=thumbsize"`
}

type GetVillagersResponse struct {
	ContentType string
	// One of the inputs (usually query parameters) has an invalid value.
	Error400 *shared.Error400
	// Failed to authenticate user from `X-API-KEY`.
	Error401 *shared.Error401
	// There was an error fetching the requested data.
	Error500    *shared.Error500
	StatusCode  int
	RawResponse *http.Response
	// A JSON array of villagers.
	Villagers []shared.Villager
}
