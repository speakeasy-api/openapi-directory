"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import compressiontype_enum as shared_compressiontype_enum
from ..shared import datasource as shared_datasource
from ..shared import recordwrapper_enum as shared_recordwrapper_enum
from ..shared import shuffleconfig as shared_shuffleconfig
from ..shared import traininginputmode_enum as shared_traininginputmode_enum
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Channel:
    r"""A channel is a named input source that training algorithms can consume."""
    
    channel_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ChannelName') }})  
    data_source: shared_datasource.DataSource = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DataSource') }})  
    compression_type: Optional[shared_compressiontype_enum.CompressionTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CompressionType'), 'exclude': lambda f: f is None }})  
    content_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ContentType'), 'exclude': lambda f: f is None }})  
    input_mode: Optional[shared_traininginputmode_enum.TrainingInputModeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('InputMode'), 'exclude': lambda f: f is None }})  
    record_wrapper_type: Optional[shared_recordwrapper_enum.RecordWrapperEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('RecordWrapperType'), 'exclude': lambda f: f is None }})  
    shuffle_config: Optional[shared_shuffleconfig.ShuffleConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ShuffleConfig'), 'exclude': lambda f: f is None }})  
    