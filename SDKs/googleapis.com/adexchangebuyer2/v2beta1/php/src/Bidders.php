<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Bidders 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Lists all metrics that are measured in terms of number of bids.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2BiddersFilterSetsBidMetricsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2BiddersFilterSetsBidMetricsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2BiddersFilterSetsBidMetricsListResponse
     */
	public function adexchangebuyer2BiddersFilterSetsBidMetricsList(
        \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2BiddersFilterSetsBidMetricsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2BiddersFilterSetsBidMetricsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2BiddersFilterSetsBidMetricsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2beta1/{filterSetName}/bidMetrics', \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2BiddersFilterSetsBidMetricsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2BiddersFilterSetsBidMetricsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2BiddersFilterSetsBidMetricsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listBidMetricsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListBidMetricsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List all errors that occurred in bid responses, with the number of bid responses affected for each reason.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2BiddersFilterSetsBidResponseErrorsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2BiddersFilterSetsBidResponseErrorsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2BiddersFilterSetsBidResponseErrorsListResponse
     */
	public function adexchangebuyer2BiddersFilterSetsBidResponseErrorsList(
        \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2BiddersFilterSetsBidResponseErrorsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2BiddersFilterSetsBidResponseErrorsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2BiddersFilterSetsBidResponseErrorsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2beta1/{filterSetName}/bidResponseErrors', \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2BiddersFilterSetsBidResponseErrorsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2BiddersFilterSetsBidResponseErrorsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2BiddersFilterSetsBidResponseErrorsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listBidResponseErrorsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListBidResponseErrorsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List all reasons for which bid responses were considered to have no applicable bids, with the number of bid responses affected for each reason.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2BiddersFilterSetsBidResponsesWithoutBidsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2BiddersFilterSetsBidResponsesWithoutBidsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2BiddersFilterSetsBidResponsesWithoutBidsListResponse
     */
	public function adexchangebuyer2BiddersFilterSetsBidResponsesWithoutBidsList(
        \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2BiddersFilterSetsBidResponsesWithoutBidsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2BiddersFilterSetsBidResponsesWithoutBidsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2BiddersFilterSetsBidResponsesWithoutBidsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2beta1/{filterSetName}/bidResponsesWithoutBids', \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2BiddersFilterSetsBidResponsesWithoutBidsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2BiddersFilterSetsBidResponsesWithoutBidsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2BiddersFilterSetsBidResponsesWithoutBidsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listBidResponsesWithoutBidsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListBidResponsesWithoutBidsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates the specified filter set for the account with the given account ID.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2BiddersFilterSetsCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2BiddersFilterSetsCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2BiddersFilterSetsCreateResponse
     */
	public function adexchangebuyer2BiddersFilterSetsCreate(
        \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2BiddersFilterSetsCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2BiddersFilterSetsCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2BiddersFilterSetsCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2beta1/{ownerName}/filterSets', \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2BiddersFilterSetsCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "filterSet", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2BiddersFilterSetsCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2BiddersFilterSetsCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->filterSet = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\FilterSet', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Deletes the requested filter set from the account with the given account ID.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2BiddersFilterSetsDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2BiddersFilterSetsDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2BiddersFilterSetsDeleteResponse
     */
	public function adexchangebuyer2BiddersFilterSetsDelete(
        \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2BiddersFilterSetsDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2BiddersFilterSetsDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2BiddersFilterSetsDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2beta1/{name}', \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2BiddersFilterSetsDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2BiddersFilterSetsDeleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2BiddersFilterSetsDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->empty = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List all reasons that caused a bid request not to be sent for an impression, with the number of bid requests not sent for each reason.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2BiddersFilterSetsFilteredBidRequestsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2BiddersFilterSetsFilteredBidRequestsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2BiddersFilterSetsFilteredBidRequestsListResponse
     */
	public function adexchangebuyer2BiddersFilterSetsFilteredBidRequestsList(
        \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2BiddersFilterSetsFilteredBidRequestsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2BiddersFilterSetsFilteredBidRequestsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2BiddersFilterSetsFilteredBidRequestsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2beta1/{filterSetName}/filteredBidRequests', \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2BiddersFilterSetsFilteredBidRequestsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2BiddersFilterSetsFilteredBidRequestsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2BiddersFilterSetsFilteredBidRequestsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listFilteredBidRequestsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListFilteredBidRequestsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List all creatives associated with a specific reason for which bids were filtered, with the number of bids filtered for each creative.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2BiddersFilterSetsFilteredBidsCreativesListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2BiddersFilterSetsFilteredBidsCreativesListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2BiddersFilterSetsFilteredBidsCreativesListResponse
     */
	public function adexchangebuyer2BiddersFilterSetsFilteredBidsCreativesList(
        \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2BiddersFilterSetsFilteredBidsCreativesListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2BiddersFilterSetsFilteredBidsCreativesListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2BiddersFilterSetsFilteredBidsCreativesListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2beta1/{filterSetName}/filteredBids/{creativeStatusId}/creatives', \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2BiddersFilterSetsFilteredBidsCreativesListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2BiddersFilterSetsFilteredBidsCreativesListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2BiddersFilterSetsFilteredBidsCreativesListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listCreativeStatusBreakdownByCreativeResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListCreativeStatusBreakdownByCreativeResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List all details associated with a specific reason for which bids were filtered, with the number of bids filtered for each detail.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2BiddersFilterSetsFilteredBidsDetailsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2BiddersFilterSetsFilteredBidsDetailsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2BiddersFilterSetsFilteredBidsDetailsListResponse
     */
	public function adexchangebuyer2BiddersFilterSetsFilteredBidsDetailsList(
        \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2BiddersFilterSetsFilteredBidsDetailsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2BiddersFilterSetsFilteredBidsDetailsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2BiddersFilterSetsFilteredBidsDetailsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2beta1/{filterSetName}/filteredBids/{creativeStatusId}/details', \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2BiddersFilterSetsFilteredBidsDetailsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2BiddersFilterSetsFilteredBidsDetailsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2BiddersFilterSetsFilteredBidsDetailsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listCreativeStatusBreakdownByDetailResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListCreativeStatusBreakdownByDetailResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List all reasons for which bids were filtered, with the number of bids filtered for each reason.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2BiddersFilterSetsFilteredBidsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2BiddersFilterSetsFilteredBidsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2BiddersFilterSetsFilteredBidsListResponse
     */
	public function adexchangebuyer2BiddersFilterSetsFilteredBidsList(
        \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2BiddersFilterSetsFilteredBidsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2BiddersFilterSetsFilteredBidsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2BiddersFilterSetsFilteredBidsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2beta1/{filterSetName}/filteredBids', \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2BiddersFilterSetsFilteredBidsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2BiddersFilterSetsFilteredBidsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2BiddersFilterSetsFilteredBidsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listFilteredBidsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListFilteredBidsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieves the requested filter set for the account with the given account ID.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2BiddersFilterSetsGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2BiddersFilterSetsGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2BiddersFilterSetsGetResponse
     */
	public function adexchangebuyer2BiddersFilterSetsGet(
        \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2BiddersFilterSetsGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2BiddersFilterSetsGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2BiddersFilterSetsGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2beta1/{name}', \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2BiddersFilterSetsGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2BiddersFilterSetsGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2BiddersFilterSetsGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->filterSet = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\FilterSet', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists all metrics that are measured in terms of number of impressions.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2BiddersFilterSetsImpressionMetricsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2BiddersFilterSetsImpressionMetricsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2BiddersFilterSetsImpressionMetricsListResponse
     */
	public function adexchangebuyer2BiddersFilterSetsImpressionMetricsList(
        \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2BiddersFilterSetsImpressionMetricsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2BiddersFilterSetsImpressionMetricsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2BiddersFilterSetsImpressionMetricsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2beta1/{filterSetName}/impressionMetrics', \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2BiddersFilterSetsImpressionMetricsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2BiddersFilterSetsImpressionMetricsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2BiddersFilterSetsImpressionMetricsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listImpressionMetricsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListImpressionMetricsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists all filter sets for the account with the given account ID.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2BiddersFilterSetsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2BiddersFilterSetsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2BiddersFilterSetsListResponse
     */
	public function adexchangebuyer2BiddersFilterSetsList(
        \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2BiddersFilterSetsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2BiddersFilterSetsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2BiddersFilterSetsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2beta1/{ownerName}/filterSets', \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2BiddersFilterSetsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2BiddersFilterSetsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2BiddersFilterSetsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listFilterSetsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListFilterSetsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List all reasons for which bids lost in the auction, with the number of bids that lost for each reason.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2BiddersFilterSetsLosingBidsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2BiddersFilterSetsLosingBidsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2BiddersFilterSetsLosingBidsListResponse
     */
	public function adexchangebuyer2BiddersFilterSetsLosingBidsList(
        \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2BiddersFilterSetsLosingBidsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2BiddersFilterSetsLosingBidsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2BiddersFilterSetsLosingBidsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2beta1/{filterSetName}/losingBids', \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2BiddersFilterSetsLosingBidsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2BiddersFilterSetsLosingBidsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2BiddersFilterSetsLosingBidsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listLosingBidsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListLosingBidsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List all reasons for which winning bids were not billable, with the number of bids not billed for each reason.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2BiddersFilterSetsNonBillableWinningBidsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2BiddersFilterSetsNonBillableWinningBidsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2BiddersFilterSetsNonBillableWinningBidsListResponse
     */
	public function adexchangebuyer2BiddersFilterSetsNonBillableWinningBidsList(
        \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2BiddersFilterSetsNonBillableWinningBidsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2BiddersFilterSetsNonBillableWinningBidsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2BiddersFilterSetsNonBillableWinningBidsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2beta1/{filterSetName}/nonBillableWinningBids', \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2BiddersFilterSetsNonBillableWinningBidsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2BiddersFilterSetsNonBillableWinningBidsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\Adexchangebuyer2BiddersFilterSetsNonBillableWinningBidsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listNonBillableWinningBidsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListNonBillableWinningBidsResponse', 'json');
            }
        }

        return $response;
    }
}