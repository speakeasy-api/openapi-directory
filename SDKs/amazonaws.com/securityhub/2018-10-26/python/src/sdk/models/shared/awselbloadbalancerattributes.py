"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import awselbloadbalanceraccesslog as shared_awselbloadbalanceraccesslog
from ..shared import awselbloadbalanceradditionalattribute as shared_awselbloadbalanceradditionalattribute
from ..shared import awselbloadbalancerconnectiondraining as shared_awselbloadbalancerconnectiondraining
from ..shared import awselbloadbalancerconnectionsettings as shared_awselbloadbalancerconnectionsettings
from ..shared import awselbloadbalancercrosszoneloadbalancing as shared_awselbloadbalancercrosszoneloadbalancing
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class AwsElbLoadBalancerAttributes:
    r"""Contains attributes for the load balancer."""
    
    access_log: Optional[shared_awselbloadbalanceraccesslog.AwsElbLoadBalancerAccessLog] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AccessLog'), 'exclude': lambda f: f is None }})  
    additional_attributes: Optional[list[shared_awselbloadbalanceradditionalattribute.AwsElbLoadBalancerAdditionalAttribute]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AdditionalAttributes'), 'exclude': lambda f: f is None }})  
    connection_draining: Optional[shared_awselbloadbalancerconnectiondraining.AwsElbLoadBalancerConnectionDraining] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ConnectionDraining'), 'exclude': lambda f: f is None }})  
    connection_settings: Optional[shared_awselbloadbalancerconnectionsettings.AwsElbLoadBalancerConnectionSettings] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ConnectionSettings'), 'exclude': lambda f: f is None }})  
    cross_zone_load_balancing: Optional[shared_awselbloadbalancercrosszoneloadbalancing.AwsElbLoadBalancerCrossZoneLoadBalancing] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CrossZoneLoadBalancing'), 'exclude': lambda f: f is None }})  
    