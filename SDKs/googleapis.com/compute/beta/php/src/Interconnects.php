<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Interconnects 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Deletes the specified Interconnect.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeInterconnectsDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeInterconnectsDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeInterconnectsDeleteResponse
     */
	public function computeInterconnectsDelete(
        \OpenAPI\OpenAPI\Models\Operations\ComputeInterconnectsDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeInterconnectsDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeInterconnectsDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/global/interconnects/{interconnect}', \OpenAPI\OpenAPI\Models\Operations\ComputeInterconnectsDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeInterconnectsDeleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeInterconnectsDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns the specified Interconnect. Get a list of available Interconnects by making a list() request.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeInterconnectsGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeInterconnectsGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeInterconnectsGetResponse
     */
	public function computeInterconnectsGet(
        \OpenAPI\OpenAPI\Models\Operations\ComputeInterconnectsGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeInterconnectsGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeInterconnectsGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/global/interconnects/{interconnect}', \OpenAPI\OpenAPI\Models\Operations\ComputeInterconnectsGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeInterconnectsGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeInterconnectsGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->interconnect = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Interconnect', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns the interconnectDiagnostics for the specified Interconnect.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeInterconnectsGetDiagnosticsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeInterconnectsGetDiagnosticsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeInterconnectsGetDiagnosticsResponse
     */
	public function computeInterconnectsGetDiagnostics(
        \OpenAPI\OpenAPI\Models\Operations\ComputeInterconnectsGetDiagnosticsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeInterconnectsGetDiagnosticsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeInterconnectsGetDiagnosticsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/global/interconnects/{interconnect}/getDiagnostics', \OpenAPI\OpenAPI\Models\Operations\ComputeInterconnectsGetDiagnosticsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeInterconnectsGetDiagnosticsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeInterconnectsGetDiagnosticsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->interconnectsGetDiagnosticsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\InterconnectsGetDiagnosticsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates an Interconnect in the specified project using the data included in the request.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeInterconnectsInsertRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeInterconnectsInsertSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeInterconnectsInsertResponse
     */
	public function computeInterconnectsInsert(
        \OpenAPI\OpenAPI\Models\Operations\ComputeInterconnectsInsertRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeInterconnectsInsertSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeInterconnectsInsertResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/global/interconnects', \OpenAPI\OpenAPI\Models\Operations\ComputeInterconnectsInsertRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "interconnect", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeInterconnectsInsertRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeInterconnectsInsertResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieves the list of Interconnects available to the specified project.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeInterconnectsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeInterconnectsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeInterconnectsListResponse
     */
	public function computeInterconnectsList(
        \OpenAPI\OpenAPI\Models\Operations\ComputeInterconnectsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeInterconnectsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeInterconnectsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/global/interconnects', \OpenAPI\OpenAPI\Models\Operations\ComputeInterconnectsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeInterconnectsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeInterconnectsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->interconnectList = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\InterconnectList', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates the specified Interconnect with the data included in the request. This method supports PATCH semantics and uses the JSON merge patch format and processing rules.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeInterconnectsPatchRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeInterconnectsPatchSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeInterconnectsPatchResponse
     */
	public function computeInterconnectsPatch(
        \OpenAPI\OpenAPI\Models\Operations\ComputeInterconnectsPatchRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeInterconnectsPatchSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeInterconnectsPatchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/global/interconnects/{interconnect}', \OpenAPI\OpenAPI\Models\Operations\ComputeInterconnectsPatchRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "interconnect1", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeInterconnectsPatchRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeInterconnectsPatchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Sets the labels on an Interconnect. To learn more about labels, read the Labeling Resources documentation.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeInterconnectsSetLabelsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeInterconnectsSetLabelsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeInterconnectsSetLabelsResponse
     */
	public function computeInterconnectsSetLabels(
        \OpenAPI\OpenAPI\Models\Operations\ComputeInterconnectsSetLabelsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeInterconnectsSetLabelsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeInterconnectsSetLabelsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/global/interconnects/{resource}/setLabels', \OpenAPI\OpenAPI\Models\Operations\ComputeInterconnectsSetLabelsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "globalSetLabelsRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeInterconnectsSetLabelsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeInterconnectsSetLabelsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns permissions that a caller has on the specified resource.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeInterconnectsTestIamPermissionsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeInterconnectsTestIamPermissionsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeInterconnectsTestIamPermissionsResponse
     */
	public function computeInterconnectsTestIamPermissions(
        \OpenAPI\OpenAPI\Models\Operations\ComputeInterconnectsTestIamPermissionsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeInterconnectsTestIamPermissionsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeInterconnectsTestIamPermissionsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/global/interconnects/{resource}/testIamPermissions', \OpenAPI\OpenAPI\Models\Operations\ComputeInterconnectsTestIamPermissionsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "testPermissionsRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeInterconnectsTestIamPermissionsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeInterconnectsTestIamPermissionsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->testPermissionsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\TestPermissionsResponse', 'json');
            }
        }

        return $response;
    }
}