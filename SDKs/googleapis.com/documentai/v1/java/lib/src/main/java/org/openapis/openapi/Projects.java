/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;
import java.net.http.HttpResponse;
import java.nio.charset.StandardCharsets;
import org.apache.http.NameValuePair;
import org.openapis.openapi.utils.HTTPClient;
import org.openapis.openapi.utils.HTTPRequest;
import org.openapis.openapi.utils.JSON;
import org.openapis.openapi.utils.SerializedBody;

public class Projects {
	
	private HTTPClient _defaultClient;
	private HTTPClient _securityClient;
	private String _serverUrl;
	private String _language;
	private String _sdkVersion;
	private String _genVersion;

	public Projects(HTTPClient defaultClient, HTTPClient securityClient, String serverUrl, String language, String sdkVersion, String genVersion) {
		this._defaultClient = defaultClient;
		this._securityClient = securityClient;
		this._serverUrl = serverUrl;
		this._language = language;
		this._sdkVersion = sdkVersion;
		this._genVersion = genVersion;
	}

    /**
     * Fetches processor types. Note that we don't use ListProcessorTypes here, because it isn't paginated.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DocumentaiProjectsLocationsFetchProcessorTypesResponse documentaiProjectsLocationsFetchProcessorTypes(org.openapis.openapi.models.operations.DocumentaiProjectsLocationsFetchProcessorTypesRequest request, org.openapis.openapi.models.operations.DocumentaiProjectsLocationsFetchProcessorTypesSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DocumentaiProjectsLocationsFetchProcessorTypesRequest.class, baseUrl, "/v1/{parent}:fetchProcessorTypes", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.DocumentaiProjectsLocationsFetchProcessorTypesRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DocumentaiProjectsLocationsFetchProcessorTypesResponse res = new org.openapis.openapi.models.operations.DocumentaiProjectsLocationsFetchProcessorTypesResponse(contentType, httpRes.statusCode()) {{
            googleCloudDocumentaiV1FetchProcessorTypesResponse = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.GoogleCloudDocumentaiV1FetchProcessorTypesResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.GoogleCloudDocumentaiV1FetchProcessorTypesResponse.class);
                res.googleCloudDocumentaiV1FetchProcessorTypesResponse = out;
            }
        }

        return res;
    }

    /**
     * Lists information about the supported locations for this service.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DocumentaiProjectsLocationsListResponse documentaiProjectsLocationsList(org.openapis.openapi.models.operations.DocumentaiProjectsLocationsListRequest request, org.openapis.openapi.models.operations.DocumentaiProjectsLocationsListSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DocumentaiProjectsLocationsListRequest.class, baseUrl, "/v1/{name}/locations", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.DocumentaiProjectsLocationsListRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DocumentaiProjectsLocationsListResponse res = new org.openapis.openapi.models.operations.DocumentaiProjectsLocationsListResponse(contentType, httpRes.statusCode()) {{
            googleCloudLocationListLocationsResponse = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.GoogleCloudLocationListLocationsResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.GoogleCloudLocationListLocationsResponse.class);
                res.googleCloudLocationListLocationsResponse = out;
            }
        }

        return res;
    }

    /**
     * Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DocumentaiProjectsLocationsOperationsCancelResponse documentaiProjectsLocationsOperationsCancel(org.openapis.openapi.models.operations.DocumentaiProjectsLocationsOperationsCancelRequest request, org.openapis.openapi.models.operations.DocumentaiProjectsLocationsOperationsCancelSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DocumentaiProjectsLocationsOperationsCancelRequest.class, baseUrl, "/v1/{name}:cancel", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.DocumentaiProjectsLocationsOperationsCancelRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DocumentaiProjectsLocationsOperationsCancelResponse res = new org.openapis.openapi.models.operations.DocumentaiProjectsLocationsOperationsCancelResponse(contentType, httpRes.statusCode()) {{
            googleProtobufEmpty = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                java.util.Map<String, Object> out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), new TypeReference<java.util.Map<String, Object>>() {});
                res.googleProtobufEmpty = out;
            }
        }

        return res;
    }

    /**
     * Lists the processor types that exist.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DocumentaiProjectsLocationsProcessorTypesListResponse documentaiProjectsLocationsProcessorTypesList(org.openapis.openapi.models.operations.DocumentaiProjectsLocationsProcessorTypesListRequest request, org.openapis.openapi.models.operations.DocumentaiProjectsLocationsProcessorTypesListSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DocumentaiProjectsLocationsProcessorTypesListRequest.class, baseUrl, "/v1/{parent}/processorTypes", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.DocumentaiProjectsLocationsProcessorTypesListRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DocumentaiProjectsLocationsProcessorTypesListResponse res = new org.openapis.openapi.models.operations.DocumentaiProjectsLocationsProcessorTypesListResponse(contentType, httpRes.statusCode()) {{
            googleCloudDocumentaiV1ListProcessorTypesResponse = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.GoogleCloudDocumentaiV1ListProcessorTypesResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.GoogleCloudDocumentaiV1ListProcessorTypesResponse.class);
                res.googleCloudDocumentaiV1ListProcessorTypesResponse = out;
            }
        }

        return res;
    }

    /**
     * Creates a processor from the ProcessorType provided. The processor will be at `ENABLED` state by default after its creation.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DocumentaiProjectsLocationsProcessorsCreateResponse documentaiProjectsLocationsProcessorsCreate(org.openapis.openapi.models.operations.DocumentaiProjectsLocationsProcessorsCreateRequest request, org.openapis.openapi.models.operations.DocumentaiProjectsLocationsProcessorsCreateSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DocumentaiProjectsLocationsProcessorsCreateRequest.class, baseUrl, "/v1/{parent}/processors", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "googleCloudDocumentaiV1ProcessorInput", "json");
        req.setBody(serializedRequestBody);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.DocumentaiProjectsLocationsProcessorsCreateRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DocumentaiProjectsLocationsProcessorsCreateResponse res = new org.openapis.openapi.models.operations.DocumentaiProjectsLocationsProcessorsCreateResponse(contentType, httpRes.statusCode()) {{
            googleCloudDocumentaiV1Processor = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.GoogleCloudDocumentaiV1Processor out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.GoogleCloudDocumentaiV1Processor.class);
                res.googleCloudDocumentaiV1Processor = out;
            }
        }

        return res;
    }

    /**
     * Disables a processor
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DocumentaiProjectsLocationsProcessorsDisableResponse documentaiProjectsLocationsProcessorsDisable(org.openapis.openapi.models.operations.DocumentaiProjectsLocationsProcessorsDisableRequest request, org.openapis.openapi.models.operations.DocumentaiProjectsLocationsProcessorsDisableSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DocumentaiProjectsLocationsProcessorsDisableRequest.class, baseUrl, "/v1/{name}:disable", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "json");
        req.setBody(serializedRequestBody);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.DocumentaiProjectsLocationsProcessorsDisableRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DocumentaiProjectsLocationsProcessorsDisableResponse res = new org.openapis.openapi.models.operations.DocumentaiProjectsLocationsProcessorsDisableResponse(contentType, httpRes.statusCode()) {{
            googleLongrunningOperation = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.GoogleLongrunningOperation out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.GoogleLongrunningOperation.class);
                res.googleLongrunningOperation = out;
            }
        }

        return res;
    }

    /**
     * Enables a processor
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DocumentaiProjectsLocationsProcessorsEnableResponse documentaiProjectsLocationsProcessorsEnable(org.openapis.openapi.models.operations.DocumentaiProjectsLocationsProcessorsEnableRequest request, org.openapis.openapi.models.operations.DocumentaiProjectsLocationsProcessorsEnableSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DocumentaiProjectsLocationsProcessorsEnableRequest.class, baseUrl, "/v1/{name}:enable", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "json");
        req.setBody(serializedRequestBody);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.DocumentaiProjectsLocationsProcessorsEnableRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DocumentaiProjectsLocationsProcessorsEnableResponse res = new org.openapis.openapi.models.operations.DocumentaiProjectsLocationsProcessorsEnableResponse(contentType, httpRes.statusCode()) {{
            googleLongrunningOperation = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.GoogleLongrunningOperation out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.GoogleLongrunningOperation.class);
                res.googleLongrunningOperation = out;
            }
        }

        return res;
    }

    /**
     * Send a document for Human Review. The input document should be processed by the specified processor.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DocumentaiProjectsLocationsProcessorsHumanReviewConfigReviewDocumentResponse documentaiProjectsLocationsProcessorsHumanReviewConfigReviewDocument(org.openapis.openapi.models.operations.DocumentaiProjectsLocationsProcessorsHumanReviewConfigReviewDocumentRequest request, org.openapis.openapi.models.operations.DocumentaiProjectsLocationsProcessorsHumanReviewConfigReviewDocumentSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DocumentaiProjectsLocationsProcessorsHumanReviewConfigReviewDocumentRequest.class, baseUrl, "/v1/{humanReviewConfig}:reviewDocument", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "googleCloudDocumentaiV1ReviewDocumentRequest", "json");
        req.setBody(serializedRequestBody);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.DocumentaiProjectsLocationsProcessorsHumanReviewConfigReviewDocumentRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DocumentaiProjectsLocationsProcessorsHumanReviewConfigReviewDocumentResponse res = new org.openapis.openapi.models.operations.DocumentaiProjectsLocationsProcessorsHumanReviewConfigReviewDocumentResponse(contentType, httpRes.statusCode()) {{
            googleLongrunningOperation = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.GoogleLongrunningOperation out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.GoogleLongrunningOperation.class);
                res.googleLongrunningOperation = out;
            }
        }

        return res;
    }

    /**
     * Lists all processors which belong to this project.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DocumentaiProjectsLocationsProcessorsListResponse documentaiProjectsLocationsProcessorsList(org.openapis.openapi.models.operations.DocumentaiProjectsLocationsProcessorsListRequest request, org.openapis.openapi.models.operations.DocumentaiProjectsLocationsProcessorsListSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DocumentaiProjectsLocationsProcessorsListRequest.class, baseUrl, "/v1/{parent}/processors", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.DocumentaiProjectsLocationsProcessorsListRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DocumentaiProjectsLocationsProcessorsListResponse res = new org.openapis.openapi.models.operations.DocumentaiProjectsLocationsProcessorsListResponse(contentType, httpRes.statusCode()) {{
            googleCloudDocumentaiV1ListProcessorsResponse = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.GoogleCloudDocumentaiV1ListProcessorsResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.GoogleCloudDocumentaiV1ListProcessorsResponse.class);
                res.googleCloudDocumentaiV1ListProcessorsResponse = out;
            }
        }

        return res;
    }

    /**
     * LRO endpoint to batch process many documents. The output is written to Cloud Storage as JSON in the [Document] format.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DocumentaiProjectsLocationsProcessorsProcessorVersionsBatchProcessResponse documentaiProjectsLocationsProcessorsProcessorVersionsBatchProcess(org.openapis.openapi.models.operations.DocumentaiProjectsLocationsProcessorsProcessorVersionsBatchProcessRequest request, org.openapis.openapi.models.operations.DocumentaiProjectsLocationsProcessorsProcessorVersionsBatchProcessSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DocumentaiProjectsLocationsProcessorsProcessorVersionsBatchProcessRequest.class, baseUrl, "/v1/{name}:batchProcess", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "googleCloudDocumentaiV1BatchProcessRequest", "json");
        req.setBody(serializedRequestBody);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.DocumentaiProjectsLocationsProcessorsProcessorVersionsBatchProcessRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DocumentaiProjectsLocationsProcessorsProcessorVersionsBatchProcessResponse res = new org.openapis.openapi.models.operations.DocumentaiProjectsLocationsProcessorsProcessorVersionsBatchProcessResponse(contentType, httpRes.statusCode()) {{
            googleLongrunningOperation = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.GoogleLongrunningOperation out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.GoogleLongrunningOperation.class);
                res.googleLongrunningOperation = out;
            }
        }

        return res;
    }

    /**
     * Deletes the processor version, all artifacts under the processor version will be deleted.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DocumentaiProjectsLocationsProcessorsProcessorVersionsDeleteResponse documentaiProjectsLocationsProcessorsProcessorVersionsDelete(org.openapis.openapi.models.operations.DocumentaiProjectsLocationsProcessorsProcessorVersionsDeleteRequest request, org.openapis.openapi.models.operations.DocumentaiProjectsLocationsProcessorsProcessorVersionsDeleteSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DocumentaiProjectsLocationsProcessorsProcessorVersionsDeleteRequest.class, baseUrl, "/v1/{name}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.DocumentaiProjectsLocationsProcessorsProcessorVersionsDeleteRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DocumentaiProjectsLocationsProcessorsProcessorVersionsDeleteResponse res = new org.openapis.openapi.models.operations.DocumentaiProjectsLocationsProcessorsProcessorVersionsDeleteResponse(contentType, httpRes.statusCode()) {{
            googleLongrunningOperation = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.GoogleLongrunningOperation out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.GoogleLongrunningOperation.class);
                res.googleLongrunningOperation = out;
            }
        }

        return res;
    }

    /**
     * Deploys the processor version.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DocumentaiProjectsLocationsProcessorsProcessorVersionsDeployResponse documentaiProjectsLocationsProcessorsProcessorVersionsDeploy(org.openapis.openapi.models.operations.DocumentaiProjectsLocationsProcessorsProcessorVersionsDeployRequest request, org.openapis.openapi.models.operations.DocumentaiProjectsLocationsProcessorsProcessorVersionsDeploySecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DocumentaiProjectsLocationsProcessorsProcessorVersionsDeployRequest.class, baseUrl, "/v1/{name}:deploy", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "json");
        req.setBody(serializedRequestBody);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.DocumentaiProjectsLocationsProcessorsProcessorVersionsDeployRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DocumentaiProjectsLocationsProcessorsProcessorVersionsDeployResponse res = new org.openapis.openapi.models.operations.DocumentaiProjectsLocationsProcessorsProcessorVersionsDeployResponse(contentType, httpRes.statusCode()) {{
            googleLongrunningOperation = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.GoogleLongrunningOperation out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.GoogleLongrunningOperation.class);
                res.googleLongrunningOperation = out;
            }
        }

        return res;
    }

    /**
     * Evaluates a ProcessorVersion against annotated documents, producing an Evaluation.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DocumentaiProjectsLocationsProcessorsProcessorVersionsEvaluateProcessorVersionResponse documentaiProjectsLocationsProcessorsProcessorVersionsEvaluateProcessorVersion(org.openapis.openapi.models.operations.DocumentaiProjectsLocationsProcessorsProcessorVersionsEvaluateProcessorVersionRequest request, org.openapis.openapi.models.operations.DocumentaiProjectsLocationsProcessorsProcessorVersionsEvaluateProcessorVersionSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DocumentaiProjectsLocationsProcessorsProcessorVersionsEvaluateProcessorVersionRequest.class, baseUrl, "/v1/{processorVersion}:evaluateProcessorVersion", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "googleCloudDocumentaiV1EvaluateProcessorVersionRequest", "json");
        req.setBody(serializedRequestBody);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.DocumentaiProjectsLocationsProcessorsProcessorVersionsEvaluateProcessorVersionRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DocumentaiProjectsLocationsProcessorsProcessorVersionsEvaluateProcessorVersionResponse res = new org.openapis.openapi.models.operations.DocumentaiProjectsLocationsProcessorsProcessorVersionsEvaluateProcessorVersionResponse(contentType, httpRes.statusCode()) {{
            googleLongrunningOperation = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.GoogleLongrunningOperation out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.GoogleLongrunningOperation.class);
                res.googleLongrunningOperation = out;
            }
        }

        return res;
    }

    /**
     * Retrieves a set of evaluations for a given processor version.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DocumentaiProjectsLocationsProcessorsProcessorVersionsEvaluationsListResponse documentaiProjectsLocationsProcessorsProcessorVersionsEvaluationsList(org.openapis.openapi.models.operations.DocumentaiProjectsLocationsProcessorsProcessorVersionsEvaluationsListRequest request, org.openapis.openapi.models.operations.DocumentaiProjectsLocationsProcessorsProcessorVersionsEvaluationsListSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DocumentaiProjectsLocationsProcessorsProcessorVersionsEvaluationsListRequest.class, baseUrl, "/v1/{parent}/evaluations", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.DocumentaiProjectsLocationsProcessorsProcessorVersionsEvaluationsListRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DocumentaiProjectsLocationsProcessorsProcessorVersionsEvaluationsListResponse res = new org.openapis.openapi.models.operations.DocumentaiProjectsLocationsProcessorsProcessorVersionsEvaluationsListResponse(contentType, httpRes.statusCode()) {{
            googleCloudDocumentaiV1ListEvaluationsResponse = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.GoogleCloudDocumentaiV1ListEvaluationsResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.GoogleCloudDocumentaiV1ListEvaluationsResponse.class);
                res.googleCloudDocumentaiV1ListEvaluationsResponse = out;
            }
        }

        return res;
    }

    /**
     * Lists all versions of a processor.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DocumentaiProjectsLocationsProcessorsProcessorVersionsListResponse documentaiProjectsLocationsProcessorsProcessorVersionsList(org.openapis.openapi.models.operations.DocumentaiProjectsLocationsProcessorsProcessorVersionsListRequest request, org.openapis.openapi.models.operations.DocumentaiProjectsLocationsProcessorsProcessorVersionsListSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DocumentaiProjectsLocationsProcessorsProcessorVersionsListRequest.class, baseUrl, "/v1/{parent}/processorVersions", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.DocumentaiProjectsLocationsProcessorsProcessorVersionsListRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DocumentaiProjectsLocationsProcessorsProcessorVersionsListResponse res = new org.openapis.openapi.models.operations.DocumentaiProjectsLocationsProcessorsProcessorVersionsListResponse(contentType, httpRes.statusCode()) {{
            googleCloudDocumentaiV1ListProcessorVersionsResponse = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.GoogleCloudDocumentaiV1ListProcessorVersionsResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.GoogleCloudDocumentaiV1ListProcessorVersionsResponse.class);
                res.googleCloudDocumentaiV1ListProcessorVersionsResponse = out;
            }
        }

        return res;
    }

    /**
     * Processes a single document.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DocumentaiProjectsLocationsProcessorsProcessorVersionsProcessResponse documentaiProjectsLocationsProcessorsProcessorVersionsProcess(org.openapis.openapi.models.operations.DocumentaiProjectsLocationsProcessorsProcessorVersionsProcessRequest request, org.openapis.openapi.models.operations.DocumentaiProjectsLocationsProcessorsProcessorVersionsProcessSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DocumentaiProjectsLocationsProcessorsProcessorVersionsProcessRequest.class, baseUrl, "/v1/{name}:process", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "googleCloudDocumentaiV1ProcessRequest", "json");
        req.setBody(serializedRequestBody);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.DocumentaiProjectsLocationsProcessorsProcessorVersionsProcessRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DocumentaiProjectsLocationsProcessorsProcessorVersionsProcessResponse res = new org.openapis.openapi.models.operations.DocumentaiProjectsLocationsProcessorsProcessorVersionsProcessResponse(contentType, httpRes.statusCode()) {{
            googleCloudDocumentaiV1ProcessResponse = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.GoogleCloudDocumentaiV1ProcessResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.GoogleCloudDocumentaiV1ProcessResponse.class);
                res.googleCloudDocumentaiV1ProcessResponse = out;
            }
        }

        return res;
    }

    /**
     * Trains a new processor version. Operation metadata is returned as TrainProcessorVersionMetadata.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DocumentaiProjectsLocationsProcessorsProcessorVersionsTrainResponse documentaiProjectsLocationsProcessorsProcessorVersionsTrain(org.openapis.openapi.models.operations.DocumentaiProjectsLocationsProcessorsProcessorVersionsTrainRequest request, org.openapis.openapi.models.operations.DocumentaiProjectsLocationsProcessorsProcessorVersionsTrainSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DocumentaiProjectsLocationsProcessorsProcessorVersionsTrainRequest.class, baseUrl, "/v1/{parent}/processorVersions:train", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "googleCloudDocumentaiV1TrainProcessorVersionRequest", "json");
        req.setBody(serializedRequestBody);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.DocumentaiProjectsLocationsProcessorsProcessorVersionsTrainRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DocumentaiProjectsLocationsProcessorsProcessorVersionsTrainResponse res = new org.openapis.openapi.models.operations.DocumentaiProjectsLocationsProcessorsProcessorVersionsTrainResponse(contentType, httpRes.statusCode()) {{
            googleLongrunningOperation = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.GoogleLongrunningOperation out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.GoogleLongrunningOperation.class);
                res.googleLongrunningOperation = out;
            }
        }

        return res;
    }

    /**
     * Undeploys the processor version.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DocumentaiProjectsLocationsProcessorsProcessorVersionsUndeployResponse documentaiProjectsLocationsProcessorsProcessorVersionsUndeploy(org.openapis.openapi.models.operations.DocumentaiProjectsLocationsProcessorsProcessorVersionsUndeployRequest request, org.openapis.openapi.models.operations.DocumentaiProjectsLocationsProcessorsProcessorVersionsUndeploySecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DocumentaiProjectsLocationsProcessorsProcessorVersionsUndeployRequest.class, baseUrl, "/v1/{name}:undeploy", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "json");
        req.setBody(serializedRequestBody);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.DocumentaiProjectsLocationsProcessorsProcessorVersionsUndeployRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DocumentaiProjectsLocationsProcessorsProcessorVersionsUndeployResponse res = new org.openapis.openapi.models.operations.DocumentaiProjectsLocationsProcessorsProcessorVersionsUndeployResponse(contentType, httpRes.statusCode()) {{
            googleLongrunningOperation = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.GoogleLongrunningOperation out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.GoogleLongrunningOperation.class);
                res.googleLongrunningOperation = out;
            }
        }

        return res;
    }

    /**
     * Set the default (active) version of a Processor that will be used in ProcessDocument and BatchProcessDocuments.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DocumentaiProjectsLocationsProcessorsSetDefaultProcessorVersionResponse documentaiProjectsLocationsProcessorsSetDefaultProcessorVersion(org.openapis.openapi.models.operations.DocumentaiProjectsLocationsProcessorsSetDefaultProcessorVersionRequest request, org.openapis.openapi.models.operations.DocumentaiProjectsLocationsProcessorsSetDefaultProcessorVersionSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DocumentaiProjectsLocationsProcessorsSetDefaultProcessorVersionRequest.class, baseUrl, "/v1/{processor}:setDefaultProcessorVersion", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "googleCloudDocumentaiV1SetDefaultProcessorVersionRequest", "json");
        req.setBody(serializedRequestBody);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.DocumentaiProjectsLocationsProcessorsSetDefaultProcessorVersionRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DocumentaiProjectsLocationsProcessorsSetDefaultProcessorVersionResponse res = new org.openapis.openapi.models.operations.DocumentaiProjectsLocationsProcessorsSetDefaultProcessorVersionResponse(contentType, httpRes.statusCode()) {{
            googleLongrunningOperation = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.GoogleLongrunningOperation out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.GoogleLongrunningOperation.class);
                res.googleLongrunningOperation = out;
            }
        }

        return res;
    }

    /**
     * Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DocumentaiProjectsOperationsGetResponse documentaiProjectsOperationsGet(org.openapis.openapi.models.operations.DocumentaiProjectsOperationsGetRequest request, org.openapis.openapi.models.operations.DocumentaiProjectsOperationsGetSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DocumentaiProjectsOperationsGetRequest.class, baseUrl, "/v1/{name}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.DocumentaiProjectsOperationsGetRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DocumentaiProjectsOperationsGetResponse res = new org.openapis.openapi.models.operations.DocumentaiProjectsOperationsGetResponse(contentType, httpRes.statusCode()) {{
            googleLongrunningOperation = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.GoogleLongrunningOperation out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.GoogleLongrunningOperation.class);
                res.googleLongrunningOperation = out;
            }
        }

        return res;
    }
}