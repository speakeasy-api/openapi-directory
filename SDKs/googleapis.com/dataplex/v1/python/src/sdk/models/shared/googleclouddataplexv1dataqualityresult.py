"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import googleclouddataplexv1dataqualitydimensionresult as shared_googleclouddataplexv1dataqualitydimensionresult
from ..shared import googleclouddataplexv1dataqualityruleresult as shared_googleclouddataplexv1dataqualityruleresult
from ..shared import googleclouddataplexv1scanneddata as shared_googleclouddataplexv1scanneddata
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GoogleCloudDataplexV1DataQualityResult:
    r"""The output of a DataQualityScan."""
    
    dimensions: Optional[list[shared_googleclouddataplexv1dataqualitydimensionresult.GoogleCloudDataplexV1DataQualityDimensionResult]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dimensions'), 'exclude': lambda f: f is None }})
    r"""A list of results at the dimension level."""  
    passed: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('passed'), 'exclude': lambda f: f is None }})
    r"""Overall data quality result -- true if all rules passed."""  
    row_count: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('rowCount'), 'exclude': lambda f: f is None }})
    r"""The count of rows processed."""  
    rules: Optional[list[shared_googleclouddataplexv1dataqualityruleresult.GoogleCloudDataplexV1DataQualityRuleResult]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('rules'), 'exclude': lambda f: f is None }})
    r"""A list of all the rules in a job, and their results."""  
    scanned_data: Optional[shared_googleclouddataplexv1scanneddata.GoogleCloudDataplexV1ScannedData] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('scannedData'), 'exclude': lambda f: f is None }})
    r"""The data scanned during processing (e.g. in incremental DataScan)"""  
    