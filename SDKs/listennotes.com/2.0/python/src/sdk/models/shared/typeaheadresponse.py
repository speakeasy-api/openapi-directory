"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import genre as shared_genre
from ..shared import podcasttypeaheadresult as shared_podcasttypeaheadresult
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class TypeaheadResponse:
    r"""OK"""
    
    terms: list[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('terms') }})
    r"""Search term suggestions."""  
    genres: Optional[list[shared_genre.Genre]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('genres'), 'exclude': lambda f: f is None }})
    r"""Genre suggestions. It'll show up when the **show_genres** parameter is *1*."""  
    podcasts: Optional[list[shared_podcasttypeaheadresult.PodcastTypeaheadResult]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('podcasts'), 'exclude': lambda f: f is None }})
    r"""Podcast suggestions. It'll show up when the **show_podcasts** parameter is 1."""  
    