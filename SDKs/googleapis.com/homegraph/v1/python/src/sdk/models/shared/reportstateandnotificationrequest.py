"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import stateandnotificationpayload as shared_stateandnotificationpayload
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ReportStateAndNotificationRequest:
    r"""Request type for the [`ReportStateAndNotification`](#google.home.graph.v1.HomeGraphApiService.ReportStateAndNotification) call. It may include states, notifications, or both. States and notifications are defined per `device_id` (for example, \\"123\\" and \\"456\\" in the following example). Example: ```json { \\"requestId\\": \\"ff36a3cc-ec34-11e6-b1a0-64510650abcf\\", \\"agentUserId\\": \\"1234\\", \\"payload\\": { \\"devices\\": { \\"states\\": { \\"123\\": { \\"on\\": true }, \\"456\\": { \\"on\\": true, \\"brightness\\": 10 } }, } } } ```"""
    
    agent_user_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('agentUserId'), 'exclude': lambda f: f is None }})
    r"""Required. Third-party user ID."""  
    event_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('eventId'), 'exclude': lambda f: f is None }})
    r"""Unique identifier per event (for example, a doorbell press)."""  
    follow_up_token: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('followUpToken'), 'exclude': lambda f: f is None }})
    r"""Deprecated."""  
    payload: Optional[shared_stateandnotificationpayload.StateAndNotificationPayload] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('payload'), 'exclude': lambda f: f is None }})
    r"""Payload containing the state and notification information for devices."""  
    request_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('requestId'), 'exclude': lambda f: f is None }})
    r"""Request ID used for debugging."""  
    