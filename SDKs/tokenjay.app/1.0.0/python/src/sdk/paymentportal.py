"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared

class PaymentPortal:
    r"""ErgoPay payment portal"""
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def add_payment_request(self, request: shared.CreatePaymentRequest) -> operations.AddPaymentRequestResponse:
        r"""Creates a new payment request. Will return request id to check for transaction state and ergopay url to show the user as QR code"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/payment/addrequest'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AddPaymentRequestResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, '*/*'):
                res.add_payment_request_400_wildcard_string = http_res.content
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, '*/*'):
                res.add_payment_request_401_wildcard_string = http_res.content
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, '*/*'):
                res.add_payment_request_404_wildcard_string = http_res.content
        elif http_res.status_code == 409:
            if utils.match_content_type(content_type, '*/*'):
                res.add_payment_request_409_wildcard_string = http_res.content

        return res

    def get_payment_state(self, request: operations.GetPaymentStateRequest) -> operations.GetPaymentStateResponse:
        r"""Returns the state of a payment request. Please note that payment requests are purged after some time, so persist the state at your side when needed"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetPaymentStateRequest, base_url, '/payment/state/{requestId}', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetPaymentStateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, '*/*'):
                res.get_payment_state_400_wildcard_string = http_res.content
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, '*/*'):
                res.get_payment_state_401_wildcard_string = http_res.content
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, '*/*'):
                res.get_payment_state_404_wildcard_string = http_res.content
        elif http_res.status_code == 409:
            if utils.match_content_type(content_type, '*/*'):
                res.get_payment_state_409_wildcard_string = http_res.content

        return res

    