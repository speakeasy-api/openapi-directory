/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class BoxConsolidationController {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  epConsolidate(
    req: operations.EpConsolidateRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.EpConsolidateResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.EpConsolidateRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/mosaik/boxconsolidation/consolidate/{p2pkaddress}",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.EpConsolidateResponse =
        new operations.EpConsolidateResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `*/*`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `*/*`)) {
            res.epConsolidate400WildcardString = JSON.stringify(httpRes?.data);
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `*/*`)) {
            res.epConsolidate401WildcardString = JSON.stringify(httpRes?.data);
          }
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `*/*`)) {
            res.epConsolidate404WildcardString = JSON.stringify(httpRes?.data);
          }
          break;
        case httpRes?.status == 409:
          if (utils.matchContentType(contentType, `*/*`)) {
            res.epConsolidate409WildcardString = JSON.stringify(httpRes?.data);
          }
          break;
      }

      return res;
    });
  }

  mainApp1(config?: AxiosRequestConfig): Promise<operations.MainApp1Response> {
    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/mosaik/boxconsolidation/";

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.MainApp1Response = new operations.MainApp1Response({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
      });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `*/*`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `*/*`)) {
            res.mainApp1400WildcardString = JSON.stringify(httpRes?.data);
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `*/*`)) {
            res.mainApp1401WildcardString = JSON.stringify(httpRes?.data);
          }
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `*/*`)) {
            res.mainApp1404WildcardString = JSON.stringify(httpRes?.data);
          }
          break;
        case httpRes?.status == 409:
          if (utils.matchContentType(contentType, `*/*`)) {
            res.mainApp1409WildcardString = JSON.stringify(httpRes?.data);
          }
          break;
      }

      return res;
    });
  }
}
