/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi;

import com.fasterxml.jackson.databind.ObjectMapper;
import java.net.http.HttpResponse;
import java.nio.charset.StandardCharsets;
import org.apache.http.NameValuePair;
import org.openapis.openapi.utils.HTTPClient;
import org.openapis.openapi.utils.HTTPRequest;
import org.openapis.openapi.utils.JSON;

public class Line {
	
	private HTTPClient _defaultClient;
	private HTTPClient _securityClient;
	private String _serverUrl;
	private String _language;
	private String _sdkVersion;
	private String _genVersion;

	public Line(HTTPClient defaultClient, HTTPClient securityClient, String serverUrl, String language, String sdkVersion, String genVersion) {
		this._defaultClient = defaultClient;
		this._securityClient = securityClient;
		this._serverUrl = serverUrl;
		this._language = language;
		this._sdkVersion = sdkVersion;
		this._genVersion = genVersion;
	}

    /**
     * Get the list of arrival predictions for given line ids based at the given stop
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.LineArrivalsResponse lineArrivals(org.openapis.openapi.models.operations.LineArrivalsRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.LineArrivalsRequest.class, baseUrl, "/Line/{ids}/Arrivals/{stopPointId}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.LineArrivalsRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.LineArrivalsResponse res = new org.openapis.openapi.models.operations.LineArrivalsResponse() {{
            tflApiPresentationEntitiesPredictions = null;
            tflApiPresentationEntitiesPredictions = null;
            body = null;
            body = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.TflApiPresentationEntitiesPrediction[] out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.TflApiPresentationEntitiesPrediction[].class);
                res.tflApiPresentationEntitiesPredictions = out;
            }
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "text/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.TflApiPresentationEntitiesPrediction[] out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.TflApiPresentationEntitiesPrediction[].class);
                res.tflApiPresentationEntitiesPredictions = out;
            }
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/xml")) {
                byte[] out = httpRes.body();
                res.body = out;
            }
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "text/xml")) {
                byte[] out = httpRes.body();
                res.body = out;
            }
        }

        return res;
    }

    /**
     * Get disruptions for the given line ids
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.LineDisruptionResponse lineDisruption(org.openapis.openapi.models.operations.LineDisruptionRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.LineDisruptionRequest.class, baseUrl, "/Line/{ids}/Disruption", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.LineDisruptionResponse res = new org.openapis.openapi.models.operations.LineDisruptionResponse() {{
            tflApiPresentationEntitiesDisruptions = null;
            tflApiPresentationEntitiesDisruptions = null;
            body = null;
            body = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.TflApiPresentationEntitiesDisruption[] out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.TflApiPresentationEntitiesDisruption[].class);
                res.tflApiPresentationEntitiesDisruptions = out;
            }
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "text/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.TflApiPresentationEntitiesDisruption[] out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.TflApiPresentationEntitiesDisruption[].class);
                res.tflApiPresentationEntitiesDisruptions = out;
            }
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/xml")) {
                byte[] out = httpRes.body();
                res.body = out;
            }
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "text/xml")) {
                byte[] out = httpRes.body();
                res.body = out;
            }
        }

        return res;
    }

    /**
     * Get disruptions for all lines of the given modes.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.LineDisruptionByModeResponse lineDisruptionByMode(org.openapis.openapi.models.operations.LineDisruptionByModeRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.LineDisruptionByModeRequest.class, baseUrl, "/Line/Mode/{modes}/Disruption", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.LineDisruptionByModeResponse res = new org.openapis.openapi.models.operations.LineDisruptionByModeResponse() {{
            tflApiPresentationEntitiesDisruptions = null;
            tflApiPresentationEntitiesDisruptions = null;
            body = null;
            body = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.TflApiPresentationEntitiesDisruption[] out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.TflApiPresentationEntitiesDisruption[].class);
                res.tflApiPresentationEntitiesDisruptions = out;
            }
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "text/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.TflApiPresentationEntitiesDisruption[] out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.TflApiPresentationEntitiesDisruption[].class);
                res.tflApiPresentationEntitiesDisruptions = out;
            }
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/xml")) {
                byte[] out = httpRes.body();
                res.body = out;
            }
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "text/xml")) {
                byte[] out = httpRes.body();
                res.body = out;
            }
        }

        return res;
    }

    /**
     * Gets lines that match the specified line ids.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.LineGetResponse lineGet(org.openapis.openapi.models.operations.LineGetRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.LineGetRequest.class, baseUrl, "/Line/{ids}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.LineGetResponse res = new org.openapis.openapi.models.operations.LineGetResponse() {{
            tflApiPresentationEntitiesLines = null;
            tflApiPresentationEntitiesLines = null;
            body = null;
            body = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.TflApiPresentationEntitiesLine[] out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.TflApiPresentationEntitiesLine[].class);
                res.tflApiPresentationEntitiesLines = out;
            }
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "text/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.TflApiPresentationEntitiesLine[] out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.TflApiPresentationEntitiesLine[].class);
                res.tflApiPresentationEntitiesLines = out;
            }
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/xml")) {
                byte[] out = httpRes.body();
                res.body = out;
            }
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "text/xml")) {
                byte[] out = httpRes.body();
                res.body = out;
            }
        }

        return res;
    }

    /**
     * Gets lines that serve the given modes.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.LineGetByModeResponse lineGetByMode(org.openapis.openapi.models.operations.LineGetByModeRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.LineGetByModeRequest.class, baseUrl, "/Line/Mode/{modes}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.LineGetByModeResponse res = new org.openapis.openapi.models.operations.LineGetByModeResponse() {{
            tflApiPresentationEntitiesLines = null;
            tflApiPresentationEntitiesLines = null;
            body = null;
            body = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.TflApiPresentationEntitiesLine[] out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.TflApiPresentationEntitiesLine[].class);
                res.tflApiPresentationEntitiesLines = out;
            }
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "text/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.TflApiPresentationEntitiesLine[] out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.TflApiPresentationEntitiesLine[].class);
                res.tflApiPresentationEntitiesLines = out;
            }
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/xml")) {
                byte[] out = httpRes.body();
                res.body = out;
            }
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "text/xml")) {
                byte[] out = httpRes.body();
                res.body = out;
            }
        }

        return res;
    }

    /**
     * Get all valid routes for given line ids, including the name and id of the originating and terminating stops for each route.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.LineLineRoutesByIdsResponse lineLineRoutesByIds(org.openapis.openapi.models.operations.LineLineRoutesByIdsRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.LineLineRoutesByIdsRequest.class, baseUrl, "/Line/{ids}/Route", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.LineLineRoutesByIdsRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.LineLineRoutesByIdsResponse res = new org.openapis.openapi.models.operations.LineLineRoutesByIdsResponse() {{
            tflApiPresentationEntitiesLines = null;
            tflApiPresentationEntitiesLines = null;
            body = null;
            body = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.TflApiPresentationEntitiesLine[] out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.TflApiPresentationEntitiesLine[].class);
                res.tflApiPresentationEntitiesLines = out;
            }
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "text/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.TflApiPresentationEntitiesLine[] out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.TflApiPresentationEntitiesLine[].class);
                res.tflApiPresentationEntitiesLines = out;
            }
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/xml")) {
                byte[] out = httpRes.body();
                res.body = out;
            }
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "text/xml")) {
                byte[] out = httpRes.body();
                res.body = out;
            }
        }

        return res;
    }

    /**
     * Gets a list of valid disruption categories
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.LineMetaDisruptionCategoriesResponse lineMetaDisruptionCategories() throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/Line/Meta/DisruptionCategories");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.LineMetaDisruptionCategoriesResponse res = new org.openapis.openapi.models.operations.LineMetaDisruptionCategoriesResponse() {{
            lineMetaDisruptionCategories200ApplicationJSONStrings = null;
            body = null;
            body = null;
            lineMetaDisruptionCategories200TextJSONStrings = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                String[] out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), String[].class);
                res.lineMetaDisruptionCategories200ApplicationJSONStrings = out;
            }
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/xml")) {
                byte[] out = httpRes.body();
                res.body = out;
            }
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "text/xml")) {
                byte[] out = httpRes.body();
                res.body = out;
            }
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "text/json")) {
                ObjectMapper mapper = JSON.getMapper();
                String[] out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), String[].class);
                res.lineMetaDisruptionCategories200TextJSONStrings = out;
            }
        }

        return res;
    }

    /**
     * Gets a list of valid modes
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.LineMetaModesResponse lineMetaModes() throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/Line/Meta/Modes");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.LineMetaModesResponse res = new org.openapis.openapi.models.operations.LineMetaModesResponse() {{
            tflApiPresentationEntitiesModes = null;
            tflApiPresentationEntitiesModes = null;
            body = null;
            body = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.TflApiPresentationEntitiesMode[] out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.TflApiPresentationEntitiesMode[].class);
                res.tflApiPresentationEntitiesModes = out;
            }
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "text/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.TflApiPresentationEntitiesMode[] out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.TflApiPresentationEntitiesMode[].class);
                res.tflApiPresentationEntitiesModes = out;
            }
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/xml")) {
                byte[] out = httpRes.body();
                res.body = out;
            }
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "text/xml")) {
                byte[] out = httpRes.body();
                res.body = out;
            }
        }

        return res;
    }

    /**
     * Gets a list of valid ServiceTypes to filter on
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.LineMetaServiceTypesResponse lineMetaServiceTypes() throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/Line/Meta/ServiceTypes");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.LineMetaServiceTypesResponse res = new org.openapis.openapi.models.operations.LineMetaServiceTypesResponse() {{
            lineMetaServiceTypes200ApplicationJSONStrings = null;
            body = null;
            body = null;
            lineMetaServiceTypes200TextJSONStrings = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                String[] out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), String[].class);
                res.lineMetaServiceTypes200ApplicationJSONStrings = out;
            }
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/xml")) {
                byte[] out = httpRes.body();
                res.body = out;
            }
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "text/xml")) {
                byte[] out = httpRes.body();
                res.body = out;
            }
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "text/json")) {
                ObjectMapper mapper = JSON.getMapper();
                String[] out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), String[].class);
                res.lineMetaServiceTypes200TextJSONStrings = out;
            }
        }

        return res;
    }

    /**
     * Gets a list of valid severity codes
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.LineMetaSeverityResponse lineMetaSeverity() throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/Line/Meta/Severity");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.LineMetaSeverityResponse res = new org.openapis.openapi.models.operations.LineMetaSeverityResponse() {{
            tflApiPresentationEntitiesStatusSeverities = null;
            tflApiPresentationEntitiesStatusSeverities = null;
            body = null;
            body = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.TflApiPresentationEntitiesStatusSeverity[] out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.TflApiPresentationEntitiesStatusSeverity[].class);
                res.tflApiPresentationEntitiesStatusSeverities = out;
            }
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "text/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.TflApiPresentationEntitiesStatusSeverity[] out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.TflApiPresentationEntitiesStatusSeverity[].class);
                res.tflApiPresentationEntitiesStatusSeverities = out;
            }
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/xml")) {
                byte[] out = httpRes.body();
                res.body = out;
            }
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "text/xml")) {
                byte[] out = httpRes.body();
                res.body = out;
            }
        }

        return res;
    }

    /**
     * Get all valid routes for all lines, including the name and id of the originating and terminating stops for each route.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.LineRouteResponse lineRoute(org.openapis.openapi.models.operations.LineRouteRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/Line/Route");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.LineRouteRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.LineRouteResponse res = new org.openapis.openapi.models.operations.LineRouteResponse() {{
            tflApiPresentationEntitiesLines = null;
            tflApiPresentationEntitiesLines = null;
            body = null;
            body = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.TflApiPresentationEntitiesLine[] out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.TflApiPresentationEntitiesLine[].class);
                res.tflApiPresentationEntitiesLines = out;
            }
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "text/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.TflApiPresentationEntitiesLine[] out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.TflApiPresentationEntitiesLine[].class);
                res.tflApiPresentationEntitiesLines = out;
            }
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/xml")) {
                byte[] out = httpRes.body();
                res.body = out;
            }
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "text/xml")) {
                byte[] out = httpRes.body();
                res.body = out;
            }
        }

        return res;
    }

    /**
     * Gets all lines and their valid routes for given modes, including the name and id of the originating and terminating stops for each route
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.LineRouteByModeResponse lineRouteByMode(org.openapis.openapi.models.operations.LineRouteByModeRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.LineRouteByModeRequest.class, baseUrl, "/Line/Mode/{modes}/Route", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.LineRouteByModeRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.LineRouteByModeResponse res = new org.openapis.openapi.models.operations.LineRouteByModeResponse() {{
            tflApiPresentationEntitiesLines = null;
            tflApiPresentationEntitiesLines = null;
            body = null;
            body = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.TflApiPresentationEntitiesLine[] out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.TflApiPresentationEntitiesLine[].class);
                res.tflApiPresentationEntitiesLines = out;
            }
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "text/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.TflApiPresentationEntitiesLine[] out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.TflApiPresentationEntitiesLine[].class);
                res.tflApiPresentationEntitiesLines = out;
            }
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/xml")) {
                byte[] out = httpRes.body();
                res.body = out;
            }
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "text/xml")) {
                byte[] out = httpRes.body();
                res.body = out;
            }
        }

        return res;
    }

    /**
     * Gets all valid routes for given line id, including the sequence of stops on each route.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.LineRouteSequenceResponse lineRouteSequence(org.openapis.openapi.models.operations.LineRouteSequenceRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.LineRouteSequenceRequest.class, baseUrl, "/Line/{id}/Route/Sequence/{direction}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.LineRouteSequenceRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.LineRouteSequenceResponse res = new org.openapis.openapi.models.operations.LineRouteSequenceResponse() {{
            tflApiPresentationEntitiesRouteSequence = null;
            tflApiPresentationEntitiesRouteSequence = null;
            body = null;
            body = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.TflApiPresentationEntitiesRouteSequence out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.TflApiPresentationEntitiesRouteSequence.class);
                res.tflApiPresentationEntitiesRouteSequence = out;
            }
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "text/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.TflApiPresentationEntitiesRouteSequence out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.TflApiPresentationEntitiesRouteSequence.class);
                res.tflApiPresentationEntitiesRouteSequence = out;
            }
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/xml")) {
                byte[] out = httpRes.body();
                res.body = out;
            }
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "text/xml")) {
                byte[] out = httpRes.body();
                res.body = out;
            }
        }

        return res;
    }

    /**
     * Search for lines or routes matching the query string
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.LineSearchResponse lineSearch(org.openapis.openapi.models.operations.LineSearchRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.LineSearchRequest.class, baseUrl, "/Line/Search/{query}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.LineSearchRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.LineSearchResponse res = new org.openapis.openapi.models.operations.LineSearchResponse() {{
            tflApiPresentationEntitiesRouteSearchResponse = null;
            tflApiPresentationEntitiesRouteSearchResponse = null;
            body = null;
            body = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.TflApiPresentationEntitiesRouteSearchResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.TflApiPresentationEntitiesRouteSearchResponse.class);
                res.tflApiPresentationEntitiesRouteSearchResponse = out;
            }
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "text/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.TflApiPresentationEntitiesRouteSearchResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.TflApiPresentationEntitiesRouteSearchResponse.class);
                res.tflApiPresentationEntitiesRouteSearchResponse = out;
            }
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/xml")) {
                byte[] out = httpRes.body();
                res.body = out;
            }
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "text/xml")) {
                byte[] out = httpRes.body();
                res.body = out;
            }
        }

        return res;
    }

    /**
     * Gets the line status for given line ids during the provided dates e.g Minor Delays
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.LineStatusResponse lineStatus(org.openapis.openapi.models.operations.LineStatusRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.LineStatusRequest.class, baseUrl, "/Line/{ids}/Status/{StartDate}/to/{EndDate}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.LineStatusRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.LineStatusResponse res = new org.openapis.openapi.models.operations.LineStatusResponse() {{
            tflApiPresentationEntitiesLines = null;
            tflApiPresentationEntitiesLines = null;
            body = null;
            body = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.TflApiPresentationEntitiesLine[] out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.TflApiPresentationEntitiesLine[].class);
                res.tflApiPresentationEntitiesLines = out;
            }
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "text/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.TflApiPresentationEntitiesLine[] out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.TflApiPresentationEntitiesLine[].class);
                res.tflApiPresentationEntitiesLines = out;
            }
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/xml")) {
                byte[] out = httpRes.body();
                res.body = out;
            }
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "text/xml")) {
                byte[] out = httpRes.body();
                res.body = out;
            }
        }

        return res;
    }

    /**
     * Gets the line status of for given line ids e.g Minor Delays
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.LineStatusByIdsResponse lineStatusByIds(org.openapis.openapi.models.operations.LineStatusByIdsRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.LineStatusByIdsRequest.class, baseUrl, "/Line/{ids}/Status", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.LineStatusByIdsRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.LineStatusByIdsResponse res = new org.openapis.openapi.models.operations.LineStatusByIdsResponse() {{
            tflApiPresentationEntitiesLines = null;
            tflApiPresentationEntitiesLines = null;
            body = null;
            body = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.TflApiPresentationEntitiesLine[] out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.TflApiPresentationEntitiesLine[].class);
                res.tflApiPresentationEntitiesLines = out;
            }
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "text/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.TflApiPresentationEntitiesLine[] out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.TflApiPresentationEntitiesLine[].class);
                res.tflApiPresentationEntitiesLines = out;
            }
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/xml")) {
                byte[] out = httpRes.body();
                res.body = out;
            }
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "text/xml")) {
                byte[] out = httpRes.body();
                res.body = out;
            }
        }

        return res;
    }

    /**
     * Gets the line status of for all lines for the given modes
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.LineStatusByModeResponse lineStatusByMode(org.openapis.openapi.models.operations.LineStatusByModeRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.LineStatusByModeRequest.class, baseUrl, "/Line/Mode/{modes}/Status", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.LineStatusByModeRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.LineStatusByModeResponse res = new org.openapis.openapi.models.operations.LineStatusByModeResponse() {{
            tflApiPresentationEntitiesLines = null;
            tflApiPresentationEntitiesLines = null;
            body = null;
            body = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.TflApiPresentationEntitiesLine[] out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.TflApiPresentationEntitiesLine[].class);
                res.tflApiPresentationEntitiesLines = out;
            }
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "text/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.TflApiPresentationEntitiesLine[] out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.TflApiPresentationEntitiesLine[].class);
                res.tflApiPresentationEntitiesLines = out;
            }
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/xml")) {
                byte[] out = httpRes.body();
                res.body = out;
            }
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "text/xml")) {
                byte[] out = httpRes.body();
                res.body = out;
            }
        }

        return res;
    }

    /**
     * Gets the line status for all lines with a given severity -             A list of valid severity codes can be obtained from a call to Line/Meta/Severity
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.LineStatusBySeverityResponse lineStatusBySeverity(org.openapis.openapi.models.operations.LineStatusBySeverityRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.LineStatusBySeverityRequest.class, baseUrl, "/Line/Status/{severity}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.LineStatusBySeverityResponse res = new org.openapis.openapi.models.operations.LineStatusBySeverityResponse() {{
            tflApiPresentationEntitiesLines = null;
            tflApiPresentationEntitiesLines = null;
            body = null;
            body = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.TflApiPresentationEntitiesLine[] out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.TflApiPresentationEntitiesLine[].class);
                res.tflApiPresentationEntitiesLines = out;
            }
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "text/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.TflApiPresentationEntitiesLine[] out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.TflApiPresentationEntitiesLine[].class);
                res.tflApiPresentationEntitiesLines = out;
            }
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/xml")) {
                byte[] out = httpRes.body();
                res.body = out;
            }
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "text/xml")) {
                byte[] out = httpRes.body();
                res.body = out;
            }
        }

        return res;
    }

    /**
     * Gets a list of the stations that serve the given line id
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.LineStopPointsResponse lineStopPoints(org.openapis.openapi.models.operations.LineStopPointsRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.LineStopPointsRequest.class, baseUrl, "/Line/{id}/StopPoints", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.LineStopPointsRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.LineStopPointsResponse res = new org.openapis.openapi.models.operations.LineStopPointsResponse() {{
            tflApiPresentationEntitiesStopPoints = null;
            tflApiPresentationEntitiesStopPoints = null;
            body = null;
            body = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.TflApiPresentationEntitiesStopPoint[] out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.TflApiPresentationEntitiesStopPoint[].class);
                res.tflApiPresentationEntitiesStopPoints = out;
            }
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "text/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.TflApiPresentationEntitiesStopPoint[] out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.TflApiPresentationEntitiesStopPoint[].class);
                res.tflApiPresentationEntitiesStopPoints = out;
            }
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/xml")) {
                byte[] out = httpRes.body();
                res.body = out;
            }
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "text/xml")) {
                byte[] out = httpRes.body();
                res.body = out;
            }
        }

        return res;
    }

    /**
     * Gets the timetable for a specified station on the give line
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.LineTimetableResponse lineTimetable(org.openapis.openapi.models.operations.LineTimetableRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.LineTimetableRequest.class, baseUrl, "/Line/{id}/Timetable/{fromStopPointId}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.LineTimetableResponse res = new org.openapis.openapi.models.operations.LineTimetableResponse() {{
            tflApiPresentationEntitiesTimetableResponse = null;
            tflApiPresentationEntitiesTimetableResponse = null;
            body = null;
            body = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.TflApiPresentationEntitiesTimetableResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.TflApiPresentationEntitiesTimetableResponse.class);
                res.tflApiPresentationEntitiesTimetableResponse = out;
            }
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "text/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.TflApiPresentationEntitiesTimetableResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.TflApiPresentationEntitiesTimetableResponse.class);
                res.tflApiPresentationEntitiesTimetableResponse = out;
            }
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/xml")) {
                byte[] out = httpRes.body();
                res.body = out;
            }
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "text/xml")) {
                byte[] out = httpRes.body();
                res.body = out;
            }
        }

        return res;
    }

    /**
     * Gets the timetable for a specified station on the give line with specified destination
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.LineTimetableToResponse lineTimetableTo(org.openapis.openapi.models.operations.LineTimetableToRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.LineTimetableToRequest.class, baseUrl, "/Line/{id}/Timetable/{fromStopPointId}/to/{toStopPointId}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.LineTimetableToResponse res = new org.openapis.openapi.models.operations.LineTimetableToResponse() {{
            tflApiPresentationEntitiesTimetableResponse = null;
            tflApiPresentationEntitiesTimetableResponse = null;
            body = null;
            body = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.TflApiPresentationEntitiesTimetableResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.TflApiPresentationEntitiesTimetableResponse.class);
                res.tflApiPresentationEntitiesTimetableResponse = out;
            }
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "text/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.TflApiPresentationEntitiesTimetableResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.TflApiPresentationEntitiesTimetableResponse.class);
                res.tflApiPresentationEntitiesTimetableResponse = out;
            }
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/xml")) {
                byte[] out = httpRes.body();
                res.body = out;
            }
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "text/xml")) {
                byte[] out = httpRes.body();
                res.body = out;
            }
        }

        return res;
    }
}