/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { ContentRedaction } from "./contentredaction";
import { LanguageCodeEnum } from "./languagecodeenum";
import { LanguageCodeItem } from "./languagecodeitem";
import { ModelSettings } from "./modelsettings";
import { OutputLocationTypeEnum } from "./outputlocationtypeenum";
import { TranscriptionJobStatusEnum } from "./transcriptionjobstatusenum";
import { Expose, Transform, Type } from "class-transformer";

/**
 * Provides detailed information about a specific transcription job.
 */
export class TranscriptionJobSummary extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "CompletionTime" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  completionTime?: Date;

  @SpeakeasyMetadata()
  @Expose({ name: "ContentRedaction" })
  @Type(() => ContentRedaction)
  contentRedaction?: ContentRedaction;

  @SpeakeasyMetadata()
  @Expose({ name: "CreationTime" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  creationTime?: Date;

  @SpeakeasyMetadata()
  @Expose({ name: "FailureReason" })
  failureReason?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "IdentifiedLanguageScore" })
  identifiedLanguageScore?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "IdentifyLanguage" })
  identifyLanguage?: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "IdentifyMultipleLanguages" })
  identifyMultipleLanguages?: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "LanguageCode" })
  languageCode?: LanguageCodeEnum;

  @SpeakeasyMetadata({ elemType: LanguageCodeItem })
  @Expose({ name: "LanguageCodes" })
  @Type(() => LanguageCodeItem)
  languageCodes?: LanguageCodeItem[];

  /**
   * <p>Provides the name of the custom language model that was included in the specified transcription job.</p> <p>Only use <code>ModelSettings</code> with the <code>LanguageModelName</code> sub-parameter if you're <b>not</b> using automatic language identification (<code/>). If using <code>LanguageIdSettings</code> in your request, this parameter contains a <code>LanguageModelName</code> sub-parameter.</p>
   */
  @SpeakeasyMetadata()
  @Expose({ name: "ModelSettings" })
  @Type(() => ModelSettings)
  modelSettings?: ModelSettings;

  @SpeakeasyMetadata()
  @Expose({ name: "OutputLocationType" })
  outputLocationType?: OutputLocationTypeEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "StartTime" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  startTime?: Date;

  @SpeakeasyMetadata()
  @Expose({ name: "TranscriptionJobName" })
  transcriptionJobName?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "TranscriptionJobStatus" })
  transcriptionJobStatus?: TranscriptionJobStatusEnum;
}
