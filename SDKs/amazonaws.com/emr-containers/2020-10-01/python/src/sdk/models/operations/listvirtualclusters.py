"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import listvirtualclustersresponse as shared_listvirtualclustersresponse
from ..shared import virtualclusterstate_enum as shared_virtualclusterstate_enum
from datetime import datetime
from enum import Enum
from typing import Any, Optional

class ListVirtualClustersContainerProviderTypeEnum(str, Enum):
    r"""The container provider type of the virtual cluster. Amazon EKS is the only supported type as of now."""
    EKS = 'EKS'


@dataclasses.dataclass
class ListVirtualClustersRequest:
    
    container_provider_id: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'containerProviderId', 'style': 'form', 'explode': True }})
    r"""The container provider ID of the virtual cluster."""  
    container_provider_type: Optional[ListVirtualClustersContainerProviderTypeEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'containerProviderType', 'style': 'form', 'explode': True }})
    r"""The container provider type of the virtual cluster. Amazon EKS is the only supported type as of now."""  
    created_after: Optional[datetime] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'createdAfter', 'style': 'form', 'explode': True }})
    r"""The date and time after which the virtual clusters are created."""  
    created_before: Optional[datetime] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'createdBefore', 'style': 'form', 'explode': True }})
    r"""The date and time before which the virtual clusters are created."""  
    max_results: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'maxResults', 'style': 'form', 'explode': True }})
    r"""The maximum number of virtual clusters that can be listed."""  
    next_token: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'nextToken', 'style': 'form', 'explode': True }})
    r"""The token for the next set of virtual clusters to return."""  
    states: Optional[list[shared_virtualclusterstate_enum.VirtualClusterStateEnum]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'states', 'style': 'form', 'explode': True }})
    r"""The states of the requested virtual clusters."""  
    x_amz_algorithm: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Algorithm', 'style': 'simple', 'explode': False }})  
    x_amz_content_sha256: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Content-Sha256', 'style': 'simple', 'explode': False }})  
    x_amz_credential: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Credential', 'style': 'simple', 'explode': False }})  
    x_amz_date: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Date', 'style': 'simple', 'explode': False }})  
    x_amz_security_token: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Security-Token', 'style': 'simple', 'explode': False }})  
    x_amz_signature: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Signature', 'style': 'simple', 'explode': False }})  
    x_amz_signed_headers: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-SignedHeaders', 'style': 'simple', 'explode': False }})  
    

@dataclasses.dataclass
class ListVirtualClustersResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    internal_server_exception: Optional[Any] = dataclasses.field(default=None)
    r"""InternalServerException"""  
    list_virtual_clusters_response: Optional[shared_listvirtualclustersresponse.ListVirtualClustersResponse] = dataclasses.field(default=None)
    r"""Success"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    validation_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ValidationException"""  
    