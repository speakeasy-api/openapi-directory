"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import deployment as shared_deployment
from ..shared import validation_error as shared_validation_error
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Any, Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ReposCreateDeploymentRequestBody:
    
    ref: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ref') }})
    r"""The ref to deploy. This can be a branch, tag, or SHA."""  
    auto_merge: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('auto_merge'), 'exclude': lambda f: f is None }})
    r"""Attempts to automatically merge the default branch into the requested ref, if it's behind the default branch."""  
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description'), 'exclude': lambda f: f is None }})
    r"""Short description of the deployment."""  
    environment: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('environment'), 'exclude': lambda f: f is None }})
    r"""Name for the target deployment environment (e.g., `production`, `staging`, `qa`)."""  
    payload: Optional[Any] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('payload'), 'exclude': lambda f: f is None }})  
    production_environment: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('production_environment'), 'exclude': lambda f: f is None }})
    r"""Specifies if the given environment is one that end-users directly interact with. Default: `true` when `environment` is `production` and `false` otherwise."""  
    required_contexts: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('required_contexts'), 'exclude': lambda f: f is None }})
    r"""The [status](https://docs.github.com/github-ae@latest/rest/commits/statuses) contexts to verify against commit status checks. If you omit this parameter, GitHub verifies all unique contexts before creating a deployment. To bypass checking entirely, pass an empty array. Defaults to all unique contexts."""  
    task: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('task'), 'exclude': lambda f: f is None }})
    r"""Specifies a task to execute (e.g., `deploy` or `deploy:migrations`)."""  
    transient_environment: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('transient_environment'), 'exclude': lambda f: f is None }})
    r"""Specifies if the given environment is specific to the deployment and will no longer exist at some point in the future. Default: `false`"""  
    

@dataclasses.dataclass
class ReposCreateDeploymentRequest:
    
    owner: str = dataclasses.field(metadata={'path_param': { 'field_name': 'owner', 'style': 'simple', 'explode': False }})
    r"""The account owner of the repository. The name is not case sensitive."""  
    repo: str = dataclasses.field(metadata={'path_param': { 'field_name': 'repo', 'style': 'simple', 'explode': False }})
    r"""The name of the repository. The name is not case sensitive."""  
    request_body: ReposCreateDeploymentRequestBody = dataclasses.field(metadata={'request': { 'media_type': 'application/json' }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ReposCreateDeployment202ApplicationJSON:
    r"""Merged branch response"""
    
    message: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('message'), 'exclude': lambda f: f is None }})  
    

@dataclasses.dataclass
class ReposCreateDeploymentResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    deployment: Optional[shared_deployment.Deployment] = dataclasses.field(default=None)
    r"""Response"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    repos_create_deployment_202_application_json_object: Optional[ReposCreateDeployment202ApplicationJSON] = dataclasses.field(default=None)
    r"""Merged branch response"""  
    validation_error: Optional[shared_validation_error.ValidationError] = dataclasses.field(default=None)
    r"""Validation failed, or the endpoint has been spammed."""  
    