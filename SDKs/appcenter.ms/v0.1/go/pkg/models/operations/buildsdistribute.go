// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

type BuildsDistributeSecurity struct {
	APIToken string `security:"scheme,type=apiKey,subtype=header,name=X-API-Token"`
}

type BuildsDistributeRequestBodyDestinationsTypeEnum string

const (
	BuildsDistributeRequestBodyDestinationsTypeEnumStore  BuildsDistributeRequestBodyDestinationsTypeEnum = "store"
	BuildsDistributeRequestBodyDestinationsTypeEnumGroup  BuildsDistributeRequestBodyDestinationsTypeEnum = "group"
	BuildsDistributeRequestBodyDestinationsTypeEnumTester BuildsDistributeRequestBodyDestinationsTypeEnum = "tester"
)

func (e BuildsDistributeRequestBodyDestinationsTypeEnum) ToPointer() *BuildsDistributeRequestBodyDestinationsTypeEnum {
	return &e
}

func (e *BuildsDistributeRequestBodyDestinationsTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "store":
		fallthrough
	case "group":
		fallthrough
	case "tester":
		*e = BuildsDistributeRequestBodyDestinationsTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for BuildsDistributeRequestBodyDestinationsTypeEnum: %v", v)
	}
}

// BuildsDistributeRequestBodyDestinations - Destination details for distributing build releases
type BuildsDistributeRequestBodyDestinations struct {
	ID   string                                          `json:"id"`
	Type BuildsDistributeRequestBodyDestinationsTypeEnum `json:"type"`
}

// BuildsDistributeRequestBody - The distribution details
type BuildsDistributeRequestBody struct {
	// Array of objects {id:string, type:string} with "id" being the distribution group ID, store ID, or tester email, and "type" being "group", "store", or "tester"
	Destinations    []BuildsDistributeRequestBodyDestinations `json:"destinations,omitempty"`
	MandatoryUpdate *bool                                     `json:"mandatoryUpdate,omitempty"`
	NotifyTesters   *bool                                     `json:"notifyTesters,omitempty"`
	// The release notes
	ReleaseNotes *string `json:"releaseNotes,omitempty"`
}

type BuildsDistributeRequest struct {
	// The distribution details
	RequestBody BuildsDistributeRequestBody `request:"mediaType=application/json"`
	// The name of the application
	AppName string `pathParam:"style=simple,explode=false,name=app_name"`
	// The build ID
	BuildID int64 `pathParam:"style=simple,explode=false,name=build_id"`
	// The name of the owner
	OwnerName string `pathParam:"style=simple,explode=false,name=owner_name"`
}

// BuildsDistribute200ApplicationJSON - Success
type BuildsDistribute200ApplicationJSON struct {
	// Status of the Request
	Status *string `json:"status,omitempty"`
	// A unique ID of the upload
	UploadID *string `json:"upload_id,omitempty"`
}

type BuildsDistributeResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Success
	BuildsDistribute200ApplicationJSONObject *BuildsDistribute200ApplicationJSON
}
