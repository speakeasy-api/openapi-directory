"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Form:
    r"""Create and edit forms"""
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def delete_forms_id_(self, request: operations.DeleteFormsIDRequest) -> operations.DeleteFormsIDResponse:
        r"""Delete this form and all of it's responses."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteFormsIDRequest, base_url, '/forms/{id}', request)
        
        
        client = self._client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteFormsIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def get_form_responses(self, request: operations.GetFormResponsesRequest) -> operations.GetFormResponsesResponse:
        r"""List form responses"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/form-responses'
        
        query_params = utils.get_query_params(operations.GetFormResponsesRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetFormResponsesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.FormResponse]])
                res.form_responses = out

        return res

    def get_form_responses_id_(self, request: operations.GetFormResponsesIDRequest) -> operations.GetFormResponsesIDResponse:
        r"""Get a single form response by id"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetFormResponsesIDRequest, base_url, '/form-responses/{id}', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetFormResponsesIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.FormResponse])
                res.form_response = out
        elif http_res.status_code == 404:
            pass

        return res

    def get_forms(self, request: operations.GetFormsRequest) -> operations.GetFormsResponse:
        r"""List forms"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/forms'
        
        query_params = utils.get_query_params(operations.GetFormsRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetFormsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.Form]])
                res.forms = out

        return res

    def get_forms_id_(self, request: operations.GetFormsIDRequest) -> operations.GetFormsIDResponse:
        r"""Get a single form by id"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetFormsIDRequest, base_url, '/forms/{id}', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetFormsIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Form])
                res.form = out
        elif http_res.status_code == 404:
            pass

        return res

    def post_form_responses(self, request: shared.FormResponseSubmission) -> operations.PostFormResponsesResponse:
        r"""Submit a response to a form"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/form-responses'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostFormResponsesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.FormResponse])
                res.form_response = out

        return res

    def post_forms(self, request: shared.FormSubmission) -> operations.PostFormsResponse:
        r"""Create a form"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/forms'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostFormsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Form])
                res.form = out

        return res

    