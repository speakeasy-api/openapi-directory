"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import expensecurrency as shared_expensecurrency
from ..shared import expensedetection as shared_expensedetection
from ..shared import expensegroupproperty as shared_expensegroupproperty
from ..shared import expensetype as shared_expensetype
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ExpenseField:
    r"""Breakdown of detected information, seperated into the catagories Type, LabelDetection, and ValueDetection"""
    
    currency: Optional[shared_expensecurrency.ExpenseCurrency] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Currency'), 'exclude': lambda f: f is None }})  
    group_properties: Optional[list[shared_expensegroupproperty.ExpenseGroupProperty]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('GroupProperties'), 'exclude': lambda f: f is None }})  
    label_detection: Optional[shared_expensedetection.ExpenseDetection] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('LabelDetection'), 'exclude': lambda f: f is None }})  
    page_number: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PageNumber'), 'exclude': lambda f: f is None }})  
    type: Optional[shared_expensetype.ExpenseType] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Type'), 'exclude': lambda f: f is None }})  
    value_detection: Optional[shared_expensedetection.ExpenseDetection] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ValueDetection'), 'exclude': lambda f: f is None }})  
    