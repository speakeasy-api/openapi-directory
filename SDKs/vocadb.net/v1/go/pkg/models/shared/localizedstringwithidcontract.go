// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type LocalizedStringWithIDContractLanguageEnum string

const (
	LocalizedStringWithIDContractLanguageEnumUnspecified LocalizedStringWithIDContractLanguageEnum = "Unspecified"
	LocalizedStringWithIDContractLanguageEnumJapanese    LocalizedStringWithIDContractLanguageEnum = "Japanese"
	LocalizedStringWithIDContractLanguageEnumRomaji      LocalizedStringWithIDContractLanguageEnum = "Romaji"
	LocalizedStringWithIDContractLanguageEnumEnglish     LocalizedStringWithIDContractLanguageEnum = "English"
)

func (e *LocalizedStringWithIDContractLanguageEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Unspecified":
		fallthrough
	case "Japanese":
		fallthrough
	case "Romaji":
		fallthrough
	case "English":
		*e = LocalizedStringWithIDContractLanguageEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for LocalizedStringWithIDContractLanguageEnum: %s", s)
	}
}

type LocalizedStringWithIDContract struct {
	ID       *int                                       `json:"id,omitempty"`
	Language *LocalizedStringWithIDContractLanguageEnum `json:"language,omitempty"`
	Value    *string                                    `json:"value,omitempty"`
}
