"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from typing import Optional


@dataclasses.dataclass
class NodesAddonReadRequest:
    
    node_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'node_id', 'style': 'simple', 'explode': False }})
    r"""The unique identifier of the node."""  
    provider: str = dataclasses.field(metadata={'path_param': { 'field_name': 'provider', 'style': 'simple', 'explode': False }})
    r"""The unique identifier of the addon."""  
    

@dataclasses.dataclass
class NodesAddonReadNodeAddonAttributes:
    r"""The properties of the node addon entity."""
    
    configured: Optional[bool] = dataclasses.field(default=None)
    r"""Whether or not this node has been configured with an addon folder."""  
    enabled: Optional[bool] = dataclasses.field(default=None)
    r"""Whether or not this node has a NodeSettings object associated with it."""  
    external_account_id: Optional[str] = dataclasses.field(default=None)
    r"""The ID of the associated node addon account, if any."""  
    folder_id: Optional[str] = dataclasses.field(default=None)
    r"""The ID of the linked folder from the addon provider."""  
    folder_path: Optional[str] = dataclasses.field(default=None)
    r"""The folder path of the linked folder from the addon provider. Google Drive specific"""  
    label: Optional[str] = dataclasses.field(default=None)
    r"""A label specific to the addon provider."""  
    node_has_auth: Optional[bool] = dataclasses.field(default=None)
    r"""Whether or not this node is fully authorized to use this node addon."""  
    url: Optional[str] = dataclasses.field(default=None)
    r"""An external link specific to the addon provider."""  
    

@dataclasses.dataclass
class NodesAddonReadNodeAddonLinks:
    r"""URLs to alternative representations of the node addon entity."""
    
    self_: str = dataclasses.field()
    r"""A link to the the canonical API endpoint for this node addon."""  
    

@dataclasses.dataclass
class NodesAddonReadNodeAddon:
    r"""OK"""
    
    id: str = dataclasses.field()
    r"""The unique identifier of the draft registration entity."""  
    type: str = dataclasses.field()
    r"""The type identifier of the node addon entity (`node_addons`)."""  
    attributes: Optional[NodesAddonReadNodeAddonAttributes] = dataclasses.field(default=None)
    r"""The properties of the node addon entity."""  
    links: Optional[NodesAddonReadNodeAddonLinks] = dataclasses.field(default=None)
    r"""URLs to alternative representations of the node addon entity."""  
    

@dataclasses.dataclass
class NodesAddonReadResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    body: Optional[bytes] = dataclasses.field(default=None)  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    