/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

/**
 * APIs for request on Amazon
 *
 * @see {@link http://api.axesso.de/} - Find out more
 */
export class Amz {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * fetch results auf a keyword search on Amazon
   */
  keywordSearch(
    req: operations.KeywordSearchRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.KeywordSearchResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.KeywordSearchRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/amz/amazon-search-by-keyword";

    const client: AxiosInstance = this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.KeywordSearchResponse =
        new operations.KeywordSearchResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.keywordSearchResponse = utils.objectToClass(
              httpRes?.data,
              shared.KeywordSearchResponse
            );
          }
          break;
        case [400, 404].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * request buy recommendations to a given product
   */
  requestBuyRecommendation(
    req: operations.RequestBuyRecommendationRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.RequestBuyRecommendationResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.RequestBuyRecommendationRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/amz/amazon-lookup-buy-recommendations";

    const client: AxiosInstance = this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.RequestBuyRecommendationResponse =
        new operations.RequestBuyRecommendationResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.buyRecommendationResponse = utils.objectToClass(
              httpRes?.data,
              shared.BuyRecommendationResponse
            );
          }
          break;
        case [400, 404, 406].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * lookup product information
   */
  requestProduct(
    req: operations.RequestProductRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.RequestProductResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.RequestProductRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/amz/amazon-lookup-product";

    const client: AxiosInstance = this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.RequestProductResponse =
        new operations.RequestProductResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.productDetailsResponse = utils.objectToClass(
              httpRes?.data,
              shared.ProductDetailsResponse
            );
          }
          break;
        case [400, 404, 406].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * request available sort options to use in keyword search
   */
  sortOptions(
    config?: AxiosRequestConfig
  ): Promise<operations.SortOptionsResponse> {
    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/amz/sort-options";

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.SortOptionsResponse =
        new operations.SortOptionsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.sortOptionResponse = utils.objectToClass(
              httpRes?.data,
              shared.SortOptionResponse
            );
          }
          break;
      }

      return res;
    });
  }
}
