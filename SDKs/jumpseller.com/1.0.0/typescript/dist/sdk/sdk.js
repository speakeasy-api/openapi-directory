"use strict";
/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SDK = exports.ServerList = void 0;
var apps_1 = require("./apps");
var categories_1 = require("./categories");
var checkoutcustomfields_1 = require("./checkoutcustomfields");
var countries_1 = require("./countries");
var customeradditionalfields_1 = require("./customeradditionalfields");
var customercategories_1 = require("./customercategories");
var customers_1 = require("./customers");
var customfields_1 = require("./customfields");
var customfieldselectoptions_1 = require("./customfieldselectoptions");
var fulfillments_1 = require("./fulfillments");
var hooks_1 = require("./hooks");
var orders_1 = require("./orders");
var pages_1 = require("./pages");
var partners_1 = require("./partners");
var paymentmethods_1 = require("./paymentmethods");
var productattachments_1 = require("./productattachments");
var productcustomfields_1 = require("./productcustomfields");
var productdigitalproducts_1 = require("./productdigitalproducts");
var productimages_1 = require("./productimages");
var productoptions_1 = require("./productoptions");
var productoptionvalues_1 = require("./productoptionvalues");
var products_1 = require("./products");
var productvariants_1 = require("./productvariants");
var promotions_1 = require("./promotions");
var regions_1 = require("./regions");
var shippingmethods_1 = require("./shippingmethods");
var stores_1 = require("./stores");
var taxes_1 = require("./taxes");
var axios_1 = __importDefault(require("axios"));
/**
 * Contains the list of servers available to the SDK
 */
exports.ServerList = ["https://api.jumpseller.com/v1"];
/**
 * # Endpoint Structure
 *
 * @remarks
 *
 * All URLs are in the format:
 *
 * ```text
 * https://api.jumpseller.com/v1/path.json?login=XXXXXX&authtoken=storetoken
 * ```
 *
 * The path is prefixed by the API version and the URL takes as parameters the login (your store specific API login) and your authentication token.
 * <br/><br/>
 * ***
 *
 * # Version
 *
 * The current version of the API is **v1**.
 * If we change the API in backward-incompatible ways, we'll increase the version number and maintain stable support for the old urls.
 * <br/><br/>
 * ***
 *
 * # Authentication
 *
 * The API uses a token-based authentication with a combination of a login key and an auth token. **Both parameters can be found on the left sidebar of the Account section, accessed from the main menu of your Admin Panel**. The auth token of the user can be reset on the same page.
 *
 * ![Store Login](/images/support/api/apilogin.png)
 *
 * The auth token is a **32 characters** string.
 *
 * If you are developing a Jumpseller App, the authentication should be done using [OAuth-2](/support/oauth-2). Please read the article [Build an App](/support/apps) for more information.
 * <br/><br/>
 * ***
 *
 * # Curl Examples
 *
 * To request all the products at your store, you would append the products index path to the base url to create an URL with the format:
 *
 * ```text
 * https://api.jumpseller.com/v1/products.json?login=XXXXXX&authtoken=XXXXX
 * ```
 *
 * In curl, you can invoque that URL with:
 *
 * ```text
 * curl -X GET "https://api.jumpseller.com/v1/products.json?login=XXXXXX&authtoken=XXXXX"
 * ```
 *
 * To create a product, you will include the JSON data and specify the MIME Type:
 *
 * ```text
 * curl -X POST -d '{ "product" : {"name": "My new Product!", "price": 100} }' "https://api.jumpseller.com/v1/products.json?login=XXXXXX&authtoken=XXXXX" -H "Content-Type:application/json"
 * ```
 *
 * and to update the product identified with 123:
 *
 * ```text
 * curl -X PUT -d '{ "product" : {"name": "My updated Product!", "price": 99} }' "https://api.jumpseller.com/v1/products/123.json?login=XXXXXX&authtoken=XXXXX" -H "Content-Type:application/json"
 * ```
 *
 * or delete it:
 *
 * ```text
 * curl -X DELETE "https://api.jumpseller.com/v1/products/123.json?login=XXXXXX&authtoken=XXXXX" -H "Content-Type:application/json"
 * ```
 * <br/><br/>
 * ***
 *
 * # PHP Examples
 *
 * Create a new Product (POST method)
 *
 * ```php
 * $url = 'https://api.jumpseller.com/v1/products.json?login=XXXXX&authtoken=XXXXX;
 * $ch = curl_init($url);
 * curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
 * curl_setopt($ch, CURLOPT_HTTPHEADER, array('Content-Type: application/json'));
 *
 * curl_setopt($ch, CURLOPT_CUSTOMREQUEST, "POST"); //post method
 * curl_setopt($ch, CURLOPT_POSTFIELDS, '{ "product" : {"name": "My updated Product!", "price": 99} }');
 *
 * $result = curl_exec($ch);
 * print_r($result);
 * curl_close($ch);
 * ```
 * <br/><br/>
 * ***
 *
 * # Plain JSON only. No XML.
 *
 * * We only support JSON for data serialization.
 * * Our node format has no root element.
 * * We use snake_case to describe attribute keys (like "created_at").
 * * All empty value are replaced with **null** strings.
 * * All API URLs end in .json to indicate that they accept and return JSON.
 * * POST and PUT methods require you to explicitly state the MIME type of your request's body content as **"application/json"**.
 * <br/><br/>
 * ***
 *
 * # Rate Limit
 * You can perform a maximum of:
 *
 * + 240 (two hundred forty) requests per minute and
 * + 8 (eight) requests per second
 *
 * If you exceed this limit, you'll get a 403 Forbidden (Rate Limit Exceeded) response for subsequent requests.
 *
 * The rate limits apply by IP address and by store. This means that multiple requests on different stores are not counted towards the same rate limit.
 *
 * This limits are necessary to ensure resources are correctly used. Your application should be aware of this limits and retry any unsuccessful request, check the following Ruby stub:
 *
 * ```ruby
 * tries = 0; max_tries = 3;
 * begin
 *   HTTParty.send(method, uri) # perform an API call.
 *   sleep 0.5
 *   tries += 1
 * rescue
 *   unless tries >= max_tries
 *     sleep 1.0 # wait the necessary time before retrying the call again.
 *     retry
 *   end
 * end
 * ```
 *
 * Finally, you can review the Response Headers of each request:
 *
 * ```text
 * Jumpseller-PerMinuteRateLimit-Limit: 60
 * Jumpseller-PerMinuteRateLimit-Remaining: 59 # requests available on the per-second interval
 * Jumpseller-PerSecondRateLimit-Limit: 2
 * Jumpseller-PerSecondRateLimit-Remaining: 1 # requests available on the per-second interval
 * ```
 *
 * to better model your application requests intervals.
 *
 * In the event of getting your IP banned, the Response Header `Jumpseller-BannedByRateLimit-Reset` informs you the time when will your ban be reseted.
 * <br/><br/>
 * ***
 *
 * # Pagination
 *
 * By default we will return 50 objects (products, orders, etc) per page. There is a maximum of 100, using a query string `&limit=100`.
 * If the result set gets paginated it is your responsibility to check the next page for more objects -- you do this by using query strings `&page=2`, `&page=3` and so on.
 *
 * ```text
 * https://api.jumpseller.com/v1/products.json?login=XXXXXX&authtoken=XXXXX&page=3&limit=100
 * ```
 * <br/><br/>
 * ***
 *
 * # More
 * * [Jumpseller API wrapper](https://gitlab.com/jumpseller-api/ruby) provides a public Ruby abstraction over our API;
 * * [Apps Page](/apps) showcases external integrations with Jumpseller done by technical experts;
 * * [Imgbb API](https://api.imgbb.com/) provides an easy way to upload and temporaly host for images and files.
 * <br/><br/>
 * ***
 * <br/><br/>
 *
 */
var SDK = /** @class */ (function () {
    function SDK(props) {
        var _a, _b;
        this._language = "typescript";
        this._sdkVersion = "0.0.1";
        this._genVersion = "internal";
        this._serverURL = (_a = props === null || props === void 0 ? void 0 : props.serverURL) !== null && _a !== void 0 ? _a : exports.ServerList[0];
        this._defaultClient =
            (_b = props === null || props === void 0 ? void 0 : props.defaultClient) !== null && _b !== void 0 ? _b : axios_1.default.create({ baseURL: this._serverURL });
        this._securityClient = this._defaultClient;
        this.apps = new apps_1.Apps(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.categories = new categories_1.Categories(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.checkoutCustomFields = new checkoutcustomfields_1.CheckoutCustomFields(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.countries = new countries_1.Countries(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.customFieldSelectOptions = new customfieldselectoptions_1.CustomFieldSelectOptions(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.customFields = new customfields_1.CustomFields(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.customerAdditionalFields = new customeradditionalfields_1.CustomerAdditionalFields(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.customerCategories = new customercategories_1.CustomerCategories(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.customers = new customers_1.Customers(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.fulfillments = new fulfillments_1.Fulfillments(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.hooks = new hooks_1.Hooks(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.orders = new orders_1.Orders(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.pages = new pages_1.Pages(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.partners = new partners_1.Partners(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.paymentMethods = new paymentmethods_1.PaymentMethods(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.productAttachments = new productattachments_1.ProductAttachments(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.productCustomFields = new productcustomfields_1.ProductCustomFields(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.productDigitalProducts = new productdigitalproducts_1.ProductDigitalProducts(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.productImages = new productimages_1.ProductImages(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.productOptionValues = new productoptionvalues_1.ProductOptionValues(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.productOptions = new productoptions_1.ProductOptions(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.productVariants = new productvariants_1.ProductVariants(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.products = new products_1.Products(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.promotions = new promotions_1.Promotions(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.regions = new regions_1.Regions(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.shippingMethods = new shippingmethods_1.ShippingMethods(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.stores = new stores_1.Stores(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.taxes = new taxes_1.Taxes(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
    }
    return SDK;
}());
exports.SDK = SDK;
