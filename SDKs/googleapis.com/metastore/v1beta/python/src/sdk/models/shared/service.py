"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import encryptionconfig as shared_encryptionconfig
from ..shared import hivemetastoreconfig as shared_hivemetastoreconfig
from ..shared import maintenancewindow as shared_maintenancewindow
from ..shared import metadataintegration as shared_metadataintegration
from ..shared import metadatamanagementactivity as shared_metadatamanagementactivity
from ..shared import networkconfig as shared_networkconfig
from ..shared import scalingconfig as shared_scalingconfig
from ..shared import telemetryconfig as shared_telemetryconfig
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class ServiceDatabaseTypeEnum(str, Enum):
    r"""Immutable. The database type that the Metastore service stores its data."""
    DATABASE_TYPE_UNSPECIFIED = 'DATABASE_TYPE_UNSPECIFIED'
    MYSQL = 'MYSQL'
    SPANNER = 'SPANNER'

class ServiceReleaseChannelEnum(str, Enum):
    r"""Immutable. The release channel of the service. If unspecified, defaults to STABLE."""
    RELEASE_CHANNEL_UNSPECIFIED = 'RELEASE_CHANNEL_UNSPECIFIED'
    CANARY = 'CANARY'
    STABLE = 'STABLE'

class ServiceStateEnum(str, Enum):
    r"""Output only. The current state of the metastore service."""
    STATE_UNSPECIFIED = 'STATE_UNSPECIFIED'
    CREATING = 'CREATING'
    ACTIVE = 'ACTIVE'
    SUSPENDING = 'SUSPENDING'
    SUSPENDED = 'SUSPENDED'
    UPDATING = 'UPDATING'
    DELETING = 'DELETING'
    ERROR = 'ERROR'

class ServiceTierEnum(str, Enum):
    r"""The tier of the service."""
    TIER_UNSPECIFIED = 'TIER_UNSPECIFIED'
    DEVELOPER = 'DEVELOPER'
    ENTERPRISE = 'ENTERPRISE'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Service:
    r"""A managed metastore service that serves metadata queries."""
    
    artifact_gcs_uri: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('artifactGcsUri'), 'exclude': lambda f: f is None }})
    r"""Output only. A Cloud Storage URI (starting with gs://) that specifies where artifacts related to the metastore service are stored."""  
    create_time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('createTime'), 'exclude': lambda f: f is None }})
    r"""Output only. The time when the metastore service was created."""  
    database_type: Optional[ServiceDatabaseTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('databaseType'), 'exclude': lambda f: f is None }})
    r"""Immutable. The database type that the Metastore service stores its data."""  
    encryption_config: Optional[shared_encryptionconfig.EncryptionConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('encryptionConfig'), 'exclude': lambda f: f is None }})
    r"""Encryption settings for the service."""  
    endpoint_uri: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('endpointUri'), 'exclude': lambda f: f is None }})
    r"""Output only. The URI of the endpoint used to access the metastore service."""  
    hive_metastore_config: Optional[shared_hivemetastoreconfig.HiveMetastoreConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('hiveMetastoreConfig'), 'exclude': lambda f: f is None }})
    r"""Specifies configuration information specific to running Hive metastore software as the metastore service."""  
    labels: Optional[dict[str, str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('labels'), 'exclude': lambda f: f is None }})
    r"""User-defined labels for the metastore service."""  
    maintenance_window: Optional[shared_maintenancewindow.MaintenanceWindow] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('maintenanceWindow'), 'exclude': lambda f: f is None }})
    r"""Maintenance window. This specifies when Dataproc Metastore may perform system maintenance operation to the service."""  
    metadata_integration: Optional[shared_metadataintegration.MetadataIntegration] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('metadataIntegration'), 'exclude': lambda f: f is None }})
    r"""Specifies how metastore metadata should be integrated with external services."""  
    metadata_management_activity: Optional[shared_metadatamanagementactivity.MetadataManagementActivity] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('metadataManagementActivity'), 'exclude': lambda f: f is None }})
    r"""The metadata management activities of the metastore service."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""Immutable. The relative resource name of the metastore service, in the following format:projects/{project_number}/locations/{location_id}/services/{service_id}."""  
    network: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('network'), 'exclude': lambda f: f is None }})
    r"""Immutable. The relative resource name of the VPC network on which the instance can be accessed. It is specified in the following form:projects/{project_number}/global/networks/{network_id}."""  
    network_config: Optional[shared_networkconfig.NetworkConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('networkConfig'), 'exclude': lambda f: f is None }})
    r"""Network configuration for the Dataproc Metastore service."""  
    port: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('port'), 'exclude': lambda f: f is None }})
    r"""The TCP port at which the metastore service is reached. Default: 9083."""  
    release_channel: Optional[ServiceReleaseChannelEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('releaseChannel'), 'exclude': lambda f: f is None }})
    r"""Immutable. The release channel of the service. If unspecified, defaults to STABLE."""  
    scaling_config: Optional[shared_scalingconfig.ScalingConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('scalingConfig'), 'exclude': lambda f: f is None }})
    r"""Represents the scaling configuration of a metastore service."""  
    state: Optional[ServiceStateEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('state'), 'exclude': lambda f: f is None }})
    r"""Output only. The current state of the metastore service."""  
    state_message: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('stateMessage'), 'exclude': lambda f: f is None }})
    r"""Output only. Additional information about the current state of the metastore service, if available."""  
    telemetry_config: Optional[shared_telemetryconfig.TelemetryConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('telemetryConfig'), 'exclude': lambda f: f is None }})
    r"""Telemetry Configuration for the Dataproc Metastore service."""  
    tier: Optional[ServiceTierEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tier'), 'exclude': lambda f: f is None }})
    r"""The tier of the service."""  
    uid: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('uid'), 'exclude': lambda f: f is None }})
    r"""Output only. The globally unique resource identifier of the metastore service."""  
    update_time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('updateTime'), 'exclude': lambda f: f is None }})
    r"""Output only. The time when the metastore service was last updated."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ServiceInput:
    r"""A managed metastore service that serves metadata queries."""
    
    database_type: Optional[ServiceDatabaseTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('databaseType'), 'exclude': lambda f: f is None }})
    r"""Immutable. The database type that the Metastore service stores its data."""  
    encryption_config: Optional[shared_encryptionconfig.EncryptionConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('encryptionConfig'), 'exclude': lambda f: f is None }})
    r"""Encryption settings for the service."""  
    hive_metastore_config: Optional[shared_hivemetastoreconfig.HiveMetastoreConfigInput] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('hiveMetastoreConfig'), 'exclude': lambda f: f is None }})
    r"""Specifies configuration information specific to running Hive metastore software as the metastore service."""  
    labels: Optional[dict[str, str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('labels'), 'exclude': lambda f: f is None }})
    r"""User-defined labels for the metastore service."""  
    maintenance_window: Optional[shared_maintenancewindow.MaintenanceWindow] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('maintenanceWindow'), 'exclude': lambda f: f is None }})
    r"""Maintenance window. This specifies when Dataproc Metastore may perform system maintenance operation to the service."""  
    metadata_integration: Optional[shared_metadataintegration.MetadataIntegration] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('metadataIntegration'), 'exclude': lambda f: f is None }})
    r"""Specifies how metastore metadata should be integrated with external services."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""Immutable. The relative resource name of the metastore service, in the following format:projects/{project_number}/locations/{location_id}/services/{service_id}."""  
    network: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('network'), 'exclude': lambda f: f is None }})
    r"""Immutable. The relative resource name of the VPC network on which the instance can be accessed. It is specified in the following form:projects/{project_number}/global/networks/{network_id}."""  
    network_config: Optional[shared_networkconfig.NetworkConfigInput] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('networkConfig'), 'exclude': lambda f: f is None }})
    r"""Network configuration for the Dataproc Metastore service."""  
    port: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('port'), 'exclude': lambda f: f is None }})
    r"""The TCP port at which the metastore service is reached. Default: 9083."""  
    release_channel: Optional[ServiceReleaseChannelEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('releaseChannel'), 'exclude': lambda f: f is None }})
    r"""Immutable. The release channel of the service. If unspecified, defaults to STABLE."""  
    scaling_config: Optional[shared_scalingconfig.ScalingConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('scalingConfig'), 'exclude': lambda f: f is None }})
    r"""Represents the scaling configuration of a metastore service."""  
    telemetry_config: Optional[shared_telemetryconfig.TelemetryConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('telemetryConfig'), 'exclude': lambda f: f is None }})
    r"""Telemetry Configuration for the Dataproc Metastore service."""  
    tier: Optional[ServiceTierEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tier'), 'exclude': lambda f: f is None }})
    r"""The tier of the service."""  
    