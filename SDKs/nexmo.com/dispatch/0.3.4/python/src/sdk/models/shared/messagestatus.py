"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import fromproperty as shared_fromproperty
from ..shared import toproperty as shared_toproperty
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class MessageStatusLinksWorkflow:
    
    dispatch_uuid: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dispatch_uuid'), 'exclude': lambda f: f is None }})  
    href: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('href'), 'exclude': lambda f: f is None }})
    r"""Please note GET is not currently supported"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class MessageStatusLinks:
    
    workflow: Optional[MessageStatusLinksWorkflow] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('workflow'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class MessageStatusError:
    
    code: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('code'), 'exclude': lambda f: f is None }})
    r"""The error code. See [our errors list](/api-errors/messages-olympus) for a list of possible errors"""  
    reason: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('reason'), 'exclude': lambda f: f is None }})
    r"""Text describing the error. See [our errors list](/api-errors/messages-olympus) for a list of possible errors"""  
    
class MessageStatusStatusEnum(str, Enum):
    r"""The status of the message."""
    SUBMITTED = 'submitted'
    DELIVERED = 'delivered'
    READ = 'read'
    REJECTED = 'rejected'
    UNDELIVERABLE = 'undeliverable'

class MessageStatusUsageCurrencyEnum(str, Enum):
    r"""The charge currency in ISO 4217 format."""
    EUR = 'EUR'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class MessageStatusUsage:
    
    currency: Optional[MessageStatusUsageCurrencyEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('currency'), 'exclude': lambda f: f is None }})
    r"""The charge currency in ISO 4217 format."""  
    price: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('price'), 'exclude': lambda f: f is None }})
    r"""The charge amount as a stringified number."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class MessageStatus:
    r"""The callbacks for the message status are the same as defined in the Messaging API. The only difference will be that dispatch_uuid and link will be appended."""
    
    links: Optional[MessageStatusLinks] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('_links'), 'exclude': lambda f: f is None }})  
    error: Optional[MessageStatusError] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('error'), 'exclude': lambda f: f is None }})  
    from_: Optional[shared_fromproperty.FromProperty] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('from'), 'exclude': lambda f: f is None }})  
    message_uuid: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('message_uuid'), 'exclude': lambda f: f is None }})  
    status: Optional[MessageStatusStatusEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status'), 'exclude': lambda f: f is None }})
    r"""The status of the message."""  
    timestamp: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('timestamp'), 'exclude': lambda f: f is None }})
    r"""The datetime of when the event occurred."""  
    to: Optional[shared_toproperty.ToProperty] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('to'), 'exclude': lambda f: f is None }})  
    usage: Optional[MessageStatusUsage] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('usage'), 'exclude': lambda f: f is None }})  
    