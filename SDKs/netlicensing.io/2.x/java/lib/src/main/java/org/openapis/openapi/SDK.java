/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi;

import org.openapis.openapi.utils.HTTPClient;
import org.openapis.openapi.utils.SpeakeasyHTTPClient;

/**
 * The Labs64 &lt;a href='https://netlicensing.io/wiki/restful-api' target='_blank'&gt;NetLicensing RESTful API&lt;/a&gt; gives you access to NetLicensing\u2019s core features.&lt;br/&gt;&lt;br/&gt;&lt;strong&gt;Authentication&lt;/strong&gt;&lt;br/&gt;You authenticate to the NetLicensing API by providing your account credentials or simply use our demo account - &lt;code&gt;demo:demo&lt;/code&gt;&lt;br/&gt;&lt;br/&gt;Find out more about Labs64 NetLicensing at &lt;a href='https://netlicensing.io' target='_blank'&gt;netlicensing.io&lt;/a&gt;
 */
public class SDK {
	/**
	 * SERVERS contains the list of server urls available to the SDK.
	 */
	public static final String[] SERVERS = {
        "https://go.netlicensing.io/core/v2/rest",
	};
  	
    /**
     * License operations
     * https://netlicensing.io/wiki/license-services - License Services
     */
    public License license;
    /**
     * License Template operations
     * https://netlicensing.io/wiki/license-template-services - License Template Services
     */
    public LicenseTemplate licenseTemplate;
    /**
     * Licensee operations
     * https://netlicensing.io/wiki/licensee-services - Licensee Services
     */
    public Licensee licensee;
    /**
     * Payment Method operations
     * https://netlicensing.io/wiki/payment-method-services - Payment Method Services
     */
    public PaymentMethod paymentMethod;
    /**
     * Product operations
     * https://netlicensing.io/wiki/product-services - Product Services
     */
    public Product product;
    /**
     * Product Module operations
     * https://netlicensing.io/wiki/product-module-services - Product Module Services
     */
    public ProductModule productModule;
    /**
     * Token operations
     * https://netlicensing.io/wiki/token-services - Token Services
     */
    public Token token;
    /**
     * Transaction operations
     * https://netlicensing.io/wiki/transaction-services - Transaction Services
     */
    public Transaction transaction;
    /**
     * Utility operations
     * https://netlicensing.io/wiki/utility-services - Utility Services
     */
    public Utility utility;	

	private HTTPClient _defaultClient;
	private HTTPClient _securityClient;
	
	private String _serverUrl;
	private String _language = "java";
	private String _sdkVersion = "0.0.1";
	private String _genVersion = "internal";
	/**
	 * The Builder class allows the configuration of a new instance of the SDK.
	 */
	public static class Builder {
		private HTTPClient client;
		
		private String serverUrl;
		private java.util.Map<String, String> params = new java.util.HashMap<String, String>();

		private Builder() {
		}

		/**
		 * Allows the default HTTP client to be overridden with a custom implementation.
		 * @param client The HTTP client to use for all requests.
		 * @return The builder instance.
		 */
		public Builder setClient(HTTPClient client) {
			this.client = client;
			return this;
		}
		
		/**
		 * Allows the overriding of the default server URL.
		 * @param serverUrl The server URL to use for all requests.
		 * @return The builder instance.
		 */
		public Builder setServerURL(String serverUrl) {
			this.serverUrl = serverUrl;
			return this;
		}
		
		/**
		 * Allows the overriding of the default server URL  with a templated URL populated with the provided parameters.
		 * @param serverUrl The server URL to use for all requests.
		 * @param params The parameters to use when templating the URL.
		 * @return The builder instance.
		 */
		public Builder setServerURL(String serverUrl, java.util.Map<String, String> params) {
			this.serverUrl = serverUrl;
			this.params = params;
			return this;
		}
		
		/**
		 * Builds a new instance of the SDK.
		 * @return The SDK instance.
		 * @throws Exception Thrown if the SDK could not be built.
		 */
		public SDK build() throws Exception {
			return new SDK(this.client, this.serverUrl, this.params);
		}
	}

	/**
	 * Get a new instance of the SDK builder to configure a new instance of the SDK.
	 * @return The SDK builder instance.
	 */
	public static Builder builder() {
		return new Builder();
	}

	private SDK(HTTPClient client, String serverUrl, java.util.Map<String, String> params) throws Exception {
		this._defaultClient = client;
		
		if (this._defaultClient == null) {
			this._defaultClient = new SpeakeasyHTTPClient();
		}
		
		if (this._securityClient == null) {
			this._securityClient = this._defaultClient;
		}

		if (serverUrl != null && !serverUrl.isBlank()) {
			this._serverUrl = org.openapis.openapi.utils.Utils.templateUrl(serverUrl, params);
		}
		
		if (this._serverUrl == null) {
			this._serverUrl = SERVERS[0];
		}

		if (this._serverUrl.endsWith("/")) {
            this._serverUrl = this._serverUrl.substring(0, this._serverUrl.length() - 1);
        }

		
		
		this.license = new License(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.licenseTemplate = new LicenseTemplate(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.licensee = new Licensee(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.paymentMethod = new PaymentMethod(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.product = new Product(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.productModule = new ProductModule(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.token = new Token(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.transaction = new Transaction(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.utility = new Utility(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
	}
}