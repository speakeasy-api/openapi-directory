<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Social 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Accepts a friend relationship with the target user. The user must be on your incoming friend request list, though no error will occur if they are not.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\SocialAcceptFriendRequestRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\SocialAcceptFriendRequestSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\SocialAcceptFriendRequestResponse
     */
	public function socialAcceptFriendRequest(
        \OpenAPI\OpenAPI\Models\Operations\SocialAcceptFriendRequestRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\SocialAcceptFriendRequestSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\SocialAcceptFriendRequestResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/Social/Friends/Requests/Accept/{membershipId}/', \OpenAPI\OpenAPI\Models\Operations\SocialAcceptFriendRequestRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\SocialAcceptFriendRequestResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Declines a friend relationship with the target user. The user must be on your incoming friend request list, though no error will occur if they are not.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\SocialDeclineFriendRequestRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\SocialDeclineFriendRequestSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\SocialDeclineFriendRequestResponse
     */
	public function socialDeclineFriendRequest(
        \OpenAPI\OpenAPI\Models\Operations\SocialDeclineFriendRequestRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\SocialDeclineFriendRequestSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\SocialDeclineFriendRequestResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/Social/Friends/Requests/Decline/{membershipId}/', \OpenAPI\OpenAPI\Models\Operations\SocialDeclineFriendRequestRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\SocialDeclineFriendRequestResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Returns your Bungie Friend list
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\SocialGetFriendListResponse
     */
	public function socialGetFriendList(
    ): \OpenAPI\OpenAPI\Models\Operations\SocialGetFriendListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/Social/Friends/');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\SocialGetFriendListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Returns your friend request queue.
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\SocialGetFriendRequestListResponse
     */
	public function socialGetFriendRequestList(
    ): \OpenAPI\OpenAPI\Models\Operations\SocialGetFriendRequestListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/Social/Friends/Requests/');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\SocialGetFriendRequestListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Gets the platform friend of the requested type, with additional information if they have Bungie accounts. Must have a recent login session with said platform.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\SocialGetPlatformFriendListRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\SocialGetPlatformFriendListResponse
     */
	public function socialGetPlatformFriendList(
        \OpenAPI\OpenAPI\Models\Operations\SocialGetPlatformFriendListRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\SocialGetPlatformFriendListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/Social/PlatformFriends/{friendPlatform}/{page}/', \OpenAPI\OpenAPI\Models\Operations\SocialGetPlatformFriendListRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\SocialGetPlatformFriendListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Requests a friend relationship with the target user. Any of the target user's linked membership ids are valid inputs.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\SocialIssueFriendRequestRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\SocialIssueFriendRequestSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\SocialIssueFriendRequestResponse
     */
	public function socialIssueFriendRequest(
        \OpenAPI\OpenAPI\Models\Operations\SocialIssueFriendRequestRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\SocialIssueFriendRequestSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\SocialIssueFriendRequestResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/Social/Friends/Add/{membershipId}/', \OpenAPI\OpenAPI\Models\Operations\SocialIssueFriendRequestRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\SocialIssueFriendRequestResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Remove a friend relationship with the target user. The user must be on your friend list, though no error will occur if they are not.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\SocialRemoveFriendRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\SocialRemoveFriendSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\SocialRemoveFriendResponse
     */
	public function socialRemoveFriend(
        \OpenAPI\OpenAPI\Models\Operations\SocialRemoveFriendRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\SocialRemoveFriendSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\SocialRemoveFriendResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/Social/Friends/Remove/{membershipId}/', \OpenAPI\OpenAPI\Models\Operations\SocialRemoveFriendRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\SocialRemoveFriendResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Remove a friend relationship with the target user. The user must be on your outgoing request friend list, though no error will occur if they are not.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\SocialRemoveFriendRequestRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\SocialRemoveFriendRequestSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\SocialRemoveFriendRequestResponse
     */
	public function socialRemoveFriendRequest(
        \OpenAPI\OpenAPI\Models\Operations\SocialRemoveFriendRequestRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\SocialRemoveFriendRequestSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\SocialRemoveFriendRequestResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/Social/Friends/Requests/Remove/{membershipId}/', \OpenAPI\OpenAPI\Models\Operations\SocialRemoveFriendRequestRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\SocialRemoveFriendRequestResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
}