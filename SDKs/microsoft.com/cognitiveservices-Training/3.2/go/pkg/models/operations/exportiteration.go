// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// ExportIterationFlavorEnum - The flavor of the target platform.
type ExportIterationFlavorEnum string

const (
	ExportIterationFlavorEnumLinux            ExportIterationFlavorEnum = "Linux"
	ExportIterationFlavorEnumWindows          ExportIterationFlavorEnum = "Windows"
	ExportIterationFlavorEnumOnnx10           ExportIterationFlavorEnum = "ONNX10"
	ExportIterationFlavorEnumOnnx12           ExportIterationFlavorEnum = "ONNX12"
	ExportIterationFlavorEnumArm              ExportIterationFlavorEnum = "ARM"
	ExportIterationFlavorEnumTensorFlowNormal ExportIterationFlavorEnum = "TensorFlowNormal"
	ExportIterationFlavorEnumTensorFlowLite   ExportIterationFlavorEnum = "TensorFlowLite"
)

func (e ExportIterationFlavorEnum) ToPointer() *ExportIterationFlavorEnum {
	return &e
}

func (e *ExportIterationFlavorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Linux":
		fallthrough
	case "Windows":
		fallthrough
	case "ONNX10":
		fallthrough
	case "ONNX12":
		fallthrough
	case "ARM":
		fallthrough
	case "TensorFlowNormal":
		fallthrough
	case "TensorFlowLite":
		*e = ExportIterationFlavorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ExportIterationFlavorEnum: %v", v)
	}
}

// ExportIterationPlatformEnum - The target platform.
type ExportIterationPlatformEnum string

const (
	ExportIterationPlatformEnumCoreMl     ExportIterationPlatformEnum = "CoreML"
	ExportIterationPlatformEnumTensorFlow ExportIterationPlatformEnum = "TensorFlow"
	ExportIterationPlatformEnumDockerFile ExportIterationPlatformEnum = "DockerFile"
	ExportIterationPlatformEnumOnnx       ExportIterationPlatformEnum = "ONNX"
	ExportIterationPlatformEnumVaidk      ExportIterationPlatformEnum = "VAIDK"
)

func (e ExportIterationPlatformEnum) ToPointer() *ExportIterationPlatformEnum {
	return &e
}

func (e *ExportIterationPlatformEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "CoreML":
		fallthrough
	case "TensorFlow":
		fallthrough
	case "DockerFile":
		fallthrough
	case "ONNX":
		fallthrough
	case "VAIDK":
		*e = ExportIterationPlatformEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ExportIterationPlatformEnum: %v", v)
	}
}

type ExportIterationRequest struct {
	// The flavor of the target platform.
	Flavor *ExportIterationFlavorEnum `queryParam:"style=form,explode=true,name=flavor"`
	// The iteration id.
	IterationID string `pathParam:"style=simple,explode=false,name=iterationId"`
	// The target platform.
	Platform ExportIterationPlatformEnum `queryParam:"style=form,explode=true,name=platform"`
	// The project id.
	ProjectID string `pathParam:"style=simple,explode=false,name=projectId"`
}

type ExportIterationResponse struct {
	Body        []byte
	ContentType string
	// Error response
	CustomVisionError *shared.CustomVisionError
	// OK
	Export      *shared.Export
	StatusCode  int
	RawResponse *http.Response
}
