"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Products:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def delete_products_id_json(self, request: operations.DeleteProductsIDJSONRequest) -> operations.DeleteProductsIDJSONResponse:
        r"""Delete an existing Product."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteProductsIDJSONRequest, base_url, '/products/{id}.json', request)
        
        query_params = utils.get_query_params(operations.DeleteProductsIDJSONRequest, request)
        
        client = self._client
        
        http_res = client.request('DELETE', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteProductsIDJSONResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                res.delete_products_id_json_200_application_json_string = http_res.content
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.NotFound])
                res.not_found = out

        return res

    def get_products_json(self, request: operations.GetProductsJSONRequest) -> operations.GetProductsJSONResponse:
        r"""Retrieve all Products."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/products.json'
        
        query_params = utils.get_query_params(operations.GetProductsJSONRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetProductsJSONResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.Product]])
                res.products = out

        return res

    def get_products_after_id_json(self, request: operations.GetProductsAfterIDJSONRequest) -> operations.GetProductsAfterIDJSONResponse:
        r"""Retrieves Products after the given id."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetProductsAfterIDJSONRequest, base_url, '/products/after/{id}.json', request)
        
        query_params = utils.get_query_params(operations.GetProductsAfterIDJSONRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetProductsAfterIDJSONResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.Product]])
                res.products = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.NotFound])
                res.not_found = out

        return res

    def get_products_category_category_id_json(self, request: operations.GetProductsCategoryCategoryIDJSONRequest) -> operations.GetProductsCategoryCategoryIDJSONResponse:
        r"""Retrieve Products filtered by category."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetProductsCategoryCategoryIDJSONRequest, base_url, '/products/category/{category_id}.json', request)
        
        query_params = utils.get_query_params(operations.GetProductsCategoryCategoryIDJSONRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetProductsCategoryCategoryIDJSONResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.Product]])
                res.products = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.NotFound])
                res.not_found = out

        return res

    def get_products_category_category_id_count_json(self, request: operations.GetProductsCategoryCategoryIDCountJSONRequest) -> operations.GetProductsCategoryCategoryIDCountJSONResponse:
        r"""Count Products filtered by category."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetProductsCategoryCategoryIDCountJSONRequest, base_url, '/products/category/{category_id}/count.json', request)
        
        query_params = utils.get_query_params(operations.GetProductsCategoryCategoryIDCountJSONRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetProductsCategoryCategoryIDCountJSONResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Count])
                res.count = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.NotFound])
                res.not_found = out

        return res

    def get_products_count_json(self, request: operations.GetProductsCountJSONRequest) -> operations.GetProductsCountJSONResponse:
        r"""Count all Products."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/products/count.json'
        
        query_params = utils.get_query_params(operations.GetProductsCountJSONRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetProductsCountJSONResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Count])
                res.count = out

        return res

    def get_products_search_json(self, request: operations.GetProductsSearchJSONRequest) -> operations.GetProductsSearchJSONResponse:
        r"""Retrieve a Product List from a query.
        Endpoint example: 
        
        ```text
        https://api.jumpseller.com/v1/products/search.json?login=XXXXXX&authtoken=XXXXX&query=test&fields=name,description 
        ```
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/products/search.json'
        
        query_params = utils.get_query_params(operations.GetProductsSearchJSONRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetProductsSearchJSONResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.Product]])
                res.products = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.NotFound])
                res.not_found = out

        return res

    def get_products_status_status_json(self, request: operations.GetProductsStatusStatusJSONRequest) -> operations.GetProductsStatusStatusJSONResponse:
        r"""Retrieve Products filtered by status."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetProductsStatusStatusJSONRequest, base_url, '/products/status/{status}.json', request)
        
        query_params = utils.get_query_params(operations.GetProductsStatusStatusJSONRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetProductsStatusStatusJSONResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.Product]])
                res.products = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.StatusInvalid])
                res.status_invalid = out

        return res

    def get_products_status_status_count_json(self, request: operations.GetProductsStatusStatusCountJSONRequest) -> operations.GetProductsStatusStatusCountJSONResponse:
        r"""Count Products filtered by status."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetProductsStatusStatusCountJSONRequest, base_url, '/products/status/{status}/count.json', request)
        
        query_params = utils.get_query_params(operations.GetProductsStatusStatusCountJSONRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetProductsStatusStatusCountJSONResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Count])
                res.count = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.StatusInvalid])
                res.status_invalid = out

        return res

    def get_products_id_json(self, request: operations.GetProductsIDJSONRequest) -> operations.GetProductsIDJSONResponse:
        r"""Retrieve a single Product."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetProductsIDJSONRequest, base_url, '/products/{id}.json', request)
        
        query_params = utils.get_query_params(operations.GetProductsIDJSONRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetProductsIDJSONResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Product])
                res.product = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.NotFound])
                res.not_found = out

        return res

    def post_products_json(self, request: operations.PostProductsJSONRequest) -> operations.PostProductsJSONResponse:
        r"""Create a new Product."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/products.json'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "product_edit", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        query_params = utils.get_query_params(operations.PostProductsJSONRequest, request)
        
        client = self._client
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostProductsJSONResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Product])
                res.product = out

        return res

    def put_products_id_json(self, request: operations.PutProductsIDJSONRequest) -> operations.PutProductsIDJSONResponse:
        r"""Modify an existing Product."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PutProductsIDJSONRequest, base_url, '/products/{id}.json', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "product_edit", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        query_params = utils.get_query_params(operations.PutProductsIDJSONRequest, request)
        
        client = self._client
        
        http_res = client.request('PUT', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PutProductsIDJSONResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Product])
                res.product = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.NotFound])
                res.not_found = out

        return res

    