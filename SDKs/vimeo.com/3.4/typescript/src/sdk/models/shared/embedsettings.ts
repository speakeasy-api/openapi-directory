/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { Expose, Type } from "class-transformer";

/**
 * A collection of information about the buttons that appear on the interface of the embeddable player.
 */
export class EmbedSettingsButtons extends SpeakeasyBase {
  /**
   * Whether the Embed button appears in the embeddable player for this video.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "embed" })
  embed: boolean;

  /**
   * Whether the Fullscreen button appears in the embeddable player for this video.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "fullscreen" })
  fullscreen: boolean;

  /**
   * Whether the HD button appears in the embeddable player for this video.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "hd" })
  hd: boolean;

  /**
   * Whether the Like button appears in the embeddable player for this video.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "like" })
  like: boolean;

  /**
   * Whether the Scaling button appears in the embeddable player for this video.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "scaling" })
  scaling: boolean;

  /**
   * Whether the Share button appears in the embeddable player for this video.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "share" })
  share: boolean;

  /**
   * Whether the Watch Later button appears in the embeddable player for this video.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "watchlater" })
  watchlater: boolean;
}

/**
 * A collection of information relating to custom logos in the embeddable player.
 */
export class EmbedSettingsLogosCustom extends SpeakeasyBase {
  /**
   * Whether the custom logo appears in the embeddable player.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "active" })
  active: boolean;

  /**
   * The URL that loads upon clicking the custom logo.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "link" })
  link: string;

  /**
   * Whether the custom logo appears even when the player interface is hidden.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "sticky" })
  sticky: boolean;
}

/**
 * A collection of information about the logo in the corner of the embeddable player.
 */
export class EmbedSettingsLogos extends SpeakeasyBase {
  /**
   * A collection of information relating to custom logos in the embeddable player.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "custom" })
  @Type(() => EmbedSettingsLogosCustom)
  custom: EmbedSettingsLogosCustom;

  /**
   * Whether the Vimeo logo appears in the embeddable player for this video.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "vimeo" })
  vimeo: boolean;
}

/**
 * How the embeddable player handles the video title:
 *
 * @remarks
 *
 * Option descriptions:
 *  * `hide` - The title is hidden.
 *  * `show` - The title is shown.
 *
 */
export enum EmbedSettingsTitleNameEnum {
  Hide = "hide",
  Show = "show",
  User = "user",
}

/**
 * How the embeddable player handles the video owner's information:
 *
 * @remarks
 *
 * Option descriptions:
 *  * `hide` - The owner's information is hidden.
 *  * `show` - The owner's information is shown.
 *
 */
export enum EmbedSettingsTitleOwnerEnum {
  Hide = "hide",
  Show = "show",
  User = "user",
}

/**
 * How the embeddable player handles the video owner's portrait:
 *
 * @remarks
 *
 * Option descriptions:
 *  * `hide` - The owner's portrait is hidden
 *  * `show` - The owner's portrait is shown.
 *
 */
export enum EmbedSettingsTitlePortraitEnum {
  Hide = "hide",
  Show = "show",
  User = "user",
}

/**
 * A collection of information relating to the embeddable player's title bar.
 */
export class EmbedSettingsTitle extends SpeakeasyBase {
  /**
   * How the embeddable player handles the video title:
   *
   * @remarks
   *
   * Option descriptions:
   *  * `hide` - The title is hidden.
   *  * `show` - The title is shown.
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name: EmbedSettingsTitleNameEnum;

  /**
   * How the embeddable player handles the video owner's information:
   *
   * @remarks
   *
   * Option descriptions:
   *  * `hide` - The owner's information is hidden.
   *  * `show` - The owner's information is shown.
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "owner" })
  owner: EmbedSettingsTitleOwnerEnum;

  /**
   * How the embeddable player handles the video owner's portrait:
   *
   * @remarks
   *
   * Option descriptions:
   *  * `hide` - The owner's portrait is hidden
   *  * `show` - The owner's portrait is shown.
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "portrait" })
  portrait: EmbedSettingsTitlePortraitEnum;
}

export class EmbedSettings extends SpeakeasyBase {
  /**
   * A collection of information about the buttons that appear on the interface of the embeddable player.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "buttons" })
  @Type(() => EmbedSettingsButtons)
  buttons: EmbedSettingsButtons;

  /**
   * The primary player color, which controls the color of the progress bar, buttons, and more.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "color" })
  color: string;

  /**
   * A collection of information about the logo in the corner of the embeddable player.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "logos" })
  @Type(() => EmbedSettingsLogos)
  logos: EmbedSettingsLogos;

  /**
   * Whether the playbar appears in the embeddable player for this video.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "playbar" })
  playbar: boolean;

  /**
   * Whether the speed controls appear in the embeddable player for this video.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "speed" })
  speed: boolean;

  /**
   * A collection of information relating to the embeddable player's title bar.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "title" })
  @Type(() => EmbedSettingsTitle)
  title: EmbedSettingsTitle;

  /**
   * The URI of the embed preset.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "uri" })
  uri?: string;

  /**
   * Whether the volume controls appear in the embeddable player for this video.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "volume" })
  volume: boolean;
}
