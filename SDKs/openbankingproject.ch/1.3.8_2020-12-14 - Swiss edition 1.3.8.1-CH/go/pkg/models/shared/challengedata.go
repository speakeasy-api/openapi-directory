// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// ChallengeDataOtpFormatEnum - The format type of the OTP to be typed in. The admitted values are "characters" or "integer".
type ChallengeDataOtpFormatEnum string

const (
	ChallengeDataOtpFormatEnumCharacters ChallengeDataOtpFormatEnum = "characters"
	ChallengeDataOtpFormatEnumInteger    ChallengeDataOtpFormatEnum = "integer"
)

func (e *ChallengeDataOtpFormatEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "characters":
		fallthrough
	case "integer":
		*e = ChallengeDataOtpFormatEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ChallengeDataOtpFormatEnum: %s", s)
	}
}

// ChallengeData - It is contained in addition to the data element 'chosenScaMethod' if challenge data is needed for SCA.
// In rare cases this attribute is also used in the context of the 'startAuthorisationWithPsuAuthentication' link.
type ChallengeData struct {
	// Additional explanation for the PSU to explain
	// e.g. fallback mechanism for the chosen SCA method.
	// The TPP is obliged to show this to the PSU.
	//
	AdditionalInformation *string `json:"additionalInformation,omitempty"`
	// A collection of strings as challenge data.
	Data []string `json:"data,omitempty"`
	// PNG data (max. 512 kilobyte) to be displayed to the PSU,
	// Base64 encoding, cp. [RFC4648].
	// This attribute is used only, when PHOTO_OTP or CHIP_OTP
	// is the selected SCA method.
	//
	Image *string `json:"image,omitempty"`
	// A link where the ASPSP will provides the challenge image for the TPP.
	ImageLink *string `json:"imageLink,omitempty"`
	// The format type of the OTP to be typed in. The admitted values are "characters" or "integer".
	OtpFormat *ChallengeDataOtpFormatEnum `json:"otpFormat,omitempty"`
	// The maximal length for the OTP to be typed in by the PSU.
	OtpMaxLength *int64 `json:"otpMaxLength,omitempty"`
}
