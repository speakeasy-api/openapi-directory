// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// ReportGoogleLocationRequestReportReasonBadLocationEnum - The reason for which the user is reporting this location when the issue is with the location itself.
type ReportGoogleLocationRequestReportReasonBadLocationEnum string

const (
	ReportGoogleLocationRequestReportReasonBadLocationEnumBadLocationReasonUnspecified ReportGoogleLocationRequestReportReasonBadLocationEnum = "BAD_LOCATION_REASON_UNSPECIFIED"
	ReportGoogleLocationRequestReportReasonBadLocationEnumNotALocation                 ReportGoogleLocationRequestReportReasonBadLocationEnum = "NOT_A_LOCATION"
	ReportGoogleLocationRequestReportReasonBadLocationEnumPermanentlyClosed            ReportGoogleLocationRequestReportReasonBadLocationEnum = "PERMANENTLY_CLOSED"
	ReportGoogleLocationRequestReportReasonBadLocationEnumDoesNotExist                 ReportGoogleLocationRequestReportReasonBadLocationEnum = "DOES_NOT_EXIST"
	ReportGoogleLocationRequestReportReasonBadLocationEnumSpam                         ReportGoogleLocationRequestReportReasonBadLocationEnum = "SPAM"
	ReportGoogleLocationRequestReportReasonBadLocationEnumNotABusiness                 ReportGoogleLocationRequestReportReasonBadLocationEnum = "NOT_A_BUSINESS"
	ReportGoogleLocationRequestReportReasonBadLocationEnumMoved                        ReportGoogleLocationRequestReportReasonBadLocationEnum = "MOVED"
	ReportGoogleLocationRequestReportReasonBadLocationEnumDuplicate                    ReportGoogleLocationRequestReportReasonBadLocationEnum = "DUPLICATE"
)

func (e *ReportGoogleLocationRequestReportReasonBadLocationEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "BAD_LOCATION_REASON_UNSPECIFIED":
		fallthrough
	case "NOT_A_LOCATION":
		fallthrough
	case "PERMANENTLY_CLOSED":
		fallthrough
	case "DOES_NOT_EXIST":
		fallthrough
	case "SPAM":
		fallthrough
	case "NOT_A_BUSINESS":
		fallthrough
	case "MOVED":
		fallthrough
	case "DUPLICATE":
		*e = ReportGoogleLocationRequestReportReasonBadLocationEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ReportGoogleLocationRequestReportReasonBadLocationEnum: %s", s)
	}
}

// ReportGoogleLocationRequestReportReasonBadRecommendationEnum - The reason for which the user is reporting this location when the issue is with the recommendation. This report is useful if the location has been recommended to the Business Profile account.
type ReportGoogleLocationRequestReportReasonBadRecommendationEnum string

const (
	ReportGoogleLocationRequestReportReasonBadRecommendationEnumBadRecommendationReasonUnspecified ReportGoogleLocationRequestReportReasonBadRecommendationEnum = "BAD_RECOMMENDATION_REASON_UNSPECIFIED"
	ReportGoogleLocationRequestReportReasonBadRecommendationEnumNotAStoreFront                     ReportGoogleLocationRequestReportReasonBadRecommendationEnum = "NOT_A_STORE_FRONT"
	ReportGoogleLocationRequestReportReasonBadRecommendationEnumNotPartOfSuggestedChain            ReportGoogleLocationRequestReportReasonBadRecommendationEnum = "NOT_PART_OF_SUGGESTED_CHAIN"
	ReportGoogleLocationRequestReportReasonBadRecommendationEnumIrrelevant                         ReportGoogleLocationRequestReportReasonBadRecommendationEnum = "IRRELEVANT"
)

func (e *ReportGoogleLocationRequestReportReasonBadRecommendationEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "BAD_RECOMMENDATION_REASON_UNSPECIFIED":
		fallthrough
	case "NOT_A_STORE_FRONT":
		fallthrough
	case "NOT_PART_OF_SUGGESTED_CHAIN":
		fallthrough
	case "IRRELEVANT":
		*e = ReportGoogleLocationRequestReportReasonBadRecommendationEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ReportGoogleLocationRequestReportReasonBadRecommendationEnum: %s", s)
	}
}

// ReportGoogleLocationRequest - Request message for reporting a GoogleLocation.
type ReportGoogleLocationRequest struct {
	// Optional. The resource name of the location group that this Google Location is being reported for, in the format `accounts/{account_id}`.
	LocationGroupName *string `json:"locationGroupName,omitempty"`
	// The reason for which the user is reporting this location when the issue is with the location itself.
	ReportReasonBadLocation *ReportGoogleLocationRequestReportReasonBadLocationEnum `json:"reportReasonBadLocation,omitempty"`
	// The reason for which the user is reporting this location when the issue is with the recommendation. This report is useful if the location has been recommended to the Business Profile account.
	ReportReasonBadRecommendation *ReportGoogleLocationRequestReportReasonBadRecommendationEnum `json:"reportReasonBadRecommendation,omitempty"`
	// Optional. A text entry for elaborating on the reason for which the user is reporting this location. The maximum length is 512 characters.
	ReportReasonElaboration *string `json:"reportReasonElaboration,omitempty"`
	// Optional. The BCP 47 code of language used in `report_reason_elaboration`.
	ReportReasonLanguageCode *string `json:"reportReasonLanguageCode,omitempty"`
}
