// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type LegalArrangementEntityDetailLegalArrangementMembersEnum string

const (
	LegalArrangementEntityDetailLegalArrangementMembersEnumBeneficiary       LegalArrangementEntityDetailLegalArrangementMembersEnum = "Beneficiary"
	LegalArrangementEntityDetailLegalArrangementMembersEnumControllingPerson LegalArrangementEntityDetailLegalArrangementMembersEnum = "ControllingPerson"
	LegalArrangementEntityDetailLegalArrangementMembersEnumPartner           LegalArrangementEntityDetailLegalArrangementMembersEnum = "Partner"
	LegalArrangementEntityDetailLegalArrangementMembersEnumProtector         LegalArrangementEntityDetailLegalArrangementMembersEnum = "Protector"
	LegalArrangementEntityDetailLegalArrangementMembersEnumSettlor           LegalArrangementEntityDetailLegalArrangementMembersEnum = "Settlor"
	LegalArrangementEntityDetailLegalArrangementMembersEnumShareholder       LegalArrangementEntityDetailLegalArrangementMembersEnum = "Shareholder"
	LegalArrangementEntityDetailLegalArrangementMembersEnumTrustee           LegalArrangementEntityDetailLegalArrangementMembersEnum = "Trustee"
)

func (e *LegalArrangementEntityDetailLegalArrangementMembersEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Beneficiary":
		fallthrough
	case "ControllingPerson":
		fallthrough
	case "Partner":
		fallthrough
	case "Protector":
		fallthrough
	case "Settlor":
		fallthrough
	case "Shareholder":
		fallthrough
	case "Trustee":
		*e = LegalArrangementEntityDetailLegalArrangementMembersEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for LegalArrangementEntityDetailLegalArrangementMembersEnum: %s", s)
	}
}

// LegalArrangementEntityDetailLegalEntityTypeEnum - The legal entity type.
//
// Possible values: **Business**, **Individual**, **NonProfit**, **PublicCompany**, or **Partnership**.
type LegalArrangementEntityDetailLegalEntityTypeEnum string

const (
	LegalArrangementEntityDetailLegalEntityTypeEnumBusiness      LegalArrangementEntityDetailLegalEntityTypeEnum = "Business"
	LegalArrangementEntityDetailLegalEntityTypeEnumIndividual    LegalArrangementEntityDetailLegalEntityTypeEnum = "Individual"
	LegalArrangementEntityDetailLegalEntityTypeEnumNonProfit     LegalArrangementEntityDetailLegalEntityTypeEnum = "NonProfit"
	LegalArrangementEntityDetailLegalEntityTypeEnumPartnership   LegalArrangementEntityDetailLegalEntityTypeEnum = "Partnership"
	LegalArrangementEntityDetailLegalEntityTypeEnumPublicCompany LegalArrangementEntityDetailLegalEntityTypeEnum = "PublicCompany"
)

func (e *LegalArrangementEntityDetailLegalEntityTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Business":
		fallthrough
	case "Individual":
		fallthrough
	case "NonProfit":
		fallthrough
	case "Partnership":
		fallthrough
	case "PublicCompany":
		*e = LegalArrangementEntityDetailLegalEntityTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for LegalArrangementEntityDetailLegalEntityTypeEnum: %s", s)
	}
}

type LegalArrangementEntityDetail struct {
	Address         *ViasAddress     `json:"address,omitempty"`
	BusinessDetails *BusinessDetails `json:"businessDetails,omitempty"`
	// The e-mail address of the entity.
	Email *string `json:"email,omitempty"`
	// The phone number of the contact provided as a single string.  It will be handled as a landline phone.
	// **Examples:** "0031 6 11 22 33 44", "+316/1122-3344", "(0031) 611223344"
	FullPhoneNumber   *string            `json:"fullPhoneNumber,omitempty"`
	IndividualDetails *IndividualDetails `json:"individualDetails,omitempty"`
	// Adyen-generated unique alphanumeric identifier (UUID) for the entry, returned in the response when you create a legal arrangement entity.
	// Use only when updating an account holder. If you include this field when creating an account holder, the request will fail.
	LegalArrangementEntityCode *string `json:"legalArrangementEntityCode,omitempty"`
	// Your reference for the legal arrangement entity.
	LegalArrangementEntityReference *string `json:"legalArrangementEntityReference,omitempty"`
	// An array containing the roles of the entity in the legal arrangement.
	//
	// The possible values depend on the legal arrangement `type`.
	//
	// - For `type` **Association**: **ControllingPerson** and **Shareholder**.
	//
	// - For `type` **Partnership**: **Partner** and **Shareholder**.
	//
	// - For `type` **Trust**: **Trustee**, **Settlor**, **Protector**, **Beneficiary**,  and **Shareholder**.
	//
	//
	LegalArrangementMembers []LegalArrangementEntityDetailLegalArrangementMembersEnum `json:"legalArrangementMembers,omitempty"`
	// The legal entity type.
	//
	// Possible values: **Business**, **Individual**, **NonProfit**, **PublicCompany**, or **Partnership**.
	LegalEntityType LegalArrangementEntityDetailLegalEntityTypeEnum `json:"legalEntityType"`
	PhoneNumber     *ViasPhoneNumber                                `json:"phoneNumber,omitempty"`
	// The URL of the website of the contact.
	WebAddress *string `json:"webAddress,omitempty"`
}
