/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

public class ForecastItem {
    /**
     * CO2 footprint in Gramm per kwh (only Green Power)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("co2_g_oekostrom")
    public Long co2GOekostrom;
    public ForecastItem withCo2GOekostrom(Long co2GOekostrom) {
        this.co2GOekostrom = co2GOekostrom;
        return this;
    }
    
    /**
     * Local/regional energyprice modification (cent per kWh or euro per MWh).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("energyprice")
    public Double energyprice;
    public ForecastItem withEnergyprice(Double energyprice) {
        this.energyprice = energyprice;
        return this;
    }
    
    /**
     * Timestamps in Seconds
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("epochtime")
    public Long epochtime;
    public ForecastItem withEpochtime(Long epochtime) {
        this.epochtime = epochtime;
        return this;
    }
    
    /**
     * Actual GreenPowerIndex for given Timestamp (between 0-100)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("gsi")
    public Long gsi;
    public ForecastItem withGsi(Long gsi) {
        this.gsi = gsi;
        return this;
    }
    
    /**
     * Indicates if scaling is in operation to predict values
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("scaled")
    public Boolean scaled;
    public ForecastItem withScaled(Boolean scaled) {
        this.scaled = scaled;
        return this;
    }
    
    /**
     * Subindex just for Solar Energy
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sci")
    public Long sci;
    public ForecastItem withSci(Long sci) {
        this.sci = sci;
        return this;
    }
    
    /**
     * Timestamp in Standard Milliseconds
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("timeStamp")
    public Long timeStamp;
    public ForecastItem withTimeStamp(Long timeStamp) {
        this.timeStamp = timeStamp;
        return this;
    }
    
}
