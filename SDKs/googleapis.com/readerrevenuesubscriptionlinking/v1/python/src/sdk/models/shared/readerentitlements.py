"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import entitlement as shared_entitlement
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ReaderEntitlementsInput:
    r"""A singleton containing all of a reader's entitlements for a publication."""
    
    entitlements: Optional[list[shared_entitlement.Entitlement]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('entitlements'), 'exclude': lambda f: f is None }})
    r"""All of the entitlements for a publication reader."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ReaderEntitlements:
    r"""A singleton containing all of a reader's entitlements for a publication."""
    
    entitlements: Optional[list[shared_entitlement.Entitlement]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('entitlements'), 'exclude': lambda f: f is None }})
    r"""All of the entitlements for a publication reader."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""Output only. The resource name of the singleton."""  
    