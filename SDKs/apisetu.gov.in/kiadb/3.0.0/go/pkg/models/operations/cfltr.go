// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type CfltrSecurity struct {
	APIKey   string `security:"scheme,type=apiKey,subtype=header,name=X-APISETU-APIKEY"`
	ClientID string `security:"scheme,type=apiKey,subtype=header,name=X-APISETU-CLIENTID"`
}

type CfltrRequestBodyCertificateParameters struct {
	// Date of birth in DD-MM-YYYY format
	Dob string `json:"DOB"`
	// Full name
	FullName string `json:"FullName"`
	// Registration Number
	RegNum string `json:"RegNum"`
	// Aadhaar number
	UID string `json:"UID"`
}

// CfltrRequestBodyFormatEnum - The format of the certificate in response.
type CfltrRequestBodyFormatEnum string

const (
	CfltrRequestBodyFormatEnumPdf CfltrRequestBodyFormatEnum = "pdf"
)

func (e *CfltrRequestBodyFormatEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "pdf":
		*e = CfltrRequestBodyFormatEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CfltrRequestBodyFormatEnum: %s", s)
	}
}

// CfltrRequestBody - Request format
type CfltrRequestBody struct {
	CertificateParameters *CfltrRequestBodyCertificateParameters `json:"certificateParameters,omitempty"`
	ConsentArtifact       *shared.ConsentArtifactSchema          `json:"consentArtifact,omitempty"`
	// The format of the certificate in response.
	Format CfltrRequestBodyFormatEnum `json:"format"`
	// A unique transaction id for this request in UUID format. It is used for tracking the request.
	TxnID string `json:"txnId"`
}

type Cfltr504ApplicationJSONErrorEnum string

const (
	Cfltr504ApplicationJSONErrorEnumGatewayTimeout Cfltr504ApplicationJSONErrorEnum = "gateway_timeout"
)

func (e *Cfltr504ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "gateway_timeout":
		*e = Cfltr504ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Cfltr504ApplicationJSONErrorEnum: %s", s)
	}
}

type Cfltr504ApplicationJSONErrorDescriptionEnum string

const (
	Cfltr504ApplicationJSONErrorDescriptionEnumPublisherServiceDidNotRespondInTime Cfltr504ApplicationJSONErrorDescriptionEnum = "Publisher service did not respond in time"
)

func (e *Cfltr504ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Publisher service did not respond in time":
		*e = Cfltr504ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Cfltr504ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Cfltr504ApplicationJSON - Gateway timeout
type Cfltr504ApplicationJSON struct {
	Error            *Cfltr504ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Cfltr504ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Cfltr503ApplicationJSONErrorEnum string

const (
	Cfltr503ApplicationJSONErrorEnumServiceUnavailable Cfltr503ApplicationJSONErrorEnum = "service_unavailable"
)

func (e *Cfltr503ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "service_unavailable":
		*e = Cfltr503ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Cfltr503ApplicationJSONErrorEnum: %s", s)
	}
}

type Cfltr503ApplicationJSONErrorDescriptionEnum string

const (
	Cfltr503ApplicationJSONErrorDescriptionEnumPublisherServiceIsTemporarilyUnavailable Cfltr503ApplicationJSONErrorDescriptionEnum = "Publisher service is temporarily unavailable"
)

func (e *Cfltr503ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Publisher service is temporarily unavailable":
		*e = Cfltr503ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Cfltr503ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Cfltr503ApplicationJSON - Service unavailable
type Cfltr503ApplicationJSON struct {
	Error            *Cfltr503ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Cfltr503ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Cfltr502ApplicationJSONErrorEnum string

const (
	Cfltr502ApplicationJSONErrorEnumBadGatewy Cfltr502ApplicationJSONErrorEnum = "bad_gatewy"
)

func (e *Cfltr502ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "bad_gatewy":
		*e = Cfltr502ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Cfltr502ApplicationJSONErrorEnum: %s", s)
	}
}

type Cfltr502ApplicationJSONErrorDescriptionEnum string

const (
	Cfltr502ApplicationJSONErrorDescriptionEnumPublisherServiceReturnedAnInvalidResponse Cfltr502ApplicationJSONErrorDescriptionEnum = "Publisher service returned an invalid response"
)

func (e *Cfltr502ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Publisher service returned an invalid response":
		*e = Cfltr502ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Cfltr502ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Cfltr502ApplicationJSON - Bad gateway
type Cfltr502ApplicationJSON struct {
	Error            *Cfltr502ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Cfltr502ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Cfltr500ApplicationJSONErrorEnum string

const (
	Cfltr500ApplicationJSONErrorEnumInternalServerError Cfltr500ApplicationJSONErrorEnum = "internal_server_error"
)

func (e *Cfltr500ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "internal_server_error":
		*e = Cfltr500ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Cfltr500ApplicationJSONErrorEnum: %s", s)
	}
}

type Cfltr500ApplicationJSONErrorDescriptionEnum string

const (
	Cfltr500ApplicationJSONErrorDescriptionEnumInternalServerError Cfltr500ApplicationJSONErrorDescriptionEnum = "Internal server error"
)

func (e *Cfltr500ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Internal server error":
		*e = Cfltr500ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Cfltr500ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Cfltr500ApplicationJSON - Internal server error
type Cfltr500ApplicationJSON struct {
	Error            *Cfltr500ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Cfltr500ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Cfltr404ApplicationJSONErrorEnum string

const (
	Cfltr404ApplicationJSONErrorEnumRecordNotFound Cfltr404ApplicationJSONErrorEnum = "record_not_found"
	Cfltr404ApplicationJSONErrorEnumURLNotFound    Cfltr404ApplicationJSONErrorEnum = "url_not_found"
)

func (e *Cfltr404ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "record_not_found":
		fallthrough
	case "url_not_found":
		*e = Cfltr404ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Cfltr404ApplicationJSONErrorEnum: %s", s)
	}
}

type Cfltr404ApplicationJSONErrorDescriptionEnum string

const (
	Cfltr404ApplicationJSONErrorDescriptionEnumNoRecordFound               Cfltr404ApplicationJSONErrorDescriptionEnum = "No record found"
	Cfltr404ApplicationJSONErrorDescriptionEnumYourAPIURLOrPathIsIncorrect Cfltr404ApplicationJSONErrorDescriptionEnum = "Your API url or path is incorrect"
)

func (e *Cfltr404ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "No record found":
		fallthrough
	case "Your API url or path is incorrect":
		*e = Cfltr404ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Cfltr404ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Cfltr404ApplicationJSON - No record found
type Cfltr404ApplicationJSON struct {
	Error            *Cfltr404ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Cfltr404ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Cfltr401ApplicationJSONErrorEnum string

const (
	Cfltr401ApplicationJSONErrorEnumInvalidAuthentication Cfltr401ApplicationJSONErrorEnum = "invalid_authentication"
	Cfltr401ApplicationJSONErrorEnumInvalidAuthorization  Cfltr401ApplicationJSONErrorEnum = "invalid_authorization"
)

func (e *Cfltr401ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "invalid_authentication":
		fallthrough
	case "invalid_authorization":
		*e = Cfltr401ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Cfltr401ApplicationJSONErrorEnum: %s", s)
	}
}

type Cfltr401ApplicationJSONErrorDescriptionEnum string

const (
	Cfltr401ApplicationJSONErrorDescriptionEnumAuthenticationFailed            Cfltr401ApplicationJSONErrorDescriptionEnum = "Authentication failed"
	Cfltr401ApplicationJSONErrorDescriptionEnumYouAreNotAuthorizedToUseThisAPI Cfltr401ApplicationJSONErrorDescriptionEnum = "You are not authorized to use this API"
)

func (e *Cfltr401ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Authentication failed":
		fallthrough
	case "You are not authorized to use this API":
		*e = Cfltr401ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Cfltr401ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Cfltr401ApplicationJSON - Unauthorized access
type Cfltr401ApplicationJSON struct {
	Error            *Cfltr401ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Cfltr401ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Cfltr400ApplicationJSONErrorEnum string

const (
	Cfltr400ApplicationJSONErrorEnumMissingParameter Cfltr400ApplicationJSONErrorEnum = "missing_parameter"
	Cfltr400ApplicationJSONErrorEnumInvalidParameter Cfltr400ApplicationJSONErrorEnum = "invalid_parameter"
	Cfltr400ApplicationJSONErrorEnumInvalidFormat    Cfltr400ApplicationJSONErrorEnum = "invalid_format"
	Cfltr400ApplicationJSONErrorEnumInvalidTxnid     Cfltr400ApplicationJSONErrorEnum = "invalid_txnid"
	Cfltr400ApplicationJSONErrorEnumInvalidConsentid Cfltr400ApplicationJSONErrorEnum = "invalid_consentid"
)

func (e *Cfltr400ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "missing_parameter":
		fallthrough
	case "invalid_parameter":
		fallthrough
	case "invalid_format":
		fallthrough
	case "invalid_txnid":
		fallthrough
	case "invalid_consentid":
		*e = Cfltr400ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Cfltr400ApplicationJSONErrorEnum: %s", s)
	}
}

type Cfltr400ApplicationJSONErrorDescriptionEnum string

const (
	Cfltr400ApplicationJSONErrorDescriptionEnumPleaseProvideAllMandatoryParameters     Cfltr400ApplicationJSONErrorDescriptionEnum = "Please provide all mandatory parameters"
	Cfltr400ApplicationJSONErrorDescriptionEnumBadRequest                              Cfltr400ApplicationJSONErrorDescriptionEnum = "Bad request"
	Cfltr400ApplicationJSONErrorDescriptionEnumTheFormatParameterIsInvalid             Cfltr400ApplicationJSONErrorDescriptionEnum = "The format parameter is invalid"
	Cfltr400ApplicationJSONErrorDescriptionEnumTheTxnIDParameterMustBeInUUIDFormat     Cfltr400ApplicationJSONErrorDescriptionEnum = "The txnId parameter must be in UUID format"
	Cfltr400ApplicationJSONErrorDescriptionEnumTheConsentIDParameterMustBeInUUIDFormat Cfltr400ApplicationJSONErrorDescriptionEnum = "The consentId parameter must be in UUID format"
)

func (e *Cfltr400ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Please provide all mandatory parameters":
		fallthrough
	case "Bad request":
		fallthrough
	case "The format parameter is invalid":
		fallthrough
	case "The txnId parameter must be in UUID format":
		fallthrough
	case "The consentId parameter must be in UUID format":
		*e = Cfltr400ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Cfltr400ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Cfltr400ApplicationJSON - Bad request
type Cfltr400ApplicationJSON struct {
	Error            *Cfltr400ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Cfltr400ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type CfltrResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Bad request
	Cfltr400ApplicationJSONObject *Cfltr400ApplicationJSON
	// Unauthorized access
	Cfltr401ApplicationJSONObject *Cfltr401ApplicationJSON
	// No record found
	Cfltr404ApplicationJSONObject *Cfltr404ApplicationJSON
	// Internal server error
	Cfltr500ApplicationJSONObject *Cfltr500ApplicationJSON
	// Bad gateway
	Cfltr502ApplicationJSONObject *Cfltr502ApplicationJSON
	// Service unavailable
	Cfltr503ApplicationJSONObject *Cfltr503ApplicationJSON
	// Gateway timeout
	Cfltr504ApplicationJSONObject *Cfltr504ApplicationJSON
}
