/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * ListConnectionsResponse - The response to a request for the authenticated user's connections.
 */
public class ListConnectionsResponse {
    /**
     * The list of people that the requestor is connected to.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("connections")
    public Person[] connections;
    public ListConnectionsResponse withConnections(Person[] connections) {
        this.connections = connections;
        return this;
    }
    
    /**
     * A token, which can be sent as `page_token` to retrieve the next page. If this field is omitted, there are no subsequent pages.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("nextPageToken")
    public String nextPageToken;
    public ListConnectionsResponse withNextPageToken(String nextPageToken) {
        this.nextPageToken = nextPageToken;
        return this;
    }
    
    /**
     * A token, which can be sent as `sync_token` to retrieve changes since the last request. Request must set `request_sync_token` to return the sync token. When the response is paginated, only the last page will contain `nextSyncToken`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("nextSyncToken")
    public String nextSyncToken;
    public ListConnectionsResponse withNextSyncToken(String nextSyncToken) {
        this.nextSyncToken = nextSyncToken;
        return this;
    }
    
    /**
     * The total number of items in the list without pagination.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("totalItems")
    public Integer totalItems;
    public ListConnectionsResponse withTotalItems(Integer totalItems) {
        this.totalItems = totalItems;
        return this;
    }
    
    /**
     * **DEPRECATED** (Please use totalItems) The total number of people in the list without pagination.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("totalPeople")
    public Integer totalPeople;
    public ListConnectionsResponse withTotalPeople(Integer totalPeople) {
        this.totalPeople = totalPeople;
        return this;
    }
    
}
