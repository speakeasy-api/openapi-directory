// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// OrderFieldsShipmentStatusEnum - Shipment Status for Order Fulfillment.
type OrderFieldsShipmentStatusEnum string

const (
	OrderFieldsShipmentStatusEnumDelivered       OrderFieldsShipmentStatusEnum = "delivered"
	OrderFieldsShipmentStatusEnumRequested       OrderFieldsShipmentStatusEnum = "requested"
	OrderFieldsShipmentStatusEnumInTransit       OrderFieldsShipmentStatusEnum = "in_transit"
	OrderFieldsShipmentStatusEnumFailed          OrderFieldsShipmentStatusEnum = "failed"
	OrderFieldsShipmentStatusEnumPickupAvailable OrderFieldsShipmentStatusEnum = "pickup_available"
)

func (e OrderFieldsShipmentStatusEnum) ToPointer() *OrderFieldsShipmentStatusEnum {
	return &e
}

func (e *OrderFieldsShipmentStatusEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "delivered":
		fallthrough
	case "requested":
		fallthrough
	case "in_transit":
		fallthrough
	case "failed":
		fallthrough
	case "pickup_available":
		*e = OrderFieldsShipmentStatusEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for OrderFieldsShipmentStatusEnum: %v", v)
	}
}

// OrderFieldsShippingOptionEnum - Shipping option for this order.
type OrderFieldsShippingOptionEnum string

const (
	OrderFieldsShippingOptionEnumDelivery    OrderFieldsShippingOptionEnum = "delivery"
	OrderFieldsShippingOptionEnumStorePickup OrderFieldsShippingOptionEnum = "store_pickup"
	OrderFieldsShippingOptionEnumNoShipping  OrderFieldsShippingOptionEnum = "no_shipping"
)

func (e OrderFieldsShippingOptionEnum) ToPointer() *OrderFieldsShippingOptionEnum {
	return &e
}

func (e *OrderFieldsShippingOptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "delivery":
		fallthrough
	case "store_pickup":
		fallthrough
	case "no_shipping":
		*e = OrderFieldsShippingOptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for OrderFieldsShippingOptionEnum: %v", v)
	}
}

// OrderFieldsStatusEnum - Status of the Order
type OrderFieldsStatusEnum string

const (
	OrderFieldsStatusEnumAbandoned      OrderFieldsStatusEnum = "Abandoned"
	OrderFieldsStatusEnumCanceled       OrderFieldsStatusEnum = "Canceled"
	OrderFieldsStatusEnumPendingPayment OrderFieldsStatusEnum = "Pending Payment"
	OrderFieldsStatusEnumPaid           OrderFieldsStatusEnum = "Paid"
)

func (e OrderFieldsStatusEnum) ToPointer() *OrderFieldsStatusEnum {
	return &e
}

func (e *OrderFieldsStatusEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Abandoned":
		fallthrough
	case "Canceled":
		fallthrough
	case "Pending Payment":
		fallthrough
	case "Paid":
		*e = OrderFieldsStatusEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for OrderFieldsStatusEnum: %v", v)
	}
}

type OrderFields struct {
	// Array of additional fields for the given Order
	AdditionalFields []OrderAdditionalFields `json:"additional_fields,omitempty"`
	// Additional information for the given Order
	AdditionalInformation *string              `json:"additional_information,omitempty"`
	BillingAddress        *OrderBillingAddress `json:"billing_address,omitempty"`
	// Store Checkout Order URL for the given Order
	CheckoutURL *string `json:"checkout_url,omitempty"`
	// Promotion Coupons used on the given Order
	Coupons *string `json:"coupons,omitempty"`
	// Order date
	CreatedAt *string `json:"created_at,omitempty"`
	// Currency of the Order
	Currency *string   `json:"currency,omitempty"`
	Customer *Customer `json:"customer,omitempty"`
	// Discount value for the given Order
	Discount *float32 `json:"discount,omitempty"`
	// Duplicate Order URL for the given Order
	DuplicateURL *string `json:"duplicate_url,omitempty"`
	// Rate id for selected External Shipping Method rate
	ExternalShippingRateID *string `json:"external_shipping_rate_id,omitempty"`
	// Unique identifier of the Order
	ID *int `json:"id,omitempty"`
	// Payment information for the given Order
	PaymentInformation *string `json:"payment_information,omitempty"`
	// Payment Method name used e.g. PayPal
	PaymentMethodName *string `json:"payment_method_name,omitempty"`
	// Payment Method type used e.g. paypal
	PaymentMethodType *string        `json:"payment_method_type,omitempty"`
	Products          []OrderProduct `json:"products,omitempty"`
	// Recovery Order URL for the given Order
	RecoveryURL *string `json:"recovery_url,omitempty"`
	// Shipment Status for Order Fulfillment.
	ShipmentStatus *OrderFieldsShipmentStatusEnum `json:"shipment_status,omitempty"`
	// Shipping value for the given Order
	Shipping        *float32              `json:"shipping,omitempty"`
	ShippingAddress *OrderShippingAddress `json:"shipping_address,omitempty"`
	// Shipping Discount value for the given order
	ShippingDiscount *float32 `json:"shipping_discount,omitempty"`
	// Shipping method e.g. Royal Mail
	ShippingMethodID *int `json:"shipping_method_id,omitempty"`
	// Shipping method e.g. Royal Mail
	ShippingMethodName *string `json:"shipping_method_name,omitempty"`
	// Shipping option for this order.
	ShippingOption *OrderFieldsShippingOptionEnum `json:"shipping_option,omitempty"`
	// False if the order is digital.
	ShippingRequired *bool `json:"shipping_required,omitempty"`
	// Shipping Tax value for the given order
	ShippingTax   *float32           `json:"shipping_tax,omitempty"`
	ShippingTaxes []OrderShippingTax `json:"shipping_taxes,omitempty"`
	Source        *TrafficSource     `json:"source,omitempty"`
	// Status of the Order
	Status *OrderFieldsStatusEnum `json:"status,omitempty"`
	// Subtotal value for the given Order. Excluding taxes, shipping and discounts
	Subtotal *float32 `json:"subtotal,omitempty"`
	// Tax value for the given order
	Tax *float32 `json:"tax,omitempty"`
	// Total value for the given Order. Including taxes, shipping and discounts
	Total *float32 `json:"total,omitempty"`
	// Company Used for Order Fulfillment.
	TrackingCompany *string `json:"tracking_company,omitempty"`
	// Tracking Number for Order Fulfillment.
	TrackingNumber *string `json:"tracking_number,omitempty"`
	// Tracking URL for Order Fulfillment.
	TrackingURL *string `json:"tracking_url,omitempty"`
}
