"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from ..shared import affinityinformation as shared_affinityinformation
from ..shared import computenodeinformation as shared_computenodeinformation
from ..shared import environmentsetting as shared_environmentsetting
from ..shared import multiinstancesettings as shared_multiinstancesettings
from ..shared import resourcefile as shared_resourcefile
from ..shared import taskconstraints as shared_taskconstraints
from ..shared import taskdependencies as shared_taskdependencies
from ..shared import taskexecutioninformation as shared_taskexecutioninformation
from ..shared import taskstatistics as shared_taskstatistics
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from enum import Enum
from marshmallow import fields
from sdk import utils
from typing import Optional

class CloudTaskPreviousStateEnum(str, Enum):
    r"""Gets or sets the previous state of the task. This property is not set if the task is in its initial Active state."""
    ACTIVE = 'active'
    PREPARING = 'preparing'
    RUNNING = 'running'
    COMPLETED = 'completed'

class CloudTaskStateEnum(str, Enum):
    r"""Gets or sets the current state of the task."""
    ACTIVE = 'active'
    PREPARING = 'preparing'
    RUNNING = 'running'
    COMPLETED = 'completed'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CloudTask:
    r"""An Azure Batch task."""
    
    affinity_info: Optional[shared_affinityinformation.AffinityInformation] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('affinityInfo'), 'exclude': lambda f: f is None }})
    r"""A locality hint that can be used by the Batch service to select a compute node on which to start a task."""  
    command_line: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('commandLine'), 'exclude': lambda f: f is None }})
    r"""Gets or sets the command line of the task. For multi-instance tasks, the command line is executed on the primary subtask after all the subtasks have finished executing the coordination command line."""  
    constraints: Optional[shared_taskconstraints.TaskConstraints] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('constraints'), 'exclude': lambda f: f is None }})
    r"""Constraints to apply to the Job Manager task."""  
    creation_time: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('creationTime'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""Gets or sets the creation time of the task."""  
    depends_on: Optional[shared_taskdependencies.TaskDependencies] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dependsOn'), 'exclude': lambda f: f is None }})
    r"""Specifies any dependencies of a task.  Any task that is explicitly specified or within a dependency range must complete before the dependant task will be scheduled."""  
    display_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('displayName'), 'exclude': lambda f: f is None }})
    r"""Gets or sets a display name for the task."""  
    environment_settings: Optional[list[shared_environmentsetting.EnvironmentSetting]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('environmentSettings'), 'exclude': lambda f: f is None }})
    r"""Gets or sets a list of environment variable settings for the task."""  
    e_tag: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('eTag'), 'exclude': lambda f: f is None }})
    r"""Gets or sets the ETag of the task."""  
    execution_info: Optional[shared_taskexecutioninformation.TaskExecutionInformation] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('executionInfo'), 'exclude': lambda f: f is None }})
    r"""Information about the execution of a task."""  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""Gets or sets a string that uniquely identifies the task within the job. The id can contain any combination of alphanumeric characters including hyphens and underscores, and cannot contain more than 64 characters."""  
    last_modified: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lastModified'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""Gets or sets the last modified time of the task."""  
    multi_instance_settings: Optional[shared_multiinstancesettings.MultiInstanceSettings] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('multiInstanceSettings'), 'exclude': lambda f: f is None }})
    r"""Information about the settings required for multi-instance task."""  
    node_info: Optional[shared_computenodeinformation.ComputeNodeInformation] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('nodeInfo'), 'exclude': lambda f: f is None }})
    r"""Information about the compute node on which a task ran."""  
    previous_state: Optional[CloudTaskPreviousStateEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('previousState'), 'exclude': lambda f: f is None }})
    r"""Gets or sets the previous state of the task. This property is not set if the task is in its initial Active state."""  
    previous_state_transition_time: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('previousStateTransitionTime'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""Gets or sets the time at which the task entered its previous state. This property is not set if the task is in its initial Active state."""  
    resource_files: Optional[list[shared_resourcefile.ResourceFile]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('resourceFiles'), 'exclude': lambda f: f is None }})
    r"""Gets or sets a list of files that Batch will download to the compute node before running the command line. For multi-instance tasks, the resource files will only be downloaded to the compute node on which the primary subtask is executed."""  
    run_elevated: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('runElevated'), 'exclude': lambda f: f is None }})
    r"""Gets or sets whether to run the task in elevated mode."""  
    state: Optional[CloudTaskStateEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('state'), 'exclude': lambda f: f is None }})
    r"""Gets or sets the current state of the task."""  
    state_transition_time: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('stateTransitionTime'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""Gets or sets the time at which the task entered its current state."""  
    stats: Optional[shared_taskstatistics.TaskStatistics] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('stats'), 'exclude': lambda f: f is None }})
    r"""Resource usage statistics for a task."""  
    url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('url'), 'exclude': lambda f: f is None }})
    r"""Gets or sets the URL of the task."""  
    