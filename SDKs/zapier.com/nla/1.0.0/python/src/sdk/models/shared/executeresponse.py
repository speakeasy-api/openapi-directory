"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Any, Optional

class ExecuteResponseStatusEnum(str, Enum):
    r"""The status of the execution."""
    SUCCESS = 'success'
    ERROR = 'error'
    EMPTY = 'empty'
    PREVIEW = 'preview'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ExecuteResponse:
    r"""This is a summary of the results given the action that was executed."""
    
    action_used: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('action_used') }})
    r"""The name of the action that was executed."""  
    id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id') }})
    r"""The id of the execution log."""  
    input_params: dict[str, Any] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('input_params') }})
    r"""The params we used / will use to execute the action."""  
    review_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('review_url') }})
    r"""The URL to run the action or review the AI choices the AI made for input_params given instructions."""  
    error: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('error'), 'exclude': lambda f: f is None }})
    r"""The error message if the execution failed."""  
    result: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('result'), 'exclude': lambda f: f is None }})
    r"""A trimmed down result of the first item of the full results. Ideal for humans and language models!"""  
    status: Optional[ExecuteResponseStatusEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status'), 'exclude': lambda f: f is None }})
    r"""The status of the execution."""  
    