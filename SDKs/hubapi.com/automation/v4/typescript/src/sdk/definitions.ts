/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

/**
 * Operations to configure custom workflow actions.
 */
export class Definitions {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Archive a custom action
   *
   * @remarks
   * Archives a single custom workflow action with the specified ID. Workflows that currently use this custom action will stop attempting to execute the action, and all future executions will be marked as a failure.
   */
  deleteAutomationV4ActionsAppIdDefinitionIdArchive(
    req: operations.DeleteAutomationV4ActionsAppIdDefinitionIdArchiveRequest,
    security: operations.DeleteAutomationV4ActionsAppIdDefinitionIdArchiveSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DeleteAutomationV4ActionsAppIdDefinitionIdArchiveResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.DeleteAutomationV4ActionsAppIdDefinitionIdArchiveRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/automation/v4/actions/{appId}/{definitionId}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.DeleteAutomationV4ActionsAppIdDefinitionIdArchiveSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DeleteAutomationV4ActionsAppIdDefinitionIdArchiveResponse =
        new operations.DeleteAutomationV4ActionsAppIdDefinitionIdArchiveResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 204:
          break;
        default:
          if (utils.matchContentType(contentType, `*/*`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get a custom action
   *
   * @remarks
   * Returns a single custom workflow action with the specified ID.
   */
  getAutomationV4ActionsAppIdDefinitionIdGetById(
    req: operations.GetAutomationV4ActionsAppIdDefinitionIdGetByIdRequest,
    security: operations.GetAutomationV4ActionsAppIdDefinitionIdGetByIdSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetAutomationV4ActionsAppIdDefinitionIdGetByIdResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.GetAutomationV4ActionsAppIdDefinitionIdGetByIdRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/automation/v4/actions/{appId}/{definitionId}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.GetAutomationV4ActionsAppIdDefinitionIdGetByIdSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetAutomationV4ActionsAppIdDefinitionIdGetByIdResponse =
        new operations.GetAutomationV4ActionsAppIdDefinitionIdGetByIdResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.extensionActionDefinition = utils.objectToClass(
              httpRes?.data,
              shared.ExtensionActionDefinition
            );
          }
          break;
        default:
          if (utils.matchContentType(contentType, `*/*`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get all custom actions
   *
   * @remarks
   * Returns a list of all custom workflow actions.
   */
  getAutomationV4ActionsAppIdGetPage(
    req: operations.GetAutomationV4ActionsAppIdGetPageRequest,
    security: operations.GetAutomationV4ActionsAppIdGetPageSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetAutomationV4ActionsAppIdGetPageResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetAutomationV4ActionsAppIdGetPageRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/automation/v4/actions/{appId}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GetAutomationV4ActionsAppIdGetPageSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetAutomationV4ActionsAppIdGetPageResponse =
        new operations.GetAutomationV4ActionsAppIdGetPageResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.collectionResponseExtensionActionDefinitionForwardPaging =
              utils.objectToClass(
                httpRes?.data,
                shared.CollectionResponseExtensionActionDefinitionForwardPaging
              );
          }
          break;
        default:
          if (utils.matchContentType(contentType, `*/*`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          break;
      }

      return res;
    });
  }

  /**
   * Update a custom action
   *
   * @remarks
   * Updates a custom workflow action with new values for the specified fields.
   */
  patchAutomationV4ActionsAppIdDefinitionIdUpdate(
    req: operations.PatchAutomationV4ActionsAppIdDefinitionIdUpdateRequest,
    security: operations.PatchAutomationV4ActionsAppIdDefinitionIdUpdateSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.PatchAutomationV4ActionsAppIdDefinitionIdUpdateResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.PatchAutomationV4ActionsAppIdDefinitionIdUpdateRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/automation/v4/actions/{appId}/{definitionId}",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "extensionActionDefinitionPatch",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.PatchAutomationV4ActionsAppIdDefinitionIdUpdateSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "patch",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PatchAutomationV4ActionsAppIdDefinitionIdUpdateResponse =
        new operations.PatchAutomationV4ActionsAppIdDefinitionIdUpdateResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.extensionActionDefinition = utils.objectToClass(
              httpRes?.data,
              shared.ExtensionActionDefinition
            );
          }
          break;
        default:
          if (utils.matchContentType(contentType, `*/*`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          break;
      }

      return res;
    });
  }

  /**
   * Create new custom action
   *
   * @remarks
   * Creates a new custom workflow action.
   */
  postAutomationV4ActionsAppIdCreate(
    req: operations.PostAutomationV4ActionsAppIdCreateRequest,
    security: operations.PostAutomationV4ActionsAppIdCreateSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.PostAutomationV4ActionsAppIdCreateResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PostAutomationV4ActionsAppIdCreateRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/automation/v4/actions/{appId}",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "extensionActionDefinitionInput",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.PostAutomationV4ActionsAppIdCreateSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PostAutomationV4ActionsAppIdCreateResponse =
        new operations.PostAutomationV4ActionsAppIdCreateResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 201:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.extensionActionDefinition = utils.objectToClass(
              httpRes?.data,
              shared.ExtensionActionDefinition
            );
          }
          break;
        default:
          if (utils.matchContentType(contentType, `*/*`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          break;
      }

      return res;
    });
  }
}
