<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Strings 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Clear translation cache
     * 
     * Clear/delete continuous project translation cache.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ClearTranslationCacheRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ClearTranslationCacheResponse
     */
	public function clearTranslationCache(
        \OpenAPI\OpenAPI\Models\Operations\ClearTranslationCacheRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ClearTranslationCacheResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/continuous_projects/{projectId}/strings/cached', \OpenAPI\OpenAPI\Models\Operations\ClearTranslationCacheRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ClearTranslationCacheRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ClearTranslationCacheResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operationStatus = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\OperationStatus', 'json');
            }
        }

        return $response;
    }
	
    /**
     * View strings their translations in a continuous document
     * 
     * View the strings from a document and their translations in your continuous translation project, for all target languages. If you need the translated version of your source document/file, then you need to use package and download endpoints.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetContinuousProjectFileStringsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetContinuousProjectFileStringsResponse
     */
	public function getContinuousProjectFileStrings(
        \OpenAPI\OpenAPI\Models\Operations\GetContinuousProjectFileStringsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetContinuousProjectFileStringsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/continuous_projects/{projectId}/documents/{documentId}/strings', \OpenAPI\OpenAPI\Models\Operations\GetContinuousProjectFileStringsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetContinuousProjectFileStringsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->stringList = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\StringList', 'json');
            }
        }

        return $response;
    }
	
    /**
     * View strings and translations in continuous project
     * 
     * View the strings and their translations in your continuous translation project, for all target languages. If you need the translated version of your source document/file, then you need to use package and download endpoints.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetContinuousProjectStringsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetContinuousProjectStringsResponse
     */
	public function getContinuousProjectStrings(
        \OpenAPI\OpenAPI\Models\Operations\GetContinuousProjectStringsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetContinuousProjectStringsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/continuous_projects/{projectId}/strings', \OpenAPI\OpenAPI\Models\Operations\GetContinuousProjectStringsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetContinuousProjectStringsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->stringList = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\StringList', 'json');
            }
        }

        return $response;
    }
	
    /**
     * View strings and translations of a document
     * 
     * View the strings and their translations in your translation project for the specified source document. The list of translations is live if your project is not completed yet. If you need the translated version of your source document/file, then you need to use package and download endpoints.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetDocumentTranslationsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetDocumentTranslationsResponse
     */
	public function getDocumentTranslations(
        \OpenAPI\OpenAPI\Models\Operations\GetDocumentTranslationsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetDocumentTranslationsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{projectId}/documents/{documentId}/translations', \OpenAPI\OpenAPI\Models\Operations\GetDocumentTranslationsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetDocumentTranslationsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->stringList = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\StringList', 'json');
            }
        }

        return $response;
    }
	
    /**
     * View strings and translations of a document for target language
     * 
     * View the strings and their translations in the given target language for the specified source document. The list of translations is live if your project is not completed yet. If you need the translated version of your source document/file, then you need to use package and download endpoints.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetDocumentTranslationsForLanguageRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetDocumentTranslationsForLanguageResponse
     */
	public function getDocumentTranslationsForLanguage(
        \OpenAPI\OpenAPI\Models\Operations\GetDocumentTranslationsForLanguageRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetDocumentTranslationsForLanguageResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{projectId}/documents/{documentId}/translations/{language}', \OpenAPI\OpenAPI\Models\Operations\GetDocumentTranslationsForLanguageRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetDocumentTranslationsForLanguageResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->stringList = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\StringList', 'json');
            }
        }

        return $response;
    }
	
    /**
     * View project strings and translations
     * 
     * View the strings and their translations in your translation project, for all target languages. The list of translations is live if your project is not completed yet. If you need the translated version of your source document/file, then you need to use package and download endpoints.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetProjectStringsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetProjectStringsResponse
     */
	public function getProjectStrings(
        \OpenAPI\OpenAPI\Models\Operations\GetProjectStringsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetProjectStringsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{projectId}/strings', \OpenAPI\OpenAPI\Models\Operations\GetProjectStringsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetProjectStringsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->stringList = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\StringList', 'json');
            }
        }

        return $response;
    }
	
    /**
     * View strings and translations for target language
     * 
     * View the strings and their translations in your translation project for the specified target language. The list of translations is live if your project is not completed yet. If you need the translated version of your source document/file, then you need to use package and download endpoints.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetProjectStringsForLanguageRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetProjectStringsForLanguageResponse
     */
	public function getProjectStringsForLanguage(
        \OpenAPI\OpenAPI\Models\Operations\GetProjectStringsForLanguageRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetProjectStringsForLanguageResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{projectId}/strings/{language}', \OpenAPI\OpenAPI\Models\Operations\GetProjectStringsForLanguageRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetProjectStringsForLanguageResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->stringList = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\StringList', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Deprecated. Use /projects/{projectId}/strings instead.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetProjectTranslationsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetProjectTranslationsResponse
     */
	public function getProjectTranslations(
        \OpenAPI\OpenAPI\Models\Operations\GetProjectTranslationsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetProjectTranslationsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{projectId}/translations', \OpenAPI\OpenAPI\Models\Operations\GetProjectTranslationsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetProjectTranslationsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->stringList = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\StringList', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Deprecated. use /projects/{projectId}/strings/{language} instead.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetProjectTranslationsForLanguageRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetProjectTranslationsForLanguageResponse
     */
	public function getProjectTranslationsForLanguage(
        \OpenAPI\OpenAPI\Models\Operations\GetProjectTranslationsForLanguageRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetProjectTranslationsForLanguageResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{projectId}/translations/{language}', \OpenAPI\OpenAPI\Models\Operations\GetProjectTranslationsForLanguageRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetProjectTranslationsForLanguageResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->stringList = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\StringList', 'json');
            }
        }

        return $response;
    }
	
    /**
     * View account strings (translation memory)
     * 
     * Get a list of all strings and their translations under your account, from all projects. This is your MotaWord translation memory. If you have the related permission, this endpoint will also return strings from your company account.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetStringsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetStringsResponse
     */
	public function getStrings(
        \OpenAPI\OpenAPI\Models\Operations\GetStringsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetStringsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/strings');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetStringsRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetStringsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->clientStrings = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ClientStrings', 'json');
            }
        }

        return $response;
    }
	
    /**
     * View cached strings translations in continuous project
     * 
     * MotaWord caches your account intensively (and in a smart way) in real-time translation environments. This endpoint will return the currently cached strings and translations in your continuous translation project.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetTranslationCacheRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetTranslationCacheResponse
     */
	public function getTranslationCache(
        \OpenAPI\OpenAPI\Models\Operations\GetTranslationCacheRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetTranslationCacheResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/continuous_projects/{projectId}/strings/cached', \OpenAPI\OpenAPI\Models\Operations\GetTranslationCacheRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetTranslationCacheRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetTranslationCacheResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->continuousProjectCache = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ContinuousProjectCache', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Download project translation memory
     * 
     * Package and download project translation memory in TMX format
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PackageProjectTranslationMemoryRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PackageProjectTranslationMemoryResponse
     */
	public function packageProjectTranslationMemory(
        \OpenAPI\OpenAPI\Models\Operations\PackageProjectTranslationMemoryRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PackageProjectTranslationMemoryResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{projectId}/strings/package', \OpenAPI\OpenAPI\Models\Operations\PackageProjectTranslationMemoryRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\PackageProjectTranslationMemoryRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PackageProjectTranslationMemoryResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->asyncOperationStatus = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\AsyncOperationStatus', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'application/xml')) {
                $response->packageProjectTranslationMemory200ApplicationXMLBinaryString = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Download language-specific project translation memory
     * 
     * Package and download project translation memory in TMX format for a specific target language.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PackageProjectTranslationMemoryForLanguageRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PackageProjectTranslationMemoryForLanguageResponse
     */
	public function packageProjectTranslationMemoryForLanguage(
        \OpenAPI\OpenAPI\Models\Operations\PackageProjectTranslationMemoryForLanguageRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PackageProjectTranslationMemoryForLanguageResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{projectId}/strings/{languageCode}/package', \OpenAPI\OpenAPI\Models\Operations\PackageProjectTranslationMemoryForLanguageRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\PackageProjectTranslationMemoryForLanguageRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PackageProjectTranslationMemoryForLanguageResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->asyncOperationStatus = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\AsyncOperationStatus', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'application/xml')) {
                $response->packageProjectTranslationMemoryForLanguage200ApplicationXMLBinaryString = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Check language-specific translation memory packaging status
     * 
     * Check translation memory packaging status for async packaging requests, using the key returned from strings/package call.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PackageProjectTranslationMemoryForLanguageStatusRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PackageProjectTranslationMemoryForLanguageStatusResponse
     */
	public function packageProjectTranslationMemoryForLanguageStatus(
        \OpenAPI\OpenAPI\Models\Operations\PackageProjectTranslationMemoryForLanguageStatusRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PackageProjectTranslationMemoryForLanguageStatusResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{projectId}/strings/{languageCode}/package/status', \OpenAPI\OpenAPI\Models\Operations\PackageProjectTranslationMemoryForLanguageStatusRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\PackageProjectTranslationMemoryForLanguageStatusRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PackageProjectTranslationMemoryForLanguageStatusResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->asyncOperationStatus = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\AsyncOperationStatus', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Check translation memory packaging status
     * 
     * Check translation memory packaging status for async packaging requests, using the key returned from strings/package call.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PackageProjectTranslationMemoryStatusRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PackageProjectTranslationMemoryStatusResponse
     */
	public function packageProjectTranslationMemoryStatus(
        \OpenAPI\OpenAPI\Models\Operations\PackageProjectTranslationMemoryStatusRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PackageProjectTranslationMemoryStatusResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{projectId}/strings/package/status', \OpenAPI\OpenAPI\Models\Operations\PackageProjectTranslationMemoryStatusRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\PackageProjectTranslationMemoryStatusRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PackageProjectTranslationMemoryStatusResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->asyncOperationStatus = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\AsyncOperationStatus', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Download account translation memory
     * 
     * Package and download account translation memory in TMX format. If you have the related permission, this will also download your company translation memory.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PackageUserTranslationMemoryRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PackageUserTranslationMemoryResponse
     */
	public function packageUserTranslationMemory(
        \OpenAPI\OpenAPI\Models\Operations\PackageUserTranslationMemoryRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PackageUserTranslationMemoryResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/strings/{languageCode}/package', \OpenAPI\OpenAPI\Models\Operations\PackageUserTranslationMemoryRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\PackageUserTranslationMemoryRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PackageUserTranslationMemoryResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->asyncOperationStatus = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\AsyncOperationStatus', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'application/xml')) {
                $response->packageUserTranslationMemory200ApplicationXMLBinaryString = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Check account translation memory packaging status
     * 
     * Check translation memory packaging status for async packaging requests, using the key returned from strings/package call.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PackageUserTranslationMemoryForLanguageStatusRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PackageUserTranslationMemoryForLanguageStatusResponse
     */
	public function packageUserTranslationMemoryForLanguageStatus(
        \OpenAPI\OpenAPI\Models\Operations\PackageUserTranslationMemoryForLanguageStatusRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PackageUserTranslationMemoryForLanguageStatusResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/strings/{languageCode}/package/status', \OpenAPI\OpenAPI\Models\Operations\PackageUserTranslationMemoryForLanguageStatusRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\PackageUserTranslationMemoryForLanguageStatusRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PackageUserTranslationMemoryForLanguageStatusResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->asyncOperationStatus = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\AsyncOperationStatus', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get a list of strings and its translations in the project.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostContinuousProjectFileStringsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostContinuousProjectFileStringsResponse
     */
	public function postContinuousProjectFileStrings(
        \OpenAPI\OpenAPI\Models\Operations\PostContinuousProjectFileStringsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostContinuousProjectFileStringsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/continuous_projects/{projectId}/documents/strings', \OpenAPI\OpenAPI\Models\Operations\PostContinuousProjectFileStringsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "continuousProjectDocumentStringsBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostContinuousProjectFileStringsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->stringList = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\StringList', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Translate Strings with MT
     * 
     * Deprecated, use instant translation mechanism for continuous projects.
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\DeprecatedStringTranslationContent $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostStringsResponse
     */
	public function postStrings(
        \OpenAPI\OpenAPI\Models\Shared\DeprecatedStringTranslationContent $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostStringsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/strings');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostStringsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->machineTranslatedStrings = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\MachineTranslatedStrings', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Recache translations
     * 
     * Recache translations for the continuous project.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\RecacheTranslationsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\RecacheTranslationsResponse
     */
	public function recacheTranslations(
        \OpenAPI\OpenAPI\Models\Operations\RecacheTranslationsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\RecacheTranslationsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/continuous_projects/{projectId}/strings/recache-tms', \OpenAPI\OpenAPI\Models\Operations\RecacheTranslationsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\RecacheTranslationsRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\RecacheTranslationsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operationStatus = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\OperationStatus', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update string translation
     * 
     * Update the translation of a string from your account strings/translation memory.
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\TranslationMemoryUnit $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateTranslationMemoryUnitResponse
     */
	public function updateTranslationMemoryUnit(
        \OpenAPI\OpenAPI\Models\Shared\TranslationMemoryUnit $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateTranslationMemoryUnitResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/strings');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateTranslationMemoryUnitResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operationStatus = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\OperationStatus', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
}