/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi;

import org.openapis.openapi.utils.HTTPClient;
import org.openapis.openapi.utils.SpeakeasyHTTPClient;

/**
 * # Google Home Local API
 * This is an unofficial documentation of the local API used by the Home app to communicate with GH devices.
 * [GitHub Repo](https://github.com/rithvikvibhu/GHLocalApi)
 * 
 * [![GitHub stars](https://img.shields.io/github/stars/rithvikvibhu/GHLocalApi)](https://github.com/rithvikvibhu/GHLocalApi/stargazers) [![GitHub license](https://img.shields.io/github/license/rithvikvibhu/GHLocalApi)](https://github.com/rithvikvibhu/GHLocalApi/blob/master/LICENSE.md)
 * 
 * ## Getting Started
 * 
 * Requests must be made over HTTPS, port 8443, so the base URL for these endpoints is: `https://&lt;google-home-ip&gt;:8443/setup/`
 * 
 * Get the IP of Google Home from the Google Home app (Device Settings -&gt; End of the list) or from your router.
 * 
 * GET requests are simple, in the browser kind.  
 * POST requests need to set the header (when there's a body): `content-type: application/json`
 * 
 * ## Authentication
 * 
 * Since June 2019, most requests (with exceptions like `/setup/eureka_info`) need a local authorization token.
 * 
 * There are 3 kinds of tokens involved here:
 * 
 * ### Local Authorization Token
 * This token must be sent in all requests in the header `cast-local-authorization-token`. It is short-lived (~1 day) and may change unexpectedly (with a sync, change in homegraph, etc.)
 * ##### Get this token
 * - With access to an android device, [get this token directly by either method](https://gist.github.com/rithvikvibhu/1a0f4937af957ef6a78453e3be482c1f).
 * - Without a device, or to integrate it with a script, use an access token to get the homegraph and extract the token. To get an access token, read the next section. Check the example section for more info.
 * 
 * ### Access Token
 * This is a standard google oauth2 access token. It is in the form `ya29.***`.
 * This gives access to the Google Home Foyer API. These expire in an hour.
 * Use this to get the homegraph (and then the local authorization token above).
 * ##### Get this token
 * To get this access token, either a Google account username/password or a Google Master Token is needed. More info in the gist.
 * Use the script [from this gist](https://gist.github.com/rithvikvibhu/952f83ea656c6782fbd0f1645059055d).
 * 
 * ### Master Token
 * This is in the form `aas_et/***` and can be used to request access tokens.
 * ##### Get this token
 * The same [script in the gist](https://gist.github.com/rithvikvibhu/952f83ea656c6782fbd0f1645059055d) that gets the access token can also get the master token. Needs Google account creds.
 * 
 * ## Example
 * 
 * Here's the whole flow from just a pair of username/password to using the local API.
 * 
 * Prerequisites:
 * - [grpcurl](https://github.com/fullstorydev/grpcurl)
 * - [Proto files](https://drive.google.com/drive/folders/1RvnN3y-G23pd2SWHmfV_7sef8QU5GNF4?usp=sharing) (preserve folder structure)
 * 
 * ### 1. Get an access token with the script
 * - Download get_tokens.py
 * - Fill in username and password
 * ```sh
 * python3 get_tokens.py
 * # Note down the access token printed.
 * ```
 * 
 * ### 2. Use the access token and get home graph
 * - This prints the json and uses jq to parse and filter out the fields deviceName and localAuthToken
 * - This will give a list of all devices and their local auth tokens
 * ```sh
 * ./grpcurl -H 'authorization: Bearer ya29.a0Af****' \
 * 	-import-path /path/to/protos \
 * 	-proto /path/to/protos/google/internal/home/foyer/v1.proto \
 * 	googlehomefoyer-pa.googleapis.com:443 \
 * 	google.internal.home.foyer.v1.StructuresService/GetHomeGraph | jq '.home.devices[] | {deviceName, localAuthToken}'
 * # Note down the local auth token for the device you want.
 * ```
 * 
 * ### 3. Make the call to the local device using the local auth token
 * ```sh
 * curl -H "cast-local-authorization-token: LOCAL_AUTH_TOKEN" --verbose --insecure https://192.168.0.18:8443/setup/bluetooth/status
 * ```
 */
public class SDK {
	/**
	 * SERVERS contains the list of server urls available to the SDK.
	 */
	public static final String[] SERVERS = {
        "http://example.com/setup",
	};
  	
    /**
     * This folder contains all endpoints related to Assistant's tasks like Do Not Disturb, Alarms and Timers, Accessibility and equalizer.
     */
    public Assistant assistant;
    /**
     * This folder contains Bluetooth related endpoints.
     */
    public Bluetooth bluetooth;
    /**
     * Endpoints in this folder give information about the device.
     */
    public DeviceInfo deviceInfo;
    /**
     * This folder consists of all endpoints to modify and control the device.
     */
    public DeviceSettings deviceSettings;
    /**
     * This folder contains a list of static files stored in Home.
     */
    public StaticFiles staticFiles;
    /**
     * This folder contains Wi-Fi related endpoints.
     */
    public Wifi wifi;	

	private HTTPClient _defaultClient;
	private HTTPClient _securityClient;
	private org.openapis.openapi.models.shared.Security _security;
	private String _serverUrl;
	private String _language = "java";
	private String _sdkVersion = "0.0.1";
	private String _genVersion = "internal";
	/**
	 * The Builder class allows the configuration of a new instance of the SDK.
	 */
	public static class Builder {
		private HTTPClient client;
		private org.openapis.openapi.models.shared.Security security;
		private String serverUrl;
		private java.util.Map<String, String> params = new java.util.HashMap<String, String>();

		private Builder() {
		}

		/**
		 * Allows the default HTTP client to be overridden with a custom implementation.
		 * @param client The HTTP client to use for all requests.
		 * @return The builder instance.
		 */
		public Builder setClient(HTTPClient client) {
			this.client = client;
			return this;
		}
		
		/**
		 * Configures the SDK to use the provided security details.
		 * @param security The security details to use for all requests.
		 * @return The builder instance.
		 */
		public Builder setSecurity(org.openapis.openapi.models.shared.Security security) {
			this.security = security;
			return this;
		}
		
		/**
		 * Allows the overriding of the default server URL.
		 * @param serverUrl The server URL to use for all requests.
		 * @return The builder instance.
		 */
		public Builder setServerURL(String serverUrl) {
			this.serverUrl = serverUrl;
			return this;
		}
		
		/**
		 * Allows the overriding of the default server URL  with a templated URL populated with the provided parameters.
		 * @param serverUrl The server URL to use for all requests.
		 * @param params The parameters to use when templating the URL.
		 * @return The builder instance.
		 */
		public Builder setServerURL(String serverUrl, java.util.Map<String, String> params) {
			this.serverUrl = serverUrl;
			this.params = params;
			return this;
		}
		
		/**
		 * Builds a new instance of the SDK.
		 * @return The SDK instance.
		 * @throws Exception Thrown if the SDK could not be built.
		 */
		public SDK build() throws Exception {
			return new SDK(this.client, this.security, this.serverUrl, this.params);
		}
	}

	/**
	 * Get a new instance of the SDK builder to configure a new instance of the SDK.
	 * @return The SDK builder instance.
	 */
	public static Builder builder() {
		return new Builder();
	}

	private SDK(HTTPClient client, org.openapis.openapi.models.shared.Security security, String serverUrl, java.util.Map<String, String> params) throws Exception {
		this._defaultClient = client;
		
		if (this._defaultClient == null) {
			this._defaultClient = new SpeakeasyHTTPClient();
		}
		
		if (security != null) {
			this._security = security;
			this._securityClient = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, this._security);
		}
		
		if (this._securityClient == null) {
			this._securityClient = this._defaultClient;
		}

		if (serverUrl != null && !serverUrl.isBlank()) {
			this._serverUrl = org.openapis.openapi.utils.Utils.templateUrl(serverUrl, params);
		}
		
		if (this._serverUrl == null) {
			this._serverUrl = SERVERS[0];
		}

		if (this._serverUrl.endsWith("/")) {
            this._serverUrl = this._serverUrl.substring(0, this._serverUrl.length() - 1);
        }

		
		
		this.assistant = new Assistant(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.bluetooth = new Bluetooth(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.deviceInfo = new DeviceInfo(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.deviceSettings = new DeviceSettings(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.staticFiles = new StaticFiles(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.wifi = new Wifi(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
	}
}