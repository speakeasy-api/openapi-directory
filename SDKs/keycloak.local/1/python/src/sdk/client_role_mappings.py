"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class ClientRoleMappings:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def delete_realm_groups_id_role_mappings_clients_client_(self, request: operations.DeleteRealmGroupsIDRoleMappingsClientsClientRequest) -> operations.DeleteRealmGroupsIDRoleMappingsClientsClientResponse:
        r"""Delete client-level roles from user role mapping"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteRealmGroupsIDRoleMappingsClientsClientRequest, base_url, '/{realm}/groups/{id}/role-mappings/clients/{client}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('DELETE', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteRealmGroupsIDRoleMappingsClientsClientResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def delete_realm_users_id_role_mappings_clients_client_(self, request: operations.DeleteRealmUsersIDRoleMappingsClientsClientRequest) -> operations.DeleteRealmUsersIDRoleMappingsClientsClientResponse:
        r"""Delete client-level roles from user role mapping"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteRealmUsersIDRoleMappingsClientsClientRequest, base_url, '/{realm}/users/{id}/role-mappings/clients/{client}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('DELETE', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteRealmUsersIDRoleMappingsClientsClientResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def get_realm_groups_id_role_mappings_clients_client_(self, request: operations.GetRealmGroupsIDRoleMappingsClientsClientRequest) -> operations.GetRealmGroupsIDRoleMappingsClientsClientResponse:
        r"""Get client-level role mappings for the user, and the app"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetRealmGroupsIDRoleMappingsClientsClientRequest, base_url, '/{realm}/groups/{id}/role-mappings/clients/{client}', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetRealmGroupsIDRoleMappingsClientsClientResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code >= 200 and http_res.status_code < 300:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.RoleRepresentation]])
                res.role_representations = out

        return res

    def get_realm_groups_id_role_mappings_clients_client_available(self, request: operations.GetRealmGroupsIDRoleMappingsClientsClientAvailableRequest) -> operations.GetRealmGroupsIDRoleMappingsClientsClientAvailableResponse:
        r"""Get available client-level roles that can be mapped to the user"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetRealmGroupsIDRoleMappingsClientsClientAvailableRequest, base_url, '/{realm}/groups/{id}/role-mappings/clients/{client}/available', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetRealmGroupsIDRoleMappingsClientsClientAvailableResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code >= 200 and http_res.status_code < 300:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.RoleRepresentation]])
                res.role_representations = out

        return res

    def get_realm_groups_id_role_mappings_clients_client_composite(self, request: operations.GetRealmGroupsIDRoleMappingsClientsClientCompositeRequest) -> operations.GetRealmGroupsIDRoleMappingsClientsClientCompositeResponse:
        r"""Get effective client-level role mappings   This recurses any composite roles"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetRealmGroupsIDRoleMappingsClientsClientCompositeRequest, base_url, '/{realm}/groups/{id}/role-mappings/clients/{client}/composite', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetRealmGroupsIDRoleMappingsClientsClientCompositeResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code >= 200 and http_res.status_code < 300:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.RoleRepresentation]])
                res.role_representations = out

        return res

    def get_realm_users_id_role_mappings_clients_client_(self, request: operations.GetRealmUsersIDRoleMappingsClientsClientRequest) -> operations.GetRealmUsersIDRoleMappingsClientsClientResponse:
        r"""Get client-level role mappings for the user, and the app"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetRealmUsersIDRoleMappingsClientsClientRequest, base_url, '/{realm}/users/{id}/role-mappings/clients/{client}', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetRealmUsersIDRoleMappingsClientsClientResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code >= 200 and http_res.status_code < 300:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.RoleRepresentation]])
                res.role_representations = out

        return res

    def get_realm_users_id_role_mappings_clients_client_available(self, request: operations.GetRealmUsersIDRoleMappingsClientsClientAvailableRequest) -> operations.GetRealmUsersIDRoleMappingsClientsClientAvailableResponse:
        r"""Get available client-level roles that can be mapped to the user"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetRealmUsersIDRoleMappingsClientsClientAvailableRequest, base_url, '/{realm}/users/{id}/role-mappings/clients/{client}/available', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetRealmUsersIDRoleMappingsClientsClientAvailableResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code >= 200 and http_res.status_code < 300:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.RoleRepresentation]])
                res.role_representations = out

        return res

    def get_realm_users_id_role_mappings_clients_client_composite(self, request: operations.GetRealmUsersIDRoleMappingsClientsClientCompositeRequest) -> operations.GetRealmUsersIDRoleMappingsClientsClientCompositeResponse:
        r"""Get effective client-level role mappings   This recurses any composite roles"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetRealmUsersIDRoleMappingsClientsClientCompositeRequest, base_url, '/{realm}/users/{id}/role-mappings/clients/{client}/composite', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetRealmUsersIDRoleMappingsClientsClientCompositeResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code >= 200 and http_res.status_code < 300:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.RoleRepresentation]])
                res.role_representations = out

        return res

    def post_realm_groups_id_role_mappings_clients_client_(self, request: operations.PostRealmGroupsIDRoleMappingsClientsClientRequest) -> operations.PostRealmGroupsIDRoleMappingsClientsClientResponse:
        r"""Add client-level roles to the user role mapping"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PostRealmGroupsIDRoleMappingsClientsClientRequest, base_url, '/{realm}/groups/{id}/role-mappings/clients/{client}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostRealmGroupsIDRoleMappingsClientsClientResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def post_realm_users_id_role_mappings_clients_client_(self, request: operations.PostRealmUsersIDRoleMappingsClientsClientRequest) -> operations.PostRealmUsersIDRoleMappingsClientsClientResponse:
        r"""Add client-level roles to the user role mapping"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PostRealmUsersIDRoleMappingsClientsClientRequest, base_url, '/{realm}/users/{id}/role-mappings/clients/{client}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostRealmUsersIDRoleMappingsClientsClientResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    