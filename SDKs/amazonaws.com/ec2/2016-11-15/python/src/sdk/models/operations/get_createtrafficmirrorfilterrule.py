"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from enum import Enum
from typing import Optional

class GETCreateTrafficMirrorFilterRuleActionEnum(str, Enum):
    CREATE_TRAFFIC_MIRROR_FILTER_RULE = 'CreateTrafficMirrorFilterRule'


@dataclasses.dataclass
class GETCreateTrafficMirrorFilterRuleDestinationPortRange:
    r"""Information about the Traffic Mirror filter rule port range."""
    
    from_port: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'FromPort' }})  
    to_port: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'ToPort' }})  
    
class GETCreateTrafficMirrorFilterRuleRuleActionEnum(str, Enum):
    r"""The action to take on the filtered traffic."""
    ACCEPT = 'accept'
    REJECT = 'reject'


@dataclasses.dataclass
class GETCreateTrafficMirrorFilterRuleSourcePortRange:
    r"""Information about the Traffic Mirror filter rule port range."""
    
    from_port: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'FromPort' }})  
    to_port: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'ToPort' }})  
    
class GETCreateTrafficMirrorFilterRuleTrafficDirectionEnum(str, Enum):
    r"""The type of traffic."""
    INGRESS = 'ingress'
    EGRESS = 'egress'

class GETCreateTrafficMirrorFilterRuleVersionEnum(str, Enum):
    TWO_THOUSAND_AND_SIXTEEN_11_15 = '2016-11-15'


@dataclasses.dataclass
class GETCreateTrafficMirrorFilterRuleRequest:
    
    action: GETCreateTrafficMirrorFilterRuleActionEnum = dataclasses.field(metadata={'query_param': { 'field_name': 'Action', 'style': 'form', 'explode': True }})  
    destination_cidr_block: str = dataclasses.field(metadata={'query_param': { 'field_name': 'DestinationCidrBlock', 'style': 'form', 'explode': True }})
    r"""The destination CIDR block to assign to the Traffic Mirror rule."""  
    rule_action: GETCreateTrafficMirrorFilterRuleRuleActionEnum = dataclasses.field(metadata={'query_param': { 'field_name': 'RuleAction', 'style': 'form', 'explode': True }})
    r"""The action to take on the filtered traffic."""  
    rule_number: int = dataclasses.field(metadata={'query_param': { 'field_name': 'RuleNumber', 'style': 'form', 'explode': True }})
    r"""The number of the Traffic Mirror rule. This number must be unique for each Traffic Mirror rule in a given direction. The rules are processed in ascending order by rule number."""  
    source_cidr_block: str = dataclasses.field(metadata={'query_param': { 'field_name': 'SourceCidrBlock', 'style': 'form', 'explode': True }})
    r"""The source CIDR block to assign to the Traffic Mirror rule."""  
    traffic_direction: GETCreateTrafficMirrorFilterRuleTrafficDirectionEnum = dataclasses.field(metadata={'query_param': { 'field_name': 'TrafficDirection', 'style': 'form', 'explode': True }})
    r"""The type of traffic."""  
    traffic_mirror_filter_id: str = dataclasses.field(metadata={'query_param': { 'field_name': 'TrafficMirrorFilterId', 'style': 'form', 'explode': True }})
    r"""The ID of the filter that this rule is associated with."""  
    version: GETCreateTrafficMirrorFilterRuleVersionEnum = dataclasses.field(metadata={'query_param': { 'field_name': 'Version', 'style': 'form', 'explode': True }})  
    client_token: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'ClientToken', 'style': 'form', 'explode': True }})
    r"""Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see <a href=\\"https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html\\">How to ensure idempotency</a>."""  
    description: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'Description', 'style': 'form', 'explode': True }})
    r"""The description of the Traffic Mirror rule."""  
    destination_port_range: Optional[GETCreateTrafficMirrorFilterRuleDestinationPortRange] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'DestinationPortRange', 'style': 'form', 'explode': True }})
    r"""The destination port range."""  
    dry_run: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'DryRun', 'style': 'form', 'explode': True }})
    r"""Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>."""  
    protocol: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'Protocol', 'style': 'form', 'explode': True }})
    r"""<p>The protocol, for example UDP, to assign to the Traffic Mirror rule.</p> <p>For information about the protocol value, see <a href=\\"https://www.iana.org/assignments/protocol-numbers/protocol-numbers.xhtml\\">Protocol Numbers</a> on the Internet Assigned Numbers Authority (IANA) website.</p>"""  
    source_port_range: Optional[GETCreateTrafficMirrorFilterRuleSourcePortRange] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'SourcePortRange', 'style': 'form', 'explode': True }})
    r"""The source port range."""  
    x_amz_algorithm: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Algorithm', 'style': 'simple', 'explode': False }})  
    x_amz_content_sha256: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Content-Sha256', 'style': 'simple', 'explode': False }})  
    x_amz_credential: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Credential', 'style': 'simple', 'explode': False }})  
    x_amz_date: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Date', 'style': 'simple', 'explode': False }})  
    x_amz_security_token: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Security-Token', 'style': 'simple', 'explode': False }})  
    x_amz_signature: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Signature', 'style': 'simple', 'explode': False }})  
    x_amz_signed_headers: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-SignedHeaders', 'style': 'simple', 'explode': False }})  
    

@dataclasses.dataclass
class GETCreateTrafficMirrorFilterRuleResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    body: Optional[bytes] = dataclasses.field(default=None)  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    