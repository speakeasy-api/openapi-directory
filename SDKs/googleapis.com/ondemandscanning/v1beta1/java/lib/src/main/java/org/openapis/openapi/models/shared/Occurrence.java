/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Occurrence - An instance of an analysis type that has been found on a resource.
 */
public class Occurrence {
    /**
     * Occurrence that represents a single "attestation". The authenticity of an attestation can be verified using the attached signature. If the verifier trusts the public key of the signer, then verifying the signature is sufficient to establish trust. In this circumstance, the authority to which this attestation is attached is primarily useful for lookup (how to find this attestation if you already know the authority and artifact to be verified) and intent (for which authority this attestation was intended to sign.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("attestation")
    public AttestationOccurrence attestation;

    public Occurrence withAttestation(AttestationOccurrence attestation) {
        this.attestation = attestation;
        return this;
    }
    
    /**
     * Details of a build occurrence.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("build")
    public BuildOccurrence build;

    public Occurrence withBuild(BuildOccurrence build) {
        this.build = build;
        return this;
    }
    
    /**
     * An indication that the compliance checks in the associated ComplianceNote were not satisfied for particular resources or a specified reason.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("compliance")
    public ComplianceOccurrence compliance;

    public Occurrence withCompliance(ComplianceOccurrence compliance) {
        this.compliance = compliance;
        return this;
    }
    
    /**
     * Output only. The time this occurrence was created.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("createTime")
    public String createTime;

    public Occurrence withCreateTime(String createTime) {
        this.createTime = createTime;
        return this;
    }
    
    /**
     * The period during which some deployable was active in a runtime.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("deployment")
    public DeploymentOccurrence deployment;

    public Occurrence withDeployment(DeploymentOccurrence deployment) {
        this.deployment = deployment;
        return this;
    }
    
    /**
     * Provides information about the analysis status of a discovered resource.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("discovery")
    public DiscoveryOccurrence discovery;

    public Occurrence withDiscovery(DiscoveryOccurrence discovery) {
        this.discovery = discovery;
        return this;
    }
    
    /**
     * Deprecated. Prefer to use a regular Occurrence, and populate the Envelope at the top level of the Occurrence.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("dsseAttestation")
    public DSSEAttestationOccurrence dsseAttestation;

    public Occurrence withDsseAttestation(DSSEAttestationOccurrence dsseAttestation) {
        this.dsseAttestation = dsseAttestation;
        return this;
    }
    
    /**
     * MUST match https://github.com/secure-systems-lab/dsse/blob/master/envelope.proto. An authenticated message of arbitrary type.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("envelope")
    public Envelope envelope;

    public Occurrence withEnvelope(Envelope envelope) {
        this.envelope = envelope;
        return this;
    }
    
    /**
     * Details of the derived image portion of the DockerImage relationship. This image would be produced from a Dockerfile with FROM .
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("image")
    public ImageOccurrence image;

    public Occurrence withImage(ImageOccurrence image) {
        this.image = image;
        return this;
    }
    
    /**
     * Output only. This explicitly denotes which of the occurrence details are specified. This field can be used as a filter in list requests.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("kind")
    public OccurrenceKindEnum kind;

    public Occurrence withKind(OccurrenceKindEnum kind) {
        this.kind = kind;
        return this;
    }
    
    /**
     * Output only. The name of the occurrence in the form of `projects/[PROJECT_ID]/occurrences/[OCCURRENCE_ID]`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    public String name;

    public Occurrence withName(String name) {
        this.name = name;
        return this;
    }
    
    /**
     * Required. Immutable. The analysis note associated with this occurrence, in the form of `projects/[PROVIDER_ID]/notes/[NOTE_ID]`. This field can be used as a filter in list requests.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("noteName")
    public String noteName;

    public Occurrence withNoteName(String noteName) {
        this.noteName = noteName;
        return this;
    }
    
    /**
     * Details on how a particular software package was installed on a system.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("package")
    public PackageOccurrence package_;

    public Occurrence withPackage(PackageOccurrence package_) {
        this.package_ = package_;
        return this;
    }
    
    /**
     * A description of actions that can be taken to remedy the note.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("remediation")
    public String remediation;

    public Occurrence withRemediation(String remediation) {
        this.remediation = remediation;
        return this;
    }
    
    /**
     * Required. Immutable. A URI that represents the resource for which the occurrence applies. For example, `https://gcr.io/project/image@sha256:123abc` for a Docker image.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("resourceUri")
    public String resourceUri;

    public Occurrence withResourceUri(String resourceUri) {
        this.resourceUri = resourceUri;
        return this;
    }
    
    /**
     * The occurrence representing an SBOM reference as applied to a specific resource. The occurrence follows the DSSE specification. See https://github.com/secure-systems-lab/dsse/blob/master/envelope.md for more details.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sbomReference")
    public SBOMReferenceOccurrence sbomReference;

    public Occurrence withSbomReference(SBOMReferenceOccurrence sbomReference) {
        this.sbomReference = sbomReference;
        return this;
    }
    
    /**
     * Output only. The time this occurrence was last updated.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("updateTime")
    public String updateTime;

    public Occurrence withUpdateTime(String updateTime) {
        this.updateTime = updateTime;
        return this;
    }
    
    /**
     * An Upgrade Occurrence represents that a specific resource_url could install a specific upgrade. This presence is supplied via local sources (i.e. it is present in the mirror and the running system has noticed its availability). For Windows, both distribution and windows_update contain information for the Windows update.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("upgrade")
    public UpgradeOccurrence upgrade;

    public Occurrence withUpgrade(UpgradeOccurrence upgrade) {
        this.upgrade = upgrade;
        return this;
    }
    
    /**
     * An occurrence of a severity vulnerability on a resource.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("vulnerability")
    public VulnerabilityOccurrence vulnerability;

    public Occurrence withVulnerability(VulnerabilityOccurrence vulnerability) {
        this.vulnerability = vulnerability;
        return this;
    }
    
    public Occurrence(){}
}
