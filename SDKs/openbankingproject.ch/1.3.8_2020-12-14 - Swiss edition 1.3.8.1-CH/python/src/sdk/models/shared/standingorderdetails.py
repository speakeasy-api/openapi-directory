"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import amount as shared_amount
from ..shared import dayofexecution_enum as shared_dayofexecution_enum
from ..shared import executionrule_enum as shared_executionrule_enum
from ..shared import frequencycode_enum as shared_frequencycode_enum
from ..shared import monthsofexecution_enum as shared_monthsofexecution_enum
from dataclasses_json import Undefined, dataclass_json
from datetime import date
from marshmallow import fields
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class StandingOrderDetails:
    r"""Details of underlying standing orders."""
    
    frequency: shared_frequencycode_enum.FrequencyCodeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('frequency') }})
    r"""The following codes from the \\"EventFrequency7Code\\" of ISO 20022 are supported:
    - \"Daily\"
    - \"Weekly\"
    - \"EveryTwoWeeks\"
    - \"Monthly\"
    - \"EveryTwoMonths\"
    - \"Quarterly\"
    - \"SemiAnnual\"
    - \"Annual\"
    - \"MonthlyVariable\" 
    """  
    start_date: date = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('startDate'), 'encoder': utils.dateisoformat(False), 'decoder': utils.datefromisoformat, 'mm_field': fields.DateTime(format='iso') }})
    r"""The first applicable day of execution starting from this date is the first payment."""  
    day_of_execution: Optional[shared_dayofexecution_enum.DayOfExecutionEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dayOfExecution'), 'exclude': lambda f: f is None }})
    r"""Day of execution as string.
    
    This string consists of up two characters.
    Leading zeroes are not allowed.
    
    31 is ultimo of the month.
    """  
    end_date: Optional[date] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('endDate'), 'encoder': utils.dateisoformat(True), 'decoder': utils.datefromisoformat, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""The last applicable day of execution.
    If not given, it is an infinite standing order.
    """  
    execution_rule: Optional[shared_executionrule_enum.ExecutionRuleEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('executionRule'), 'exclude': lambda f: f is None }})
    r"""\\"following\\" or \\"preceding\\" supported as values.
    This data attribute defines the behaviour when recurring payment dates falls on a weekend or bank holiday.
    The payment is then executed either the \"preceding\" or \"following\" working day.
    ASPSP might reject the request due to the communicated value, if rules in Online-Banking are not supporting
    this execution rule.
    """  
    limit_amount: Optional[shared_amount.Amount] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('limitAmount'), 'exclude': lambda f: f is None }})  
    months_of_execution: Optional[list[shared_monthsofexecution_enum.MonthsOfExecutionEnum]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('monthsOfExecution'), 'exclude': lambda f: f is None }})
    r"""The format is following the regular expression \d{1,2}.
    The array is restricted to 11 entries. 
    The values contained in the array entries shall all be different and the maximum value of one entry is 12.
    This attribute is contained if and only if the frequency equals \"MonthlyVariable\".
    Example: An execution on January, April and October each year is addressed by [\"1\", \"4\", \"10\"].
    """  
    multiplicator: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('multiplicator'), 'exclude': lambda f: f is None }})
    r"""This is multiplying the given frequency resulting the exact frequency,
    e.g. Frequency=weekly and multiplicator=3 means every 3 weeks.
    Remark: This attribute is rarely supported in the market.
    """  
    within_a_month_flag: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('withinAMonthFlag'), 'exclude': lambda f: f is None }})
    r"""This element is only used in case of frequency equals \\"Monthly\\".
    
    If this element equals false it has no effect.
    If this element equals true, then the execution rule is overruled if the day of execution would fall into a different month using the execution rule.
    
    Example: executionRule equals \"preceding\", dayOfExecution equals \"02\" and the second of a month is a Sunday. 
    In this case, the transaction date would be on the last day of the month before.
     This would be overruled if withinAMonthFlag equals true and the payment is processed on Monday the third of the Month.
    Remark: This attribute is rarely supported in the market.
    """  
    