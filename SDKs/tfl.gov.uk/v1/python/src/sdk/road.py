"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Any, Optional

class Road:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def road_disrupted_streets(self, request: operations.RoadDisruptedStreetsRequest) -> operations.RoadDisruptedStreetsResponse:
        r"""Gets a list of disrupted streets. If no date filters are provided, current disruptions are returned."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/Road/all/Street/Disruption'
        
        query_params = utils.get_query_params(operations.RoadDisruptedStreetsRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.RoadDisruptedStreetsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.system_object = out
            if utils.match_content_type(content_type, 'text/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.system_object = out
            if utils.match_content_type(content_type, 'application/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content

        return res

    def road_disruption(self, request: operations.RoadDisruptionRequest) -> operations.RoadDisruptionResponse:
        r"""Get active disruptions, filtered by road ids"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.RoadDisruptionRequest, base_url, '/Road/{ids}/Disruption', request)
        
        query_params = utils.get_query_params(operations.RoadDisruptionRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.RoadDisruptionResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/geo+json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.TflAPIPresentationEntitiesRoadDisruption]])
                res.tfl_api_presentation_entities_road_disruptions = out
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.TflAPIPresentationEntitiesRoadDisruption]])
                res.tfl_api_presentation_entities_road_disruptions = out
            if utils.match_content_type(content_type, 'text/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.TflAPIPresentationEntitiesRoadDisruption]])
                res.tfl_api_presentation_entities_road_disruptions = out
            if utils.match_content_type(content_type, 'application/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content

        return res

    def road_disruption_by_id(self, request: operations.RoadDisruptionByIDRequest) -> operations.RoadDisruptionByIDResponse:
        r"""Gets a list of active disruptions filtered by disruption Ids."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.RoadDisruptionByIDRequest, base_url, '/Road/all/Disruption/{disruptionIds}', request)
        
        query_params = utils.get_query_params(operations.RoadDisruptionByIDRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.RoadDisruptionByIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/geo+json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.TflAPIPresentationEntitiesRoadDisruption])
                res.tfl_api_presentation_entities_road_disruption = out
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.TflAPIPresentationEntitiesRoadDisruption])
                res.tfl_api_presentation_entities_road_disruption = out
            if utils.match_content_type(content_type, 'text/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.TflAPIPresentationEntitiesRoadDisruption])
                res.tfl_api_presentation_entities_road_disruption = out
            if utils.match_content_type(content_type, 'application/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content

        return res

    def road_get(self) -> operations.RoadGetResponse:
        r"""Gets all roads managed by TfL"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/Road'
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.RoadGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.TflAPIPresentationEntitiesRoadCorridor]])
                res.tfl_api_presentation_entities_road_corridors = out
            if utils.match_content_type(content_type, 'text/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.TflAPIPresentationEntitiesRoadCorridor]])
                res.tfl_api_presentation_entities_road_corridors = out
            if utils.match_content_type(content_type, 'application/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content

        return res

    def road_meta_categories(self) -> operations.RoadMetaCategoriesResponse:
        r"""Gets a list of valid RoadDisruption categories"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/Road/Meta/Categories'
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.RoadMetaCategoriesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[str]])
                res.road_meta_categories_200_application_json_strings = out
            if utils.match_content_type(content_type, 'application/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[str]])
                res.road_meta_categories_200_text_json_strings = out

        return res

    def road_meta_severities(self) -> operations.RoadMetaSeveritiesResponse:
        r"""Gets a list of valid RoadDisruption severity codes"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/Road/Meta/Severities'
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.RoadMetaSeveritiesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.TflAPIPresentationEntitiesStatusSeverity]])
                res.tfl_api_presentation_entities_status_severities = out
            if utils.match_content_type(content_type, 'text/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.TflAPIPresentationEntitiesStatusSeverity]])
                res.tfl_api_presentation_entities_status_severities = out
            if utils.match_content_type(content_type, 'application/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content

        return res

    def road_status(self, request: operations.RoadStatusRequest) -> operations.RoadStatusResponse:
        r"""Gets the specified roads with the status aggregated over the date range specified, or now until the end of today if no dates are passed."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.RoadStatusRequest, base_url, '/Road/{ids}/Status', request)
        
        query_params = utils.get_query_params(operations.RoadStatusRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.RoadStatusResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.TflAPIPresentationEntitiesRoadCorridor]])
                res.tfl_api_presentation_entities_road_corridors = out
            if utils.match_content_type(content_type, 'text/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.TflAPIPresentationEntitiesRoadCorridor]])
                res.tfl_api_presentation_entities_road_corridors = out
            if utils.match_content_type(content_type, 'application/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content

        return res

    def get_road_ids_(self, request: operations.GetRoadIdsRequest) -> operations.GetRoadIdsResponse:
        r"""Gets the road with the specified id (e.g. A1)"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetRoadIdsRequest, base_url, '/Road/{ids}', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetRoadIdsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.TflAPIPresentationEntitiesRoadCorridor]])
                res.tfl_api_presentation_entities_road_corridors = out
            if utils.match_content_type(content_type, 'text/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.TflAPIPresentationEntitiesRoadCorridor]])
                res.tfl_api_presentation_entities_road_corridors = out
            if utils.match_content_type(content_type, 'application/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content

        return res

    