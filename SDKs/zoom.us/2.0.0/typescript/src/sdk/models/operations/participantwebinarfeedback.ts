/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { AxiosResponse } from "axios";
import { Expose, Transform, Type } from "class-transformer";

/**
 * Specify a value to get the response for the corresponding meeting type. The value of this field can be one of the following:<br> <br>`past` - Meeting that already occurred in the specified date range.<br>`pastOne` - Past meetings that were attended by only one user. <br>`live` - Live meetings.<br><br>
 *
 * @remarks
 *
 * If you do not provide this field, the default value will be `live` and thus, the API will only query responses for live meetings.
 */
export enum ParticipantWebinarFeedbackTypeEnum {
  Past = "past",
  PastOne = "pastOne",
  Live = "live",
}

export class ParticipantWebinarFeedbackRequest extends SpeakeasyBase {
  /**
   * The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=next_page_token",
  })
  nextPageToken?: string;

  /**
   * The number of records returned within a single API call.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=page_size",
  })
  pageSize?: number;

  /**
   * Specify a value to get the response for the corresponding meeting type. The value of this field can be one of the following:<br> <br>`past` - Meeting that already occurred in the specified date range.<br>`pastOne` - Past meetings that were attended by only one user. <br>`live` - Live meetings.<br><br>
   *
   * @remarks
   *
   * If you do not provide this field, the default value will be `live` and thus, the API will only query responses for live meetings.
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=type" })
  type?: ParticipantWebinarFeedbackTypeEnum;

  /**
   * The webinar ID or the webinar UUID.  If a webinar ID is provided in the request instead of a UUID, the response will be for the latest webinar instance.
   *
   * @remarks
   *
   * If a UUID starts with "/" or contains "//" (example: "/ajXp112QmuoKj4854875==\"), you must **double encode** the UUID before making an API request.
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=webinarId",
  })
  webinarId: string;
}

/**
 * Feedback submitted by the participant.
 *
 * @remarks
 *
 * * `GOOD`: Thumbs up.
 * * `NOT GOOD`: Thumbs down.
 */
export enum ParticipantWebinarFeedback200ApplicationXMLParticipantsQualityEnum {
  Good = "GOOD",
  NotGood = "NOT GOOD",
}

export class ParticipantWebinarFeedback200ApplicationXMLParticipants extends SpeakeasyBase {
  /**
   * Date and time at which the feedback was submitted.
   */
  @SpeakeasyMetadata()
  dateTime?: Date;

  /**
   * Email address of the participant.
   */
  @SpeakeasyMetadata()
  email?: string;

  /**
   * Feedback submitted by the participant.
   *
   * @remarks
   *
   * * `GOOD`: Thumbs up.
   * * `NOT GOOD`: Thumbs down.
   */
  @SpeakeasyMetadata()
  quality?: ParticipantWebinarFeedback200ApplicationXMLParticipantsQualityEnum;

  /**
   * User ID of the participant.
   */
  @SpeakeasyMetadata()
  userId?: string;
}

/**
 * **HTTP Status Code:** `200`<br>
 *
 * @remarks
 *
 *
 */
export class ParticipantWebinarFeedback200ApplicationXML extends SpeakeasyBase {
  /**
   * The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes.
   */
  @SpeakeasyMetadata()
  nextPageToken?: string;

  /**
   * The number of records returned within a single API call.
   */
  @SpeakeasyMetadata()
  pageSize?: number;

  @SpeakeasyMetadata({
    elemType: ParticipantWebinarFeedback200ApplicationXMLParticipants,
  })
  participants?: ParticipantWebinarFeedback200ApplicationXMLParticipants[];
}

/**
 * Feedback submitted by the participant.
 *
 * @remarks
 *
 * * `GOOD`: Thumbs up.
 * * `NOT GOOD`: Thumbs down.
 */
export enum ParticipantWebinarFeedback200ApplicationJSONParticipantsQualityEnum {
  Good = "GOOD",
  NotGood = "NOT GOOD",
}

export class ParticipantWebinarFeedback200ApplicationJSONParticipants extends SpeakeasyBase {
  /**
   * Date and time at which the feedback was submitted.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "date_time" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  dateTime?: Date;

  /**
   * Email address of the participant.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "email" })
  email?: string;

  /**
   * Feedback submitted by the participant.
   *
   * @remarks
   *
   * * `GOOD`: Thumbs up.
   * * `NOT GOOD`: Thumbs down.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "quality" })
  quality?: ParticipantWebinarFeedback200ApplicationJSONParticipantsQualityEnum;

  /**
   * User ID of the participant.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "user_id" })
  userId?: string;
}

/**
 * **HTTP Status Code:** `200`<br>
 *
 * @remarks
 *
 *
 */
export class ParticipantWebinarFeedback200ApplicationJSON extends SpeakeasyBase {
  /**
   * The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "next_page_token" })
  nextPageToken?: string;

  /**
   * The number of records returned within a single API call.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "page_size" })
  pageSize?: number;

  @SpeakeasyMetadata({
    elemType: ParticipantWebinarFeedback200ApplicationJSONParticipants,
  })
  @Expose({ name: "participants" })
  @Type(() => ParticipantWebinarFeedback200ApplicationJSONParticipants)
  participants?: ParticipantWebinarFeedback200ApplicationJSONParticipants[];
}

export class ParticipantWebinarFeedbackResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  body?: Uint8Array;

  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * **HTTP Status Code:** `200`<br>
   *
   * @remarks
   *
   *
   */
  @SpeakeasyMetadata()
  participantWebinarFeedback200ApplicationJSONObject?: ParticipantWebinarFeedback200ApplicationJSON;
}
