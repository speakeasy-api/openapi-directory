"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import caseexpression as shared_caseexpression
from ..shared import concatenateexpression as shared_concatenateexpression
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class DimensionExpression:
    r"""Used to express a dimension which is the result of a formula of multiple dimensions. Example usages: 1) lower_case(dimension) 2) concatenate(dimension1, symbol, dimension2)."""
    
    concatenate: Optional[shared_concatenateexpression.ConcatenateExpression] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('concatenate'), 'exclude': lambda f: f is None }})
    r"""Used to combine dimension values to a single dimension."""  
    lower_case: Optional[shared_caseexpression.CaseExpression] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lowerCase'), 'exclude': lambda f: f is None }})
    r"""Used to convert a dimension value to a single case."""  
    upper_case: Optional[shared_caseexpression.CaseExpression] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('upperCase'), 'exclude': lambda f: f is None }})
    r"""Used to convert a dimension value to a single case."""  
    