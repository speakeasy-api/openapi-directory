// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// CreateImageBuilderStreamingURLXAmzTargetEnum
type CreateImageBuilderStreamingURLXAmzTargetEnum string

const (
	CreateImageBuilderStreamingURLXAmzTargetEnumPhotonAdminProxyServiceCreateImageBuilderStreamingURL CreateImageBuilderStreamingURLXAmzTargetEnum = "PhotonAdminProxyService.CreateImageBuilderStreamingURL"
)

func (e CreateImageBuilderStreamingURLXAmzTargetEnum) ToPointer() *CreateImageBuilderStreamingURLXAmzTargetEnum {
	return &e
}

func (e *CreateImageBuilderStreamingURLXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "PhotonAdminProxyService.CreateImageBuilderStreamingURL":
		*e = CreateImageBuilderStreamingURLXAmzTargetEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateImageBuilderStreamingURLXAmzTargetEnum: %v", v)
	}
}

type CreateImageBuilderStreamingURLRequest struct {
	CreateImageBuilderStreamingURLRequest shared.CreateImageBuilderStreamingURLRequest `request:"mediaType=application/json"`
	XAmzAlgorithm                         *string                                      `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256                     *string                                      `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential                        *string                                      `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate                              *string                                      `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken                     *string                                      `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature                         *string                                      `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders                     *string                                      `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget                            CreateImageBuilderStreamingURLXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type CreateImageBuilderStreamingURLResponse struct {
	ContentType string
	// Success
	CreateImageBuilderStreamingURLResult *shared.CreateImageBuilderStreamingURLResult
	// OperationNotPermittedException
	OperationNotPermittedException interface{}
	StatusCode                     int
	RawResponse                    *http.Response
	// ResourceNotFoundException
	ResourceNotFoundException interface{}
}
