"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import entitytypes_enum as shared_entitytypes_enum
from ..shared import httpvalidationerror as shared_httpvalidationerror
from ..shared import openaqresult as shared_openaqresult
from ..shared import sensortypes_enum as shared_sensortypes_enum
from enum import Enum
from typing import Any, Optional

class LocationsGetV2LocationsGetOrderByLocationsOrderEnum(str, Enum):
    r"""An enumeration."""
    CITY = 'city'
    COUNTRY = 'country'
    LOCATION = 'location'
    SOURCE_NAME = 'sourceName'
    FIRST_UPDATED = 'firstUpdated'
    LAST_UPDATED = 'lastUpdated'
    COUNT = 'count'
    RANDOM = 'random'

class LocationsGetV2LocationsGetSortSortEnum(str, Enum):
    r"""An enumeration."""
    ASC = 'asc'
    DESC = 'desc'


@dataclasses.dataclass
class LocationsGetV2LocationsGetRequest:
    
    city: Optional[list[str]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'city', 'style': 'form', 'explode': True }})
    r"""Limit results by a certain city or cities.
            (ex. ?city=Chicago or ?city=Chicago&city=Boston)
    """  
    coordinates: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'coordinates', 'style': 'form', 'explode': True }})  
    country: Optional[list[str]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'country', 'style': 'form', 'explode': True }})
    r"""Limit results by a certain country using two letter country code.
            (ex. ?country=US or ?country=US&country=MX)
    """  
    country_id: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'country_id', 'style': 'form', 'explode': True }})
    r"""Limit results by a certain country using two letter country code.
            (ex. /US)
    """  
    dump_raw: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'dumpRaw', 'style': 'form', 'explode': True }})  
    entity: Optional[shared_entitytypes_enum.EntityTypesEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'entity', 'style': 'form', 'explode': True }})
    r"""Source entity type."""  
    has_geo: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'has_geo', 'style': 'form', 'explode': True }})  
    is_analysis: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'isAnalysis', 'style': 'form', 'explode': True }})
    r"""Data is the product of a previous analysis/aggregation and not raw measurements"""  
    is_mobile: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'isMobile', 'style': 'form', 'explode': True }})
    r"""Location is mobile"""  
    limit: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'limit', 'style': 'form', 'explode': True }})
    r"""Change the number of results returned."""  
    location: Optional[list[Any]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'location', 'style': 'form', 'explode': True }})  
    location_id: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'location_id', 'style': 'form', 'explode': True }})  
    manufacturer_name: Optional[list[str]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'manufacturerName', 'style': 'form', 'explode': True }})
    r"""Manufacturer of Sensor"""  
    model_name: Optional[list[str]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'modelName', 'style': 'form', 'explode': True }})
    r"""Model Name of Sensor"""  
    offset: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'offset', 'style': 'form', 'explode': True }})  
    order_by: Optional[LocationsGetV2LocationsGetOrderByLocationsOrderEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'order_by', 'style': 'form', 'explode': True }})
    r"""Order by a field"""  
    page: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'page', 'style': 'form', 'explode': True }})
    r"""Paginate through results."""  
    parameter: Optional[list[Any]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'parameter', 'style': 'form', 'explode': True }})  
    parameter_id: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'parameter_id', 'style': 'form', 'explode': True }})  
    radius: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'radius', 'style': 'form', 'explode': True }})  
    sensor_type: Optional[shared_sensortypes_enum.SensorTypesEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'sensorType', 'style': 'form', 'explode': True }})
    r"""Type of Sensor"""  
    sort: Optional[LocationsGetV2LocationsGetSortSortEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'sort', 'style': 'form', 'explode': True }})
    r"""Sort Direction"""  
    source_name: Optional[list[str]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'sourceName', 'style': 'form', 'explode': True }})
    r"""Name of the data source"""  
    unit: Optional[list[str]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'unit', 'style': 'form', 'explode': True }})  
    

@dataclasses.dataclass
class LocationsGetV2LocationsGetResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    http_validation_error: Optional[shared_httpvalidationerror.HTTPValidationError] = dataclasses.field(default=None)
    r"""Validation Error"""  
    open_aq_result: Optional[shared_openaqresult.OpenAQResult] = dataclasses.field(default=None)
    r"""Successful Response"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    