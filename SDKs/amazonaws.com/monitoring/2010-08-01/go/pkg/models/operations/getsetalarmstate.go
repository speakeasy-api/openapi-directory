// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// GETSetAlarmStateActionEnum
type GETSetAlarmStateActionEnum string

const (
	GETSetAlarmStateActionEnumSetAlarmState GETSetAlarmStateActionEnum = "SetAlarmState"
)

func (e *GETSetAlarmStateActionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "SetAlarmState":
		*e = GETSetAlarmStateActionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GETSetAlarmStateActionEnum: %s", s)
	}
}

// GETSetAlarmStateStateValueEnum - The value of the state.
type GETSetAlarmStateStateValueEnum string

const (
	GETSetAlarmStateStateValueEnumOk               GETSetAlarmStateStateValueEnum = "OK"
	GETSetAlarmStateStateValueEnumAlarm            GETSetAlarmStateStateValueEnum = "ALARM"
	GETSetAlarmStateStateValueEnumInsufficientData GETSetAlarmStateStateValueEnum = "INSUFFICIENT_DATA"
)

func (e *GETSetAlarmStateStateValueEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "OK":
		fallthrough
	case "ALARM":
		fallthrough
	case "INSUFFICIENT_DATA":
		*e = GETSetAlarmStateStateValueEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GETSetAlarmStateStateValueEnum: %s", s)
	}
}

// GETSetAlarmStateVersionEnum
type GETSetAlarmStateVersionEnum string

const (
	GETSetAlarmStateVersionEnumTwoThousandAndTen0801 GETSetAlarmStateVersionEnum = "2010-08-01"
)

func (e *GETSetAlarmStateVersionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "2010-08-01":
		*e = GETSetAlarmStateVersionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GETSetAlarmStateVersionEnum: %s", s)
	}
}

type GETSetAlarmStateRequest struct {
	Action GETSetAlarmStateActionEnum `queryParam:"style=form,explode=true,name=Action"`
	// The name of the alarm.
	AlarmName string `queryParam:"style=form,explode=true,name=AlarmName"`
	// The reason that this alarm is set to this specific state, in text format.
	StateReason string `queryParam:"style=form,explode=true,name=StateReason"`
	// <p>The reason that this alarm is set to this specific state, in JSON format.</p> <p>For SNS or EC2 alarm actions, this is just informational. But for EC2 Auto Scaling or application Auto Scaling alarm actions, the Auto Scaling policy uses the information in this field to take the correct action.</p>
	StateReasonData *string `queryParam:"style=form,explode=true,name=StateReasonData"`
	// The value of the state.
	StateValue        GETSetAlarmStateStateValueEnum `queryParam:"style=form,explode=true,name=StateValue"`
	Version           GETSetAlarmStateVersionEnum    `queryParam:"style=form,explode=true,name=Version"`
	XAmzAlgorithm     *string                        `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string                        `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string                        `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string                        `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string                        `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string                        `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string                        `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
}

type GETSetAlarmStateResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
