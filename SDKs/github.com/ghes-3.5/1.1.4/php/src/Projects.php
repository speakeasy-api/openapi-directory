<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Projects 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Add project collaborator
     * 
     * Adds a collaborator to an organization project and sets their permission level. You must be an organization owner or a project `admin` to add a collaborator.
     * https://docs.github.com/enterprise-server@3.5/rest/reference/projects#add-project-collaborator - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ProjectsAddCollaboratorRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ProjectsAddCollaboratorResponse
     * @see https://docs.github.com/enterprise-server@3.5/rest/reference/projects#add-project-collaborator
     */
	public function projectsAddCollaborator(
        \OpenAPI\OpenAPI\Models\Operations\ProjectsAddCollaboratorRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ProjectsAddCollaboratorResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project_id}/collaborators/{username}', \OpenAPI\OpenAPI\Models\Operations\ProjectsAddCollaboratorRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ProjectsAddCollaboratorResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204 or $httpResponse->getStatusCode() === 304) {
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->basicError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BasicError', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 422) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->validationError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ValidationError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create a project card
     * 
     * https://docs.github.com/enterprise-server@3.5/rest/reference/projects#create-a-project-card - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ProjectsCreateCardRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ProjectsCreateCardResponse
     * @see https://docs.github.com/enterprise-server@3.5/rest/reference/projects#create-a-project-card
     */
	public function projectsCreateCard(
        \OpenAPI\OpenAPI\Models\Operations\ProjectsCreateCardRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ProjectsCreateCardResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/columns/{column_id}/cards', \OpenAPI\OpenAPI\Models\Operations\ProjectsCreateCardRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ProjectsCreateCardResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->projectCard = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ProjectCard', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 304) {
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->basicError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BasicError', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 422) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->projectsCreateCard422ApplicationJSONOneOf = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 503) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->projectsCreateCard503ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ProjectsCreateCard503ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create a project column
     * 
     * https://docs.github.com/enterprise-server@3.5/rest/reference/projects#create-a-project-column - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ProjectsCreateColumnRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ProjectsCreateColumnResponse
     * @see https://docs.github.com/enterprise-server@3.5/rest/reference/projects#create-a-project-column
     */
	public function projectsCreateColumn(
        \OpenAPI\OpenAPI\Models\Operations\ProjectsCreateColumnRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ProjectsCreateColumnResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project_id}/columns', \OpenAPI\OpenAPI\Models\Operations\ProjectsCreateColumnRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ProjectsCreateColumnResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->projectColumn = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ProjectColumn', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 304) {
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->basicError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BasicError', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 422) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->validationErrorSimple = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ValidationErrorSimple', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create a user project
     * 
     * Creates a user project board. Returns a `410 Gone` status if the user does not have existing classic projects. If you do not have sufficient privileges to perform this action, a `401 Unauthorized` or `410 Gone` status is returned.
     * https://docs.github.com/enterprise-server@3.5/rest/reference/projects#create-a-user-project - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ProjectsCreateForAuthenticatedUserRequestBody $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ProjectsCreateForAuthenticatedUserResponse
     * @see https://docs.github.com/enterprise-server@3.5/rest/reference/projects#create-a-user-project
     */
	public function projectsCreateForAuthenticatedUser(
        \OpenAPI\OpenAPI\Models\Operations\ProjectsCreateForAuthenticatedUserRequestBody $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ProjectsCreateForAuthenticatedUserResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/user/projects');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ProjectsCreateForAuthenticatedUserResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->project = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Project', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 304) {
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->basicError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BasicError', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 422) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->validationErrorSimple = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ValidationErrorSimple', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create an organization project
     * 
     * Creates an organization project board. Returns a `410 Gone` status if projects are disabled in the organization or if the organization does not have existing classic projects. If you do not have sufficient privileges to perform this action, a `401 Unauthorized` or `410 Gone` status is returned.
     * https://docs.github.com/enterprise-server@3.5/rest/reference/projects#create-an-organization-project - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ProjectsCreateForOrgRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ProjectsCreateForOrgResponse
     * @see https://docs.github.com/enterprise-server@3.5/rest/reference/projects#create-an-organization-project
     */
	public function projectsCreateForOrg(
        \OpenAPI\OpenAPI\Models\Operations\ProjectsCreateForOrgRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ProjectsCreateForOrgResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/orgs/{org}/projects', \OpenAPI\OpenAPI\Models\Operations\ProjectsCreateForOrgRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ProjectsCreateForOrgResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->project = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Project', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 410) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->basicError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BasicError', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 422) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->validationErrorSimple = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ValidationErrorSimple', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create a repository project
     * 
     * Creates a repository project board. Returns a `410 Gone` status if projects are disabled in the repository or if the repository does not have existing classic projects. If you do not have sufficient privileges to perform this action, a `401 Unauthorized` or `410 Gone` status is returned.
     * https://docs.github.com/enterprise-server@3.5/rest/reference/projects#create-a-repository-project - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ProjectsCreateForRepoRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ProjectsCreateForRepoResponse
     * @see https://docs.github.com/enterprise-server@3.5/rest/reference/projects#create-a-repository-project
     */
	public function projectsCreateForRepo(
        \OpenAPI\OpenAPI\Models\Operations\ProjectsCreateForRepoRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ProjectsCreateForRepoResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/repos/{owner}/{repo}/projects', \OpenAPI\OpenAPI\Models\Operations\ProjectsCreateForRepoRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ProjectsCreateForRepoResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->project = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Project', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 410) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->basicError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BasicError', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 422) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->validationErrorSimple = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ValidationErrorSimple', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Delete a project
     * 
     * Deletes a project board. Returns a `404 Not Found` status if projects are disabled.
     * https://docs.github.com/enterprise-server@3.5/rest/reference/projects#delete-a-project - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ProjectsDeleteRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ProjectsDeleteResponse
     * @see https://docs.github.com/enterprise-server@3.5/rest/reference/projects#delete-a-project
     */
	public function projectsDelete(
        \OpenAPI\OpenAPI\Models\Operations\ProjectsDeleteRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ProjectsDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project_id}', \OpenAPI\OpenAPI\Models\Operations\ProjectsDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ProjectsDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204 or $httpResponse->getStatusCode() === 304) {
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 410) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->basicError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BasicError', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 403) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->projectsDelete403ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ProjectsDelete403ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Delete a project card
     * 
     * https://docs.github.com/enterprise-server@3.5/rest/reference/projects#delete-a-project-card - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ProjectsDeleteCardRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ProjectsDeleteCardResponse
     * @see https://docs.github.com/enterprise-server@3.5/rest/reference/projects#delete-a-project-card
     */
	public function projectsDeleteCard(
        \OpenAPI\OpenAPI\Models\Operations\ProjectsDeleteCardRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ProjectsDeleteCardResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/columns/cards/{card_id}', \OpenAPI\OpenAPI\Models\Operations\ProjectsDeleteCardRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ProjectsDeleteCardResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204 or $httpResponse->getStatusCode() === 304) {
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->basicError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BasicError', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 403) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->projectsDeleteCard403ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ProjectsDeleteCard403ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Delete a project column
     * 
     * https://docs.github.com/enterprise-server@3.5/rest/reference/projects#delete-a-project-column - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ProjectsDeleteColumnRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ProjectsDeleteColumnResponse
     * @see https://docs.github.com/enterprise-server@3.5/rest/reference/projects#delete-a-project-column
     */
	public function projectsDeleteColumn(
        \OpenAPI\OpenAPI\Models\Operations\ProjectsDeleteColumnRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ProjectsDeleteColumnResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/columns/{column_id}', \OpenAPI\OpenAPI\Models\Operations\ProjectsDeleteColumnRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ProjectsDeleteColumnResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204 or $httpResponse->getStatusCode() === 304) {
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->basicError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BasicError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get a project
     * 
     * Gets a project by its `id`. Returns a `404 Not Found` status if projects are disabled. If you do not have sufficient privileges to perform this action, a `401 Unauthorized` or `410 Gone` status is returned.
     * https://docs.github.com/enterprise-server@3.5/rest/reference/projects#get-a-project - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ProjectsGetRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ProjectsGetResponse
     * @see https://docs.github.com/enterprise-server@3.5/rest/reference/projects#get-a-project
     */
	public function projectsGet(
        \OpenAPI\OpenAPI\Models\Operations\ProjectsGetRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ProjectsGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project_id}', \OpenAPI\OpenAPI\Models\Operations\ProjectsGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ProjectsGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->project = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Project', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 304) {
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->basicError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BasicError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get a project card
     * 
     * https://docs.github.com/enterprise-server@3.5/rest/reference/projects#get-a-project-card - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ProjectsGetCardRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ProjectsGetCardResponse
     * @see https://docs.github.com/enterprise-server@3.5/rest/reference/projects#get-a-project-card
     */
	public function projectsGetCard(
        \OpenAPI\OpenAPI\Models\Operations\ProjectsGetCardRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ProjectsGetCardResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/columns/cards/{card_id}', \OpenAPI\OpenAPI\Models\Operations\ProjectsGetCardRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ProjectsGetCardResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->projectCard = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ProjectCard', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 304) {
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->basicError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BasicError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get a project column
     * 
     * https://docs.github.com/enterprise-server@3.5/rest/reference/projects#get-a-project-column - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ProjectsGetColumnRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ProjectsGetColumnResponse
     * @see https://docs.github.com/enterprise-server@3.5/rest/reference/projects#get-a-project-column
     */
	public function projectsGetColumn(
        \OpenAPI\OpenAPI\Models\Operations\ProjectsGetColumnRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ProjectsGetColumnResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/columns/{column_id}', \OpenAPI\OpenAPI\Models\Operations\ProjectsGetColumnRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ProjectsGetColumnResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->projectColumn = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ProjectColumn', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 304) {
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->basicError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BasicError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get project permission for a user
     * 
     * Returns the collaborator's permission level for an organization project. Possible values for the `permission` key: `admin`, `write`, `read`, `none`. You must be an organization owner or a project `admin` to review a user's permission level.
     * https://docs.github.com/enterprise-server@3.5/rest/reference/projects#get-project-permission-for-a-user - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ProjectsGetPermissionForUserRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ProjectsGetPermissionForUserResponse
     * @see https://docs.github.com/enterprise-server@3.5/rest/reference/projects#get-project-permission-for-a-user
     */
	public function projectsGetPermissionForUser(
        \OpenAPI\OpenAPI\Models\Operations\ProjectsGetPermissionForUserRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ProjectsGetPermissionForUserResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project_id}/collaborators/{username}/permission', \OpenAPI\OpenAPI\Models\Operations\ProjectsGetPermissionForUserRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ProjectsGetPermissionForUserResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->projectCollaboratorPermission = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ProjectCollaboratorPermission', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 304) {
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->basicError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BasicError', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 422) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->validationError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ValidationError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List project cards
     * 
     * https://docs.github.com/enterprise-server@3.5/rest/reference/projects#list-project-cards - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ProjectsListCardsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ProjectsListCardsResponse
     * @see https://docs.github.com/enterprise-server@3.5/rest/reference/projects#list-project-cards
     */
	public function projectsListCards(
        \OpenAPI\OpenAPI\Models\Operations\ProjectsListCardsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ProjectsListCardsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/columns/{column_id}/cards', \OpenAPI\OpenAPI\Models\Operations\ProjectsListCardsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ProjectsListCardsRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ProjectsListCardsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->projectCards = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\ProjectCard>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 304) {
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->basicError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BasicError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List project collaborators
     * 
     * Lists the collaborators for an organization project. For a project, the list of collaborators includes outside collaborators, organization members that are direct collaborators, organization members with access through team memberships, organization members with access through default organization permissions, and organization owners. You must be an organization owner or a project `admin` to list collaborators.
     * https://docs.github.com/enterprise-server@3.5/rest/reference/projects#list-project-collaborators - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ProjectsListCollaboratorsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ProjectsListCollaboratorsResponse
     * @see https://docs.github.com/enterprise-server@3.5/rest/reference/projects#list-project-collaborators
     */
	public function projectsListCollaborators(
        \OpenAPI\OpenAPI\Models\Operations\ProjectsListCollaboratorsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ProjectsListCollaboratorsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project_id}/collaborators', \OpenAPI\OpenAPI\Models\Operations\ProjectsListCollaboratorsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ProjectsListCollaboratorsRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ProjectsListCollaboratorsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->simpleUsers = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\SimpleUser>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 304) {
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->basicError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BasicError', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 422) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->validationError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ValidationError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List project columns
     * 
     * https://docs.github.com/enterprise-server@3.5/rest/reference/projects#list-project-columns - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ProjectsListColumnsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ProjectsListColumnsResponse
     * @see https://docs.github.com/enterprise-server@3.5/rest/reference/projects#list-project-columns
     */
	public function projectsListColumns(
        \OpenAPI\OpenAPI\Models\Operations\ProjectsListColumnsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ProjectsListColumnsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project_id}/columns', \OpenAPI\OpenAPI\Models\Operations\ProjectsListColumnsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ProjectsListColumnsRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ProjectsListColumnsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->projectColumns = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\ProjectColumn>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 304) {
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->basicError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BasicError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List organization projects
     * 
     * Lists the projects in an organization. Returns a `404 Not Found` status if projects are disabled in the organization. If you do not have sufficient privileges to perform this action, a `401 Unauthorized` or `410 Gone` status is returned.
     * https://docs.github.com/enterprise-server@3.5/rest/reference/projects#list-organization-projects - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ProjectsListForOrgRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ProjectsListForOrgResponse
     * @see https://docs.github.com/enterprise-server@3.5/rest/reference/projects#list-organization-projects
     */
	public function projectsListForOrg(
        \OpenAPI\OpenAPI\Models\Operations\ProjectsListForOrgRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ProjectsListForOrgResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/orgs/{org}/projects', \OpenAPI\OpenAPI\Models\Operations\ProjectsListForOrgRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ProjectsListForOrgRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ProjectsListForOrgResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->projects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Project>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 422) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->validationErrorSimple = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ValidationErrorSimple', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List repository projects
     * 
     * Lists the projects in a repository. Returns a `404 Not Found` status if projects are disabled in the repository. If you do not have sufficient privileges to perform this action, a `401 Unauthorized` or `410 Gone` status is returned.
     * https://docs.github.com/enterprise-server@3.5/rest/reference/projects#list-repository-projects - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ProjectsListForRepoRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ProjectsListForRepoResponse
     * @see https://docs.github.com/enterprise-server@3.5/rest/reference/projects#list-repository-projects
     */
	public function projectsListForRepo(
        \OpenAPI\OpenAPI\Models\Operations\ProjectsListForRepoRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ProjectsListForRepoResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/repos/{owner}/{repo}/projects', \OpenAPI\OpenAPI\Models\Operations\ProjectsListForRepoRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ProjectsListForRepoRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ProjectsListForRepoResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->projects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Project>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 410) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->basicError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BasicError', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 422) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->validationErrorSimple = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ValidationErrorSimple', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List user projects
     * 
     * https://docs.github.com/enterprise-server@3.5/rest/reference/projects#list-user-projects - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ProjectsListForUserRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ProjectsListForUserResponse
     * @see https://docs.github.com/enterprise-server@3.5/rest/reference/projects#list-user-projects
     */
	public function projectsListForUser(
        \OpenAPI\OpenAPI\Models\Operations\ProjectsListForUserRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ProjectsListForUserResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/users/{username}/projects', \OpenAPI\OpenAPI\Models\Operations\ProjectsListForUserRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ProjectsListForUserRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ProjectsListForUserResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->projects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Project>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 422) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->validationError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ValidationError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Move a project card
     * 
     * https://docs.github.com/enterprise-server@3.5/rest/reference/projects#move-a-project-card - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ProjectsMoveCardRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ProjectsMoveCardResponse
     * @see https://docs.github.com/enterprise-server@3.5/rest/reference/projects#move-a-project-card
     */
	public function projectsMoveCard(
        \OpenAPI\OpenAPI\Models\Operations\ProjectsMoveCardRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ProjectsMoveCardResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/columns/cards/{card_id}/moves', \OpenAPI\OpenAPI\Models\Operations\ProjectsMoveCardRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ProjectsMoveCardResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->projectsMoveCard201ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 304) {
        }
        else if ($httpResponse->getStatusCode() === 401) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->basicError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BasicError', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 403) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->projectsMoveCard403ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ProjectsMoveCard403ApplicationJSON', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 422) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->validationError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ValidationError', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 503) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->projectsMoveCard503ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ProjectsMoveCard503ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Move a project column
     * 
     * https://docs.github.com/enterprise-server@3.5/rest/reference/projects#move-a-project-column - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ProjectsMoveColumnRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ProjectsMoveColumnResponse
     * @see https://docs.github.com/enterprise-server@3.5/rest/reference/projects#move-a-project-column
     */
	public function projectsMoveColumn(
        \OpenAPI\OpenAPI\Models\Operations\ProjectsMoveColumnRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ProjectsMoveColumnResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/columns/{column_id}/moves', \OpenAPI\OpenAPI\Models\Operations\ProjectsMoveColumnRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ProjectsMoveColumnResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->projectsMoveColumn201ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 304) {
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->basicError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BasicError', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 422) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->validationErrorSimple = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ValidationErrorSimple', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Remove user as a collaborator
     * 
     * Removes a collaborator from an organization project. You must be an organization owner or a project `admin` to remove a collaborator.
     * https://docs.github.com/enterprise-server@3.5/rest/reference/projects#remove-project-collaborator - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ProjectsRemoveCollaboratorRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ProjectsRemoveCollaboratorResponse
     * @see https://docs.github.com/enterprise-server@3.5/rest/reference/projects#remove-project-collaborator
     */
	public function projectsRemoveCollaborator(
        \OpenAPI\OpenAPI\Models\Operations\ProjectsRemoveCollaboratorRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ProjectsRemoveCollaboratorResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project_id}/collaborators/{username}', \OpenAPI\OpenAPI\Models\Operations\ProjectsRemoveCollaboratorRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ProjectsRemoveCollaboratorResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204 or $httpResponse->getStatusCode() === 304) {
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->basicError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BasicError', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 422) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->validationError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ValidationError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update a project
     * 
     * Updates a project board's information. Returns a `404 Not Found` status if projects are disabled. If you do not have sufficient privileges to perform this action, a `401 Unauthorized` or `410 Gone` status is returned.
     * https://docs.github.com/enterprise-server@3.5/rest/reference/projects#update-a-project - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ProjectsUpdateRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ProjectsUpdateResponse
     * @see https://docs.github.com/enterprise-server@3.5/rest/reference/projects#update-a-project
     */
	public function projectsUpdate(
        \OpenAPI\OpenAPI\Models\Operations\ProjectsUpdateRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ProjectsUpdateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project_id}', \OpenAPI\OpenAPI\Models\Operations\ProjectsUpdateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ProjectsUpdateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->project = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Project', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 304 or $httpResponse->getStatusCode() === 404) {
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 410) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->basicError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BasicError', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 403) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->projectsUpdate403ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ProjectsUpdate403ApplicationJSON', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 422) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->validationErrorSimple = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ValidationErrorSimple', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update an existing project card
     * 
     * https://docs.github.com/enterprise-server@3.5/rest/reference/projects#update-a-project-card - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ProjectsUpdateCardRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ProjectsUpdateCardResponse
     * @see https://docs.github.com/enterprise-server@3.5/rest/reference/projects#update-a-project-card
     */
	public function projectsUpdateCard(
        \OpenAPI\OpenAPI\Models\Operations\ProjectsUpdateCardRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ProjectsUpdateCardResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/columns/cards/{card_id}', \OpenAPI\OpenAPI\Models\Operations\ProjectsUpdateCardRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ProjectsUpdateCardResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->projectCard = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ProjectCard', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 304) {
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->basicError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BasicError', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 422) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->validationErrorSimple = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ValidationErrorSimple', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update an existing project column
     * 
     * https://docs.github.com/enterprise-server@3.5/rest/reference/projects#update-a-project-column - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ProjectsUpdateColumnRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ProjectsUpdateColumnResponse
     * @see https://docs.github.com/enterprise-server@3.5/rest/reference/projects#update-a-project-column
     */
	public function projectsUpdateColumn(
        \OpenAPI\OpenAPI\Models\Operations\ProjectsUpdateColumnRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ProjectsUpdateColumnResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/columns/{column_id}', \OpenAPI\OpenAPI\Models\Operations\ProjectsUpdateColumnRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ProjectsUpdateColumnResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->projectColumn = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ProjectColumn', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 304) {
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->basicError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BasicError', 'json');
            }
        }

        return $response;
    }
}