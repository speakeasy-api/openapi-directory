/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

/**
 * Operations to retrieve the revisions for custom workflow actions.
 */
export class Revisions {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Get a revision for a custom action
   *
   * @remarks
   * Returns the given version of a custom workflow action.
   */
  getAutomationV4ActionsAppIdDefinitionIdRevisionsRevisionIdGetById(
    req: operations.GetAutomationV4ActionsAppIdDefinitionIdRevisionsRevisionIdGetByIdRequest,
    security: operations.GetAutomationV4ActionsAppIdDefinitionIdRevisionsRevisionIdGetByIdSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetAutomationV4ActionsAppIdDefinitionIdRevisionsRevisionIdGetByIdResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.GetAutomationV4ActionsAppIdDefinitionIdRevisionsRevisionIdGetByIdRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/automation/v4/actions/{appId}/{definitionId}/revisions/{revisionId}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.GetAutomationV4ActionsAppIdDefinitionIdRevisionsRevisionIdGetByIdSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetAutomationV4ActionsAppIdDefinitionIdRevisionsRevisionIdGetByIdResponse =
        new operations.GetAutomationV4ActionsAppIdDefinitionIdRevisionsRevisionIdGetByIdResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.actionRevision = utils.objectToClass(
              httpRes?.data,
              shared.ActionRevision
            );
          }
          break;
        default:
          if (utils.matchContentType(contentType, `*/*`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get all revisions for a custom action
   *
   * @remarks
   * Returns a list of revisions for a custom workflow action.
   */
  getAutomationV4ActionsAppIdDefinitionIdRevisionsGetPage(
    req: operations.GetAutomationV4ActionsAppIdDefinitionIdRevisionsGetPageRequest,
    security: operations.GetAutomationV4ActionsAppIdDefinitionIdRevisionsGetPageSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetAutomationV4ActionsAppIdDefinitionIdRevisionsGetPageResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.GetAutomationV4ActionsAppIdDefinitionIdRevisionsGetPageRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/automation/v4/actions/{appId}/{definitionId}/revisions",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.GetAutomationV4ActionsAppIdDefinitionIdRevisionsGetPageSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetAutomationV4ActionsAppIdDefinitionIdRevisionsGetPageResponse =
        new operations.GetAutomationV4ActionsAppIdDefinitionIdRevisionsGetPageResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.collectionResponseActionRevisionForwardPaging =
              utils.objectToClass(
                httpRes?.data,
                shared.CollectionResponseActionRevisionForwardPaging
              );
          }
          break;
        default:
          if (utils.matchContentType(contentType, `*/*`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          break;
      }

      return res;
    });
  }
}
