<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Import 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Import exported data
     * 
     * This endpoint allows you to import your exported Postman data.
     * For more information about how you can export your data, refer <a href="https://go.postman.co/me/export">Export your Postman data.</a>
     * 
     * On successful imports, the response will be an array with Each element contaning `id`, `name` and `uid` of entities created.
     * 
     * **Note**: Refer to examples for different scenarios.
     * 
     * > Requires <a href="#authentication">API Key</a> as `X-Api-Key` request header.
     * 
     * @param string $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ImportExportedDataResponse
     */
	public function importExportedData(
        string $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ImportExportedDataResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/import/exported');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "raw");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ImportExportedDataResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->importExportedData200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ImportExportedData200ApplicationJSON', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->importExportedData400ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ImportExportedData400ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Import external API specification
     * 
     * This endpoint allows you to import external API specifications into Postman.
     * 
     * Currently, this endpoint only supports the <a href="https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.2.md">OpenAPI</a> specification, for which the `importType` will be `openapi`.
     * 
     * On a successful import, the response will be an array with each element contaning `id`, `name` and `uid` of entities created.
     * 
     * Supported `type`s:
     * 
     * - string
     * - json
     * - file
     * 
     * The `input` parameter should be defined based on the `type`.
     * 
     * > To import a file, request body must be form-data with `type` param set to `file`.
     * 
     * **Note**: Refer to examples for different scenarios.
     * 
     * > Requires <a href="#authentication">API Key</a> as `X-Api-Key` request header.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ImportExternalApiSpecificationRequestBody $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ImportExternalApiSpecificationResponse
     */
	public function importExternalApiSpecification(
        \OpenAPI\OpenAPI\Models\Operations\ImportExternalApiSpecificationRequestBody $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ImportExternalApiSpecificationResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/import/openapi');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ImportExternalApiSpecificationResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->importExternalApiSpecification200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ImportExternalApiSpecification200ApplicationJSON', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->importExternalApiSpecification400ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ImportExternalApiSpecification400ApplicationJSON', 'json');
            }
        }

        return $response;
    }
}