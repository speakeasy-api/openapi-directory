<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class InfoRequests1 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * getBlock
     * 
     * Get information of a specific block
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\Getblock1Request $request
     * @return \OpenAPI\OpenAPI\Models\Operations\Getblock1Response
     */
	public function getblock1(
        \OpenAPI\OpenAPI\Models\Operations\Getblock1Request $request,
    ): \OpenAPI\OpenAPI\Models\Operations\Getblock1Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/polygon/blocks/{block}', \OpenAPI\OpenAPI\Models\Operations\Getblock1Request::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\Getblock1Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getblock1200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\Getblock1200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * getERC20
     * 
     * Get information about an ERC20 token
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\Geterc201Request $request
     * @return \OpenAPI\OpenAPI\Models\Operations\Geterc201Response
     */
	public function geterc201(
        \OpenAPI\OpenAPI\Models\Operations\Geterc201Request $request,
    ): \OpenAPI\OpenAPI\Models\Operations\Geterc201Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/polygon/erc20/{erc20_token}', \OpenAPI\OpenAPI\Models\Operations\Geterc201Request::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\Geterc201Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->geterc201200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\Geterc201200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * getERC20Balance
     * 
     * Get the balance of an ERC20 address
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\Geterc20balance1Request $request
     * @return \OpenAPI\OpenAPI\Models\Operations\Geterc20balance1Response
     */
	public function geterc20balance1(
        \OpenAPI\OpenAPI\Models\Operations\Geterc20balance1Request $request,
    ): \OpenAPI\OpenAPI\Models\Operations\Geterc20balance1Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/polygon/balances/{address}/erc20/{erc20_token}', \OpenAPI\OpenAPI\Models\Operations\Geterc20balance1Request::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\Geterc20balance1Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->geterc20balance1200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\Geterc20balance1200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * getGasPrice
     * 
     * Get gas price
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\Getgasprice1Response
     */
	public function getgasprice1(
    ): \OpenAPI\OpenAPI\Models\Operations\Getgasprice1Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/polygon/gasprice');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\Getgasprice1Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getgasprice1200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\Getgasprice1200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * getLastBlockNumber
     * 
     * Get the latest block number
     * 
     * @param string $request
     * @return \OpenAPI\OpenAPI\Models\Operations\Getlastblocknumber1Response
     */
	public function getlastblocknumber1(
        string $request,
    ): \OpenAPI\OpenAPI\Models\Operations\Getlastblocknumber1Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/polygon/blocks/number');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "raw");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\Getlastblocknumber1Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getlastblocknumber1200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\Getlastblocknumber1200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * getNFTOwner
     * 
     * Get the Owner of an NFT
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\Getnftowner1Request $request
     * @return \OpenAPI\OpenAPI\Models\Operations\Getnftowner1Response
     */
	public function getnftowner1(
        \OpenAPI\OpenAPI\Models\Operations\Getnftowner1Request $request,
    ): \OpenAPI\OpenAPI\Models\Operations\Getnftowner1Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/polygon/nfts/{contract}/owner/{token_id}', \OpenAPI\OpenAPI\Models\Operations\Getnftowner1Request::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\Getnftowner1Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getnftowner1200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\Getnftowner1200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * getNFTUri
     * 
     * Get the URI of an NFT
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\Getnfturi1Request $request
     * @return \OpenAPI\OpenAPI\Models\Operations\Getnfturi1Response
     */
	public function getnfturi1(
        \OpenAPI\OpenAPI\Models\Operations\Getnfturi1Request $request,
    ): \OpenAPI\OpenAPI\Models\Operations\Getnfturi1Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/polygon/nfts/{ft_contract}/uri/{token_id}', \OpenAPI\OpenAPI\Models\Operations\Getnfturi1Request::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\Getnfturi1Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getnfturi1200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\Getnfturi1200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * getPolygonBalance
     * 
     * Get the balance of an address
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetpolygonbalanceRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetpolygonbalanceResponse
     */
	public function getpolygonbalance(
        \OpenAPI\OpenAPI\Models\Operations\GetpolygonbalanceRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetpolygonbalanceResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/polygon/balances/{address}', \OpenAPI\OpenAPI\Models\Operations\GetpolygonbalanceRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetpolygonbalanceResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getpolygonbalance200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\Getpolygonbalance200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * getTransaction
     * 
     * Get info about a transaction
     * 
     * You can choose if you want to get the Transaction encoded or decoded by add /decoded to your request. See examlpes for details
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\Gettransaction1Request $request
     * @return \OpenAPI\OpenAPI\Models\Operations\Gettransaction1Response
     */
	public function gettransaction1(
        \OpenAPI\OpenAPI\Models\Operations\Gettransaction1Request $request,
    ): \OpenAPI\OpenAPI\Models\Operations\Gettransaction1Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/polygon/transactions/{transaction}/decoded', \OpenAPI\OpenAPI\Models\Operations\Gettransaction1Request::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\Gettransaction1Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->gettransaction1200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\Gettransaction1200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * getTransactionReceipt
     * 
     * Get info about a transaction receipt
     * 
     * You can choose if you want to get the Transaction encoded or decoded by add /decoded to your request. See examlpes for details
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\Gettransactionreceipt1Request $request
     * @return \OpenAPI\OpenAPI\Models\Operations\Gettransactionreceipt1Response
     */
	public function gettransactionreceipt1(
        \OpenAPI\OpenAPI\Models\Operations\Gettransactionreceipt1Request $request,
    ): \OpenAPI\OpenAPI\Models\Operations\Gettransactionreceipt1Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/polygon/transactions/{transaction}/receipt/decoded', \OpenAPI\OpenAPI\Models\Operations\Gettransactionreceipt1Request::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\Gettransactionreceipt1Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->gettransactionreceipt1200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\Gettransactionreceipt1200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
}