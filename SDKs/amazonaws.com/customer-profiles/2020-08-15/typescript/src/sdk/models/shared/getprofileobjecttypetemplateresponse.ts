/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import {
  objectToClass,
  SpeakeasyBase,
  SpeakeasyMetadata,
} from "../../../internal/utils";
import { ObjectTypeField } from "./objecttypefield";
import { ObjectTypeKey } from "./objecttypekey";
import { Expose, Transform } from "class-transformer";

/**
 * Success
 */
export class GetProfileObjectTypeTemplateResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "AllowProfileCreation" })
  allowProfileCreation?: boolean;

  @SpeakeasyMetadata({ elemType: ObjectTypeField })
  @Expose({ name: "Fields" })
  @Transform(
    ({ value }) => {
      const obj: Record<string, ObjectTypeField> = {};
      for (const key in value) {
        obj[key] = objectToClass(value[key], ObjectTypeField);
      }
      return obj;
    },
    { toClassOnly: true }
  )
  fields?: Record<string, ObjectTypeField>;

  @SpeakeasyMetadata({ elemType: ObjectTypeKey, elemDepth: 2 })
  @Expose({ name: "Keys" })
  @Transform(
    ({ value }) => {
      const obj: Record<string, ObjectTypeKey[]> = {};
      for (const key in value) {
        obj[key] = objectToClass(value[key], ObjectTypeKey);
      }
      return obj;
    },
    { toClassOnly: true }
  )
  keys?: Record<string, ObjectTypeKey[]>;

  @SpeakeasyMetadata()
  @Expose({ name: "SourceLastUpdatedTimestampFormat" })
  sourceLastUpdatedTimestampFormat?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "SourceName" })
  sourceName?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "SourceObject" })
  sourceObject?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "TemplateId" })
  templateId?: string;
}
