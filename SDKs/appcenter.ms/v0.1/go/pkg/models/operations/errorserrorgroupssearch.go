// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"time"
)

type ErrorsErrorGroupsSearchSecurity struct {
	APIToken string `security:"scheme,type=apiKey,subtype=header,name=X-API-Token"`
}

// ErrorsErrorGroupsSearchOrderEnum - It controls the order of sorting
type ErrorsErrorGroupsSearchOrderEnum string

const (
	ErrorsErrorGroupsSearchOrderEnumDesc ErrorsErrorGroupsSearchOrderEnum = "desc"
	ErrorsErrorGroupsSearchOrderEnumAsc  ErrorsErrorGroupsSearchOrderEnum = "asc"
)

func (e *ErrorsErrorGroupsSearchOrderEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "desc":
		fallthrough
	case "asc":
		*e = ErrorsErrorGroupsSearchOrderEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ErrorsErrorGroupsSearchOrderEnum: %s", s)
	}
}

// ErrorsErrorGroupsSearchSortEnum - It controls the sort based on specified field
type ErrorsErrorGroupsSearchSortEnum string

const (
	ErrorsErrorGroupsSearchSortEnumMatchingReportsCount ErrorsErrorGroupsSearchSortEnum = "matchingReportsCount"
	ErrorsErrorGroupsSearchSortEnumExceptionClassName   ErrorsErrorGroupsSearchSortEnum = "exceptionClassName"
	ErrorsErrorGroupsSearchSortEnumExceptionMessage     ErrorsErrorGroupsSearchSortEnum = "exceptionMessage"
	ErrorsErrorGroupsSearchSortEnumExceptionMethod      ErrorsErrorGroupsSearchSortEnum = "exceptionMethod"
	ErrorsErrorGroupsSearchSortEnumLastOccurrence       ErrorsErrorGroupsSearchSortEnum = "lastOccurrence"
)

func (e *ErrorsErrorGroupsSearchSortEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "matchingReportsCount":
		fallthrough
	case "exceptionClassName":
		fallthrough
	case "exceptionMessage":
		fallthrough
	case "exceptionMethod":
		fallthrough
	case "lastOccurrence":
		*e = ErrorsErrorGroupsSearchSortEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ErrorsErrorGroupsSearchSortEnum: %s", s)
	}
}

type ErrorsErrorGroupsSearchRequest struct {
	// The offset (starting at 0) of the first result to return. This parameter along with limit is used to perform pagination.
	DollarSkip *int64 `queryParam:"style=form,explode=true,name=$skip"`
	// The maximum number of results to return
	DollarTop *int64 `queryParam:"style=form,explode=true,name=$top"`
	// The name of the application
	AppName string `pathParam:"style=simple,explode=false,name=app_name"`
	// A filter as specified in OData notation
	Filter *string `queryParam:"style=form,explode=true,name=filter"`
	// It controls the order of sorting
	Order *ErrorsErrorGroupsSearchOrderEnum `queryParam:"style=form,explode=true,name=order"`
	// The name of the owner
	OwnerName string `pathParam:"style=simple,explode=false,name=owner_name"`
	// A query string
	Q *string `queryParam:"style=form,explode=true,name=q"`
	// It controls the sort based on specified field
	Sort *ErrorsErrorGroupsSearchSortEnum `queryParam:"style=form,explode=true,name=sort"`
}

type ErrorsErrorGroupsSearchDefaultApplicationJSONErrorCodeEnum string

const (
	ErrorsErrorGroupsSearchDefaultApplicationJSONErrorCodeEnumBadRequest          ErrorsErrorGroupsSearchDefaultApplicationJSONErrorCodeEnum = "BadRequest"
	ErrorsErrorGroupsSearchDefaultApplicationJSONErrorCodeEnumConflict            ErrorsErrorGroupsSearchDefaultApplicationJSONErrorCodeEnum = "Conflict"
	ErrorsErrorGroupsSearchDefaultApplicationJSONErrorCodeEnumNotAcceptable       ErrorsErrorGroupsSearchDefaultApplicationJSONErrorCodeEnum = "NotAcceptable"
	ErrorsErrorGroupsSearchDefaultApplicationJSONErrorCodeEnumNotFound            ErrorsErrorGroupsSearchDefaultApplicationJSONErrorCodeEnum = "NotFound"
	ErrorsErrorGroupsSearchDefaultApplicationJSONErrorCodeEnumInternalServerError ErrorsErrorGroupsSearchDefaultApplicationJSONErrorCodeEnum = "InternalServerError"
	ErrorsErrorGroupsSearchDefaultApplicationJSONErrorCodeEnumUnauthorized        ErrorsErrorGroupsSearchDefaultApplicationJSONErrorCodeEnum = "Unauthorized"
	ErrorsErrorGroupsSearchDefaultApplicationJSONErrorCodeEnumTooManyRequests     ErrorsErrorGroupsSearchDefaultApplicationJSONErrorCodeEnum = "TooManyRequests"
)

func (e *ErrorsErrorGroupsSearchDefaultApplicationJSONErrorCodeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "BadRequest":
		fallthrough
	case "Conflict":
		fallthrough
	case "NotAcceptable":
		fallthrough
	case "NotFound":
		fallthrough
	case "InternalServerError":
		fallthrough
	case "Unauthorized":
		fallthrough
	case "TooManyRequests":
		*e = ErrorsErrorGroupsSearchDefaultApplicationJSONErrorCodeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ErrorsErrorGroupsSearchDefaultApplicationJSONErrorCodeEnum: %s", s)
	}
}

type ErrorsErrorGroupsSearchDefaultApplicationJSONError struct {
	Code    ErrorsErrorGroupsSearchDefaultApplicationJSONErrorCodeEnum `json:"code"`
	Message string                                                     `json:"message"`
}

// ErrorsErrorGroupsSearchDefaultApplicationJSON - Error code with reason
type ErrorsErrorGroupsSearchDefaultApplicationJSON struct {
	Error ErrorsErrorGroupsSearchDefaultApplicationJSONError `json:"error"`
}

// ErrorsErrorGroupsSearch200ApplicationJSONErrorGroupsReasonFramesLanguageEnum - programming language of the frame
type ErrorsErrorGroupsSearch200ApplicationJSONErrorGroupsReasonFramesLanguageEnum string

const (
	ErrorsErrorGroupsSearch200ApplicationJSONErrorGroupsReasonFramesLanguageEnumJavaScript   ErrorsErrorGroupsSearch200ApplicationJSONErrorGroupsReasonFramesLanguageEnum = "JavaScript"
	ErrorsErrorGroupsSearch200ApplicationJSONErrorGroupsReasonFramesLanguageEnumCSharp       ErrorsErrorGroupsSearch200ApplicationJSONErrorGroupsReasonFramesLanguageEnum = "CSharp"
	ErrorsErrorGroupsSearch200ApplicationJSONErrorGroupsReasonFramesLanguageEnumObjectiveC   ErrorsErrorGroupsSearch200ApplicationJSONErrorGroupsReasonFramesLanguageEnum = "Objective-C"
	ErrorsErrorGroupsSearch200ApplicationJSONErrorGroupsReasonFramesLanguageEnumObjectiveCpp ErrorsErrorGroupsSearch200ApplicationJSONErrorGroupsReasonFramesLanguageEnum = "Objective-Cpp"
	ErrorsErrorGroupsSearch200ApplicationJSONErrorGroupsReasonFramesLanguageEnumCpp          ErrorsErrorGroupsSearch200ApplicationJSONErrorGroupsReasonFramesLanguageEnum = "Cpp"
	ErrorsErrorGroupsSearch200ApplicationJSONErrorGroupsReasonFramesLanguageEnumC            ErrorsErrorGroupsSearch200ApplicationJSONErrorGroupsReasonFramesLanguageEnum = "C"
	ErrorsErrorGroupsSearch200ApplicationJSONErrorGroupsReasonFramesLanguageEnumSwift        ErrorsErrorGroupsSearch200ApplicationJSONErrorGroupsReasonFramesLanguageEnum = "Swift"
	ErrorsErrorGroupsSearch200ApplicationJSONErrorGroupsReasonFramesLanguageEnumJava         ErrorsErrorGroupsSearch200ApplicationJSONErrorGroupsReasonFramesLanguageEnum = "Java"
	ErrorsErrorGroupsSearch200ApplicationJSONErrorGroupsReasonFramesLanguageEnumUnknown      ErrorsErrorGroupsSearch200ApplicationJSONErrorGroupsReasonFramesLanguageEnum = "Unknown"
)

func (e *ErrorsErrorGroupsSearch200ApplicationJSONErrorGroupsReasonFramesLanguageEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "JavaScript":
		fallthrough
	case "CSharp":
		fallthrough
	case "Objective-C":
		fallthrough
	case "Objective-Cpp":
		fallthrough
	case "Cpp":
		fallthrough
	case "C":
		fallthrough
	case "Swift":
		fallthrough
	case "Java":
		fallthrough
	case "Unknown":
		*e = ErrorsErrorGroupsSearch200ApplicationJSONErrorGroupsReasonFramesLanguageEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ErrorsErrorGroupsSearch200ApplicationJSONErrorGroupsReasonFramesLanguageEnum: %s", s)
	}
}

type ErrorsErrorGroupsSearch200ApplicationJSONErrorGroupsReasonFrames struct {
	// this line isn't from any framework
	AppCode *bool `json:"appCode,omitempty"`
	// is a class method
	ClassMethod *bool `json:"classMethod,omitempty"`
	// name of the class
	ClassName *string `json:"className,omitempty"`
	// Formatted frame string
	CodeFormatted *string `json:"codeFormatted,omitempty"`
	// Unformatted Frame string
	CodeRaw *string `json:"codeRaw,omitempty"`
	// Exception type.
	ExceptionType *string `json:"exceptionType,omitempty"`
	// name of the file
	File *string `json:"file,omitempty"`
	// Name of the framework
	FrameworkName *string `json:"frameworkName,omitempty"`
	// programming language of the frame
	Language *ErrorsErrorGroupsSearch200ApplicationJSONErrorGroupsReasonFramesLanguageEnum `json:"language,omitempty"`
	// line number
	Line *int64 `json:"line,omitempty"`
	// name of the method
	Method *string `json:"method,omitempty"`
	// parameters of the frames method
	MethodParams *string `json:"methodParams,omitempty"`
	// OS exception type. (aka. SIGNAL)
	OsExceptionType *string `json:"osExceptionType,omitempty"`
}

type ErrorsErrorGroupsSearch200ApplicationJSONErrorGroupsStateEnum string

const (
	ErrorsErrorGroupsSearch200ApplicationJSONErrorGroupsStateEnumOpen    ErrorsErrorGroupsSearch200ApplicationJSONErrorGroupsStateEnum = "open"
	ErrorsErrorGroupsSearch200ApplicationJSONErrorGroupsStateEnumClosed  ErrorsErrorGroupsSearch200ApplicationJSONErrorGroupsStateEnum = "closed"
	ErrorsErrorGroupsSearch200ApplicationJSONErrorGroupsStateEnumIgnored ErrorsErrorGroupsSearch200ApplicationJSONErrorGroupsStateEnum = "ignored"
)

func (e *ErrorsErrorGroupsSearch200ApplicationJSONErrorGroupsStateEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "open":
		fallthrough
	case "closed":
		fallthrough
	case "ignored":
		*e = ErrorsErrorGroupsSearch200ApplicationJSONErrorGroupsStateEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ErrorsErrorGroupsSearch200ApplicationJSONErrorGroupsStateEnum: %s", s)
	}
}

type ErrorsErrorGroupsSearch200ApplicationJSONErrorGroups struct {
	Annotation           *string                                                            `json:"annotation,omitempty"`
	AppBuild             *string                                                            `json:"appBuild,omitempty"`
	AppVersion           string                                                             `json:"appVersion"`
	CodeRaw              *string                                                            `json:"codeRaw,omitempty"`
	Count                int64                                                              `json:"count"`
	DeviceCount          int64                                                              `json:"deviceCount"`
	ErrorGroupID         string                                                             `json:"errorGroupId"`
	ExceptionAppCode     *bool                                                              `json:"exceptionAppCode,omitempty"`
	ExceptionClassMethod *bool                                                              `json:"exceptionClassMethod,omitempty"`
	ExceptionClassName   *string                                                            `json:"exceptionClassName,omitempty"`
	ExceptionFile        *string                                                            `json:"exceptionFile,omitempty"`
	ExceptionLine        *string                                                            `json:"exceptionLine,omitempty"`
	ExceptionMessage     *string                                                            `json:"exceptionMessage,omitempty"`
	ExceptionMethod      *string                                                            `json:"exceptionMethod,omitempty"`
	ExceptionType        *string                                                            `json:"exceptionType,omitempty"`
	FirstOccurrence      time.Time                                                          `json:"firstOccurrence"`
	Hidden               *bool                                                              `json:"hidden,omitempty"`
	LastOccurrence       time.Time                                                          `json:"lastOccurrence"`
	ReasonFrames         []ErrorsErrorGroupsSearch200ApplicationJSONErrorGroupsReasonFrames `json:"reasonFrames,omitempty"`
	State                ErrorsErrorGroupsSearch200ApplicationJSONErrorGroupsStateEnum      `json:"state"`
}

// ErrorsErrorGroupsSearch200ApplicationJSON - List of error groups
type ErrorsErrorGroupsSearch200ApplicationJSON struct {
	ErrorGroups    []ErrorsErrorGroupsSearch200ApplicationJSONErrorGroups `json:"errorGroups,omitempty"`
	HasMoreResults *bool                                                  `json:"hasMoreResults,omitempty"`
}

type ErrorsErrorGroupsSearchResponse struct {
	ContentType string
	// List of error groups
	ErrorsErrorGroupsSearch200ApplicationJSONObject *ErrorsErrorGroupsSearch200ApplicationJSON
	// Error code with reason
	ErrorsErrorGroupsSearchDefaultApplicationJSONObject *ErrorsErrorGroupsSearchDefaultApplicationJSON
	StatusCode                                          int
	RawResponse                                         *http.Response
}
