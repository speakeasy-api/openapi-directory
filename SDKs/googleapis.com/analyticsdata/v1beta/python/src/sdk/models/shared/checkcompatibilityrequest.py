"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import dimension as shared_dimension
from ..shared import filterexpression as shared_filterexpression
from ..shared import metric as shared_metric
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class CheckCompatibilityRequestCompatibilityFilterEnum(str, Enum):
    r"""Filters the dimensions and metrics in the response to just this compatibility. Commonly used as `”compatibilityFilter”: “COMPATIBLE”` to only return compatible dimensions & metrics."""
    COMPATIBILITY_UNSPECIFIED = 'COMPATIBILITY_UNSPECIFIED'
    COMPATIBLE = 'COMPATIBLE'
    INCOMPATIBLE = 'INCOMPATIBLE'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CheckCompatibilityRequest:
    r"""The request for compatibility information for a report's dimensions and metrics. Check compatibility provides a preview of the compatibility of a report; fields shared with the `runReport` request should be the same values as in your `runReport` request."""
    
    compatibility_filter: Optional[CheckCompatibilityRequestCompatibilityFilterEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('compatibilityFilter'), 'exclude': lambda f: f is None }})
    r"""Filters the dimensions and metrics in the response to just this compatibility. Commonly used as `”compatibilityFilter”: “COMPATIBLE”` to only return compatible dimensions & metrics."""  
    dimension_filter: Optional[shared_filterexpression.FilterExpression] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dimensionFilter'), 'exclude': lambda f: f is None }})
    r"""To express dimension or metric filters. The fields in the same FilterExpression need to be either all dimensions or all metrics."""  
    dimensions: Optional[list[shared_dimension.Dimension]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dimensions'), 'exclude': lambda f: f is None }})
    r"""The dimensions in this report. `dimensions` should be the same value as in your `runReport` request."""  
    metric_filter: Optional[shared_filterexpression.FilterExpression] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('metricFilter'), 'exclude': lambda f: f is None }})
    r"""To express dimension or metric filters. The fields in the same FilterExpression need to be either all dimensions or all metrics."""  
    metrics: Optional[list[shared_metric.Metric]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('metrics'), 'exclude': lambda f: f is None }})
    r"""The metrics in this report. `metrics` should be the same value as in your `runReport` request."""  
    