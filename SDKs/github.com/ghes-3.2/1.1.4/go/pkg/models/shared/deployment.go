// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"bytes"
	"encoding/json"
	"errors"
	"time"
)

type DeploymentPayloadType string

const (
	DeploymentPayloadTypeMapOfany DeploymentPayloadType = "mapOfany"
	DeploymentPayloadTypeStr      DeploymentPayloadType = "str"
)

type DeploymentPayload struct {
	MapOfany map[string]interface{}
	Str      *string

	Type DeploymentPayloadType
}

func CreateDeploymentPayloadMapOfany(mapOfany map[string]interface{}) DeploymentPayload {
	typ := DeploymentPayloadTypeMapOfany

	return DeploymentPayload{
		MapOfany: mapOfany,
		Type:     typ,
	}
}

func CreateDeploymentPayloadStr(str string) DeploymentPayload {
	typ := DeploymentPayloadTypeStr

	return DeploymentPayload{
		Str:  &str,
		Type: typ,
	}
}

func (u *DeploymentPayload) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	mapOfany := map[string]interface{}{}
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&mapOfany); err == nil {
		u.MapOfany = mapOfany
		u.Type = DeploymentPayloadTypeMapOfany
		return nil
	}

	str := new(string)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&str); err == nil {
		u.Str = str
		u.Type = DeploymentPayloadTypeStr
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u DeploymentPayload) MarshalJSON() ([]byte, error) {
	if u.MapOfany != nil {
		return json.Marshal(u.MapOfany)
	}

	if u.Str != nil {
		return json.Marshal(u.Str)
	}

	return nil, nil
}

// Deployment - A request for a specific ref(branch,sha,tag) to be deployed
type Deployment struct {
	CreatedAt time.Time `json:"created_at"`
	// Simple User
	Creator     NullableSimpleUser `json:"creator"`
	Description string             `json:"description"`
	// Name for the target deployment environment.
	Environment string `json:"environment"`
	// Unique identifier of the deployment
	ID                  int64             `json:"id"`
	NodeID              string            `json:"node_id"`
	OriginalEnvironment *string           `json:"original_environment,omitempty"`
	Payload             DeploymentPayload `json:"payload"`
	// GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
	PerformedViaGithubApp *NullableIntegration `json:"performed_via_github_app,omitempty"`
	// Specifies if the given environment is one that end-users directly interact with. Default: false.
	ProductionEnvironment *bool `json:"production_environment,omitempty"`
	// The ref to deploy. This can be a branch, tag, or sha.
	Ref           string `json:"ref"`
	RepositoryURL string `json:"repository_url"`
	Sha           string `json:"sha"`
	StatusesURL   string `json:"statuses_url"`
	// Parameter to specify a task to execute
	Task string `json:"task"`
	// Specifies if the given environment is will no longer exist at some point in the future. Default: false.
	TransientEnvironment *bool     `json:"transient_environment,omitempty"`
	UpdatedAt            time.Time `json:"updated_at"`
	URL                  string    `json:"url"`
}
