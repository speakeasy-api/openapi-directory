<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class RegionInstantSnapshots 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Deletes the specified InstantSnapshot resource. Keep in mind that deleting a single instantSnapshot might not necessarily delete all the data on that instantSnapshot. If any data on the instantSnapshot that is marked for deletion is needed for subsequent instantSnapshots, the data will be moved to the next corresponding instantSnapshot. For more information, see Deleting instantSnapshots.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstantSnapshotsDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstantSnapshotsDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstantSnapshotsDeleteResponse
     */
	public function computeRegionInstantSnapshotsDelete(
        \OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstantSnapshotsDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstantSnapshotsDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstantSnapshotsDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/regions/{region}/instantSnapshots/{instantSnapshot}', \OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstantSnapshotsDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstantSnapshotsDeleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstantSnapshotsDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Export the changed blocks between two instant snapshots to a customer's bucket in the user specified format.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstantSnapshotsExportRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstantSnapshotsExportSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstantSnapshotsExportResponse
     */
	public function computeRegionInstantSnapshotsExport(
        \OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstantSnapshotsExportRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstantSnapshotsExportSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstantSnapshotsExportResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/regions/{region}/instantSnapshots/{instantSnapshot}/export', \OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstantSnapshotsExportRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "regionInstantSnapshotsExportRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstantSnapshotsExportRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstantSnapshotsExportResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns the specified InstantSnapshot resource in the specified region.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstantSnapshotsGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstantSnapshotsGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstantSnapshotsGetResponse
     */
	public function computeRegionInstantSnapshotsGet(
        \OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstantSnapshotsGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstantSnapshotsGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstantSnapshotsGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/regions/{region}/instantSnapshots/{instantSnapshot}', \OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstantSnapshotsGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstantSnapshotsGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstantSnapshotsGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->instantSnapshot = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\InstantSnapshot', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets the access control policy for a resource. May be empty if no such policy or resource exists.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstantSnapshotsGetIamPolicyRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstantSnapshotsGetIamPolicySecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstantSnapshotsGetIamPolicyResponse
     */
	public function computeRegionInstantSnapshotsGetIamPolicy(
        \OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstantSnapshotsGetIamPolicyRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstantSnapshotsGetIamPolicySecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstantSnapshotsGetIamPolicyResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/regions/{region}/instantSnapshots/{resource}/getIamPolicy', \OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstantSnapshotsGetIamPolicyRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstantSnapshotsGetIamPolicyRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstantSnapshotsGetIamPolicyResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->policy = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Policy', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates an instant snapshot in the specified region.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstantSnapshotsInsertRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstantSnapshotsInsertSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstantSnapshotsInsertResponse
     */
	public function computeRegionInstantSnapshotsInsert(
        \OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstantSnapshotsInsertRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstantSnapshotsInsertSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstantSnapshotsInsertResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/regions/{region}/instantSnapshots', \OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstantSnapshotsInsertRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "instantSnapshot", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstantSnapshotsInsertRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstantSnapshotsInsertResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieves the list of InstantSnapshot resources contained within the specified region.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstantSnapshotsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstantSnapshotsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstantSnapshotsListResponse
     */
	public function computeRegionInstantSnapshotsList(
        \OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstantSnapshotsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstantSnapshotsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstantSnapshotsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/regions/{region}/instantSnapshots', \OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstantSnapshotsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstantSnapshotsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstantSnapshotsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->instantSnapshotList = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\InstantSnapshotList', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Sets the access control policy on the specified resource. Replaces any existing policy.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstantSnapshotsSetIamPolicyRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstantSnapshotsSetIamPolicySecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstantSnapshotsSetIamPolicyResponse
     */
	public function computeRegionInstantSnapshotsSetIamPolicy(
        \OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstantSnapshotsSetIamPolicyRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstantSnapshotsSetIamPolicySecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstantSnapshotsSetIamPolicyResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/regions/{region}/instantSnapshots/{resource}/setIamPolicy', \OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstantSnapshotsSetIamPolicyRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "regionSetPolicyRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstantSnapshotsSetIamPolicyRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstantSnapshotsSetIamPolicyResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->policy = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Policy', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Sets the labels on a instantSnapshot in the given region. To learn more about labels, read the Labeling Resources documentation.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstantSnapshotsSetLabelsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstantSnapshotsSetLabelsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstantSnapshotsSetLabelsResponse
     */
	public function computeRegionInstantSnapshotsSetLabels(
        \OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstantSnapshotsSetLabelsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstantSnapshotsSetLabelsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstantSnapshotsSetLabelsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/regions/{region}/instantSnapshots/{resource}/setLabels', \OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstantSnapshotsSetLabelsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "regionSetLabelsRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstantSnapshotsSetLabelsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstantSnapshotsSetLabelsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns permissions that a caller has on the specified resource.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstantSnapshotsTestIamPermissionsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstantSnapshotsTestIamPermissionsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstantSnapshotsTestIamPermissionsResponse
     */
	public function computeRegionInstantSnapshotsTestIamPermissions(
        \OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstantSnapshotsTestIamPermissionsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstantSnapshotsTestIamPermissionsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstantSnapshotsTestIamPermissionsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/regions/{region}/instantSnapshots/{resource}/testIamPermissions', \OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstantSnapshotsTestIamPermissionsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "testPermissionsRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstantSnapshotsTestIamPermissionsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstantSnapshotsTestIamPermissionsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->testPermissionsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\TestPermissionsResponse', 'json');
            }
        }

        return $response;
    }
}