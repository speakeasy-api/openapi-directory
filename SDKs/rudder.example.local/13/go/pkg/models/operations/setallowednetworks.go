// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

type SetAllowedNetworksPathParams struct {
	// Policy server ID for which you want to manage allowed networks.
	NodeID string `pathParam:"style=simple,explode=false,name=nodeId"`
}

type SetAllowedNetworksRequestBody struct {
	// New value of the allowed networks
	Value map[string]interface{} `json:"value,omitempty"`
}

type SetAllowedNetworksRequest struct {
	PathParams SetAllowedNetworksPathParams
	Request    SetAllowedNetworksRequestBody `request:"mediaType=application/json"`
}

// SetAllowedNetworks200ApplicationJSONActionEnum - The id of the action
type SetAllowedNetworks200ApplicationJSONActionEnum string

const (
	SetAllowedNetworks200ApplicationJSONActionEnumModifyAllowedNetworks SetAllowedNetworks200ApplicationJSONActionEnum = "modifyAllowedNetworks"
)

func (e *SetAllowedNetworks200ApplicationJSONActionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "modifyAllowedNetworks":
		*e = SetAllowedNetworks200ApplicationJSONActionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for SetAllowedNetworks200ApplicationJSONActionEnum: %s", s)
	}
}

// SetAllowedNetworks200ApplicationJSONData - Information about the allowed_networks settings
type SetAllowedNetworks200ApplicationJSONData struct {
	// Array of allowed networks
	AllowedNetworks []interface{} `json:"allowed_networks,omitempty"`
}

// SetAllowedNetworks200ApplicationJSONResultEnum - Result of the request
type SetAllowedNetworks200ApplicationJSONResultEnum string

const (
	SetAllowedNetworks200ApplicationJSONResultEnumSuccess SetAllowedNetworks200ApplicationJSONResultEnum = "success"
	SetAllowedNetworks200ApplicationJSONResultEnumError   SetAllowedNetworks200ApplicationJSONResultEnum = "error"
)

func (e *SetAllowedNetworks200ApplicationJSONResultEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "success":
		fallthrough
	case "error":
		*e = SetAllowedNetworks200ApplicationJSONResultEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for SetAllowedNetworks200ApplicationJSONResultEnum: %s", s)
	}
}

// SetAllowedNetworks200ApplicationJSON - Allowed Networks
type SetAllowedNetworks200ApplicationJSON struct {
	// The id of the action
	Action SetAllowedNetworks200ApplicationJSONActionEnum `json:"action"`
	// Information about the allowed_networks settings
	Data SetAllowedNetworks200ApplicationJSONData `json:"data"`
	// The id of the modified node
	ID *string `json:"id,omitempty"`
	// Result of the request
	Result SetAllowedNetworks200ApplicationJSONResultEnum `json:"result"`
}

type SetAllowedNetworksResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Allowed Networks
	SetAllowedNetworks200ApplicationJSONObject *SetAllowedNetworks200ApplicationJSON
}
