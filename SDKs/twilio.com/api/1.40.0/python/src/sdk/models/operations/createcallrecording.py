"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import api_v2010_account_call_call_recording as shared_api_v2010_account_call_call_recording
from enum import Enum
from typing import Optional

CREATE_CALL_RECORDING_SERVERS = [
	"https://api.twilio.com",
]


@dataclasses.dataclass
class CreateCallRecordingSecurity:
    
    password: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'http', 'sub_type': 'basic', 'field_name': 'password' }})  
    username: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'http', 'sub_type': 'basic', 'field_name': 'username' }})  
    
class CreateCallRecordingCreateCallRecordingRequestRecordingStatusCallbackMethodEnum(str, Enum):
    r"""The HTTP method we should use to call `recording_status_callback`. Can be: `GET` or `POST` and the default is `POST`."""
    HEAD = 'HEAD'
    GET = 'GET'
    POST = 'POST'
    PATCH = 'PATCH'
    PUT = 'PUT'
    DELETE = 'DELETE'


@dataclasses.dataclass
class CreateCallRecordingCreateCallRecordingRequest:
    
    recording_channels: Optional[str] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'RecordingChannels' }})
    r"""The number of channels used in the recording. Can be: `mono` or `dual` and the default is `mono`. `mono` records all parties of the call into one channel. `dual` records each party of a 2-party call into separate channels."""  
    recording_status_callback: Optional[str] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'RecordingStatusCallback' }})
    r"""The URL we should call using the `recording_status_callback_method` on each recording event specified in  `recording_status_callback_event`. For more information, see [RecordingStatusCallback parameters](https://www.twilio.com/docs/voice/api/recording#recordingstatuscallback)."""  
    recording_status_callback_event: Optional[list[str]] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'RecordingStatusCallbackEvent' }})
    r"""The recording status events on which we should call the `recording_status_callback` URL. Can be: `in-progress`, `completed` and `absent` and the default is `completed`. Separate multiple event values with a space."""  
    recording_status_callback_method: Optional[CreateCallRecordingCreateCallRecordingRequestRecordingStatusCallbackMethodEnum] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'RecordingStatusCallbackMethod' }})
    r"""The HTTP method we should use to call `recording_status_callback`. Can be: `GET` or `POST` and the default is `POST`."""  
    recording_track: Optional[str] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'RecordingTrack' }})
    r"""The audio track to record for the call. Can be: `inbound`, `outbound` or `both`. The default is `both`. `inbound` records the audio that is received by Twilio. `outbound` records the audio that is generated from Twilio. `both` records the audio that is received and generated by Twilio."""  
    trim: Optional[str] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'Trim' }})
    r"""Whether to trim any leading and trailing silence in the recording. Can be: `trim-silence` or `do-not-trim` and the default is `do-not-trim`. `trim-silence` trims the silence from the beginning and end of the recording and `do-not-trim` does not."""  
    

@dataclasses.dataclass
class CreateCallRecordingRequest:
    
    account_sid: str = dataclasses.field(metadata={'path_param': { 'field_name': 'AccountSid', 'style': 'simple', 'explode': False }})
    r"""The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that will create the resource."""  
    call_sid: str = dataclasses.field(metadata={'path_param': { 'field_name': 'CallSid', 'style': 'simple', 'explode': False }})
    r"""The SID of the [Call](https://www.twilio.com/docs/voice/api/call-resource) to associate the resource with."""  
    request_body: Optional[CreateCallRecordingCreateCallRecordingRequest] = dataclasses.field(default=None, metadata={'request': { 'media_type': 'application/x-www-form-urlencoded' }})  
    

@dataclasses.dataclass
class CreateCallRecordingResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    api_v2010_account_call_call_recording: Optional[shared_api_v2010_account_call_call_recording.APIV2010AccountCallCallRecording] = dataclasses.field(default=None)
    r"""Created"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    