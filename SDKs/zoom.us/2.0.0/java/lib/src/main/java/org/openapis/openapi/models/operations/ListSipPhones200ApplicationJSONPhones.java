/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

public class ListSipPhones200ApplicationJSONPhones {
    /**
     * Authorization name of the user  registered for SIP Phone.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("authorization_name")
    public String authorizationName;
    public ListSipPhones200ApplicationJSONPhones withAuthorizationName(String authorizationName) {
        this.authorizationName = authorizationName;
        return this;
    }
    
    /**
     * The name or IP address of your provider\u2019s SIP domain. (example: CDC.WEB).
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("domain")
    public String domain;
    public ListSipPhones200ApplicationJSONPhones withDomain(String domain) {
        this.domain = domain;
        return this;
    }
    
    /**
     * Unique Identifier of the SIP Phone.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    public String id;
    public ListSipPhones200ApplicationJSONPhones withId(String id) {
        this.id = id;
        return this;
    }
    
    /**
     * The password generated for the user in the SIP account.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("password")
    public String password;
    public ListSipPhones200ApplicationJSONPhones withPassword(String password) {
        this.password = password;
        return this;
    }
    
    /**
     * IP address of the proxy server for SIP requests. Note that if you are using the UDP transport protocol, the default port is 5060. If you are using UDP with a different port number, that port number must be included with the IP address. If you are not using a proxy server, this value can be the same as the Register Server, or empty.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("proxy_server")
    public String proxyServer;
    public ListSipPhones200ApplicationJSONPhones withProxyServer(String proxyServer) {
        this.proxyServer = proxyServer;
        return this;
    }
    
    /**
     * IP address of the proxy server for SIP requests. Note that if you are using the UDP transport protocol, the default port is 5060. If you are using UDP with a different port number, that port number must be included with the IP address. If you are not using a proxy server, this value can be the same as the Register Server, or empty.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("proxy_server2")
    public String proxyServer2;
    public ListSipPhones200ApplicationJSONPhones withProxyServer2(String proxyServer2) {
        this.proxyServer2 = proxyServer2;
        return this;
    }
    
    /**
     * IP address of the proxy server for SIP requests. Note that if you are using the UDP transport protocol, the default port is 5060. If you are using UDP with a different port number, that port number must be included with the IP address. If you are not using a proxy server, this value can be the same as the Register Server, or empty.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("proxy_server3")
    public String proxyServer3;
    public ListSipPhones200ApplicationJSONPhones withProxyServer3(String proxyServer3) {
        this.proxyServer3 = proxyServer3;
        return this;
    }
    
    /**
     * IP address of the server that accepts REGISTER requests. Note that if you are using the UDP transport protocol, the default port is 5060. If you are using UDP with a different port number, that port number must be included with the IP address.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("register_server")
    public String registerServer;
    public ListSipPhones200ApplicationJSONPhones withRegisterServer(String registerServer) {
        this.registerServer = registerServer;
        return this;
    }
    
    /**
     * IP address of the server that accepts REGISTER requests. Note that if you are using the UDP transport protocol, the default port is 5060. If you are using UDP with a different port number, that port number must be included with the IP address.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("register_server2")
    public String registerServer2;
    public ListSipPhones200ApplicationJSONPhones withRegisterServer2(String registerServer2) {
        this.registerServer2 = registerServer2;
        return this;
    }
    
    /**
     * IP address of the server that accepts REGISTER requests. Note that if you are using the UDP transport protocol, the default port is 5060. If you are using UDP with a different port number, that port number must be included with the IP address.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("register_server3")
    public String registerServer3;
    public ListSipPhones200ApplicationJSONPhones withRegisterServer3(String registerServer3) {
        this.registerServer3 = registerServer3;
        return this;
    }
    
    /**
     * The number of minutes after which the SIP registration of the Zoom client user will expire, and the client will auto register to the SIP server. 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("registration_expire_time")
    public Long registrationExpireTime;
    public ListSipPhones200ApplicationJSONPhones withRegistrationExpireTime(Long registrationExpireTime) {
        this.registrationExpireTime = registrationExpireTime;
        return this;
    }
    
    /**
     * Protocols supported by the SIP provider.&lt;br&gt; The value must be either `UDP`, `TCP`, `TLS`, `AUTO`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("transport_protocol")
    public ListSipPhones200ApplicationJSONPhonesTransportProtocolEnum transportProtocol;
    public ListSipPhones200ApplicationJSONPhones withTransportProtocol(ListSipPhones200ApplicationJSONPhonesTransportProtocolEnum transportProtocol) {
        this.transportProtocol = transportProtocol;
        return this;
    }
    
    /**
     * Protocols supported by the SIP provider.&lt;br&gt; The value must be either `UDP`, `TCP`, `TLS`, `AUTO`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("transport_protocol2")
    public ListSipPhones200ApplicationJSONPhonesTransportProtocol2Enum transportProtocol2;
    public ListSipPhones200ApplicationJSONPhones withTransportProtocol2(ListSipPhones200ApplicationJSONPhonesTransportProtocol2Enum transportProtocol2) {
        this.transportProtocol2 = transportProtocol2;
        return this;
    }
    
    /**
     * Protocols supported by the SIP provider.&lt;br&gt; The value must be either `UDP`, `TCP`, `TLS`, `AUTO`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("transport_protocol3")
    public ListSipPhones200ApplicationJSONPhonesTransportProtocol3Enum transportProtocol3;
    public ListSipPhones200ApplicationJSONPhones withTransportProtocol3(ListSipPhones200ApplicationJSONPhonesTransportProtocol3Enum transportProtocol3) {
        this.transportProtocol3 = transportProtocol3;
        return this;
    }
    
    /**
     * The email address of the user to associate with the SIP Phone. Can add [.win, .mac, .android, .ipad, .iphone, .linux, .pc, .mobile, .pad] at the end of the email (ex. user@test.com.mac) to add accounts for different platforms for the same user.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("user_email")
    public String userEmail;
    public ListSipPhones200ApplicationJSONPhones withUserEmail(String userEmail) {
        this.userEmail = userEmail;
        return this;
    }
    
    /**
     * The phone number associated with the user in the SIP account. 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("user_name")
    public String userName;
    public ListSipPhones200ApplicationJSONPhones withUserName(String userName) {
        this.userName = userName;
        return this;
    }
    
    /**
     * The number to dial for checking voicemail.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("voice_mail")
    public String voiceMail;
    public ListSipPhones200ApplicationJSONPhones withVoiceMail(String voiceMail) {
        this.voiceMail = voiceMail;
        return this;
    }
    
}
