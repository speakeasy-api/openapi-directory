"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import updatereportdefinitionresult as shared_updatereportdefinitionresult
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Any, Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateReportDefinitionRequestBodyDestinationS3Location:
    r"""Represents the Amazon Simple Storage Service (Amazon S3) location where AWS Application Cost Profiler reports are generated and then written to."""
    
    bucket: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bucket'), 'exclude': lambda f: f is None }})  
    prefix: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('prefix'), 'exclude': lambda f: f is None }})  
    
class UpdateReportDefinitionRequestBodyFormatEnum(str, Enum):
    r"""Required. The format to use for the generated report."""
    CSV = 'CSV'
    PARQUET = 'PARQUET'

class UpdateReportDefinitionRequestBodyReportFrequencyEnum(str, Enum):
    r"""Required. The cadence to generate the report."""
    MONTHLY = 'MONTHLY'
    DAILY = 'DAILY'
    ALL = 'ALL'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateReportDefinitionRequestBody:
    
    destination_s3_location: UpdateReportDefinitionRequestBodyDestinationS3Location = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('destinationS3Location') }})
    r"""Represents the Amazon Simple Storage Service (Amazon S3) location where AWS Application Cost Profiler reports are generated and then written to."""  
    format: UpdateReportDefinitionRequestBodyFormatEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('format') }})
    r"""Required. The format to use for the generated report."""  
    report_description: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('reportDescription') }})
    r"""Required. Description of the report."""  
    report_frequency: UpdateReportDefinitionRequestBodyReportFrequencyEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('reportFrequency') }})
    r"""Required. The cadence to generate the report."""  
    

@dataclasses.dataclass
class UpdateReportDefinitionRequest:
    
    report_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'reportId', 'style': 'simple', 'explode': False }})
    r"""Required. ID of the report to update."""  
    request_body: UpdateReportDefinitionRequestBody = dataclasses.field(metadata={'request': { 'media_type': 'application/json' }})  
    x_amz_algorithm: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Algorithm', 'style': 'simple', 'explode': False }})  
    x_amz_content_sha256: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Content-Sha256', 'style': 'simple', 'explode': False }})  
    x_amz_credential: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Credential', 'style': 'simple', 'explode': False }})  
    x_amz_date: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Date', 'style': 'simple', 'explode': False }})  
    x_amz_security_token: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Security-Token', 'style': 'simple', 'explode': False }})  
    x_amz_signature: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Signature', 'style': 'simple', 'explode': False }})  
    x_amz_signed_headers: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-SignedHeaders', 'style': 'simple', 'explode': False }})  
    

@dataclasses.dataclass
class UpdateReportDefinitionResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    access_denied_exception: Optional[Any] = dataclasses.field(default=None)
    r"""AccessDeniedException"""  
    internal_server_exception: Optional[Any] = dataclasses.field(default=None)
    r"""InternalServerException"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    throttling_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ThrottlingException"""  
    update_report_definition_result: Optional[shared_updatereportdefinitionresult.UpdateReportDefinitionResult] = dataclasses.field(default=None)
    r"""Success"""  
    validation_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ValidationException"""  
    