// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// BatchExecuteStatementXAmzTargetEnum
type BatchExecuteStatementXAmzTargetEnum string

const (
	BatchExecuteStatementXAmzTargetEnumRedshiftDataBatchExecuteStatement BatchExecuteStatementXAmzTargetEnum = "RedshiftData.BatchExecuteStatement"
)

func (e *BatchExecuteStatementXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "RedshiftData.BatchExecuteStatement":
		*e = BatchExecuteStatementXAmzTargetEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for BatchExecuteStatementXAmzTargetEnum: %s", s)
	}
}

type BatchExecuteStatementRequest struct {
	BatchExecuteStatementInput shared.BatchExecuteStatementInput   `request:"mediaType=application/json"`
	XAmzAlgorithm              *string                             `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256          *string                             `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential             *string                             `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate                   *string                             `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken          *string                             `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature              *string                             `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders          *string                             `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget                 BatchExecuteStatementXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type BatchExecuteStatementResponse struct {
	// ActiveStatementsExceededException
	ActiveStatementsExceededException interface{}
	// BatchExecuteStatementException
	BatchExecuteStatementException interface{}
	// Success
	BatchExecuteStatementOutput *shared.BatchExecuteStatementOutput
	ContentType                 string
	StatusCode                  int
	RawResponse                 *http.Response
	// ValidationException
	ValidationException interface{}
}
