"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ContainersQuotaInfoOrgQuota:
    
    floating_ips_max: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('floating_ips_max'), 'exclude': lambda f: f is None }})
    r"""The number of public IP addresses that can be assigned across all spaces of the organization."""  
    floating_ips_space_default: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('floating_ips_space_default'), 'exclude': lambda f: f is None }})
    r"""The number of public IP addresses that are required for one space. If the number of public IP addresses is not available, then a new space cannot be created to be used with IBM Containers."""  
    floating_ips_usage: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('floating_ips_usage'), 'exclude': lambda f: f is None }})
    r"""The number of public IP addresses that are currently assigned to the spaces of the organization."""  
    ram_max: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ram_max'), 'exclude': lambda f: f is None }})
    r"""The maximum amount of container memory on the compute host that can be assigned across the spaces of the organization."""  
    ram_space_default: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ram_space_default'), 'exclude': lambda f: f is None }})
    r"""The amount of container memory that is required to be used for one space. If this amount is not available, then a new space cannot be created to be used with IBM Containers."""  
    ram_usage: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ram_usage'), 'exclude': lambda f: f is None }})
    r"""The amount of container memory that is currently used across all spaces of the organization."""  
    subnet_usage: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('subnet_usage'), 'exclude': lambda f: f is None }})
    r"""The number of subnets that were created across all spaces of the organization."""  
    subnets_default: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('subnets_default'), 'exclude': lambda f: f is None }})
    r"""The number of subnets that is required to create a new space. If this number is not available, then a new space cannot be created to be used with IBM Containers."""  
    subnets_max: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('subnets_max'), 'exclude': lambda f: f is None }})
    r"""The maximum number of container private subnet that can be created across all spaces of the organization."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ContainersQuotaInfoSpaceQuota:
    
    floating_ips_max: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('floating_ips_max'), 'exclude': lambda f: f is None }})
    r"""The maximum number of public IP addresses that can be allocated to a space."""  
    ram_max: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ram_max'), 'exclude': lambda f: f is None }})
    r"""The maximum amount of container memory that can be shared across all containers that are created in a space."""  
    subnets_max: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('subnets_max'), 'exclude': lambda f: f is None }})
    r"""The maximum number of private subnets that can be created in one space."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ContainersQuotaInfo:
    r"""OK. The current quota that is assigned to the organization and space is returned."""
    
    account_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('account_type'), 'exclude': lambda f: f is None }})
    r"""The Bluemix account type indicating the quota limits and how the organization is billed."""  
    country_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('country_code'), 'exclude': lambda f: f is None }})
    r"""The country in which the account was opened."""  
    org_quota: Optional[ContainersQuotaInfoOrgQuota] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('org_quota'), 'exclude': lambda f: f is None }})  
    space_quota: Optional[ContainersQuotaInfoSpaceQuota] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('space_quota'), 'exclude': lambda f: f is None }})  
    