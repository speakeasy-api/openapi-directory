"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class AutoInstallConstraintChargingStateConstraintEnum(str, Enum):
    r"""Charging state constraint."""
    CHARGING_STATE_CONSTRAINT_UNSPECIFIED = 'chargingStateConstraintUnspecified'
    CHARGING_NOT_REQUIRED = 'chargingNotRequired'
    CHARGING_REQUIRED = 'chargingRequired'

class AutoInstallConstraintDeviceIdleStateConstraintEnum(str, Enum):
    r"""Device idle state constraint."""
    DEVICE_IDLE_STATE_CONSTRAINT_UNSPECIFIED = 'deviceIdleStateConstraintUnspecified'
    DEVICE_IDLE_NOT_REQUIRED = 'deviceIdleNotRequired'
    DEVICE_IDLE_REQUIRED = 'deviceIdleRequired'

class AutoInstallConstraintNetworkTypeConstraintEnum(str, Enum):
    r"""Network type constraint."""
    NETWORK_TYPE_CONSTRAINT_UNSPECIFIED = 'networkTypeConstraintUnspecified'
    ANY_NETWORK = 'anyNetwork'
    UNMETERED_NETWORK = 'unmeteredNetwork'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class AutoInstallConstraint:
    r"""The auto-install constraint. Defines a set of restrictions for installation. At least one of the fields must be set."""
    
    charging_state_constraint: Optional[AutoInstallConstraintChargingStateConstraintEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('chargingStateConstraint'), 'exclude': lambda f: f is None }})
    r"""Charging state constraint."""  
    device_idle_state_constraint: Optional[AutoInstallConstraintDeviceIdleStateConstraintEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('deviceIdleStateConstraint'), 'exclude': lambda f: f is None }})
    r"""Device idle state constraint."""  
    network_type_constraint: Optional[AutoInstallConstraintNetworkTypeConstraintEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('networkTypeConstraint'), 'exclude': lambda f: f is None }})
    r"""Network type constraint."""  
    