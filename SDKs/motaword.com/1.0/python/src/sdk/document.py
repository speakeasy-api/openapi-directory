"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Document:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def get_all_document_subjects(self) -> operations.GetAllDocumentSubjectsResponse:
        r"""Get a list of subjects of projects
        Get a list of subjects of projects
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/documents/subjects'
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetAllDocumentSubjectsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.DocumentSubjects]])
                res.document_subjects = out

        return res

    def get_document(self, request: operations.GetDocumentRequest) -> operations.GetDocumentResponse:
        r"""View a single document
        View a single document from your MotaWord account with its translation info.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetDocumentRequest, base_url, '/documents/{documentId}', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetDocumentResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ContinuousProjectDocument])
                res.continuous_project_document = out

        return res

    def get_document_progress(self, request: operations.GetDocumentProgressRequest) -> operations.GetDocumentProgressResponse:
        r"""View a document translation progress
        View the translation or proofreading progress of a document in your account. You can also track the progress of a document under the project that it was ordered with.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetDocumentProgressRequest, base_url, '/documents/{documentId}/progress', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetDocumentProgressResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Progress])
                res.progress = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out

        return res

    def get_documents(self, request: operations.GetDocumentsRequest) -> operations.GetDocumentsResponse:
        r"""View your documents
        View a list of files and documents that you have translations for. This endpoint lets you view your MotaWord account as a multilingual translated file repository, without needing to go through your projects to interact with files in them.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/documents'
        
        query_params = utils.get_query_params(operations.GetDocumentsRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetDocumentsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.DocumentList])
                res.document_list = out

        return res

    def get_similar_documents(self, request: operations.GetSimilarDocumentsRequest) -> operations.GetSimilarDocumentsResponse:
        r"""Find documents similar to this document.
        Find documents similar to this document. Optionally, include translation information.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetSimilarDocumentsRequest, base_url, '/documents/{documentId}/similars', request)
        
        query_params = utils.get_query_params(operations.GetSimilarDocumentsRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetSimilarDocumentsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.DocumentList])
                res.document_list = out

        return res

    def get_user_documents(self, request: operations.GetUserDocumentsRequest) -> operations.GetUserDocumentsResponse:
        r"""Get a list of your documents
        Get a list of your documents
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetUserDocumentsRequest, base_url, '/{userId}/documents', request)
        
        query_params = utils.get_query_params(operations.GetUserDocumentsRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetUserDocumentsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.DocumentList])
                res.document_list = out

        return res

    def regenerate_preview(self, request: operations.RegeneratePreviewRequest) -> operations.RegeneratePreviewResponse:
        r"""Regenerate preview and return preview URL for given file
        Regenerate preview and return preview URL for given file
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.RegeneratePreviewRequest, base_url, '/documents/{documentId}/regenerate_preview', request)
        
        
        client = self._security_client
        
        http_res = client.request('POST', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.RegeneratePreviewResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.RegeneratePreviewResponse])
                res.regenerate_preview_response = out

        return res

    def use_as_draft(self, request: operations.UseAsDraftRequest) -> operations.UseAsDraftResponse:
        r"""Use the translation of given source manual document as manual draft source for the given target document.
        Use the translation of given source manual document as manual draft source for the given target document.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.UseAsDraftRequest, base_url, '/documents/{documentId}/use_as_draft', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "use_as_draft_payload", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UseAsDraftResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.OperationStatus])
                res.operation_status = out

        return res

    def use_as_regular(self, request: operations.UseAsRegularRequest) -> operations.UseAsRegularResponse:
        r"""Use the translation of the given manual document as a regular file.
        Use the translation of the given manual document as a regular file.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.UseAsRegularRequest, base_url, '/documents/{documentId}/use_as_regular', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "use_as_regular_payload", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UseAsRegularResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.OperationStatus])
                res.operation_status = out

        return res

    