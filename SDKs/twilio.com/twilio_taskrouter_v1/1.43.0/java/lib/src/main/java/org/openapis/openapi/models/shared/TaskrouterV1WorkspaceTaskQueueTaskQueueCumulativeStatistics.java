/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

/**
 * TaskrouterV1WorkspaceTaskQueueTaskQueueCumulativeStatistics - OK
 */
public class TaskrouterV1WorkspaceTaskQueueTaskQueueCumulativeStatistics {
    /**
     * The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the TaskQueue resource.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("account_sid")
    public String accountSid;

    public TaskrouterV1WorkspaceTaskQueueTaskQueueCumulativeStatistics withAccountSid(String accountSid) {
        this.accountSid = accountSid;
        return this;
    }
    
    /**
     * The average time in seconds between Task creation and acceptance.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("avg_task_acceptance_time")
    public Long avgTaskAcceptanceTime;

    public TaskrouterV1WorkspaceTaskQueueTaskQueueCumulativeStatistics withAvgTaskAcceptanceTime(Long avgTaskAcceptanceTime) {
        this.avgTaskAcceptanceTime = avgTaskAcceptanceTime;
        return this;
    }
    
    /**
     * The end of the interval during which these statistics were calculated, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("end_time")
    public OffsetDateTime endTime;

    public TaskrouterV1WorkspaceTaskQueueTaskQueueCumulativeStatistics withEndTime(OffsetDateTime endTime) {
        this.endTime = endTime;
        return this;
    }
    
    /**
     * The total number of Reservations accepted for Tasks in the TaskQueue.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("reservations_accepted")
    public Long reservationsAccepted;

    public TaskrouterV1WorkspaceTaskQueueTaskQueueCumulativeStatistics withReservationsAccepted(Long reservationsAccepted) {
        this.reservationsAccepted = reservationsAccepted;
        return this;
    }
    
    /**
     * The total number of Reservations canceled for Tasks in the TaskQueue.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("reservations_canceled")
    public Long reservationsCanceled;

    public TaskrouterV1WorkspaceTaskQueueTaskQueueCumulativeStatistics withReservationsCanceled(Long reservationsCanceled) {
        this.reservationsCanceled = reservationsCanceled;
        return this;
    }
    
    /**
     * The total number of Reservations created for Tasks in the TaskQueue.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("reservations_created")
    public Long reservationsCreated;

    public TaskrouterV1WorkspaceTaskQueueTaskQueueCumulativeStatistics withReservationsCreated(Long reservationsCreated) {
        this.reservationsCreated = reservationsCreated;
        return this;
    }
    
    /**
     * The total number of Reservations rejected for Tasks in the TaskQueue.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("reservations_rejected")
    public Long reservationsRejected;

    public TaskrouterV1WorkspaceTaskQueueTaskQueueCumulativeStatistics withReservationsRejected(Long reservationsRejected) {
        this.reservationsRejected = reservationsRejected;
        return this;
    }
    
    /**
     * The total number of Reservations rescinded.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("reservations_rescinded")
    public Long reservationsRescinded;

    public TaskrouterV1WorkspaceTaskQueueTaskQueueCumulativeStatistics withReservationsRescinded(Long reservationsRescinded) {
        this.reservationsRescinded = reservationsRescinded;
        return this;
    }
    
    /**
     * The total number of Reservations that timed out for Tasks in the TaskQueue.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("reservations_timed_out")
    public Long reservationsTimedOut;

    public TaskrouterV1WorkspaceTaskQueueTaskQueueCumulativeStatistics withReservationsTimedOut(Long reservationsTimedOut) {
        this.reservationsTimedOut = reservationsTimedOut;
        return this;
    }
    
    /**
     * A list of objects that describe the number of Tasks canceled and reservations accepted above and below the thresholds specified in seconds.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("split_by_wait_time")
    public Object splitByWaitTime;

    public TaskrouterV1WorkspaceTaskQueueTaskQueueCumulativeStatistics withSplitByWaitTime(Object splitByWaitTime) {
        this.splitByWaitTime = splitByWaitTime;
        return this;
    }
    
    /**
     * The beginning of the interval during which these statistics were calculated, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("start_time")
    public OffsetDateTime startTime;

    public TaskrouterV1WorkspaceTaskQueueTaskQueueCumulativeStatistics withStartTime(OffsetDateTime startTime) {
        this.startTime = startTime;
        return this;
    }
    
    /**
     * The SID of the TaskQueue from which these statistics were calculated.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("task_queue_sid")
    public String taskQueueSid;

    public TaskrouterV1WorkspaceTaskQueueTaskQueueCumulativeStatistics withTaskQueueSid(String taskQueueSid) {
        this.taskQueueSid = taskQueueSid;
        return this;
    }
    
    /**
     * The total number of Tasks canceled in the TaskQueue.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tasks_canceled")
    public Long tasksCanceled;

    public TaskrouterV1WorkspaceTaskQueueTaskQueueCumulativeStatistics withTasksCanceled(Long tasksCanceled) {
        this.tasksCanceled = tasksCanceled;
        return this;
    }
    
    /**
     * The total number of Tasks completed in the TaskQueue.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tasks_completed")
    public Long tasksCompleted;

    public TaskrouterV1WorkspaceTaskQueueTaskQueueCumulativeStatistics withTasksCompleted(Long tasksCompleted) {
        this.tasksCompleted = tasksCompleted;
        return this;
    }
    
    /**
     * The total number of Tasks deleted in the TaskQueue.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tasks_deleted")
    public Long tasksDeleted;

    public TaskrouterV1WorkspaceTaskQueueTaskQueueCumulativeStatistics withTasksDeleted(Long tasksDeleted) {
        this.tasksDeleted = tasksDeleted;
        return this;
    }
    
    /**
     * The total number of Tasks entered into the TaskQueue.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tasks_entered")
    public Long tasksEntered;

    public TaskrouterV1WorkspaceTaskQueueTaskQueueCumulativeStatistics withTasksEntered(Long tasksEntered) {
        this.tasksEntered = tasksEntered;
        return this;
    }
    
    /**
     * The total number of Tasks that were moved from one queue to another.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tasks_moved")
    public Long tasksMoved;

    public TaskrouterV1WorkspaceTaskQueueTaskQueueCumulativeStatistics withTasksMoved(Long tasksMoved) {
        this.tasksMoved = tasksMoved;
        return this;
    }
    
    /**
     * The absolute URL of the TaskQueue statistics resource.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("url")
    public String url;

    public TaskrouterV1WorkspaceTaskQueueTaskQueueCumulativeStatistics withUrl(String url) {
        this.url = url;
        return this;
    }
    
    /**
     * The relative wait duration statistics (`avg`, `min`, `max`, `total`) for Tasks accepted while in the TaskQueue. Calculation is based on the time when the Tasks entered the TaskQueue.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("wait_duration_in_queue_until_accepted")
    public Object waitDurationInQueueUntilAccepted;

    public TaskrouterV1WorkspaceTaskQueueTaskQueueCumulativeStatistics withWaitDurationInQueueUntilAccepted(Object waitDurationInQueueUntilAccepted) {
        this.waitDurationInQueueUntilAccepted = waitDurationInQueueUntilAccepted;
        return this;
    }
    
    /**
     * The wait duration statistics (`avg`, `min`, `max`, `total`) for Tasks accepted while in the TaskQueue. Calculation is based on the time when the Tasks were created. For transfers, the wait duration is counted from the moment ***the Task was created***, and not from when the transfer was initiated.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("wait_duration_until_accepted")
    public Object waitDurationUntilAccepted;

    public TaskrouterV1WorkspaceTaskQueueTaskQueueCumulativeStatistics withWaitDurationUntilAccepted(Object waitDurationUntilAccepted) {
        this.waitDurationUntilAccepted = waitDurationUntilAccepted;
        return this;
    }
    
    /**
     * The wait duration statistics (`avg`, `min`, `max`, `total`) for Tasks canceled while in the TaskQueue.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("wait_duration_until_canceled")
    public Object waitDurationUntilCanceled;

    public TaskrouterV1WorkspaceTaskQueueTaskQueueCumulativeStatistics withWaitDurationUntilCanceled(Object waitDurationUntilCanceled) {
        this.waitDurationUntilCanceled = waitDurationUntilCanceled;
        return this;
    }
    
    /**
     * The SID of the Workspace that contains the TaskQueue.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("workspace_sid")
    public String workspaceSid;

    public TaskrouterV1WorkspaceTaskQueueTaskQueueCumulativeStatistics withWorkspaceSid(String workspaceSid) {
        this.workspaceSid = workspaceSid;
        return this;
    }
    
    public TaskrouterV1WorkspaceTaskQueueTaskQueueCumulativeStatistics(){}
}
