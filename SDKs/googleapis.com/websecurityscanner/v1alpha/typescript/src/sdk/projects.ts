/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class Projects {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Creates a new ScanConfig.
   */
  websecurityscannerProjectsScanConfigsCreate(
    req: operations.WebsecurityscannerProjectsScanConfigsCreateRequest,
    security: operations.WebsecurityscannerProjectsScanConfigsCreateSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.WebsecurityscannerProjectsScanConfigsCreateResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.WebsecurityscannerProjectsScanConfigsCreateRequest(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1alpha/{parent}/scanConfigs",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "scanConfig",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.WebsecurityscannerProjectsScanConfigsCreateSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.WebsecurityscannerProjectsScanConfigsCreateResponse =
        new operations.WebsecurityscannerProjectsScanConfigsCreateResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.scanConfig = utils.objectToClass(
              httpRes?.data,
              shared.ScanConfig
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Deletes an existing ScanConfig and its child resources.
   */
  websecurityscannerProjectsScanConfigsDelete(
    req: operations.WebsecurityscannerProjectsScanConfigsDeleteRequest,
    security: operations.WebsecurityscannerProjectsScanConfigsDeleteSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.WebsecurityscannerProjectsScanConfigsDeleteResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.WebsecurityscannerProjectsScanConfigsDeleteRequest(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/v1alpha/{name}", req);
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.WebsecurityscannerProjectsScanConfigsDeleteSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.WebsecurityscannerProjectsScanConfigsDeleteResponse =
        new operations.WebsecurityscannerProjectsScanConfigsDeleteResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.empty = utils.objectToClass(httpRes?.data);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Lists ScanConfigs under a given project.
   */
  websecurityscannerProjectsScanConfigsList(
    req: operations.WebsecurityscannerProjectsScanConfigsListRequest,
    security: operations.WebsecurityscannerProjectsScanConfigsListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.WebsecurityscannerProjectsScanConfigsListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.WebsecurityscannerProjectsScanConfigsListRequest(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1alpha/{parent}/scanConfigs",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.WebsecurityscannerProjectsScanConfigsListSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.WebsecurityscannerProjectsScanConfigsListResponse =
        new operations.WebsecurityscannerProjectsScanConfigsListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listScanConfigsResponse = utils.objectToClass(
              httpRes?.data,
              shared.ListScanConfigsResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Updates a ScanConfig. This method support partial update of a ScanConfig.
   */
  websecurityscannerProjectsScanConfigsPatch(
    req: operations.WebsecurityscannerProjectsScanConfigsPatchRequest,
    security: operations.WebsecurityscannerProjectsScanConfigsPatchSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.WebsecurityscannerProjectsScanConfigsPatchResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.WebsecurityscannerProjectsScanConfigsPatchRequest(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/v1alpha/{name}", req);

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "scanConfig",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.WebsecurityscannerProjectsScanConfigsPatchSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "patch",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.WebsecurityscannerProjectsScanConfigsPatchResponse =
        new operations.WebsecurityscannerProjectsScanConfigsPatchResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.scanConfig = utils.objectToClass(
              httpRes?.data,
              shared.ScanConfig
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * List CrawledUrls under a given ScanRun.
   */
  websecurityscannerProjectsScanConfigsScanRunsCrawledUrlsList(
    req: operations.WebsecurityscannerProjectsScanConfigsScanRunsCrawledUrlsListRequest,
    security: operations.WebsecurityscannerProjectsScanConfigsScanRunsCrawledUrlsListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.WebsecurityscannerProjectsScanConfigsScanRunsCrawledUrlsListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.WebsecurityscannerProjectsScanConfigsScanRunsCrawledUrlsListRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1alpha/{parent}/crawledUrls",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.WebsecurityscannerProjectsScanConfigsScanRunsCrawledUrlsListSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.WebsecurityscannerProjectsScanConfigsScanRunsCrawledUrlsListResponse =
        new operations.WebsecurityscannerProjectsScanConfigsScanRunsCrawledUrlsListResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listCrawledUrlsResponse = utils.objectToClass(
              httpRes?.data,
              shared.ListCrawledUrlsResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * List all FindingTypeStats under a given ScanRun.
   */
  websecurityscannerProjectsScanConfigsScanRunsFindingTypeStatsList(
    req: operations.WebsecurityscannerProjectsScanConfigsScanRunsFindingTypeStatsListRequest,
    security: operations.WebsecurityscannerProjectsScanConfigsScanRunsFindingTypeStatsListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.WebsecurityscannerProjectsScanConfigsScanRunsFindingTypeStatsListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.WebsecurityscannerProjectsScanConfigsScanRunsFindingTypeStatsListRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1alpha/{parent}/findingTypeStats",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.WebsecurityscannerProjectsScanConfigsScanRunsFindingTypeStatsListSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.WebsecurityscannerProjectsScanConfigsScanRunsFindingTypeStatsListResponse =
        new operations.WebsecurityscannerProjectsScanConfigsScanRunsFindingTypeStatsListResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listFindingTypeStatsResponse = utils.objectToClass(
              httpRes?.data,
              shared.ListFindingTypeStatsResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Gets a Finding.
   */
  websecurityscannerProjectsScanConfigsScanRunsFindingsGet(
    req: operations.WebsecurityscannerProjectsScanConfigsScanRunsFindingsGetRequest,
    security: operations.WebsecurityscannerProjectsScanConfigsScanRunsFindingsGetSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.WebsecurityscannerProjectsScanConfigsScanRunsFindingsGetResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.WebsecurityscannerProjectsScanConfigsScanRunsFindingsGetRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/v1alpha/{name}", req);
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.WebsecurityscannerProjectsScanConfigsScanRunsFindingsGetSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.WebsecurityscannerProjectsScanConfigsScanRunsFindingsGetResponse =
        new operations.WebsecurityscannerProjectsScanConfigsScanRunsFindingsGetResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.finding = utils.objectToClass(httpRes?.data, shared.Finding);
          }
          break;
      }

      return res;
    });
  }

  /**
   * List Findings under a given ScanRun.
   */
  websecurityscannerProjectsScanConfigsScanRunsFindingsList(
    req: operations.WebsecurityscannerProjectsScanConfigsScanRunsFindingsListRequest,
    security: operations.WebsecurityscannerProjectsScanConfigsScanRunsFindingsListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.WebsecurityscannerProjectsScanConfigsScanRunsFindingsListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.WebsecurityscannerProjectsScanConfigsScanRunsFindingsListRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1alpha/{parent}/findings",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.WebsecurityscannerProjectsScanConfigsScanRunsFindingsListSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.WebsecurityscannerProjectsScanConfigsScanRunsFindingsListResponse =
        new operations.WebsecurityscannerProjectsScanConfigsScanRunsFindingsListResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listFindingsResponse = utils.objectToClass(
              httpRes?.data,
              shared.ListFindingsResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Lists ScanRuns under a given ScanConfig, in descending order of ScanRun stop time.
   */
  websecurityscannerProjectsScanConfigsScanRunsList(
    req: operations.WebsecurityscannerProjectsScanConfigsScanRunsListRequest,
    security: operations.WebsecurityscannerProjectsScanConfigsScanRunsListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.WebsecurityscannerProjectsScanConfigsScanRunsListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.WebsecurityscannerProjectsScanConfigsScanRunsListRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1alpha/{parent}/scanRuns",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.WebsecurityscannerProjectsScanConfigsScanRunsListSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.WebsecurityscannerProjectsScanConfigsScanRunsListResponse =
        new operations.WebsecurityscannerProjectsScanConfigsScanRunsListResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listScanRunsResponse = utils.objectToClass(
              httpRes?.data,
              shared.ListScanRunsResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Stops a ScanRun. The stopped ScanRun is returned.
   */
  websecurityscannerProjectsScanConfigsScanRunsStop(
    req: operations.WebsecurityscannerProjectsScanConfigsScanRunsStopRequest,
    security: operations.WebsecurityscannerProjectsScanConfigsScanRunsStopSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.WebsecurityscannerProjectsScanConfigsScanRunsStopResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.WebsecurityscannerProjectsScanConfigsScanRunsStopRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/v1alpha/{name}:stop", req);

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.WebsecurityscannerProjectsScanConfigsScanRunsStopSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.WebsecurityscannerProjectsScanConfigsScanRunsStopResponse =
        new operations.WebsecurityscannerProjectsScanConfigsScanRunsStopResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.scanRun = utils.objectToClass(httpRes?.data, shared.ScanRun);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Start a ScanRun according to the given ScanConfig.
   */
  websecurityscannerProjectsScanConfigsStart(
    req: operations.WebsecurityscannerProjectsScanConfigsStartRequest,
    security: operations.WebsecurityscannerProjectsScanConfigsStartSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.WebsecurityscannerProjectsScanConfigsStartResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.WebsecurityscannerProjectsScanConfigsStartRequest(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1alpha/{name}:start",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.WebsecurityscannerProjectsScanConfigsStartSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.WebsecurityscannerProjectsScanConfigsStartResponse =
        new operations.WebsecurityscannerProjectsScanConfigsStartResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.scanRun = utils.objectToClass(httpRes?.data, shared.ScanRun);
          }
          break;
      }

      return res;
    });
  }
}
