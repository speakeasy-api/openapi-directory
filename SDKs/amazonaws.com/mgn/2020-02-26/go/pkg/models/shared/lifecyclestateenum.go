// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type LifeCycleStateEnum string

const (
	LifeCycleStateEnumStopped             LifeCycleStateEnum = "STOPPED"
	LifeCycleStateEnumNotReady            LifeCycleStateEnum = "NOT_READY"
	LifeCycleStateEnumReadyForTest        LifeCycleStateEnum = "READY_FOR_TEST"
	LifeCycleStateEnumTesting             LifeCycleStateEnum = "TESTING"
	LifeCycleStateEnumReadyForCutover     LifeCycleStateEnum = "READY_FOR_CUTOVER"
	LifeCycleStateEnumCuttingOver         LifeCycleStateEnum = "CUTTING_OVER"
	LifeCycleStateEnumCutover             LifeCycleStateEnum = "CUTOVER"
	LifeCycleStateEnumDisconnected        LifeCycleStateEnum = "DISCONNECTED"
	LifeCycleStateEnumDiscovered          LifeCycleStateEnum = "DISCOVERED"
	LifeCycleStateEnumPendingInstallation LifeCycleStateEnum = "PENDING_INSTALLATION"
)

func (e *LifeCycleStateEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "STOPPED":
		fallthrough
	case "NOT_READY":
		fallthrough
	case "READY_FOR_TEST":
		fallthrough
	case "TESTING":
		fallthrough
	case "READY_FOR_CUTOVER":
		fallthrough
	case "CUTTING_OVER":
		fallthrough
	case "CUTOVER":
		fallthrough
	case "DISCONNECTED":
		fallthrough
	case "DISCOVERED":
		fallthrough
	case "PENDING_INSTALLATION":
		*e = LifeCycleStateEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for LifeCycleStateEnum: %s", s)
	}
}
