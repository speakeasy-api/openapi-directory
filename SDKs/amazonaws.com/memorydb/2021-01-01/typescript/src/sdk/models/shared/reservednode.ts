/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { RecurringCharge } from "./recurringcharge";
import { Expose, Transform, Type } from "class-transformer";

/**
 * Represents the output of a <code>PurchaseReservedNodesOffering</code> operation.
 */
export class ReservedNode extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "ARN" })
  arn?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "Duration" })
  duration?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "FixedPrice" })
  fixedPrice?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "NodeCount" })
  nodeCount?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "NodeType" })
  nodeType?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "OfferingType" })
  offeringType?: string;

  @SpeakeasyMetadata({ elemType: RecurringCharge })
  @Expose({ name: "RecurringCharges" })
  @Type(() => RecurringCharge)
  recurringCharges?: RecurringCharge[];

  @SpeakeasyMetadata()
  @Expose({ name: "ReservationId" })
  reservationId?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "ReservedNodesOfferingId" })
  reservedNodesOfferingId?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "StartTime" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  startTime?: Date;

  @SpeakeasyMetadata()
  @Expose({ name: "State" })
  state?: string;
}
