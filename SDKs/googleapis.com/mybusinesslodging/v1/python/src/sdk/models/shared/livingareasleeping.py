"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class LivingAreaSleepingBedsCountExceptionEnum(str, Enum):
    r"""Beds count exception."""
    EXCEPTION_UNSPECIFIED = 'EXCEPTION_UNSPECIFIED'
    UNDER_CONSTRUCTION = 'UNDER_CONSTRUCTION'
    DEPENDENT_ON_SEASON = 'DEPENDENT_ON_SEASON'
    DEPENDENT_ON_DAY_OF_WEEK = 'DEPENDENT_ON_DAY_OF_WEEK'

class LivingAreaSleepingBunkBedsCountExceptionEnum(str, Enum):
    r"""Bunk beds count exception."""
    EXCEPTION_UNSPECIFIED = 'EXCEPTION_UNSPECIFIED'
    UNDER_CONSTRUCTION = 'UNDER_CONSTRUCTION'
    DEPENDENT_ON_SEASON = 'DEPENDENT_ON_SEASON'
    DEPENDENT_ON_DAY_OF_WEEK = 'DEPENDENT_ON_DAY_OF_WEEK'

class LivingAreaSleepingCribsCountExceptionEnum(str, Enum):
    r"""Cribs count exception."""
    EXCEPTION_UNSPECIFIED = 'EXCEPTION_UNSPECIFIED'
    UNDER_CONSTRUCTION = 'UNDER_CONSTRUCTION'
    DEPENDENT_ON_SEASON = 'DEPENDENT_ON_SEASON'
    DEPENDENT_ON_DAY_OF_WEEK = 'DEPENDENT_ON_DAY_OF_WEEK'

class LivingAreaSleepingDoubleBedsCountExceptionEnum(str, Enum):
    r"""Double beds count exception."""
    EXCEPTION_UNSPECIFIED = 'EXCEPTION_UNSPECIFIED'
    UNDER_CONSTRUCTION = 'UNDER_CONSTRUCTION'
    DEPENDENT_ON_SEASON = 'DEPENDENT_ON_SEASON'
    DEPENDENT_ON_DAY_OF_WEEK = 'DEPENDENT_ON_DAY_OF_WEEK'

class LivingAreaSleepingFeatherPillowsExceptionEnum(str, Enum):
    r"""Feather pillows exception."""
    EXCEPTION_UNSPECIFIED = 'EXCEPTION_UNSPECIFIED'
    UNDER_CONSTRUCTION = 'UNDER_CONSTRUCTION'
    DEPENDENT_ON_SEASON = 'DEPENDENT_ON_SEASON'
    DEPENDENT_ON_DAY_OF_WEEK = 'DEPENDENT_ON_DAY_OF_WEEK'

class LivingAreaSleepingHypoallergenicBeddingExceptionEnum(str, Enum):
    r"""Hypoallergenic bedding exception."""
    EXCEPTION_UNSPECIFIED = 'EXCEPTION_UNSPECIFIED'
    UNDER_CONSTRUCTION = 'UNDER_CONSTRUCTION'
    DEPENDENT_ON_SEASON = 'DEPENDENT_ON_SEASON'
    DEPENDENT_ON_DAY_OF_WEEK = 'DEPENDENT_ON_DAY_OF_WEEK'

class LivingAreaSleepingKingBedsCountExceptionEnum(str, Enum):
    r"""King beds count exception."""
    EXCEPTION_UNSPECIFIED = 'EXCEPTION_UNSPECIFIED'
    UNDER_CONSTRUCTION = 'UNDER_CONSTRUCTION'
    DEPENDENT_ON_SEASON = 'DEPENDENT_ON_SEASON'
    DEPENDENT_ON_DAY_OF_WEEK = 'DEPENDENT_ON_DAY_OF_WEEK'

class LivingAreaSleepingMemoryFoamPillowsExceptionEnum(str, Enum):
    r"""Memory foam pillows exception."""
    EXCEPTION_UNSPECIFIED = 'EXCEPTION_UNSPECIFIED'
    UNDER_CONSTRUCTION = 'UNDER_CONSTRUCTION'
    DEPENDENT_ON_SEASON = 'DEPENDENT_ON_SEASON'
    DEPENDENT_ON_DAY_OF_WEEK = 'DEPENDENT_ON_DAY_OF_WEEK'

class LivingAreaSleepingOtherBedsCountExceptionEnum(str, Enum):
    r"""Other beds count exception."""
    EXCEPTION_UNSPECIFIED = 'EXCEPTION_UNSPECIFIED'
    UNDER_CONSTRUCTION = 'UNDER_CONSTRUCTION'
    DEPENDENT_ON_SEASON = 'DEPENDENT_ON_SEASON'
    DEPENDENT_ON_DAY_OF_WEEK = 'DEPENDENT_ON_DAY_OF_WEEK'

class LivingAreaSleepingQueenBedsCountExceptionEnum(str, Enum):
    r"""Queen beds count exception."""
    EXCEPTION_UNSPECIFIED = 'EXCEPTION_UNSPECIFIED'
    UNDER_CONSTRUCTION = 'UNDER_CONSTRUCTION'
    DEPENDENT_ON_SEASON = 'DEPENDENT_ON_SEASON'
    DEPENDENT_ON_DAY_OF_WEEK = 'DEPENDENT_ON_DAY_OF_WEEK'

class LivingAreaSleepingRollAwayBedsCountExceptionEnum(str, Enum):
    r"""Roll away beds count exception."""
    EXCEPTION_UNSPECIFIED = 'EXCEPTION_UNSPECIFIED'
    UNDER_CONSTRUCTION = 'UNDER_CONSTRUCTION'
    DEPENDENT_ON_SEASON = 'DEPENDENT_ON_SEASON'
    DEPENDENT_ON_DAY_OF_WEEK = 'DEPENDENT_ON_DAY_OF_WEEK'

class LivingAreaSleepingSingleOrTwinBedsCountExceptionEnum(str, Enum):
    r"""Single or twin beds count exception."""
    EXCEPTION_UNSPECIFIED = 'EXCEPTION_UNSPECIFIED'
    UNDER_CONSTRUCTION = 'UNDER_CONSTRUCTION'
    DEPENDENT_ON_SEASON = 'DEPENDENT_ON_SEASON'
    DEPENDENT_ON_DAY_OF_WEEK = 'DEPENDENT_ON_DAY_OF_WEEK'

class LivingAreaSleepingSofaBedsCountExceptionEnum(str, Enum):
    r"""Sofa beds count exception."""
    EXCEPTION_UNSPECIFIED = 'EXCEPTION_UNSPECIFIED'
    UNDER_CONSTRUCTION = 'UNDER_CONSTRUCTION'
    DEPENDENT_ON_SEASON = 'DEPENDENT_ON_SEASON'
    DEPENDENT_ON_DAY_OF_WEEK = 'DEPENDENT_ON_DAY_OF_WEEK'

class LivingAreaSleepingSyntheticPillowsExceptionEnum(str, Enum):
    r"""Synthetic pillows exception."""
    EXCEPTION_UNSPECIFIED = 'EXCEPTION_UNSPECIFIED'
    UNDER_CONSTRUCTION = 'UNDER_CONSTRUCTION'
    DEPENDENT_ON_SEASON = 'DEPENDENT_ON_SEASON'
    DEPENDENT_ON_DAY_OF_WEEK = 'DEPENDENT_ON_DAY_OF_WEEK'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class LivingAreaSleeping:
    r"""Information about sleeping features in the living area."""
    
    beds_count: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bedsCount'), 'exclude': lambda f: f is None }})
    r"""Beds count. The number of permanent beds present in a guestroom. Does not include rollaway beds, cribs or sofabeds."""  
    beds_count_exception: Optional[LivingAreaSleepingBedsCountExceptionEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bedsCountException'), 'exclude': lambda f: f is None }})
    r"""Beds count exception."""  
    bunk_beds_count: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bunkBedsCount'), 'exclude': lambda f: f is None }})
    r"""Bunk beds count. The number of furniture pieces in which one framed mattress is fixed directly above another by means of a physical frame. This allows one person(s) to sleep in the bottom bunk and one person(s) to sleep in the top bunk. Also known as double decker bed."""  
    bunk_beds_count_exception: Optional[LivingAreaSleepingBunkBedsCountExceptionEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bunkBedsCountException'), 'exclude': lambda f: f is None }})
    r"""Bunk beds count exception."""  
    cribs_count: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cribsCount'), 'exclude': lambda f: f is None }})
    r"""Cribs count. The number of small beds for an infant or toddler that the guestroom can obtain. The bed is surrounded by a high railing to prevent the child from falling or climbing out of the bed"""  
    cribs_count_exception: Optional[LivingAreaSleepingCribsCountExceptionEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cribsCountException'), 'exclude': lambda f: f is None }})
    r"""Cribs count exception."""  
    double_beds_count: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('doubleBedsCount'), 'exclude': lambda f: f is None }})
    r"""Double beds count. The number of medium beds measuring 53\\"W x 75\\"L (135cm x 191cm). Also known as full size bed."""  
    double_beds_count_exception: Optional[LivingAreaSleepingDoubleBedsCountExceptionEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('doubleBedsCountException'), 'exclude': lambda f: f is None }})
    r"""Double beds count exception."""  
    feather_pillows: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('featherPillows'), 'exclude': lambda f: f is None }})
    r"""Feather pillows. The option for guests to obtain bed pillows that are stuffed with the feathers and down of ducks or geese."""  
    feather_pillows_exception: Optional[LivingAreaSleepingFeatherPillowsExceptionEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('featherPillowsException'), 'exclude': lambda f: f is None }})
    r"""Feather pillows exception."""  
    hypoallergenic_bedding: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('hypoallergenicBedding'), 'exclude': lambda f: f is None }})
    r"""Hypoallergenic bedding. Bedding such as linens, pillows, mattress covers and/or mattresses that are made of materials known to be resistant to allergens such as mold, dust and dander."""  
    hypoallergenic_bedding_exception: Optional[LivingAreaSleepingHypoallergenicBeddingExceptionEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('hypoallergenicBeddingException'), 'exclude': lambda f: f is None }})
    r"""Hypoallergenic bedding exception."""  
    king_beds_count: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('kingBedsCount'), 'exclude': lambda f: f is None }})
    r"""King beds count. The number of large beds measuring 76\\"W x 80\\"L (193cm x 102cm). Most often meant to accompany two people. Includes California king and super king."""  
    king_beds_count_exception: Optional[LivingAreaSleepingKingBedsCountExceptionEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('kingBedsCountException'), 'exclude': lambda f: f is None }})
    r"""King beds count exception."""  
    memory_foam_pillows: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('memoryFoamPillows'), 'exclude': lambda f: f is None }})
    r"""Memory foam pillows. The option for guests to obtain bed pillows that are stuffed with a man-made foam that responds to body heat by conforming to the body closely, and then recovers its shape when the pillow cools down."""  
    memory_foam_pillows_exception: Optional[LivingAreaSleepingMemoryFoamPillowsExceptionEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('memoryFoamPillowsException'), 'exclude': lambda f: f is None }})
    r"""Memory foam pillows exception."""  
    other_beds_count: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('otherBedsCount'), 'exclude': lambda f: f is None }})
    r"""Other beds count. The number of beds that are not standard mattress and boxspring setups such as Japanese tatami mats, trundle beds, air mattresses and cots."""  
    other_beds_count_exception: Optional[LivingAreaSleepingOtherBedsCountExceptionEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('otherBedsCountException'), 'exclude': lambda f: f is None }})
    r"""Other beds count exception."""  
    queen_beds_count: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('queenBedsCount'), 'exclude': lambda f: f is None }})
    r"""Queen beds count. The number of medium-large beds measuring 60\\"W x 80\\"L (152cm x 102cm)."""  
    queen_beds_count_exception: Optional[LivingAreaSleepingQueenBedsCountExceptionEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('queenBedsCountException'), 'exclude': lambda f: f is None }})
    r"""Queen beds count exception."""  
    roll_away_beds_count: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('rollAwayBedsCount'), 'exclude': lambda f: f is None }})
    r"""Roll away beds count. The number of mattresses on wheeled frames that can be folded in half and rolled away for easy storage that the guestroom can obtain upon request."""  
    roll_away_beds_count_exception: Optional[LivingAreaSleepingRollAwayBedsCountExceptionEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('rollAwayBedsCountException'), 'exclude': lambda f: f is None }})
    r"""Roll away beds count exception."""  
    single_or_twin_beds_count: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('singleOrTwinBedsCount'), 'exclude': lambda f: f is None }})
    r"""Single or twin count beds. The number of smaller beds measuring 38\\"W x 75\\"L (97cm x 191cm) that can accommodate one adult."""  
    single_or_twin_beds_count_exception: Optional[LivingAreaSleepingSingleOrTwinBedsCountExceptionEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('singleOrTwinBedsCountException'), 'exclude': lambda f: f is None }})
    r"""Single or twin beds count exception."""  
    sofa_beds_count: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sofaBedsCount'), 'exclude': lambda f: f is None }})
    r"""Sofa beds count. The number of specially designed sofas that can be made to serve as a bed by lowering its hinged upholstered back to horizontal position or by pulling out a concealed mattress."""  
    sofa_beds_count_exception: Optional[LivingAreaSleepingSofaBedsCountExceptionEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sofaBedsCountException'), 'exclude': lambda f: f is None }})
    r"""Sofa beds count exception."""  
    synthetic_pillows: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('syntheticPillows'), 'exclude': lambda f: f is None }})
    r"""Synthetic pillows. The option for guests to obtain bed pillows stuffed with polyester material crafted to reproduce the feel of a pillow stuffed with down and feathers."""  
    synthetic_pillows_exception: Optional[LivingAreaSleepingSyntheticPillowsExceptionEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('syntheticPillowsException'), 'exclude': lambda f: f is None }})
    r"""Synthetic pillows exception."""  
    