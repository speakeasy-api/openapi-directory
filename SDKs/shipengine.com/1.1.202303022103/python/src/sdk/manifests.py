"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Any, Optional

class Manifests:
    r"""manifests"""
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def create_manifest(self, request: Any) -> operations.CreateManifestResponse:
        r"""Create Manifest
        Each ShipEngine manifest is created for a specific warehouse, so you'll need to provide the warehouse_id
        rather than the ship_from address. You can create a warehouse for each location that you want to create manifests for.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v1/manifests'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateManifestResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.CreateManifestResponseBody])
                res.create_manifest_response_body = out
        elif http_res.status_code in [400, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorResponseBody])
                res.error_response_body = out

        return res

    def get_manifest_by_id(self, request: operations.GetManifestByIDRequest) -> operations.GetManifestByIDResponse:
        r"""Get Manifest By Id
        Get Manifest By Id
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetManifestByIDRequest, base_url, '/v1/manifests/{manifest_id}', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetManifestByIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GetManifestByIDResponseBody])
                res.get_manifest_by_id_response_body = out
        elif http_res.status_code in [400, 404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorResponseBody])
                res.error_response_body = out

        return res

    def get_manifest_request_by_id(self, request: operations.GetManifestRequestByIDRequest) -> operations.GetManifestRequestByIDResponse:
        r"""Get Manifest Request By Id
        Get Manifest Request By Id
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetManifestRequestByIDRequest, base_url, '/v1/manifests/requests/{manifest_request_id}', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetManifestRequestByIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.CreateManifestResponseBody])
                res.create_manifest_response_body = out
        elif http_res.status_code in [400, 404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorResponseBody])
                res.error_response_body = out

        return res

    def list_manifests(self, request: operations.ListManifestsRequest) -> operations.ListManifestsResponse:
        r"""List Manifests
        Similar to querying shipments, we allow you to query manifests since there will likely be a large number over a long period of time.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v1/manifests'
        
        query_params = utils.get_query_params(operations.ListManifestsRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ListManifestsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ListManifestsResponseBody])
                res.list_manifests_response_body = out
        elif http_res.status_code in [400, 404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorResponseBody])
                res.error_response_body = out

        return res

    