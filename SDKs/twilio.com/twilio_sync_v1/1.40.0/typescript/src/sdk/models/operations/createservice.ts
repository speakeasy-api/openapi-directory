/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
export const CreateServiceServerList = ["https://sync.twilio.com"] as const;

export class CreateServiceSecurity extends SpeakeasyBase {
  @SpeakeasyMetadata({
    data: "security, scheme=true;type=http;subtype=basic;name=password",
  })
  password: string;

  @SpeakeasyMetadata({
    data: "security, scheme=true;type=http;subtype=basic;name=username",
  })
  username: string;
}

export class CreateServiceCreateServiceRequest extends SpeakeasyBase {
  /**
   * Whether token identities in the Service must be granted access to Sync objects by using the [Permissions](https://www.twilio.com/docs/sync/api/sync-permissions) resource.
   */
  @SpeakeasyMetadata({ data: "form, name=AclEnabled" })
  aclEnabled?: boolean;

  /**
   * A string that you assign to describe the resource.
   */
  @SpeakeasyMetadata({ data: "form, name=FriendlyName" })
  friendlyName?: string;

  /**
   * Whether every `endpoint_disconnected` event should occur after a configurable delay. The default is `false`, where the `endpoint_disconnected` event occurs immediately after disconnection. When `true`, intervening reconnections can prevent the `endpoint_disconnected` event.
   */
  @SpeakeasyMetadata({ data: "form, name=ReachabilityDebouncingEnabled" })
  reachabilityDebouncingEnabled?: boolean;

  /**
   * The reachability event delay in milliseconds if `reachability_debouncing_enabled` = `true`.  Must be between 1,000 and 30,000 and defaults to 5,000. This is the number of milliseconds after the last running client disconnects, and a Sync identity is declared offline, before the `webhook_url` is called if all endpoints remain offline. A reconnection from the same identity by any endpoint during this interval prevents the call to `webhook_url`.
   */
  @SpeakeasyMetadata({ data: "form, name=ReachabilityDebouncingWindow" })
  reachabilityDebouncingWindow?: number;

  /**
   * Whether the service instance should call `webhook_url` when client endpoints connect to Sync. The default is `false`.
   */
  @SpeakeasyMetadata({ data: "form, name=ReachabilityWebhooksEnabled" })
  reachabilityWebhooksEnabled?: boolean;

  /**
   * The URL we should call when Sync objects are manipulated.
   */
  @SpeakeasyMetadata({ data: "form, name=WebhookUrl" })
  webhookUrl?: string;

  /**
   * Whether the Service instance should call `webhook_url` when the REST API is used to update Sync objects. The default is `false`.
   */
  @SpeakeasyMetadata({ data: "form, name=WebhooksFromRestEnabled" })
  webhooksFromRestEnabled?: boolean;
}

export class CreateServiceResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * Created
   */
  @SpeakeasyMetadata()
  syncV1Service?: shared.SyncV1Service;
}
