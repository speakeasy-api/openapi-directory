// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type CodeScanningListAlertsForOrgPathParams struct {
	// The organization name. The name is not case sensitive.
	Org string `pathParam:"style=simple,explode=false,name=org"`
}

// CodeScanningListAlertsForOrgSortEnum - The property by which to sort the results.
type CodeScanningListAlertsForOrgSortEnum string

const (
	CodeScanningListAlertsForOrgSortEnumCreated CodeScanningListAlertsForOrgSortEnum = "created"
	CodeScanningListAlertsForOrgSortEnumUpdated CodeScanningListAlertsForOrgSortEnum = "updated"
)

func (e *CodeScanningListAlertsForOrgSortEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "created":
		fallthrough
	case "updated":
		*e = CodeScanningListAlertsForOrgSortEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CodeScanningListAlertsForOrgSortEnum: %s", s)
	}
}

type CodeScanningListAlertsForOrgQueryParams struct {
	// A cursor, as given in the [Link header](https://docs.github.com/enterprise-server@3.7/rest/overview/resources-in-the-rest-api#link-header). If specified, the query only searches for results after this cursor.
	After *string `queryParam:"style=form,explode=true,name=after"`
	// A cursor, as given in the [Link header](https://docs.github.com/enterprise-server@3.7/rest/overview/resources-in-the-rest-api#link-header). If specified, the query only searches for results before this cursor.
	Before *string `queryParam:"style=form,explode=true,name=before"`
	// The direction to sort the results by.
	Direction *shared.DirectionEnum `queryParam:"style=form,explode=true,name=direction"`
	// Page number of the results to fetch.
	Page *int64 `queryParam:"style=form,explode=true,name=page"`
	// The number of results per page (max 100).
	PerPage *int64 `queryParam:"style=form,explode=true,name=per_page"`
	// The property by which to sort the results.
	Sort *CodeScanningListAlertsForOrgSortEnum `queryParam:"style=form,explode=true,name=sort"`
	// If specified, only code scanning alerts with this state will be returned.
	State *shared.CodeScanningAlertStateEnum `queryParam:"style=form,explode=true,name=state"`
	// The GUID of a code scanning tool. Only results by this tool will be listed. Note that some code scanning tools may not include a GUID in their analysis data. You can specify the tool by using either `tool_guid` or `tool_name`, but not both.
	ToolGUID *string `queryParam:"style=form,explode=true,name=tool_guid"`
	// The name of a code scanning tool. Only results by this tool will be listed. You can specify the tool by using either `tool_name` or `tool_guid`, but not both.
	ToolName *string `queryParam:"style=form,explode=true,name=tool_name"`
}

type CodeScanningListAlertsForOrgRequest struct {
	PathParams  CodeScanningListAlertsForOrgPathParams
	QueryParams CodeScanningListAlertsForOrgQueryParams
}

// CodeScanningListAlertsForOrg503ApplicationJSON - Service unavailable
type CodeScanningListAlertsForOrg503ApplicationJSON struct {
	Code             *string `json:"code,omitempty"`
	DocumentationURL *string `json:"documentation_url,omitempty"`
	Message          *string `json:"message,omitempty"`
}

type CodeScanningListAlertsForOrgResponse struct {
	ContentType string
	Headers     map[string][]string
	StatusCode  int
	RawResponse *http.Response
	// Resource not found
	BasicError *shared.BasicError
	// Response
	CodeScanningOrganizationAlertItems []shared.CodeScanningOrganizationAlertItems
	// Service unavailable
	CodeScanningListAlertsForOrg503ApplicationJSONObject *CodeScanningListAlertsForOrg503ApplicationJSON
}
