"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class ObservationHeadingController:
    r"""Observation Heading Controller"""
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def get_available_observation_headings(self, request: operations.GetAvailableObservationHeadingsRequest) -> operations.GetAvailableObservationHeadingsResponse:
        r"""Get Available Observations Types For a User
        Given a User ID retrieve a list of available observation types for that user (where they have observation data).
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetAvailableObservationHeadingsRequest, base_url, '/user/{userId}/availableobservationheadings', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetAvailableObservationHeadingsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.ObservationHeading]])
                res.observation_headings = out
        elif http_res.status_code in [401, 403, 404]:
            pass

        return res

    def get_patient_entered_observation_headings(self, request: operations.GetPatientEnteredObservationHeadingsRequest) -> operations.GetPatientEnteredObservationHeadingsResponse:
        r"""Get Available Patient Entered Observations Types For a User
        Given a User ID retrieve a list of available observation types for that user (where they have patient entered observation data).
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetPatientEnteredObservationHeadingsRequest, base_url, '/user/{userId}/patiententeredobservationheadings', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetPatientEnteredObservationHeadingsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.ObservationHeading]])
                res.observation_headings = out
        elif http_res.status_code in [401, 403, 404]:
            pass

        return res

    