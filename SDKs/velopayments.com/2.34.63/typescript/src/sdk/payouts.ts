/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

/**
 * <p>Payout APIs allow you to create and instruct payouts to payees</p>
 *
 * @remarks
 * <p>There are three phases to a payout:</p>
 * <ul>
 *     <li>Submit - the payments are created within the platform</li>
 *     <li>Quote - optional step if FX is involved</li>
 *     <li>Instruct - the payments are sent to the payment rails for processing</li>
 * </ul>
 * <p>Between 1 and 2000 payments can be created within the platform as part of a Payout</p>
 *
 */
export class Payouts {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Create a quote for the payout
   *
   * @remarks
   * Create quote for a payout
   */
  createQuoteForPayoutV3(
    req: operations.CreateQuoteForPayoutV3Request,
    config?: AxiosRequestConfig
  ): Promise<operations.CreateQuoteForPayoutV3Response> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.CreateQuoteForPayoutV3Request(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v3/payouts/{payoutId}/quote",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "post",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.CreateQuoteForPayoutV3Response =
        new operations.CreateQuoteForPayoutV3Response({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.quoteResponseV3 = utils.objectToClass(
              httpRes?.data,
              shared.QuoteResponseV3
            );
          }
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.inlineResponse404 = utils.objectToClass(
              httpRes?.data,
              shared.InlineResponse404
            );
          }
          break;
        case httpRes?.status == 409:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.inlineResponse409 = utils.objectToClass(
              httpRes?.data,
              shared.InlineResponse409
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Deschedule a payout
   *
   * @remarks
   * Remove the schedule for a scheduled payout
   */
  deschedulePayout(
    req: operations.DeschedulePayoutRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.DeschedulePayoutResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DeschedulePayoutRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v3/payouts/{payoutId}/schedule",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DeschedulePayoutResponse =
        new operations.DeschedulePayoutResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 204:
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.inlineResponse401 = utils.objectToClass(
              httpRes?.data,
              shared.InlineResponse401
            );
          }
          break;
        case httpRes?.status == 403:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.inlineResponse403 = utils.objectToClass(
              httpRes?.data,
              shared.InlineResponse403
            );
          }
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.inlineResponse404 = utils.objectToClass(
              httpRes?.data,
              shared.InlineResponse404
            );
          }
          break;
        case httpRes?.status == 409:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.inlineResponse409 = utils.objectToClass(
              httpRes?.data,
              shared.InlineResponse409
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Retrieve payments for a payout
   *
   * @remarks
   * Retrieve payments for a payout
   */
  getPaymentsForPayoutV3(
    req: operations.GetPaymentsForPayoutV3Request,
    config?: AxiosRequestConfig
  ): Promise<operations.GetPaymentsForPayoutV3Response> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetPaymentsForPayoutV3Request(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v3/payouts/{payoutId}/payments",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetPaymentsForPayoutV3Response =
        new operations.GetPaymentsForPayoutV3Response({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.pagedPaymentsResponseV3 = utils.objectToClass(
              httpRes?.data,
              shared.PagedPaymentsResponseV3
            );
          }
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.inlineResponse404 = utils.objectToClass(
              httpRes?.data,
              shared.InlineResponse404
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get Payout Summary
   *
   * @remarks
   * Get payout summary - returns the current state of the payout.
   */
  getPayoutSummaryV3(
    req: operations.GetPayoutSummaryV3Request,
    config?: AxiosRequestConfig
  ): Promise<operations.GetPayoutSummaryV3Response> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetPayoutSummaryV3Request(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v3/payouts/{payoutId}",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetPayoutSummaryV3Response =
        new operations.GetPayoutSummaryV3Response({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.payoutSummaryResponseV3 = utils.objectToClass(
              httpRes?.data,
              shared.PayoutSummaryResponseV3
            );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.inlineResponse401 = utils.objectToClass(
              httpRes?.data,
              shared.InlineResponse401
            );
          }
          break;
        case httpRes?.status == 403:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.inlineResponse403 = utils.objectToClass(
              httpRes?.data,
              shared.InlineResponse403
            );
          }
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.inlineResponse404 = utils.objectToClass(
              httpRes?.data,
              shared.InlineResponse404
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Instruct Payout
   *
   * @remarks
   * Instruct a payout to be made for the specified payoutId.
   */
  instructPayoutV3(
    req: operations.InstructPayoutV3Request,
    config?: AxiosRequestConfig
  ): Promise<operations.InstructPayoutV3Response> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.InstructPayoutV3Request(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v3/payouts/{payoutId}",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "instructPayoutRequestV3",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.InstructPayoutV3Response =
        new operations.InstructPayoutV3Response({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 202:
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.inlineResponse400 = utils.objectToClass(
              httpRes?.data,
              shared.InlineResponse400
            );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.inlineResponse401 = utils.objectToClass(
              httpRes?.data,
              shared.InlineResponse401
            );
          }
          break;
        case httpRes?.status == 403:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.inlineResponse403 = utils.objectToClass(
              httpRes?.data,
              shared.InlineResponse403
            );
          }
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.inlineResponse404 = utils.objectToClass(
              httpRes?.data,
              shared.InlineResponse404
            );
          }
          break;
        case httpRes?.status == 409:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.inlineResponse409 = utils.objectToClass(
              httpRes?.data,
              shared.InlineResponse409
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Schedule a payout
   *
   * @remarks
   * <p>Schedule a payout for auto-instruction in the future
   * or update existing payout schedule if the payout has been scheduled before.</p>
   *
   */
  scheduleForPayout(
    req: operations.ScheduleForPayoutRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.ScheduleForPayoutResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ScheduleForPayoutRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v3/payouts/{payoutId}/schedule",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "schedulePayoutRequestV3",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ScheduleForPayoutResponse =
        new operations.ScheduleForPayoutResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 204:
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.inlineResponse400 = utils.objectToClass(
              httpRes?.data,
              shared.InlineResponse400
            );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.inlineResponse401 = utils.objectToClass(
              httpRes?.data,
              shared.InlineResponse401
            );
          }
          break;
        case httpRes?.status == 403:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.inlineResponse403 = utils.objectToClass(
              httpRes?.data,
              shared.InlineResponse403
            );
          }
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.inlineResponse404 = utils.objectToClass(
              httpRes?.data,
              shared.InlineResponse404
            );
          }
          break;
        case httpRes?.status == 409:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.inlineResponse409 = utils.objectToClass(
              httpRes?.data,
              shared.InlineResponse409
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Submit Payout
   *
   * @remarks
   * <p>Create a new payout and return a location header with a link to the payout</p>
   * <p>Basic validation of the payout is performed before returning but more comprehensive validation is done asynchronously</p>
   * <p>The results can be obtained by issuing a HTTP GET to the URL returned in the location header</p>
   * <p>**NOTE:** amount values in payments must be in 'minor units' format. E.g. cents for USD, pence for GBP etc with no decimal places</p>
   *
   */
  submitPayoutV3Json(
    req: shared.CreatePayoutRequestV3,
    config?: AxiosRequestConfig
  ): Promise<operations.SubmitPayoutV3JsonResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new shared.CreatePayoutRequestV3(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/v3/payouts";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.SubmitPayoutV3JsonResponse =
        new operations.SubmitPayoutV3JsonResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
          headers: utils.getHeadersFromResponse(httpRes.headers),
        });
      switch (true) {
        case httpRes?.status == 202:
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.inlineResponse400 = utils.objectToClass(
              httpRes?.data,
              shared.InlineResponse400
            );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.inlineResponse401 = utils.objectToClass(
              httpRes?.data,
              shared.InlineResponse401
            );
          }
          break;
        case httpRes?.status == 403:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.inlineResponse403 = utils.objectToClass(
              httpRes?.data,
              shared.InlineResponse403
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Submit Payout
   *
   * @remarks
   * <p>Create a new payout and return a location header with a link to the payout</p>
   * <p>Basic validation of the payout is performed before returning but more comprehensive validation is done asynchronously</p>
   * <p>The results can be obtained by issuing a HTTP GET to the URL returned in the location header</p>
   * <p>**NOTE:** amount values in payments must be in 'minor units' format. E.g. cents for USD, pence for GBP etc with no decimal places</p>
   *
   */
  submitPayoutV3Multipart(
    req: operations.SubmitPayoutV3MultipartFormData,
    config?: AxiosRequestConfig
  ): Promise<operations.SubmitPayoutV3MultipartResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.SubmitPayoutV3MultipartFormData(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/v3/payouts";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "multipart"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.SubmitPayoutV3MultipartResponse =
        new operations.SubmitPayoutV3MultipartResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
          headers: utils.getHeadersFromResponse(httpRes.headers),
        });
      switch (true) {
        case httpRes?.status == 202:
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.inlineResponse400 = utils.objectToClass(
              httpRes?.data,
              shared.InlineResponse400
            );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.inlineResponse401 = utils.objectToClass(
              httpRes?.data,
              shared.InlineResponse401
            );
          }
          break;
        case httpRes?.status == 403:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.inlineResponse403 = utils.objectToClass(
              httpRes?.data,
              shared.InlineResponse403
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Withdraw a Payment
   *
   * @remarks
   * <p>withdraw a payment </p>
   * <p>There are a variety of reasons why this can fail</p>
   * <ul>
   *     <li>the payment must be in a state of 'accepted' or 'unfunded'</li>
   *     <li>the payout must not be in a state of 'instructed'</li>
   * </ul>
   *
   */
  withdrawPayment(
    req: operations.WithdrawPaymentRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.WithdrawPaymentResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.WithdrawPaymentRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/payments/{paymentId}/withdraw",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "withdrawPaymentRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.WithdrawPaymentResponse =
        new operations.WithdrawPaymentResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 204:
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.inlineResponse400 = utils.objectToClass(
              httpRes?.data,
              shared.InlineResponse400
            );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.inlineResponse401 = utils.objectToClass(
              httpRes?.data,
              shared.InlineResponse401
            );
          }
          break;
        case httpRes?.status == 403:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.inlineResponse403 = utils.objectToClass(
              httpRes?.data,
              shared.InlineResponse403
            );
          }
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.inlineResponse404 = utils.objectToClass(
              httpRes?.data,
              shared.InlineResponse404
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Withdraw Payout
   *
   * @remarks
   * Withdraw Payout will remove the payout details from the rails but the payout will still be accessible in payout service in WITHDRAWN status.
   */
  withdrawPayoutV3(
    req: operations.WithdrawPayoutV3Request,
    config?: AxiosRequestConfig
  ): Promise<operations.WithdrawPayoutV3Response> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.WithdrawPayoutV3Request(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v3/payouts/{payoutId}",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.WithdrawPayoutV3Response =
        new operations.WithdrawPayoutV3Response({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 202:
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.inlineResponse400 = utils.objectToClass(
              httpRes?.data,
              shared.InlineResponse400
            );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.inlineResponse401 = utils.objectToClass(
              httpRes?.data,
              shared.InlineResponse401
            );
          }
          break;
        case httpRes?.status == 403:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.inlineResponse403 = utils.objectToClass(
              httpRes?.data,
              shared.InlineResponse403
            );
          }
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.inlineResponse404 = utils.objectToClass(
              httpRes?.data,
              shared.InlineResponse404
            );
          }
          break;
      }

      return res;
    });
  }
}
