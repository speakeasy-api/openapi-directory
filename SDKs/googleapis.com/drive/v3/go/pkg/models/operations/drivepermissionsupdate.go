// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"net/http"
	"openapi/pkg/models/shared"
)

type DrivePermissionsUpdateSecurityOption1 struct {
	Oauth2  shared.SchemeOauth2  `security:"scheme,type=oauth2"`
	Oauth2c shared.SchemeOauth2c `security:"scheme,type=oauth2"`
}

type DrivePermissionsUpdateSecurityOption2 struct {
	Oauth2  shared.SchemeOauth2  `security:"scheme,type=oauth2"`
	Oauth2c shared.SchemeOauth2c `security:"scheme,type=oauth2"`
}

type DrivePermissionsUpdateSecurity struct {
	Option1 *DrivePermissionsUpdateSecurityOption1 `security:"option"`
	Option2 *DrivePermissionsUpdateSecurityOption2 `security:"option"`
}

type DrivePermissionsUpdatePathParams struct {
	// The ID of the file or shared drive.
	FileID string `pathParam:"style=simple,explode=false,name=fileId"`
	// The ID of the permission.
	PermissionID string `pathParam:"style=simple,explode=false,name=permissionId"`
}

type DrivePermissionsUpdateQueryParams struct {
	// Data format for the response.
	Alt *shared.AltEnum `queryParam:"style=form,explode=true,name=alt"`
	// Selector specifying which fields to include in a partial response.
	Fields *string `queryParam:"style=form,explode=true,name=fields"`
	// API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
	Key *string `queryParam:"style=form,explode=true,name=key"`
	// OAuth 2.0 token for the current user.
	OauthToken *string `queryParam:"style=form,explode=true,name=oauth_token"`
	// Returns response with indentations and line breaks.
	PrettyPrint *bool `queryParam:"style=form,explode=true,name=prettyPrint"`
	// An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
	QuotaUser *string `queryParam:"style=form,explode=true,name=quotaUser"`
	// Whether to remove the expiration date.
	RemoveExpiration *bool `queryParam:"style=form,explode=true,name=removeExpiration"`
	// Whether the requesting application supports both My Drives and shared drives.
	SupportsAllDrives *bool `queryParam:"style=form,explode=true,name=supportsAllDrives"`
	// Deprecated use supportsAllDrives instead.
	SupportsTeamDrives *bool `queryParam:"style=form,explode=true,name=supportsTeamDrives"`
	// Whether to transfer ownership to the specified user and downgrade the current owner to a writer. This parameter is required as an acknowledgement of the side effect. File owners can only transfer ownership of files existing on My Drive. Files existing in a shared drive are owned by the organization that owns that shared drive. Ownership transfers are not supported for files and folders in shared drives. Organizers of a shared drive can move items from that shared drive into their My Drive which transfers the ownership to them.
	TransferOwnership *bool `queryParam:"style=form,explode=true,name=transferOwnership"`
	// Issue the request as a domain administrator; if set to true, then the requester will be granted access if the file ID parameter refers to a shared drive and the requester is an administrator of the domain to which the shared drive belongs.
	UseDomainAdminAccess *bool `queryParam:"style=form,explode=true,name=useDomainAdminAccess"`
	// Deprecated. Please use quotaUser instead.
	UserIP *string `queryParam:"style=form,explode=true,name=userIp"`
}

type DrivePermissionsUpdateRequest struct {
	PathParams  DrivePermissionsUpdatePathParams
	QueryParams DrivePermissionsUpdateQueryParams
	Request     *shared.PermissionInput `request:"mediaType=application/json"`
	Security    DrivePermissionsUpdateSecurity
}

type DrivePermissionsUpdateResponse struct {
	ContentType string
	// Successful response
	Permission  *shared.Permission
	StatusCode  int
	RawResponse *http.Response
}
