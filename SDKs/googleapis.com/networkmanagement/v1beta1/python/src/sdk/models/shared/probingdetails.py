"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import edgelocation as shared_edgelocation
from ..shared import endpointinfo as shared_endpointinfo
from ..shared import latencydistribution as shared_latencydistribution
from ..shared import status as shared_status
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class ProbingDetailsAbortCauseEnum(str, Enum):
    r"""The reason probing was aborted."""
    PROBING_ABORT_CAUSE_UNSPECIFIED = 'PROBING_ABORT_CAUSE_UNSPECIFIED'
    PERMISSION_DENIED = 'PERMISSION_DENIED'
    NO_SOURCE_LOCATION = 'NO_SOURCE_LOCATION'

class ProbingDetailsResultEnum(str, Enum):
    r"""The overall result of active probing."""
    PROBING_RESULT_UNSPECIFIED = 'PROBING_RESULT_UNSPECIFIED'
    REACHABLE = 'REACHABLE'
    UNREACHABLE = 'UNREACHABLE'
    REACHABILITY_INCONSISTENT = 'REACHABILITY_INCONSISTENT'
    UNDETERMINED = 'UNDETERMINED'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ProbingDetails:
    r"""Results of active probing from the last run of the test."""
    
    abort_cause: Optional[ProbingDetailsAbortCauseEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('abortCause'), 'exclude': lambda f: f is None }})
    r"""The reason probing was aborted."""  
    destination_egress_location: Optional[shared_edgelocation.EdgeLocation] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('destinationEgressLocation'), 'exclude': lambda f: f is None }})
    r"""Representation of a network edge location as per https://cloud.google.com/vpc/docs/edge-locations."""  
    endpoint_info: Optional[shared_endpointinfo.EndpointInfo] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('endpointInfo'), 'exclude': lambda f: f is None }})
    r"""For display only. The specification of the endpoints for the test. EndpointInfo is derived from source and destination Endpoint and validated by the backend data plane model."""  
    error: Optional[shared_status.Status] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('error'), 'exclude': lambda f: f is None }})
    r"""The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors)."""  
    probing_latency: Optional[shared_latencydistribution.LatencyDistribution] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('probingLatency'), 'exclude': lambda f: f is None }})
    r"""Describes measured latency distribution."""  
    result: Optional[ProbingDetailsResultEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('result'), 'exclude': lambda f: f is None }})
    r"""The overall result of active probing."""  
    sent_probe_count: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sentProbeCount'), 'exclude': lambda f: f is None }})
    r"""Number of probes sent."""  
    successful_probe_count: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('successfulProbeCount'), 'exclude': lambda f: f is None }})
    r"""Number of probes that reached the destination."""  
    verify_time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('verifyTime'), 'exclude': lambda f: f is None }})
    r"""The time that reachability was assessed through active probing."""  
    