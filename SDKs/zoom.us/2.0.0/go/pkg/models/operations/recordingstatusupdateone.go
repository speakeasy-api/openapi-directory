// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

type RecordingStatusUpdateOneSecurity struct {
	OAuth string `security:"scheme,type=oauth2,name=Authorization"`
}

type RecordingStatusUpdateOneApplicationJSONActionEnum string

const (
	RecordingStatusUpdateOneApplicationJSONActionEnumRecover RecordingStatusUpdateOneApplicationJSONActionEnum = "recover"
)

func (e *RecordingStatusUpdateOneApplicationJSONActionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "recover":
		*e = RecordingStatusUpdateOneApplicationJSONActionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for RecordingStatusUpdateOneApplicationJSONActionEnum: %s", s)
	}
}

type RecordingStatusUpdateOneApplicationJSON struct {
	Action *RecordingStatusUpdateOneApplicationJSONActionEnum `json:"action,omitempty"`
}

type RecordingStatusUpdateOneRequest struct {
	RequestBody RecordingStatusUpdateOneApplicationJSON `request:"mediaType=application/json"`
	// To get Cloud Recordings of a meeting, provide the meeting ID or meeting UUID. If the meeting ID is provided instead of UUID,the response will be for the latest meeting instance.
	//
	// To get Cloud Recordings of a webinar, provide the webinar ID or the webinar UUID. If the webinar ID is provided instead of UUID,the response will be for the latest webinar instance.
	//
	// If a UUID starts with "/" or contains "//" (example: "/ajXp112QmuoKj4854875=="), you must **double encode** the UUID before making an API request.
	MeetingID string `pathParam:"style=simple,explode=false,name=meetingId"`
	// The recording ID.
	RecordingID string `pathParam:"style=simple,explode=false,name=recordingId"`
}

type RecordingStatusUpdateOneResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
