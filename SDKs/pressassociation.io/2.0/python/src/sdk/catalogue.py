"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations
from typing import Any, Optional

class Catalogue:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def get_catalogue(self, request: operations.GetCatalogueRequest, security: operations.GetCatalogueSecurity) -> operations.GetCatalogueResponse:
        r"""Catalogue Detail
        Return the content of the selected catalogue.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetCatalogueRequest, base_url, '/catalogue/{catalogueId}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetCatalogueResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.get_catalogue_200_application_json_object = out

        return res

    def get_catalogue_asset(self, request: operations.GetCatalogueAssetRequest, security: operations.GetCatalogueAssetSecurity) -> operations.GetCatalogueAssetResponse:
        r"""Catalogue Asset Collection
        Return the content of the selected catalogue.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetCatalogueAssetRequest, base_url, '/catalogue/{catalogueId}/asset', request)
        
        query_params = utils.get_query_params(operations.GetCatalogueAssetRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetCatalogueAssetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.get_catalogue_asset_200_application_json_object = out

        return res

    def get_catalogue_asset_detail(self, request: operations.GetCatalogueAssetDetailRequest, security: operations.GetCatalogueAssetDetailSecurity) -> operations.GetCatalogueAssetDetailResponse:
        r"""Catalogue Asset Detail
        Return the content of the selected catalogue asset.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetCatalogueAssetDetailRequest, base_url, '/catalogue/{catalogueId}/asset/{assetId}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetCatalogueAssetDetailResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.get_catalogue_asset_detail_200_application_json_object = out

        return res

    def list_catalogues(self) -> operations.ListCataloguesResponse:
        r"""Catalogue Collection
        Return a collection of Catalogues.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/catalogue'
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ListCataloguesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.list_catalogues_200_application_json_object = out

        return res

    