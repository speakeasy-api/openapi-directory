<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

/**
 * SDK - This is the public Twilio REST API.
 * 
 * @package OpenAPI\OpenAPI
 * @access public
 */
class SDK
{
	public const SERVERS = [
		'https://preview.twilio.com',
	];
	
	public const CREATE_DEPLOYED_DEVICES_CERTIFICATE_SERVERS = [
		'https://preview.twilio.com',
	];
	
	public const CREATE_DEPLOYED_DEVICES_DEPLOYMENT_SERVERS = [
		'https://preview.twilio.com',
	];
	
	public const CREATE_DEPLOYED_DEVICES_DEVICE_SERVERS = [
		'https://preview.twilio.com',
	];
	
	public const CREATE_DEPLOYED_DEVICES_FLEET_SERVERS = [
		'https://preview.twilio.com',
	];
	
	public const CREATE_DEPLOYED_DEVICES_KEY_SERVERS = [
		'https://preview.twilio.com',
	];
	
	public const CREATE_HOSTED_NUMBERS_AUTHORIZATION_DOCUMENT_SERVERS = [
		'https://preview.twilio.com',
	];
	
	public const CREATE_HOSTED_NUMBERS_HOSTED_NUMBER_ORDER_SERVERS = [
		'https://preview.twilio.com',
	];
	
	public const CREATE_MARKETPLACE_INSTALLED_ADD_ON_SERVERS = [
		'https://preview.twilio.com',
	];
	
	public const CREATE_SYNC_DOCUMENT_SERVERS = [
		'https://preview.twilio.com',
	];
	
	public const CREATE_SYNC_SERVICE_SERVERS = [
		'https://preview.twilio.com',
	];
	
	public const CREATE_SYNC_SYNC_LIST_SERVERS = [
		'https://preview.twilio.com',
	];
	
	public const CREATE_SYNC_SYNC_LIST_ITEM_SERVERS = [
		'https://preview.twilio.com',
	];
	
	public const CREATE_SYNC_SYNC_MAP_SERVERS = [
		'https://preview.twilio.com',
	];
	
	public const CREATE_SYNC_SYNC_MAP_ITEM_SERVERS = [
		'https://preview.twilio.com',
	];
	
	public const CREATE_UNDERSTAND_ASSISTANT_SERVERS = [
		'https://preview.twilio.com',
	];
	
	public const CREATE_UNDERSTAND_FIELD_SERVERS = [
		'https://preview.twilio.com',
	];
	
	public const CREATE_UNDERSTAND_FIELD_TYPE_SERVERS = [
		'https://preview.twilio.com',
	];
	
	public const CREATE_UNDERSTAND_FIELD_VALUE_SERVERS = [
		'https://preview.twilio.com',
	];
	
	public const CREATE_UNDERSTAND_MODEL_BUILD_SERVERS = [
		'https://preview.twilio.com',
	];
	
	public const CREATE_UNDERSTAND_QUERY_SERVERS = [
		'https://preview.twilio.com',
	];
	
	public const CREATE_UNDERSTAND_SAMPLE_SERVERS = [
		'https://preview.twilio.com',
	];
	
	public const CREATE_UNDERSTAND_TASK_SERVERS = [
		'https://preview.twilio.com',
	];
	
	public const CREATE_WIRELESS_COMMAND_SERVERS = [
		'https://preview.twilio.com',
	];
	
	public const CREATE_WIRELESS_RATE_PLAN_SERVERS = [
		'https://preview.twilio.com',
	];
	
	public const DELETE_DEPLOYED_DEVICES_CERTIFICATE_SERVERS = [
		'https://preview.twilio.com',
	];
	
	public const DELETE_DEPLOYED_DEVICES_DEPLOYMENT_SERVERS = [
		'https://preview.twilio.com',
	];
	
	public const DELETE_DEPLOYED_DEVICES_DEVICE_SERVERS = [
		'https://preview.twilio.com',
	];
	
	public const DELETE_DEPLOYED_DEVICES_FLEET_SERVERS = [
		'https://preview.twilio.com',
	];
	
	public const DELETE_DEPLOYED_DEVICES_KEY_SERVERS = [
		'https://preview.twilio.com',
	];
	
	public const DELETE_HOSTED_NUMBERS_HOSTED_NUMBER_ORDER_SERVERS = [
		'https://preview.twilio.com',
	];
	
	public const DELETE_MARKETPLACE_INSTALLED_ADD_ON_SERVERS = [
		'https://preview.twilio.com',
	];
	
	public const DELETE_SYNC_DOCUMENT_SERVERS = [
		'https://preview.twilio.com',
	];
	
	public const DELETE_SYNC_DOCUMENT_PERMISSION_SERVERS = [
		'https://preview.twilio.com',
	];
	
	public const DELETE_SYNC_SERVICE_SERVERS = [
		'https://preview.twilio.com',
	];
	
	public const DELETE_SYNC_SYNC_LIST_SERVERS = [
		'https://preview.twilio.com',
	];
	
	public const DELETE_SYNC_SYNC_LIST_ITEM_SERVERS = [
		'https://preview.twilio.com',
	];
	
	public const DELETE_SYNC_SYNC_LIST_PERMISSION_SERVERS = [
		'https://preview.twilio.com',
	];
	
	public const DELETE_SYNC_SYNC_MAP_SERVERS = [
		'https://preview.twilio.com',
	];
	
	public const DELETE_SYNC_SYNC_MAP_ITEM_SERVERS = [
		'https://preview.twilio.com',
	];
	
	public const DELETE_SYNC_SYNC_MAP_PERMISSION_SERVERS = [
		'https://preview.twilio.com',
	];
	
	public const DELETE_UNDERSTAND_ASSISTANT_SERVERS = [
		'https://preview.twilio.com',
	];
	
	public const DELETE_UNDERSTAND_FIELD_SERVERS = [
		'https://preview.twilio.com',
	];
	
	public const DELETE_UNDERSTAND_FIELD_TYPE_SERVERS = [
		'https://preview.twilio.com',
	];
	
	public const DELETE_UNDERSTAND_FIELD_VALUE_SERVERS = [
		'https://preview.twilio.com',
	];
	
	public const DELETE_UNDERSTAND_MODEL_BUILD_SERVERS = [
		'https://preview.twilio.com',
	];
	
	public const DELETE_UNDERSTAND_QUERY_SERVERS = [
		'https://preview.twilio.com',
	];
	
	public const DELETE_UNDERSTAND_SAMPLE_SERVERS = [
		'https://preview.twilio.com',
	];
	
	public const DELETE_UNDERSTAND_TASK_SERVERS = [
		'https://preview.twilio.com',
	];
	
	public const DELETE_WIRELESS_RATE_PLAN_SERVERS = [
		'https://preview.twilio.com',
	];
	
	public const FETCH_DEPLOYED_DEVICES_CERTIFICATE_SERVERS = [
		'https://preview.twilio.com',
	];
	
	public const FETCH_DEPLOYED_DEVICES_DEPLOYMENT_SERVERS = [
		'https://preview.twilio.com',
	];
	
	public const FETCH_DEPLOYED_DEVICES_DEVICE_SERVERS = [
		'https://preview.twilio.com',
	];
	
	public const FETCH_DEPLOYED_DEVICES_FLEET_SERVERS = [
		'https://preview.twilio.com',
	];
	
	public const FETCH_DEPLOYED_DEVICES_KEY_SERVERS = [
		'https://preview.twilio.com',
	];
	
	public const FETCH_HOSTED_NUMBERS_AUTHORIZATION_DOCUMENT_SERVERS = [
		'https://preview.twilio.com',
	];
	
	public const FETCH_HOSTED_NUMBERS_HOSTED_NUMBER_ORDER_SERVERS = [
		'https://preview.twilio.com',
	];
	
	public const FETCH_MARKETPLACE_AVAILABLE_ADD_ON_SERVERS = [
		'https://preview.twilio.com',
	];
	
	public const FETCH_MARKETPLACE_AVAILABLE_ADD_ON_EXTENSION_SERVERS = [
		'https://preview.twilio.com',
	];
	
	public const FETCH_MARKETPLACE_INSTALLED_ADD_ON_SERVERS = [
		'https://preview.twilio.com',
	];
	
	public const FETCH_MARKETPLACE_INSTALLED_ADD_ON_EXTENSION_SERVERS = [
		'https://preview.twilio.com',
	];
	
	public const FETCH_SYNC_DOCUMENT_SERVERS = [
		'https://preview.twilio.com',
	];
	
	public const FETCH_SYNC_DOCUMENT_PERMISSION_SERVERS = [
		'https://preview.twilio.com',
	];
	
	public const FETCH_SYNC_SERVICE_SERVERS = [
		'https://preview.twilio.com',
	];
	
	public const FETCH_SYNC_SYNC_LIST_SERVERS = [
		'https://preview.twilio.com',
	];
	
	public const FETCH_SYNC_SYNC_LIST_ITEM_SERVERS = [
		'https://preview.twilio.com',
	];
	
	public const FETCH_SYNC_SYNC_LIST_PERMISSION_SERVERS = [
		'https://preview.twilio.com',
	];
	
	public const FETCH_SYNC_SYNC_MAP_SERVERS = [
		'https://preview.twilio.com',
	];
	
	public const FETCH_SYNC_SYNC_MAP_ITEM_SERVERS = [
		'https://preview.twilio.com',
	];
	
	public const FETCH_SYNC_SYNC_MAP_PERMISSION_SERVERS = [
		'https://preview.twilio.com',
	];
	
	public const FETCH_UNDERSTAND_ASSISTANT_SERVERS = [
		'https://preview.twilio.com',
	];
	
	public const FETCH_UNDERSTAND_ASSISTANT_FALLBACK_ACTIONS_SERVERS = [
		'https://preview.twilio.com',
	];
	
	public const FETCH_UNDERSTAND_ASSISTANT_INITIATION_ACTIONS_SERVERS = [
		'https://preview.twilio.com',
	];
	
	public const FETCH_UNDERSTAND_DIALOGUE_SERVERS = [
		'https://preview.twilio.com',
	];
	
	public const FETCH_UNDERSTAND_FIELD_SERVERS = [
		'https://preview.twilio.com',
	];
	
	public const FETCH_UNDERSTAND_FIELD_TYPE_SERVERS = [
		'https://preview.twilio.com',
	];
	
	public const FETCH_UNDERSTAND_FIELD_VALUE_SERVERS = [
		'https://preview.twilio.com',
	];
	
	public const FETCH_UNDERSTAND_MODEL_BUILD_SERVERS = [
		'https://preview.twilio.com',
	];
	
	public const FETCH_UNDERSTAND_QUERY_SERVERS = [
		'https://preview.twilio.com',
	];
	
	public const FETCH_UNDERSTAND_SAMPLE_SERVERS = [
		'https://preview.twilio.com',
	];
	
	public const FETCH_UNDERSTAND_STYLE_SHEET_SERVERS = [
		'https://preview.twilio.com',
	];
	
	public const FETCH_UNDERSTAND_TASK_SERVERS = [
		'https://preview.twilio.com',
	];
	
	public const FETCH_UNDERSTAND_TASK_ACTIONS_SERVERS = [
		'https://preview.twilio.com',
	];
	
	public const FETCH_UNDERSTAND_TASK_STATISTICS_SERVERS = [
		'https://preview.twilio.com',
	];
	
	public const FETCH_WIRELESS_COMMAND_SERVERS = [
		'https://preview.twilio.com',
	];
	
	public const FETCH_WIRELESS_RATE_PLAN_SERVERS = [
		'https://preview.twilio.com',
	];
	
	public const FETCH_WIRELESS_SIM_SERVERS = [
		'https://preview.twilio.com',
	];
	
	public const FETCH_WIRELESS_USAGE_SERVERS = [
		'https://preview.twilio.com',
	];
	
	public const LIST_DEPLOYED_DEVICES_CERTIFICATE_SERVERS = [
		'https://preview.twilio.com',
	];
	
	public const LIST_DEPLOYED_DEVICES_DEPLOYMENT_SERVERS = [
		'https://preview.twilio.com',
	];
	
	public const LIST_DEPLOYED_DEVICES_DEVICE_SERVERS = [
		'https://preview.twilio.com',
	];
	
	public const LIST_DEPLOYED_DEVICES_FLEET_SERVERS = [
		'https://preview.twilio.com',
	];
	
	public const LIST_DEPLOYED_DEVICES_KEY_SERVERS = [
		'https://preview.twilio.com',
	];
	
	public const LIST_HOSTED_NUMBERS_AUTHORIZATION_DOCUMENT_SERVERS = [
		'https://preview.twilio.com',
	];
	
	public const LIST_HOSTED_NUMBERS_DEPENDENT_HOSTED_NUMBER_ORDER_SERVERS = [
		'https://preview.twilio.com',
	];
	
	public const LIST_HOSTED_NUMBERS_HOSTED_NUMBER_ORDER_SERVERS = [
		'https://preview.twilio.com',
	];
	
	public const LIST_MARKETPLACE_AVAILABLE_ADD_ON_SERVERS = [
		'https://preview.twilio.com',
	];
	
	public const LIST_MARKETPLACE_AVAILABLE_ADD_ON_EXTENSION_SERVERS = [
		'https://preview.twilio.com',
	];
	
	public const LIST_MARKETPLACE_INSTALLED_ADD_ON_SERVERS = [
		'https://preview.twilio.com',
	];
	
	public const LIST_MARKETPLACE_INSTALLED_ADD_ON_EXTENSION_SERVERS = [
		'https://preview.twilio.com',
	];
	
	public const LIST_SYNC_DOCUMENT_SERVERS = [
		'https://preview.twilio.com',
	];
	
	public const LIST_SYNC_DOCUMENT_PERMISSION_SERVERS = [
		'https://preview.twilio.com',
	];
	
	public const LIST_SYNC_SERVICE_SERVERS = [
		'https://preview.twilio.com',
	];
	
	public const LIST_SYNC_SYNC_LIST_SERVERS = [
		'https://preview.twilio.com',
	];
	
	public const LIST_SYNC_SYNC_LIST_ITEM_SERVERS = [
		'https://preview.twilio.com',
	];
	
	public const LIST_SYNC_SYNC_LIST_PERMISSION_SERVERS = [
		'https://preview.twilio.com',
	];
	
	public const LIST_SYNC_SYNC_MAP_SERVERS = [
		'https://preview.twilio.com',
	];
	
	public const LIST_SYNC_SYNC_MAP_ITEM_SERVERS = [
		'https://preview.twilio.com',
	];
	
	public const LIST_SYNC_SYNC_MAP_PERMISSION_SERVERS = [
		'https://preview.twilio.com',
	];
	
	public const LIST_UNDERSTAND_ASSISTANT_SERVERS = [
		'https://preview.twilio.com',
	];
	
	public const LIST_UNDERSTAND_FIELD_SERVERS = [
		'https://preview.twilio.com',
	];
	
	public const LIST_UNDERSTAND_FIELD_TYPE_SERVERS = [
		'https://preview.twilio.com',
	];
	
	public const LIST_UNDERSTAND_FIELD_VALUE_SERVERS = [
		'https://preview.twilio.com',
	];
	
	public const LIST_UNDERSTAND_MODEL_BUILD_SERVERS = [
		'https://preview.twilio.com',
	];
	
	public const LIST_UNDERSTAND_QUERY_SERVERS = [
		'https://preview.twilio.com',
	];
	
	public const LIST_UNDERSTAND_SAMPLE_SERVERS = [
		'https://preview.twilio.com',
	];
	
	public const LIST_UNDERSTAND_TASK_SERVERS = [
		'https://preview.twilio.com',
	];
	
	public const LIST_WIRELESS_COMMAND_SERVERS = [
		'https://preview.twilio.com',
	];
	
	public const LIST_WIRELESS_RATE_PLAN_SERVERS = [
		'https://preview.twilio.com',
	];
	
	public const LIST_WIRELESS_SIM_SERVERS = [
		'https://preview.twilio.com',
	];
	
	public const UPDATE_DEPLOYED_DEVICES_CERTIFICATE_SERVERS = [
		'https://preview.twilio.com',
	];
	
	public const UPDATE_DEPLOYED_DEVICES_DEPLOYMENT_SERVERS = [
		'https://preview.twilio.com',
	];
	
	public const UPDATE_DEPLOYED_DEVICES_DEVICE_SERVERS = [
		'https://preview.twilio.com',
	];
	
	public const UPDATE_DEPLOYED_DEVICES_FLEET_SERVERS = [
		'https://preview.twilio.com',
	];
	
	public const UPDATE_DEPLOYED_DEVICES_KEY_SERVERS = [
		'https://preview.twilio.com',
	];
	
	public const UPDATE_HOSTED_NUMBERS_AUTHORIZATION_DOCUMENT_SERVERS = [
		'https://preview.twilio.com',
	];
	
	public const UPDATE_HOSTED_NUMBERS_HOSTED_NUMBER_ORDER_SERVERS = [
		'https://preview.twilio.com',
	];
	
	public const UPDATE_MARKETPLACE_INSTALLED_ADD_ON_SERVERS = [
		'https://preview.twilio.com',
	];
	
	public const UPDATE_MARKETPLACE_INSTALLED_ADD_ON_EXTENSION_SERVERS = [
		'https://preview.twilio.com',
	];
	
	public const UPDATE_SYNC_DOCUMENT_SERVERS = [
		'https://preview.twilio.com',
	];
	
	public const UPDATE_SYNC_DOCUMENT_PERMISSION_SERVERS = [
		'https://preview.twilio.com',
	];
	
	public const UPDATE_SYNC_SERVICE_SERVERS = [
		'https://preview.twilio.com',
	];
	
	public const UPDATE_SYNC_SYNC_LIST_ITEM_SERVERS = [
		'https://preview.twilio.com',
	];
	
	public const UPDATE_SYNC_SYNC_LIST_PERMISSION_SERVERS = [
		'https://preview.twilio.com',
	];
	
	public const UPDATE_SYNC_SYNC_MAP_ITEM_SERVERS = [
		'https://preview.twilio.com',
	];
	
	public const UPDATE_SYNC_SYNC_MAP_PERMISSION_SERVERS = [
		'https://preview.twilio.com',
	];
	
	public const UPDATE_UNDERSTAND_ASSISTANT_SERVERS = [
		'https://preview.twilio.com',
	];
	
	public const UPDATE_UNDERSTAND_ASSISTANT_FALLBACK_ACTIONS_SERVERS = [
		'https://preview.twilio.com',
	];
	
	public const UPDATE_UNDERSTAND_ASSISTANT_INITIATION_ACTIONS_SERVERS = [
		'https://preview.twilio.com',
	];
	
	public const UPDATE_UNDERSTAND_FIELD_TYPE_SERVERS = [
		'https://preview.twilio.com',
	];
	
	public const UPDATE_UNDERSTAND_MODEL_BUILD_SERVERS = [
		'https://preview.twilio.com',
	];
	
	public const UPDATE_UNDERSTAND_QUERY_SERVERS = [
		'https://preview.twilio.com',
	];
	
	public const UPDATE_UNDERSTAND_SAMPLE_SERVERS = [
		'https://preview.twilio.com',
	];
	
	public const UPDATE_UNDERSTAND_STYLE_SHEET_SERVERS = [
		'https://preview.twilio.com',
	];
	
	public const UPDATE_UNDERSTAND_TASK_SERVERS = [
		'https://preview.twilio.com',
	];
	
	public const UPDATE_UNDERSTAND_TASK_ACTIONS_SERVERS = [
		'https://preview.twilio.com',
	];
	
	public const UPDATE_WIRELESS_RATE_PLAN_SERVERS = [
		'https://preview.twilio.com',
	];
	
	public const UPDATE_WIRELESS_SIM_SERVERS = [
		'https://preview.twilio.com',
	];
  		
	// SDK private variables namespaced with _ to avoid conflicts with API models
	private ?\GuzzleHttp\ClientInterface $_defaultClient;
	private ?\GuzzleHttp\ClientInterface $_securityClient;
	
	private string $_serverUrl;
	private string $_language = 'php';
	private string $_sdkVersion = '0.0.1';
	private string $_genVersion = 'internal';

	/**
	 * Returns a new instance of the SDK builder used to configure and create the SDK instance.
	 * 
	 * @return SDKBuilder
	 */
	public static function builder(): SDKBuilder
	{
		return new SDKBuilder();
	}

	/**
	 * @param \GuzzleHttp\ClientInterface|null $client
	 * @param string $serverUrl
	 * @param array<string, string>|null $params
	 */
	public function __construct(?\GuzzleHttp\ClientInterface $client, string $serverUrl, ?array $params)
	{
		$this->_defaultClient = $client;
		
		if ($this->_defaultClient === null) {
			$this->_defaultClient = new \GuzzleHttp\Client([
				'timeout' => 60,
			]);
		}

		$this->_securityClient = null;
		if ($this->_securityClient === null) {
			$this->_securityClient = $this->_defaultClient;
		}

		if (!empty($serverUrl)) {
			$this->_serverUrl = Utils\Utils::templateUrl($serverUrl, $params);
		}
		
		if (empty($this->_serverUrl)) {
			$this->_serverUrl = $this::SERVERS[0];
		}
	}
	
    /**
     * Enroll a new Certificate credential to the Fleet, optionally giving it a friendly name and assigning to a Device.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateDeployedDevicesCertificateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateDeployedDevicesCertificateSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateDeployedDevicesCertificateResponse
     */
	public function createDeployedDevicesCertificate(
        \OpenAPI\OpenAPI\Models\Operations\CreateDeployedDevicesCertificateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CreateDeployedDevicesCertificateSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateDeployedDevicesCertificateResponse
    {
        $baseUrl = SDK::CREATE_DEPLOYED_DEVICES_CERTIFICATE_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/DeployedDevices/Fleets/{FleetSid}/Certificates', \OpenAPI\OpenAPI\Models\Operations\CreateDeployedDevicesCertificateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateDeployedDevicesCertificateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->previewDeployedDevicesFleetCertificate = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PreviewDeployedDevicesFleetCertificate', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create a new Deployment in the Fleet, optionally giving it a friendly name and linking to a specific Twilio Sync service instance.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateDeployedDevicesDeploymentRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateDeployedDevicesDeploymentSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateDeployedDevicesDeploymentResponse
     */
	public function createDeployedDevicesDeployment(
        \OpenAPI\OpenAPI\Models\Operations\CreateDeployedDevicesDeploymentRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CreateDeployedDevicesDeploymentSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateDeployedDevicesDeploymentResponse
    {
        $baseUrl = SDK::CREATE_DEPLOYED_DEVICES_DEPLOYMENT_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/DeployedDevices/Fleets/{FleetSid}/Deployments', \OpenAPI\OpenAPI\Models\Operations\CreateDeployedDevicesDeploymentRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateDeployedDevicesDeploymentResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->previewDeployedDevicesFleetDeployment = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PreviewDeployedDevicesFleetDeployment', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create a new Device in the Fleet, optionally giving it a unique name, friendly name, and assigning to a Deployment and/or human identity.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateDeployedDevicesDeviceRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateDeployedDevicesDeviceSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateDeployedDevicesDeviceResponse
     */
	public function createDeployedDevicesDevice(
        \OpenAPI\OpenAPI\Models\Operations\CreateDeployedDevicesDeviceRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CreateDeployedDevicesDeviceSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateDeployedDevicesDeviceResponse
    {
        $baseUrl = SDK::CREATE_DEPLOYED_DEVICES_DEVICE_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/DeployedDevices/Fleets/{FleetSid}/Devices', \OpenAPI\OpenAPI\Models\Operations\CreateDeployedDevicesDeviceRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateDeployedDevicesDeviceResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->previewDeployedDevicesFleetDevice = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PreviewDeployedDevicesFleetDevice', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create a new Fleet for scoping of deployed devices within your account.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateDeployedDevicesFleetCreateDeployedDevicesFleetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateDeployedDevicesFleetSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateDeployedDevicesFleetResponse
     */
	public function createDeployedDevicesFleet(
        \OpenAPI\OpenAPI\Models\Operations\CreateDeployedDevicesFleetCreateDeployedDevicesFleetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CreateDeployedDevicesFleetSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateDeployedDevicesFleetResponse
    {
        $baseUrl = SDK::CREATE_DEPLOYED_DEVICES_FLEET_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/DeployedDevices/Fleets');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateDeployedDevicesFleetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->previewDeployedDevicesFleet = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PreviewDeployedDevicesFleet', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create a new Key credential in the Fleet, optionally giving it a friendly name and assigning to a Device.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateDeployedDevicesKeyRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateDeployedDevicesKeySecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateDeployedDevicesKeyResponse
     */
	public function createDeployedDevicesKey(
        \OpenAPI\OpenAPI\Models\Operations\CreateDeployedDevicesKeyRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CreateDeployedDevicesKeySecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateDeployedDevicesKeyResponse
    {
        $baseUrl = SDK::CREATE_DEPLOYED_DEVICES_KEY_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/DeployedDevices/Fleets/{FleetSid}/Keys', \OpenAPI\OpenAPI\Models\Operations\CreateDeployedDevicesKeyRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateDeployedDevicesKeyResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->previewDeployedDevicesFleetKey = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PreviewDeployedDevicesFleetKey', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create an AuthorizationDocument for authorizing the hosting of phone number capabilities on Twilio's platform.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateHostedNumbersAuthorizationDocumentCreateHostedNumbersAuthorizationDocumentRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateHostedNumbersAuthorizationDocumentSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateHostedNumbersAuthorizationDocumentResponse
     */
	public function createHostedNumbersAuthorizationDocument(
        \OpenAPI\OpenAPI\Models\Operations\CreateHostedNumbersAuthorizationDocumentCreateHostedNumbersAuthorizationDocumentRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CreateHostedNumbersAuthorizationDocumentSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateHostedNumbersAuthorizationDocumentResponse
    {
        $baseUrl = SDK::CREATE_HOSTED_NUMBERS_AUTHORIZATION_DOCUMENT_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/HostedNumbers/AuthorizationDocuments');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateHostedNumbersAuthorizationDocumentResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->previewHostedNumbersAuthorizationDocument = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PreviewHostedNumbersAuthorizationDocument', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Host a phone number's capability on Twilio's platform.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateHostedNumbersHostedNumberOrderCreateHostedNumbersHostedNumberOrderRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateHostedNumbersHostedNumberOrderSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateHostedNumbersHostedNumberOrderResponse
     */
	public function createHostedNumbersHostedNumberOrder(
        \OpenAPI\OpenAPI\Models\Operations\CreateHostedNumbersHostedNumberOrderCreateHostedNumbersHostedNumberOrderRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CreateHostedNumbersHostedNumberOrderSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateHostedNumbersHostedNumberOrderResponse
    {
        $baseUrl = SDK::CREATE_HOSTED_NUMBERS_HOSTED_NUMBER_ORDER_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/HostedNumbers/HostedNumberOrders');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateHostedNumbersHostedNumberOrderResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->previewHostedNumbersHostedNumberOrder = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PreviewHostedNumbersHostedNumberOrder', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Install an Add-on for the Account specified.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateMarketplaceInstalledAddOnCreateMarketplaceInstalledAddOnRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateMarketplaceInstalledAddOnSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateMarketplaceInstalledAddOnResponse
     */
	public function createMarketplaceInstalledAddOn(
        \OpenAPI\OpenAPI\Models\Operations\CreateMarketplaceInstalledAddOnCreateMarketplaceInstalledAddOnRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CreateMarketplaceInstalledAddOnSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateMarketplaceInstalledAddOnResponse
    {
        $baseUrl = SDK::CREATE_MARKETPLACE_INSTALLED_ADD_ON_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/marketplace/InstalledAddOns');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateMarketplaceInstalledAddOnResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->previewMarketplaceInstalledAddOn = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PreviewMarketplaceInstalledAddOn', 'json');
            }
        }

        return $response;
    }
	
    /**
     * createSyncDocument
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateSyncDocumentRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateSyncDocumentSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateSyncDocumentResponse
     */
	public function createSyncDocument(
        \OpenAPI\OpenAPI\Models\Operations\CreateSyncDocumentRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CreateSyncDocumentSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateSyncDocumentResponse
    {
        $baseUrl = SDK::CREATE_SYNC_DOCUMENT_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/Sync/Services/{ServiceSid}/Documents', \OpenAPI\OpenAPI\Models\Operations\CreateSyncDocumentRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateSyncDocumentResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->previewSyncServiceDocument = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PreviewSyncServiceDocument', 'json');
            }
        }

        return $response;
    }
	
    /**
     * createSyncService
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateSyncServiceCreateSyncServiceRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateSyncServiceSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateSyncServiceResponse
     */
	public function createSyncService(
        \OpenAPI\OpenAPI\Models\Operations\CreateSyncServiceCreateSyncServiceRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CreateSyncServiceSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateSyncServiceResponse
    {
        $baseUrl = SDK::CREATE_SYNC_SERVICE_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/Sync/Services');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateSyncServiceResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->previewSyncService = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PreviewSyncService', 'json');
            }
        }

        return $response;
    }
	
    /**
     * createSyncSyncList
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateSyncSyncListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateSyncSyncListSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateSyncSyncListResponse
     */
	public function createSyncSyncList(
        \OpenAPI\OpenAPI\Models\Operations\CreateSyncSyncListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CreateSyncSyncListSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateSyncSyncListResponse
    {
        $baseUrl = SDK::CREATE_SYNC_SYNC_LIST_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/Sync/Services/{ServiceSid}/Lists', \OpenAPI\OpenAPI\Models\Operations\CreateSyncSyncListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateSyncSyncListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->previewSyncServiceSyncList = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PreviewSyncServiceSyncList', 'json');
            }
        }

        return $response;
    }
	
    /**
     * createSyncSyncListItem
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateSyncSyncListItemRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateSyncSyncListItemSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateSyncSyncListItemResponse
     */
	public function createSyncSyncListItem(
        \OpenAPI\OpenAPI\Models\Operations\CreateSyncSyncListItemRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CreateSyncSyncListItemSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateSyncSyncListItemResponse
    {
        $baseUrl = SDK::CREATE_SYNC_SYNC_LIST_ITEM_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/Sync/Services/{ServiceSid}/Lists/{ListSid}/Items', \OpenAPI\OpenAPI\Models\Operations\CreateSyncSyncListItemRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateSyncSyncListItemResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->previewSyncServiceSyncListSyncListItem = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PreviewSyncServiceSyncListSyncListItem', 'json');
            }
        }

        return $response;
    }
	
    /**
     * createSyncSyncMap
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateSyncSyncMapRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateSyncSyncMapSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateSyncSyncMapResponse
     */
	public function createSyncSyncMap(
        \OpenAPI\OpenAPI\Models\Operations\CreateSyncSyncMapRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CreateSyncSyncMapSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateSyncSyncMapResponse
    {
        $baseUrl = SDK::CREATE_SYNC_SYNC_MAP_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/Sync/Services/{ServiceSid}/Maps', \OpenAPI\OpenAPI\Models\Operations\CreateSyncSyncMapRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateSyncSyncMapResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->previewSyncServiceSyncMap = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PreviewSyncServiceSyncMap', 'json');
            }
        }

        return $response;
    }
	
    /**
     * createSyncSyncMapItem
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateSyncSyncMapItemRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateSyncSyncMapItemSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateSyncSyncMapItemResponse
     */
	public function createSyncSyncMapItem(
        \OpenAPI\OpenAPI\Models\Operations\CreateSyncSyncMapItemRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CreateSyncSyncMapItemSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateSyncSyncMapItemResponse
    {
        $baseUrl = SDK::CREATE_SYNC_SYNC_MAP_ITEM_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/Sync/Services/{ServiceSid}/Maps/{MapSid}/Items', \OpenAPI\OpenAPI\Models\Operations\CreateSyncSyncMapItemRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateSyncSyncMapItemResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->previewSyncServiceSyncMapSyncMapItem = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PreviewSyncServiceSyncMapSyncMapItem', 'json');
            }
        }

        return $response;
    }
	
    /**
     * createUnderstandAssistant
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateUnderstandAssistantCreateUnderstandAssistantRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateUnderstandAssistantSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateUnderstandAssistantResponse
     */
	public function createUnderstandAssistant(
        \OpenAPI\OpenAPI\Models\Operations\CreateUnderstandAssistantCreateUnderstandAssistantRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CreateUnderstandAssistantSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateUnderstandAssistantResponse
    {
        $baseUrl = SDK::CREATE_UNDERSTAND_ASSISTANT_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/understand/Assistants');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateUnderstandAssistantResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->previewUnderstandAssistant = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PreviewUnderstandAssistant', 'json');
            }
        }

        return $response;
    }
	
    /**
     * createUnderstandField
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateUnderstandFieldRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateUnderstandFieldSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateUnderstandFieldResponse
     */
	public function createUnderstandField(
        \OpenAPI\OpenAPI\Models\Operations\CreateUnderstandFieldRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CreateUnderstandFieldSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateUnderstandFieldResponse
    {
        $baseUrl = SDK::CREATE_UNDERSTAND_FIELD_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/understand/Assistants/{AssistantSid}/Tasks/{TaskSid}/Fields', \OpenAPI\OpenAPI\Models\Operations\CreateUnderstandFieldRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateUnderstandFieldResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->previewUnderstandAssistantTaskField = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PreviewUnderstandAssistantTaskField', 'json');
            }
        }

        return $response;
    }
	
    /**
     * createUnderstandFieldType
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateUnderstandFieldTypeRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateUnderstandFieldTypeSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateUnderstandFieldTypeResponse
     */
	public function createUnderstandFieldType(
        \OpenAPI\OpenAPI\Models\Operations\CreateUnderstandFieldTypeRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CreateUnderstandFieldTypeSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateUnderstandFieldTypeResponse
    {
        $baseUrl = SDK::CREATE_UNDERSTAND_FIELD_TYPE_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/understand/Assistants/{AssistantSid}/FieldTypes', \OpenAPI\OpenAPI\Models\Operations\CreateUnderstandFieldTypeRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateUnderstandFieldTypeResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->previewUnderstandAssistantFieldType = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PreviewUnderstandAssistantFieldType', 'json');
            }
        }

        return $response;
    }
	
    /**
     * createUnderstandFieldValue
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateUnderstandFieldValueRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateUnderstandFieldValueSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateUnderstandFieldValueResponse
     */
	public function createUnderstandFieldValue(
        \OpenAPI\OpenAPI\Models\Operations\CreateUnderstandFieldValueRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CreateUnderstandFieldValueSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateUnderstandFieldValueResponse
    {
        $baseUrl = SDK::CREATE_UNDERSTAND_FIELD_VALUE_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/understand/Assistants/{AssistantSid}/FieldTypes/{FieldTypeSid}/FieldValues', \OpenAPI\OpenAPI\Models\Operations\CreateUnderstandFieldValueRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateUnderstandFieldValueResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->previewUnderstandAssistantFieldTypeFieldValue = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PreviewUnderstandAssistantFieldTypeFieldValue', 'json');
            }
        }

        return $response;
    }
	
    /**
     * createUnderstandModelBuild
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateUnderstandModelBuildRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateUnderstandModelBuildSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateUnderstandModelBuildResponse
     */
	public function createUnderstandModelBuild(
        \OpenAPI\OpenAPI\Models\Operations\CreateUnderstandModelBuildRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CreateUnderstandModelBuildSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateUnderstandModelBuildResponse
    {
        $baseUrl = SDK::CREATE_UNDERSTAND_MODEL_BUILD_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/understand/Assistants/{AssistantSid}/ModelBuilds', \OpenAPI\OpenAPI\Models\Operations\CreateUnderstandModelBuildRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateUnderstandModelBuildResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->previewUnderstandAssistantModelBuild = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PreviewUnderstandAssistantModelBuild', 'json');
            }
        }

        return $response;
    }
	
    /**
     * createUnderstandQuery
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateUnderstandQueryRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateUnderstandQuerySecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateUnderstandQueryResponse
     */
	public function createUnderstandQuery(
        \OpenAPI\OpenAPI\Models\Operations\CreateUnderstandQueryRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CreateUnderstandQuerySecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateUnderstandQueryResponse
    {
        $baseUrl = SDK::CREATE_UNDERSTAND_QUERY_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/understand/Assistants/{AssistantSid}/Queries', \OpenAPI\OpenAPI\Models\Operations\CreateUnderstandQueryRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateUnderstandQueryResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->previewUnderstandAssistantQuery = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PreviewUnderstandAssistantQuery', 'json');
            }
        }

        return $response;
    }
	
    /**
     * createUnderstandSample
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateUnderstandSampleRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateUnderstandSampleSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateUnderstandSampleResponse
     */
	public function createUnderstandSample(
        \OpenAPI\OpenAPI\Models\Operations\CreateUnderstandSampleRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CreateUnderstandSampleSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateUnderstandSampleResponse
    {
        $baseUrl = SDK::CREATE_UNDERSTAND_SAMPLE_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/understand/Assistants/{AssistantSid}/Tasks/{TaskSid}/Samples', \OpenAPI\OpenAPI\Models\Operations\CreateUnderstandSampleRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateUnderstandSampleResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->previewUnderstandAssistantTaskSample = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PreviewUnderstandAssistantTaskSample', 'json');
            }
        }

        return $response;
    }
	
    /**
     * createUnderstandTask
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateUnderstandTaskRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateUnderstandTaskSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateUnderstandTaskResponse
     */
	public function createUnderstandTask(
        \OpenAPI\OpenAPI\Models\Operations\CreateUnderstandTaskRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CreateUnderstandTaskSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateUnderstandTaskResponse
    {
        $baseUrl = SDK::CREATE_UNDERSTAND_TASK_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/understand/Assistants/{AssistantSid}/Tasks', \OpenAPI\OpenAPI\Models\Operations\CreateUnderstandTaskRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateUnderstandTaskResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->previewUnderstandAssistantTask = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PreviewUnderstandAssistantTask', 'json');
            }
        }

        return $response;
    }
	
    /**
     * createWirelessCommand
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateWirelessCommandCreateWirelessCommandRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateWirelessCommandSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateWirelessCommandResponse
     */
	public function createWirelessCommand(
        \OpenAPI\OpenAPI\Models\Operations\CreateWirelessCommandCreateWirelessCommandRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CreateWirelessCommandSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateWirelessCommandResponse
    {
        $baseUrl = SDK::CREATE_WIRELESS_COMMAND_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/wireless/Commands');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateWirelessCommandResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->previewWirelessCommand = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PreviewWirelessCommand', 'json');
            }
        }

        return $response;
    }
	
    /**
     * createWirelessRatePlan
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateWirelessRatePlanCreateWirelessRatePlanRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateWirelessRatePlanSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateWirelessRatePlanResponse
     */
	public function createWirelessRatePlan(
        \OpenAPI\OpenAPI\Models\Operations\CreateWirelessRatePlanCreateWirelessRatePlanRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CreateWirelessRatePlanSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateWirelessRatePlanResponse
    {
        $baseUrl = SDK::CREATE_WIRELESS_RATE_PLAN_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/wireless/RatePlans');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateWirelessRatePlanResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->previewWirelessRatePlan = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PreviewWirelessRatePlan', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Unregister a specific Certificate credential from the Fleet, effectively disallowing any inbound client connections that are presenting it.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteDeployedDevicesCertificateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteDeployedDevicesCertificateSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteDeployedDevicesCertificateResponse
     */
	public function deleteDeployedDevicesCertificate(
        \OpenAPI\OpenAPI\Models\Operations\DeleteDeployedDevicesCertificateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeleteDeployedDevicesCertificateSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteDeployedDevicesCertificateResponse
    {
        $baseUrl = SDK::DELETE_DEPLOYED_DEVICES_CERTIFICATE_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/DeployedDevices/Fleets/{FleetSid}/Certificates/{Sid}', \OpenAPI\OpenAPI\Models\Operations\DeleteDeployedDevicesCertificateRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteDeployedDevicesCertificateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Delete a specific Deployment from the Fleet, leaving associated devices effectively undeployed.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteDeployedDevicesDeploymentRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteDeployedDevicesDeploymentSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteDeployedDevicesDeploymentResponse
     */
	public function deleteDeployedDevicesDeployment(
        \OpenAPI\OpenAPI\Models\Operations\DeleteDeployedDevicesDeploymentRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeleteDeployedDevicesDeploymentSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteDeployedDevicesDeploymentResponse
    {
        $baseUrl = SDK::DELETE_DEPLOYED_DEVICES_DEPLOYMENT_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/DeployedDevices/Fleets/{FleetSid}/Deployments/{Sid}', \OpenAPI\OpenAPI\Models\Operations\DeleteDeployedDevicesDeploymentRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteDeployedDevicesDeploymentResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Delete a specific Device from the Fleet, also removing it from associated Deployments.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteDeployedDevicesDeviceRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteDeployedDevicesDeviceSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteDeployedDevicesDeviceResponse
     */
	public function deleteDeployedDevicesDevice(
        \OpenAPI\OpenAPI\Models\Operations\DeleteDeployedDevicesDeviceRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeleteDeployedDevicesDeviceSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteDeployedDevicesDeviceResponse
    {
        $baseUrl = SDK::DELETE_DEPLOYED_DEVICES_DEVICE_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/DeployedDevices/Fleets/{FleetSid}/Devices/{Sid}', \OpenAPI\OpenAPI\Models\Operations\DeleteDeployedDevicesDeviceRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteDeployedDevicesDeviceResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Delete a specific Fleet from your account, also destroys all nested resources: Devices, Deployments, Certificates, Keys.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteDeployedDevicesFleetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteDeployedDevicesFleetSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteDeployedDevicesFleetResponse
     */
	public function deleteDeployedDevicesFleet(
        \OpenAPI\OpenAPI\Models\Operations\DeleteDeployedDevicesFleetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeleteDeployedDevicesFleetSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteDeployedDevicesFleetResponse
    {
        $baseUrl = SDK::DELETE_DEPLOYED_DEVICES_FLEET_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/DeployedDevices/Fleets/{Sid}', \OpenAPI\OpenAPI\Models\Operations\DeleteDeployedDevicesFleetRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteDeployedDevicesFleetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Delete a specific Key credential from the Fleet, effectively disallowing any inbound client connections that are presenting it.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteDeployedDevicesKeyRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteDeployedDevicesKeySecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteDeployedDevicesKeyResponse
     */
	public function deleteDeployedDevicesKey(
        \OpenAPI\OpenAPI\Models\Operations\DeleteDeployedDevicesKeyRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeleteDeployedDevicesKeySecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteDeployedDevicesKeyResponse
    {
        $baseUrl = SDK::DELETE_DEPLOYED_DEVICES_KEY_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/DeployedDevices/Fleets/{FleetSid}/Keys/{Sid}', \OpenAPI\OpenAPI\Models\Operations\DeleteDeployedDevicesKeyRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteDeployedDevicesKeyResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Cancel the HostedNumberOrder (only available when the status is in `received`).
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteHostedNumbersHostedNumberOrderRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteHostedNumbersHostedNumberOrderSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteHostedNumbersHostedNumberOrderResponse
     */
	public function deleteHostedNumbersHostedNumberOrder(
        \OpenAPI\OpenAPI\Models\Operations\DeleteHostedNumbersHostedNumberOrderRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeleteHostedNumbersHostedNumberOrderSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteHostedNumbersHostedNumberOrderResponse
    {
        $baseUrl = SDK::DELETE_HOSTED_NUMBERS_HOSTED_NUMBER_ORDER_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/HostedNumbers/HostedNumberOrders/{Sid}', \OpenAPI\OpenAPI\Models\Operations\DeleteHostedNumbersHostedNumberOrderRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteHostedNumbersHostedNumberOrderResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Remove an Add-on installation from your account
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteMarketplaceInstalledAddOnRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteMarketplaceInstalledAddOnSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteMarketplaceInstalledAddOnResponse
     */
	public function deleteMarketplaceInstalledAddOn(
        \OpenAPI\OpenAPI\Models\Operations\DeleteMarketplaceInstalledAddOnRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeleteMarketplaceInstalledAddOnSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteMarketplaceInstalledAddOnResponse
    {
        $baseUrl = SDK::DELETE_MARKETPLACE_INSTALLED_ADD_ON_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/marketplace/InstalledAddOns/{Sid}', \OpenAPI\OpenAPI\Models\Operations\DeleteMarketplaceInstalledAddOnRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteMarketplaceInstalledAddOnResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * deleteSyncDocument
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteSyncDocumentRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteSyncDocumentSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteSyncDocumentResponse
     */
	public function deleteSyncDocument(
        \OpenAPI\OpenAPI\Models\Operations\DeleteSyncDocumentRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeleteSyncDocumentSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteSyncDocumentResponse
    {
        $baseUrl = SDK::DELETE_SYNC_DOCUMENT_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/Sync/Services/{ServiceSid}/Documents/{Sid}', \OpenAPI\OpenAPI\Models\Operations\DeleteSyncDocumentRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteSyncDocumentResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Delete a specific Sync Document Permission.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteSyncDocumentPermissionRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteSyncDocumentPermissionSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteSyncDocumentPermissionResponse
     */
	public function deleteSyncDocumentPermission(
        \OpenAPI\OpenAPI\Models\Operations\DeleteSyncDocumentPermissionRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeleteSyncDocumentPermissionSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteSyncDocumentPermissionResponse
    {
        $baseUrl = SDK::DELETE_SYNC_DOCUMENT_PERMISSION_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/Sync/Services/{ServiceSid}/Documents/{DocumentSid}/Permissions/{Identity}', \OpenAPI\OpenAPI\Models\Operations\DeleteSyncDocumentPermissionRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteSyncDocumentPermissionResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * deleteSyncService
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteSyncServiceRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteSyncServiceSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteSyncServiceResponse
     */
	public function deleteSyncService(
        \OpenAPI\OpenAPI\Models\Operations\DeleteSyncServiceRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeleteSyncServiceSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteSyncServiceResponse
    {
        $baseUrl = SDK::DELETE_SYNC_SERVICE_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/Sync/Services/{Sid}', \OpenAPI\OpenAPI\Models\Operations\DeleteSyncServiceRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteSyncServiceResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * deleteSyncSyncList
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteSyncSyncListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteSyncSyncListSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteSyncSyncListResponse
     */
	public function deleteSyncSyncList(
        \OpenAPI\OpenAPI\Models\Operations\DeleteSyncSyncListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeleteSyncSyncListSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteSyncSyncListResponse
    {
        $baseUrl = SDK::DELETE_SYNC_SYNC_LIST_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/Sync/Services/{ServiceSid}/Lists/{Sid}', \OpenAPI\OpenAPI\Models\Operations\DeleteSyncSyncListRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteSyncSyncListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * deleteSyncSyncListItem
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteSyncSyncListItemRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteSyncSyncListItemSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteSyncSyncListItemResponse
     */
	public function deleteSyncSyncListItem(
        \OpenAPI\OpenAPI\Models\Operations\DeleteSyncSyncListItemRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeleteSyncSyncListItemSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteSyncSyncListItemResponse
    {
        $baseUrl = SDK::DELETE_SYNC_SYNC_LIST_ITEM_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/Sync/Services/{ServiceSid}/Lists/{ListSid}/Items/{Index}', \OpenAPI\OpenAPI\Models\Operations\DeleteSyncSyncListItemRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteSyncSyncListItemResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Delete a specific Sync List Permission.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteSyncSyncListPermissionRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteSyncSyncListPermissionSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteSyncSyncListPermissionResponse
     */
	public function deleteSyncSyncListPermission(
        \OpenAPI\OpenAPI\Models\Operations\DeleteSyncSyncListPermissionRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeleteSyncSyncListPermissionSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteSyncSyncListPermissionResponse
    {
        $baseUrl = SDK::DELETE_SYNC_SYNC_LIST_PERMISSION_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/Sync/Services/{ServiceSid}/Lists/{ListSid}/Permissions/{Identity}', \OpenAPI\OpenAPI\Models\Operations\DeleteSyncSyncListPermissionRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteSyncSyncListPermissionResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * deleteSyncSyncMap
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteSyncSyncMapRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteSyncSyncMapSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteSyncSyncMapResponse
     */
	public function deleteSyncSyncMap(
        \OpenAPI\OpenAPI\Models\Operations\DeleteSyncSyncMapRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeleteSyncSyncMapSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteSyncSyncMapResponse
    {
        $baseUrl = SDK::DELETE_SYNC_SYNC_MAP_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/Sync/Services/{ServiceSid}/Maps/{Sid}', \OpenAPI\OpenAPI\Models\Operations\DeleteSyncSyncMapRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteSyncSyncMapResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * deleteSyncSyncMapItem
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteSyncSyncMapItemRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteSyncSyncMapItemSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteSyncSyncMapItemResponse
     */
	public function deleteSyncSyncMapItem(
        \OpenAPI\OpenAPI\Models\Operations\DeleteSyncSyncMapItemRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeleteSyncSyncMapItemSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteSyncSyncMapItemResponse
    {
        $baseUrl = SDK::DELETE_SYNC_SYNC_MAP_ITEM_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/Sync/Services/{ServiceSid}/Maps/{MapSid}/Items/{Key}', \OpenAPI\OpenAPI\Models\Operations\DeleteSyncSyncMapItemRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteSyncSyncMapItemResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Delete a specific Sync Map Permission.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteSyncSyncMapPermissionRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteSyncSyncMapPermissionSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteSyncSyncMapPermissionResponse
     */
	public function deleteSyncSyncMapPermission(
        \OpenAPI\OpenAPI\Models\Operations\DeleteSyncSyncMapPermissionRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeleteSyncSyncMapPermissionSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteSyncSyncMapPermissionResponse
    {
        $baseUrl = SDK::DELETE_SYNC_SYNC_MAP_PERMISSION_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/Sync/Services/{ServiceSid}/Maps/{MapSid}/Permissions/{Identity}', \OpenAPI\OpenAPI\Models\Operations\DeleteSyncSyncMapPermissionRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteSyncSyncMapPermissionResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * deleteUnderstandAssistant
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteUnderstandAssistantRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteUnderstandAssistantSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteUnderstandAssistantResponse
     */
	public function deleteUnderstandAssistant(
        \OpenAPI\OpenAPI\Models\Operations\DeleteUnderstandAssistantRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeleteUnderstandAssistantSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteUnderstandAssistantResponse
    {
        $baseUrl = SDK::DELETE_UNDERSTAND_ASSISTANT_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/understand/Assistants/{Sid}', \OpenAPI\OpenAPI\Models\Operations\DeleteUnderstandAssistantRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteUnderstandAssistantResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * deleteUnderstandField
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteUnderstandFieldRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteUnderstandFieldSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteUnderstandFieldResponse
     */
	public function deleteUnderstandField(
        \OpenAPI\OpenAPI\Models\Operations\DeleteUnderstandFieldRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeleteUnderstandFieldSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteUnderstandFieldResponse
    {
        $baseUrl = SDK::DELETE_UNDERSTAND_FIELD_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/understand/Assistants/{AssistantSid}/Tasks/{TaskSid}/Fields/{Sid}', \OpenAPI\OpenAPI\Models\Operations\DeleteUnderstandFieldRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteUnderstandFieldResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * deleteUnderstandFieldType
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteUnderstandFieldTypeRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteUnderstandFieldTypeSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteUnderstandFieldTypeResponse
     */
	public function deleteUnderstandFieldType(
        \OpenAPI\OpenAPI\Models\Operations\DeleteUnderstandFieldTypeRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeleteUnderstandFieldTypeSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteUnderstandFieldTypeResponse
    {
        $baseUrl = SDK::DELETE_UNDERSTAND_FIELD_TYPE_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/understand/Assistants/{AssistantSid}/FieldTypes/{Sid}', \OpenAPI\OpenAPI\Models\Operations\DeleteUnderstandFieldTypeRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteUnderstandFieldTypeResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * deleteUnderstandFieldValue
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteUnderstandFieldValueRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteUnderstandFieldValueSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteUnderstandFieldValueResponse
     */
	public function deleteUnderstandFieldValue(
        \OpenAPI\OpenAPI\Models\Operations\DeleteUnderstandFieldValueRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeleteUnderstandFieldValueSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteUnderstandFieldValueResponse
    {
        $baseUrl = SDK::DELETE_UNDERSTAND_FIELD_VALUE_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/understand/Assistants/{AssistantSid}/FieldTypes/{FieldTypeSid}/FieldValues/{Sid}', \OpenAPI\OpenAPI\Models\Operations\DeleteUnderstandFieldValueRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteUnderstandFieldValueResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * deleteUnderstandModelBuild
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteUnderstandModelBuildRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteUnderstandModelBuildSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteUnderstandModelBuildResponse
     */
	public function deleteUnderstandModelBuild(
        \OpenAPI\OpenAPI\Models\Operations\DeleteUnderstandModelBuildRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeleteUnderstandModelBuildSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteUnderstandModelBuildResponse
    {
        $baseUrl = SDK::DELETE_UNDERSTAND_MODEL_BUILD_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/understand/Assistants/{AssistantSid}/ModelBuilds/{Sid}', \OpenAPI\OpenAPI\Models\Operations\DeleteUnderstandModelBuildRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteUnderstandModelBuildResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * deleteUnderstandQuery
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteUnderstandQueryRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteUnderstandQuerySecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteUnderstandQueryResponse
     */
	public function deleteUnderstandQuery(
        \OpenAPI\OpenAPI\Models\Operations\DeleteUnderstandQueryRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeleteUnderstandQuerySecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteUnderstandQueryResponse
    {
        $baseUrl = SDK::DELETE_UNDERSTAND_QUERY_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/understand/Assistants/{AssistantSid}/Queries/{Sid}', \OpenAPI\OpenAPI\Models\Operations\DeleteUnderstandQueryRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteUnderstandQueryResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * deleteUnderstandSample
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteUnderstandSampleRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteUnderstandSampleSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteUnderstandSampleResponse
     */
	public function deleteUnderstandSample(
        \OpenAPI\OpenAPI\Models\Operations\DeleteUnderstandSampleRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeleteUnderstandSampleSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteUnderstandSampleResponse
    {
        $baseUrl = SDK::DELETE_UNDERSTAND_SAMPLE_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/understand/Assistants/{AssistantSid}/Tasks/{TaskSid}/Samples/{Sid}', \OpenAPI\OpenAPI\Models\Operations\DeleteUnderstandSampleRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteUnderstandSampleResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * deleteUnderstandTask
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteUnderstandTaskRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteUnderstandTaskSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteUnderstandTaskResponse
     */
	public function deleteUnderstandTask(
        \OpenAPI\OpenAPI\Models\Operations\DeleteUnderstandTaskRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeleteUnderstandTaskSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteUnderstandTaskResponse
    {
        $baseUrl = SDK::DELETE_UNDERSTAND_TASK_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/understand/Assistants/{AssistantSid}/Tasks/{Sid}', \OpenAPI\OpenAPI\Models\Operations\DeleteUnderstandTaskRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteUnderstandTaskResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * deleteWirelessRatePlan
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteWirelessRatePlanRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteWirelessRatePlanSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteWirelessRatePlanResponse
     */
	public function deleteWirelessRatePlan(
        \OpenAPI\OpenAPI\Models\Operations\DeleteWirelessRatePlanRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeleteWirelessRatePlanSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteWirelessRatePlanResponse
    {
        $baseUrl = SDK::DELETE_WIRELESS_RATE_PLAN_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/wireless/RatePlans/{Sid}', \OpenAPI\OpenAPI\Models\Operations\DeleteWirelessRatePlanRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteWirelessRatePlanResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Fetch information about a specific Certificate credential in the Fleet.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchDeployedDevicesCertificateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchDeployedDevicesCertificateSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\FetchDeployedDevicesCertificateResponse
     */
	public function fetchDeployedDevicesCertificate(
        \OpenAPI\OpenAPI\Models\Operations\FetchDeployedDevicesCertificateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FetchDeployedDevicesCertificateSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\FetchDeployedDevicesCertificateResponse
    {
        $baseUrl = SDK::FETCH_DEPLOYED_DEVICES_CERTIFICATE_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/DeployedDevices/Fleets/{FleetSid}/Certificates/{Sid}', \OpenAPI\OpenAPI\Models\Operations\FetchDeployedDevicesCertificateRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FetchDeployedDevicesCertificateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->previewDeployedDevicesFleetCertificate = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PreviewDeployedDevicesFleetCertificate', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Fetch information about a specific Deployment in the Fleet.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchDeployedDevicesDeploymentRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchDeployedDevicesDeploymentSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\FetchDeployedDevicesDeploymentResponse
     */
	public function fetchDeployedDevicesDeployment(
        \OpenAPI\OpenAPI\Models\Operations\FetchDeployedDevicesDeploymentRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FetchDeployedDevicesDeploymentSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\FetchDeployedDevicesDeploymentResponse
    {
        $baseUrl = SDK::FETCH_DEPLOYED_DEVICES_DEPLOYMENT_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/DeployedDevices/Fleets/{FleetSid}/Deployments/{Sid}', \OpenAPI\OpenAPI\Models\Operations\FetchDeployedDevicesDeploymentRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FetchDeployedDevicesDeploymentResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->previewDeployedDevicesFleetDeployment = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PreviewDeployedDevicesFleetDeployment', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Fetch information about a specific Device in the Fleet.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchDeployedDevicesDeviceRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchDeployedDevicesDeviceSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\FetchDeployedDevicesDeviceResponse
     */
	public function fetchDeployedDevicesDevice(
        \OpenAPI\OpenAPI\Models\Operations\FetchDeployedDevicesDeviceRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FetchDeployedDevicesDeviceSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\FetchDeployedDevicesDeviceResponse
    {
        $baseUrl = SDK::FETCH_DEPLOYED_DEVICES_DEVICE_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/DeployedDevices/Fleets/{FleetSid}/Devices/{Sid}', \OpenAPI\OpenAPI\Models\Operations\FetchDeployedDevicesDeviceRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FetchDeployedDevicesDeviceResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->previewDeployedDevicesFleetDevice = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PreviewDeployedDevicesFleetDevice', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Fetch information about a specific Fleet in your account.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchDeployedDevicesFleetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchDeployedDevicesFleetSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\FetchDeployedDevicesFleetResponse
     */
	public function fetchDeployedDevicesFleet(
        \OpenAPI\OpenAPI\Models\Operations\FetchDeployedDevicesFleetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FetchDeployedDevicesFleetSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\FetchDeployedDevicesFleetResponse
    {
        $baseUrl = SDK::FETCH_DEPLOYED_DEVICES_FLEET_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/DeployedDevices/Fleets/{Sid}', \OpenAPI\OpenAPI\Models\Operations\FetchDeployedDevicesFleetRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FetchDeployedDevicesFleetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->previewDeployedDevicesFleet = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PreviewDeployedDevicesFleet', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Fetch information about a specific Key credential in the Fleet.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchDeployedDevicesKeyRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchDeployedDevicesKeySecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\FetchDeployedDevicesKeyResponse
     */
	public function fetchDeployedDevicesKey(
        \OpenAPI\OpenAPI\Models\Operations\FetchDeployedDevicesKeyRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FetchDeployedDevicesKeySecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\FetchDeployedDevicesKeyResponse
    {
        $baseUrl = SDK::FETCH_DEPLOYED_DEVICES_KEY_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/DeployedDevices/Fleets/{FleetSid}/Keys/{Sid}', \OpenAPI\OpenAPI\Models\Operations\FetchDeployedDevicesKeyRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FetchDeployedDevicesKeyResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->previewDeployedDevicesFleetKey = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PreviewDeployedDevicesFleetKey', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Fetch a specific AuthorizationDocument.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchHostedNumbersAuthorizationDocumentRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchHostedNumbersAuthorizationDocumentSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\FetchHostedNumbersAuthorizationDocumentResponse
     */
	public function fetchHostedNumbersAuthorizationDocument(
        \OpenAPI\OpenAPI\Models\Operations\FetchHostedNumbersAuthorizationDocumentRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FetchHostedNumbersAuthorizationDocumentSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\FetchHostedNumbersAuthorizationDocumentResponse
    {
        $baseUrl = SDK::FETCH_HOSTED_NUMBERS_AUTHORIZATION_DOCUMENT_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/HostedNumbers/AuthorizationDocuments/{Sid}', \OpenAPI\OpenAPI\Models\Operations\FetchHostedNumbersAuthorizationDocumentRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FetchHostedNumbersAuthorizationDocumentResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->previewHostedNumbersAuthorizationDocument = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PreviewHostedNumbersAuthorizationDocument', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Fetch a specific HostedNumberOrder.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchHostedNumbersHostedNumberOrderRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchHostedNumbersHostedNumberOrderSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\FetchHostedNumbersHostedNumberOrderResponse
     */
	public function fetchHostedNumbersHostedNumberOrder(
        \OpenAPI\OpenAPI\Models\Operations\FetchHostedNumbersHostedNumberOrderRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FetchHostedNumbersHostedNumberOrderSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\FetchHostedNumbersHostedNumberOrderResponse
    {
        $baseUrl = SDK::FETCH_HOSTED_NUMBERS_HOSTED_NUMBER_ORDER_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/HostedNumbers/HostedNumberOrders/{Sid}', \OpenAPI\OpenAPI\Models\Operations\FetchHostedNumbersHostedNumberOrderRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FetchHostedNumbersHostedNumberOrderResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->previewHostedNumbersHostedNumberOrder = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PreviewHostedNumbersHostedNumberOrder', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Fetch an instance of an Add-on currently available to be installed.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchMarketplaceAvailableAddOnRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchMarketplaceAvailableAddOnSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\FetchMarketplaceAvailableAddOnResponse
     */
	public function fetchMarketplaceAvailableAddOn(
        \OpenAPI\OpenAPI\Models\Operations\FetchMarketplaceAvailableAddOnRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FetchMarketplaceAvailableAddOnSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\FetchMarketplaceAvailableAddOnResponse
    {
        $baseUrl = SDK::FETCH_MARKETPLACE_AVAILABLE_ADD_ON_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/marketplace/AvailableAddOns/{Sid}', \OpenAPI\OpenAPI\Models\Operations\FetchMarketplaceAvailableAddOnRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FetchMarketplaceAvailableAddOnResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->previewMarketplaceAvailableAddOn = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PreviewMarketplaceAvailableAddOn', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Fetch an instance of an Extension for the Available Add-on.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchMarketplaceAvailableAddOnExtensionRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchMarketplaceAvailableAddOnExtensionSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\FetchMarketplaceAvailableAddOnExtensionResponse
     */
	public function fetchMarketplaceAvailableAddOnExtension(
        \OpenAPI\OpenAPI\Models\Operations\FetchMarketplaceAvailableAddOnExtensionRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FetchMarketplaceAvailableAddOnExtensionSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\FetchMarketplaceAvailableAddOnExtensionResponse
    {
        $baseUrl = SDK::FETCH_MARKETPLACE_AVAILABLE_ADD_ON_EXTENSION_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/marketplace/AvailableAddOns/{AvailableAddOnSid}/Extensions/{Sid}', \OpenAPI\OpenAPI\Models\Operations\FetchMarketplaceAvailableAddOnExtensionRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FetchMarketplaceAvailableAddOnExtensionResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->previewMarketplaceAvailableAddOnAvailableAddOnExtension = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PreviewMarketplaceAvailableAddOnAvailableAddOnExtension', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Fetch an instance of an Add-on currently installed on this Account.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchMarketplaceInstalledAddOnRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchMarketplaceInstalledAddOnSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\FetchMarketplaceInstalledAddOnResponse
     */
	public function fetchMarketplaceInstalledAddOn(
        \OpenAPI\OpenAPI\Models\Operations\FetchMarketplaceInstalledAddOnRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FetchMarketplaceInstalledAddOnSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\FetchMarketplaceInstalledAddOnResponse
    {
        $baseUrl = SDK::FETCH_MARKETPLACE_INSTALLED_ADD_ON_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/marketplace/InstalledAddOns/{Sid}', \OpenAPI\OpenAPI\Models\Operations\FetchMarketplaceInstalledAddOnRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FetchMarketplaceInstalledAddOnResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->previewMarketplaceInstalledAddOn = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PreviewMarketplaceInstalledAddOn', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Fetch an instance of an Extension for the Installed Add-on.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchMarketplaceInstalledAddOnExtensionRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchMarketplaceInstalledAddOnExtensionSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\FetchMarketplaceInstalledAddOnExtensionResponse
     */
	public function fetchMarketplaceInstalledAddOnExtension(
        \OpenAPI\OpenAPI\Models\Operations\FetchMarketplaceInstalledAddOnExtensionRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FetchMarketplaceInstalledAddOnExtensionSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\FetchMarketplaceInstalledAddOnExtensionResponse
    {
        $baseUrl = SDK::FETCH_MARKETPLACE_INSTALLED_ADD_ON_EXTENSION_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/marketplace/InstalledAddOns/{InstalledAddOnSid}/Extensions/{Sid}', \OpenAPI\OpenAPI\Models\Operations\FetchMarketplaceInstalledAddOnExtensionRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FetchMarketplaceInstalledAddOnExtensionResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->previewMarketplaceInstalledAddOnInstalledAddOnExtension = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PreviewMarketplaceInstalledAddOnInstalledAddOnExtension', 'json');
            }
        }

        return $response;
    }
	
    /**
     * fetchSyncDocument
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchSyncDocumentRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchSyncDocumentSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\FetchSyncDocumentResponse
     */
	public function fetchSyncDocument(
        \OpenAPI\OpenAPI\Models\Operations\FetchSyncDocumentRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FetchSyncDocumentSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\FetchSyncDocumentResponse
    {
        $baseUrl = SDK::FETCH_SYNC_DOCUMENT_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/Sync/Services/{ServiceSid}/Documents/{Sid}', \OpenAPI\OpenAPI\Models\Operations\FetchSyncDocumentRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FetchSyncDocumentResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->previewSyncServiceDocument = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PreviewSyncServiceDocument', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Fetch a specific Sync Document Permission.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchSyncDocumentPermissionRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchSyncDocumentPermissionSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\FetchSyncDocumentPermissionResponse
     */
	public function fetchSyncDocumentPermission(
        \OpenAPI\OpenAPI\Models\Operations\FetchSyncDocumentPermissionRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FetchSyncDocumentPermissionSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\FetchSyncDocumentPermissionResponse
    {
        $baseUrl = SDK::FETCH_SYNC_DOCUMENT_PERMISSION_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/Sync/Services/{ServiceSid}/Documents/{DocumentSid}/Permissions/{Identity}', \OpenAPI\OpenAPI\Models\Operations\FetchSyncDocumentPermissionRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FetchSyncDocumentPermissionResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->previewSyncServiceDocumentDocumentPermission = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PreviewSyncServiceDocumentDocumentPermission', 'json');
            }
        }

        return $response;
    }
	
    /**
     * fetchSyncService
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchSyncServiceRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchSyncServiceSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\FetchSyncServiceResponse
     */
	public function fetchSyncService(
        \OpenAPI\OpenAPI\Models\Operations\FetchSyncServiceRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FetchSyncServiceSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\FetchSyncServiceResponse
    {
        $baseUrl = SDK::FETCH_SYNC_SERVICE_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/Sync/Services/{Sid}', \OpenAPI\OpenAPI\Models\Operations\FetchSyncServiceRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FetchSyncServiceResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->previewSyncService = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PreviewSyncService', 'json');
            }
        }

        return $response;
    }
	
    /**
     * fetchSyncSyncList
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchSyncSyncListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchSyncSyncListSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\FetchSyncSyncListResponse
     */
	public function fetchSyncSyncList(
        \OpenAPI\OpenAPI\Models\Operations\FetchSyncSyncListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FetchSyncSyncListSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\FetchSyncSyncListResponse
    {
        $baseUrl = SDK::FETCH_SYNC_SYNC_LIST_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/Sync/Services/{ServiceSid}/Lists/{Sid}', \OpenAPI\OpenAPI\Models\Operations\FetchSyncSyncListRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FetchSyncSyncListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->previewSyncServiceSyncList = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PreviewSyncServiceSyncList', 'json');
            }
        }

        return $response;
    }
	
    /**
     * fetchSyncSyncListItem
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchSyncSyncListItemRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchSyncSyncListItemSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\FetchSyncSyncListItemResponse
     */
	public function fetchSyncSyncListItem(
        \OpenAPI\OpenAPI\Models\Operations\FetchSyncSyncListItemRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FetchSyncSyncListItemSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\FetchSyncSyncListItemResponse
    {
        $baseUrl = SDK::FETCH_SYNC_SYNC_LIST_ITEM_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/Sync/Services/{ServiceSid}/Lists/{ListSid}/Items/{Index}', \OpenAPI\OpenAPI\Models\Operations\FetchSyncSyncListItemRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FetchSyncSyncListItemResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->previewSyncServiceSyncListSyncListItem = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PreviewSyncServiceSyncListSyncListItem', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Fetch a specific Sync List Permission.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchSyncSyncListPermissionRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchSyncSyncListPermissionSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\FetchSyncSyncListPermissionResponse
     */
	public function fetchSyncSyncListPermission(
        \OpenAPI\OpenAPI\Models\Operations\FetchSyncSyncListPermissionRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FetchSyncSyncListPermissionSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\FetchSyncSyncListPermissionResponse
    {
        $baseUrl = SDK::FETCH_SYNC_SYNC_LIST_PERMISSION_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/Sync/Services/{ServiceSid}/Lists/{ListSid}/Permissions/{Identity}', \OpenAPI\OpenAPI\Models\Operations\FetchSyncSyncListPermissionRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FetchSyncSyncListPermissionResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->previewSyncServiceSyncListSyncListPermission = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PreviewSyncServiceSyncListSyncListPermission', 'json');
            }
        }

        return $response;
    }
	
    /**
     * fetchSyncSyncMap
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchSyncSyncMapRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchSyncSyncMapSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\FetchSyncSyncMapResponse
     */
	public function fetchSyncSyncMap(
        \OpenAPI\OpenAPI\Models\Operations\FetchSyncSyncMapRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FetchSyncSyncMapSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\FetchSyncSyncMapResponse
    {
        $baseUrl = SDK::FETCH_SYNC_SYNC_MAP_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/Sync/Services/{ServiceSid}/Maps/{Sid}', \OpenAPI\OpenAPI\Models\Operations\FetchSyncSyncMapRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FetchSyncSyncMapResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->previewSyncServiceSyncMap = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PreviewSyncServiceSyncMap', 'json');
            }
        }

        return $response;
    }
	
    /**
     * fetchSyncSyncMapItem
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchSyncSyncMapItemRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchSyncSyncMapItemSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\FetchSyncSyncMapItemResponse
     */
	public function fetchSyncSyncMapItem(
        \OpenAPI\OpenAPI\Models\Operations\FetchSyncSyncMapItemRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FetchSyncSyncMapItemSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\FetchSyncSyncMapItemResponse
    {
        $baseUrl = SDK::FETCH_SYNC_SYNC_MAP_ITEM_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/Sync/Services/{ServiceSid}/Maps/{MapSid}/Items/{Key}', \OpenAPI\OpenAPI\Models\Operations\FetchSyncSyncMapItemRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FetchSyncSyncMapItemResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->previewSyncServiceSyncMapSyncMapItem = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PreviewSyncServiceSyncMapSyncMapItem', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Fetch a specific Sync Map Permission.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchSyncSyncMapPermissionRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchSyncSyncMapPermissionSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\FetchSyncSyncMapPermissionResponse
     */
	public function fetchSyncSyncMapPermission(
        \OpenAPI\OpenAPI\Models\Operations\FetchSyncSyncMapPermissionRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FetchSyncSyncMapPermissionSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\FetchSyncSyncMapPermissionResponse
    {
        $baseUrl = SDK::FETCH_SYNC_SYNC_MAP_PERMISSION_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/Sync/Services/{ServiceSid}/Maps/{MapSid}/Permissions/{Identity}', \OpenAPI\OpenAPI\Models\Operations\FetchSyncSyncMapPermissionRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FetchSyncSyncMapPermissionResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->previewSyncServiceSyncMapSyncMapPermission = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PreviewSyncServiceSyncMapSyncMapPermission', 'json');
            }
        }

        return $response;
    }
	
    /**
     * fetchUnderstandAssistant
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchUnderstandAssistantRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchUnderstandAssistantSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\FetchUnderstandAssistantResponse
     */
	public function fetchUnderstandAssistant(
        \OpenAPI\OpenAPI\Models\Operations\FetchUnderstandAssistantRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FetchUnderstandAssistantSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\FetchUnderstandAssistantResponse
    {
        $baseUrl = SDK::FETCH_UNDERSTAND_ASSISTANT_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/understand/Assistants/{Sid}', \OpenAPI\OpenAPI\Models\Operations\FetchUnderstandAssistantRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FetchUnderstandAssistantResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->previewUnderstandAssistant = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PreviewUnderstandAssistant', 'json');
            }
        }

        return $response;
    }
	
    /**
     * fetchUnderstandAssistantFallbackActions
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchUnderstandAssistantFallbackActionsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchUnderstandAssistantFallbackActionsSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\FetchUnderstandAssistantFallbackActionsResponse
     */
	public function fetchUnderstandAssistantFallbackActions(
        \OpenAPI\OpenAPI\Models\Operations\FetchUnderstandAssistantFallbackActionsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FetchUnderstandAssistantFallbackActionsSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\FetchUnderstandAssistantFallbackActionsResponse
    {
        $baseUrl = SDK::FETCH_UNDERSTAND_ASSISTANT_FALLBACK_ACTIONS_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/understand/Assistants/{AssistantSid}/FallbackActions', \OpenAPI\OpenAPI\Models\Operations\FetchUnderstandAssistantFallbackActionsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FetchUnderstandAssistantFallbackActionsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->previewUnderstandAssistantAssistantFallbackActions = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PreviewUnderstandAssistantAssistantFallbackActions', 'json');
            }
        }

        return $response;
    }
	
    /**
     * fetchUnderstandAssistantInitiationActions
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchUnderstandAssistantInitiationActionsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchUnderstandAssistantInitiationActionsSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\FetchUnderstandAssistantInitiationActionsResponse
     */
	public function fetchUnderstandAssistantInitiationActions(
        \OpenAPI\OpenAPI\Models\Operations\FetchUnderstandAssistantInitiationActionsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FetchUnderstandAssistantInitiationActionsSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\FetchUnderstandAssistantInitiationActionsResponse
    {
        $baseUrl = SDK::FETCH_UNDERSTAND_ASSISTANT_INITIATION_ACTIONS_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/understand/Assistants/{AssistantSid}/InitiationActions', \OpenAPI\OpenAPI\Models\Operations\FetchUnderstandAssistantInitiationActionsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FetchUnderstandAssistantInitiationActionsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->previewUnderstandAssistantAssistantInitiationActions = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PreviewUnderstandAssistantAssistantInitiationActions', 'json');
            }
        }

        return $response;
    }
	
    /**
     * fetchUnderstandDialogue
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchUnderstandDialogueRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchUnderstandDialogueSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\FetchUnderstandDialogueResponse
     */
	public function fetchUnderstandDialogue(
        \OpenAPI\OpenAPI\Models\Operations\FetchUnderstandDialogueRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FetchUnderstandDialogueSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\FetchUnderstandDialogueResponse
    {
        $baseUrl = SDK::FETCH_UNDERSTAND_DIALOGUE_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/understand/Assistants/{AssistantSid}/Dialogues/{Sid}', \OpenAPI\OpenAPI\Models\Operations\FetchUnderstandDialogueRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FetchUnderstandDialogueResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->previewUnderstandAssistantDialogue = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PreviewUnderstandAssistantDialogue', 'json');
            }
        }

        return $response;
    }
	
    /**
     * fetchUnderstandField
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchUnderstandFieldRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchUnderstandFieldSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\FetchUnderstandFieldResponse
     */
	public function fetchUnderstandField(
        \OpenAPI\OpenAPI\Models\Operations\FetchUnderstandFieldRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FetchUnderstandFieldSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\FetchUnderstandFieldResponse
    {
        $baseUrl = SDK::FETCH_UNDERSTAND_FIELD_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/understand/Assistants/{AssistantSid}/Tasks/{TaskSid}/Fields/{Sid}', \OpenAPI\OpenAPI\Models\Operations\FetchUnderstandFieldRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FetchUnderstandFieldResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->previewUnderstandAssistantTaskField = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PreviewUnderstandAssistantTaskField', 'json');
            }
        }

        return $response;
    }
	
    /**
     * fetchUnderstandFieldType
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchUnderstandFieldTypeRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchUnderstandFieldTypeSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\FetchUnderstandFieldTypeResponse
     */
	public function fetchUnderstandFieldType(
        \OpenAPI\OpenAPI\Models\Operations\FetchUnderstandFieldTypeRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FetchUnderstandFieldTypeSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\FetchUnderstandFieldTypeResponse
    {
        $baseUrl = SDK::FETCH_UNDERSTAND_FIELD_TYPE_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/understand/Assistants/{AssistantSid}/FieldTypes/{Sid}', \OpenAPI\OpenAPI\Models\Operations\FetchUnderstandFieldTypeRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FetchUnderstandFieldTypeResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->previewUnderstandAssistantFieldType = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PreviewUnderstandAssistantFieldType', 'json');
            }
        }

        return $response;
    }
	
    /**
     * fetchUnderstandFieldValue
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchUnderstandFieldValueRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchUnderstandFieldValueSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\FetchUnderstandFieldValueResponse
     */
	public function fetchUnderstandFieldValue(
        \OpenAPI\OpenAPI\Models\Operations\FetchUnderstandFieldValueRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FetchUnderstandFieldValueSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\FetchUnderstandFieldValueResponse
    {
        $baseUrl = SDK::FETCH_UNDERSTAND_FIELD_VALUE_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/understand/Assistants/{AssistantSid}/FieldTypes/{FieldTypeSid}/FieldValues/{Sid}', \OpenAPI\OpenAPI\Models\Operations\FetchUnderstandFieldValueRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FetchUnderstandFieldValueResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->previewUnderstandAssistantFieldTypeFieldValue = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PreviewUnderstandAssistantFieldTypeFieldValue', 'json');
            }
        }

        return $response;
    }
	
    /**
     * fetchUnderstandModelBuild
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchUnderstandModelBuildRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchUnderstandModelBuildSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\FetchUnderstandModelBuildResponse
     */
	public function fetchUnderstandModelBuild(
        \OpenAPI\OpenAPI\Models\Operations\FetchUnderstandModelBuildRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FetchUnderstandModelBuildSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\FetchUnderstandModelBuildResponse
    {
        $baseUrl = SDK::FETCH_UNDERSTAND_MODEL_BUILD_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/understand/Assistants/{AssistantSid}/ModelBuilds/{Sid}', \OpenAPI\OpenAPI\Models\Operations\FetchUnderstandModelBuildRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FetchUnderstandModelBuildResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->previewUnderstandAssistantModelBuild = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PreviewUnderstandAssistantModelBuild', 'json');
            }
        }

        return $response;
    }
	
    /**
     * fetchUnderstandQuery
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchUnderstandQueryRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchUnderstandQuerySecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\FetchUnderstandQueryResponse
     */
	public function fetchUnderstandQuery(
        \OpenAPI\OpenAPI\Models\Operations\FetchUnderstandQueryRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FetchUnderstandQuerySecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\FetchUnderstandQueryResponse
    {
        $baseUrl = SDK::FETCH_UNDERSTAND_QUERY_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/understand/Assistants/{AssistantSid}/Queries/{Sid}', \OpenAPI\OpenAPI\Models\Operations\FetchUnderstandQueryRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FetchUnderstandQueryResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->previewUnderstandAssistantQuery = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PreviewUnderstandAssistantQuery', 'json');
            }
        }

        return $response;
    }
	
    /**
     * fetchUnderstandSample
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchUnderstandSampleRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchUnderstandSampleSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\FetchUnderstandSampleResponse
     */
	public function fetchUnderstandSample(
        \OpenAPI\OpenAPI\Models\Operations\FetchUnderstandSampleRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FetchUnderstandSampleSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\FetchUnderstandSampleResponse
    {
        $baseUrl = SDK::FETCH_UNDERSTAND_SAMPLE_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/understand/Assistants/{AssistantSid}/Tasks/{TaskSid}/Samples/{Sid}', \OpenAPI\OpenAPI\Models\Operations\FetchUnderstandSampleRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FetchUnderstandSampleResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->previewUnderstandAssistantTaskSample = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PreviewUnderstandAssistantTaskSample', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns Style sheet JSON object for this Assistant
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchUnderstandStyleSheetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchUnderstandStyleSheetSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\FetchUnderstandStyleSheetResponse
     */
	public function fetchUnderstandStyleSheet(
        \OpenAPI\OpenAPI\Models\Operations\FetchUnderstandStyleSheetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FetchUnderstandStyleSheetSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\FetchUnderstandStyleSheetResponse
    {
        $baseUrl = SDK::FETCH_UNDERSTAND_STYLE_SHEET_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/understand/Assistants/{AssistantSid}/StyleSheet', \OpenAPI\OpenAPI\Models\Operations\FetchUnderstandStyleSheetRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FetchUnderstandStyleSheetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->previewUnderstandAssistantStyleSheet = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PreviewUnderstandAssistantStyleSheet', 'json');
            }
        }

        return $response;
    }
	
    /**
     * fetchUnderstandTask
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchUnderstandTaskRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchUnderstandTaskSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\FetchUnderstandTaskResponse
     */
	public function fetchUnderstandTask(
        \OpenAPI\OpenAPI\Models\Operations\FetchUnderstandTaskRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FetchUnderstandTaskSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\FetchUnderstandTaskResponse
    {
        $baseUrl = SDK::FETCH_UNDERSTAND_TASK_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/understand/Assistants/{AssistantSid}/Tasks/{Sid}', \OpenAPI\OpenAPI\Models\Operations\FetchUnderstandTaskRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FetchUnderstandTaskResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->previewUnderstandAssistantTask = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PreviewUnderstandAssistantTask', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns JSON actions for this Task.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchUnderstandTaskActionsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchUnderstandTaskActionsSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\FetchUnderstandTaskActionsResponse
     */
	public function fetchUnderstandTaskActions(
        \OpenAPI\OpenAPI\Models\Operations\FetchUnderstandTaskActionsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FetchUnderstandTaskActionsSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\FetchUnderstandTaskActionsResponse
    {
        $baseUrl = SDK::FETCH_UNDERSTAND_TASK_ACTIONS_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/understand/Assistants/{AssistantSid}/Tasks/{TaskSid}/Actions', \OpenAPI\OpenAPI\Models\Operations\FetchUnderstandTaskActionsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FetchUnderstandTaskActionsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->previewUnderstandAssistantTaskTaskActions = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PreviewUnderstandAssistantTaskTaskActions', 'json');
            }
        }

        return $response;
    }
	
    /**
     * fetchUnderstandTaskStatistics
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchUnderstandTaskStatisticsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchUnderstandTaskStatisticsSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\FetchUnderstandTaskStatisticsResponse
     */
	public function fetchUnderstandTaskStatistics(
        \OpenAPI\OpenAPI\Models\Operations\FetchUnderstandTaskStatisticsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FetchUnderstandTaskStatisticsSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\FetchUnderstandTaskStatisticsResponse
    {
        $baseUrl = SDK::FETCH_UNDERSTAND_TASK_STATISTICS_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/understand/Assistants/{AssistantSid}/Tasks/{TaskSid}/Statistics', \OpenAPI\OpenAPI\Models\Operations\FetchUnderstandTaskStatisticsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FetchUnderstandTaskStatisticsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->previewUnderstandAssistantTaskTaskStatistics = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PreviewUnderstandAssistantTaskTaskStatistics', 'json');
            }
        }

        return $response;
    }
	
    /**
     * fetchWirelessCommand
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchWirelessCommandRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchWirelessCommandSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\FetchWirelessCommandResponse
     */
	public function fetchWirelessCommand(
        \OpenAPI\OpenAPI\Models\Operations\FetchWirelessCommandRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FetchWirelessCommandSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\FetchWirelessCommandResponse
    {
        $baseUrl = SDK::FETCH_WIRELESS_COMMAND_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/wireless/Commands/{Sid}', \OpenAPI\OpenAPI\Models\Operations\FetchWirelessCommandRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FetchWirelessCommandResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->previewWirelessCommand = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PreviewWirelessCommand', 'json');
            }
        }

        return $response;
    }
	
    /**
     * fetchWirelessRatePlan
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchWirelessRatePlanRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchWirelessRatePlanSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\FetchWirelessRatePlanResponse
     */
	public function fetchWirelessRatePlan(
        \OpenAPI\OpenAPI\Models\Operations\FetchWirelessRatePlanRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FetchWirelessRatePlanSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\FetchWirelessRatePlanResponse
    {
        $baseUrl = SDK::FETCH_WIRELESS_RATE_PLAN_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/wireless/RatePlans/{Sid}', \OpenAPI\OpenAPI\Models\Operations\FetchWirelessRatePlanRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FetchWirelessRatePlanResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->previewWirelessRatePlan = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PreviewWirelessRatePlan', 'json');
            }
        }

        return $response;
    }
	
    /**
     * fetchWirelessSim
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchWirelessSimRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchWirelessSimSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\FetchWirelessSimResponse
     */
	public function fetchWirelessSim(
        \OpenAPI\OpenAPI\Models\Operations\FetchWirelessSimRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FetchWirelessSimSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\FetchWirelessSimResponse
    {
        $baseUrl = SDK::FETCH_WIRELESS_SIM_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/wireless/Sims/{Sid}', \OpenAPI\OpenAPI\Models\Operations\FetchWirelessSimRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FetchWirelessSimResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->previewWirelessSim = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PreviewWirelessSim', 'json');
            }
        }

        return $response;
    }
	
    /**
     * fetchWirelessUsage
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchWirelessUsageRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchWirelessUsageSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\FetchWirelessUsageResponse
     */
	public function fetchWirelessUsage(
        \OpenAPI\OpenAPI\Models\Operations\FetchWirelessUsageRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FetchWirelessUsageSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\FetchWirelessUsageResponse
    {
        $baseUrl = SDK::FETCH_WIRELESS_USAGE_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/wireless/Sims/{SimSid}/Usage', \OpenAPI\OpenAPI\Models\Operations\FetchWirelessUsageRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\FetchWirelessUsageRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FetchWirelessUsageResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->previewWirelessSimUsage = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PreviewWirelessSimUsage', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieve a list of all Certificate credentials belonging to the Fleet.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListDeployedDevicesCertificateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListDeployedDevicesCertificateSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\ListDeployedDevicesCertificateResponse
     */
	public function listDeployedDevicesCertificate(
        \OpenAPI\OpenAPI\Models\Operations\ListDeployedDevicesCertificateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListDeployedDevicesCertificateSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\ListDeployedDevicesCertificateResponse
    {
        $baseUrl = SDK::LIST_DEPLOYED_DEVICES_CERTIFICATE_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/DeployedDevices/Fleets/{FleetSid}/Certificates', \OpenAPI\OpenAPI\Models\Operations\ListDeployedDevicesCertificateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListDeployedDevicesCertificateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListDeployedDevicesCertificateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listDeployedDevicesCertificateResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ListDeployedDevicesCertificateListDeployedDevicesCertificateResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieve a list of all Deployments belonging to the Fleet.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListDeployedDevicesDeploymentRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListDeployedDevicesDeploymentSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\ListDeployedDevicesDeploymentResponse
     */
	public function listDeployedDevicesDeployment(
        \OpenAPI\OpenAPI\Models\Operations\ListDeployedDevicesDeploymentRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListDeployedDevicesDeploymentSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\ListDeployedDevicesDeploymentResponse
    {
        $baseUrl = SDK::LIST_DEPLOYED_DEVICES_DEPLOYMENT_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/DeployedDevices/Fleets/{FleetSid}/Deployments', \OpenAPI\OpenAPI\Models\Operations\ListDeployedDevicesDeploymentRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListDeployedDevicesDeploymentRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListDeployedDevicesDeploymentResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listDeployedDevicesDeploymentResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ListDeployedDevicesDeploymentListDeployedDevicesDeploymentResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieve a list of all Devices belonging to the Fleet.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListDeployedDevicesDeviceRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListDeployedDevicesDeviceSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\ListDeployedDevicesDeviceResponse
     */
	public function listDeployedDevicesDevice(
        \OpenAPI\OpenAPI\Models\Operations\ListDeployedDevicesDeviceRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListDeployedDevicesDeviceSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\ListDeployedDevicesDeviceResponse
    {
        $baseUrl = SDK::LIST_DEPLOYED_DEVICES_DEVICE_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/DeployedDevices/Fleets/{FleetSid}/Devices', \OpenAPI\OpenAPI\Models\Operations\ListDeployedDevicesDeviceRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListDeployedDevicesDeviceRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListDeployedDevicesDeviceResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listDeployedDevicesDeviceResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ListDeployedDevicesDeviceListDeployedDevicesDeviceResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieve a list of all Fleets belonging to your account.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListDeployedDevicesFleetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListDeployedDevicesFleetSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\ListDeployedDevicesFleetResponse
     */
	public function listDeployedDevicesFleet(
        \OpenAPI\OpenAPI\Models\Operations\ListDeployedDevicesFleetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListDeployedDevicesFleetSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\ListDeployedDevicesFleetResponse
    {
        $baseUrl = SDK::LIST_DEPLOYED_DEVICES_FLEET_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/DeployedDevices/Fleets');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListDeployedDevicesFleetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListDeployedDevicesFleetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listDeployedDevicesFleetResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ListDeployedDevicesFleetListDeployedDevicesFleetResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieve a list of all Keys credentials belonging to the Fleet.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListDeployedDevicesKeyRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListDeployedDevicesKeySecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\ListDeployedDevicesKeyResponse
     */
	public function listDeployedDevicesKey(
        \OpenAPI\OpenAPI\Models\Operations\ListDeployedDevicesKeyRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListDeployedDevicesKeySecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\ListDeployedDevicesKeyResponse
    {
        $baseUrl = SDK::LIST_DEPLOYED_DEVICES_KEY_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/DeployedDevices/Fleets/{FleetSid}/Keys', \OpenAPI\OpenAPI\Models\Operations\ListDeployedDevicesKeyRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListDeployedDevicesKeyRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListDeployedDevicesKeyResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listDeployedDevicesKeyResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ListDeployedDevicesKeyListDeployedDevicesKeyResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieve a list of AuthorizationDocuments belonging to the account initiating the request.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListHostedNumbersAuthorizationDocumentRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListHostedNumbersAuthorizationDocumentSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\ListHostedNumbersAuthorizationDocumentResponse
     */
	public function listHostedNumbersAuthorizationDocument(
        \OpenAPI\OpenAPI\Models\Operations\ListHostedNumbersAuthorizationDocumentRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListHostedNumbersAuthorizationDocumentSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\ListHostedNumbersAuthorizationDocumentResponse
    {
        $baseUrl = SDK::LIST_HOSTED_NUMBERS_AUTHORIZATION_DOCUMENT_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/HostedNumbers/AuthorizationDocuments');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListHostedNumbersAuthorizationDocumentRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListHostedNumbersAuthorizationDocumentResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listHostedNumbersAuthorizationDocumentResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ListHostedNumbersAuthorizationDocumentListHostedNumbersAuthorizationDocumentResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieve a list of dependent HostedNumberOrders belonging to the AuthorizationDocument.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListHostedNumbersDependentHostedNumberOrderRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListHostedNumbersDependentHostedNumberOrderSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\ListHostedNumbersDependentHostedNumberOrderResponse
     */
	public function listHostedNumbersDependentHostedNumberOrder(
        \OpenAPI\OpenAPI\Models\Operations\ListHostedNumbersDependentHostedNumberOrderRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListHostedNumbersDependentHostedNumberOrderSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\ListHostedNumbersDependentHostedNumberOrderResponse
    {
        $baseUrl = SDK::LIST_HOSTED_NUMBERS_DEPENDENT_HOSTED_NUMBER_ORDER_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/HostedNumbers/AuthorizationDocuments/{SigningDocumentSid}/DependentHostedNumberOrders', \OpenAPI\OpenAPI\Models\Operations\ListHostedNumbersDependentHostedNumberOrderRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListHostedNumbersDependentHostedNumberOrderRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListHostedNumbersDependentHostedNumberOrderResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listHostedNumbersDependentHostedNumberOrderResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ListHostedNumbersDependentHostedNumberOrderListHostedNumbersDependentHostedNumberOrderResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieve a list of HostedNumberOrders belonging to the account initiating the request.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListHostedNumbersHostedNumberOrderRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListHostedNumbersHostedNumberOrderSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\ListHostedNumbersHostedNumberOrderResponse
     */
	public function listHostedNumbersHostedNumberOrder(
        \OpenAPI\OpenAPI\Models\Operations\ListHostedNumbersHostedNumberOrderRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListHostedNumbersHostedNumberOrderSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\ListHostedNumbersHostedNumberOrderResponse
    {
        $baseUrl = SDK::LIST_HOSTED_NUMBERS_HOSTED_NUMBER_ORDER_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/HostedNumbers/HostedNumberOrders');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListHostedNumbersHostedNumberOrderRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListHostedNumbersHostedNumberOrderResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listHostedNumbersHostedNumberOrderResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ListHostedNumbersHostedNumberOrderListHostedNumbersHostedNumberOrderResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieve a list of Add-ons currently available to be installed.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListMarketplaceAvailableAddOnRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListMarketplaceAvailableAddOnSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\ListMarketplaceAvailableAddOnResponse
     */
	public function listMarketplaceAvailableAddOn(
        \OpenAPI\OpenAPI\Models\Operations\ListMarketplaceAvailableAddOnRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListMarketplaceAvailableAddOnSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\ListMarketplaceAvailableAddOnResponse
    {
        $baseUrl = SDK::LIST_MARKETPLACE_AVAILABLE_ADD_ON_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/marketplace/AvailableAddOns');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListMarketplaceAvailableAddOnRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListMarketplaceAvailableAddOnResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listMarketplaceAvailableAddOnResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ListMarketplaceAvailableAddOnListMarketplaceAvailableAddOnResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieve a list of Extensions for the Available Add-on.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListMarketplaceAvailableAddOnExtensionRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListMarketplaceAvailableAddOnExtensionSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\ListMarketplaceAvailableAddOnExtensionResponse
     */
	public function listMarketplaceAvailableAddOnExtension(
        \OpenAPI\OpenAPI\Models\Operations\ListMarketplaceAvailableAddOnExtensionRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListMarketplaceAvailableAddOnExtensionSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\ListMarketplaceAvailableAddOnExtensionResponse
    {
        $baseUrl = SDK::LIST_MARKETPLACE_AVAILABLE_ADD_ON_EXTENSION_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/marketplace/AvailableAddOns/{AvailableAddOnSid}/Extensions', \OpenAPI\OpenAPI\Models\Operations\ListMarketplaceAvailableAddOnExtensionRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListMarketplaceAvailableAddOnExtensionRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListMarketplaceAvailableAddOnExtensionResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listMarketplaceAvailableAddOnExtensionResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ListMarketplaceAvailableAddOnExtensionListMarketplaceAvailableAddOnExtensionResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieve a list of Add-ons currently installed on this Account.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListMarketplaceInstalledAddOnRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListMarketplaceInstalledAddOnSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\ListMarketplaceInstalledAddOnResponse
     */
	public function listMarketplaceInstalledAddOn(
        \OpenAPI\OpenAPI\Models\Operations\ListMarketplaceInstalledAddOnRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListMarketplaceInstalledAddOnSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\ListMarketplaceInstalledAddOnResponse
    {
        $baseUrl = SDK::LIST_MARKETPLACE_INSTALLED_ADD_ON_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/marketplace/InstalledAddOns');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListMarketplaceInstalledAddOnRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListMarketplaceInstalledAddOnResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listMarketplaceInstalledAddOnResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ListMarketplaceInstalledAddOnListMarketplaceInstalledAddOnResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieve a list of Extensions for the Installed Add-on.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListMarketplaceInstalledAddOnExtensionRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListMarketplaceInstalledAddOnExtensionSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\ListMarketplaceInstalledAddOnExtensionResponse
     */
	public function listMarketplaceInstalledAddOnExtension(
        \OpenAPI\OpenAPI\Models\Operations\ListMarketplaceInstalledAddOnExtensionRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListMarketplaceInstalledAddOnExtensionSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\ListMarketplaceInstalledAddOnExtensionResponse
    {
        $baseUrl = SDK::LIST_MARKETPLACE_INSTALLED_ADD_ON_EXTENSION_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/marketplace/InstalledAddOns/{InstalledAddOnSid}/Extensions', \OpenAPI\OpenAPI\Models\Operations\ListMarketplaceInstalledAddOnExtensionRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListMarketplaceInstalledAddOnExtensionRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListMarketplaceInstalledAddOnExtensionResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listMarketplaceInstalledAddOnExtensionResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ListMarketplaceInstalledAddOnExtensionListMarketplaceInstalledAddOnExtensionResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * listSyncDocument
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListSyncDocumentRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListSyncDocumentSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\ListSyncDocumentResponse
     */
	public function listSyncDocument(
        \OpenAPI\OpenAPI\Models\Operations\ListSyncDocumentRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListSyncDocumentSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\ListSyncDocumentResponse
    {
        $baseUrl = SDK::LIST_SYNC_DOCUMENT_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/Sync/Services/{ServiceSid}/Documents', \OpenAPI\OpenAPI\Models\Operations\ListSyncDocumentRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListSyncDocumentRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListSyncDocumentResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listSyncDocumentResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ListSyncDocumentListSyncDocumentResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieve a list of all Permissions applying to a Sync Document.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListSyncDocumentPermissionRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListSyncDocumentPermissionSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\ListSyncDocumentPermissionResponse
     */
	public function listSyncDocumentPermission(
        \OpenAPI\OpenAPI\Models\Operations\ListSyncDocumentPermissionRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListSyncDocumentPermissionSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\ListSyncDocumentPermissionResponse
    {
        $baseUrl = SDK::LIST_SYNC_DOCUMENT_PERMISSION_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/Sync/Services/{ServiceSid}/Documents/{DocumentSid}/Permissions', \OpenAPI\OpenAPI\Models\Operations\ListSyncDocumentPermissionRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListSyncDocumentPermissionRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListSyncDocumentPermissionResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listSyncDocumentPermissionResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ListSyncDocumentPermissionListSyncDocumentPermissionResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * listSyncService
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListSyncServiceRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListSyncServiceSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\ListSyncServiceResponse
     */
	public function listSyncService(
        \OpenAPI\OpenAPI\Models\Operations\ListSyncServiceRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListSyncServiceSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\ListSyncServiceResponse
    {
        $baseUrl = SDK::LIST_SYNC_SERVICE_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/Sync/Services');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListSyncServiceRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListSyncServiceResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listSyncServiceResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ListSyncServiceListSyncServiceResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * listSyncSyncList
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListSyncSyncListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListSyncSyncListSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\ListSyncSyncListResponse
     */
	public function listSyncSyncList(
        \OpenAPI\OpenAPI\Models\Operations\ListSyncSyncListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListSyncSyncListSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\ListSyncSyncListResponse
    {
        $baseUrl = SDK::LIST_SYNC_SYNC_LIST_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/Sync/Services/{ServiceSid}/Lists', \OpenAPI\OpenAPI\Models\Operations\ListSyncSyncListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListSyncSyncListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListSyncSyncListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listSyncSyncListResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ListSyncSyncListListSyncSyncListResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * listSyncSyncListItem
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListSyncSyncListItemRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListSyncSyncListItemSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\ListSyncSyncListItemResponse
     */
	public function listSyncSyncListItem(
        \OpenAPI\OpenAPI\Models\Operations\ListSyncSyncListItemRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListSyncSyncListItemSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\ListSyncSyncListItemResponse
    {
        $baseUrl = SDK::LIST_SYNC_SYNC_LIST_ITEM_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/Sync/Services/{ServiceSid}/Lists/{ListSid}/Items', \OpenAPI\OpenAPI\Models\Operations\ListSyncSyncListItemRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListSyncSyncListItemRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListSyncSyncListItemResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listSyncSyncListItemResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ListSyncSyncListItemListSyncSyncListItemResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieve a list of all Permissions applying to a Sync List.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListSyncSyncListPermissionRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListSyncSyncListPermissionSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\ListSyncSyncListPermissionResponse
     */
	public function listSyncSyncListPermission(
        \OpenAPI\OpenAPI\Models\Operations\ListSyncSyncListPermissionRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListSyncSyncListPermissionSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\ListSyncSyncListPermissionResponse
    {
        $baseUrl = SDK::LIST_SYNC_SYNC_LIST_PERMISSION_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/Sync/Services/{ServiceSid}/Lists/{ListSid}/Permissions', \OpenAPI\OpenAPI\Models\Operations\ListSyncSyncListPermissionRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListSyncSyncListPermissionRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListSyncSyncListPermissionResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listSyncSyncListPermissionResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ListSyncSyncListPermissionListSyncSyncListPermissionResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * listSyncSyncMap
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListSyncSyncMapRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListSyncSyncMapSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\ListSyncSyncMapResponse
     */
	public function listSyncSyncMap(
        \OpenAPI\OpenAPI\Models\Operations\ListSyncSyncMapRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListSyncSyncMapSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\ListSyncSyncMapResponse
    {
        $baseUrl = SDK::LIST_SYNC_SYNC_MAP_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/Sync/Services/{ServiceSid}/Maps', \OpenAPI\OpenAPI\Models\Operations\ListSyncSyncMapRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListSyncSyncMapRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListSyncSyncMapResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listSyncSyncMapResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ListSyncSyncMapListSyncSyncMapResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * listSyncSyncMapItem
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListSyncSyncMapItemRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListSyncSyncMapItemSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\ListSyncSyncMapItemResponse
     */
	public function listSyncSyncMapItem(
        \OpenAPI\OpenAPI\Models\Operations\ListSyncSyncMapItemRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListSyncSyncMapItemSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\ListSyncSyncMapItemResponse
    {
        $baseUrl = SDK::LIST_SYNC_SYNC_MAP_ITEM_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/Sync/Services/{ServiceSid}/Maps/{MapSid}/Items', \OpenAPI\OpenAPI\Models\Operations\ListSyncSyncMapItemRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListSyncSyncMapItemRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListSyncSyncMapItemResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listSyncSyncMapItemResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ListSyncSyncMapItemListSyncSyncMapItemResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieve a list of all Permissions applying to a Sync Map.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListSyncSyncMapPermissionRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListSyncSyncMapPermissionSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\ListSyncSyncMapPermissionResponse
     */
	public function listSyncSyncMapPermission(
        \OpenAPI\OpenAPI\Models\Operations\ListSyncSyncMapPermissionRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListSyncSyncMapPermissionSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\ListSyncSyncMapPermissionResponse
    {
        $baseUrl = SDK::LIST_SYNC_SYNC_MAP_PERMISSION_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/Sync/Services/{ServiceSid}/Maps/{MapSid}/Permissions', \OpenAPI\OpenAPI\Models\Operations\ListSyncSyncMapPermissionRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListSyncSyncMapPermissionRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListSyncSyncMapPermissionResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listSyncSyncMapPermissionResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ListSyncSyncMapPermissionListSyncSyncMapPermissionResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * listUnderstandAssistant
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListUnderstandAssistantRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListUnderstandAssistantSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\ListUnderstandAssistantResponse
     */
	public function listUnderstandAssistant(
        \OpenAPI\OpenAPI\Models\Operations\ListUnderstandAssistantRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListUnderstandAssistantSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\ListUnderstandAssistantResponse
    {
        $baseUrl = SDK::LIST_UNDERSTAND_ASSISTANT_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/understand/Assistants');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListUnderstandAssistantRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListUnderstandAssistantResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listUnderstandAssistantResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ListUnderstandAssistantListUnderstandAssistantResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * listUnderstandField
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListUnderstandFieldRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListUnderstandFieldSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\ListUnderstandFieldResponse
     */
	public function listUnderstandField(
        \OpenAPI\OpenAPI\Models\Operations\ListUnderstandFieldRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListUnderstandFieldSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\ListUnderstandFieldResponse
    {
        $baseUrl = SDK::LIST_UNDERSTAND_FIELD_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/understand/Assistants/{AssistantSid}/Tasks/{TaskSid}/Fields', \OpenAPI\OpenAPI\Models\Operations\ListUnderstandFieldRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListUnderstandFieldRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListUnderstandFieldResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listUnderstandFieldResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ListUnderstandFieldListUnderstandFieldResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * listUnderstandFieldType
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListUnderstandFieldTypeRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListUnderstandFieldTypeSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\ListUnderstandFieldTypeResponse
     */
	public function listUnderstandFieldType(
        \OpenAPI\OpenAPI\Models\Operations\ListUnderstandFieldTypeRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListUnderstandFieldTypeSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\ListUnderstandFieldTypeResponse
    {
        $baseUrl = SDK::LIST_UNDERSTAND_FIELD_TYPE_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/understand/Assistants/{AssistantSid}/FieldTypes', \OpenAPI\OpenAPI\Models\Operations\ListUnderstandFieldTypeRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListUnderstandFieldTypeRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListUnderstandFieldTypeResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listUnderstandFieldTypeResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ListUnderstandFieldTypeListUnderstandFieldTypeResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * listUnderstandFieldValue
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListUnderstandFieldValueRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListUnderstandFieldValueSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\ListUnderstandFieldValueResponse
     */
	public function listUnderstandFieldValue(
        \OpenAPI\OpenAPI\Models\Operations\ListUnderstandFieldValueRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListUnderstandFieldValueSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\ListUnderstandFieldValueResponse
    {
        $baseUrl = SDK::LIST_UNDERSTAND_FIELD_VALUE_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/understand/Assistants/{AssistantSid}/FieldTypes/{FieldTypeSid}/FieldValues', \OpenAPI\OpenAPI\Models\Operations\ListUnderstandFieldValueRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListUnderstandFieldValueRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListUnderstandFieldValueResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listUnderstandFieldValueResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ListUnderstandFieldValueListUnderstandFieldValueResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * listUnderstandModelBuild
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListUnderstandModelBuildRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListUnderstandModelBuildSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\ListUnderstandModelBuildResponse
     */
	public function listUnderstandModelBuild(
        \OpenAPI\OpenAPI\Models\Operations\ListUnderstandModelBuildRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListUnderstandModelBuildSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\ListUnderstandModelBuildResponse
    {
        $baseUrl = SDK::LIST_UNDERSTAND_MODEL_BUILD_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/understand/Assistants/{AssistantSid}/ModelBuilds', \OpenAPI\OpenAPI\Models\Operations\ListUnderstandModelBuildRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListUnderstandModelBuildRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListUnderstandModelBuildResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listUnderstandModelBuildResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ListUnderstandModelBuildListUnderstandModelBuildResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * listUnderstandQuery
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListUnderstandQueryRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListUnderstandQuerySecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\ListUnderstandQueryResponse
     */
	public function listUnderstandQuery(
        \OpenAPI\OpenAPI\Models\Operations\ListUnderstandQueryRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListUnderstandQuerySecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\ListUnderstandQueryResponse
    {
        $baseUrl = SDK::LIST_UNDERSTAND_QUERY_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/understand/Assistants/{AssistantSid}/Queries', \OpenAPI\OpenAPI\Models\Operations\ListUnderstandQueryRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListUnderstandQueryRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListUnderstandQueryResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listUnderstandQueryResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ListUnderstandQueryListUnderstandQueryResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * listUnderstandSample
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListUnderstandSampleRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListUnderstandSampleSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\ListUnderstandSampleResponse
     */
	public function listUnderstandSample(
        \OpenAPI\OpenAPI\Models\Operations\ListUnderstandSampleRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListUnderstandSampleSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\ListUnderstandSampleResponse
    {
        $baseUrl = SDK::LIST_UNDERSTAND_SAMPLE_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/understand/Assistants/{AssistantSid}/Tasks/{TaskSid}/Samples', \OpenAPI\OpenAPI\Models\Operations\ListUnderstandSampleRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListUnderstandSampleRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListUnderstandSampleResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listUnderstandSampleResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ListUnderstandSampleListUnderstandSampleResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * listUnderstandTask
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListUnderstandTaskRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListUnderstandTaskSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\ListUnderstandTaskResponse
     */
	public function listUnderstandTask(
        \OpenAPI\OpenAPI\Models\Operations\ListUnderstandTaskRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListUnderstandTaskSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\ListUnderstandTaskResponse
    {
        $baseUrl = SDK::LIST_UNDERSTAND_TASK_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/understand/Assistants/{AssistantSid}/Tasks', \OpenAPI\OpenAPI\Models\Operations\ListUnderstandTaskRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListUnderstandTaskRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListUnderstandTaskResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listUnderstandTaskResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ListUnderstandTaskListUnderstandTaskResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * listWirelessCommand
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListWirelessCommandRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListWirelessCommandSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\ListWirelessCommandResponse
     */
	public function listWirelessCommand(
        \OpenAPI\OpenAPI\Models\Operations\ListWirelessCommandRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListWirelessCommandSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\ListWirelessCommandResponse
    {
        $baseUrl = SDK::LIST_WIRELESS_COMMAND_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/wireless/Commands');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListWirelessCommandRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListWirelessCommandResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listWirelessCommandResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ListWirelessCommandListWirelessCommandResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * listWirelessRatePlan
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListWirelessRatePlanRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListWirelessRatePlanSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\ListWirelessRatePlanResponse
     */
	public function listWirelessRatePlan(
        \OpenAPI\OpenAPI\Models\Operations\ListWirelessRatePlanRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListWirelessRatePlanSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\ListWirelessRatePlanResponse
    {
        $baseUrl = SDK::LIST_WIRELESS_RATE_PLAN_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/wireless/RatePlans');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListWirelessRatePlanRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListWirelessRatePlanResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listWirelessRatePlanResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ListWirelessRatePlanListWirelessRatePlanResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * listWirelessSim
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListWirelessSimRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListWirelessSimSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\ListWirelessSimResponse
     */
	public function listWirelessSim(
        \OpenAPI\OpenAPI\Models\Operations\ListWirelessSimRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListWirelessSimSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\ListWirelessSimResponse
    {
        $baseUrl = SDK::LIST_WIRELESS_SIM_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/wireless/Sims');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListWirelessSimRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListWirelessSimResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listWirelessSimResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ListWirelessSimListWirelessSimResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update the given properties of a specific Certificate credential in the Fleet, giving it a friendly name or assigning to a Device.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateDeployedDevicesCertificateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateDeployedDevicesCertificateSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateDeployedDevicesCertificateResponse
     */
	public function updateDeployedDevicesCertificate(
        \OpenAPI\OpenAPI\Models\Operations\UpdateDeployedDevicesCertificateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\UpdateDeployedDevicesCertificateSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateDeployedDevicesCertificateResponse
    {
        $baseUrl = SDK::UPDATE_DEPLOYED_DEVICES_CERTIFICATE_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/DeployedDevices/Fleets/{FleetSid}/Certificates/{Sid}', \OpenAPI\OpenAPI\Models\Operations\UpdateDeployedDevicesCertificateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateDeployedDevicesCertificateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->previewDeployedDevicesFleetCertificate = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PreviewDeployedDevicesFleetCertificate', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update the given properties of a specific Deployment credential in the Fleet, giving it a friendly name or linking to a specific Twilio Sync service instance.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateDeployedDevicesDeploymentRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateDeployedDevicesDeploymentSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateDeployedDevicesDeploymentResponse
     */
	public function updateDeployedDevicesDeployment(
        \OpenAPI\OpenAPI\Models\Operations\UpdateDeployedDevicesDeploymentRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\UpdateDeployedDevicesDeploymentSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateDeployedDevicesDeploymentResponse
    {
        $baseUrl = SDK::UPDATE_DEPLOYED_DEVICES_DEPLOYMENT_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/DeployedDevices/Fleets/{FleetSid}/Deployments/{Sid}', \OpenAPI\OpenAPI\Models\Operations\UpdateDeployedDevicesDeploymentRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateDeployedDevicesDeploymentResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->previewDeployedDevicesFleetDeployment = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PreviewDeployedDevicesFleetDeployment', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update the given properties of a specific Device in the Fleet, giving it a friendly name, assigning to a Deployment, or a human identity.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateDeployedDevicesDeviceRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateDeployedDevicesDeviceSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateDeployedDevicesDeviceResponse
     */
	public function updateDeployedDevicesDevice(
        \OpenAPI\OpenAPI\Models\Operations\UpdateDeployedDevicesDeviceRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\UpdateDeployedDevicesDeviceSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateDeployedDevicesDeviceResponse
    {
        $baseUrl = SDK::UPDATE_DEPLOYED_DEVICES_DEVICE_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/DeployedDevices/Fleets/{FleetSid}/Devices/{Sid}', \OpenAPI\OpenAPI\Models\Operations\UpdateDeployedDevicesDeviceRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateDeployedDevicesDeviceResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->previewDeployedDevicesFleetDevice = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PreviewDeployedDevicesFleetDevice', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update the friendly name property of a specific Fleet in your account.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateDeployedDevicesFleetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateDeployedDevicesFleetSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateDeployedDevicesFleetResponse
     */
	public function updateDeployedDevicesFleet(
        \OpenAPI\OpenAPI\Models\Operations\UpdateDeployedDevicesFleetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\UpdateDeployedDevicesFleetSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateDeployedDevicesFleetResponse
    {
        $baseUrl = SDK::UPDATE_DEPLOYED_DEVICES_FLEET_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/DeployedDevices/Fleets/{Sid}', \OpenAPI\OpenAPI\Models\Operations\UpdateDeployedDevicesFleetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateDeployedDevicesFleetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->previewDeployedDevicesFleet = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PreviewDeployedDevicesFleet', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update the given properties of a specific Key credential in the Fleet, giving it a friendly name or assigning to a Device.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateDeployedDevicesKeyRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateDeployedDevicesKeySecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateDeployedDevicesKeyResponse
     */
	public function updateDeployedDevicesKey(
        \OpenAPI\OpenAPI\Models\Operations\UpdateDeployedDevicesKeyRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\UpdateDeployedDevicesKeySecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateDeployedDevicesKeyResponse
    {
        $baseUrl = SDK::UPDATE_DEPLOYED_DEVICES_KEY_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/DeployedDevices/Fleets/{FleetSid}/Keys/{Sid}', \OpenAPI\OpenAPI\Models\Operations\UpdateDeployedDevicesKeyRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateDeployedDevicesKeyResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->previewDeployedDevicesFleetKey = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PreviewDeployedDevicesFleetKey', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates a specific AuthorizationDocument.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateHostedNumbersAuthorizationDocumentRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateHostedNumbersAuthorizationDocumentSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateHostedNumbersAuthorizationDocumentResponse
     */
	public function updateHostedNumbersAuthorizationDocument(
        \OpenAPI\OpenAPI\Models\Operations\UpdateHostedNumbersAuthorizationDocumentRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\UpdateHostedNumbersAuthorizationDocumentSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateHostedNumbersAuthorizationDocumentResponse
    {
        $baseUrl = SDK::UPDATE_HOSTED_NUMBERS_AUTHORIZATION_DOCUMENT_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/HostedNumbers/AuthorizationDocuments/{Sid}', \OpenAPI\OpenAPI\Models\Operations\UpdateHostedNumbersAuthorizationDocumentRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateHostedNumbersAuthorizationDocumentResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->previewHostedNumbersAuthorizationDocument = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PreviewHostedNumbersAuthorizationDocument', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates a specific HostedNumberOrder.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateHostedNumbersHostedNumberOrderRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateHostedNumbersHostedNumberOrderSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateHostedNumbersHostedNumberOrderResponse
     */
	public function updateHostedNumbersHostedNumberOrder(
        \OpenAPI\OpenAPI\Models\Operations\UpdateHostedNumbersHostedNumberOrderRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\UpdateHostedNumbersHostedNumberOrderSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateHostedNumbersHostedNumberOrderResponse
    {
        $baseUrl = SDK::UPDATE_HOSTED_NUMBERS_HOSTED_NUMBER_ORDER_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/HostedNumbers/HostedNumberOrders/{Sid}', \OpenAPI\OpenAPI\Models\Operations\UpdateHostedNumbersHostedNumberOrderRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateHostedNumbersHostedNumberOrderResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->previewHostedNumbersHostedNumberOrder = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PreviewHostedNumbersHostedNumberOrder', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update an Add-on installation for the Account specified.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateMarketplaceInstalledAddOnRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateMarketplaceInstalledAddOnSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateMarketplaceInstalledAddOnResponse
     */
	public function updateMarketplaceInstalledAddOn(
        \OpenAPI\OpenAPI\Models\Operations\UpdateMarketplaceInstalledAddOnRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\UpdateMarketplaceInstalledAddOnSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateMarketplaceInstalledAddOnResponse
    {
        $baseUrl = SDK::UPDATE_MARKETPLACE_INSTALLED_ADD_ON_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/marketplace/InstalledAddOns/{Sid}', \OpenAPI\OpenAPI\Models\Operations\UpdateMarketplaceInstalledAddOnRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateMarketplaceInstalledAddOnResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->previewMarketplaceInstalledAddOn = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PreviewMarketplaceInstalledAddOn', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update an Extension for an Add-on installation.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateMarketplaceInstalledAddOnExtensionRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateMarketplaceInstalledAddOnExtensionSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateMarketplaceInstalledAddOnExtensionResponse
     */
	public function updateMarketplaceInstalledAddOnExtension(
        \OpenAPI\OpenAPI\Models\Operations\UpdateMarketplaceInstalledAddOnExtensionRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\UpdateMarketplaceInstalledAddOnExtensionSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateMarketplaceInstalledAddOnExtensionResponse
    {
        $baseUrl = SDK::UPDATE_MARKETPLACE_INSTALLED_ADD_ON_EXTENSION_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/marketplace/InstalledAddOns/{InstalledAddOnSid}/Extensions/{Sid}', \OpenAPI\OpenAPI\Models\Operations\UpdateMarketplaceInstalledAddOnExtensionRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateMarketplaceInstalledAddOnExtensionResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->previewMarketplaceInstalledAddOnInstalledAddOnExtension = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PreviewMarketplaceInstalledAddOnInstalledAddOnExtension', 'json');
            }
        }

        return $response;
    }
	
    /**
     * updateSyncDocument
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateSyncDocumentRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateSyncDocumentSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateSyncDocumentResponse
     */
	public function updateSyncDocument(
        \OpenAPI\OpenAPI\Models\Operations\UpdateSyncDocumentRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\UpdateSyncDocumentSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateSyncDocumentResponse
    {
        $baseUrl = SDK::UPDATE_SYNC_DOCUMENT_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/Sync/Services/{ServiceSid}/Documents/{Sid}', \OpenAPI\OpenAPI\Models\Operations\UpdateSyncDocumentRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "form");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateSyncDocumentResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->previewSyncServiceDocument = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PreviewSyncServiceDocument', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update an identity's access to a specific Sync Document.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateSyncDocumentPermissionRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateSyncDocumentPermissionSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateSyncDocumentPermissionResponse
     */
	public function updateSyncDocumentPermission(
        \OpenAPI\OpenAPI\Models\Operations\UpdateSyncDocumentPermissionRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\UpdateSyncDocumentPermissionSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateSyncDocumentPermissionResponse
    {
        $baseUrl = SDK::UPDATE_SYNC_DOCUMENT_PERMISSION_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/Sync/Services/{ServiceSid}/Documents/{DocumentSid}/Permissions/{Identity}', \OpenAPI\OpenAPI\Models\Operations\UpdateSyncDocumentPermissionRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateSyncDocumentPermissionResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->previewSyncServiceDocumentDocumentPermission = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PreviewSyncServiceDocumentDocumentPermission', 'json');
            }
        }

        return $response;
    }
	
    /**
     * updateSyncService
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateSyncServiceRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateSyncServiceSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateSyncServiceResponse
     */
	public function updateSyncService(
        \OpenAPI\OpenAPI\Models\Operations\UpdateSyncServiceRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\UpdateSyncServiceSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateSyncServiceResponse
    {
        $baseUrl = SDK::UPDATE_SYNC_SERVICE_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/Sync/Services/{Sid}', \OpenAPI\OpenAPI\Models\Operations\UpdateSyncServiceRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateSyncServiceResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->previewSyncService = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PreviewSyncService', 'json');
            }
        }

        return $response;
    }
	
    /**
     * updateSyncSyncListItem
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateSyncSyncListItemRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateSyncSyncListItemSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateSyncSyncListItemResponse
     */
	public function updateSyncSyncListItem(
        \OpenAPI\OpenAPI\Models\Operations\UpdateSyncSyncListItemRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\UpdateSyncSyncListItemSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateSyncSyncListItemResponse
    {
        $baseUrl = SDK::UPDATE_SYNC_SYNC_LIST_ITEM_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/Sync/Services/{ServiceSid}/Lists/{ListSid}/Items/{Index}', \OpenAPI\OpenAPI\Models\Operations\UpdateSyncSyncListItemRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "form");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateSyncSyncListItemResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->previewSyncServiceSyncListSyncListItem = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PreviewSyncServiceSyncListSyncListItem', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update an identity's access to a specific Sync List.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateSyncSyncListPermissionRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateSyncSyncListPermissionSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateSyncSyncListPermissionResponse
     */
	public function updateSyncSyncListPermission(
        \OpenAPI\OpenAPI\Models\Operations\UpdateSyncSyncListPermissionRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\UpdateSyncSyncListPermissionSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateSyncSyncListPermissionResponse
    {
        $baseUrl = SDK::UPDATE_SYNC_SYNC_LIST_PERMISSION_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/Sync/Services/{ServiceSid}/Lists/{ListSid}/Permissions/{Identity}', \OpenAPI\OpenAPI\Models\Operations\UpdateSyncSyncListPermissionRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateSyncSyncListPermissionResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->previewSyncServiceSyncListSyncListPermission = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PreviewSyncServiceSyncListSyncListPermission', 'json');
            }
        }

        return $response;
    }
	
    /**
     * updateSyncSyncMapItem
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateSyncSyncMapItemRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateSyncSyncMapItemSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateSyncSyncMapItemResponse
     */
	public function updateSyncSyncMapItem(
        \OpenAPI\OpenAPI\Models\Operations\UpdateSyncSyncMapItemRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\UpdateSyncSyncMapItemSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateSyncSyncMapItemResponse
    {
        $baseUrl = SDK::UPDATE_SYNC_SYNC_MAP_ITEM_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/Sync/Services/{ServiceSid}/Maps/{MapSid}/Items/{Key}', \OpenAPI\OpenAPI\Models\Operations\UpdateSyncSyncMapItemRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "form");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateSyncSyncMapItemResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->previewSyncServiceSyncMapSyncMapItem = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PreviewSyncServiceSyncMapSyncMapItem', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update an identity's access to a specific Sync Map.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateSyncSyncMapPermissionRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateSyncSyncMapPermissionSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateSyncSyncMapPermissionResponse
     */
	public function updateSyncSyncMapPermission(
        \OpenAPI\OpenAPI\Models\Operations\UpdateSyncSyncMapPermissionRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\UpdateSyncSyncMapPermissionSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateSyncSyncMapPermissionResponse
    {
        $baseUrl = SDK::UPDATE_SYNC_SYNC_MAP_PERMISSION_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/Sync/Services/{ServiceSid}/Maps/{MapSid}/Permissions/{Identity}', \OpenAPI\OpenAPI\Models\Operations\UpdateSyncSyncMapPermissionRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateSyncSyncMapPermissionResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->previewSyncServiceSyncMapSyncMapPermission = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PreviewSyncServiceSyncMapSyncMapPermission', 'json');
            }
        }

        return $response;
    }
	
    /**
     * updateUnderstandAssistant
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateUnderstandAssistantRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateUnderstandAssistantSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateUnderstandAssistantResponse
     */
	public function updateUnderstandAssistant(
        \OpenAPI\OpenAPI\Models\Operations\UpdateUnderstandAssistantRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\UpdateUnderstandAssistantSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateUnderstandAssistantResponse
    {
        $baseUrl = SDK::UPDATE_UNDERSTAND_ASSISTANT_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/understand/Assistants/{Sid}', \OpenAPI\OpenAPI\Models\Operations\UpdateUnderstandAssistantRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateUnderstandAssistantResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->previewUnderstandAssistant = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PreviewUnderstandAssistant', 'json');
            }
        }

        return $response;
    }
	
    /**
     * updateUnderstandAssistantFallbackActions
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateUnderstandAssistantFallbackActionsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateUnderstandAssistantFallbackActionsSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateUnderstandAssistantFallbackActionsResponse
     */
	public function updateUnderstandAssistantFallbackActions(
        \OpenAPI\OpenAPI\Models\Operations\UpdateUnderstandAssistantFallbackActionsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\UpdateUnderstandAssistantFallbackActionsSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateUnderstandAssistantFallbackActionsResponse
    {
        $baseUrl = SDK::UPDATE_UNDERSTAND_ASSISTANT_FALLBACK_ACTIONS_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/understand/Assistants/{AssistantSid}/FallbackActions', \OpenAPI\OpenAPI\Models\Operations\UpdateUnderstandAssistantFallbackActionsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateUnderstandAssistantFallbackActionsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->previewUnderstandAssistantAssistantFallbackActions = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PreviewUnderstandAssistantAssistantFallbackActions', 'json');
            }
        }

        return $response;
    }
	
    /**
     * updateUnderstandAssistantInitiationActions
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateUnderstandAssistantInitiationActionsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateUnderstandAssistantInitiationActionsSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateUnderstandAssistantInitiationActionsResponse
     */
	public function updateUnderstandAssistantInitiationActions(
        \OpenAPI\OpenAPI\Models\Operations\UpdateUnderstandAssistantInitiationActionsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\UpdateUnderstandAssistantInitiationActionsSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateUnderstandAssistantInitiationActionsResponse
    {
        $baseUrl = SDK::UPDATE_UNDERSTAND_ASSISTANT_INITIATION_ACTIONS_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/understand/Assistants/{AssistantSid}/InitiationActions', \OpenAPI\OpenAPI\Models\Operations\UpdateUnderstandAssistantInitiationActionsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateUnderstandAssistantInitiationActionsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->previewUnderstandAssistantAssistantInitiationActions = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PreviewUnderstandAssistantAssistantInitiationActions', 'json');
            }
        }

        return $response;
    }
	
    /**
     * updateUnderstandFieldType
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateUnderstandFieldTypeRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateUnderstandFieldTypeSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateUnderstandFieldTypeResponse
     */
	public function updateUnderstandFieldType(
        \OpenAPI\OpenAPI\Models\Operations\UpdateUnderstandFieldTypeRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\UpdateUnderstandFieldTypeSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateUnderstandFieldTypeResponse
    {
        $baseUrl = SDK::UPDATE_UNDERSTAND_FIELD_TYPE_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/understand/Assistants/{AssistantSid}/FieldTypes/{Sid}', \OpenAPI\OpenAPI\Models\Operations\UpdateUnderstandFieldTypeRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateUnderstandFieldTypeResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->previewUnderstandAssistantFieldType = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PreviewUnderstandAssistantFieldType', 'json');
            }
        }

        return $response;
    }
	
    /**
     * updateUnderstandModelBuild
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateUnderstandModelBuildRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateUnderstandModelBuildSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateUnderstandModelBuildResponse
     */
	public function updateUnderstandModelBuild(
        \OpenAPI\OpenAPI\Models\Operations\UpdateUnderstandModelBuildRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\UpdateUnderstandModelBuildSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateUnderstandModelBuildResponse
    {
        $baseUrl = SDK::UPDATE_UNDERSTAND_MODEL_BUILD_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/understand/Assistants/{AssistantSid}/ModelBuilds/{Sid}', \OpenAPI\OpenAPI\Models\Operations\UpdateUnderstandModelBuildRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateUnderstandModelBuildResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->previewUnderstandAssistantModelBuild = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PreviewUnderstandAssistantModelBuild', 'json');
            }
        }

        return $response;
    }
	
    /**
     * updateUnderstandQuery
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateUnderstandQueryRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateUnderstandQuerySecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateUnderstandQueryResponse
     */
	public function updateUnderstandQuery(
        \OpenAPI\OpenAPI\Models\Operations\UpdateUnderstandQueryRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\UpdateUnderstandQuerySecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateUnderstandQueryResponse
    {
        $baseUrl = SDK::UPDATE_UNDERSTAND_QUERY_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/understand/Assistants/{AssistantSid}/Queries/{Sid}', \OpenAPI\OpenAPI\Models\Operations\UpdateUnderstandQueryRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateUnderstandQueryResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->previewUnderstandAssistantQuery = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PreviewUnderstandAssistantQuery', 'json');
            }
        }

        return $response;
    }
	
    /**
     * updateUnderstandSample
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateUnderstandSampleRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateUnderstandSampleSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateUnderstandSampleResponse
     */
	public function updateUnderstandSample(
        \OpenAPI\OpenAPI\Models\Operations\UpdateUnderstandSampleRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\UpdateUnderstandSampleSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateUnderstandSampleResponse
    {
        $baseUrl = SDK::UPDATE_UNDERSTAND_SAMPLE_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/understand/Assistants/{AssistantSid}/Tasks/{TaskSid}/Samples/{Sid}', \OpenAPI\OpenAPI\Models\Operations\UpdateUnderstandSampleRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateUnderstandSampleResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->previewUnderstandAssistantTaskSample = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PreviewUnderstandAssistantTaskSample', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates the style sheet for an assistant identified by {AssistantSid} or {AssistantUniqueName}.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateUnderstandStyleSheetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateUnderstandStyleSheetSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateUnderstandStyleSheetResponse
     */
	public function updateUnderstandStyleSheet(
        \OpenAPI\OpenAPI\Models\Operations\UpdateUnderstandStyleSheetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\UpdateUnderstandStyleSheetSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateUnderstandStyleSheetResponse
    {
        $baseUrl = SDK::UPDATE_UNDERSTAND_STYLE_SHEET_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/understand/Assistants/{AssistantSid}/StyleSheet', \OpenAPI\OpenAPI\Models\Operations\UpdateUnderstandStyleSheetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateUnderstandStyleSheetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->previewUnderstandAssistantStyleSheet = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PreviewUnderstandAssistantStyleSheet', 'json');
            }
        }

        return $response;
    }
	
    /**
     * updateUnderstandTask
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateUnderstandTaskRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateUnderstandTaskSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateUnderstandTaskResponse
     */
	public function updateUnderstandTask(
        \OpenAPI\OpenAPI\Models\Operations\UpdateUnderstandTaskRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\UpdateUnderstandTaskSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateUnderstandTaskResponse
    {
        $baseUrl = SDK::UPDATE_UNDERSTAND_TASK_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/understand/Assistants/{AssistantSid}/Tasks/{Sid}', \OpenAPI\OpenAPI\Models\Operations\UpdateUnderstandTaskRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateUnderstandTaskResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->previewUnderstandAssistantTask = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PreviewUnderstandAssistantTask', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates the actions of an Task identified by {TaskSid} or {TaskUniqueName}.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateUnderstandTaskActionsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateUnderstandTaskActionsSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateUnderstandTaskActionsResponse
     */
	public function updateUnderstandTaskActions(
        \OpenAPI\OpenAPI\Models\Operations\UpdateUnderstandTaskActionsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\UpdateUnderstandTaskActionsSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateUnderstandTaskActionsResponse
    {
        $baseUrl = SDK::UPDATE_UNDERSTAND_TASK_ACTIONS_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/understand/Assistants/{AssistantSid}/Tasks/{TaskSid}/Actions', \OpenAPI\OpenAPI\Models\Operations\UpdateUnderstandTaskActionsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateUnderstandTaskActionsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->previewUnderstandAssistantTaskTaskActions = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PreviewUnderstandAssistantTaskTaskActions', 'json');
            }
        }

        return $response;
    }
	
    /**
     * updateWirelessRatePlan
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateWirelessRatePlanRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateWirelessRatePlanSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateWirelessRatePlanResponse
     */
	public function updateWirelessRatePlan(
        \OpenAPI\OpenAPI\Models\Operations\UpdateWirelessRatePlanRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\UpdateWirelessRatePlanSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateWirelessRatePlanResponse
    {
        $baseUrl = SDK::UPDATE_WIRELESS_RATE_PLAN_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/wireless/RatePlans/{Sid}', \OpenAPI\OpenAPI\Models\Operations\UpdateWirelessRatePlanRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateWirelessRatePlanResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->previewWirelessRatePlan = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PreviewWirelessRatePlan', 'json');
            }
        }

        return $response;
    }
	
    /**
     * updateWirelessSim
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateWirelessSimRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateWirelessSimSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateWirelessSimResponse
     */
	public function updateWirelessSim(
        \OpenAPI\OpenAPI\Models\Operations\UpdateWirelessSimRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\UpdateWirelessSimSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateWirelessSimResponse
    {
        $baseUrl = SDK::UPDATE_WIRELESS_SIM_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/wireless/Sims/{Sid}', \OpenAPI\OpenAPI\Models\Operations\UpdateWirelessSimRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateWirelessSimResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->previewWirelessSim = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PreviewWirelessSim', 'json');
            }
        }

        return $response;
    }
}