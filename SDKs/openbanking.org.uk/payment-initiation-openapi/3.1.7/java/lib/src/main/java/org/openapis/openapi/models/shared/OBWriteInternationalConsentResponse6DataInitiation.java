/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * OBWriteInternationalConsentResponse6DataInitiation - The Initiation payload is sent by the initiating party to the ASPSP. It is used to request movement of funds from the debtor account to a creditor for a single international payment.
 */
public class OBWriteInternationalConsentResponse6DataInitiation {
    /**
     * Specifies which party/parties will bear the charges associated with the processing of the payment transaction.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ChargeBearer")
    public OBChargeBearerType1CodeEnum chargeBearer;
    public OBWriteInternationalConsentResponse6DataInitiation withChargeBearer(OBChargeBearerType1CodeEnum chargeBearer) {
        this.chargeBearer = chargeBearer;
        return this;
    }
    
    /**
     * Party to which an amount of money is due.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Creditor")
    public OBWriteInternationalConsentResponse6DataInitiationCreditor creditor;
    public OBWriteInternationalConsentResponse6DataInitiation withCreditor(OBWriteInternationalConsentResponse6DataInitiationCreditor creditor) {
        this.creditor = creditor;
        return this;
    }
    
    /**
     * Unambiguous identification of the account of the creditor to which a credit entry will be posted as a result of the payment transaction.
     */
    @JsonProperty("CreditorAccount")
    public OBWriteInternationalConsentResponse6DataInitiationCreditorAccount creditorAccount;
    public OBWriteInternationalConsentResponse6DataInitiation withCreditorAccount(OBWriteInternationalConsentResponse6DataInitiationCreditorAccount creditorAccount) {
        this.creditorAccount = creditorAccount;
        return this;
    }
    
    /**
     * Financial institution servicing an account for the creditor.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("CreditorAgent")
    public OBWriteInternationalConsentResponse6DataInitiationCreditorAgent creditorAgent;
    public OBWriteInternationalConsentResponse6DataInitiation withCreditorAgent(OBWriteInternationalConsentResponse6DataInitiationCreditorAgent creditorAgent) {
        this.creditorAgent = creditorAgent;
        return this;
    }
    
    /**
     * Specifies the currency of the to be transferred amount, which is different from the currency of the debtor's account.
     */
    @JsonProperty("CurrencyOfTransfer")
    public String currencyOfTransfer;
    public OBWriteInternationalConsentResponse6DataInitiation withCurrencyOfTransfer(String currencyOfTransfer) {
        this.currencyOfTransfer = currencyOfTransfer;
        return this;
    }
    
    /**
     * Unambiguous identification of the account of the debtor to which a debit entry will be made as a result of the transaction.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("DebtorAccount")
    public OBWriteInternationalConsentResponse6DataInitiationDebtorAccount debtorAccount;
    public OBWriteInternationalConsentResponse6DataInitiation withDebtorAccount(OBWriteInternationalConsentResponse6DataInitiationDebtorAccount debtorAccount) {
        this.debtorAccount = debtorAccount;
        return this;
    }
    
    /**
     * Country in which Credit Account is domiciled. Code to identify a country, a dependency, or another area of particular geopolitical interest, on the basis of country names obtained from the United Nations (ISO 3166, Alpha-2 code).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("DestinationCountryCode")
    public String destinationCountryCode;
    public OBWriteInternationalConsentResponse6DataInitiation withDestinationCountryCode(String destinationCountryCode) {
        this.destinationCountryCode = destinationCountryCode;
        return this;
    }
    
    /**
     * Unique identification assigned by the initiating party to unambiguously identify the transaction. This identification is passed on, unchanged, throughout the entire end-to-end chain.
     * Usage: The end-to-end identification can be used for reconciliation or to link tasks relating to the transaction. It can be included in several messages related to the transaction.
     * OB: The Faster Payments Scheme can only access 31 characters for the EndToEndIdentification field.
     */
    @JsonProperty("EndToEndIdentification")
    public String endToEndIdentification;
    public OBWriteInternationalConsentResponse6DataInitiation withEndToEndIdentification(String endToEndIdentification) {
        this.endToEndIdentification = endToEndIdentification;
        return this;
    }
    
    /**
     * Provides details on the currency exchange rate and contract.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ExchangeRateInformation")
    public OBWriteInternationalConsentResponse6DataInitiationExchangeRateInformation exchangeRateInformation;
    public OBWriteInternationalConsentResponse6DataInitiation withExchangeRateInformation(OBWriteInternationalConsentResponse6DataInitiationExchangeRateInformation exchangeRateInformation) {
        this.exchangeRateInformation = exchangeRateInformation;
        return this;
    }
    
    /**
     * Specifies the purpose of an international payment, when there is no corresponding 4 character code available in the ISO20022 list of Purpose Codes.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ExtendedPurpose")
    public String extendedPurpose;
    public OBWriteInternationalConsentResponse6DataInitiation withExtendedPurpose(String extendedPurpose) {
        this.extendedPurpose = extendedPurpose;
        return this;
    }
    
    /**
     * Amount of money to be moved between the debtor and creditor, before deduction of charges, expressed in the currency as ordered by the initiating party.
     * Usage: This amount has to be transported unchanged through the transaction chain.
     */
    @JsonProperty("InstructedAmount")
    public OBWriteInternationalConsentResponse6DataInitiationInstructedAmount instructedAmount;
    public OBWriteInternationalConsentResponse6DataInitiation withInstructedAmount(OBWriteInternationalConsentResponse6DataInitiationInstructedAmount instructedAmount) {
        this.instructedAmount = instructedAmount;
        return this;
    }
    
    /**
     * Unique identification as assigned by an instructing party for an instructed party to unambiguously identify the instruction.
     * Usage: the  instruction identification is a point to point reference that can be used between the instructing party and the instructed party to refer to the individual instruction. It can be included in several messages related to the instruction.
     */
    @JsonProperty("InstructionIdentification")
    public String instructionIdentification;
    public OBWriteInternationalConsentResponse6DataInitiation withInstructionIdentification(String instructionIdentification) {
        this.instructionIdentification = instructionIdentification;
        return this;
    }
    
    /**
     * Indicator of the urgency or order of importance that the instructing party would like the instructed party to apply to the processing of the instruction.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("InstructionPriority")
    public OBWriteInternationalConsentResponse6DataInitiationInstructionPriorityEnum instructionPriority;
    public OBWriteInternationalConsentResponse6DataInitiation withInstructionPriority(OBWriteInternationalConsentResponse6DataInitiationInstructionPriorityEnum instructionPriority) {
        this.instructionPriority = instructionPriority;
        return this;
    }
    
    /**
     * User community specific instrument.
     * Usage: This element is used to specify a local instrument, local clearing option and/or further qualify the service or service level.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("LocalInstrument")
    public String localInstrument;
    public OBWriteInternationalConsentResponse6DataInitiation withLocalInstrument(String localInstrument) {
        this.localInstrument = localInstrument;
        return this;
    }
    
    /**
     * Specifies the external purpose code in the format of character string with a maximum length of 4 characters.
     * The list of valid codes is an external code list published separately.
     * External code sets can be downloaded from www.iso20022.org.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Purpose")
    public String purpose;
    public OBWriteInternationalConsentResponse6DataInitiation withPurpose(String purpose) {
        this.purpose = purpose;
        return this;
    }
    
    /**
     * Information supplied to enable the matching of an entry with the items that the transfer is intended to settle, such as commercial invoices in an accounts' receivable system.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("RemittanceInformation")
    public OBWriteInternationalConsentResponse6DataInitiationRemittanceInformation remittanceInformation;
    public OBWriteInternationalConsentResponse6DataInitiation withRemittanceInformation(OBWriteInternationalConsentResponse6DataInitiationRemittanceInformation remittanceInformation) {
        this.remittanceInformation = remittanceInformation;
        return this;
    }
    
    /**
     * Additional information that can not be captured in the structured fields and/or any other specific block.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("SupplementaryData")
    public java.util.Map<String, Object> supplementaryData;
    public OBWriteInternationalConsentResponse6DataInitiation withSupplementaryData(java.util.Map<String, Object> supplementaryData) {
        this.supplementaryData = supplementaryData;
        return this;
    }
    
}
