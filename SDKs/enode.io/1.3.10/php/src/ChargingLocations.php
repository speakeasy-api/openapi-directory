<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class ChargingLocations 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Delete Charging Location
     * 
     * Delete a Charging Location
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteCharginglocationsCharginglocationidRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteCharginglocationsCharginglocationidSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteCharginglocationsCharginglocationidResponse
     */
	public function deleteCharginglocationsCharginglocationid(
        \OpenAPI\OpenAPI\Models\Operations\DeleteCharginglocationsCharginglocationidRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeleteCharginglocationsCharginglocationidSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteCharginglocationsCharginglocationidResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/charging-locations/{chargingLocationId}', \OpenAPI\OpenAPI\Models\Operations\DeleteCharginglocationsCharginglocationidRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteCharginglocationsCharginglocationidResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * List Charging Locations
     * 
     * Returns a list of Charging Locations registered to the User
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\GetCharginglocationsResponse
     */
	public function getCharginglocations(
    ): \OpenAPI\OpenAPI\Models\Operations\GetCharginglocationsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/charging-locations');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetCharginglocationsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->onechargingLocationsPostRequestBodyContentApplication1jsonSchemas = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\OnechargingLocationsPostRequestBodyContentApplication1jsonSchema>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get Charging Location
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetCharginglocationsCharginglocationidRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetCharginglocationsCharginglocationidSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetCharginglocationsCharginglocationidResponse
     */
	public function getCharginglocationsCharginglocationid(
        \OpenAPI\OpenAPI\Models\Operations\GetCharginglocationsCharginglocationidRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetCharginglocationsCharginglocationidSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetCharginglocationsCharginglocationidResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/charging-locations/{chargingLocationId}', \OpenAPI\OpenAPI\Models\Operations\GetCharginglocationsCharginglocationidRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetCharginglocationsCharginglocationidResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->onechargingLocationsPostRequestBodyContentApplication1jsonSchema = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\OnechargingLocationsPostRequestBodyContentApplication1jsonSchema', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create Charging Location
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostCharginglocationsRequestBodyInput $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PostCharginglocationsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PostCharginglocationsResponse
     */
	public function postCharginglocations(
        \OpenAPI\OpenAPI\Models\Operations\PostCharginglocationsRequestBodyInput $request,
        \OpenAPI\OpenAPI\Models\Operations\PostCharginglocationsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PostCharginglocationsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/charging-locations');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostCharginglocationsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->onechargingLocationsPostRequestBodyContentApplication1jsonSchema = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\OnechargingLocationsPostRequestBodyContentApplication1jsonSchema', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update Charging Location
     * 
     * Updates a charging location with new configuration
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PutCharginglocationsCharginglocationidRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PutCharginglocationsCharginglocationidSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PutCharginglocationsCharginglocationidResponse
     */
	public function putCharginglocationsCharginglocationid(
        \OpenAPI\OpenAPI\Models\Operations\PutCharginglocationsCharginglocationidRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PutCharginglocationsCharginglocationidSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PutCharginglocationsCharginglocationidResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/charging-locations/{chargingLocationId}', \OpenAPI\OpenAPI\Models\Operations\PutCharginglocationsCharginglocationidRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "onechargingLocationsPostRequestBodyContentApplication1jsonSchemaInput", "json");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PutCharginglocationsCharginglocationidResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->onechargingLocationsPostRequestBodyContentApplication1jsonSchema = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\OnechargingLocationsPostRequestBodyContentApplication1jsonSchema', 'json');
            }
        }

        return $response;
    }
}