/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";

export class SearchTracksSecurity extends SpeakeasyBase {
  @SpeakeasyMetadata({ data: "security, scheme=true;type=http;subtype=basic" })
  basic?: shared.SchemeBasic;

  @SpeakeasyMetadata({
    data: "security, scheme=true;type=oauth2;name=Authorization",
  })
  customerAccessCode?: string;
}

/**
 * Which library to search
 */
export enum SearchTracksLibraryEnum {
  Shutterstock = "shutterstock",
  Premier = "premier",
}

/**
 * Sort by
 */
export enum SearchTracksSortEnum {
  Score = "score",
  RankingAll = "ranking_all",
  Artist = "artist",
  Title = "title",
  Bpm = "bpm",
  Freshness = "freshness",
  Duration = "duration",
}

/**
 * Sort order
 */
export enum SearchTracksSortOrderEnum {
  Asc = "asc",
  Desc = "desc",
}

/**
 * Amount of detail to render in the response
 */
export enum SearchTracksViewEnum {
  Minimal = "minimal",
  Full = "full",
}

export class SearchTracksRequest extends SpeakeasyBase {
  /**
   * Show tracks with one of the specified artist names or IDs
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=artists",
  })
  artists?: string[];

  /**
   * (Deprecated; use bpm_from and bpm_to instead) Show tracks with the specified beats per minute
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=bpm" })
  bpm?: number;

  /**
   * Show tracks with the specified beats per minute or faster
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=bpm_from",
  })
  bpmFrom?: number;

  /**
   * Show tracks with the specified beats per minute or slower
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=bpm_to",
  })
  bpmTo?: number;

  /**
   * Show tracks with the specified duration in seconds
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=duration",
  })
  duration?: number;

  /**
   * Show tracks with the specified duration or longer in seconds
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=duration_from",
  })
  durationFrom?: number;

  /**
   * Show tracks with the specified duration or shorter in seconds
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=duration_to",
  })
  durationTo?: number;

  /**
   * Fields to display in the response; see the documentation for the fields parameter in the overview section
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=fields",
  })
  fields?: string;

  /**
   * Show tracks with each of the specified genres; to get the list of genres, use `GET /v2/audio/genres`
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=genre" })
  genre?: string[];

  /**
   * Show tracks with each of the specified instruments; to get the list of instruments, use `GET /v2/audio/instruments`
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=instruments",
  })
  instruments?: string[];

  /**
   * Show instrumental music only
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=is_instrumental",
  })
  isInstrumental?: boolean;

  /**
   * Which language to search in
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=language",
  })
  language?: string;

  /**
   * Which library to search
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=library",
  })
  library?: SearchTracksLibraryEnum;

  /**
   * Show tracks with each of the specified moods; to get the list of moods, use `GET /v2/audio/moods`
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=moods" })
  moods?: string[];

  /**
   * Page number
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=page" })
  page?: number;

  /**
   * Number of results per page
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=per_page",
  })
  perPage?: number;

  /**
   * One or more search terms separated by spaces
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=query" })
  query?: string;

  /**
   * Sort by
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=sort" })
  sort?: SearchTracksSortEnum;

  /**
   * Sort order
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=sort_order",
  })
  sortOrder?: SearchTracksSortOrderEnum;

  /**
   * Amount of detail to render in the response
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=view" })
  view?: SearchTracksViewEnum;

  /**
   * Show tracks with the specified vocal description (male, female)
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=vocal_description",
  })
  vocalDescription?: string;
}

export class SearchTracksResponse extends SpeakeasyBase {
  /**
   * OK
   */
  @SpeakeasyMetadata()
  audioSearchResults?: shared.AudioSearchResults;

  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;
}
