"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import signiertebelegdaten as shared_signiertebelegdaten
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class BelegBelegTypenEnum(str, Enum):
    BELEGKREISINITIALISIERUNG = 'Belegkreisinitialisierung'
    KASSENBERICHT = 'Kassenbericht'
    MONATSABSCHLUSS = 'Monatsabschluss'
    STARTBELEG = 'Startbeleg'
    STORNO = 'Storno'
    SYSTEMBELEG = 'Systembeleg'
    TRAINING = 'Training'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Beleg:
    r"""The requested `Beleg` resource."""
    
    href: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('_href'), 'exclude': lambda f: f is None }})
    r"""URL of the particular `Beleg` instance."""  
    uuid: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('_uuid'), 'exclude': lambda f: f is None }})
    r"""Unique ID of the particular `Beleg` instance."""  
    beleg_codes: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Beleg-Codes'), 'exclude': lambda f: f is None }})  
    beleg_typen: Optional[list[BelegBelegTypenEnum]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Beleg-Typen'), 'exclude': lambda f: f is None }})  
    belegdaten: Optional[shared_signiertebelegdaten.SignierteBelegdaten] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Belegdaten'), 'exclude': lambda f: f is None }})
    r"""The complete `Beleg` that has been signed by the \\"Signaturerstellungseinheit\\" and stored in the \\"Datenerfassungsprotokoll\\"."""  
    jws: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('JWS'), 'exclude': lambda f: f is None }})
    r"""The signed `Beleg` as a JWS signature token."""  
    qr: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('QR'), 'exclude': lambda f: f is None }})
    r"""The portion of the `JWS` token to be used for generating QR codes."""  
    qr_link: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('QR-Link'), 'exclude': lambda f: f is None }})
    r"""A hyperlink that retrieves the `QR` data."""  
    registrierkasse_uuid: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Registrierkasse-UUID'), 'exclude': lambda f: f is None }})
    r"""The `_uuid` of the `Registrierkasse` that has issued this `Beleg`."""  
    signaturerstellungseinheit_uuid: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Signaturerstellungseinheit-UUID'), 'exclude': lambda f: f is None }})
    r"""The `_uuid` of the `Signaturerstellungseinheit` that has signed this `Beleg`."""  
    