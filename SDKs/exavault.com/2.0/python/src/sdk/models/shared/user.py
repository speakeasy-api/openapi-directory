"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import userattributes as shared_userattributes
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class UserRelationshipsHomeResourceDataTypeEnum(str, Enum):
    r"""Type is resource."""
    RESOURCE = 'resource'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UserRelationshipsHomeResourceData:
    
    id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""ID of home directory resource."""  
    type: Optional[UserRelationshipsHomeResourceDataTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})
    r"""Type is resource."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UserRelationshipsHomeResource:
    
    data: Optional[UserRelationshipsHomeResourceData] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('data'), 'exclude': lambda f: f is None }})  
    
class UserRelationshipsOwnerAccountDataTypeEnum(str, Enum):
    r"""Type is account."""
    ACCOUNT = 'account'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UserRelationshipsOwnerAccountData:
    
    id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""ID of the account."""  
    type: Optional[UserRelationshipsOwnerAccountDataTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})
    r"""Type is account."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UserRelationshipsOwnerAccount:
    
    data: Optional[UserRelationshipsOwnerAccountData] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('data'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UserRelationships:
    r"""Home resource and owner account relationship data for the user."""
    
    owner_account: UserRelationshipsOwnerAccount = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ownerAccount') }})  
    home_resource: Optional[UserRelationshipsHomeResource] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('homeResource'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class User:
    r"""Object contains user properties."""
    
    attributes: Optional[shared_userattributes.UserAttributes] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('attributes'), 'exclude': lambda f: f is None }})
    r"""Attributes of the user including expiration, home directory, and permissions."""  
    id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""ID of the user."""  
    relationships: Optional[UserRelationships] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('relationships'), 'exclude': lambda f: f is None }})
    r"""Home resource and owner account relationship data for the user."""  
    type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})
    r"""Type of object being returned. Always \\"user\\" """  
    