"use strict";
/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Scim = void 0;
var utils = __importStar(require("../internal/utils"));
var operations = __importStar(require("./models/operations"));
var shared = __importStar(require("./models/shared"));
/**
 * SCIM is a provisioning system that lets you manage users within your identity provider (IdP).
 *
 * @remarks
 * For more information, see [System for Cross-domain Identity management](https://docs.docker.com/docker-hub/scim/).
 *
 */
var Scim = /** @class */ (function () {
    function Scim(defaultClient, securityClient, serverURL, language, sdkVersion, genVersion) {
        this._defaultClient = defaultClient;
        this._securityClient = securityClient;
        this._serverURL = serverURL;
        this._language = language;
        this._sdkVersion = sdkVersion;
        this._genVersion = genVersion;
    }
    /**
     * List resource types
     *
     * @remarks
     * Returns all resource types supported for the SCIM configuration.
     *
     */
    Scim.prototype.getV2Scim20ResourceTypes = function (config) {
        var baseURL = this._serverURL;
        var url = baseURL.replace(/\/$/, "") + "/v2/scim/2.0/ResourceTypes";
        var client = this._defaultClient;
        var r = client.request(__assign({ url: url, method: "get" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.GetV2Scim20ResourceTypesResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/scim+json")) {
                        res.getV2Scim20ResourceTypes200ApplicationScimPlusJsonObject =
                            utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, operations.GetV2Scim20ResourceTypes200ApplicationScimPlusJson);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 401:
                    if (utils.matchContentType(contentType, "application/scim+json")) {
                        res.getV2Scim20ResourceTypes401ApplicationScimPlusJsonObject =
                            utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, operations.GetV2Scim20ResourceTypes401ApplicationScimPlusJson);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 500:
                    if (utils.matchContentType(contentType, "application/scim+json")) {
                        res.getV2Scim20ResourceTypes500ApplicationScimPlusJsonObject =
                            utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, operations.GetV2Scim20ResourceTypes500ApplicationScimPlusJson);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Get a resource type
     *
     * @remarks
     * Returns a resource type by name.
     *
     */
    Scim.prototype.getV2Scim20ResourceTypesName = function (req, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.GetV2Scim20ResourceTypesNameRequest(req);
        }
        var baseURL = this._serverURL;
        var url = utils.generateURL(baseURL, "/v2/scim/2.0/ResourceTypes/{name}", req);
        var client = this._defaultClient;
        var r = client.request(__assign({ url: url, method: "get" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.GetV2Scim20ResourceTypesNameResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/scim+json")) {
                        res.scimResourceType = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.ScimResourceType);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 401:
                    if (utils.matchContentType(contentType, "application/scim+json")) {
                        res.getV2Scim20ResourceTypesName401ApplicationScimPlusJsonObject =
                            utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, operations.GetV2Scim20ResourceTypesName401ApplicationScimPlusJson);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 404:
                    if (utils.matchContentType(contentType, "application/scim+json")) {
                        res.getV2Scim20ResourceTypesName404ApplicationScimPlusJsonObject =
                            utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, operations.GetV2Scim20ResourceTypesName404ApplicationScimPlusJson);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 500:
                    if (utils.matchContentType(contentType, "application/scim+json")) {
                        res.getV2Scim20ResourceTypesName500ApplicationScimPlusJsonObject =
                            utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, operations.GetV2Scim20ResourceTypesName500ApplicationScimPlusJson);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * List schemas
     *
     * @remarks
     * Returns all schemas supported for the SCIM configuration.
     *
     */
    Scim.prototype.getV2Scim20Schemas = function (config) {
        var baseURL = this._serverURL;
        var url = baseURL.replace(/\/$/, "") + "/v2/scim/2.0/Schemas";
        var client = this._defaultClient;
        var r = client.request(__assign({ url: url, method: "get" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.GetV2Scim20SchemasResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/scim+json")) {
                        res.getV2Scim20Schemas200ApplicationScimPlusJsonObject =
                            utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, operations.GetV2Scim20Schemas200ApplicationScimPlusJson);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 401:
                    if (utils.matchContentType(contentType, "application/scim+json")) {
                        res.getV2Scim20Schemas401ApplicationScimPlusJsonObject =
                            utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, operations.GetV2Scim20Schemas401ApplicationScimPlusJson);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 500:
                    if (utils.matchContentType(contentType, "application/scim+json")) {
                        res.getV2Scim20Schemas500ApplicationScimPlusJsonObject =
                            utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, operations.GetV2Scim20Schemas500ApplicationScimPlusJson);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Get a schema
     *
     * @remarks
     * Returns a schema by ID.
     *
     */
    Scim.prototype.getV2Scim20SchemasId = function (req, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.GetV2Scim20SchemasIdRequest(req);
        }
        var baseURL = this._serverURL;
        var url = utils.generateURL(baseURL, "/v2/scim/2.0/Schemas/{id}", req);
        var client = this._defaultClient;
        var r = client.request(__assign({ url: url, method: "get" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.GetV2Scim20SchemasIdResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/scim+json")) {
                        res.scimSchema = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.ScimSchema);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 401:
                    if (utils.matchContentType(contentType, "application/scim+json")) {
                        res.getV2Scim20SchemasId401ApplicationScimPlusJsonObject =
                            utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, operations.GetV2Scim20SchemasId401ApplicationScimPlusJson);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 404:
                    if (utils.matchContentType(contentType, "application/scim+json")) {
                        res.getV2Scim20SchemasId404ApplicationScimPlusJsonObject =
                            utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, operations.GetV2Scim20SchemasId404ApplicationScimPlusJson);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 500:
                    if (utils.matchContentType(contentType, "application/scim+json")) {
                        res.getV2Scim20SchemasId500ApplicationScimPlusJsonObject =
                            utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, operations.GetV2Scim20SchemasId500ApplicationScimPlusJson);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Get service provider config
     *
     * @remarks
     * Returns a service provider config for Docker's configuration.
     *
     */
    Scim.prototype.getV2Scim20ServiceProviderConfig = function (config) {
        var baseURL = this._serverURL;
        var url = baseURL.replace(/\/$/, "") + "/v2/scim/2.0/ServiceProviderConfig";
        var client = this._defaultClient;
        var r = client.request(__assign({ url: url, method: "get" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.GetV2Scim20ServiceProviderConfigResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/scim+json")) {
                        res.scimServiceProviderConfig = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.ScimServiceProviderConfig);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 401:
                    if (utils.matchContentType(contentType, "application/scim+json")) {
                        res.getV2Scim20ServiceProviderConfig401ApplicationScimPlusJsonObject =
                            utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, operations.GetV2Scim20ServiceProviderConfig401ApplicationScimPlusJson);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 500:
                    if (utils.matchContentType(contentType, "application/scim+json")) {
                        res.getV2Scim20ServiceProviderConfig500ApplicationScimPlusJsonObject =
                            utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, operations.GetV2Scim20ServiceProviderConfig500ApplicationScimPlusJson);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * List users
     *
     * @remarks
     * List users, returns paginated users for an organization. Use `startIndex`
     * and `count` query parameters to receive paginated results.
     *
     * **Sorting:**<br>
     * Sorting lets you to specify the order of returned resources by specifying
     * a combination of `sortBy` and `sortOrder` query parameters.
     *
     * The `sortBy` parameter specifies the attribute whose value will be used
     * to order the returned responses. The `sortOrder` parameter defines the
     * order in which the `sortBy` parameter is applied. Allowed values are
     * "ascending" and "descending".
     *
     * **Filtering:**<br>
     * You can request a subset of resources by specifying the `filter` query
     * parameter containing a filter expression. Attribute names and attribute
     * operators used in filters are case insensitive. The filter parameter
     * must contain at least one valid expression. Each expression must contain
     * an attribute name followed by an attribute operator and an optional
     * value.
     *
     * Supported operators are listed below.
     *
     * - `eq` equal
     * - `ne` not equal
     * - `co` contains
     * - `sw` starts with
     * - `and` Logical "and"
     * - `or` Logical "or"
     * - `not` "Not" function
     * - `()` Precedence grouping
     *
     */
    Scim.prototype.getV2Scim20Users = function (req, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.GetV2Scim20UsersRequest(req);
        }
        var baseURL = this._serverURL;
        var url = baseURL.replace(/\/$/, "") + "/v2/scim/2.0/Users";
        var client = this._defaultClient;
        var queryParams = utils.serializeQueryParams(req);
        var r = client.request(__assign({ url: url + queryParams, method: "get" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.GetV2Scim20UsersResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/scim+json")) {
                        res.getV2Scim20Users200ApplicationScimPlusJsonObject =
                            utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, operations.GetV2Scim20Users200ApplicationScimPlusJson);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 400:
                    if (utils.matchContentType(contentType, "application/scim+json")) {
                        res.getV2Scim20Users400ApplicationScimPlusJsonObject =
                            utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, operations.GetV2Scim20Users400ApplicationScimPlusJson);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 401:
                    if (utils.matchContentType(contentType, "application/scim+json")) {
                        res.getV2Scim20Users401ApplicationScimPlusJsonObject =
                            utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, operations.GetV2Scim20Users401ApplicationScimPlusJson);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 403:
                    if (utils.matchContentType(contentType, "application/scim+json")) {
                        res.getV2Scim20Users403ApplicationScimPlusJsonObject =
                            utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, operations.GetV2Scim20Users403ApplicationScimPlusJson);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 404:
                    if (utils.matchContentType(contentType, "application/scim+json")) {
                        res.getV2Scim20Users404ApplicationScimPlusJsonObject =
                            utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, operations.GetV2Scim20Users404ApplicationScimPlusJson);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 500:
                    if (utils.matchContentType(contentType, "application/scim+json")) {
                        res.getV2Scim20Users500ApplicationScimPlusJsonObject =
                            utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, operations.GetV2Scim20Users500ApplicationScimPlusJson);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Get a user
     *
     * @remarks
     * Returns a user by ID.
     *
     */
    Scim.prototype.getV2Scim20UsersId = function (req, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.GetV2Scim20UsersIdRequest(req);
        }
        var baseURL = this._serverURL;
        var url = utils.generateURL(baseURL, "/v2/scim/2.0/Users/{id}", req);
        var client = this._defaultClient;
        var r = client.request(__assign({ url: url, method: "get" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.GetV2Scim20UsersIdResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/scim+json")) {
                        res.scimUser = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.ScimUser);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 400:
                    if (utils.matchContentType(contentType, "application/scim+json")) {
                        res.getV2Scim20UsersId400ApplicationScimPlusJsonObject =
                            utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, operations.GetV2Scim20UsersId400ApplicationScimPlusJson);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 401:
                    if (utils.matchContentType(contentType, "application/scim+json")) {
                        res.getV2Scim20UsersId401ApplicationScimPlusJsonObject =
                            utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, operations.GetV2Scim20UsersId401ApplicationScimPlusJson);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 403:
                    if (utils.matchContentType(contentType, "application/scim+json")) {
                        res.getV2Scim20UsersId403ApplicationScimPlusJsonObject =
                            utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, operations.GetV2Scim20UsersId403ApplicationScimPlusJson);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 404:
                    if (utils.matchContentType(contentType, "application/scim+json")) {
                        res.getV2Scim20UsersId404ApplicationScimPlusJsonObject =
                            utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, operations.GetV2Scim20UsersId404ApplicationScimPlusJson);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 500:
                    if (utils.matchContentType(contentType, "application/scim+json")) {
                        res.getV2Scim20UsersId500ApplicationScimPlusJsonObject =
                            utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, operations.GetV2Scim20UsersId500ApplicationScimPlusJson);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Create user
     *
     * @remarks
     * Creates a user. If the user already exists by email, they are assigned
     * to the organization on the "company" team.
     *
     */
    Scim.prototype.postV2Scim20Users = function (req, config) {
        var _a;
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.PostV2Scim20UsersRequestBody(req);
        }
        var baseURL = this._serverURL;
        var url = baseURL.replace(/\/$/, "") + "/v2/scim/2.0/Users";
        var _b = [{}, {}], reqBodyHeaders = _b[0], reqBody = _b[1];
        try {
            _a = utils.serializeRequestBody(req, "request", "json"), reqBodyHeaders = _a[0], reqBody = _a[1];
        }
        catch (e) {
            if (e instanceof Error) {
                throw new Error("Error serializing request body, cause: ".concat(e.message));
            }
        }
        var client = this._defaultClient;
        var headers = __assign(__assign({}, reqBodyHeaders), config === null || config === void 0 ? void 0 : config.headers);
        if (reqBody == null || Object.keys(reqBody).length === 0)
            throw new Error("request body is required");
        var r = client.request(__assign({ url: url, method: "post", headers: headers, data: reqBody }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.PostV2Scim20UsersResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 201:
                    if (utils.matchContentType(contentType, "application/scim+json")) {
                        res.scimUser = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.ScimUser);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 400:
                    if (utils.matchContentType(contentType, "application/scim+json")) {
                        res.postV2Scim20Users400ApplicationScimPlusJsonObject =
                            utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, operations.PostV2Scim20Users400ApplicationScimPlusJson);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 401:
                    if (utils.matchContentType(contentType, "application/scim+json")) {
                        res.postV2Scim20Users401ApplicationScimPlusJsonObject =
                            utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, operations.PostV2Scim20Users401ApplicationScimPlusJson);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 403:
                    if (utils.matchContentType(contentType, "application/scim+json")) {
                        res.postV2Scim20Users403ApplicationScimPlusJsonObject =
                            utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, operations.PostV2Scim20Users403ApplicationScimPlusJson);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 404:
                    if (utils.matchContentType(contentType, "application/scim+json")) {
                        res.postV2Scim20Users404ApplicationScimPlusJsonObject =
                            utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, operations.PostV2Scim20Users404ApplicationScimPlusJson);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 409:
                    if (utils.matchContentType(contentType, "application/scim+json")) {
                        res.postV2Scim20Users409ApplicationScimPlusJsonObject =
                            utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, operations.PostV2Scim20Users409ApplicationScimPlusJson);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 500:
                    if (utils.matchContentType(contentType, "application/scim+json")) {
                        res.postV2Scim20Users500ApplicationScimPlusJsonObject =
                            utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, operations.PostV2Scim20Users500ApplicationScimPlusJson);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Update a user
     *
     * @remarks
     * Updates a user. Use this route to change the user's name, activate,
     * and deactivate the user.
     *
     */
    Scim.prototype.putV2Scim20UsersId = function (req, config) {
        var _a;
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.PutV2Scim20UsersIdRequest(req);
        }
        var baseURL = this._serverURL;
        var url = utils.generateURL(baseURL, "/v2/scim/2.0/Users/{id}", req);
        var _b = [{}, {}], reqBodyHeaders = _b[0], reqBody = _b[1];
        try {
            _a = utils.serializeRequestBody(req, "requestBody", "json"), reqBodyHeaders = _a[0], reqBody = _a[1];
        }
        catch (e) {
            if (e instanceof Error) {
                throw new Error("Error serializing request body, cause: ".concat(e.message));
            }
        }
        var client = this._defaultClient;
        var headers = __assign(__assign({}, reqBodyHeaders), config === null || config === void 0 ? void 0 : config.headers);
        if (reqBody == null || Object.keys(reqBody).length === 0)
            throw new Error("request body is required");
        var r = client.request(__assign({ url: url, method: "put", headers: headers, data: reqBody }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.PutV2Scim20UsersIdResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/scim+json")) {
                        res.scimUser = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.ScimUser);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 400:
                    if (utils.matchContentType(contentType, "application/scim+json")) {
                        res.putV2Scim20UsersId400ApplicationScimPlusJsonObject =
                            utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, operations.PutV2Scim20UsersId400ApplicationScimPlusJson);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 401:
                    if (utils.matchContentType(contentType, "application/scim+json")) {
                        res.putV2Scim20UsersId401ApplicationScimPlusJsonObject =
                            utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, operations.PutV2Scim20UsersId401ApplicationScimPlusJson);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 403:
                    if (utils.matchContentType(contentType, "application/scim+json")) {
                        res.putV2Scim20UsersId403ApplicationScimPlusJsonObject =
                            utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, operations.PutV2Scim20UsersId403ApplicationScimPlusJson);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 404:
                    if (utils.matchContentType(contentType, "application/scim+json")) {
                        res.putV2Scim20UsersId404ApplicationScimPlusJsonObject =
                            utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, operations.PutV2Scim20UsersId404ApplicationScimPlusJson);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 409:
                    if (utils.matchContentType(contentType, "application/scim+json")) {
                        res.putV2Scim20UsersId409ApplicationScimPlusJsonObject =
                            utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, operations.PutV2Scim20UsersId409ApplicationScimPlusJson);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 500:
                    if (utils.matchContentType(contentType, "application/scim+json")) {
                        res.putV2Scim20UsersId500ApplicationScimPlusJsonObject =
                            utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, operations.PutV2Scim20UsersId500ApplicationScimPlusJson);
                    }
                    break;
            }
            return res;
        });
    };
    return Scim;
}());
exports.Scim = Scim;
