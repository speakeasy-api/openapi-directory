/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { CompileAPI } from "./compileapi";
import { ConfigAPI } from "./configapi";
import { DataAPI } from "./dataapi";
import { HealthAPI } from "./healthapi";
import { PolicyAPI } from "./policyapi";
import { QueryAPI } from "./queryapi";
import axios from "axios";
import { AxiosInstance } from "axios";

/**
 * Contains the list of servers available to the SDK
 */
export const ServerList = ["http://openpolicy.local"] as const;

/**
 * The available configuration options for the SDK
 */
export type SDKProps = {
  /**
   * Allows overriding the default axios client used by the SDK
   */
  defaultClient?: AxiosInstance;
  /**
   * Allows overriding the default server URL used by the SDK
   */
  serverURL?: string;
};

/**
 * OPA provides policy-based control for cloud native environments. The following *endpoints* (such as `PUT /v1/policies`) provide reference documentation for the OPA REST API.
 *
 * @remarks
 *
 * ### API specification viewing options
 *
 * - **[View the specification in *Redoc* (default)](index.html)**
 * - **[View the specification in *Swagger UI*](swagger-ui.html)**
 *
 * @see {@link https://www.openpolicyagent.org/docs/latest/} - OPA documentation
 */
export class SDK {
  /**
   * Posting partial queries to OPA
   */
  public compileAPI: CompileAPI;
  public configAPI: ConfigAPI;
  /**
   * Exposes endpoints for reading and writing documents in OPA. For an explanation of the different types of documents, see [the OPA document model](https://www.openpolicyagent.org/docs/latest/philosophy/#the-opa-document-model)
   */
  public dataAPI: DataAPI;
  /**
   * Executes a simple built-in policy query to verify that the server is operational
   */
  public healthAPI: HealthAPI;
  /**
   * Allows you to add, remove and modify policy modules. *Policy module identifiers are only used for management purposes. They are not used outside the Policy API.*
   */
  public policyAPI: PolicyAPI;
  /**
   * Posting queries to OPA
   */
  public queryAPI: QueryAPI;

  public _defaultClient: AxiosInstance;
  public _securityClient: AxiosInstance;
  public _serverURL: string;
  private _language = "typescript";
  private _sdkVersion = "0.0.1";
  private _genVersion = "internal";
  private _globals: any;

  constructor(props?: SDKProps) {
    this._serverURL = props?.serverURL ?? ServerList[0];

    this._defaultClient =
      props?.defaultClient ?? axios.create({ baseURL: this._serverURL });
    this._securityClient = this._defaultClient;

    this.compileAPI = new CompileAPI(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.configAPI = new ConfigAPI(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.dataAPI = new DataAPI(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.healthAPI = new HealthAPI(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.policyAPI = new PolicyAPI(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.queryAPI = new QueryAPI(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );
  }
}
