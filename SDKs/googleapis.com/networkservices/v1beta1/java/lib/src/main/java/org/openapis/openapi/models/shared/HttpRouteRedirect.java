/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * HttpRouteRedirect - The specification for redirecting traffic.
 */
public class HttpRouteRedirect {
    /**
     * The host that will be used in the redirect response instead of the one that was supplied in the request.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("hostRedirect")
    public String hostRedirect;

    public HttpRouteRedirect withHostRedirect(String hostRedirect) {
        this.hostRedirect = hostRedirect;
        return this;
    }
    
    /**
     * If set to true, the URL scheme in the redirected request is set to https. If set to false, the URL scheme of the redirected request will remain the same as that of the request. The default is set to false.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("httpsRedirect")
    public Boolean httpsRedirect;

    public HttpRouteRedirect withHttpsRedirect(Boolean httpsRedirect) {
        this.httpsRedirect = httpsRedirect;
        return this;
    }
    
    /**
     * The path that will be used in the redirect response instead of the one that was supplied in the request. path_redirect can not be supplied together with prefix_redirect. Supply one alone or neither. If neither is supplied, the path of the original request will be used for the redirect.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("pathRedirect")
    public String pathRedirect;

    public HttpRouteRedirect withPathRedirect(String pathRedirect) {
        this.pathRedirect = pathRedirect;
        return this;
    }
    
    /**
     * The port that will be used in the redirected request instead of the one that was supplied in the request.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("portRedirect")
    public Integer portRedirect;

    public HttpRouteRedirect withPortRedirect(Integer portRedirect) {
        this.portRedirect = portRedirect;
        return this;
    }
    
    /**
     * Indicates that during redirection, the matched prefix (or path) should be swapped with this value. This option allows URLs be dynamically created based on the request.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("prefixRewrite")
    public String prefixRewrite;

    public HttpRouteRedirect withPrefixRewrite(String prefixRewrite) {
        this.prefixRewrite = prefixRewrite;
        return this;
    }
    
    /**
     * The HTTP Status code to use for the redirect.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("responseCode")
    public HttpRouteRedirectResponseCodeEnum responseCode;

    public HttpRouteRedirect withResponseCode(HttpRouteRedirectResponseCodeEnum responseCode) {
        this.responseCode = responseCode;
        return this;
    }
    
    /**
     * if set to true, any accompanying query portion of the original URL is removed prior to redirecting the request. If set to false, the query portion of the original URL is retained. The default is set to false.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("stripQuery")
    public Boolean stripQuery;

    public HttpRouteRedirect withStripQuery(Boolean stripQuery) {
        this.stripQuery = stripQuery;
        return this;
    }
    
    public HttpRouteRedirect(){}
}
