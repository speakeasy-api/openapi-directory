/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class TermsOfService {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Get Terms of Service information for a legal entity
   *
   * @remarks
   * Returns Terms of Service information for a legal entity.
   */
  getLegalEntitiesIdTermsOfServiceAcceptanceInfos(
    req: operations.GetLegalEntitiesIdTermsOfServiceAcceptanceInfosRequest,
    security: operations.GetLegalEntitiesIdTermsOfServiceAcceptanceInfosSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetLegalEntitiesIdTermsOfServiceAcceptanceInfosResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.GetLegalEntitiesIdTermsOfServiceAcceptanceInfosRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/legalEntities/{id}/termsOfServiceAcceptanceInfos",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.GetLegalEntitiesIdTermsOfServiceAcceptanceInfosSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetLegalEntitiesIdTermsOfServiceAcceptanceInfosResponse =
        new operations.GetLegalEntitiesIdTermsOfServiceAcceptanceInfosResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getTermsOfServiceAcceptanceInfosResponse = utils.objectToClass(
              httpRes?.data,
              shared.GetTermsOfServiceAcceptanceInfosResponse
            );
          }
          break;
        case [400, 401, 403, 422, 500].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.serviceError = utils.objectToClass(
              httpRes?.data,
              shared.ServiceError
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get Terms of Service status
   *
   * @remarks
   * Returns the required types of Terms of Service that need to be accepted by a legal entity.
   */
  getLegalEntitiesIdTermsOfServiceStatus(
    req: operations.GetLegalEntitiesIdTermsOfServiceStatusRequest,
    security: operations.GetLegalEntitiesIdTermsOfServiceStatusSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetLegalEntitiesIdTermsOfServiceStatusResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetLegalEntitiesIdTermsOfServiceStatusRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/legalEntities/{id}/termsOfServiceStatus",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GetLegalEntitiesIdTermsOfServiceStatusSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetLegalEntitiesIdTermsOfServiceStatusResponse =
        new operations.GetLegalEntitiesIdTermsOfServiceStatusResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.calculateTermsOfServiceStatusResponse = utils.objectToClass(
              httpRes?.data,
              shared.CalculateTermsOfServiceStatusResponse
            );
          }
          break;
        case [400, 401, 403, 422, 500].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.serviceError = utils.objectToClass(
              httpRes?.data,
              shared.ServiceError
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Accept Terms of Service
   *
   * @remarks
   * Accepts Terms of Service.
   */
  patchLegalEntitiesIdTermsOfServiceTermsofservicedocumentid(
    req: operations.PatchLegalEntitiesIdTermsOfServiceTermsofservicedocumentidRequest,
    security: operations.PatchLegalEntitiesIdTermsOfServiceTermsofservicedocumentidSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.PatchLegalEntitiesIdTermsOfServiceTermsofservicedocumentidResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.PatchLegalEntitiesIdTermsOfServiceTermsofservicedocumentidRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/legalEntities/{id}/termsOfService/{termsofservicedocumentid}",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "acceptTermsOfServiceRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.PatchLegalEntitiesIdTermsOfServiceTermsofservicedocumentidSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "patch",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PatchLegalEntitiesIdTermsOfServiceTermsofservicedocumentidResponse =
        new operations.PatchLegalEntitiesIdTermsOfServiceTermsofservicedocumentidResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.acceptTermsOfServiceResponse = utils.objectToClass(
              httpRes?.data,
              shared.AcceptTermsOfServiceResponse
            );
          }
          break;
        case [400, 401, 403, 422, 500].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.serviceError = utils.objectToClass(
              httpRes?.data,
              shared.ServiceError
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get Terms of Service document
   *
   * @remarks
   * Returns the Terms of Service document for a legal entity.
   */
  postLegalEntitiesIdTermsOfService(
    req: operations.PostLegalEntitiesIdTermsOfServiceRequest,
    security: operations.PostLegalEntitiesIdTermsOfServiceSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.PostLegalEntitiesIdTermsOfServiceResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PostLegalEntitiesIdTermsOfServiceRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/legalEntities/{id}/termsOfService",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "getTermsOfServiceDocumentRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.PostLegalEntitiesIdTermsOfServiceSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PostLegalEntitiesIdTermsOfServiceResponse =
        new operations.PostLegalEntitiesIdTermsOfServiceResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getTermsOfServiceDocumentResponse = utils.objectToClass(
              httpRes?.data,
              shared.GetTermsOfServiceDocumentResponse
            );
          }
          break;
        case [400, 401, 403, 422, 500].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.serviceError = utils.objectToClass(
              httpRes?.data,
              shared.ServiceError
            );
          }
          break;
      }

      return res;
    });
  }
}
