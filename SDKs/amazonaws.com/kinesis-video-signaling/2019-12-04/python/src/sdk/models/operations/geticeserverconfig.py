"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import geticeserverconfigresponse as shared_geticeserverconfigresponse
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Any, Optional

class GetIceServerConfigRequestBodyServiceEnum(str, Enum):
    r"""Specifies the desired service. Currently, <code>TURN</code> is the only valid value."""
    TURN = 'TURN'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetIceServerConfigRequestBody:
    
    channel_arn: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ChannelARN') }})
    r"""The ARN of the signaling channel to be used for the peer-to-peer connection between configured peers."""  
    client_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ClientId'), 'exclude': lambda f: f is None }})
    r"""Unique identifier for the viewer. Must be unique within the signaling channel."""  
    service: Optional[GetIceServerConfigRequestBodyServiceEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Service'), 'exclude': lambda f: f is None }})
    r"""Specifies the desired service. Currently, <code>TURN</code> is the only valid value."""  
    username: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Username'), 'exclude': lambda f: f is None }})
    r"""An optional user ID to be associated with the credentials."""  
    

@dataclasses.dataclass
class GetIceServerConfigRequest:
    
    request_body: GetIceServerConfigRequestBody = dataclasses.field(metadata={'request': { 'media_type': 'application/json' }})  
    x_amz_algorithm: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Algorithm', 'style': 'simple', 'explode': False }})  
    x_amz_content_sha256: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Content-Sha256', 'style': 'simple', 'explode': False }})  
    x_amz_credential: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Credential', 'style': 'simple', 'explode': False }})  
    x_amz_date: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Date', 'style': 'simple', 'explode': False }})  
    x_amz_security_token: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Security-Token', 'style': 'simple', 'explode': False }})  
    x_amz_signature: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Signature', 'style': 'simple', 'explode': False }})  
    x_amz_signed_headers: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-SignedHeaders', 'style': 'simple', 'explode': False }})  
    

@dataclasses.dataclass
class GetIceServerConfigResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    client_limit_exceeded_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ClientLimitExceededException"""  
    get_ice_server_config_response: Optional[shared_geticeserverconfigresponse.GetIceServerConfigResponse] = dataclasses.field(default=None)
    r"""Success"""  
    invalid_argument_exception: Optional[Any] = dataclasses.field(default=None)
    r"""InvalidArgumentException"""  
    invalid_client_exception: Optional[Any] = dataclasses.field(default=None)
    r"""InvalidClientException"""  
    not_authorized_exception: Optional[Any] = dataclasses.field(default=None)
    r"""NotAuthorizedException"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    resource_not_found_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ResourceNotFoundException"""  
    session_expired_exception: Optional[Any] = dataclasses.field(default=None)
    r"""SessionExpiredException"""  
    