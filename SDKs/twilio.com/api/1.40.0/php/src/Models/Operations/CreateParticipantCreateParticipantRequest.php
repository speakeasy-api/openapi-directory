<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Operations;

use \OpenAPI\OpenAPI\Utils\SpeakeasyMetadata;
class CreateParticipantCreateParticipantRequest
{
    /**
     * The URL that we should call using the `amd_status_callback_method` to notify customer application whether the call was answered by human, machine or fax.
     * 
     * @var ?string $amdStatusCallback
     */
	#[SpeakeasyMetadata('form:name=AmdStatusCallback')]
    public ?string $amdStatusCallback = null;
    
    /**
     * The HTTP method we should use when calling the `amd_status_callback` URL. Can be: `GET` or `POST` and the default is `POST`.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Operations\CreateParticipantCreateParticipantRequestAmdStatusCallbackMethodEnum $amdStatusCallbackMethod
     */
	#[SpeakeasyMetadata('form:name=AmdStatusCallbackMethod')]
    public ?CreateParticipantCreateParticipantRequestAmdStatusCallbackMethodEnum $amdStatusCallbackMethod = null;
    
    /**
     * Whether to play a notification beep to the conference when the participant joins. Can be: `true`, `false`, `onEnter`, or `onExit`. The default value is `true`.
     * 
     * @var ?string $beep
     */
	#[SpeakeasyMetadata('form:name=Beep')]
    public ?string $beep = null;
    
    /**
     * The SID of a BYOC (Bring Your Own Carrier) trunk to route this call with. Note that `byoc` is only meaningful when `to` is a phone number; it will otherwise be ignored. (Beta)
     * 
     * @var ?string $byoc
     */
	#[SpeakeasyMetadata('form:name=Byoc')]
    public ?string $byoc = null;
    
    /**
     * The Reason for the outgoing call. Use it to specify the purpose of the call that is presented on the called party's phone. (Branded Calls Beta)
     * 
     * @var ?string $callReason
     */
	#[SpeakeasyMetadata('form:name=CallReason')]
    public ?string $callReason = null;
    
    /**
     * The SID of the participant who is being `coached`. The participant being coached is the only participant who can hear the participant who is `coaching`.
     * 
     * @var ?string $callSidToCoach
     */
	#[SpeakeasyMetadata('form:name=CallSidToCoach')]
    public ?string $callSidToCoach = null;
    
    /**
     * The phone number, Client identifier, or username portion of SIP address that made this call. Phone numbers are in [E.164](https://www.twilio.com/docs/glossary/what-e164) format (e.g., +16175551212). Client identifiers are formatted `client:name`. If using a phone number, it must be a Twilio number or a Verified [outgoing caller id](https://www.twilio.com/docs/voice/api/outgoing-caller-ids) for your account. If the `to` parameter is a phone number, `callerId` must also be a phone number. If `to` is sip address, this value of `callerId` should be a username portion to be used to populate the From header that is passed to the SIP endpoint.
     * 
     * @var ?string $callerId
     */
	#[SpeakeasyMetadata('form:name=CallerId')]
    public ?string $callerId = null;
    
    /**
     * Whether the participant is coaching another call. Can be: `true` or `false`. If not present, defaults to `false` unless `call_sid_to_coach` is defined. If `true`, `call_sid_to_coach` must be defined.
     * 
     * @var ?bool $coaching
     */
	#[SpeakeasyMetadata('form:name=Coaching')]
    public ?bool $coaching = null;
    
    /**
     * Whether to record the conference the participant is joining. Can be: `true`, `false`, `record-from-start`, and `do-not-record`. The default value is `false`.
     * 
     * @var ?string $conferenceRecord
     */
	#[SpeakeasyMetadata('form:name=ConferenceRecord')]
    public ?string $conferenceRecord = null;
    
    /**
     * The URL we should call using the `conference_recording_status_callback_method` when the conference recording is available.
     * 
     * @var ?string $conferenceRecordingStatusCallback
     */
	#[SpeakeasyMetadata('form:name=ConferenceRecordingStatusCallback')]
    public ?string $conferenceRecordingStatusCallback = null;
    
    /**
     * The conference recording state changes that generate a call to `conference_recording_status_callback`. Can be: `in-progress`, `completed`, `failed`, and `absent`. Separate multiple values with a space, ex: `'in-progress completed failed'`
     * 
     * @var ?array<string> $conferenceRecordingStatusCallbackEvent
     */
	#[SpeakeasyMetadata('form:name=ConferenceRecordingStatusCallbackEvent')]
    public ?array $conferenceRecordingStatusCallbackEvent = null;
    
    /**
     * The HTTP method we should use to call `conference_recording_status_callback`. Can be: `GET` or `POST` and defaults to `POST`.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Operations\CreateParticipantCreateParticipantRequestConferenceRecordingStatusCallbackMethodEnum $conferenceRecordingStatusCallbackMethod
     */
	#[SpeakeasyMetadata('form:name=ConferenceRecordingStatusCallbackMethod')]
    public ?CreateParticipantCreateParticipantRequestConferenceRecordingStatusCallbackMethodEnum $conferenceRecordingStatusCallbackMethod = null;
    
    /**
     * The URL we should call using the `conference_status_callback_method` when the conference events in `conference_status_callback_event` occur. Only the value set by the first participant to join the conference is used. Subsequent `conference_status_callback` values are ignored.
     * 
     * @var ?string $conferenceStatusCallback
     */
	#[SpeakeasyMetadata('form:name=ConferenceStatusCallback')]
    public ?string $conferenceStatusCallback = null;
    
    /**
     * The conference state changes that should generate a call to `conference_status_callback`. Can be: `start`, `end`, `join`, `leave`, `mute`, `hold`, `modify`, `speaker`, and `announcement`. Separate multiple values with a space. Defaults to `start end`.
     * 
     * @var ?array<string> $conferenceStatusCallbackEvent
     */
	#[SpeakeasyMetadata('form:name=ConferenceStatusCallbackEvent')]
    public ?array $conferenceStatusCallbackEvent = null;
    
    /**
     * The HTTP method we should use to call `conference_status_callback`. Can be: `GET` or `POST` and defaults to `POST`.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Operations\CreateParticipantCreateParticipantRequestConferenceStatusCallbackMethodEnum $conferenceStatusCallbackMethod
     */
	#[SpeakeasyMetadata('form:name=ConferenceStatusCallbackMethod')]
    public ?CreateParticipantCreateParticipantRequestConferenceStatusCallbackMethodEnum $conferenceStatusCallbackMethod = null;
    
    /**
     * Whether to trim leading and trailing silence from your recorded conference audio files. Can be: `trim-silence` or `do-not-trim` and defaults to `trim-silence`.
     * 
     * @var ?string $conferenceTrim
     */
	#[SpeakeasyMetadata('form:name=ConferenceTrim')]
    public ?string $conferenceTrim = null;
    
    /**
     * Whether to allow an agent to hear the state of the outbound call, including ringing or disconnect messages. Can be: `true` or `false` and defaults to `true`.
     * 
     * @var ?bool $earlyMedia
     */
	#[SpeakeasyMetadata('form:name=EarlyMedia')]
    public ?bool $earlyMedia = null;
    
    /**
     * Whether to end the conference when the participant leaves. Can be: `true` or `false` and defaults to `false`.
     * 
     * @var ?bool $endConferenceOnExit
     */
	#[SpeakeasyMetadata('form:name=EndConferenceOnExit')]
    public ?bool $endConferenceOnExit = null;
    
    /**
     * The phone number, Client identifier, or username portion of SIP address that made this call. Phone numbers are in [E.164](https://www.twilio.com/docs/glossary/what-e164) format (e.g., +16175551212). Client identifiers are formatted `client:name`. If using a phone number, it must be a Twilio number or a Verified [outgoing caller id](https://www.twilio.com/docs/voice/api/outgoing-caller-ids) for your account. If the `to` parameter is a phone number, `from` must also be a phone number. If `to` is sip address, this value of `from` should be a username portion to be used to populate the P-Asserted-Identity header that is passed to the SIP endpoint.
     * 
     * @var string $from
     */
	#[SpeakeasyMetadata('form:name=From')]
    public string $from;
    
    /**
     * Jitter buffer size for the connecting participant. Twilio will use this setting to apply Jitter Buffer before participant's audio is mixed into the conference. Can be: `off`, `small`, `medium`, and `large`. Default to `large`.
     * 
     * @var ?string $jitterBufferSize
     */
	#[SpeakeasyMetadata('form:name=JitterBufferSize')]
    public ?string $jitterBufferSize = null;
    
    /**
     * A label for this participant. If one is supplied, it may subsequently be used to fetch, update or delete the participant.
     * 
     * @var ?string $label
     */
	#[SpeakeasyMetadata('form:name=Label')]
    public ?string $label = null;
    
    /**
     * Whether to detect if a human, answering machine, or fax has picked up the call. Can be: `Enable` or `DetectMessageEnd`. Use `Enable` if you would like us to return `AnsweredBy` as soon as the called party is identified. Use `DetectMessageEnd`, if you would like to leave a message on an answering machine. If `send_digits` is provided, this parameter is ignored. For more information, see [Answering Machine Detection](https://www.twilio.com/docs/voice/answering-machine-detection).
     * 
     * @var ?string $machineDetection
     */
	#[SpeakeasyMetadata('form:name=MachineDetection')]
    public ?string $machineDetection = null;
    
    /**
     * The number of milliseconds of initial silence after which an `unknown` AnsweredBy result will be returned. Possible Values: 2000-10000. Default: 5000.
     * 
     * @var ?int $machineDetectionSilenceTimeout
     */
	#[SpeakeasyMetadata('form:name=MachineDetectionSilenceTimeout')]
    public ?int $machineDetectionSilenceTimeout = null;
    
    /**
     * The number of milliseconds of silence after speech activity at which point the speech activity is considered complete. Possible Values: 500-5000. Default: 1200.
     * 
     * @var ?int $machineDetectionSpeechEndThreshold
     */
	#[SpeakeasyMetadata('form:name=MachineDetectionSpeechEndThreshold')]
    public ?int $machineDetectionSpeechEndThreshold = null;
    
    /**
     * The number of milliseconds that is used as the measuring stick for the length of the speech activity, where durations lower than this value will be interpreted as a human and longer than this value as a machine. Possible Values: 1000-6000. Default: 2400.
     * 
     * @var ?int $machineDetectionSpeechThreshold
     */
	#[SpeakeasyMetadata('form:name=MachineDetectionSpeechThreshold')]
    public ?int $machineDetectionSpeechThreshold = null;
    
    /**
     * The number of seconds that we should attempt to detect an answering machine before timing out and sending a voice request with `AnsweredBy` of `unknown`. The default timeout is 30 seconds.
     * 
     * @var ?int $machineDetectionTimeout
     */
	#[SpeakeasyMetadata('form:name=MachineDetectionTimeout')]
    public ?int $machineDetectionTimeout = null;
    
    /**
     * The maximum number of participants in the conference. Can be a positive integer from `2` to `250`. The default value is `250`.
     * 
     * @var ?int $maxParticipants
     */
	#[SpeakeasyMetadata('form:name=MaxParticipants')]
    public ?int $maxParticipants = null;
    
    /**
     * Whether the agent is muted in the conference. Can be `true` or `false` and the default is `false`.
     * 
     * @var ?bool $muted
     */
	#[SpeakeasyMetadata('form:name=Muted')]
    public ?bool $muted = null;
    
    /**
     * Whether to record the participant and their conferences, including the time between conferences. Can be `true` or `false` and the default is `false`.
     * 
     * @var ?bool $record
     */
	#[SpeakeasyMetadata('form:name=Record')]
    public ?bool $record = null;
    
    /**
     * The recording channels for the final recording. Can be: `mono` or `dual` and the default is `mono`.
     * 
     * @var ?string $recordingChannels
     */
	#[SpeakeasyMetadata('form:name=RecordingChannels')]
    public ?string $recordingChannels = null;
    
    /**
     * The URL that we should call using the `recording_status_callback_method` when the recording status changes.
     * 
     * @var ?string $recordingStatusCallback
     */
	#[SpeakeasyMetadata('form:name=RecordingStatusCallback')]
    public ?string $recordingStatusCallback = null;
    
    /**
     * The recording state changes that should generate a call to `recording_status_callback`. Can be: `started`, `in-progress`, `paused`, `resumed`, `stopped`, `completed`, `failed`, and `absent`. Separate multiple values with a space, ex: `'in-progress completed failed'`.
     * 
     * @var ?array<string> $recordingStatusCallbackEvent
     */
	#[SpeakeasyMetadata('form:name=RecordingStatusCallbackEvent')]
    public ?array $recordingStatusCallbackEvent = null;
    
    /**
     * The HTTP method we should use when we call `recording_status_callback`. Can be: `GET` or `POST` and defaults to `POST`.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Operations\CreateParticipantCreateParticipantRequestRecordingStatusCallbackMethodEnum $recordingStatusCallbackMethod
     */
	#[SpeakeasyMetadata('form:name=RecordingStatusCallbackMethod')]
    public ?CreateParticipantCreateParticipantRequestRecordingStatusCallbackMethodEnum $recordingStatusCallbackMethod = null;
    
    /**
     * The audio track to record for the call. Can be: `inbound`, `outbound` or `both`. The default is `both`. `inbound` records the audio that is received by Twilio. `outbound` records the audio that is sent from Twilio. `both` records the audio that is received and sent by Twilio.
     * 
     * @var ?string $recordingTrack
     */
	#[SpeakeasyMetadata('form:name=RecordingTrack')]
    public ?string $recordingTrack = null;
    
    /**
     * The [region](https://support.twilio.com/hc/en-us/articles/223132167-How-global-low-latency-routing-and-region-selection-work-for-conferences-and-Client-calls) where we should mix the recorded audio. Can be:`us1`, `ie1`, `de1`, `sg1`, `br1`, `au1`, or `jp1`.
     * 
     * @var ?string $region
     */
	#[SpeakeasyMetadata('form:name=Region')]
    public ?string $region = null;
    
    /**
     * The SIP password for authentication.
     * 
     * @var ?string $sipAuthPassword
     */
	#[SpeakeasyMetadata('form:name=SipAuthPassword')]
    public ?string $sipAuthPassword = null;
    
    /**
     * The SIP username used for authentication.
     * 
     * @var ?string $sipAuthUsername
     */
	#[SpeakeasyMetadata('form:name=SipAuthUsername')]
    public ?string $sipAuthUsername = null;
    
    /**
     * Whether to start the conference when the participant joins, if it has not already started. Can be: `true` or `false` and the default is `true`. If `false` and the conference has not started, the participant is muted and hears background music until another participant starts the conference.
     * 
     * @var ?bool $startConferenceOnEnter
     */
	#[SpeakeasyMetadata('form:name=StartConferenceOnEnter')]
    public ?bool $startConferenceOnEnter = null;
    
    /**
     * The URL we should call using the `status_callback_method` to send status information to your application.
     * 
     * @var ?string $statusCallback
     */
	#[SpeakeasyMetadata('form:name=StatusCallback')]
    public ?string $statusCallback = null;
    
    /**
     * The conference state changes that should generate a call to `status_callback`. Can be: `initiated`, `ringing`, `answered`, and `completed`. Separate multiple values with a space. The default value is `completed`.
     * 
     * @var ?array<string> $statusCallbackEvent
     */
	#[SpeakeasyMetadata('form:name=StatusCallbackEvent')]
    public ?array $statusCallbackEvent = null;
    
    /**
     * The HTTP method we should use to call `status_callback`. Can be: `GET` and `POST` and defaults to `POST`.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Operations\CreateParticipantCreateParticipantRequestStatusCallbackMethodEnum $statusCallbackMethod
     */
	#[SpeakeasyMetadata('form:name=StatusCallbackMethod')]
    public ?CreateParticipantCreateParticipantRequestStatusCallbackMethodEnum $statusCallbackMethod = null;
    
    /**
     * The maximum duration of the call in seconds. Constraints depend on account and configuration.
     * 
     * @var ?int $timeLimit
     */
	#[SpeakeasyMetadata('form:name=TimeLimit')]
    public ?int $timeLimit = null;
    
    /**
     * The number of seconds that we should allow the phone to ring before assuming there is no answer. Can be an integer between `5` and `600`, inclusive. The default value is `60`. We always add a 5-second timeout buffer to outgoing calls, so  value of 10 would result in an actual timeout that was closer to 15 seconds.
     * 
     * @var ?int $timeout
     */
	#[SpeakeasyMetadata('form:name=Timeout')]
    public ?int $timeout = null;
    
    /**
     * The phone number, SIP address, or Client identifier that received this call. Phone numbers are in [E.164](https://www.twilio.com/docs/glossary/what-e164) format (e.g., +16175551212). SIP addresses are formatted as `sip:name@company.com`. Client identifiers are formatted `client:name`. [Custom parameters](https://www.twilio.com/docs/voice/api/conference-participant-resource#custom-parameters) may also be specified.
     * 
     * @var string $to
     */
	#[SpeakeasyMetadata('form:name=To')]
    public string $to;
    
    /**
     * The HTTP method we should use to call `wait_url`. Can be `GET` or `POST` and the default is `POST`. When using a static audio file, this should be `GET` so that we can cache the file.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Operations\CreateParticipantCreateParticipantRequestWaitMethodEnum $waitMethod
     */
	#[SpeakeasyMetadata('form:name=WaitMethod')]
    public ?CreateParticipantCreateParticipantRequestWaitMethodEnum $waitMethod = null;
    
    /**
     * The URL we should call using the `wait_method` for the music to play while participants are waiting for the conference to start. The default value is the URL of our standard hold music. [Learn more about hold music](https://www.twilio.com/labs/twimlets/holdmusic).
     * 
     * @var ?string $waitUrl
     */
	#[SpeakeasyMetadata('form:name=WaitUrl')]
    public ?string $waitUrl = null;
    
	public function __construct()
	{
		$this->amdStatusCallback = null;
		$this->amdStatusCallbackMethod = null;
		$this->beep = null;
		$this->byoc = null;
		$this->callReason = null;
		$this->callSidToCoach = null;
		$this->callerId = null;
		$this->coaching = null;
		$this->conferenceRecord = null;
		$this->conferenceRecordingStatusCallback = null;
		$this->conferenceRecordingStatusCallbackEvent = null;
		$this->conferenceRecordingStatusCallbackMethod = null;
		$this->conferenceStatusCallback = null;
		$this->conferenceStatusCallbackEvent = null;
		$this->conferenceStatusCallbackMethod = null;
		$this->conferenceTrim = null;
		$this->earlyMedia = null;
		$this->endConferenceOnExit = null;
		$this->from = "";
		$this->jitterBufferSize = null;
		$this->label = null;
		$this->machineDetection = null;
		$this->machineDetectionSilenceTimeout = null;
		$this->machineDetectionSpeechEndThreshold = null;
		$this->machineDetectionSpeechThreshold = null;
		$this->machineDetectionTimeout = null;
		$this->maxParticipants = null;
		$this->muted = null;
		$this->record = null;
		$this->recordingChannels = null;
		$this->recordingStatusCallback = null;
		$this->recordingStatusCallbackEvent = null;
		$this->recordingStatusCallbackMethod = null;
		$this->recordingTrack = null;
		$this->region = null;
		$this->sipAuthPassword = null;
		$this->sipAuthUsername = null;
		$this->startConferenceOnEnter = null;
		$this->statusCallback = null;
		$this->statusCallbackEvent = null;
		$this->statusCallbackMethod = null;
		$this->timeLimit = null;
		$this->timeout = null;
		$this->to = "";
		$this->waitMethod = null;
		$this->waitUrl = null;
	}
}
