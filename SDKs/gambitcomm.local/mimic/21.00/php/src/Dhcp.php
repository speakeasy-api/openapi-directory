<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Dhcp 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Show the agent's DHCP argument structure
     * 
     * Agent's DHCP configuration particulars
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ProtocolDhcpGetArgsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ProtocolDhcpGetArgsResponse
     */
	public function protocolDhcpGetArgs(
        \OpenAPI\OpenAPI\Models\Operations\ProtocolDhcpGetArgsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ProtocolDhcpGetArgsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/mimic/agent/{agentNum}/protocol/msg/dhcp/get/args', \OpenAPI\OpenAPI\Models\Operations\ProtocolDhcpGetArgsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ProtocolDhcpGetArgsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->protocolDhcpGetArgs200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
	
    /**
     * Show the agent's DHCP configuration
     * 
     * Agent's DHCP configuration hwaddr,classid,add_options,script
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ProtocolDhcpGetConfigRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ProtocolDhcpGetConfigResponse
     */
	public function protocolDhcpGetConfig(
        \OpenAPI\OpenAPI\Models\Operations\ProtocolDhcpGetConfigRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ProtocolDhcpGetConfigResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/mimic/agent/{agentNum}/protocol/msg/dhcp/get/config', \OpenAPI\OpenAPI\Models\Operations\ProtocolDhcpGetConfigRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ProtocolDhcpGetConfigResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->configDHCP = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ConfigDHCP', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
	
    /**
     * Show the agent's DHCP statistics
     * 
     * Statistics of fields indicated in the headers
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ProtocolDhcpGetStatisticsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ProtocolDhcpGetStatisticsResponse
     */
	public function protocolDhcpGetStatistics(
        \OpenAPI\OpenAPI\Models\Operations\ProtocolDhcpGetStatisticsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ProtocolDhcpGetStatisticsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/mimic/agent/{agentNum}/protocol/msg/dhcp/get/statistics', \OpenAPI\OpenAPI\Models\Operations\ProtocolDhcpGetStatisticsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ProtocolDhcpGetStatisticsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->protocolDhcpGetStatistics200ApplicationJSONInt32Integers = $serializer->deserialize((string)$httpResponse->getBody(), 'array<int>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
	
    /**
     * Show the DHCP statistics headers
     * 
     * The headers of statistics fields
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\ProtocolDhcpGetStatsHdrResponse
     */
	public function protocolDhcpGetStatsHdr(
    ): \OpenAPI\OpenAPI\Models\Operations\ProtocolDhcpGetStatsHdrResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/mimic/protocol/msg/dhcp/get/stats_hdr');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ProtocolDhcpGetStatsHdrResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->protocolDhcpGetStatsHdr200ApplicationJSONStrings = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
	
    /**
     * Show the agent's DHCP traffic tracing
     * 
     * Trace 1 means enabled, 0 means not
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ProtocolDhcpGetTraceRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ProtocolDhcpGetTraceResponse
     */
	public function protocolDhcpGetTrace(
        \OpenAPI\OpenAPI\Models\Operations\ProtocolDhcpGetTraceRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ProtocolDhcpGetTraceResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/mimic/agent/{agentNum}/protocol/msg/dhcp/get/trace', \OpenAPI\OpenAPI\Models\Operations\ProtocolDhcpGetTraceRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ProtocolDhcpGetTraceResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->configDHCP = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ConfigDHCP', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
	
    /**
     * Show the parameters configured by the server in its DHCP-OFFER message
     * 
     * DHCP-OFFER message parameters
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ProtocolDhcpParamsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ProtocolDhcpParamsResponse
     */
	public function protocolDhcpParams(
        \OpenAPI\OpenAPI\Models\Operations\ProtocolDhcpParamsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ProtocolDhcpParamsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/mimic/agent/{agentNum}/protocol/msg/dhcp/params', \OpenAPI\OpenAPI\Models\Operations\ProtocolDhcpParamsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ProtocolDhcpParamsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->protocolDhcpParams200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<array<string, mixed>>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
	
    /**
     * Set the agent's DHCP configuration
     * 
     * Agent's DHCP configuration with port,rule,prompt,paging_prompt,userdb,keymap
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ProtocolDhcpSetConfigRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ProtocolDhcpSetConfigResponse
     */
	public function protocolDhcpSetConfig(
        \OpenAPI\OpenAPI\Models\Operations\ProtocolDhcpSetConfigRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ProtocolDhcpSetConfigResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/mimic/agent/{agentNum}/protocol/msg/dhcp/set/config/{argument}/{value}', \OpenAPI\OpenAPI\Models\Operations\ProtocolDhcpSetConfigRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ProtocolDhcpSetConfigResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $response->protocolDhcpSetConfig200ApplicationJSONString = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
	
    /**
     * Set the agent's DHCP traffic tracing
     * 
     * 1 to enable, 0 to disable
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ProtocolDhcpSetTraceRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ProtocolDhcpSetTraceResponse
     */
	public function protocolDhcpSetTrace(
        \OpenAPI\OpenAPI\Models\Operations\ProtocolDhcpSetTraceRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ProtocolDhcpSetTraceResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/mimic/agent/{agentNum}/protocol/msg/dhcp/set/trace/{enableOrNot}', \OpenAPI\OpenAPI\Models\Operations\ProtocolDhcpSetTraceRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ProtocolDhcpSetTraceResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $response->protocolDhcpSetTrace200ApplicationJSONString = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
}