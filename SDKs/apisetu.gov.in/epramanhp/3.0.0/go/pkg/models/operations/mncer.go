// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type MncerSecurity struct {
	APIKey   string `security:"scheme,type=apiKey,subtype=header,name=X-APISETU-APIKEY"`
	ClientID string `security:"scheme,type=apiKey,subtype=header,name=X-APISETU-CLIENTID"`
}

type MncerRequestBodyCertificateParameters struct {
	// Applicant Name
	Name string `json:"Name"`
	// Certificate Id
	RefNo string `json:"RefNo"`
}

// MncerRequestBodyFormatEnum - The format of the certificate in response.
type MncerRequestBodyFormatEnum string

const (
	MncerRequestBodyFormatEnumPdf MncerRequestBodyFormatEnum = "pdf"
)

func (e MncerRequestBodyFormatEnum) ToPointer() *MncerRequestBodyFormatEnum {
	return &e
}

func (e *MncerRequestBodyFormatEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "pdf":
		*e = MncerRequestBodyFormatEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for MncerRequestBodyFormatEnum: %v", v)
	}
}

// MncerRequestBody - Request format
type MncerRequestBody struct {
	CertificateParameters *MncerRequestBodyCertificateParameters `json:"certificateParameters,omitempty"`
	ConsentArtifact       *shared.ConsentArtifactSchema          `json:"consentArtifact,omitempty"`
	// The format of the certificate in response.
	Format MncerRequestBodyFormatEnum `json:"format"`
	// A unique transaction id for this request in UUID format. It is used for tracking the request.
	TxnID string `json:"txnId"`
}

type Mncer504ApplicationJSONErrorEnum string

const (
	Mncer504ApplicationJSONErrorEnumGatewayTimeout Mncer504ApplicationJSONErrorEnum = "gateway_timeout"
)

func (e Mncer504ApplicationJSONErrorEnum) ToPointer() *Mncer504ApplicationJSONErrorEnum {
	return &e
}

func (e *Mncer504ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "gateway_timeout":
		*e = Mncer504ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Mncer504ApplicationJSONErrorEnum: %v", v)
	}
}

type Mncer504ApplicationJSONErrorDescriptionEnum string

const (
	Mncer504ApplicationJSONErrorDescriptionEnumPublisherServiceDidNotRespondInTime Mncer504ApplicationJSONErrorDescriptionEnum = "Publisher service did not respond in time"
)

func (e Mncer504ApplicationJSONErrorDescriptionEnum) ToPointer() *Mncer504ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Mncer504ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Publisher service did not respond in time":
		*e = Mncer504ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Mncer504ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Mncer504ApplicationJSON - Gateway timeout
type Mncer504ApplicationJSON struct {
	Error            *Mncer504ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Mncer504ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Mncer503ApplicationJSONErrorEnum string

const (
	Mncer503ApplicationJSONErrorEnumServiceUnavailable Mncer503ApplicationJSONErrorEnum = "service_unavailable"
)

func (e Mncer503ApplicationJSONErrorEnum) ToPointer() *Mncer503ApplicationJSONErrorEnum {
	return &e
}

func (e *Mncer503ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "service_unavailable":
		*e = Mncer503ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Mncer503ApplicationJSONErrorEnum: %v", v)
	}
}

type Mncer503ApplicationJSONErrorDescriptionEnum string

const (
	Mncer503ApplicationJSONErrorDescriptionEnumPublisherServiceIsTemporarilyUnavailable Mncer503ApplicationJSONErrorDescriptionEnum = "Publisher service is temporarily unavailable"
)

func (e Mncer503ApplicationJSONErrorDescriptionEnum) ToPointer() *Mncer503ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Mncer503ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Publisher service is temporarily unavailable":
		*e = Mncer503ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Mncer503ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Mncer503ApplicationJSON - Service unavailable
type Mncer503ApplicationJSON struct {
	Error            *Mncer503ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Mncer503ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Mncer502ApplicationJSONErrorEnum string

const (
	Mncer502ApplicationJSONErrorEnumBadGatewy Mncer502ApplicationJSONErrorEnum = "bad_gatewy"
)

func (e Mncer502ApplicationJSONErrorEnum) ToPointer() *Mncer502ApplicationJSONErrorEnum {
	return &e
}

func (e *Mncer502ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "bad_gatewy":
		*e = Mncer502ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Mncer502ApplicationJSONErrorEnum: %v", v)
	}
}

type Mncer502ApplicationJSONErrorDescriptionEnum string

const (
	Mncer502ApplicationJSONErrorDescriptionEnumPublisherServiceReturnedAnInvalidResponse Mncer502ApplicationJSONErrorDescriptionEnum = "Publisher service returned an invalid response"
)

func (e Mncer502ApplicationJSONErrorDescriptionEnum) ToPointer() *Mncer502ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Mncer502ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Publisher service returned an invalid response":
		*e = Mncer502ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Mncer502ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Mncer502ApplicationJSON - Bad gateway
type Mncer502ApplicationJSON struct {
	Error            *Mncer502ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Mncer502ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Mncer500ApplicationJSONErrorEnum string

const (
	Mncer500ApplicationJSONErrorEnumInternalServerError Mncer500ApplicationJSONErrorEnum = "internal_server_error"
)

func (e Mncer500ApplicationJSONErrorEnum) ToPointer() *Mncer500ApplicationJSONErrorEnum {
	return &e
}

func (e *Mncer500ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "internal_server_error":
		*e = Mncer500ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Mncer500ApplicationJSONErrorEnum: %v", v)
	}
}

type Mncer500ApplicationJSONErrorDescriptionEnum string

const (
	Mncer500ApplicationJSONErrorDescriptionEnumInternalServerError Mncer500ApplicationJSONErrorDescriptionEnum = "Internal server error"
)

func (e Mncer500ApplicationJSONErrorDescriptionEnum) ToPointer() *Mncer500ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Mncer500ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Internal server error":
		*e = Mncer500ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Mncer500ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Mncer500ApplicationJSON - Internal server error
type Mncer500ApplicationJSON struct {
	Error            *Mncer500ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Mncer500ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Mncer404ApplicationJSONErrorEnum string

const (
	Mncer404ApplicationJSONErrorEnumRecordNotFound Mncer404ApplicationJSONErrorEnum = "record_not_found"
	Mncer404ApplicationJSONErrorEnumURLNotFound    Mncer404ApplicationJSONErrorEnum = "url_not_found"
)

func (e Mncer404ApplicationJSONErrorEnum) ToPointer() *Mncer404ApplicationJSONErrorEnum {
	return &e
}

func (e *Mncer404ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "record_not_found":
		fallthrough
	case "url_not_found":
		*e = Mncer404ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Mncer404ApplicationJSONErrorEnum: %v", v)
	}
}

type Mncer404ApplicationJSONErrorDescriptionEnum string

const (
	Mncer404ApplicationJSONErrorDescriptionEnumNoRecordFound               Mncer404ApplicationJSONErrorDescriptionEnum = "No record found"
	Mncer404ApplicationJSONErrorDescriptionEnumYourAPIURLOrPathIsIncorrect Mncer404ApplicationJSONErrorDescriptionEnum = "Your API url or path is incorrect"
)

func (e Mncer404ApplicationJSONErrorDescriptionEnum) ToPointer() *Mncer404ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Mncer404ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "No record found":
		fallthrough
	case "Your API url or path is incorrect":
		*e = Mncer404ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Mncer404ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Mncer404ApplicationJSON - No record found
type Mncer404ApplicationJSON struct {
	Error            *Mncer404ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Mncer404ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Mncer401ApplicationJSONErrorEnum string

const (
	Mncer401ApplicationJSONErrorEnumInvalidAuthentication Mncer401ApplicationJSONErrorEnum = "invalid_authentication"
	Mncer401ApplicationJSONErrorEnumInvalidAuthorization  Mncer401ApplicationJSONErrorEnum = "invalid_authorization"
)

func (e Mncer401ApplicationJSONErrorEnum) ToPointer() *Mncer401ApplicationJSONErrorEnum {
	return &e
}

func (e *Mncer401ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "invalid_authentication":
		fallthrough
	case "invalid_authorization":
		*e = Mncer401ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Mncer401ApplicationJSONErrorEnum: %v", v)
	}
}

type Mncer401ApplicationJSONErrorDescriptionEnum string

const (
	Mncer401ApplicationJSONErrorDescriptionEnumAuthenticationFailed            Mncer401ApplicationJSONErrorDescriptionEnum = "Authentication failed"
	Mncer401ApplicationJSONErrorDescriptionEnumYouAreNotAuthorizedToUseThisAPI Mncer401ApplicationJSONErrorDescriptionEnum = "You are not authorized to use this API"
)

func (e Mncer401ApplicationJSONErrorDescriptionEnum) ToPointer() *Mncer401ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Mncer401ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Authentication failed":
		fallthrough
	case "You are not authorized to use this API":
		*e = Mncer401ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Mncer401ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Mncer401ApplicationJSON - Unauthorized access
type Mncer401ApplicationJSON struct {
	Error            *Mncer401ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Mncer401ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Mncer400ApplicationJSONErrorEnum string

const (
	Mncer400ApplicationJSONErrorEnumMissingParameter Mncer400ApplicationJSONErrorEnum = "missing_parameter"
	Mncer400ApplicationJSONErrorEnumInvalidParameter Mncer400ApplicationJSONErrorEnum = "invalid_parameter"
	Mncer400ApplicationJSONErrorEnumInvalidFormat    Mncer400ApplicationJSONErrorEnum = "invalid_format"
	Mncer400ApplicationJSONErrorEnumInvalidTxnid     Mncer400ApplicationJSONErrorEnum = "invalid_txnid"
	Mncer400ApplicationJSONErrorEnumInvalidConsentid Mncer400ApplicationJSONErrorEnum = "invalid_consentid"
)

func (e Mncer400ApplicationJSONErrorEnum) ToPointer() *Mncer400ApplicationJSONErrorEnum {
	return &e
}

func (e *Mncer400ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "missing_parameter":
		fallthrough
	case "invalid_parameter":
		fallthrough
	case "invalid_format":
		fallthrough
	case "invalid_txnid":
		fallthrough
	case "invalid_consentid":
		*e = Mncer400ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Mncer400ApplicationJSONErrorEnum: %v", v)
	}
}

type Mncer400ApplicationJSONErrorDescriptionEnum string

const (
	Mncer400ApplicationJSONErrorDescriptionEnumPleaseProvideAllMandatoryParameters     Mncer400ApplicationJSONErrorDescriptionEnum = "Please provide all mandatory parameters"
	Mncer400ApplicationJSONErrorDescriptionEnumBadRequest                              Mncer400ApplicationJSONErrorDescriptionEnum = "Bad request"
	Mncer400ApplicationJSONErrorDescriptionEnumTheFormatParameterIsInvalid             Mncer400ApplicationJSONErrorDescriptionEnum = "The format parameter is invalid"
	Mncer400ApplicationJSONErrorDescriptionEnumTheTxnIDParameterMustBeInUUIDFormat     Mncer400ApplicationJSONErrorDescriptionEnum = "The txnId parameter must be in UUID format"
	Mncer400ApplicationJSONErrorDescriptionEnumTheConsentIDParameterMustBeInUUIDFormat Mncer400ApplicationJSONErrorDescriptionEnum = "The consentId parameter must be in UUID format"
)

func (e Mncer400ApplicationJSONErrorDescriptionEnum) ToPointer() *Mncer400ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Mncer400ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Please provide all mandatory parameters":
		fallthrough
	case "Bad request":
		fallthrough
	case "The format parameter is invalid":
		fallthrough
	case "The txnId parameter must be in UUID format":
		fallthrough
	case "The consentId parameter must be in UUID format":
		*e = Mncer400ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Mncer400ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Mncer400ApplicationJSON - Bad request
type Mncer400ApplicationJSON struct {
	Error            *Mncer400ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Mncer400ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type MncerResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Bad request
	Mncer400ApplicationJSONObject *Mncer400ApplicationJSON
	// Unauthorized access
	Mncer401ApplicationJSONObject *Mncer401ApplicationJSON
	// No record found
	Mncer404ApplicationJSONObject *Mncer404ApplicationJSON
	// Internal server error
	Mncer500ApplicationJSONObject *Mncer500ApplicationJSON
	// Bad gateway
	Mncer502ApplicationJSONObject *Mncer502ApplicationJSON
	// Service unavailable
	Mncer503ApplicationJSONObject *Mncer503ApplicationJSON
	// Gateway timeout
	Mncer504ApplicationJSONObject *Mncer504ApplicationJSON
}
