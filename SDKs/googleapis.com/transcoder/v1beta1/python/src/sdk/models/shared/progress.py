"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Progress:
    r"""Estimated fractional progress for each step, from `0` to `1`."""
    
    analyzed: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('analyzed'), 'exclude': lambda f: f is None }})
    r"""Estimated fractional progress for `analyzing` step."""  
    encoded: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('encoded'), 'exclude': lambda f: f is None }})
    r"""Estimated fractional progress for `encoding` step."""  
    notified: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('notified'), 'exclude': lambda f: f is None }})
    r"""Estimated fractional progress for `notifying` step."""  
    uploaded: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('uploaded'), 'exclude': lambda f: f is None }})
    r"""Estimated fractional progress for `uploading` step."""  
    