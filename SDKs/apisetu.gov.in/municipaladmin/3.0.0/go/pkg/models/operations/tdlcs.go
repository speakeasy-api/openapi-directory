// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type TdlcsSecurity struct {
	APIKey   shared.SchemeAPIKey   `security:"scheme,type=apiKey,subtype=header"`
	ClientID shared.SchemeClientID `security:"scheme,type=apiKey,subtype=header"`
}

type TdlcsRequestBodyCertificateParameters struct {
	// Document Number
	DocumentNumber string `json:"DocumentNumber"`
}

// TdlcsRequestBodyFormatEnum - The format of the certificate in response.
type TdlcsRequestBodyFormatEnum string

const (
	TdlcsRequestBodyFormatEnumPdf TdlcsRequestBodyFormatEnum = "pdf"
)

func (e *TdlcsRequestBodyFormatEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "pdf":
		*e = TdlcsRequestBodyFormatEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for TdlcsRequestBodyFormatEnum: %s", s)
	}
}

// TdlcsRequestBody - Request format
type TdlcsRequestBody struct {
	CertificateParameters *TdlcsRequestBodyCertificateParameters `json:"certificateParameters,omitempty"`
	ConsentArtifact       *shared.ConsentArtifactSchema          `json:"consentArtifact,omitempty"`
	// The format of the certificate in response.
	Format TdlcsRequestBodyFormatEnum `json:"format"`
	// A unique transaction id for this request in UUID format. It is used for tracking the request.
	TxnID string `json:"txnId"`
}

type TdlcsRequest struct {
	// Request format
	Request  *TdlcsRequestBody `request:"mediaType=application/json"`
	Security TdlcsSecurity
}

type Tdlcs504ApplicationJSONErrorEnum string

const (
	Tdlcs504ApplicationJSONErrorEnumGatewayTimeout Tdlcs504ApplicationJSONErrorEnum = "gateway_timeout"
)

func (e *Tdlcs504ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "gateway_timeout":
		*e = Tdlcs504ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Tdlcs504ApplicationJSONErrorEnum: %s", s)
	}
}

type Tdlcs504ApplicationJSONErrorDescriptionEnum string

const (
	Tdlcs504ApplicationJSONErrorDescriptionEnumPublisherServiceDidNotRespondInTime Tdlcs504ApplicationJSONErrorDescriptionEnum = "Publisher service did not respond in time"
)

func (e *Tdlcs504ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Publisher service did not respond in time":
		*e = Tdlcs504ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Tdlcs504ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Tdlcs504ApplicationJSON - Gateway timeout
type Tdlcs504ApplicationJSON struct {
	Error            *Tdlcs504ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Tdlcs504ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Tdlcs503ApplicationJSONErrorEnum string

const (
	Tdlcs503ApplicationJSONErrorEnumServiceUnavailable Tdlcs503ApplicationJSONErrorEnum = "service_unavailable"
)

func (e *Tdlcs503ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "service_unavailable":
		*e = Tdlcs503ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Tdlcs503ApplicationJSONErrorEnum: %s", s)
	}
}

type Tdlcs503ApplicationJSONErrorDescriptionEnum string

const (
	Tdlcs503ApplicationJSONErrorDescriptionEnumPublisherServiceIsTemporarilyUnavailable Tdlcs503ApplicationJSONErrorDescriptionEnum = "Publisher service is temporarily unavailable"
)

func (e *Tdlcs503ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Publisher service is temporarily unavailable":
		*e = Tdlcs503ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Tdlcs503ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Tdlcs503ApplicationJSON - Service unavailable
type Tdlcs503ApplicationJSON struct {
	Error            *Tdlcs503ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Tdlcs503ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Tdlcs502ApplicationJSONErrorEnum string

const (
	Tdlcs502ApplicationJSONErrorEnumBadGatewy Tdlcs502ApplicationJSONErrorEnum = "bad_gatewy"
)

func (e *Tdlcs502ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "bad_gatewy":
		*e = Tdlcs502ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Tdlcs502ApplicationJSONErrorEnum: %s", s)
	}
}

type Tdlcs502ApplicationJSONErrorDescriptionEnum string

const (
	Tdlcs502ApplicationJSONErrorDescriptionEnumPublisherServiceReturnedAnInvalidResponse Tdlcs502ApplicationJSONErrorDescriptionEnum = "Publisher service returned an invalid response"
)

func (e *Tdlcs502ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Publisher service returned an invalid response":
		*e = Tdlcs502ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Tdlcs502ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Tdlcs502ApplicationJSON - Bad gateway
type Tdlcs502ApplicationJSON struct {
	Error            *Tdlcs502ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Tdlcs502ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Tdlcs500ApplicationJSONErrorEnum string

const (
	Tdlcs500ApplicationJSONErrorEnumInternalServerError Tdlcs500ApplicationJSONErrorEnum = "internal_server_error"
)

func (e *Tdlcs500ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "internal_server_error":
		*e = Tdlcs500ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Tdlcs500ApplicationJSONErrorEnum: %s", s)
	}
}

type Tdlcs500ApplicationJSONErrorDescriptionEnum string

const (
	Tdlcs500ApplicationJSONErrorDescriptionEnumInternalServerError Tdlcs500ApplicationJSONErrorDescriptionEnum = "Internal server error"
)

func (e *Tdlcs500ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Internal server error":
		*e = Tdlcs500ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Tdlcs500ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Tdlcs500ApplicationJSON - Internal server error
type Tdlcs500ApplicationJSON struct {
	Error            *Tdlcs500ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Tdlcs500ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Tdlcs404ApplicationJSONErrorEnum string

const (
	Tdlcs404ApplicationJSONErrorEnumRecordNotFound Tdlcs404ApplicationJSONErrorEnum = "record_not_found"
	Tdlcs404ApplicationJSONErrorEnumURLNotFound    Tdlcs404ApplicationJSONErrorEnum = "url_not_found"
)

func (e *Tdlcs404ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "record_not_found":
		fallthrough
	case "url_not_found":
		*e = Tdlcs404ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Tdlcs404ApplicationJSONErrorEnum: %s", s)
	}
}

type Tdlcs404ApplicationJSONErrorDescriptionEnum string

const (
	Tdlcs404ApplicationJSONErrorDescriptionEnumNoRecordFound               Tdlcs404ApplicationJSONErrorDescriptionEnum = "No record found"
	Tdlcs404ApplicationJSONErrorDescriptionEnumYourAPIURLOrPathIsIncorrect Tdlcs404ApplicationJSONErrorDescriptionEnum = "Your API url or path is incorrect"
)

func (e *Tdlcs404ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "No record found":
		fallthrough
	case "Your API url or path is incorrect":
		*e = Tdlcs404ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Tdlcs404ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Tdlcs404ApplicationJSON - No record found
type Tdlcs404ApplicationJSON struct {
	Error            *Tdlcs404ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Tdlcs404ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Tdlcs401ApplicationJSONErrorEnum string

const (
	Tdlcs401ApplicationJSONErrorEnumInvalidAuthentication Tdlcs401ApplicationJSONErrorEnum = "invalid_authentication"
	Tdlcs401ApplicationJSONErrorEnumInvalidAuthorization  Tdlcs401ApplicationJSONErrorEnum = "invalid_authorization"
)

func (e *Tdlcs401ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "invalid_authentication":
		fallthrough
	case "invalid_authorization":
		*e = Tdlcs401ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Tdlcs401ApplicationJSONErrorEnum: %s", s)
	}
}

type Tdlcs401ApplicationJSONErrorDescriptionEnum string

const (
	Tdlcs401ApplicationJSONErrorDescriptionEnumAuthenticationFailed            Tdlcs401ApplicationJSONErrorDescriptionEnum = "Authentication failed"
	Tdlcs401ApplicationJSONErrorDescriptionEnumYouAreNotAuthorizedToUseThisAPI Tdlcs401ApplicationJSONErrorDescriptionEnum = "You are not authorized to use this API"
)

func (e *Tdlcs401ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Authentication failed":
		fallthrough
	case "You are not authorized to use this API":
		*e = Tdlcs401ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Tdlcs401ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Tdlcs401ApplicationJSON - Unauthorized access
type Tdlcs401ApplicationJSON struct {
	Error            *Tdlcs401ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Tdlcs401ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Tdlcs400ApplicationJSONErrorEnum string

const (
	Tdlcs400ApplicationJSONErrorEnumMissingParameter Tdlcs400ApplicationJSONErrorEnum = "missing_parameter"
	Tdlcs400ApplicationJSONErrorEnumInvalidParameter Tdlcs400ApplicationJSONErrorEnum = "invalid_parameter"
	Tdlcs400ApplicationJSONErrorEnumInvalidFormat    Tdlcs400ApplicationJSONErrorEnum = "invalid_format"
	Tdlcs400ApplicationJSONErrorEnumInvalidTxnid     Tdlcs400ApplicationJSONErrorEnum = "invalid_txnid"
	Tdlcs400ApplicationJSONErrorEnumInvalidConsentid Tdlcs400ApplicationJSONErrorEnum = "invalid_consentid"
)

func (e *Tdlcs400ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "missing_parameter":
		fallthrough
	case "invalid_parameter":
		fallthrough
	case "invalid_format":
		fallthrough
	case "invalid_txnid":
		fallthrough
	case "invalid_consentid":
		*e = Tdlcs400ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Tdlcs400ApplicationJSONErrorEnum: %s", s)
	}
}

type Tdlcs400ApplicationJSONErrorDescriptionEnum string

const (
	Tdlcs400ApplicationJSONErrorDescriptionEnumPleaseProvideAllMandatoryParameters     Tdlcs400ApplicationJSONErrorDescriptionEnum = "Please provide all mandatory parameters"
	Tdlcs400ApplicationJSONErrorDescriptionEnumBadRequest                              Tdlcs400ApplicationJSONErrorDescriptionEnum = "Bad request"
	Tdlcs400ApplicationJSONErrorDescriptionEnumTheFormatParameterIsInvalid             Tdlcs400ApplicationJSONErrorDescriptionEnum = "The format parameter is invalid"
	Tdlcs400ApplicationJSONErrorDescriptionEnumTheTxnIDParameterMustBeInUUIDFormat     Tdlcs400ApplicationJSONErrorDescriptionEnum = "The txnId parameter must be in UUID format"
	Tdlcs400ApplicationJSONErrorDescriptionEnumTheConsentIDParameterMustBeInUUIDFormat Tdlcs400ApplicationJSONErrorDescriptionEnum = "The consentId parameter must be in UUID format"
)

func (e *Tdlcs400ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Please provide all mandatory parameters":
		fallthrough
	case "Bad request":
		fallthrough
	case "The format parameter is invalid":
		fallthrough
	case "The txnId parameter must be in UUID format":
		fallthrough
	case "The consentId parameter must be in UUID format":
		*e = Tdlcs400ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Tdlcs400ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Tdlcs400ApplicationJSON - Bad request
type Tdlcs400ApplicationJSON struct {
	Error            *Tdlcs400ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Tdlcs400ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type TdlcsResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Bad request
	Tdlcs400ApplicationJSONObject *Tdlcs400ApplicationJSON
	// Unauthorized access
	Tdlcs401ApplicationJSONObject *Tdlcs401ApplicationJSON
	// No record found
	Tdlcs404ApplicationJSONObject *Tdlcs404ApplicationJSON
	// Internal server error
	Tdlcs500ApplicationJSONObject *Tdlcs500ApplicationJSON
	// Bad gateway
	Tdlcs502ApplicationJSONObject *Tdlcs502ApplicationJSON
	// Service unavailable
	Tdlcs503ApplicationJSONObject *Tdlcs503ApplicationJSON
	// Gateway timeout
	Tdlcs504ApplicationJSONObject *Tdlcs504ApplicationJSON
}
