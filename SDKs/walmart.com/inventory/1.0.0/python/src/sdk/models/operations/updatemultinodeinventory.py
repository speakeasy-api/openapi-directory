"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Any, Optional

class UpdateMultiNodeInventoryRequestBodyInventoriesNodesInputQtyUnitEnum(str, Enum):
    r"""The unit of measurement. Example: 'EACH'"""
    EACH = 'EACH'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateMultiNodeInventoryRequestBodyInventoriesNodesInputQty:
    r"""Quantity that has been ordered by the customers but not yet shipped"""
    
    amount: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('amount') }})
    r"""Inventory Count"""  
    unit: UpdateMultiNodeInventoryRequestBodyInventoriesNodesInputQtyUnitEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('unit') }})
    r"""The unit of measurement. Example: 'EACH'"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateMultiNodeInventoryRequestBodyInventoriesNodes:
    
    input_qty: UpdateMultiNodeInventoryRequestBodyInventoriesNodesInputQty = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('inputQty') }})
    r"""Quantity that has been ordered by the customers but not yet shipped"""  
    ship_node: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('shipNode') }})
    r"""ShipNode Id of the ship node for which the inventory is requested"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateMultiNodeInventoryRequestBodyInventories:
    
    nodes: list[UpdateMultiNodeInventoryRequestBodyInventoriesNodes] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('nodes') }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateMultiNodeInventoryRequestBody:
    r"""Request fields"""
    
    inventories: UpdateMultiNodeInventoryRequestBodyInventories = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('inventories') }})  
    

@dataclasses.dataclass
class UpdateMultiNodeInventoryRequest:
    
    request_body: UpdateMultiNodeInventoryRequestBody = dataclasses.field(metadata={'request': { 'media_type': 'application/json' }})
    r"""Request fields"""  
    sku: str = dataclasses.field(metadata={'path_param': { 'field_name': 'sku', 'style': 'simple', 'explode': False }})
    r"""An arbitrary alphanumeric unique ID, specified by the seller, which identifies each item. This will be used by the seller in the XSD file to refer to each item. Special characters in the sku needing encoding are: ':', '/', '?', '#', '[', ']', '@', '!', '$', '&', \\"'\\", '(', ')', '*', '+', ',', ';', '=', ‘ ’ as well as '%' itself if it's a part of sku. Make sure to encode space with %20. Other characters don't need to be encoded."""  
    wm_qos_correlation_id: str = dataclasses.field(metadata={'header': { 'field_name': 'WM_QOS.CORRELATION_ID', 'style': 'simple', 'explode': False }})
    r"""A unique ID which identifies each API call and used to track and debug issues; use a random generated GUID for this ID"""  
    wm_sec_access_token: str = dataclasses.field(metadata={'header': { 'field_name': 'WM_SEC.ACCESS_TOKEN', 'style': 'simple', 'explode': False }})
    r"""The access token retrieved in the Token API call"""  
    wm_svc_name: str = dataclasses.field(metadata={'header': { 'field_name': 'WM_SVC.NAME', 'style': 'simple', 'explode': False }})
    r"""Walmart Service Name"""  
    wm_consumer_channel_type: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'WM_CONSUMER.CHANNEL.TYPE', 'style': 'simple', 'explode': False }})
    r"""A unique ID to track the consumer request by channel. Use the Consumer Channel Type received during onboarding"""  
    
class UpdateMultiNodeInventory200ApplicationJSONNodesErrorsCategoryEnum(str, Enum):
    APPLICATION = 'APPLICATION'
    SYSTEM = 'SYSTEM'
    REQUEST = 'REQUEST'
    DATA = 'DATA'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateMultiNodeInventory200ApplicationJSONNodesErrorsCauses:
    
    code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('code'), 'exclude': lambda f: f is None }})  
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description'), 'exclude': lambda f: f is None }})  
    field: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('field'), 'exclude': lambda f: f is None }})  
    type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})  
    
class UpdateMultiNodeInventory200ApplicationJSONNodesErrorsSeverityEnum(str, Enum):
    INFO = 'INFO'
    WARN = 'WARN'
    ERROR = 'ERROR'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateMultiNodeInventory200ApplicationJSONNodesErrors:
    
    code: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('code') }})  
    category: Optional[UpdateMultiNodeInventory200ApplicationJSONNodesErrorsCategoryEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('category'), 'exclude': lambda f: f is None }})  
    causes: Optional[list[UpdateMultiNodeInventory200ApplicationJSONNodesErrorsCauses]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('causes'), 'exclude': lambda f: f is None }})  
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description'), 'exclude': lambda f: f is None }})  
    error_identifiers: Optional[dict[str, dict[str, Any]]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('errorIdentifiers'), 'exclude': lambda f: f is None }})  
    field: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('field'), 'exclude': lambda f: f is None }})  
    info: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('info'), 'exclude': lambda f: f is None }})  
    severity: Optional[UpdateMultiNodeInventory200ApplicationJSONNodesErrorsSeverityEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('severity'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateMultiNodeInventory200ApplicationJSONNodes:
    
    errors: Optional[list[UpdateMultiNodeInventory200ApplicationJSONNodesErrors]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('errors'), 'exclude': lambda f: f is None }})
    r"""Node Update Error description."""  
    ship_node: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('shipNode'), 'exclude': lambda f: f is None }})
    r"""ShipNode Id of the ship node for which the inventory is requested"""  
    status: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status'), 'exclude': lambda f: f is None }})
    r"""Node Update status. Example: 'Success'"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateMultiNodeInventory200ApplicationJSON:
    r"""Successful Operation"""
    
    nodes: Optional[list[UpdateMultiNodeInventory200ApplicationJSONNodes]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('nodes'), 'exclude': lambda f: f is None }})  
    sku: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sku'), 'exclude': lambda f: f is None }})
    r"""An arbitrary alphanumeric unique ID, specified by the seller, which identifies each item."""  
    

@dataclasses.dataclass
class UpdateMultiNodeInventoryResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    update_multi_node_inventory_200_application_json_object: Optional[UpdateMultiNodeInventory200ApplicationJSON] = dataclasses.field(default=None)
    r"""Successful Operation"""  
    