"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import mqbrokeraccesscredentials as shared_mqbrokeraccesscredentials
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PipeSourceRabbitMQBrokerParameters:
    r"""The parameters for using a Rabbit MQ broker as a source."""
    
    credentials: shared_mqbrokeraccesscredentials.MQBrokerAccessCredentials = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Credentials') }})  
    queue_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('QueueName') }})  
    batch_size: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('BatchSize'), 'exclude': lambda f: f is None }})  
    maximum_batching_window_in_seconds: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('MaximumBatchingWindowInSeconds'), 'exclude': lambda f: f is None }})  
    virtual_host: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('VirtualHost'), 'exclude': lambda f: f is None }})  
    