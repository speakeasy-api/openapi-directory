// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// PaymentReadPaymentProductEnum - Payment product
type PaymentReadPaymentProductEnum string

const (
	PaymentReadPaymentProductEnumT2P  PaymentReadPaymentProductEnum = "T2P"
	PaymentReadPaymentProductEnumSct  PaymentReadPaymentProductEnum = "SCT"
	PaymentReadPaymentProductEnumIsct PaymentReadPaymentProductEnum = "ISCT"
	PaymentReadPaymentProductEnumCbct PaymentReadPaymentProductEnum = "CBCT"
)

func (e *PaymentReadPaymentProductEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "T2P":
		fallthrough
	case "SCT":
		fallthrough
	case "ISCT":
		fallthrough
	case "CBCT":
		*e = PaymentReadPaymentProductEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PaymentReadPaymentProductEnum: %s", s)
	}
}

// PaymentReadPaymentStatusEnum - Payment end to end identification
type PaymentReadPaymentStatusEnum string

const (
	PaymentReadPaymentStatusEnumInit PaymentReadPaymentStatusEnum = "INIT"
	PaymentReadPaymentStatusEnumErre PaymentReadPaymentStatusEnum = "ERRE"
	PaymentReadPaymentStatusEnumErrs PaymentReadPaymentStatusEnum = "ERRS"
	PaymentReadPaymentStatusEnumAccc PaymentReadPaymentStatusEnum = "ACCC"
	PaymentReadPaymentStatusEnumAccp PaymentReadPaymentStatusEnum = "ACCP"
	PaymentReadPaymentStatusEnumAcsc PaymentReadPaymentStatusEnum = "ACSC"
	PaymentReadPaymentStatusEnumAcsp PaymentReadPaymentStatusEnum = "ACSP"
	PaymentReadPaymentStatusEnumActc PaymentReadPaymentStatusEnum = "ACTC"
	PaymentReadPaymentStatusEnumAcwc PaymentReadPaymentStatusEnum = "ACWC"
	PaymentReadPaymentStatusEnumAcwp PaymentReadPaymentStatusEnum = "ACWP"
	PaymentReadPaymentStatusEnumRcvd PaymentReadPaymentStatusEnum = "RCVD"
	PaymentReadPaymentStatusEnumPdng PaymentReadPaymentStatusEnum = "PDNG"
	PaymentReadPaymentStatusEnumRjct PaymentReadPaymentStatusEnum = "RJCT"
	PaymentReadPaymentStatusEnumCanc PaymentReadPaymentStatusEnum = "CANC"
	PaymentReadPaymentStatusEnumAcfc PaymentReadPaymentStatusEnum = "ACFC"
	PaymentReadPaymentStatusEnumPatc PaymentReadPaymentStatusEnum = "PATC"
	PaymentReadPaymentStatusEnumPart PaymentReadPaymentStatusEnum = "PART"
)

func (e *PaymentReadPaymentStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "INIT":
		fallthrough
	case "ERRE":
		fallthrough
	case "ERRS":
		fallthrough
	case "ACCC":
		fallthrough
	case "ACCP":
		fallthrough
	case "ACSC":
		fallthrough
	case "ACSP":
		fallthrough
	case "ACTC":
		fallthrough
	case "ACWC":
		fallthrough
	case "ACWP":
		fallthrough
	case "RCVD":
		fallthrough
	case "PDNG":
		fallthrough
	case "RJCT":
		fallthrough
	case "CANC":
		fallthrough
	case "ACFC":
		fallthrough
	case "PATC":
		fallthrough
	case "PART":
		*e = PaymentReadPaymentStatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PaymentReadPaymentStatusEnum: %s", s)
	}
}

// PaymentReadPaymentTypeEnum - Payment Type
type PaymentReadPaymentTypeEnum string

const (
	PaymentReadPaymentTypeEnumSinglePayment   PaymentReadPaymentTypeEnum = "single-payment"
	PaymentReadPaymentTypeEnumBulkPayment     PaymentReadPaymentTypeEnum = "bulk-payment"
	PaymentReadPaymentTypeEnumPeriodicPayment PaymentReadPaymentTypeEnum = "periodic-payment"
)

func (e *PaymentReadPaymentTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "single-payment":
		fallthrough
	case "bulk-payment":
		fallthrough
	case "periodic-payment":
		*e = PaymentReadPaymentTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PaymentReadPaymentTypeEnum: %s", s)
	}
}

// PaymentRead - PaymentReadSerializer.
type PaymentRead struct {
	// Registered creditor account
	CreditorAccount string `json:"creditor_account"`
	// Payment Custom Payment ID
	CustomPaymentID *string `json:"custom_payment_id,omitempty"`
	// Debtor account write serializer.
	DebtorAccount DebtorAccountWrite `json:"debtor_account"`
	// Payment description
	Description *string `json:"description,omitempty"`
	// Instructed amount
	InstructedAmount InstructedAmount `json:"instructed_amount"`
	// Payment ID
	PaymentID *string `json:"payment_id,omitempty"`
	// Payment product
	PaymentProduct *PaymentReadPaymentProductEnum `json:"payment_product,omitempty"`
	// Payment end to end identification
	PaymentStatus *PaymentReadPaymentStatusEnum `json:"payment_status,omitempty"`
	// Payment Type
	PaymentType *PaymentReadPaymentTypeEnum `json:"payment_type,omitempty"`
	// Redirect URL to your application after payment is done
	Redirect string `json:"redirect"`
}
