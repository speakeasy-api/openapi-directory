"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import scorecommentcontext as shared_scorecommentcontext
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ScoreCommentUpdate:
    r"""Update of a comment"""
    
    comment: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('comment'), 'exclude': lambda f: f is None }})
    r"""The comment text that can includes mentions using the following format: `@[id:username]`."""  
    context: Optional[shared_scorecommentcontext.ScoreCommentContext] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('context'), 'exclude': lambda f: f is None }})
    r"""The context of the comment (for inline/contextualized comments). A context will include all the information related to the location of the comment (i.e. score parts, range of measure, time position)."""  
    raw_comment: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('rawComment'), 'exclude': lambda f: f is None }})
    r"""A raw version of the comment, that can be displayed without the mentions. If you use mentions, this property must be set."""  
    revision: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('revision'), 'exclude': lambda f: f is None }})
    r"""The unique indentifier of the revision of the score where the comment was added. If this property is unspecified or contains \\"last\\", the API will automatically take the last revision created."""  
    