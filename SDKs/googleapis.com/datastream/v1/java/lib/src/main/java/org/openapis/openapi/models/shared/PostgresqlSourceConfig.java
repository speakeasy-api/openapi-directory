/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * PostgresqlSourceConfig - PostgreSQL data source configuration
 */
public class PostgresqlSourceConfig {
    /**
     * PostgreSQL database structure.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("excludeObjects")
    public PostgresqlRdbms excludeObjects;
    public PostgresqlSourceConfig withExcludeObjects(PostgresqlRdbms excludeObjects) {
        this.excludeObjects = excludeObjects;
        return this;
    }
    
    /**
     * PostgreSQL database structure.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("includeObjects")
    public PostgresqlRdbms includeObjects;
    public PostgresqlSourceConfig withIncludeObjects(PostgresqlRdbms includeObjects) {
        this.includeObjects = includeObjects;
        return this;
    }
    
    /**
     * Maximum number of concurrent backfill tasks. The number should be non negative. If not set (or set to 0), the system's default value will be used.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("maxConcurrentBackfillTasks")
    public Integer maxConcurrentBackfillTasks;
    public PostgresqlSourceConfig withMaxConcurrentBackfillTasks(Integer maxConcurrentBackfillTasks) {
        this.maxConcurrentBackfillTasks = maxConcurrentBackfillTasks;
        return this;
    }
    
    /**
     * Required. The name of the publication that includes the set of all tables that are defined in the stream's include_objects.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("publication")
    public String publication;
    public PostgresqlSourceConfig withPublication(String publication) {
        this.publication = publication;
        return this;
    }
    
    /**
     * Required. Immutable. The name of the logical replication slot that's configured with the pgoutput plugin.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("replicationSlot")
    public String replicationSlot;
    public PostgresqlSourceConfig withReplicationSlot(String replicationSlot) {
        this.replicationSlot = replicationSlot;
        return this;
    }
    
}
