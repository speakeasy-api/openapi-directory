<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class RegionHealthCheckServices 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Deletes the specified regional HealthCheckService.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeRegionHealthCheckServicesDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeRegionHealthCheckServicesDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeRegionHealthCheckServicesDeleteResponse
     */
	public function computeRegionHealthCheckServicesDelete(
        \OpenAPI\OpenAPI\Models\Operations\ComputeRegionHealthCheckServicesDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeRegionHealthCheckServicesDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeRegionHealthCheckServicesDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/regions/{region}/healthCheckServices/{healthCheckService}', \OpenAPI\OpenAPI\Models\Operations\ComputeRegionHealthCheckServicesDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeRegionHealthCheckServicesDeleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeRegionHealthCheckServicesDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns the specified regional HealthCheckService resource.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeRegionHealthCheckServicesGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeRegionHealthCheckServicesGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeRegionHealthCheckServicesGetResponse
     */
	public function computeRegionHealthCheckServicesGet(
        \OpenAPI\OpenAPI\Models\Operations\ComputeRegionHealthCheckServicesGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeRegionHealthCheckServicesGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeRegionHealthCheckServicesGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/regions/{region}/healthCheckServices/{healthCheckService}', \OpenAPI\OpenAPI\Models\Operations\ComputeRegionHealthCheckServicesGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeRegionHealthCheckServicesGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeRegionHealthCheckServicesGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->healthCheckService = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\HealthCheckService', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a regional HealthCheckService resource in the specified project and region using the data included in the request.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeRegionHealthCheckServicesInsertRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeRegionHealthCheckServicesInsertSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeRegionHealthCheckServicesInsertResponse
     */
	public function computeRegionHealthCheckServicesInsert(
        \OpenAPI\OpenAPI\Models\Operations\ComputeRegionHealthCheckServicesInsertRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeRegionHealthCheckServicesInsertSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeRegionHealthCheckServicesInsertResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/regions/{region}/healthCheckServices', \OpenAPI\OpenAPI\Models\Operations\ComputeRegionHealthCheckServicesInsertRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "healthCheckService", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeRegionHealthCheckServicesInsertRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeRegionHealthCheckServicesInsertResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists all the HealthCheckService resources that have been configured for the specified project in the given region.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeRegionHealthCheckServicesListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeRegionHealthCheckServicesListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeRegionHealthCheckServicesListResponse
     */
	public function computeRegionHealthCheckServicesList(
        \OpenAPI\OpenAPI\Models\Operations\ComputeRegionHealthCheckServicesListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeRegionHealthCheckServicesListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeRegionHealthCheckServicesListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/regions/{region}/healthCheckServices', \OpenAPI\OpenAPI\Models\Operations\ComputeRegionHealthCheckServicesListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeRegionHealthCheckServicesListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeRegionHealthCheckServicesListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->healthCheckServicesList = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\HealthCheckServicesList', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates the specified regional HealthCheckService resource with the data included in the request. This method supports PATCH semantics and uses the JSON merge patch format and processing rules.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeRegionHealthCheckServicesPatchRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeRegionHealthCheckServicesPatchSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeRegionHealthCheckServicesPatchResponse
     */
	public function computeRegionHealthCheckServicesPatch(
        \OpenAPI\OpenAPI\Models\Operations\ComputeRegionHealthCheckServicesPatchRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeRegionHealthCheckServicesPatchSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeRegionHealthCheckServicesPatchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/regions/{region}/healthCheckServices/{healthCheckService}', \OpenAPI\OpenAPI\Models\Operations\ComputeRegionHealthCheckServicesPatchRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "healthCheckService1", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeRegionHealthCheckServicesPatchRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeRegionHealthCheckServicesPatchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns permissions that a caller has on the specified resource.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeRegionHealthCheckServicesTestIamPermissionsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeRegionHealthCheckServicesTestIamPermissionsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeRegionHealthCheckServicesTestIamPermissionsResponse
     */
	public function computeRegionHealthCheckServicesTestIamPermissions(
        \OpenAPI\OpenAPI\Models\Operations\ComputeRegionHealthCheckServicesTestIamPermissionsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeRegionHealthCheckServicesTestIamPermissionsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeRegionHealthCheckServicesTestIamPermissionsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/regions/{region}/healthCheckServices/{resource}/testIamPermissions', \OpenAPI\OpenAPI\Models\Operations\ComputeRegionHealthCheckServicesTestIamPermissionsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "testPermissionsRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeRegionHealthCheckServicesTestIamPermissionsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeRegionHealthCheckServicesTestIamPermissionsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->testPermissionsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\TestPermissionsResponse', 'json');
            }
        }

        return $response;
    }
}