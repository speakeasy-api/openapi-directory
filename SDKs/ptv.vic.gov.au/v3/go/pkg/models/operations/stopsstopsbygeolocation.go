// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type StopsStopsByGeolocationRouteTypesEnum int

const (
	StopsStopsByGeolocationRouteTypesEnumZero  StopsStopsByGeolocationRouteTypesEnum = 0
	StopsStopsByGeolocationRouteTypesEnumOne   StopsStopsByGeolocationRouteTypesEnum = 1
	StopsStopsByGeolocationRouteTypesEnumTwo   StopsStopsByGeolocationRouteTypesEnum = 2
	StopsStopsByGeolocationRouteTypesEnumThree StopsStopsByGeolocationRouteTypesEnum = 3
	StopsStopsByGeolocationRouteTypesEnumFour  StopsStopsByGeolocationRouteTypesEnum = 4
)

func (e StopsStopsByGeolocationRouteTypesEnum) ToPointer() *StopsStopsByGeolocationRouteTypesEnum {
	return &e
}

func (e *StopsStopsByGeolocationRouteTypesEnum) UnmarshalJSON(data []byte) error {
	var v int
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case 0:
		fallthrough
	case 1:
		fallthrough
	case 2:
		fallthrough
	case 3:
		fallthrough
	case 4:
		*e = StopsStopsByGeolocationRouteTypesEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for StopsStopsByGeolocationRouteTypesEnum: %v", v)
	}
}

type StopsStopsByGeolocationRequest struct {
	// Your developer id
	Devid *string `queryParam:"style=form,explode=true,name=devid"`
	// Geographic coordinate of latitude
	Latitude float32 `pathParam:"style=simple,explode=false,name=latitude"`
	// Geographic coordinate of longitude
	Longitude float32 `pathParam:"style=simple,explode=false,name=longitude"`
	// Filter by maximum distance (in metres) from location specified via latitude and longitude parameters (default = 300)
	MaxDistance *float64 `queryParam:"style=form,explode=true,name=max_distance"`
	// Maximum number of results returned (default = 30)
	MaxResults *int `queryParam:"style=form,explode=true,name=max_results"`
	// Filter by route_type; values returned via RouteTypes API
	RouteTypes []StopsStopsByGeolocationRouteTypesEnum `queryParam:"style=form,explode=true,name=route_types"`
	// Authentication signature for request
	Signature *string `queryParam:"style=form,explode=true,name=signature"`
	// Indicates if stop disruption information will be returned (default = false)
	StopDisruptions *bool `queryParam:"style=form,explode=true,name=stop_disruptions"`
	// Please ignore
	Token *string `queryParam:"style=form,explode=true,name=token"`
}

type StopsStopsByGeolocationResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Invalid Request
	V3ErrorResponse *shared.V3ErrorResponse
	// All stops near the specified location.
	V3StopsByDistanceResponse *shared.V3StopsByDistanceResponse
}
