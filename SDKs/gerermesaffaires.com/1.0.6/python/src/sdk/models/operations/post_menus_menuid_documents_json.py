"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Any, Optional


@dataclasses.dataclass
class PostMenusMenuIDDocumentsJSONSecurity:
    
    gma_auth: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'oauth2', 'field_name': 'Authorization' }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PostMenusMenuIDDocumentsApplicationJSONFile:
    
    content64_encoded: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Content64Encoded'), 'exclude': lambda f: f is None }})  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Name'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PostMenusMenuIDDocumentsApplicationJSON:
    r"""Document to add"""
    
    file: PostMenusMenuIDDocumentsApplicationJSONFile = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('File') }})  
    title: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Title') }})  
    author: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Author'), 'exclude': lambda f: f is None }})  
    comment: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Comment'), 'exclude': lambda f: f is None }})  
    date_: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Date'), 'exclude': lambda f: f is None }})  
    

@dataclasses.dataclass
class PostMenusMenuIDDocumentsJSONRequest:
    
    menu_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'menuId', 'style': 'simple', 'explode': False }})
    r"""Id of the space"""  
    request_body: PostMenusMenuIDDocumentsApplicationJSON = dataclasses.field(metadata={'request': { 'media_type': 'application/json' }})
    r"""Document to add"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PostMenusMenuIDDocumentsJSON201ApplicationJSON:
    r"""Report of upload"""
    
    report: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Report'), 'exclude': lambda f: f is None }})  
    

@dataclasses.dataclass
class PostMenusMenuIDDocumentsJSONResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    post_menus_menu_id_documents_json_201_application_json_object: Optional[PostMenusMenuIDDocumentsJSON201ApplicationJSON] = dataclasses.field(default=None)
    r"""Report of upload"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    