import { SpeakeasyBase } from "../../../internal/utils";
import { Address } from "./address";
/**
 * Represents the payment details of a card to be used for payments. These
 *
 * @remarks
 * details are determined by the payment token generated by Web Payments SDK.
 */
export declare class Card extends SpeakeasyBase {
    /**
     * Represents a postal address in a country. The address format is based
     *
     * @remarks
     * on an [open-source library from Google](https://github.com/google/libaddressinput). For more information,
     * see [AddressValidationMetadata](https://github.com/google/libaddressinput/wiki/AddressValidationMetadata).
     * This format has dedicated fields for four address components: postal code,
     * locality (city), administrative district (state, prefecture, or province), and
     * sublocality (town or village). These components have dedicated fields in the
     * `Address` object because software sometimes behaves differently based on them.
     * For example, sales tax software may charge different amounts of sales tax
     * based on the postal code, and some software is only available in
     * certain states due to compliance reasons.
     *
     * For the remaining address components, the `Address` type provides the
     * `address_line_1` and `address_line_2` fields for free-form data entry.
     * These fields are free-form because the remaining address components have
     * too many variations around the world and typical software does not parse
     * these components. These fields enable users to enter anything they want.
     *
     * Note that, in the current implementation, all other `Address` type fields are blank.
     * These include `address_line_3`, `sublocality_2`, `sublocality_3`,
     * `administrative_district_level_2`, `administrative_district_level_3`,
     * `first_name`, `last_name`, and `organization`.
     *
     * When it comes to localization, the seller's language preferences
     * (see [Language preferences](https://developer.squareup.com/docs/locations-api#location-specific-and-seller-level-language-preferences))
     * are ignored for addresses. Even though Square products (such as Square Point of Sale
     * and the Seller Dashboard) mostly use a seller's language preference in
     * communication, when it comes to addresses, they will use English for a US address,
     * Japanese for an address in Japan, and so on.
     */
    billingAddress?: Address;
    /**
     * The first six digits of the card number, known as the Bank Identification Number (BIN). Only the Payments API
     *
     * @remarks
     * returns this field.
     */
    bin?: string;
    /**
     * The card's brand.
     */
    cardBrand?: string;
    /**
     * The type of the card.
     *
     * @remarks
     * The Card object includes this field only in response to Payments API calls.
     */
    cardType?: string;
    /**
     * The name of the cardholder.
     */
    cardholderName?: string;
    /**
     * The ID of a customer created using the Customers API to be associated with the card.
     */
    customerId?: string;
    /**
     * Indicates whether or not a card can be used for payments.
     */
    enabled?: boolean;
    /**
     * The expiration month of the associated card as an integer between 1 and 12.
     */
    expMonth?: number;
    /**
     * The four-digit year of the card's expiration date.
     */
    expYear?: number;
    /**
     * __Not currently set.__ Intended as a Square-assigned identifier, based
     *
     * @remarks
     * on the card number, to identify the card across multiple locations within a
     * single application.
     */
    fingerprint?: string;
    /**
     * Unique ID for this card. Generated by Square.
     */
    id?: string;
    /**
     * The last 4 digits of the card number.
     */
    last4?: string;
    /**
     * Indicates whether the Card is prepaid or not.
     *
     * @remarks
     * The Card object includes this field only in response to Payments API calls.
     */
    prepaidType?: string;
    /**
     * An optional user-defined reference ID that associates this card with
     *
     * @remarks
     * another entity in an external system. For example, a customer ID from an
     * external customer management system.
     */
    referenceId?: string;
    /**
     * Current version number of the card. Increments with each card update. Requests to update an
     *
     * @remarks
     * existing Card object will be rejected unless the version in the request matches the current
     * version for the Card.
     */
    version?: number;
}
