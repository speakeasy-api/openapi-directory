"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import errorresponse as shared_errorresponse
from ..shared import vault as shared_vault
from typing import Optional


@dataclasses.dataclass
class GetVaultsSecurity:
    
    connect_token: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'http', 'sub_type': 'bearer', 'field_name': 'Authorization' }})  
    

@dataclasses.dataclass
class GetVaultsRequest:
    
    filter: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'filter', 'style': 'form', 'explode': True }})
    r"""Filter the Vault collection based on Vault name using SCIM eq filter"""  
    

@dataclasses.dataclass
class GetVaultsResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    error_response: Optional[shared_errorresponse.ErrorResponse] = dataclasses.field(default=None)
    r"""Invalid or missing token"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    vaults: Optional[list[shared_vault.Vault]] = dataclasses.field(default=None)
    r"""OK"""  
    