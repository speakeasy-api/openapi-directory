// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package sdk

import (
	"net/http"
	"openapi/pkg/models/shared"
	"openapi/pkg/utils"
	"time"
)

// ServerList contains the list of servers available to the SDK
var ServerList = []string{
	"https://api.configcat.com",
}

// HTTPClient provides an interface for suplying the SDK with a custom HTTP client
type HTTPClient interface {
	Do(req *http.Request) (*http.Response, error)
}

// String provides a helper function to return a pointer to a string
func String(s string) *string { return &s }

// SDK - **Base API URL**: https://api.configcat.com
//
// If you prefer the swagger documentation, you can find it here: [Swagger UI](https://api.configcat.com/swagger).
//
// The purpose of this API is to access the ConfigCat platform programmatically.
// You can **Create**, **Read**, **Update** and **Delete** any entities like **Feature Flags, Configs, Environments** or **Products** within ConfigCat.
//
// The API is based on HTTP REST, uses resource-oriented URLs, status codes and supports JSON
// and JSON+HAL format. Do not use this API for accessing and evaluating feature flag values. Use the [SDKs instead](https://configcat.com/docs/sdk-reference/overview).
//
// # OpenAPI Specification
//
// The complete specification is publicly available here: [swagger.json](v1/swagger.json).
// You can use it to generate client libraries in various languages with [OpenAPI Generator](https://github.com/OpenAPITools/openapi-generator) or
// [Swagger Codegen](https://swagger.io/tools/swagger-codegen/) to interact with this API.
//
// # Authentication
// This API uses the [Basic HTTP Authentication Scheme](https://en.wikipedia.org/wiki/Basic_access_authentication).
//
// <!-- ReDoc-Inject: <security-definitions> -->
//
// # Throttling and rate limits
// All the rate limited API calls are returning information about the current rate limit period in the following HTTP headers:
//
// | Header | Description |
// | :- | :- |
// | X-Rate-Limit-Remaining | The maximum number of requests remaining in the current rate limit period. |
// | X-Rate-Limit-Reset     | The time	when the current rate limit period resets.						  |
//
// When the rate limit is exceeded by a request, the API returns with a `HTTP 429 - Too many requests` status along with a `Retry-After` HTTP header.
type SDK struct {
	// AuditLogs - Access audit log entries.
	AuditLogs *auditLogs
	// CodeReferences - With this endpoint you can upload Feature Flag and Setting usage references that will be shown on the ConfigCat Dashboard.
	//
	// <a href="https://configcat.com/docs/advanced/code-references/overview/" target="_blank" rel="noopener noreferrer">Here</a> you can read more about the concept of Code References.
	CodeReferences *codeReferences
	// Configs - With these endpoints you can manage your Configs.
	// This also can be used to manage [Feature Flags and Settings](#tag/Feature-Flags-and-Settings) and their
	// [served values](#tag/Feature-Flag-and-Setting-values) through this API.
	//
	// <a href="https://configcat.com/docs/main-concepts/#config" target="_blank" rel="noopener noreferrer">Here</a> you can read more about the concept of Configs.
	Configs *configs
	// Environments - With these endpoints you can update existing Environments or add new ones into your selected [Product](#tag/Products).
	//
	// <a href="https://configcat.com/docs/main-concepts/#environment" target="_blank" rel="noopener noreferrer">Here</a> you can read more about the concept of Environments.
	Environments *environments
	// FeatureFlagAndSettingValues - With these endpoints you can control how your existing Feature Flags and Settings should serve their values.
	// You can turn Feature Flags on or off, update Setting values and also add, remove or reorder Percentage and Targeting Rules.
	//
	// To determine which Feature Flag or Setting you want to work with you have to pass its `settingId`. It can be
	// obtained from the [Feature Flag & Setting](#tag/Feature-Flags-and-Settings) endpoints.
	//
	// You also have to specify in which Environment you want to change the served value configuration by its
	// `environmentId` which can be obtained from the [List Environments](#operation/get-environments) endpoint.
	FeatureFlagAndSettingValues *featureFlagAndSettingValues
	// FeatureFlagAndSettingValuesUsingSDKKey - With these endpoints you can control how your existing Feature Flags and Settings should serve their values.
	// You can turn Feature Flags on or off, update Setting values and also add, remove or change the order of Percentage and Targeting Rules.
	//
	// These endpoints are determining the Environment and Config by the <a target="_blank" rel="noopener noreferrer" href="https://app.configcat.com/sdkkey">SDK key</a> passed in
	// the `X-CONFIGCAT-SDKKEY` request header. To identify the desired Feature Flag or Setting to change,
	// you can use either its `settingId` or `key` attribute. You can get those attributes
	// from the [Feature Flag & Setting](#tag/Feature-Flags-and-Settings) endpoints.
	FeatureFlagAndSettingValuesUsingSDKKey *featureFlagAndSettingValuesUsingSDKKey
	// FeatureFlagsAndSettings - With these endpoints you can manage your Feature Flags or Settings within a Config.
	// However you can't use them for manipulating the values of your Feature Flags and Settings,
	// to do that please visit the [Feature Flag & Setting values using SDK Key](#tag/Feature-Flag-and-Setting-values-using-SDK-Key)
	// and [Feature Flag & Setting values](#tag/Feature-Flag-and-Setting-values) sections of the API.
	//
	// For using these endpoints, first you have to select which Config you want to work with by its `configId`
	// which can be obtained from the [List Configs](#operation/get-configs) endpoint.
	// Then you can use it to create new Feature Flags or to get information about existing ones.
	//
	// Then you can obtain the `settingId` or `key` of your desired Feature Flag or Setting
	// to use them for further operations in this API.
	//
	// <a href="https://configcat.com/docs/main-concepts/#setting" target="_blank" rel="noopener noreferrer">Here</a> you can read more about the concept of Settings.
	FeatureFlagsAndSettings *featureFlagsAndSettings
	IntegrationLinks        *integrationLinks
	// Me - Information about the current user.
	Me *me
	// Members - With these endpoints you can manage your Members.
	//
	// <a href="https://configcat.com/docs/advanced/team-collaboration" target="_blank" rel="noopener noreferrer">Here</a> you can read more about Team Collaboration.
	Members *members
	// Organizations - With these endpoints you can get useful information about your Organizations.
	// This also can be used to manage your [Products](#tag/Products).
	//
	// <a href="https://configcat.com/docs/organization/" target="_blank" rel="noopener noreferrer">Here</a> you can read more about the Organizations.
	Organizations *organizations
	// PermissionGroups - With these endpoints you can manage your Permission Groups.
	//
	// <a href="https://configcat.com/docs/advanced/team-collaboration#permissions--groups" target="_blank" rel="noopener noreferrer">Here</a> you can read more about Permissions.
	PermissionGroups *permissionGroups
	// Products - With these endpoints you can manage your Products.
	// This also can be used to manage [Environments](#tag/Environments), [Configs](#tag/Configs), [Tags](#tag/Tags) and [Permission Groups](#tag/Permission-Groups) through this API.
	//
	// <a href="https://configcat.com/docs/main-concepts/#product" target="_blank" rel="noopener noreferrer">Here</a> you can read more about the concept of Products.
	Products *products
	// SDKKeys - With these endpoints you can manage your SDK Keys.
	SDKKeys *sdkKeys
	// Segments - With these endpoints you can manage your Segments.
	// Segments allow you to group your users based on any of their properties. Define user segments and add them to multiple feature flags.
	Segments *segments
	// Tags - With these endpoints you can manage Tags. Tags are stored under a Product. You can  and add a Tag to a Feature Flag or Setting using the [Update Flag](#operation/update-setting) endpoint.
	Tags *tags

	// Non-idiomatic field names below are to namespace fields from the fields names above to avoid name conflicts
	_defaultClient  HTTPClient
	_securityClient HTTPClient
	_security       *shared.Security
	_serverURL      string
	_language       string
	_sdkVersion     string
	_genVersion     string
}

type SDKOption func(*SDK)

// WithServerURL allows the overriding of the default server URL
func WithServerURL(serverURL string) SDKOption {
	return func(sdk *SDK) {
		sdk._serverURL = serverURL
	}
}

// WithTemplatedServerURL allows the overriding of the default server URL with a templated URL populated with the provided parameters
func WithTemplatedServerURL(serverURL string, params map[string]string) SDKOption {
	return func(sdk *SDK) {
		if params != nil {
			serverURL = utils.ReplaceParameters(serverURL, params)
		}

		sdk._serverURL = serverURL
	}
}

// WithClient allows the overriding of the default HTTP client used by the SDK
func WithClient(client HTTPClient) SDKOption {
	return func(sdk *SDK) {
		sdk._defaultClient = client
	}
}

// WithSecurity configures the SDK to use the provided security details
func WithSecurity(security shared.Security) SDKOption {
	return func(sdk *SDK) {
		sdk._security = &security
	}
}

// New creates a new instance of the SDK with the provided options
func New(opts ...SDKOption) *SDK {
	sdk := &SDK{
		_language:   "go",
		_sdkVersion: "0.0.1",
		_genVersion: "internal",
	}
	for _, opt := range opts {
		opt(sdk)
	}

	// Use WithClient to override the default client if you would like to customize the timeout
	if sdk._defaultClient == nil {
		sdk._defaultClient = &http.Client{Timeout: 60 * time.Second}
	}
	if sdk._securityClient == nil {
		if sdk._security != nil {
			sdk._securityClient = utils.ConfigureSecurityClient(sdk._defaultClient, sdk._security)
		} else {
			sdk._securityClient = sdk._defaultClient
		}
	}

	if sdk._serverURL == "" {
		sdk._serverURL = ServerList[0]
	}

	sdk.AuditLogs = newAuditLogs(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.CodeReferences = newCodeReferences(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.Configs = newConfigs(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.Environments = newEnvironments(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.FeatureFlagAndSettingValues = newFeatureFlagAndSettingValues(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.FeatureFlagAndSettingValuesUsingSDKKey = newFeatureFlagAndSettingValuesUsingSDKKey(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.FeatureFlagsAndSettings = newFeatureFlagsAndSettings(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.IntegrationLinks = newIntegrationLinks(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.Me = newMe(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.Members = newMembers(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.Organizations = newOrganizations(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.PermissionGroups = newPermissionGroups(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.Products = newProducts(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.SDKKeys = newSDKKeys(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.Segments = newSegments(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.Tags = newTags(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	return sdk
}
