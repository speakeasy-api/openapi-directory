/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi;

import org.openapis.openapi.utils.HTTPClient;
import org.openapis.openapi.utils.SpeakeasyHTTPClient;

/**
 * Docker Hub is a service provided by Docker for finding and sharing container
 * images with your team.
 * 
 * It is the world's largest library and community for container images.
 * 
 * In addition to the [Docker Hub UI](https://docs.docker.com/docker-hub/) and [Docker Hub CLI tool](https://github.com/docker/hub-tool#readme) (currently experimental),
 * 
 * Docker provides an API that allows you to interact with Docker Hub.
 * 
 * Browse through the Docker Hub API documentation to explore the supported endpoints.
 * 
 */
public class SDK {
	/**
	 * SERVERS contains the list of server urls available to the SDK.
	 */
	public static final String[] SERVERS = {
        "https://hub.docker.com/",
        "https://docker.com/{version}",
	};
  	
    /**
     * The Personal Access Token endpoints lets you manage personal access tokens. For more 
     * information, see [Access Tokens](https://docs.docker.com/docker-hub/access-tokens/).
     * 
     * You can use a personal access token instead of a password in the [Docker CLI](https://docs.docker.com/engine/reference/commandline/cli/) 
     * or in the [Create an authentication token](#operation/PostUsersLogin) route to obtain a bearer 
     * token.
     * 
     * ### Scopes
     * 
     * For each scope grouping (in this case "repo"), you only need to define 1 scope as any lower 
     * scopes are assumed. For example: If you define `repo:write`, the API assumes the scope of both 
     * `repo:read` *and* `repo:public_read` as well. If you were to define both `repo:write` *and* 
     * `repo:read`, then `repo:read` is assumed by `repo:write` and ignored.
     * 
     * ***Treat your personal access token like your password and keep it secret. You cannot retrieve 
     * your token after it is generated.***
     * 
     */
    public AccessTokens accessTokens;
    /**
     * The Audit Logs API endpoints allow you to query audit log events across a
     * namespace.
     * 
     * For more information, see [Audit Log](https://docs.docker.com/docker-hub/audit-log/)
     * 
     */
    public AuditLogs auditLogs;
    /**
     * Most Docker Hub API endpoints require you to authenticate using your
     * Docker credentials before using them.
     * 
     * Additionally, similar to the Docker Hub UI features, API endpoint responses may vary depending 
     * on your plan (Free, Pro, or Team) and your account's permissions.
     * 
     * To learn more about the features available in each plan and to upgrade your existing plan, see [Docker Pricing](https://www.docker.com/pricing).
     * 
     */
    public Authentication authentication;
    /**
     * The Advanced Image Management API endpoints allow you to manage Docker
     * images across all repositories.
     * 
     * For more information, see [Advanced Image Management dashboard](https://docs.docker.com/docker-hub/image-management/).
     * 
     */
    public Images images;
    /**
     * The Org Settings API endpoints allow you to manage your organization's
     * settings.
     * 
     */
    public OrgSettings orgSettings;
    /**
     * The repository endpoints allow you to manage your repository's
     * configuration like description.
     * 
     */
    public Repositories repositories;
    /**
     * SCIM is a provisioning system that lets you manage users within your identity provider (IdP).
     * For more information, see [System for Cross-domain Identity management](https://docs.docker.com/docker-hub/scim/).
     * 
     */
    public Scim scim;	

	private HTTPClient _defaultClient;
	private HTTPClient _securityClient;
	
	private String _serverUrl;
	private String _language = "java";
	private String _sdkVersion = "0.0.1";
	private String _genVersion = "internal";
	/**
	 * The Builder class allows the configuration of a new instance of the SDK.
	 */
	public static class Builder {
		private HTTPClient client;
		
		private String serverUrl;
		private java.util.Map<String, String> params = new java.util.HashMap<String, String>();

		private Builder() {
		}

		/**
		 * Allows the default HTTP client to be overridden with a custom implementation.
		 * @param client The HTTP client to use for all requests.
		 * @return The builder instance.
		 */
		public Builder setClient(HTTPClient client) {
			this.client = client;
			return this;
		}
		
		/**
		 * Allows the overriding of the default server URL.
		 * @param serverUrl The server URL to use for all requests.
		 * @return The builder instance.
		 */
		public Builder setServerURL(String serverUrl) {
			this.serverUrl = serverUrl;
			return this;
		}
		
		/**
		 * Allows the overriding of the default server URL  with a templated URL populated with the provided parameters.
		 * @param serverUrl The server URL to use for all requests.
		 * @param params The parameters to use when templating the URL.
		 * @return The builder instance.
		 */
		public Builder setServerURL(String serverUrl, java.util.Map<String, String> params) {
			this.serverUrl = serverUrl;
			this.params = params;
			return this;
		}
		
		/**
		 * Builds a new instance of the SDK.
		 * @return The SDK instance.
		 * @throws Exception Thrown if the SDK could not be built.
		 */
		public SDK build() throws Exception {
			return new SDK(this.client, this.serverUrl, this.params);
		}
	}

	/**
	 * Get a new instance of the SDK builder to configure a new instance of the SDK.
	 * @return The SDK builder instance.
	 */
	public static Builder builder() {
		return new Builder();
	}

	private SDK(HTTPClient client, String serverUrl, java.util.Map<String, String> params) throws Exception {
		this._defaultClient = client;
		
		if (this._defaultClient == null) {
			this._defaultClient = new SpeakeasyHTTPClient();
		}
		
		if (this._securityClient == null) {
			this._securityClient = this._defaultClient;
		}

		if (serverUrl != null && !serverUrl.isBlank()) {
			this._serverUrl = org.openapis.openapi.utils.Utils.templateUrl(serverUrl, params);
		}
		
		if (this._serverUrl == null) {
			this._serverUrl = SERVERS[0];
		}

		if (this._serverUrl.endsWith("/")) {
            this._serverUrl = this._serverUrl.substring(0, this._serverUrl.length() - 1);
        }

		
		
		this.accessTokens = new AccessTokens(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.auditLogs = new AuditLogs(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.authentication = new Authentication(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.images = new Images(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.orgSettings = new OrgSettings(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.repositories = new Repositories(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.scim = new Scim(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
	}
}