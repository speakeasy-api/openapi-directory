/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

public class Recurring {
    /**
     * The type of recurring contract to be used.
     * Possible values:
     * * `ONECLICK` \u2013 Payment details can be used to initiate a one-click payment, where the shopper enters the [card security code (CVC/CVV)](https://docs.adyen.com/payments-fundamentals/payment-glossary#card-security-code-cvc-cvv-cid).
     * * `RECURRING` \u2013 Payment details can be used without the card security code to initiate [card-not-present transactions](https://docs.adyen.com/payments-fundamentals/payment-glossary#card-not-present-cnp).
     * * `ONECLICK,RECURRING` \u2013 Payment details can be used regardless of whether the shopper is on your site or not.
     * * `PAYOUT` \u2013 Payment details can be used to [make a payout](https://docs.adyen.com/online-payments/online-payouts).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("contract")
    public RecurringContractEnum contract;

    public Recurring withContract(RecurringContractEnum contract) {
        this.contract = contract;
        return this;
    }
    
    /**
     * A descriptive name for this detail.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("recurringDetailName")
    public String recurringDetailName;

    public Recurring withRecurringDetailName(String recurringDetailName) {
        this.recurringDetailName = recurringDetailName;
        return this;
    }
    
    /**
     * Date after which no further authorisations shall be performed. Only for 3D Secure 2.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("recurringExpiry")
    public OffsetDateTime recurringExpiry;

    public Recurring withRecurringExpiry(OffsetDateTime recurringExpiry) {
        this.recurringExpiry = recurringExpiry;
        return this;
    }
    
    /**
     * Minimum number of days between authorisations. Only for 3D Secure 2.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("recurringFrequency")
    public String recurringFrequency;

    public Recurring withRecurringFrequency(String recurringFrequency) {
        this.recurringFrequency = recurringFrequency;
        return this;
    }
    
    /**
     * The name of the token service.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tokenService")
    public RecurringTokenServiceEnum tokenService;

    public Recurring withTokenService(RecurringTokenServiceEnum tokenService) {
        this.tokenService = tokenService;
        return this;
    }
    
    public Recurring(){}
}
