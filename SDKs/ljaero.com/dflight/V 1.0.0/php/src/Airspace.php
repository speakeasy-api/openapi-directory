<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Airspace 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Retrieve all requested types of airspace located within given distance of location.
     * 
     * Retrieve selected types of airspace existing within given distance from a point. Request body parameters are:
     * * latitude:  WGS84 latitude coordinate of your selected point, in decimal degrees
     * * longitude:  WGS84 longitude coordinate of your selected point, in decimal degrees
     * * distance:  distance in meters (max allowed value is 25000)
     * * asptypes:  list of one or more airspace types you wish to retrieve. Allowed values are 'CAS', 'SUA', 'MAA', and 'MTR'.
     * 
     * Successful requests return a list of GeoJSON FeatureCollections, one for each Airspace type indicated in the request. Within each feature collection, there will be a separate Feature for each Airspace instance found. All Features will include a property indicating the *airspace_type*. Additional properties for each *airspace_type* are as follows:
     * * CAS (Controlled Airspace)
     *     - *name*
     *     - *cas_class*: B, C, D, or E2
     *     - *floor*: integer value in ft MSL
     *     - *ceiling*: integer value in ft MSL
     *     - *lannc*: true/false indicating whether or not authorization for this airspace may be obtained via LAANC
     * * SUA (Special Use Airspace)
     *     - *name*
     *     - *sua_type*: AA = Alert Area, MOA = Military Operations Area, NSA = National Security Area, PA = Prohibited Area, RA = Restricted Area, WA = Warning Area
     *     - *floor*: lower limit of the airspace
     *     - *floor_uom*: unit of measure used for the numeric floor value: FT (feet) or FL (flight level)
     *     - *floor_ref*: reference level used for the numeric floor value: AGL, MSL, or STD (standard atmosphere, used for flight level values)
     *     - *ceiling*: upper limit of the airspace
     *     - *ceiling_uom*: unit of measure used for the numeric floor value: FT (feet) or FL (flight level)
     *     - *ceiling_ref*: reference level used for the numeric ceiling value: AGL, MSL, or STD (standard atmosphere, used for flight level values)
     *     - *ceiling_ref*: reference level used for the numeric ceiling value: AGL, MSL, or STD (standard atmosphere, used for flight level values)
     *     - *schedule*: default activation days/times (other times by NOTAM)
     * * MAA (Miscellaneous Activity Area)
     *     - *name*
     *     - *maa_type*: one of the following - ULTRALIGHT, PARACHUTE JUMP AREA, AEROBATIC PRACTICE, GLIDER, HANG GLIDER, SPACE LAUNCH ACTIVITY
     *     - *use_times*: textual description of days/times when activity in the area should be expected
     * * MTR (Military Training Route)
     *     - *name*
     *     - *use_times*: textual description of days/times when MTR is active/hot
     *     - *terrain_following*: boolean value indicating whether terrain following activity occurs on the route
     *     - *max_extent_nm*: maximum distance that aircraft can deviate from route centerline
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AspByDistanceUsV1AirspaceDistanceQueryPostRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\AspByDistanceUsV1AirspaceDistanceQueryPostResponse
     */
	public function aspByDistanceUsV1AirspaceDistanceQueryPost(
        \OpenAPI\OpenAPI\Models\Operations\AspByDistanceUsV1AirspaceDistanceQueryPostRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\AspByDistanceUsV1AirspaceDistanceQueryPostResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/us/v1/airspace/distance-query');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "airspaceByDistance", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AspByDistanceUsV1AirspaceDistanceQueryPostResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->airspaceDistanceResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\AirspaceDistanceResponse', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 422) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->httpValidationError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\HTTPValidationError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieve all requested types of airspace located within given GeoJSON Polygon.
     * 
     * Retrieve selected types of airspace located within given area. Request body parameters are:
     * * poly:  [GeoJSON Polygon](https://www.rfc-editor.org/rfc/rfc7946.html#appendix-A) defining the area. Max allowed area is 1000 km^2.
     * * asptypes:  list of one or more airspace types you wish to retrieve. Allowed values are 'CAS', 'SUA', 'MAA', and 'MTR'.
     * 
     * Successful requests return a list of GeoJSON FeatureCollections, one for each Airspace type indicated in the request. Within each feature collection, there will be a separate Feature for each Airspace instance found. All Features will include a property indicating the *airspace_type*. Additional properties for each *airspace_type* are as follows:
     * * CAS (Controlled Airspace)
     *     - *name*
     *     - *cas_class*: B, C, D, or E2
     *     - *floor*: integer value in ft MSL
     *     - *ceiling*: integer value in ft MSL
     *     - *lannc*: true/false indicating whether or not authorization for this airspace may be obtained via LAANC
     * * SUA (Special Use Airspace)
     *     - *name*
     *     - *sua_type*: AA = Alert Area, MOA = Military Operations Area, NSA = National Security Area, PA = Prohibited Area, RA = Restricted Area, WA = Warning Area
     *     - *floor*: lower limit of the airspace
     *     - *floor_uom*: unit of measure used for the numeric floor value: FT (feet) or FL (flight level)
     *     - *floor_ref*: reference level used for the numeric floor value: AGL, MSL, or STD (standard atmosphere, used for flight level values)
     *     - *ceiling*: upper limit of the airspace
     *     - *ceiling_uom*: unit of measure used for the numeric floor value: FT (feet) or FL (flight level)
     *     - *ceiling_ref*: reference level used for the numeric ceiling value: AGL, MSL, or STD (standard atmosphere, used for flight level values)
     *     - *schedule*: default activation days/times (other times by NOTAM)
     * * MAA (Miscellaneous Activity Area)
     *     - *name*
     *     - *maa_type*: one of the following - ULTRALIGHT, PARACHUTE JUMP AREA, AEROBATIC PRACTICE, GLIDER, HANG GLIDER, SPACE LAUNCH ACTIVITY
     *     - *use_times*: textual description of days/times when activity in the area should be expected
     * * MTR (Military Training Route)
     *     - *name*
     *     - *use_times*: textual description of days/times when MTR is active/hot
     *     - *terrain_following*: boolean value indicating whether terrain following activity occurs on the route
     *     - *max_extent_nm*: maximum distance that aircraft can deviate from route centerline
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AspByPolyUsV1AirspacePolygonQueryPostRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\AspByPolyUsV1AirspacePolygonQueryPostResponse
     */
	public function aspByPolyUsV1AirspacePolygonQueryPost(
        \OpenAPI\OpenAPI\Models\Operations\AspByPolyUsV1AirspacePolygonQueryPostRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\AspByPolyUsV1AirspacePolygonQueryPostResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/us/v1/airspace/polygon-query');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "airspaceByPolygon", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AspByPolyUsV1AirspacePolygonQueryPostResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->airspacePolyResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\AirspacePolyResponse', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 422) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->httpValidationError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\HTTPValidationError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieve all requested types of airspace traversed by route.
     * 
     * Retrieve selected types of airspace traversed by route. Request body parameters are:
     * * route:  [GeoJSON Linestring](https://www.rfc-editor.org/rfc/rfc7946.html#appendix-A) defining the route. Max allowed length is 50 km.
     * * asptypes:  list of one or more airspace types you wish to retrieve. Allowed values are 'CAS', 'SUA', 'MAA', and 'MTR'.
     * 
     * Successful requests return a list of GeoJSON FeatureCollections, one for each Airspace type indicated in the request. Within each feature collection, there will be a separate Feature for each Airspace instance found. All Features will include a property indicating the *airspace_type*. Additional properties for each *airspace_type* are as follows:
     * * CAS (Controlled Airspace)
     *     - *name*
     *     - *cas_class*: B, C, D, or E2
     *     - *floor*: integer value in ft MSL
     *     - *ceiling*: integer value in ft MSL
     *     - *lannc*: true/false indicating whether or not authorization for this airspace may be obtained via LAANC
     * * SUA (Special Use Airspace)
     *     - *name*
     *     - *sua_type*: AA = Alert Area, MOA = Military Operations Area, NSA = National Security Area, PA = Prohibited Area, RA = Restricted Area, WA = Warning Area
     *     - *floor*: lower limit of the airspace
     *     - *floor_uom*: unit of measure used for the numeric floor value: FT (feet) or FL (flight level)
     *     - *floor_ref*: reference level used for the numeric floor value: AGL, MSL, or STD (standard atmosphere, used for flight level values)
     *     - *ceiling*: upper limit of the airspace
     *     - *ceiling_uom*: unit of measure used for the numeric floor value: FT (feet) or FL (flight level)
     *     - *ceiling_ref*: reference level used for the numeric ceiling value: AGL, MSL, or STD (standard atmosphere, used for flight level values)
     *     - *schedule*: default activation days/times (other times by NOTAM)
     * * MAA (Miscellaneous Activity Area)
     *     - *name*
     *     - *maa_type*: one of the following - ULTRALIGHT, PARACHUTE JUMP AREA, AEROBATIC PRACTICE, GLIDER, HANG GLIDER, SPACE LAUNCH ACTIVITY
     *     - *use_times*: textual description of days/times when activity in the area should be expected
     * * MTR (Military Training Route)
     *     - *name*
     *     - *use_times*: textual description of days/times when MTR is active/hot
     *     - *terrain_following*: boolean value indicating whether terrain following activity occurs on the route
     *     - *max_extent_nm*: maximum distance that aircraft can deviate from route centerline
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AspByRouteUsV1AirspaceRouteQueryPostRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\AspByRouteUsV1AirspaceRouteQueryPostResponse
     */
	public function aspByRouteUsV1AirspaceRouteQueryPost(
        \OpenAPI\OpenAPI\Models\Operations\AspByRouteUsV1AirspaceRouteQueryPostRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\AspByRouteUsV1AirspaceRouteQueryPostResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/us/v1/airspace/route-query');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "airspaceByRoute", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AspByRouteUsV1AirspaceRouteQueryPostResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->airspaceRouteResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\AirspaceRouteResponse', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 422) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->httpValidationError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\HTTPValidationError', 'json');
            }
        }

        return $response;
    }
}