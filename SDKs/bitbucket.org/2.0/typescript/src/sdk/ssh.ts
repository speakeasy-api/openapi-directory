/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

/**
 * The SSH resource allows you to manage SSH keys.
 *
 * @remarks
 *
 */
export class Ssh {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Delete a SSH key
   *
   * @remarks
   * Deletes a specific SSH public key from a user's account
   *
   * Example:
   * ```
   * $ curl -X DELETE https://api.bitbucket.org/2.0/users/{ed08f5e1-605b-4f4a-aee4-6c97628a673e}/ssh-keys/{b15b6026-9c02-4626-b4ad-b905f99f763a}
   * ```
   */
  deleteUsersSelectedUserSshKeysKeyId(
    req: operations.DeleteUsersSelectedUserSshKeysKeyIdRequest,
    security: operations.DeleteUsersSelectedUserSshKeysKeyIdSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DeleteUsersSelectedUserSshKeysKeyIdResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DeleteUsersSelectedUserSshKeysKeyIdRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/users/{selected_user}/ssh-keys/{key_id}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.DeleteUsersSelectedUserSshKeysKeyIdSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DeleteUsersSelectedUserSshKeysKeyIdResponse =
        new operations.DeleteUsersSelectedUserSshKeysKeyIdResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case [204, 403].includes(httpRes?.status):
          break;
        case [400, 404].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.error = utils.objectToClass(httpRes?.data);
          }
          break;
      }

      return res;
    });
  }

  /**
   * List SSH keys
   *
   * @remarks
   * Returns a paginated list of the user's SSH public keys.
   *
   * Example:
   *
   * ```
   * $ curl https://api.bitbucket.org/2.0/users/{ed08f5e1-605b-4f4a-aee4-6c97628a673e}/ssh-keys
   * {
   *     "page": 1,
   *     "pagelen": 10,
   *     "size": 1,
   *     "values": [
   *         {
   *             "comment": "user@myhost",
   *             "created_on": "2018-03-14T13:17:05.196003+00:00",
   *             "key": "ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIKqP3Cr632C2dNhhgKVcon4ldUSAeKiku2yP9O9/bDtY",
   *             "label": "",
   *             "last_used": "2018-03-20T13:18:05.196003+00:00",
   *             "links": {
   *                 "self": {
   *                     "href": "https://api.bitbucket.org/2.0/users/{ed08f5e1-605b-4f4a-aee4-6c97628a673e}/ssh-keys/b15b6026-9c02-4626-b4ad-b905f99f763a"
   *                 }
   *             },
   *             "owner": {
   *                 "display_name": "Mark Adams",
   *                 "links": {
   *                     "avatar": {
   *                         "href": "https://bitbucket.org/account/markadams-atl/avatar/32/"
   *                     },
   *                     "html": {
   *                         "href": "https://bitbucket.org/markadams-atl/"
   *                     },
   *                     "self": {
   *                         "href": "https://api.bitbucket.org/2.0/users/{ed08f5e1-605b-4f4a-aee4-6c97628a673e}"
   *                     }
   *                 },
   *                 "type": "user",
   *                 "username": "markadams-atl",
   *                 "nickname": "markadams-atl",
   *                 "uuid": "{d7dd0e2d-3994-4a50-a9ee-d260b6cefdab}"
   *             },
   *             "type": "ssh_key",
   *             "uuid": "{b15b6026-9c02-4626-b4ad-b905f99f763a}"
   *         }
   *     ]
   * }
   * ```
   */
  getUsersSelectedUserSshKeys(
    req: operations.GetUsersSelectedUserSshKeysRequest,
    security: operations.GetUsersSelectedUserSshKeysSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetUsersSelectedUserSshKeysResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetUsersSelectedUserSshKeysRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/users/{selected_user}/ssh-keys",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GetUsersSelectedUserSshKeysSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetUsersSelectedUserSshKeysResponse =
        new operations.GetUsersSelectedUserSshKeysResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.paginatedSshUserKeys = utils.objectToClass(
              httpRes?.data,
              shared.PaginatedSshUserKeys
            );
          }
          break;
        case httpRes?.status == 403:
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.error = utils.objectToClass(httpRes?.data);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get a SSH key
   *
   * @remarks
   * Returns a specific SSH public key belonging to a user.
   *
   * Example:
   * ```
   * $ curl https://api.bitbucket.org/2.0/users/{ed08f5e1-605b-4f4a-aee4-6c97628a673e}/ssh-keys/{fbe4bbab-f6f7-4dde-956b-5c58323c54b3}
   *
   * {
   *     "comment": "user@myhost",
   *     "created_on": "2018-03-14T13:17:05.196003+00:00",
   *     "key": "ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIKqP3Cr632C2dNhhgKVcon4ldUSAeKiku2yP9O9/bDtY",
   *     "label": "",
   *     "last_used": "2018-03-20T13:18:05.196003+00:00",
   *     "links": {
   *         "self": {
   *             "href": "https://api.bitbucket.org/2.0/users/{ed08f5e1-605b-4f4a-aee4-6c97628a673e}/ssh-keys/b15b6026-9c02-4626-b4ad-b905f99f763a"
   *         }
   *     },
   *     "owner": {
   *         "display_name": "Mark Adams",
   *         "links": {
   *             "avatar": {
   *                 "href": "https://bitbucket.org/account/markadams-atl/avatar/32/"
   *             },
   *             "html": {
   *                 "href": "https://bitbucket.org/markadams-atl/"
   *             },
   *             "self": {
   *                 "href": "https://api.bitbucket.org/2.0/users/{ed08f5e1-605b-4f4a-aee4-6c97628a673e}"
   *             }
   *         },
   *         "type": "user",
   *         "username": "markadams-atl",
   *         "nickname": "markadams-atl",
   *         "uuid": "{d7dd0e2d-3994-4a50-a9ee-d260b6cefdab}"
   *     },
   *     "type": "ssh_key",
   *     "uuid": "{b15b6026-9c02-4626-b4ad-b905f99f763a}"
   * }
   * ```
   */
  getUsersSelectedUserSshKeysKeyId(
    req: operations.GetUsersSelectedUserSshKeysKeyIdRequest,
    security: operations.GetUsersSelectedUserSshKeysKeyIdSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetUsersSelectedUserSshKeysKeyIdResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetUsersSelectedUserSshKeysKeyIdRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/users/{selected_user}/ssh-keys/{key_id}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GetUsersSelectedUserSshKeysKeyIdSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetUsersSelectedUserSshKeysKeyIdResponse =
        new operations.GetUsersSelectedUserSshKeysKeyIdResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.sshAccountKey = utils.objectToClass(httpRes?.data);
          }
          break;
        case httpRes?.status == 403:
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.error = utils.objectToClass(httpRes?.data);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Add a new SSH key
   *
   * @remarks
   * Adds a new SSH public key to the specified user account and returns the resulting key.
   *
   * Example:
   * ```
   * $ curl -X POST -H "Content-Type: application/json" -d '{"key": "ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIKqP3Cr632C2dNhhgKVcon4ldUSAeKiku2yP9O9/bDtY user@myhost"}' https://api.bitbucket.org/2.0/users/{ed08f5e1-605b-4f4a-aee4-6c97628a673e}/ssh-keys
   *
   * {
   *     "comment": "user@myhost",
   *     "created_on": "2018-03-14T13:17:05.196003+00:00",
   *     "key": "ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIKqP3Cr632C2dNhhgKVcon4ldUSAeKiku2yP9O9/bDtY",
   *     "label": "",
   *     "last_used": "2018-03-20T13:18:05.196003+00:00",
   *     "links": {
   *         "self": {
   *             "href": "https://api.bitbucket.org/2.0/users/{ed08f5e1-605b-4f4a-aee4-6c97628a673e}/ssh-keys/b15b6026-9c02-4626-b4ad-b905f99f763a"
   *         }
   *     },
   *     "owner": {
   *         "display_name": "Mark Adams",
   *         "links": {
   *             "avatar": {
   *                 "href": "https://bitbucket.org/account/markadams-atl/avatar/32/"
   *             },
   *             "html": {
   *                 "href": "https://bitbucket.org/markadams-atl/"
   *             },
   *             "self": {
   *                 "href": "https://api.bitbucket.org/2.0/users/{ed08f5e1-605b-4f4a-aee4-6c97628a673e}"
   *             }
   *         },
   *         "type": "user",
   *         "username": "markadams-atl",
   *         "nickname": "markadams-atl",
   *         "uuid": "{d7dd0e2d-3994-4a50-a9ee-d260b6cefdab}"
   *     },
   *     "type": "ssh_key",
   *     "uuid": "{b15b6026-9c02-4626-b4ad-b905f99f763a}"
   * }
   * ```
   */
  postUsersSelectedUserSshKeys(
    req: operations.PostUsersSelectedUserSshKeysRequest,
    security: operations.PostUsersSelectedUserSshKeysSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.PostUsersSelectedUserSshKeysResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PostUsersSelectedUserSshKeysRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/users/{selected_user}/ssh-keys",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.PostUsersSelectedUserSshKeysSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PostUsersSelectedUserSshKeysResponse =
        new operations.PostUsersSelectedUserSshKeysResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 201:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.sshAccountKey = utils.objectToClass(httpRes?.data);
          }
          break;
        case [400, 404].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.error = utils.objectToClass(httpRes?.data);
          }
          break;
        case httpRes?.status == 403:
          break;
      }

      return res;
    });
  }

  /**
   * Update a SSH key
   *
   * @remarks
   * Updates a specific SSH public key on a user's account
   *
   * Note: Only the 'comment' field can be updated using this API. To modify the key or comment values, you must delete and add the key again.
   *
   * Example:
   * ```
   * $ curl -X PUT -H "Content-Type: application/json" -d '{"label": "Work key"}' https://api.bitbucket.org/2.0/users/{ed08f5e1-605b-4f4a-aee4-6c97628a673e}/ssh-keys/{b15b6026-9c02-4626-b4ad-b905f99f763a}
   *
   * {
   *     "comment": "",
   *     "created_on": "2018-03-14T13:17:05.196003+00:00",
   *     "key": "ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIKqP3Cr632C2dNhhgKVcon4ldUSAeKiku2yP9O9/bDtY",
   *     "label": "Work key",
   *     "last_used": "2018-03-20T13:18:05.196003+00:00",
   *     "links": {
   *         "self": {
   *             "href": "https://api.bitbucket.org/2.0/users/{ed08f5e1-605b-4f4a-aee4-6c97628a673e}/ssh-keys/b15b6026-9c02-4626-b4ad-b905f99f763a"
   *         }
   *     },
   *     "owner": {
   *         "display_name": "Mark Adams",
   *         "links": {
   *             "avatar": {
   *                 "href": "https://bitbucket.org/account/markadams-atl/avatar/32/"
   *             },
   *             "html": {
   *                 "href": "https://bitbucket.org/markadams-atl/"
   *             },
   *             "self": {
   *                 "href": "https://api.bitbucket.org/2.0/users/{ed08f5e1-605b-4f4a-aee4-6c97628a673e}"
   *             }
   *         },
   *         "type": "user",
   *         "username": "markadams-atl",
   *         "nickname": "markadams-atl",
   *         "uuid": "{d7dd0e2d-3994-4a50-a9ee-d260b6cefdab}"
   *     },
   *     "type": "ssh_key",
   *     "uuid": "{b15b6026-9c02-4626-b4ad-b905f99f763a}"
   * }
   * ```
   */
  putUsersSelectedUserSshKeysKeyId(
    req: operations.PutUsersSelectedUserSshKeysKeyIdRequest,
    security: operations.PutUsersSelectedUserSshKeysKeyIdSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.PutUsersSelectedUserSshKeysKeyIdResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PutUsersSelectedUserSshKeysKeyIdRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/users/{selected_user}/ssh-keys/{key_id}",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.PutUsersSelectedUserSshKeysKeyIdSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "put",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PutUsersSelectedUserSshKeysKeyIdResponse =
        new operations.PutUsersSelectedUserSshKeysKeyIdResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.sshAccountKey = utils.objectToClass(httpRes?.data);
          }
          break;
        case [400, 404].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.error = utils.objectToClass(httpRes?.data);
          }
          break;
        case httpRes?.status == 403:
          break;
      }

      return res;
    });
  }
}
