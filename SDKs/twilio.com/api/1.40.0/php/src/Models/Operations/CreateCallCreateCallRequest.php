<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Operations;

use \OpenAPI\OpenAPI\Utils\SpeakeasyMetadata;
class CreateCallCreateCallRequest
{
    /**
     * The SID of the Application resource that will handle the call, if the call will be handled by an application.
     * 
     * @var ?string $applicationSid
     */
	#[SpeakeasyMetadata('form:name=ApplicationSid')]
    public ?string $applicationSid = null;
    
    /**
     * Select whether to perform answering machine detection in the background. Default, blocks the execution of the call until Answering Machine Detection is completed. Can be: `true` or `false`.
     * 
     * @var ?string $asyncAmd
     */
	#[SpeakeasyMetadata('form:name=AsyncAmd')]
    public ?string $asyncAmd = null;
    
    /**
     * The URL that we should call using the `async_amd_status_callback_method` to notify customer application whether the call was answered by human, machine or fax.
     * 
     * @var ?string $asyncAmdStatusCallback
     */
	#[SpeakeasyMetadata('form:name=AsyncAmdStatusCallback')]
    public ?string $asyncAmdStatusCallback = null;
    
    /**
     * The HTTP method we should use when calling the `async_amd_status_callback` URL. Can be: `GET` or `POST` and the default is `POST`.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Operations\CreateCallCreateCallRequestAsyncAmdStatusCallbackMethodEnum $asyncAmdStatusCallbackMethod
     */
	#[SpeakeasyMetadata('form:name=AsyncAmdStatusCallbackMethod')]
    public ?CreateCallCreateCallRequestAsyncAmdStatusCallbackMethodEnum $asyncAmdStatusCallbackMethod = null;
    
    /**
     * The SID of a BYOC (Bring Your Own Carrier) trunk to route this call with. Note that `byoc` is only meaningful when `to` is a phone number; it will otherwise be ignored. (Beta)
     * 
     * @var ?string $byoc
     */
	#[SpeakeasyMetadata('form:name=Byoc')]
    public ?string $byoc = null;
    
    /**
     * The Reason for the outgoing call. Use it to specify the purpose of the call that is presented on the called party's phone. (Branded Calls Beta)
     * 
     * @var ?string $callReason
     */
	#[SpeakeasyMetadata('form:name=CallReason')]
    public ?string $callReason = null;
    
    /**
     * A token string needed to invoke a forwarded call. A call_token is generated when an incoming call is received on a Twilio number. Pass an incoming call's call_token value to a forwarded call via the call_token parameter when creating a new call. A forwarded call should bear the same CallerID of the original incoming call.
     * 
     * @var ?string $callToken
     */
	#[SpeakeasyMetadata('form:name=CallToken')]
    public ?string $callToken = null;
    
    /**
     * The phone number, SIP address, or Client identifier that made this call. Phone numbers are in [E.164 format](https://wwnw.twilio.com/docs/glossary/what-e164) (e.g., +16175551212). SIP addresses are formatted as `name@company.com`.
     * 
     * @var ?string $callerId
     */
	#[SpeakeasyMetadata('form:name=CallerId')]
    public ?string $callerId = null;
    
    /**
     * The HTTP method that we should use to request the `fallback_url`. Can be: `GET` or `POST` and the default is `POST`. If an `application_sid` parameter is present, this parameter is ignored.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Operations\CreateCallCreateCallRequestFallbackMethodEnum $fallbackMethod
     */
	#[SpeakeasyMetadata('form:name=FallbackMethod')]
    public ?CreateCallCreateCallRequestFallbackMethodEnum $fallbackMethod = null;
    
    /**
     * The URL that we call using the `fallback_method` if an error occurs when requesting or executing the TwiML at `url`. If an `application_sid` parameter is present, this parameter is ignored.
     * 
     * @var ?string $fallbackUrl
     */
	#[SpeakeasyMetadata('form:name=FallbackUrl')]
    public ?string $fallbackUrl = null;
    
    /**
     * The phone number or client identifier to use as the caller id. If using a phone number, it must be a Twilio number or a Verified [outgoing caller id](https://www.twilio.com/docs/voice/api/outgoing-caller-ids) for your account. If the `to` parameter is a phone number, `From` must also be a phone number.
     * 
     * @var string $from
     */
	#[SpeakeasyMetadata('form:name=From')]
    public string $from;
    
    /**
     * Whether to detect if a human, answering machine, or fax has picked up the call. Can be: `Enable` or `DetectMessageEnd`. Use `Enable` if you would like us to return `AnsweredBy` as soon as the called party is identified. Use `DetectMessageEnd`, if you would like to leave a message on an answering machine. If `send_digits` is provided, this parameter is ignored. For more information, see [Answering Machine Detection](https://www.twilio.com/docs/voice/answering-machine-detection).
     * 
     * @var ?string $machineDetection
     */
	#[SpeakeasyMetadata('form:name=MachineDetection')]
    public ?string $machineDetection = null;
    
    /**
     * The number of milliseconds of initial silence after which an `unknown` AnsweredBy result will be returned. Possible Values: 2000-10000. Default: 5000.
     * 
     * @var ?int $machineDetectionSilenceTimeout
     */
	#[SpeakeasyMetadata('form:name=MachineDetectionSilenceTimeout')]
    public ?int $machineDetectionSilenceTimeout = null;
    
    /**
     * The number of milliseconds of silence after speech activity at which point the speech activity is considered complete. Possible Values: 500-5000. Default: 1200.
     * 
     * @var ?int $machineDetectionSpeechEndThreshold
     */
	#[SpeakeasyMetadata('form:name=MachineDetectionSpeechEndThreshold')]
    public ?int $machineDetectionSpeechEndThreshold = null;
    
    /**
     * The number of milliseconds that is used as the measuring stick for the length of the speech activity, where durations lower than this value will be interpreted as a human and longer than this value as a machine. Possible Values: 1000-6000. Default: 2400.
     * 
     * @var ?int $machineDetectionSpeechThreshold
     */
	#[SpeakeasyMetadata('form:name=MachineDetectionSpeechThreshold')]
    public ?int $machineDetectionSpeechThreshold = null;
    
    /**
     * The number of seconds that we should attempt to detect an answering machine before timing out and sending a voice request with `AnsweredBy` of `unknown`. The default timeout is 30 seconds.
     * 
     * @var ?int $machineDetectionTimeout
     */
	#[SpeakeasyMetadata('form:name=MachineDetectionTimeout')]
    public ?int $machineDetectionTimeout = null;
    
    /**
     * The HTTP method we should use when calling the `url` parameter's value. Can be: `GET` or `POST` and the default is `POST`. If an `application_sid` parameter is present, this parameter is ignored.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Operations\CreateCallCreateCallRequestMethodEnum $method
     */
	#[SpeakeasyMetadata('form:name=Method')]
    public ?CreateCallCreateCallRequestMethodEnum $method = null;
    
    /**
     * Whether to record the call. Can be `true` to record the phone call, or `false` to not. The default is `false`. The `recording_url` is sent to the `status_callback` URL.
     * 
     * @var ?bool $record
     */
	#[SpeakeasyMetadata('form:name=Record')]
    public ?bool $record = null;
    
    /**
     * The number of channels in the final recording. Can be: `mono` or `dual`. The default is `mono`. `mono` records both legs of the call in a single channel of the recording file. `dual` records each leg to a separate channel of the recording file. The first channel of a dual-channel recording contains the parent call and the second channel contains the child call.
     * 
     * @var ?string $recordingChannels
     */
	#[SpeakeasyMetadata('form:name=RecordingChannels')]
    public ?string $recordingChannels = null;
    
    /**
     * The URL that we call when the recording is available to be accessed.
     * 
     * @var ?string $recordingStatusCallback
     */
	#[SpeakeasyMetadata('form:name=RecordingStatusCallback')]
    public ?string $recordingStatusCallback = null;
    
    /**
     * The recording status events that will trigger calls to the URL specified in `recording_status_callback`. Can be: `in-progress`, `completed` and `absent`. Defaults to `completed`. Separate  multiple values with a space.
     * 
     * @var ?array<string> $recordingStatusCallbackEvent
     */
	#[SpeakeasyMetadata('form:name=RecordingStatusCallbackEvent')]
    public ?array $recordingStatusCallbackEvent = null;
    
    /**
     * The HTTP method we should use when calling the `recording_status_callback` URL. Can be: `GET` or `POST` and the default is `POST`.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Operations\CreateCallCreateCallRequestRecordingStatusCallbackMethodEnum $recordingStatusCallbackMethod
     */
	#[SpeakeasyMetadata('form:name=RecordingStatusCallbackMethod')]
    public ?CreateCallCreateCallRequestRecordingStatusCallbackMethodEnum $recordingStatusCallbackMethod = null;
    
    /**
     * The audio track to record for the call. Can be: `inbound`, `outbound` or `both`. The default is `both`. `inbound` records the audio that is received by Twilio. `outbound` records the audio that is generated from Twilio. `both` records the audio that is received and generated by Twilio.
     * 
     * @var ?string $recordingTrack
     */
	#[SpeakeasyMetadata('form:name=RecordingTrack')]
    public ?string $recordingTrack = null;
    
    /**
     * A string of keys to dial after connecting to the number, maximum of 32 digits. Valid digits in the string include: any digit (`0`-`9`), '`#`', '`*`' and '`w`', to insert a half second pause. For example, if you connected to a company phone number and wanted to pause for one second, and then dial extension 1234 followed by the pound key, the value of this parameter would be `ww1234#`. Remember to URL-encode this string, since the '`#`' character has special meaning in a URL. If both `SendDigits` and `MachineDetection` parameters are provided, then `MachineDetection` will be ignored.
     * 
     * @var ?string $sendDigits
     */
	#[SpeakeasyMetadata('form:name=SendDigits')]
    public ?string $sendDigits = null;
    
    /**
     * The password required to authenticate the user account specified in `sip_auth_username`.
     * 
     * @var ?string $sipAuthPassword
     */
	#[SpeakeasyMetadata('form:name=SipAuthPassword')]
    public ?string $sipAuthPassword = null;
    
    /**
     * The username used to authenticate the caller making a SIP call.
     * 
     * @var ?string $sipAuthUsername
     */
	#[SpeakeasyMetadata('form:name=SipAuthUsername')]
    public ?string $sipAuthUsername = null;
    
    /**
     * The URL we should call using the `status_callback_method` to send status information to your application. If no `status_callback_event` is specified, we will send the `completed` status. If an `application_sid` parameter is present, this parameter is ignored. URLs must contain a valid hostname (underscores are not permitted).
     * 
     * @var ?string $statusCallback
     */
	#[SpeakeasyMetadata('form:name=StatusCallback')]
    public ?string $statusCallback = null;
    
    /**
     * The call progress events that we will send to the `status_callback` URL. Can be: `initiated`, `ringing`, `answered`, and `completed`. If no event is specified, we send the `completed` status. If you want to receive multiple events, specify each one in a separate `status_callback_event` parameter. See the code sample for [monitoring call progress](https://www.twilio.com/docs/voice/api/call-resource?code-sample=code-create-a-call-resource-and-specify-a-statuscallbackevent&code-sdk-version=json). If an `application_sid` is present, this parameter is ignored.
     * 
     * @var ?array<string> $statusCallbackEvent
     */
	#[SpeakeasyMetadata('form:name=StatusCallbackEvent')]
    public ?array $statusCallbackEvent = null;
    
    /**
     * The HTTP method we should use when calling the `status_callback` URL. Can be: `GET` or `POST` and the default is `POST`. If an `application_sid` parameter is present, this parameter is ignored.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Operations\CreateCallCreateCallRequestStatusCallbackMethodEnum $statusCallbackMethod
     */
	#[SpeakeasyMetadata('form:name=StatusCallbackMethod')]
    public ?CreateCallCreateCallRequestStatusCallbackMethodEnum $statusCallbackMethod = null;
    
    /**
     * The maximum duration of the call in seconds. Constraints depend on account and configuration.
     * 
     * @var ?int $timeLimit
     */
	#[SpeakeasyMetadata('form:name=TimeLimit')]
    public ?int $timeLimit = null;
    
    /**
     * The integer number of seconds that we should allow the phone to ring before assuming there is no answer. The default is `60` seconds and the maximum is `600` seconds. For some call flows, we will add a 5-second buffer to the timeout value you provide. For this reason, a timeout value of 10 seconds could result in an actual timeout closer to 15 seconds. You can set this to a short time, such as `15` seconds, to hang up before reaching an answering machine or voicemail.
     * 
     * @var ?int $timeout
     */
	#[SpeakeasyMetadata('form:name=Timeout')]
    public ?int $timeout = null;
    
    /**
     * The phone number, SIP address, or client identifier to call.
     * 
     * @var string $to
     */
	#[SpeakeasyMetadata('form:name=To')]
    public string $to;
    
    /**
     * Whether to trim any leading and trailing silence from the recording. Can be: `trim-silence` or `do-not-trim` and the default is `trim-silence`.
     * 
     * @var ?string $trim
     */
	#[SpeakeasyMetadata('form:name=Trim')]
    public ?string $trim = null;
    
    /**
     * TwiML instructions for the call Twilio will use without fetching Twiml from url parameter. If both `twiml` and `url` are provided then `twiml` parameter will be ignored. Max 4000 characters.
     * 
     * @var ?string $twiml
     */
	#[SpeakeasyMetadata('form:name=Twiml')]
    public ?string $twiml = null;
    
    /**
     * The absolute URL that returns the TwiML instructions for the call. We will call this URL using the `method` when the call connects. For more information, see the [Url Parameter](https://www.twilio.com/docs/voice/make-calls#specify-a-url-parameter) section in [Making Calls](https://www.twilio.com/docs/voice/make-calls).
     * 
     * @var ?string $url
     */
	#[SpeakeasyMetadata('form:name=Url')]
    public ?string $url = null;
    
	public function __construct()
	{
		$this->applicationSid = null;
		$this->asyncAmd = null;
		$this->asyncAmdStatusCallback = null;
		$this->asyncAmdStatusCallbackMethod = null;
		$this->byoc = null;
		$this->callReason = null;
		$this->callToken = null;
		$this->callerId = null;
		$this->fallbackMethod = null;
		$this->fallbackUrl = null;
		$this->from = "";
		$this->machineDetection = null;
		$this->machineDetectionSilenceTimeout = null;
		$this->machineDetectionSpeechEndThreshold = null;
		$this->machineDetectionSpeechThreshold = null;
		$this->machineDetectionTimeout = null;
		$this->method = null;
		$this->record = null;
		$this->recordingChannels = null;
		$this->recordingStatusCallback = null;
		$this->recordingStatusCallbackEvent = null;
		$this->recordingStatusCallbackMethod = null;
		$this->recordingTrack = null;
		$this->sendDigits = null;
		$this->sipAuthPassword = null;
		$this->sipAuthUsername = null;
		$this->statusCallback = null;
		$this->statusCallbackEvent = null;
		$this->statusCallbackMethod = null;
		$this->timeLimit = null;
		$this->timeout = null;
		$this->to = "";
		$this->trim = null;
		$this->twiml = null;
		$this->url = null;
	}
}
