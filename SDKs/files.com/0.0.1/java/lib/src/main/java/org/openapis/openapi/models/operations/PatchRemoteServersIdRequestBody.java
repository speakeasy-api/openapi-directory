/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import org.openapis.openapi.utils.SpeakeasyMetadata;

public class PatchRemoteServersIdRequestBody {
    /**
     * AWS Access Key.
     */
    @SpeakeasyMetadata("multipartForm:name=aws_access_key")
    public String awsAccessKey;

    public PatchRemoteServersIdRequestBody withAwsAccessKey(String awsAccessKey) {
        this.awsAccessKey = awsAccessKey;
        return this;
    }
    
    /**
     * AWS secret key.
     */
    @SpeakeasyMetadata("multipartForm:name=aws_secret_key")
    public String awsSecretKey;

    public PatchRemoteServersIdRequestBody withAwsSecretKey(String awsSecretKey) {
        this.awsSecretKey = awsSecretKey;
        return this;
    }
    
    /**
     * Azure Blob Storage secret key.
     */
    @SpeakeasyMetadata("multipartForm:name=azure_blob_storage_access_key")
    public String azureBlobStorageAccessKey;

    public PatchRemoteServersIdRequestBody withAzureBlobStorageAccessKey(String azureBlobStorageAccessKey) {
        this.azureBlobStorageAccessKey = azureBlobStorageAccessKey;
        return this;
    }
    
    /**
     * Azure Blob Storage Account name
     */
    @SpeakeasyMetadata("multipartForm:name=azure_blob_storage_account")
    public String azureBlobStorageAccount;

    public PatchRemoteServersIdRequestBody withAzureBlobStorageAccount(String azureBlobStorageAccount) {
        this.azureBlobStorageAccount = azureBlobStorageAccount;
        return this;
    }
    
    /**
     * Azure Blob Storage Container name
     */
    @SpeakeasyMetadata("multipartForm:name=azure_blob_storage_container")
    public String azureBlobStorageContainer;

    public PatchRemoteServersIdRequestBody withAzureBlobStorageContainer(String azureBlobStorageContainer) {
        this.azureBlobStorageContainer = azureBlobStorageContainer;
        return this;
    }
    
    /**
     * Shared Access Signature (SAS) token
     */
    @SpeakeasyMetadata("multipartForm:name=azure_blob_storage_sas_token")
    public String azureBlobStorageSasToken;

    public PatchRemoteServersIdRequestBody withAzureBlobStorageSasToken(String azureBlobStorageSasToken) {
        this.azureBlobStorageSasToken = azureBlobStorageSasToken;
        return this;
    }
    
    /**
     * Azure File Storage access key.
     */
    @SpeakeasyMetadata("multipartForm:name=azure_files_storage_access_key")
    public String azureFilesStorageAccessKey;

    public PatchRemoteServersIdRequestBody withAzureFilesStorageAccessKey(String azureFilesStorageAccessKey) {
        this.azureFilesStorageAccessKey = azureFilesStorageAccessKey;
        return this;
    }
    
    /**
     * Azure File Storage Account name
     */
    @SpeakeasyMetadata("multipartForm:name=azure_files_storage_account")
    public String azureFilesStorageAccount;

    public PatchRemoteServersIdRequestBody withAzureFilesStorageAccount(String azureFilesStorageAccount) {
        this.azureFilesStorageAccount = azureFilesStorageAccount;
        return this;
    }
    
    /**
     * Shared Access Signature (SAS) token
     */
    @SpeakeasyMetadata("multipartForm:name=azure_files_storage_sas_token")
    public String azureFilesStorageSasToken;

    public PatchRemoteServersIdRequestBody withAzureFilesStorageSasToken(String azureFilesStorageSasToken) {
        this.azureFilesStorageSasToken = azureFilesStorageSasToken;
        return this;
    }
    
    /**
     * Azure File Storage Share name
     */
    @SpeakeasyMetadata("multipartForm:name=azure_files_storage_share_name")
    public String azureFilesStorageShareName;

    public PatchRemoteServersIdRequestBody withAzureFilesStorageShareName(String azureFilesStorageShareName) {
        this.azureFilesStorageShareName = azureFilesStorageShareName;
        return this;
    }
    
    /**
     * Backblaze B2 Cloud Storage applicationKey.
     */
    @SpeakeasyMetadata("multipartForm:name=backblaze_b2_application_key")
    public String backblazeB2ApplicationKey;

    public PatchRemoteServersIdRequestBody withBackblazeB2ApplicationKey(String backblazeB2ApplicationKey) {
        this.backblazeB2ApplicationKey = backblazeB2ApplicationKey;
        return this;
    }
    
    /**
     * Backblaze B2 Cloud Storage Bucket name
     */
    @SpeakeasyMetadata("multipartForm:name=backblaze_b2_bucket")
    public String backblazeB2Bucket;

    public PatchRemoteServersIdRequestBody withBackblazeB2Bucket(String backblazeB2Bucket) {
        this.backblazeB2Bucket = backblazeB2Bucket;
        return this;
    }
    
    /**
     * Backblaze B2 Cloud Storage keyID.
     */
    @SpeakeasyMetadata("multipartForm:name=backblaze_b2_key_id")
    public String backblazeB2KeyId;

    public PatchRemoteServersIdRequestBody withBackblazeB2KeyId(String backblazeB2KeyId) {
        this.backblazeB2KeyId = backblazeB2KeyId;
        return this;
    }
    
    /**
     * Backblaze B2 Cloud Storage S3 Endpoint
     */
    @SpeakeasyMetadata("multipartForm:name=backblaze_b2_s3_endpoint")
    public String backblazeB2S3Endpoint;

    public PatchRemoteServersIdRequestBody withBackblazeB2S3Endpoint(String backblazeB2S3Endpoint) {
        this.backblazeB2S3Endpoint = backblazeB2S3Endpoint;
        return this;
    }
    
    /**
     * `true` if remote server only accepts connections from dedicated IPs
     */
    @SpeakeasyMetadata("multipartForm:name=enable_dedicated_ips")
    public Boolean enableDedicatedIps;

    public PatchRemoteServersIdRequestBody withEnableDedicatedIps(Boolean enableDedicatedIps) {
        this.enableDedicatedIps = enableDedicatedIps;
        return this;
    }
    
    /**
     * Filebase Access Key.
     */
    @SpeakeasyMetadata("multipartForm:name=filebase_access_key")
    public String filebaseAccessKey;

    public PatchRemoteServersIdRequestBody withFilebaseAccessKey(String filebaseAccessKey) {
        this.filebaseAccessKey = filebaseAccessKey;
        return this;
    }
    
    /**
     * Filebase Bucket name
     */
    @SpeakeasyMetadata("multipartForm:name=filebase_bucket")
    public String filebaseBucket;

    public PatchRemoteServersIdRequestBody withFilebaseBucket(String filebaseBucket) {
        this.filebaseBucket = filebaseBucket;
        return this;
    }
    
    /**
     * Filebase secret key
     */
    @SpeakeasyMetadata("multipartForm:name=filebase_secret_key")
    public String filebaseSecretKey;

    public PatchRemoteServersIdRequestBody withFilebaseSecretKey(String filebaseSecretKey) {
        this.filebaseSecretKey = filebaseSecretKey;
        return this;
    }
    
    /**
     * Local permissions for files agent. read_only, write_only, or read_write
     */
    @SpeakeasyMetadata("multipartForm:name=files_agent_permission_set")
    public PatchRemoteServersIdRequestBodyFilesAgentPermissionSetEnum filesAgentPermissionSet;

    public PatchRemoteServersIdRequestBody withFilesAgentPermissionSet(PatchRemoteServersIdRequestBodyFilesAgentPermissionSetEnum filesAgentPermissionSet) {
        this.filesAgentPermissionSet = filesAgentPermissionSet;
        return this;
    }
    
    /**
     * Agent local root path
     */
    @SpeakeasyMetadata("multipartForm:name=files_agent_root")
    public String filesAgentRoot;

    public PatchRemoteServersIdRequestBody withFilesAgentRoot(String filesAgentRoot) {
        this.filesAgentRoot = filesAgentRoot;
        return this;
    }
    
    /**
     * Google Cloud Storage bucket name
     */
    @SpeakeasyMetadata("multipartForm:name=google_cloud_storage_bucket")
    public String googleCloudStorageBucket;

    public PatchRemoteServersIdRequestBody withGoogleCloudStorageBucket(String googleCloudStorageBucket) {
        this.googleCloudStorageBucket = googleCloudStorageBucket;
        return this;
    }
    
    /**
     * A JSON file that contains the private key. To generate see https://cloud.google.com/storage/docs/json_api/v1/how-tos/authorizing#APIKey
     */
    @SpeakeasyMetadata("multipartForm:name=google_cloud_storage_credentials_json")
    public String googleCloudStorageCredentialsJson;

    public PatchRemoteServersIdRequestBody withGoogleCloudStorageCredentialsJson(String googleCloudStorageCredentialsJson) {
        this.googleCloudStorageCredentialsJson = googleCloudStorageCredentialsJson;
        return this;
    }
    
    /**
     * Google Cloud Project ID
     */
    @SpeakeasyMetadata("multipartForm:name=google_cloud_storage_project_id")
    public String googleCloudStorageProjectId;

    public PatchRemoteServersIdRequestBody withGoogleCloudStorageProjectId(String googleCloudStorageProjectId) {
        this.googleCloudStorageProjectId = googleCloudStorageProjectId;
        return this;
    }
    
    /**
     * Hostname or IP address
     */
    @SpeakeasyMetadata("multipartForm:name=hostname")
    public String hostname;

    public PatchRemoteServersIdRequestBody withHostname(String hostname) {
        this.hostname = hostname;
        return this;
    }
    
    /**
     * Max number of parallel connections.  Ignored for S3 connections (we will parallelize these as much as possible).
     */
    @SpeakeasyMetadata("multipartForm:name=max_connections")
    public Integer maxConnections;

    public PatchRemoteServersIdRequestBody withMaxConnections(Integer maxConnections) {
        this.maxConnections = maxConnections;
        return this;
    }
    
    /**
     * Internal name for your reference
     */
    @SpeakeasyMetadata("multipartForm:name=name")
    public String name;

    public PatchRemoteServersIdRequestBody withName(String name) {
        this.name = name;
        return this;
    }
    
    /**
     * Either personal or business_other account types
     */
    @SpeakeasyMetadata("multipartForm:name=one_drive_account_type")
    public PatchRemoteServersIdRequestBodyOneDriveAccountTypeEnum oneDriveAccountType;

    public PatchRemoteServersIdRequestBody withOneDriveAccountType(PatchRemoteServersIdRequestBodyOneDriveAccountTypeEnum oneDriveAccountType) {
        this.oneDriveAccountType = oneDriveAccountType;
        return this;
    }
    
    /**
     * Password if needed.
     */
    @SpeakeasyMetadata("multipartForm:name=password")
    public String password;

    public PatchRemoteServersIdRequestBody withPassword(String password) {
        this.password = password;
        return this;
    }
    
    /**
     * If true, we will ensure that all communications with this remote server are made through the primary region of the site.  This setting can also be overridden by a sitewide setting which will force it to true.
     */
    @SpeakeasyMetadata("multipartForm:name=pin_to_site_region")
    public Boolean pinToSiteRegion;

    public PatchRemoteServersIdRequestBody withPinToSiteRegion(Boolean pinToSiteRegion) {
        this.pinToSiteRegion = pinToSiteRegion;
        return this;
    }
    
    /**
     * Port for remote server.  Not needed for S3.
     */
    @SpeakeasyMetadata("multipartForm:name=port")
    public Integer port;

    public PatchRemoteServersIdRequestBody withPort(Integer port) {
        this.port = port;
        return this;
    }
    
    /**
     * Private key if needed.
     */
    @SpeakeasyMetadata("multipartForm:name=private_key")
    public String privateKey;

    public PatchRemoteServersIdRequestBody withPrivateKey(String privateKey) {
        this.privateKey = privateKey;
        return this;
    }
    
    /**
     * Passphrase for private key if needed.
     */
    @SpeakeasyMetadata("multipartForm:name=private_key_passphrase")
    public String privateKeyPassphrase;

    public PatchRemoteServersIdRequestBody withPrivateKeyPassphrase(String privateKeyPassphrase) {
        this.privateKeyPassphrase = privateKeyPassphrase;
        return this;
    }
    
    /**
     * Rackspace API key from the Rackspace Cloud Control Panel.
     */
    @SpeakeasyMetadata("multipartForm:name=rackspace_api_key")
    public String rackspaceApiKey;

    public PatchRemoteServersIdRequestBody withRackspaceApiKey(String rackspaceApiKey) {
        this.rackspaceApiKey = rackspaceApiKey;
        return this;
    }
    
    /**
     * The name of the container (top level directory) where files will sync.
     */
    @SpeakeasyMetadata("multipartForm:name=rackspace_container")
    public String rackspaceContainer;

    public PatchRemoteServersIdRequestBody withRackspaceContainer(String rackspaceContainer) {
        this.rackspaceContainer = rackspaceContainer;
        return this;
    }
    
    /**
     * Three letter airport code for Rackspace region. See https://support.rackspace.com/how-to/about-regions/
     */
    @SpeakeasyMetadata("multipartForm:name=rackspace_region")
    public String rackspaceRegion;

    public PatchRemoteServersIdRequestBody withRackspaceRegion(String rackspaceRegion) {
        this.rackspaceRegion = rackspaceRegion;
        return this;
    }
    
    /**
     * Rackspace username used to login to the Rackspace Cloud Control Panel.
     */
    @SpeakeasyMetadata("multipartForm:name=rackspace_username")
    public String rackspaceUsername;

    public PatchRemoteServersIdRequestBody withRackspaceUsername(String rackspaceUsername) {
        this.rackspaceUsername = rackspaceUsername;
        return this;
    }
    
    /**
     * Reset authenticated account
     */
    @SpeakeasyMetadata("multipartForm:name=reset_authentication")
    public Boolean resetAuthentication;

    public PatchRemoteServersIdRequestBody withResetAuthentication(Boolean resetAuthentication) {
        this.resetAuthentication = resetAuthentication;
        return this;
    }
    
    /**
     * S3 bucket name
     */
    @SpeakeasyMetadata("multipartForm:name=s3_bucket")
    public String s3Bucket;

    public PatchRemoteServersIdRequestBody withS3Bucket(String s3Bucket) {
        this.s3Bucket = s3Bucket;
        return this;
    }
    
    /**
     * S3-compatible Access Key.
     */
    @SpeakeasyMetadata("multipartForm:name=s3_compatible_access_key")
    public String s3CompatibleAccessKey;

    public PatchRemoteServersIdRequestBody withS3CompatibleAccessKey(String s3CompatibleAccessKey) {
        this.s3CompatibleAccessKey = s3CompatibleAccessKey;
        return this;
    }
    
    /**
     * S3-compatible Bucket name
     */
    @SpeakeasyMetadata("multipartForm:name=s3_compatible_bucket")
    public String s3CompatibleBucket;

    public PatchRemoteServersIdRequestBody withS3CompatibleBucket(String s3CompatibleBucket) {
        this.s3CompatibleBucket = s3CompatibleBucket;
        return this;
    }
    
    /**
     * S3-compatible endpoint
     */
    @SpeakeasyMetadata("multipartForm:name=s3_compatible_endpoint")
    public String s3CompatibleEndpoint;

    public PatchRemoteServersIdRequestBody withS3CompatibleEndpoint(String s3CompatibleEndpoint) {
        this.s3CompatibleEndpoint = s3CompatibleEndpoint;
        return this;
    }
    
    /**
     * S3-compatible endpoint
     */
    @SpeakeasyMetadata("multipartForm:name=s3_compatible_region")
    public String s3CompatibleRegion;

    public PatchRemoteServersIdRequestBody withS3CompatibleRegion(String s3CompatibleRegion) {
        this.s3CompatibleRegion = s3CompatibleRegion;
        return this;
    }
    
    /**
     * S3-compatible secret key
     */
    @SpeakeasyMetadata("multipartForm:name=s3_compatible_secret_key")
    public String s3CompatibleSecretKey;

    public PatchRemoteServersIdRequestBody withS3CompatibleSecretKey(String s3CompatibleSecretKey) {
        this.s3CompatibleSecretKey = s3CompatibleSecretKey;
        return this;
    }
    
    /**
     * S3 region
     */
    @SpeakeasyMetadata("multipartForm:name=s3_region")
    public String s3Region;

    public PatchRemoteServersIdRequestBody withS3Region(String s3Region) {
        this.s3Region = s3Region;
        return this;
    }
    
    /**
     * Remote server certificate
     */
    @SpeakeasyMetadata("multipartForm:name=server_certificate")
    public PatchRemoteServersIdRequestBodyServerCertificateEnum serverCertificate;

    public PatchRemoteServersIdRequestBody withServerCertificate(PatchRemoteServersIdRequestBodyServerCertificateEnum serverCertificate) {
        this.serverCertificate = serverCertificate;
        return this;
    }
    
    /**
     * Remote server SSH Host Key. If provided, we will require that the server host key matches the provided key. Uses OpenSSH format similar to what would go into ~/.ssh/known_hosts
     */
    @SpeakeasyMetadata("multipartForm:name=server_host_key")
    public String serverHostKey;

    public PatchRemoteServersIdRequestBody withServerHostKey(String serverHostKey) {
        this.serverHostKey = serverHostKey;
        return this;
    }
    
    /**
     * Remote server type.
     */
    @SpeakeasyMetadata("multipartForm:name=server_type")
    public PatchRemoteServersIdRequestBodyServerTypeEnum serverType;

    public PatchRemoteServersIdRequestBody withServerType(PatchRemoteServersIdRequestBodyServerTypeEnum serverType) {
        this.serverType = serverType;
        return this;
    }
    
    /**
     * Should we require SSL?
     */
    @SpeakeasyMetadata("multipartForm:name=ssl")
    public PatchRemoteServersIdRequestBodySslEnum ssl;

    public PatchRemoteServersIdRequestBody withSsl(PatchRemoteServersIdRequestBodySslEnum ssl) {
        this.ssl = ssl;
        return this;
    }
    
    /**
     * SSL client certificate.
     */
    @SpeakeasyMetadata("multipartForm:name=ssl_certificate")
    public String sslCertificate;

    public PatchRemoteServersIdRequestBody withSslCertificate(String sslCertificate) {
        this.sslCertificate = sslCertificate;
        return this;
    }
    
    /**
     * Remote server username.  Not needed for S3 buckets.
     */
    @SpeakeasyMetadata("multipartForm:name=username")
    public String username;

    public PatchRemoteServersIdRequestBody withUsername(String username) {
        this.username = username;
        return this;
    }
    
    /**
     * Wasabi access key.
     */
    @SpeakeasyMetadata("multipartForm:name=wasabi_access_key")
    public String wasabiAccessKey;

    public PatchRemoteServersIdRequestBody withWasabiAccessKey(String wasabiAccessKey) {
        this.wasabiAccessKey = wasabiAccessKey;
        return this;
    }
    
    /**
     * Wasabi Bucket name
     */
    @SpeakeasyMetadata("multipartForm:name=wasabi_bucket")
    public String wasabiBucket;

    public PatchRemoteServersIdRequestBody withWasabiBucket(String wasabiBucket) {
        this.wasabiBucket = wasabiBucket;
        return this;
    }
    
    /**
     * Wasabi region
     */
    @SpeakeasyMetadata("multipartForm:name=wasabi_region")
    public String wasabiRegion;

    public PatchRemoteServersIdRequestBody withWasabiRegion(String wasabiRegion) {
        this.wasabiRegion = wasabiRegion;
        return this;
    }
    
    /**
     * Wasabi secret key.
     */
    @SpeakeasyMetadata("multipartForm:name=wasabi_secret_key")
    public String wasabiSecretKey;

    public PatchRemoteServersIdRequestBody withWasabiSecretKey(String wasabiSecretKey) {
        this.wasabiSecretKey = wasabiSecretKey;
        return this;
    }
    
    public PatchRemoteServersIdRequestBody(){}
}
