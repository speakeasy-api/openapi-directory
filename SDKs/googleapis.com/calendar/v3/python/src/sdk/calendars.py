"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Calendars:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def calendar_calendars_clear(self, request: operations.CalendarCalendarsClearRequest, security: operations.CalendarCalendarsClearSecurity) -> operations.CalendarCalendarsClearResponse:
        r"""Clears a primary calendar. This operation deletes all events associated with the primary calendar of an account."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.CalendarCalendarsClearRequest, base_url, '/calendars/{calendarId}/clear', request)
        
        query_params = utils.get_query_params(operations.CalendarCalendarsClearRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CalendarCalendarsClearResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def calendar_calendars_delete(self, request: operations.CalendarCalendarsDeleteRequest, security: operations.CalendarCalendarsDeleteSecurity) -> operations.CalendarCalendarsDeleteResponse:
        r"""Deletes a secondary calendar. Use calendars.clear for clearing all events on primary calendars."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.CalendarCalendarsDeleteRequest, base_url, '/calendars/{calendarId}', request)
        
        query_params = utils.get_query_params(operations.CalendarCalendarsDeleteRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CalendarCalendarsDeleteResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def calendar_calendars_get(self, request: operations.CalendarCalendarsGetRequest, security: operations.CalendarCalendarsGetSecurity) -> operations.CalendarCalendarsGetResponse:
        r"""Returns metadata for a calendar."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.CalendarCalendarsGetRequest, base_url, '/calendars/{calendarId}', request)
        
        query_params = utils.get_query_params(operations.CalendarCalendarsGetRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CalendarCalendarsGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Calendar])
                res.calendar = out

        return res

    def calendar_calendars_insert(self, request: operations.CalendarCalendarsInsertRequest, security: operations.CalendarCalendarsInsertSecurity) -> operations.CalendarCalendarsInsertResponse:
        r"""Creates a secondary calendar."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/calendars'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "calendar", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.CalendarCalendarsInsertRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CalendarCalendarsInsertResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Calendar])
                res.calendar = out

        return res

    def calendar_calendars_patch(self, request: operations.CalendarCalendarsPatchRequest, security: operations.CalendarCalendarsPatchSecurity) -> operations.CalendarCalendarsPatchResponse:
        r"""Updates metadata for a calendar. This method supports patch semantics."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.CalendarCalendarsPatchRequest, base_url, '/calendars/{calendarId}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "calendar", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.CalendarCalendarsPatchRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PATCH', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CalendarCalendarsPatchResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Calendar])
                res.calendar = out

        return res

    def calendar_calendars_update(self, request: operations.CalendarCalendarsUpdateRequest, security: operations.CalendarCalendarsUpdateSecurity) -> operations.CalendarCalendarsUpdateResponse:
        r"""Updates metadata for a calendar."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.CalendarCalendarsUpdateRequest, base_url, '/calendars/{calendarId}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "calendar", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.CalendarCalendarsUpdateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PUT', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CalendarCalendarsUpdateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Calendar])
                res.calendar = out

        return res

    