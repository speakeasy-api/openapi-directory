// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type GooglePrivacyDlpV2CloudStorageOptionsFileTypesEnum string

const (
	GooglePrivacyDlpV2CloudStorageOptionsFileTypesEnumFileTypeUnspecified GooglePrivacyDlpV2CloudStorageOptionsFileTypesEnum = "FILE_TYPE_UNSPECIFIED"
	GooglePrivacyDlpV2CloudStorageOptionsFileTypesEnumBinaryFile          GooglePrivacyDlpV2CloudStorageOptionsFileTypesEnum = "BINARY_FILE"
	GooglePrivacyDlpV2CloudStorageOptionsFileTypesEnumTextFile            GooglePrivacyDlpV2CloudStorageOptionsFileTypesEnum = "TEXT_FILE"
	GooglePrivacyDlpV2CloudStorageOptionsFileTypesEnumImage               GooglePrivacyDlpV2CloudStorageOptionsFileTypesEnum = "IMAGE"
	GooglePrivacyDlpV2CloudStorageOptionsFileTypesEnumWord                GooglePrivacyDlpV2CloudStorageOptionsFileTypesEnum = "WORD"
	GooglePrivacyDlpV2CloudStorageOptionsFileTypesEnumPdf                 GooglePrivacyDlpV2CloudStorageOptionsFileTypesEnum = "PDF"
	GooglePrivacyDlpV2CloudStorageOptionsFileTypesEnumAvro                GooglePrivacyDlpV2CloudStorageOptionsFileTypesEnum = "AVRO"
	GooglePrivacyDlpV2CloudStorageOptionsFileTypesEnumCsv                 GooglePrivacyDlpV2CloudStorageOptionsFileTypesEnum = "CSV"
	GooglePrivacyDlpV2CloudStorageOptionsFileTypesEnumTsv                 GooglePrivacyDlpV2CloudStorageOptionsFileTypesEnum = "TSV"
	GooglePrivacyDlpV2CloudStorageOptionsFileTypesEnumPowerpoint          GooglePrivacyDlpV2CloudStorageOptionsFileTypesEnum = "POWERPOINT"
	GooglePrivacyDlpV2CloudStorageOptionsFileTypesEnumExcel               GooglePrivacyDlpV2CloudStorageOptionsFileTypesEnum = "EXCEL"
)

func (e *GooglePrivacyDlpV2CloudStorageOptionsFileTypesEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "FILE_TYPE_UNSPECIFIED":
		fallthrough
	case "BINARY_FILE":
		fallthrough
	case "TEXT_FILE":
		fallthrough
	case "IMAGE":
		fallthrough
	case "WORD":
		fallthrough
	case "PDF":
		fallthrough
	case "AVRO":
		fallthrough
	case "CSV":
		fallthrough
	case "TSV":
		fallthrough
	case "POWERPOINT":
		fallthrough
	case "EXCEL":
		*e = GooglePrivacyDlpV2CloudStorageOptionsFileTypesEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GooglePrivacyDlpV2CloudStorageOptionsFileTypesEnum: %s", s)
	}
}

type GooglePrivacyDlpV2CloudStorageOptionsSampleMethodEnum string

const (
	GooglePrivacyDlpV2CloudStorageOptionsSampleMethodEnumSampleMethodUnspecified GooglePrivacyDlpV2CloudStorageOptionsSampleMethodEnum = "SAMPLE_METHOD_UNSPECIFIED"
	GooglePrivacyDlpV2CloudStorageOptionsSampleMethodEnumTop                     GooglePrivacyDlpV2CloudStorageOptionsSampleMethodEnum = "TOP"
	GooglePrivacyDlpV2CloudStorageOptionsSampleMethodEnumRandomStart             GooglePrivacyDlpV2CloudStorageOptionsSampleMethodEnum = "RANDOM_START"
)

func (e *GooglePrivacyDlpV2CloudStorageOptionsSampleMethodEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "SAMPLE_METHOD_UNSPECIFIED":
		fallthrough
	case "TOP":
		fallthrough
	case "RANDOM_START":
		*e = GooglePrivacyDlpV2CloudStorageOptionsSampleMethodEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GooglePrivacyDlpV2CloudStorageOptionsSampleMethodEnum: %s", s)
	}
}

// GooglePrivacyDlpV2CloudStorageOptions - Options defining a file or a set of files within a Cloud Storage bucket.
type GooglePrivacyDlpV2CloudStorageOptions struct {
	// Max number of bytes to scan from a file. If a scanned file's size is bigger than this value then the rest of the bytes are omitted. Only one of bytes_limit_per_file and bytes_limit_per_file_percent can be specified. Cannot be set if de-identification is requested.
	BytesLimitPerFile *string `json:"bytesLimitPerFile,omitempty"`
	// Max percentage of bytes to scan from a file. The rest are omitted. The number of bytes scanned is rounded down. Must be between 0 and 100, inclusively. Both 0 and 100 means no limit. Defaults to 0. Only one of bytes_limit_per_file and bytes_limit_per_file_percent can be specified. Cannot be set if de-identification is requested.
	BytesLimitPerFilePercent *int `json:"bytesLimitPerFilePercent,omitempty"`
	// Set of files to scan.
	FileSet *GooglePrivacyDlpV2FileSet `json:"fileSet,omitempty"`
	// List of file type groups to include in the scan. If empty, all files are scanned and available data format processors are applied. In addition, the binary content of the selected files is always scanned as well. Images are scanned only as binary if the specified region does not support image inspection and no file_types were specified. Image inspection is restricted to 'global', 'us', 'asia', and 'europe'.
	FileTypes []GooglePrivacyDlpV2CloudStorageOptionsFileTypesEnum `json:"fileTypes,omitempty"`
	// Limits the number of files to scan to this percentage of the input FileSet. Number of files scanned is rounded down. Must be between 0 and 100, inclusively. Both 0 and 100 means no limit. Defaults to 0.
	FilesLimitPercent *int                                                   `json:"filesLimitPercent,omitempty"`
	SampleMethod      *GooglePrivacyDlpV2CloudStorageOptionsSampleMethodEnum `json:"sampleMethod,omitempty"`
}
