// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type EditChannelSecurity struct {
	Oauth2 string `security:"scheme,type=oauth2,name=Authorization"`
}

// EditChannelRequestBodyPrivacyEnum - The privacy level of the channel.
type EditChannelRequestBodyPrivacyEnum string

const (
	EditChannelRequestBodyPrivacyEnumAnybody    EditChannelRequestBodyPrivacyEnum = "anybody"
	EditChannelRequestBodyPrivacyEnumModerators EditChannelRequestBodyPrivacyEnum = "moderators"
	EditChannelRequestBodyPrivacyEnumUsers      EditChannelRequestBodyPrivacyEnum = "users"
)

func (e *EditChannelRequestBodyPrivacyEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "anybody":
		fallthrough
	case "moderators":
		fallthrough
	case "users":
		*e = EditChannelRequestBodyPrivacyEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for EditChannelRequestBodyPrivacyEnum: %s", s)
	}
}

type EditChannelRequestBody struct {
	// The description of the channel.
	Description *string `json:"description,omitempty"`
	// The link to access the channel. You can use a custom name in the URL in place of a numeric channel ID, as in `/channels/{url_custom}`. Submitting `""` for this field removes the link alias.
	Link *string `json:"link,omitempty"`
	// The name of the channel.
	Name *string `json:"name,omitempty"`
	// The privacy level of the channel.
	Privacy *EditChannelRequestBodyPrivacyEnum `json:"privacy,omitempty"`
}

type EditChannelRequest struct {
	RequestBody *EditChannelRequestBody `request:"mediaType=application/vnd.vimeo.channel+json"`
	// The ID of the channel.
	ChannelID float64 `pathParam:"style=simple,explode=false,name=channel_id"`
}

type EditChannelResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// The channel was edited.
	Channel *shared.Channel
	// A parameter is invalid.
	LegacyError *shared.LegacyError
}
