"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class LocalTaxes:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def add_local_tax(self, request: operations.AddLocalTaxRequest, security: operations.AddLocalTaxSecurity) -> operations.AddLocalTaxResponse:
        r"""Add new local tax
        Sends new employee local tax information directly to Web Pay.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.AddLocalTaxRequest, base_url, '/v2/companies/{companyId}/employees/{employeeId}/localTaxes', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "local_tax", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AddLocalTaxResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code in [201, 401, 403, 429]:
            pass
        elif http_res.status_code in [400, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.Error]])
                res.errors = out

        return res

    def delete_local_tax_by_tax_code(self, request: operations.DeleteLocalTaxByTaxCodeRequest, security: operations.DeleteLocalTaxByTaxCodeSecurity) -> operations.DeleteLocalTaxByTaxCodeResponse:
        r"""Delete local tax by tax code
        Delete local tax by tax code
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteLocalTaxByTaxCodeRequest, base_url, '/v2/companies/{companyId}/employees/{employeeId}/localTaxes/{taxCode}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteLocalTaxByTaxCodeResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code in [204, 401, 403, 404, 429]:
            pass
        elif http_res.status_code in [400, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.Error]])
                res.errors = out

        return res

    def get_all_local_taxes(self, request: operations.GetAllLocalTaxesRequest, security: operations.GetAllLocalTaxesSecurity) -> operations.GetAllLocalTaxesResponse:
        r"""Get all local taxes
        Returns all local taxes for the selected employee.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetAllLocalTaxesRequest, base_url, '/v2/companies/{companyId}/employees/{employeeId}/localTaxes', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetAllLocalTaxesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.LocalTax]])
                res.local_taxes = out
        elif http_res.status_code in [401, 403, 404, 429]:
            pass
        elif http_res.status_code == 500:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.Error]])
                res.errors = out

        return res

    def get_local_tax_by_tax_code(self, request: operations.GetLocalTaxByTaxCodeRequest, security: operations.GetLocalTaxByTaxCodeSecurity) -> operations.GetLocalTaxByTaxCodeResponse:
        r"""Get local taxes by tax code
        Returns all local taxes with the provided tax code for the selected employee.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetLocalTaxByTaxCodeRequest, base_url, '/v2/companies/{companyId}/employees/{employeeId}/localTaxes/{taxCode}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetLocalTaxByTaxCodeResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.LocalTax]])
                res.local_taxes = out
        elif http_res.status_code in [401, 403, 404, 429]:
            pass
        elif http_res.status_code == 500:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.Error]])
                res.errors = out

        return res

    