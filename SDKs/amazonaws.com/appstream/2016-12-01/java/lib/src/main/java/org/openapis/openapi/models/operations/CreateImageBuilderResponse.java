/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import com.fasterxml.jackson.annotation.JsonProperty;
import java.net.http.HttpResponse;

public class CreateImageBuilderResponse {
    /**
     * ConcurrentModificationException
     */
    
    public Object concurrentModificationException;

    public CreateImageBuilderResponse withConcurrentModificationException(Object concurrentModificationException) {
        this.concurrentModificationException = concurrentModificationException;
        return this;
    }
    
    
    public String contentType;

    public CreateImageBuilderResponse withContentType(String contentType) {
        this.contentType = contentType;
        return this;
    }
    
    /**
     * Success
     */
    
    public org.openapis.openapi.models.shared.CreateImageBuilderResult createImageBuilderResult;

    public CreateImageBuilderResponse withCreateImageBuilderResult(org.openapis.openapi.models.shared.CreateImageBuilderResult createImageBuilderResult) {
        this.createImageBuilderResult = createImageBuilderResult;
        return this;
    }
    
    /**
     * IncompatibleImageException
     */
    
    public Object incompatibleImageException;

    public CreateImageBuilderResponse withIncompatibleImageException(Object incompatibleImageException) {
        this.incompatibleImageException = incompatibleImageException;
        return this;
    }
    
    /**
     * InvalidAccountStatusException
     */
    
    public Object invalidAccountStatusException;

    public CreateImageBuilderResponse withInvalidAccountStatusException(Object invalidAccountStatusException) {
        this.invalidAccountStatusException = invalidAccountStatusException;
        return this;
    }
    
    /**
     * InvalidParameterCombinationException
     */
    
    public Object invalidParameterCombinationException;

    public CreateImageBuilderResponse withInvalidParameterCombinationException(Object invalidParameterCombinationException) {
        this.invalidParameterCombinationException = invalidParameterCombinationException;
        return this;
    }
    
    /**
     * InvalidRoleException
     */
    
    public Object invalidRoleException;

    public CreateImageBuilderResponse withInvalidRoleException(Object invalidRoleException) {
        this.invalidRoleException = invalidRoleException;
        return this;
    }
    
    /**
     * LimitExceededException
     */
    
    public Object limitExceededException;

    public CreateImageBuilderResponse withLimitExceededException(Object limitExceededException) {
        this.limitExceededException = limitExceededException;
        return this;
    }
    
    /**
     * OperationNotPermittedException
     */
    
    public Object operationNotPermittedException;

    public CreateImageBuilderResponse withOperationNotPermittedException(Object operationNotPermittedException) {
        this.operationNotPermittedException = operationNotPermittedException;
        return this;
    }
    
    /**
     * ResourceNotAvailableException
     */
    
    public Object resourceNotAvailableException;

    public CreateImageBuilderResponse withResourceNotAvailableException(Object resourceNotAvailableException) {
        this.resourceNotAvailableException = resourceNotAvailableException;
        return this;
    }
    
    
    public Integer statusCode;

    public CreateImageBuilderResponse withStatusCode(Integer statusCode) {
        this.statusCode = statusCode;
        return this;
    }
    
    
    public HttpResponse<byte[]> rawResponse;

    public CreateImageBuilderResponse withRawResponse(HttpResponse<byte[]> rawResponse) {
        this.rawResponse = rawResponse;
        return this;
    }
    
    /**
     * RequestLimitExceededException
     */
    
    public Object requestLimitExceededException;

    public CreateImageBuilderResponse withRequestLimitExceededException(Object requestLimitExceededException) {
        this.requestLimitExceededException = requestLimitExceededException;
        return this;
    }
    
    /**
     * ResourceAlreadyExistsException
     */
    
    public Object resourceAlreadyExistsException;

    public CreateImageBuilderResponse withResourceAlreadyExistsException(Object resourceAlreadyExistsException) {
        this.resourceAlreadyExistsException = resourceAlreadyExistsException;
        return this;
    }
    
    /**
     * ResourceNotFoundException
     */
    
    public Object resourceNotFoundException;

    public CreateImageBuilderResponse withResourceNotFoundException(Object resourceNotFoundException) {
        this.resourceNotFoundException = resourceNotFoundException;
        return this;
    }
    
    public CreateImageBuilderResponse(@JsonProperty("ContentType") String contentType, @JsonProperty("StatusCode") Integer statusCode) {
        this.contentType = contentType;
        this.statusCode = statusCode;
  }
}
