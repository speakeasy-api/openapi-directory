/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class ProtocolMappers {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Delete the mapper
   */
  deleteRealmClientScopesId1ProtocolMappersModelsId2(
    req: operations.DeleteRealmClientScopesId1ProtocolMappersModelsId2Request,
    config?: AxiosRequestConfig
  ): Promise<operations.DeleteRealmClientScopesId1ProtocolMappersModelsId2Response> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.DeleteRealmClientScopesId1ProtocolMappersModelsId2Request(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/{realm}/client-scopes/{id1}/protocol-mappers/models/{id2}",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DeleteRealmClientScopesId1ProtocolMappersModelsId2Response =
        new operations.DeleteRealmClientScopesId1ProtocolMappersModelsId2Response(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status >= 200 && httpRes?.status < 300:
          break;
      }

      return res;
    });
  }

  /**
   * Delete the mapper
   */
  deleteRealmClientsId1ProtocolMappersModelsId2(
    req: operations.DeleteRealmClientsId1ProtocolMappersModelsId2Request,
    config?: AxiosRequestConfig
  ): Promise<operations.DeleteRealmClientsId1ProtocolMappersModelsId2Response> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DeleteRealmClientsId1ProtocolMappersModelsId2Request(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/{realm}/clients/{id1}/protocol-mappers/models/{id2}",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DeleteRealmClientsId1ProtocolMappersModelsId2Response =
        new operations.DeleteRealmClientsId1ProtocolMappersModelsId2Response({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status >= 200 && httpRes?.status < 300:
          break;
      }

      return res;
    });
  }

  /**
   * Get mapper by id
   */
  getRealmClientScopesId1ProtocolMappersModelsId2(
    req: operations.GetRealmClientScopesId1ProtocolMappersModelsId2Request,
    config?: AxiosRequestConfig
  ): Promise<operations.GetRealmClientScopesId1ProtocolMappersModelsId2Response> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.GetRealmClientScopesId1ProtocolMappersModelsId2Request(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/{realm}/client-scopes/{id1}/protocol-mappers/models/{id2}",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetRealmClientScopesId1ProtocolMappersModelsId2Response =
        new operations.GetRealmClientScopesId1ProtocolMappersModelsId2Response({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status >= 200 && httpRes?.status < 300:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.protocolMapperRepresentation = utils.objectToClass(
              httpRes?.data,
              shared.ProtocolMapperRepresentation
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get mappers
   */
  getRealmClientScopesIdProtocolMappersModels(
    req: operations.GetRealmClientScopesIdProtocolMappersModelsRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetRealmClientScopesIdProtocolMappersModelsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetRealmClientScopesIdProtocolMappersModelsRequest(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/{realm}/client-scopes/{id}/protocol-mappers/models",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetRealmClientScopesIdProtocolMappersModelsResponse =
        new operations.GetRealmClientScopesIdProtocolMappersModelsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status >= 200 && httpRes?.status < 300:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.protocolMapperRepresentations = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.protocolMapperRepresentations = utils.objectToClass(
              httpRes?.data,
              shared.ProtocolMapperRepresentation,
              resFieldDepth
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get mappers by name for a specific protocol
   */
  getRealmClientScopesIdProtocolMappersProtocolProtocol(
    req: operations.GetRealmClientScopesIdProtocolMappersProtocolProtocolRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetRealmClientScopesIdProtocolMappersProtocolProtocolResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.GetRealmClientScopesIdProtocolMappersProtocolProtocolRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/{realm}/client-scopes/{id}/protocol-mappers/protocol/{protocol}",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetRealmClientScopesIdProtocolMappersProtocolProtocolResponse =
        new operations.GetRealmClientScopesIdProtocolMappersProtocolProtocolResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status >= 200 && httpRes?.status < 300:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.protocolMapperRepresentations = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.protocolMapperRepresentations = utils.objectToClass(
              httpRes?.data,
              shared.ProtocolMapperRepresentation,
              resFieldDepth
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get mapper by id
   */
  getRealmClientsId1ProtocolMappersModelsId2(
    req: operations.GetRealmClientsId1ProtocolMappersModelsId2Request,
    config?: AxiosRequestConfig
  ): Promise<operations.GetRealmClientsId1ProtocolMappersModelsId2Response> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetRealmClientsId1ProtocolMappersModelsId2Request(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/{realm}/clients/{id1}/protocol-mappers/models/{id2}",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetRealmClientsId1ProtocolMappersModelsId2Response =
        new operations.GetRealmClientsId1ProtocolMappersModelsId2Response({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status >= 200 && httpRes?.status < 300:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.protocolMapperRepresentation = utils.objectToClass(
              httpRes?.data,
              shared.ProtocolMapperRepresentation
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get mappers
   */
  getRealmClientsIdProtocolMappersModels(
    req: operations.GetRealmClientsIdProtocolMappersModelsRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetRealmClientsIdProtocolMappersModelsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetRealmClientsIdProtocolMappersModelsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/{realm}/clients/{id}/protocol-mappers/models",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetRealmClientsIdProtocolMappersModelsResponse =
        new operations.GetRealmClientsIdProtocolMappersModelsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status >= 200 && httpRes?.status < 300:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.protocolMapperRepresentations = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.protocolMapperRepresentations = utils.objectToClass(
              httpRes?.data,
              shared.ProtocolMapperRepresentation,
              resFieldDepth
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get mappers by name for a specific protocol
   */
  getRealmClientsIdProtocolMappersProtocolProtocol(
    req: operations.GetRealmClientsIdProtocolMappersProtocolProtocolRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetRealmClientsIdProtocolMappersProtocolProtocolResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.GetRealmClientsIdProtocolMappersProtocolProtocolRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/{realm}/clients/{id}/protocol-mappers/protocol/{protocol}",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetRealmClientsIdProtocolMappersProtocolProtocolResponse =
        new operations.GetRealmClientsIdProtocolMappersProtocolProtocolResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status >= 200 && httpRes?.status < 300:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.protocolMapperRepresentations = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.protocolMapperRepresentations = utils.objectToClass(
              httpRes?.data,
              shared.ProtocolMapperRepresentation,
              resFieldDepth
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Create multiple mappers
   */
  postRealmClientScopesIdProtocolMappersAddModels(
    req: operations.PostRealmClientScopesIdProtocolMappersAddModelsRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.PostRealmClientScopesIdProtocolMappersAddModelsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.PostRealmClientScopesIdProtocolMappersAddModelsRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/{realm}/client-scopes/{id}/protocol-mappers/add-models",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PostRealmClientScopesIdProtocolMappersAddModelsResponse =
        new operations.PostRealmClientScopesIdProtocolMappersAddModelsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status >= 200 && httpRes?.status < 300:
          break;
      }

      return res;
    });
  }

  /**
   * Create a mapper
   */
  postRealmClientScopesIdProtocolMappersModels(
    req: operations.PostRealmClientScopesIdProtocolMappersModelsRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.PostRealmClientScopesIdProtocolMappersModelsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PostRealmClientScopesIdProtocolMappersModelsRequest(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/{realm}/client-scopes/{id}/protocol-mappers/models",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "protocolMapperRepresentation",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PostRealmClientScopesIdProtocolMappersModelsResponse =
        new operations.PostRealmClientScopesIdProtocolMappersModelsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status >= 200 && httpRes?.status < 300:
          break;
      }

      return res;
    });
  }

  /**
   * Create multiple mappers
   */
  postRealmClientsIdProtocolMappersAddModels(
    req: operations.PostRealmClientsIdProtocolMappersAddModelsRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.PostRealmClientsIdProtocolMappersAddModelsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PostRealmClientsIdProtocolMappersAddModelsRequest(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/{realm}/clients/{id}/protocol-mappers/add-models",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PostRealmClientsIdProtocolMappersAddModelsResponse =
        new operations.PostRealmClientsIdProtocolMappersAddModelsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status >= 200 && httpRes?.status < 300:
          break;
      }

      return res;
    });
  }

  /**
   * Create a mapper
   */
  postRealmClientsIdProtocolMappersModels(
    req: operations.PostRealmClientsIdProtocolMappersModelsRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.PostRealmClientsIdProtocolMappersModelsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PostRealmClientsIdProtocolMappersModelsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/{realm}/clients/{id}/protocol-mappers/models",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "protocolMapperRepresentation",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PostRealmClientsIdProtocolMappersModelsResponse =
        new operations.PostRealmClientsIdProtocolMappersModelsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status >= 200 && httpRes?.status < 300:
          break;
      }

      return res;
    });
  }

  /**
   * Update the mapper
   */
  putRealmClientScopesId1ProtocolMappersModelsId2(
    req: operations.PutRealmClientScopesId1ProtocolMappersModelsId2Request,
    config?: AxiosRequestConfig
  ): Promise<operations.PutRealmClientScopesId1ProtocolMappersModelsId2Response> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.PutRealmClientScopesId1ProtocolMappersModelsId2Request(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/{realm}/client-scopes/{id1}/protocol-mappers/models/{id2}",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "protocolMapperRepresentation",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "put",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PutRealmClientScopesId1ProtocolMappersModelsId2Response =
        new operations.PutRealmClientScopesId1ProtocolMappersModelsId2Response({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status >= 200 && httpRes?.status < 300:
          break;
      }

      return res;
    });
  }

  /**
   * Update the mapper
   */
  putRealmClientsId1ProtocolMappersModelsId2(
    req: operations.PutRealmClientsId1ProtocolMappersModelsId2Request,
    config?: AxiosRequestConfig
  ): Promise<operations.PutRealmClientsId1ProtocolMappersModelsId2Response> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PutRealmClientsId1ProtocolMappersModelsId2Request(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/{realm}/clients/{id1}/protocol-mappers/models/{id2}",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "protocolMapperRepresentation",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "put",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PutRealmClientsId1ProtocolMappersModelsId2Response =
        new operations.PutRealmClientsId1ProtocolMappersModelsId2Response({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status >= 200 && httpRes?.status < 300:
          break;
      }

      return res;
    });
  }
}
