"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional


@dataclasses.dataclass
class GetUserLevelChannelSecurity:
    
    o_auth: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'oauth2', 'field_name': 'Authorization' }})  
    

@dataclasses.dataclass
class GetUserLevelChannelRequest:
    
    channel_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'channelId', 'style': 'simple', 'explode': False }})
    r"""Channel ID: Unique Identifier of a channel."""  
    
class GetUserLevelChannel200ApplicationXMLTypeEnum(str, Enum):
    r"""Type of the channel. The value can be one of the following:<br>
    `1`: Private channel. In this type of channel, members must be invited to join a channel.<br>
    `2`: Private channel with members that belong to one Zoom account. Members in this channel should be invited and the members should be from the same organization.<br>
    `3`: Public channel. Anyone can search for this channel and join the channel.<br>
    """
    ONE = '1'
    TWO = '2'
    THREE = '3'


@dataclasses.dataclass
class GetUserLevelChannel200ApplicationXML:
    r"""The channel object represents a Zoom chat [channel](https://support.zoom.us/hc/en-us/articles/200912909-Getting-Started-With-Channels-Group-Messaging-)."""
    
    id: Optional[str] = dataclasses.field(default=None)
    r"""Channel Id."""  
    name: Optional[str] = dataclasses.field(default=None)
    r"""Name of the channel."""  
    type: Optional[GetUserLevelChannel200ApplicationXMLTypeEnum] = dataclasses.field(default=None)
    r"""Type of the channel. The value can be one of the following:<br>
    `1`: Private channel. In this type of channel, members must be invited to join a channel.<br>
    `2`: Private channel with members that belong to one Zoom account. Members in this channel should be invited and the members should be from the same organization.<br>
    `3`: Public channel. Anyone can search for this channel and join the channel.<br>
    """  
    
class GetUserLevelChannel200ApplicationJSONTypeEnum(str, Enum):
    r"""Type of the channel. The value can be one of the following:<br>
    `1`: Private channel. In this type of channel, members must be invited to join a channel.<br>
    `2`: Private channel with members that belong to one Zoom account. Members in this channel should be invited and the members should be from the same organization.<br>
    `3`: Public channel. Anyone can search for this channel and join the channel.<br>
    """
    ONE = '1'
    TWO = '2'
    THREE = '3'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetUserLevelChannel200ApplicationJSON:
    r"""The channel object represents a Zoom chat [channel](https://support.zoom.us/hc/en-us/articles/200912909-Getting-Started-With-Channels-Group-Messaging-)."""
    
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""Channel Id."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""Name of the channel."""  
    type: Optional[GetUserLevelChannel200ApplicationJSONTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})
    r"""Type of the channel. The value can be one of the following:<br>
    `1`: Private channel. In this type of channel, members must be invited to join a channel.<br>
    `2`: Private channel with members that belong to one Zoom account. Members in this channel should be invited and the members should be from the same organization.<br>
    `3`: Public channel. Anyone can search for this channel and join the channel.<br>
    """  
    

@dataclasses.dataclass
class GetUserLevelChannelResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    body: Optional[bytes] = dataclasses.field(default=None)  
    get_user_level_channel_200_application_json_object: Optional[GetUserLevelChannel200ApplicationJSON] = dataclasses.field(default=None)
    r"""**HTTP Status Code:** `200`<br>
    Channel returned.<br>
    """  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    