"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations
from typing import Optional

class Accounts:
    r"""fire.com Accounts are the equivalent of a bank account from bank."""
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def add_account(self, request: operations.AddAccountNewAccount) -> operations.AddAccountResponse:
        r"""Add a new account
        Creates a new fire.com account.
        
        **Please note there is a charge associated with creating a new account.**
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v1/accounts'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AddAccountResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.AddAccountAccount])
                res.account = out

        return res

    def get_account_by_id(self, request: operations.GetAccountByIDRequest) -> operations.GetAccountByIDResponse:
        r"""Retrieve the details of a fire.com Account
        You can retrieve the details of a fire.com Account by its `ican`.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetAccountByIDRequest, base_url, '/v1/accounts/{ican}', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetAccountByIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetAccountByIDAccount])
                res.account = out
        elif http_res.status_code == 401:
            pass

        return res

    def get_accounts(self) -> operations.GetAccountsResponse:
        r"""List all fire.com Accounts
        Returns all your fire.com Accounts. Ordered by Alias ascending. Can be paginated.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v1/accounts'
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetAccountsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetAccountsAccounts])
                res.accounts = out
        elif http_res.status_code == 401:
            pass

        return res

    