// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// StoredValueLoadResponseResultCodeEnum - The result of the payment. Possible values:
//
// * **Success** – The operation has been completed successfully.
// * **Refused** – The operation was refused. The reason is given in the `refusalReason` field.
// * **Error** – There was an error when the operation was processed. The reason is given in the `refusalReason` field.
// * **NotEnoughBalance** – The amount on the payment method is lower than the amount given in the request. Only applicable to balance checks.
type StoredValueLoadResponseResultCodeEnum string

const (
	StoredValueLoadResponseResultCodeEnumSuccess          StoredValueLoadResponseResultCodeEnum = "Success"
	StoredValueLoadResponseResultCodeEnumRefused          StoredValueLoadResponseResultCodeEnum = "Refused"
	StoredValueLoadResponseResultCodeEnumError            StoredValueLoadResponseResultCodeEnum = "Error"
	StoredValueLoadResponseResultCodeEnumNotEnoughBalance StoredValueLoadResponseResultCodeEnum = "NotEnoughBalance"
)

func (e StoredValueLoadResponseResultCodeEnum) ToPointer() *StoredValueLoadResponseResultCodeEnum {
	return &e
}

func (e *StoredValueLoadResponseResultCodeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Success":
		fallthrough
	case "Refused":
		fallthrough
	case "Error":
		fallthrough
	case "NotEnoughBalance":
		*e = StoredValueLoadResponseResultCodeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for StoredValueLoadResponseResultCodeEnum: %v", v)
	}
}

// StoredValueLoadResponse - OK - the request has succeeded.
type StoredValueLoadResponse struct {
	// Authorisation code:
	// * When the payment is authorised, this field holds the authorisation code for the payment.
	// * When the payment is not authorised, this field is empty.
	AuthCode       *string `json:"authCode,omitempty"`
	CurrentBalance *Amount `json:"currentBalance,omitempty"`
	// Adyen's 16-character string reference associated with the transaction/request. This value is globally unique; quote it when communicating with us about this request.
	PspReference *string `json:"pspReference,omitempty"`
	// If the transaction is refused or an error occurs, this field holds Adyen's mapped reason for the refusal or a description of the error.
	//
	// When a transaction fails, the authorisation response includes `resultCode` and `refusalReason` values.
	RefusalReason *string `json:"refusalReason,omitempty"`
	// The result of the payment. Possible values:
	//
	// * **Success** – The operation has been completed successfully.
	// * **Refused** – The operation was refused. The reason is given in the `refusalReason` field.
	// * **Error** – There was an error when the operation was processed. The reason is given in the `refusalReason` field.
	// * **NotEnoughBalance** – The amount on the payment method is lower than the amount given in the request. Only applicable to balance checks.
	//
	ResultCode *StoredValueLoadResponseResultCodeEnum `json:"resultCode,omitempty"`
	// Raw refusal reason received from the third party, where available
	ThirdPartyRefusalReason *string `json:"thirdPartyRefusalReason,omitempty"`
}
