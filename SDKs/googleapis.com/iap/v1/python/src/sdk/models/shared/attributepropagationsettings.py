"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class AttributePropagationSettingsOutputCredentialsEnum(str, Enum):
    OUTPUT_CREDENTIALS_UNSPECIFIED = 'OUTPUT_CREDENTIALS_UNSPECIFIED'
    HEADER = 'HEADER'
    JWT = 'JWT'
    RCTOKEN = 'RCTOKEN'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class AttributePropagationSettings:
    r"""Configuration for propagating attributes to applications protected by IAP."""
    
    enable: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('enable'), 'exclude': lambda f: f is None }})
    r"""Whether the provided attribute propagation settings should be evaluated on user requests. If set to true, attributes returned from the expression will be propagated in the set output credentials."""  
    expression: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('expression'), 'exclude': lambda f: f is None }})
    r"""Raw string CEL expression. Must return a list of attributes. A maximum of 45 attributes can be selected. Expressions can select different attribute types from `attributes`: `attributes.saml_attributes`, `attributes.iap_attributes`. The following functions are supported: - filter `.filter(, )`: Returns a subset of `` where `` is true for every item. - in ` in `: Returns true if `` contains ``. - selectByName `.selectByName()`: Returns the attribute in `` with the given `` name, otherwise returns empty. - emitAs `.emitAs()`: Sets the `` name field to the given `` for propagation in selected output credentials. - strict `.strict()`: Ignores the `x-goog-iap-attr-` prefix for the provided `` when propagating with the `HEADER` output credential, such as request headers. - append `.append()` OR `.append()`: Appends the provided `` or `` to the end of ``. Example expression: `attributes.saml_attributes.filter(x, x.name in ['test']).append(attributes.iap_attributes.selectByName('exact').emitAs('custom').strict())`"""  
    output_credentials: Optional[list[AttributePropagationSettingsOutputCredentialsEnum]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('outputCredentials'), 'exclude': lambda f: f is None }})
    r"""Which output credentials attributes selected by the CEL expression should be propagated in. All attributes will be fully duplicated in each selected output credential."""  
    