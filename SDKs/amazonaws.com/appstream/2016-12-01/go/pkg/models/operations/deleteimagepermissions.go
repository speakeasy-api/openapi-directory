// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// DeleteImagePermissionsXAmzTargetEnum
type DeleteImagePermissionsXAmzTargetEnum string

const (
	DeleteImagePermissionsXAmzTargetEnumPhotonAdminProxyServiceDeleteImagePermissions DeleteImagePermissionsXAmzTargetEnum = "PhotonAdminProxyService.DeleteImagePermissions"
)

func (e *DeleteImagePermissionsXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "PhotonAdminProxyService.DeleteImagePermissions":
		*e = DeleteImagePermissionsXAmzTargetEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for DeleteImagePermissionsXAmzTargetEnum: %s", s)
	}
}

type DeleteImagePermissionsRequest struct {
	DeleteImagePermissionsRequest shared.DeleteImagePermissionsRequest `request:"mediaType=application/json"`
	XAmzAlgorithm                 *string                              `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256             *string                              `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential                *string                              `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate                      *string                              `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken             *string                              `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature                 *string                              `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders             *string                              `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget                    DeleteImagePermissionsXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type DeleteImagePermissionsResponse struct {
	ContentType string
	// Success
	DeleteImagePermissionsResult map[string]interface{}
	// ResourceNotAvailableException
	ResourceNotAvailableException interface{}
	StatusCode                    int
	RawResponse                   *http.Response
	// ResourceNotFoundException
	ResourceNotFoundException interface{}
}
