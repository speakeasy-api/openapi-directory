<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Webhooks 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Delete a webhook for a repository
     * 
     * Deletes the specified webhook subscription from the given
     * repository.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteRepositoriesWorkspaceRepoSlugHooksUidRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteRepositoriesWorkspaceRepoSlugHooksUidSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteRepositoriesWorkspaceRepoSlugHooksUidResponse
     */
	public function deleteRepositoriesWorkspaceRepoSlugHooksUid(
        \OpenAPI\OpenAPI\Models\Operations\DeleteRepositoriesWorkspaceRepoSlugHooksUidRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeleteRepositoriesWorkspaceRepoSlugHooksUidSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteRepositoriesWorkspaceRepoSlugHooksUidResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/repositories/{workspace}/{repo_slug}/hooks/{uid}', \OpenAPI\OpenAPI\Models\Operations\DeleteRepositoriesWorkspaceRepoSlugHooksUidRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteRepositoriesWorkspaceRepoSlugHooksUidResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }
        else if ($httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Delete a webhook for a workspace
     * 
     * Deletes the specified webhook subscription from the given workspace.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteWorkspacesWorkspaceHooksUidRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteWorkspacesWorkspaceHooksUidSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteWorkspacesWorkspaceHooksUidResponse
     */
	public function deleteWorkspacesWorkspaceHooksUid(
        \OpenAPI\OpenAPI\Models\Operations\DeleteWorkspacesWorkspaceHooksUidRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeleteWorkspacesWorkspaceHooksUidSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteWorkspacesWorkspaceHooksUidResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/workspaces/{workspace}/hooks/{uid}', \OpenAPI\OpenAPI\Models\Operations\DeleteWorkspacesWorkspaceHooksUidRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteWorkspacesWorkspaceHooksUidResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }
        else if ($httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get a webhook resource
     * 
     * Returns the webhook resource or subject types on which webhooks can
     * be registered.
     * 
     * Each resource/subject type contains an `events` link that returns the
     * paginated list of specific events each individual subject type can
     * emit.
     * 
     * This endpoint is publicly accessible and does not require
     * authentication or scopes.
     * 
     * Example:
     * 
     * ```
     * $ curl https://api.bitbucket.org/2.0/hook_events
     * 
     * {
     *     "repository": {
     *         "links": {
     *             "events": {
     *                 "href": "https://api.bitbucket.org/2.0/hook_events/repository"
     *             }
     *         }
     *     },
     *     "workspace": {
     *         "links": {
     *             "events": {
     *                 "href": "https://api.bitbucket.org/2.0/hook_events/workspace"
     *             }
     *         }
     *     }
     * }
     * ```
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\GetHookEventsResponse
     */
	public function getHookEvents(
    ): \OpenAPI\OpenAPI\Models\Operations\GetHookEventsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/hook_events');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetHookEventsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->subjectTypes = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\SubjectTypes', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List subscribable webhook types
     * 
     * Returns a paginated list of all valid webhook events for the
     * specified entity.
     * **The team and user webhooks are deprecated, and you should use workspace instead.
     * For more information, see [the announcement](https://developer.atlassian.com/cloud/bitbucket/bitbucket-api-teams-deprecation/).**
     * 
     * This is public data that does not require any scopes or authentication.
     * 
     * Example:
     * 
     * NOTE: The following example is a truncated response object for the `workspace` `subject_type`.
     * We return the same structure for the other `subject_type` objects.
     * 
     * ```
     * $ curl https://api.bitbucket.org/2.0/hook_events/workspace
     * {
     *     "page": 1,
     *     "pagelen": 30,
     *     "size": 21,
     *     "values": [
     *         {
     *             "category": "Repository",
     *             "description": "Whenever a repository push occurs",
     *             "event": "repo:push",
     *             "label": "Push"
     *         },
     *         {
     *             "category": "Repository",
     *             "description": "Whenever a repository fork occurs",
     *             "event": "repo:fork",
     *             "label": "Fork"
     *         },
     *         {
     *             "category": "Repository",
     *             "description": "Whenever a repository import occurs",
     *             "event": "repo:imported",
     *             "label": "Import"
     *         },
     *         ...
     *         {
     *             "category":"Pull Request",
     *             "label":"Approved",
     *             "description":"When someone has approved a pull request",
     *             "event":"pullrequest:approved"
     *         },
     *     ]
     * }
     * ```
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetHookEventsSubjectTypeRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetHookEventsSubjectTypeSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetHookEventsSubjectTypeResponse
     */
	public function getHookEventsSubjectType(
        \OpenAPI\OpenAPI\Models\Operations\GetHookEventsSubjectTypeRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetHookEventsSubjectTypeSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetHookEventsSubjectTypeResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/hook_events/{subject_type}', \OpenAPI\OpenAPI\Models\Operations\GetHookEventsSubjectTypeRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetHookEventsSubjectTypeResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->paginatedHookEvents = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PaginatedHookEvents', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List webhooks for a repository
     * 
     * Returns a paginated list of webhooks installed on this repository.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetRepositoriesWorkspaceRepoSlugHooksRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetRepositoriesWorkspaceRepoSlugHooksSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetRepositoriesWorkspaceRepoSlugHooksResponse
     */
	public function getRepositoriesWorkspaceRepoSlugHooks(
        \OpenAPI\OpenAPI\Models\Operations\GetRepositoriesWorkspaceRepoSlugHooksRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetRepositoriesWorkspaceRepoSlugHooksSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetRepositoriesWorkspaceRepoSlugHooksResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/repositories/{workspace}/{repo_slug}/hooks', \OpenAPI\OpenAPI\Models\Operations\GetRepositoriesWorkspaceRepoSlugHooksRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetRepositoriesWorkspaceRepoSlugHooksResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->paginatedWebhookSubscriptions = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PaginatedWebhookSubscriptions', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get a webhook for a repository
     * 
     * Returns the webhook with the specified id installed on the specified
     * repository.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetRepositoriesWorkspaceRepoSlugHooksUidRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetRepositoriesWorkspaceRepoSlugHooksUidSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetRepositoriesWorkspaceRepoSlugHooksUidResponse
     */
	public function getRepositoriesWorkspaceRepoSlugHooksUid(
        \OpenAPI\OpenAPI\Models\Operations\GetRepositoriesWorkspaceRepoSlugHooksUidRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetRepositoriesWorkspaceRepoSlugHooksUidSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetRepositoriesWorkspaceRepoSlugHooksUidResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/repositories/{workspace}/{repo_slug}/hooks/{uid}', \OpenAPI\OpenAPI\Models\Operations\GetRepositoriesWorkspaceRepoSlugHooksUidRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetRepositoriesWorkspaceRepoSlugHooksUidResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->webhookSubscription = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List webhooks for a workspace
     * 
     * Returns a paginated list of webhooks installed on this workspace.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetWorkspacesWorkspaceHooksRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetWorkspacesWorkspaceHooksSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetWorkspacesWorkspaceHooksResponse
     */
	public function getWorkspacesWorkspaceHooks(
        \OpenAPI\OpenAPI\Models\Operations\GetWorkspacesWorkspaceHooksRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetWorkspacesWorkspaceHooksSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetWorkspacesWorkspaceHooksResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/workspaces/{workspace}/hooks', \OpenAPI\OpenAPI\Models\Operations\GetWorkspacesWorkspaceHooksRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetWorkspacesWorkspaceHooksResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->paginatedWebhookSubscriptions = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PaginatedWebhookSubscriptions', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get a webhook for a workspace
     * 
     * Returns the webhook with the specified id installed on the given
     * workspace.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetWorkspacesWorkspaceHooksUidRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetWorkspacesWorkspaceHooksUidSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetWorkspacesWorkspaceHooksUidResponse
     */
	public function getWorkspacesWorkspaceHooksUid(
        \OpenAPI\OpenAPI\Models\Operations\GetWorkspacesWorkspaceHooksUidRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetWorkspacesWorkspaceHooksUidSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetWorkspacesWorkspaceHooksUidResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/workspaces/{workspace}/hooks/{uid}', \OpenAPI\OpenAPI\Models\Operations\GetWorkspacesWorkspaceHooksUidRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetWorkspacesWorkspaceHooksUidResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->webhookSubscription = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create a webhook for a repository
     * 
     * Creates a new webhook on the specified repository.
     * 
     * Example:
     * 
     * ```
     * $ curl -X POST -u credentials -H 'Content-Type: application/json'
     *   https://api.bitbucket.org/2.0/repositories/my-workspace/my-repo-slug/hooks
     *   -d '
     *     {
     *       "description": "Webhook Description",
     *       "url": "https://example.com/",
     *       "active": true,
     *       "events": [
     *         "repo:push",
     *         "issue:created",
     *         "issue:updated"
     *       ]
     *     }'
     * ```
     * 
     * Note that this call requires the webhook scope, as well as any scope
     * that applies to the events that the webhook subscribes to. In the
     * example above that means: `webhook`, `repository` and `issue`.
     * 
     * Also note that the `url` must properly resolve and cannot be an
     * internal, non-routed address.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostRepositoriesWorkspaceRepoSlugHooksRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PostRepositoriesWorkspaceRepoSlugHooksSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PostRepositoriesWorkspaceRepoSlugHooksResponse
     */
	public function postRepositoriesWorkspaceRepoSlugHooks(
        \OpenAPI\OpenAPI\Models\Operations\PostRepositoriesWorkspaceRepoSlugHooksRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PostRepositoriesWorkspaceRepoSlugHooksSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PostRepositoriesWorkspaceRepoSlugHooksResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/repositories/{workspace}/{repo_slug}/hooks', \OpenAPI\OpenAPI\Models\Operations\PostRepositoriesWorkspaceRepoSlugHooksRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostRepositoriesWorkspaceRepoSlugHooksResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->webhookSubscription = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create a webhook for a workspace
     * 
     * Creates a new webhook on the specified workspace.
     * 
     * Workspace webhooks are fired for events from all repositories contained
     * by that workspace.
     * 
     * Example:
     * 
     * ```
     * $ curl -X POST -u credentials -H 'Content-Type: application/json'
     *   https://api.bitbucket.org/2.0/workspaces/my-workspace/hooks
     *   -d '
     *     {
     *       "description": "Webhook Description",
     *       "url": "https://example.com/",
     *       "active": true,
     *       "events": [
     *         "repo:push",
     *         "issue:created",
     *         "issue:updated"
     *       ]
     *     }'
     * ```
     * 
     * This call requires the webhook scope, as well as any scope
     * that applies to the events that the webhook subscribes to. In the
     * example above that means: `webhook`, `repository` and `issue`.
     * 
     * The `url` must properly resolve and cannot be an internal, non-routed address.
     * 
     * Only workspace owners can install webhooks on workspaces.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostWorkspacesWorkspaceHooksRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PostWorkspacesWorkspaceHooksSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PostWorkspacesWorkspaceHooksResponse
     */
	public function postWorkspacesWorkspaceHooks(
        \OpenAPI\OpenAPI\Models\Operations\PostWorkspacesWorkspaceHooksRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PostWorkspacesWorkspaceHooksSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PostWorkspacesWorkspaceHooksResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/workspaces/{workspace}/hooks', \OpenAPI\OpenAPI\Models\Operations\PostWorkspacesWorkspaceHooksRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostWorkspacesWorkspaceHooksResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->webhookSubscription = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update a webhook for a repository
     * 
     * Updates the specified webhook subscription.
     * 
     * The following properties can be mutated:
     * 
     * * `description`
     * * `url`
     * * `active`
     * * `events`
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PutRepositoriesWorkspaceRepoSlugHooksUidRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PutRepositoriesWorkspaceRepoSlugHooksUidSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PutRepositoriesWorkspaceRepoSlugHooksUidResponse
     */
	public function putRepositoriesWorkspaceRepoSlugHooksUid(
        \OpenAPI\OpenAPI\Models\Operations\PutRepositoriesWorkspaceRepoSlugHooksUidRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PutRepositoriesWorkspaceRepoSlugHooksUidSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PutRepositoriesWorkspaceRepoSlugHooksUidResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/repositories/{workspace}/{repo_slug}/hooks/{uid}', \OpenAPI\OpenAPI\Models\Operations\PutRepositoriesWorkspaceRepoSlugHooksUidRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PutRepositoriesWorkspaceRepoSlugHooksUidResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->webhookSubscription = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update a webhook for a workspace
     * 
     * Updates the specified webhook subscription.
     * 
     * The following properties can be mutated:
     * 
     * * `description`
     * * `url`
     * * `active`
     * * `events`
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PutWorkspacesWorkspaceHooksUidRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PutWorkspacesWorkspaceHooksUidSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PutWorkspacesWorkspaceHooksUidResponse
     */
	public function putWorkspacesWorkspaceHooksUid(
        \OpenAPI\OpenAPI\Models\Operations\PutWorkspacesWorkspaceHooksUidRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PutWorkspacesWorkspaceHooksUidSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PutWorkspacesWorkspaceHooksUidResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/workspaces/{workspace}/hooks/{uid}', \OpenAPI\OpenAPI\Models\Operations\PutWorkspacesWorkspaceHooksUidRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PutWorkspacesWorkspaceHooksUidResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->webhookSubscription = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
}