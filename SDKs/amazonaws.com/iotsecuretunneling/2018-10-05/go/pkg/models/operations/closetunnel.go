// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// CloseTunnelXAmzTargetEnum
type CloseTunnelXAmzTargetEnum string

const (
	CloseTunnelXAmzTargetEnumIoTSecuredTunnelingCloseTunnel CloseTunnelXAmzTargetEnum = "IoTSecuredTunneling.CloseTunnel"
)

func (e CloseTunnelXAmzTargetEnum) ToPointer() *CloseTunnelXAmzTargetEnum {
	return &e
}

func (e *CloseTunnelXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "IoTSecuredTunneling.CloseTunnel":
		*e = CloseTunnelXAmzTargetEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CloseTunnelXAmzTargetEnum: %v", v)
	}
}

type CloseTunnelRequest struct {
	CloseTunnelRequest shared.CloseTunnelRequest `request:"mediaType=application/json"`
	XAmzAlgorithm      *string                   `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256  *string                   `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential     *string                   `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate           *string                   `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken  *string                   `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature      *string                   `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders  *string                   `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget         CloseTunnelXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type CloseTunnelResponse struct {
	// Success
	CloseTunnelResponse map[string]interface{}
	ContentType         string
	// ResourceNotFoundException
	ResourceNotFoundException interface{}
	StatusCode                int
	RawResponse               *http.Response
}
