// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"net/http"
	"openapi/pkg/models/shared"
)

type ListBookingsQueryParams struct {
	// Allows for filtering based on creation date and time of the booking in ISO 8601 format (e.g. `2020-11-04T17:37:37Z`) and UTC timezone. Available modifiers include less than (`lt`), greater than (`gt`), lower than or equal to (`lte`), greater than or equal to (`gte`) and equal to (`eq`). Usage example: `?created[lte]=2020-11-04T19:37:37Z&created[gte]=2020-11-04T15:56:37.000Z`
	Created map[string]interface{} `queryParam:"style=deepObject,explode=true,name=created"`
	// Allows for filtering based on departure date of the booking in ISO 8601 format (e.g. `2021-12-01`). Available modifiers include less than (`lt`), greater than (`gt`), lower than or equal to (`lte`), greater than or equal to (`gte`) and equal to (`eq`). Usage example: `?end[lte]=2021-12-25&end[gte]=2021-12-15`
	End map[string]interface{} `queryParam:"style=deepObject,explode=true,name=end"`
	// Pagination offset. Defaults to 0 if omitted.
	Offset *float64 `queryParam:"style=form,explode=true,name=offset"`
	// Pagination size. Defaults to 100 if omitted.
	Size *float64 `queryParam:"style=form,explode=true,name=size"`
	// Order in which the results should be sorted. Currently allows you to sort by `createdAt` and `updatedAt`. Specify multiple paramaters by separating with commas
	SortBy *string `queryParam:"style=form,explode=true,name=sortBy"`
	// Allows for filtering based on arrival date of the booking in ISO 8601 format (e.g. `2021-12-01`). Available modifiers include less than (`lt`), greater than (`gt`), lower than or equal to (`lte`), greater than or equal to (`gte`) and equal to (`eq`). Usage example: `?start[lte]=2021-12-20&start[gte]=2021-12-10`
	Start map[string]interface{} `queryParam:"style=deepObject,explode=true,name=start"`
	// Allows for filtering based on the date and time the booking was last updated, in ISO 8601 format (e.g. `2020-11-04T17:37:37Z`) and UTC timezone. Available modifiers include less than (`lt`), greater than (`gt`), lower than or equal to (`lte`), greater than or equal to (`gte`) and equal to (`eq`). Usage example: `?updated[lte]=2020-11-04T19:37:37Z&updated[gte]=2020-11-04T15:56:37.000Z`
	Updated map[string]interface{} `queryParam:"style=deepObject,explode=true,name=updated"`
}

type ListBookingsRequest struct {
	QueryParams ListBookingsQueryParams
}

// ListBookings200ApplicationJSON - Returns a paginated list of bookings (filtered based on your query parameters).
type ListBookings200ApplicationJSON struct {
	Data []shared.Booking `json:"data"`
	// Information that helps paginate through lists of resources.
	Pagination shared.Pagination `json:"pagination"`
}

type ListBookingsResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Your request was sent without or with an incorrect API key. This most frequently happens when the `x-api-key` header wasn't added or contains an incorrect value. This might also happen if you're trying to access the production API endpoints with a sandbox API key or vice versa.
	GenericError *shared.GenericError
	// Returns a paginated list of bookings (filtered based on your query parameters).
	ListBookings200ApplicationJSONObject *ListBookings200ApplicationJSON
	// Your request wasn't formatted correctly and therefore couldn't be processed. This most frequently happens when query parameters or request body values are missing, incorrectly formatted or added where they don't exist (e.g. due to typos). We're including a list of `validations` to point out where things are going wrong and should be fixed.
	ValidationError *shared.ValidationError
}
