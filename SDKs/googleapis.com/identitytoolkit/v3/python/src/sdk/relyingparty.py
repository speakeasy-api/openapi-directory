"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Relyingparty:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def identitytoolkit_relyingparty_create_auth_uri(self, request: operations.IdentitytoolkitRelyingpartyCreateAuthURIRequest, security: operations.IdentitytoolkitRelyingpartyCreateAuthURISecurity) -> operations.IdentitytoolkitRelyingpartyCreateAuthURIResponse:
        r"""Creates the URI used by the IdP to authenticate the user."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/createAuthUri'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "identitytoolkit_relyingparty_create_auth_uri_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.IdentitytoolkitRelyingpartyCreateAuthURIRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.IdentitytoolkitRelyingpartyCreateAuthURIResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.CreateAuthURIResponse])
                res.create_auth_uri_response = out

        return res

    def identitytoolkit_relyingparty_delete_account(self, request: operations.IdentitytoolkitRelyingpartyDeleteAccountRequest, security: operations.IdentitytoolkitRelyingpartyDeleteAccountSecurity) -> operations.IdentitytoolkitRelyingpartyDeleteAccountResponse:
        r"""Delete user account."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/deleteAccount'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "identitytoolkit_relyingparty_delete_account_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.IdentitytoolkitRelyingpartyDeleteAccountRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.IdentitytoolkitRelyingpartyDeleteAccountResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.DeleteAccountResponse])
                res.delete_account_response = out

        return res

    def identitytoolkit_relyingparty_download_account(self, request: operations.IdentitytoolkitRelyingpartyDownloadAccountRequest, security: operations.IdentitytoolkitRelyingpartyDownloadAccountSecurity) -> operations.IdentitytoolkitRelyingpartyDownloadAccountResponse:
        r"""Batch download user accounts."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/downloadAccount'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "identitytoolkit_relyingparty_download_account_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.IdentitytoolkitRelyingpartyDownloadAccountRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.IdentitytoolkitRelyingpartyDownloadAccountResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.DownloadAccountResponse])
                res.download_account_response = out

        return res

    def identitytoolkit_relyingparty_email_link_signin(self, request: operations.IdentitytoolkitRelyingpartyEmailLinkSigninRequest, security: operations.IdentitytoolkitRelyingpartyEmailLinkSigninSecurity) -> operations.IdentitytoolkitRelyingpartyEmailLinkSigninResponse:
        r"""Reset password for a user."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/emailLinkSignin'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "identitytoolkit_relyingparty_email_link_signin_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.IdentitytoolkitRelyingpartyEmailLinkSigninRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.IdentitytoolkitRelyingpartyEmailLinkSigninResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.EmailLinkSigninResponse])
                res.email_link_signin_response = out

        return res

    def identitytoolkit_relyingparty_get_account_info(self, request: operations.IdentitytoolkitRelyingpartyGetAccountInfoRequest, security: operations.IdentitytoolkitRelyingpartyGetAccountInfoSecurity) -> operations.IdentitytoolkitRelyingpartyGetAccountInfoResponse:
        r"""Returns the account info."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/getAccountInfo'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "identitytoolkit_relyingparty_get_account_info_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.IdentitytoolkitRelyingpartyGetAccountInfoRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.IdentitytoolkitRelyingpartyGetAccountInfoResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GetAccountInfoResponse])
                res.get_account_info_response = out

        return res

    def identitytoolkit_relyingparty_get_oob_confirmation_code(self, request: operations.IdentitytoolkitRelyingpartyGetOobConfirmationCodeRequest, security: operations.IdentitytoolkitRelyingpartyGetOobConfirmationCodeSecurity) -> operations.IdentitytoolkitRelyingpartyGetOobConfirmationCodeResponse:
        r"""Get a code for user action confirmation."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/getOobConfirmationCode'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "relyingparty", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.IdentitytoolkitRelyingpartyGetOobConfirmationCodeRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.IdentitytoolkitRelyingpartyGetOobConfirmationCodeResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GetOobConfirmationCodeResponse])
                res.get_oob_confirmation_code_response = out

        return res

    def identitytoolkit_relyingparty_get_project_config(self, request: operations.IdentitytoolkitRelyingpartyGetProjectConfigRequest, security: operations.IdentitytoolkitRelyingpartyGetProjectConfigSecurity) -> operations.IdentitytoolkitRelyingpartyGetProjectConfigResponse:
        r"""Get project configuration."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/getProjectConfig'
        
        query_params = utils.get_query_params(operations.IdentitytoolkitRelyingpartyGetProjectConfigRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.IdentitytoolkitRelyingpartyGetProjectConfigResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.IdentitytoolkitRelyingpartyGetProjectConfigResponse])
                res.identitytoolkit_relyingparty_get_project_config_response = out

        return res

    def identitytoolkit_relyingparty_get_public_keys(self, request: operations.IdentitytoolkitRelyingpartyGetPublicKeysRequest, security: operations.IdentitytoolkitRelyingpartyGetPublicKeysSecurity) -> operations.IdentitytoolkitRelyingpartyGetPublicKeysResponse:
        r"""Get token signing public key."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/publicKeys'
        
        query_params = utils.get_query_params(operations.IdentitytoolkitRelyingpartyGetPublicKeysRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.IdentitytoolkitRelyingpartyGetPublicKeysResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, str]])
                res.identitytoolkit_relyingparty_get_public_keys_response = out

        return res

    def identitytoolkit_relyingparty_get_recaptcha_param(self, request: operations.IdentitytoolkitRelyingpartyGetRecaptchaParamRequest, security: operations.IdentitytoolkitRelyingpartyGetRecaptchaParamSecurity) -> operations.IdentitytoolkitRelyingpartyGetRecaptchaParamResponse:
        r"""Get recaptcha secure param."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/getRecaptchaParam'
        
        query_params = utils.get_query_params(operations.IdentitytoolkitRelyingpartyGetRecaptchaParamRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.IdentitytoolkitRelyingpartyGetRecaptchaParamResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GetRecaptchaParamResponse])
                res.get_recaptcha_param_response = out

        return res

    def identitytoolkit_relyingparty_reset_password(self, request: operations.IdentitytoolkitRelyingpartyResetPasswordRequest, security: operations.IdentitytoolkitRelyingpartyResetPasswordSecurity) -> operations.IdentitytoolkitRelyingpartyResetPasswordResponse:
        r"""Reset password for a user."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/resetPassword'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "identitytoolkit_relyingparty_reset_password_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.IdentitytoolkitRelyingpartyResetPasswordRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.IdentitytoolkitRelyingpartyResetPasswordResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ResetPasswordResponse])
                res.reset_password_response = out

        return res

    def identitytoolkit_relyingparty_send_verification_code(self, request: operations.IdentitytoolkitRelyingpartySendVerificationCodeRequest, security: operations.IdentitytoolkitRelyingpartySendVerificationCodeSecurity) -> operations.IdentitytoolkitRelyingpartySendVerificationCodeResponse:
        r"""Send SMS verification code."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/sendVerificationCode'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "identitytoolkit_relyingparty_send_verification_code_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.IdentitytoolkitRelyingpartySendVerificationCodeRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.IdentitytoolkitRelyingpartySendVerificationCodeResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.IdentitytoolkitRelyingpartySendVerificationCodeResponse])
                res.identitytoolkit_relyingparty_send_verification_code_response = out

        return res

    def identitytoolkit_relyingparty_set_account_info(self, request: operations.IdentitytoolkitRelyingpartySetAccountInfoRequest, security: operations.IdentitytoolkitRelyingpartySetAccountInfoSecurity) -> operations.IdentitytoolkitRelyingpartySetAccountInfoResponse:
        r"""Set account info for a user."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/setAccountInfo'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "identitytoolkit_relyingparty_set_account_info_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.IdentitytoolkitRelyingpartySetAccountInfoRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.IdentitytoolkitRelyingpartySetAccountInfoResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.SetAccountInfoResponse])
                res.set_account_info_response = out

        return res

    def identitytoolkit_relyingparty_set_project_config(self, request: operations.IdentitytoolkitRelyingpartySetProjectConfigRequest, security: operations.IdentitytoolkitRelyingpartySetProjectConfigSecurity) -> operations.IdentitytoolkitRelyingpartySetProjectConfigResponse:
        r"""Set project configuration."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/setProjectConfig'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "identitytoolkit_relyingparty_set_project_config_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.IdentitytoolkitRelyingpartySetProjectConfigRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.IdentitytoolkitRelyingpartySetProjectConfigResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.IdentitytoolkitRelyingpartySetProjectConfigResponse])
                res.identitytoolkit_relyingparty_set_project_config_response = out

        return res

    def identitytoolkit_relyingparty_sign_out_user(self, request: operations.IdentitytoolkitRelyingpartySignOutUserRequest, security: operations.IdentitytoolkitRelyingpartySignOutUserSecurity) -> operations.IdentitytoolkitRelyingpartySignOutUserResponse:
        r"""Sign out user."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/signOutUser'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "identitytoolkit_relyingparty_sign_out_user_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.IdentitytoolkitRelyingpartySignOutUserRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.IdentitytoolkitRelyingpartySignOutUserResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.IdentitytoolkitRelyingpartySignOutUserResponse])
                res.identitytoolkit_relyingparty_sign_out_user_response = out

        return res

    def identitytoolkit_relyingparty_signup_new_user(self, request: operations.IdentitytoolkitRelyingpartySignupNewUserRequest, security: operations.IdentitytoolkitRelyingpartySignupNewUserSecurity) -> operations.IdentitytoolkitRelyingpartySignupNewUserResponse:
        r"""Signup new user."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/signupNewUser'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "identitytoolkit_relyingparty_signup_new_user_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.IdentitytoolkitRelyingpartySignupNewUserRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.IdentitytoolkitRelyingpartySignupNewUserResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.SignupNewUserResponse])
                res.signup_new_user_response = out

        return res

    def identitytoolkit_relyingparty_upload_account(self, request: operations.IdentitytoolkitRelyingpartyUploadAccountRequest, security: operations.IdentitytoolkitRelyingpartyUploadAccountSecurity) -> operations.IdentitytoolkitRelyingpartyUploadAccountResponse:
        r"""Batch upload existing user accounts."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/uploadAccount'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "identitytoolkit_relyingparty_upload_account_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.IdentitytoolkitRelyingpartyUploadAccountRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.IdentitytoolkitRelyingpartyUploadAccountResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.UploadAccountResponse])
                res.upload_account_response = out

        return res

    def identitytoolkit_relyingparty_verify_assertion(self, request: operations.IdentitytoolkitRelyingpartyVerifyAssertionRequest, security: operations.IdentitytoolkitRelyingpartyVerifyAssertionSecurity) -> operations.IdentitytoolkitRelyingpartyVerifyAssertionResponse:
        r"""Verifies the assertion returned by the IdP."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/verifyAssertion'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "identitytoolkit_relyingparty_verify_assertion_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.IdentitytoolkitRelyingpartyVerifyAssertionRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.IdentitytoolkitRelyingpartyVerifyAssertionResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.VerifyAssertionResponse])
                res.verify_assertion_response = out

        return res

    def identitytoolkit_relyingparty_verify_custom_token(self, request: operations.IdentitytoolkitRelyingpartyVerifyCustomTokenRequest, security: operations.IdentitytoolkitRelyingpartyVerifyCustomTokenSecurity) -> operations.IdentitytoolkitRelyingpartyVerifyCustomTokenResponse:
        r"""Verifies the developer asserted ID token."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/verifyCustomToken'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "identitytoolkit_relyingparty_verify_custom_token_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.IdentitytoolkitRelyingpartyVerifyCustomTokenRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.IdentitytoolkitRelyingpartyVerifyCustomTokenResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.VerifyCustomTokenResponse])
                res.verify_custom_token_response = out

        return res

    def identitytoolkit_relyingparty_verify_password(self, request: operations.IdentitytoolkitRelyingpartyVerifyPasswordRequest, security: operations.IdentitytoolkitRelyingpartyVerifyPasswordSecurity) -> operations.IdentitytoolkitRelyingpartyVerifyPasswordResponse:
        r"""Verifies the user entered password."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/verifyPassword'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "identitytoolkit_relyingparty_verify_password_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.IdentitytoolkitRelyingpartyVerifyPasswordRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.IdentitytoolkitRelyingpartyVerifyPasswordResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.VerifyPasswordResponse])
                res.verify_password_response = out

        return res

    def identitytoolkit_relyingparty_verify_phone_number(self, request: operations.IdentitytoolkitRelyingpartyVerifyPhoneNumberRequest, security: operations.IdentitytoolkitRelyingpartyVerifyPhoneNumberSecurity) -> operations.IdentitytoolkitRelyingpartyVerifyPhoneNumberResponse:
        r"""Verifies ownership of a phone number and creates/updates the user account accordingly."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/verifyPhoneNumber'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "identitytoolkit_relyingparty_verify_phone_number_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.IdentitytoolkitRelyingpartyVerifyPhoneNumberRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.IdentitytoolkitRelyingpartyVerifyPhoneNumberResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.IdentitytoolkitRelyingpartyVerifyPhoneNumberResponse])
                res.identitytoolkit_relyingparty_verify_phone_number_response = out

        return res

    