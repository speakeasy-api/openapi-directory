"use strict";
/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.RunInstancesRequest = exports.RunInstancesRequestTagSpecifications = exports.RunInstancesRequestTagSpecificationsTags = exports.RunInstancesRequestTagSpecificationsResourceTypeEnum = exports.RunInstancesRequestNetworkInterfaces = exports.RunInstancesRequestNetworkInterfacesPrivateIpAddresses = exports.RunInstancesRequestNetworkInterfacesIpv6Prefixes = exports.RunInstancesRequestNetworkInterfacesIpv6Addresses = exports.RunInstancesRequestNetworkInterfacesIpv4Prefixes = exports.RunInstancesRequestLicenseSpecifications = exports.RunInstancesRequestIpv6Addresses = exports.RunInstancesRequestInstanceInitiatedShutdownBehaviorEnum = exports.RunInstancesRequestIamInstanceProfile = exports.RunInstancesRequestElasticInferenceAccelerators = exports.RunInstancesRequestBlockDeviceMappings = exports.RunInstancesRequestBlockDeviceMappingsEbs = exports.RunInstancesRequestBlockDeviceMappingsEbsVolumeTypeEnum = void 0;
var utils_1 = require("../../../internal/utils");
var capacityreservationspecification_1 = require("./capacityreservationspecification");
var cpuoptionsrequest_1 = require("./cpuoptionsrequest");
var creditspecificationrequest_1 = require("./creditspecificationrequest");
var elasticgpuspecifications_1 = require("./elasticgpuspecifications");
var enclaveoptionsrequest_1 = require("./enclaveoptionsrequest");
var hibernationoptionsrequest_1 = require("./hibernationoptionsrequest");
var instancemaintenanceoptionsrequest_1 = require("./instancemaintenanceoptionsrequest");
var instancemarketoptionsrequest_1 = require("./instancemarketoptionsrequest");
var instancemetadataoptionsrequest_1 = require("./instancemetadataoptionsrequest");
var instancetypeenum_1 = require("./instancetypeenum");
var launchtemplatespecification_1 = require("./launchtemplatespecification");
var placement_1 = require("./placement");
var privatednsnameoptionsrequest_1 = require("./privatednsnameoptionsrequest");
var runinstancesmonitoringenabled_1 = require("./runinstancesmonitoringenabled");
/**
 * The volume type. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSVolumeTypes.html">Amazon EBS volume types</a> in the <i>Amazon EC2 User Guide</i>. If the volume type is <code>io1</code> or <code>io2</code>, you must specify the IOPS that the volume supports.
 */
var RunInstancesRequestBlockDeviceMappingsEbsVolumeTypeEnum;
(function (RunInstancesRequestBlockDeviceMappingsEbsVolumeTypeEnum) {
    RunInstancesRequestBlockDeviceMappingsEbsVolumeTypeEnum["Standard"] = "standard";
    RunInstancesRequestBlockDeviceMappingsEbsVolumeTypeEnum["Io1"] = "io1";
    RunInstancesRequestBlockDeviceMappingsEbsVolumeTypeEnum["Io2"] = "io2";
    RunInstancesRequestBlockDeviceMappingsEbsVolumeTypeEnum["Gp2"] = "gp2";
    RunInstancesRequestBlockDeviceMappingsEbsVolumeTypeEnum["Sc1"] = "sc1";
    RunInstancesRequestBlockDeviceMappingsEbsVolumeTypeEnum["St1"] = "st1";
    RunInstancesRequestBlockDeviceMappingsEbsVolumeTypeEnum["Gp3"] = "gp3";
})(RunInstancesRequestBlockDeviceMappingsEbsVolumeTypeEnum = exports.RunInstancesRequestBlockDeviceMappingsEbsVolumeTypeEnum || (exports.RunInstancesRequestBlockDeviceMappingsEbsVolumeTypeEnum = {}));
/**
 * Parameters used to automatically set up EBS volumes when the instance is launched.
 */
var RunInstancesRequestBlockDeviceMappingsEbs = /** @class */ (function (_super) {
    __extends(RunInstancesRequestBlockDeviceMappingsEbs, _super);
    function RunInstancesRequestBlockDeviceMappingsEbs() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", Boolean)
    ], RunInstancesRequestBlockDeviceMappingsEbs.prototype, "deleteOnTermination", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", Boolean)
    ], RunInstancesRequestBlockDeviceMappingsEbs.prototype, "encrypted", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", Number)
    ], RunInstancesRequestBlockDeviceMappingsEbs.prototype, "iops", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], RunInstancesRequestBlockDeviceMappingsEbs.prototype, "kmsKeyId", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], RunInstancesRequestBlockDeviceMappingsEbs.prototype, "outpostArn", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], RunInstancesRequestBlockDeviceMappingsEbs.prototype, "snapshotId", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", Number)
    ], RunInstancesRequestBlockDeviceMappingsEbs.prototype, "throughput", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", Number)
    ], RunInstancesRequestBlockDeviceMappingsEbs.prototype, "volumeSize", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], RunInstancesRequestBlockDeviceMappingsEbs.prototype, "volumeType", void 0);
    return RunInstancesRequestBlockDeviceMappingsEbs;
}(utils_1.SpeakeasyBase));
exports.RunInstancesRequestBlockDeviceMappingsEbs = RunInstancesRequestBlockDeviceMappingsEbs;
/**
 * Describes a block device mapping, which defines the EBS volumes and instance store volumes to attach to an instance at launch.
 */
var RunInstancesRequestBlockDeviceMappings = /** @class */ (function (_super) {
    __extends(RunInstancesRequestBlockDeviceMappings, _super);
    function RunInstancesRequestBlockDeviceMappings() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], RunInstancesRequestBlockDeviceMappings.prototype, "deviceName", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", RunInstancesRequestBlockDeviceMappingsEbs)
    ], RunInstancesRequestBlockDeviceMappings.prototype, "ebs", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], RunInstancesRequestBlockDeviceMappings.prototype, "noDevice", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], RunInstancesRequestBlockDeviceMappings.prototype, "virtualName", void 0);
    return RunInstancesRequestBlockDeviceMappings;
}(utils_1.SpeakeasyBase));
exports.RunInstancesRequestBlockDeviceMappings = RunInstancesRequestBlockDeviceMappings;
/**
 *  Describes an elastic inference accelerator.
 */
var RunInstancesRequestElasticInferenceAccelerators = /** @class */ (function (_super) {
    __extends(RunInstancesRequestElasticInferenceAccelerators, _super);
    function RunInstancesRequestElasticInferenceAccelerators() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", Number)
    ], RunInstancesRequestElasticInferenceAccelerators.prototype, "count", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], RunInstancesRequestElasticInferenceAccelerators.prototype, "type", void 0);
    return RunInstancesRequestElasticInferenceAccelerators;
}(utils_1.SpeakeasyBase));
exports.RunInstancesRequestElasticInferenceAccelerators = RunInstancesRequestElasticInferenceAccelerators;
/**
 * The name or Amazon Resource Name (ARN) of an IAM instance profile.
 */
var RunInstancesRequestIamInstanceProfile = /** @class */ (function (_super) {
    __extends(RunInstancesRequestIamInstanceProfile, _super);
    function RunInstancesRequestIamInstanceProfile() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], RunInstancesRequestIamInstanceProfile.prototype, "arn", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], RunInstancesRequestIamInstanceProfile.prototype, "name", void 0);
    return RunInstancesRequestIamInstanceProfile;
}(utils_1.SpeakeasyBase));
exports.RunInstancesRequestIamInstanceProfile = RunInstancesRequestIamInstanceProfile;
/**
 * <p>Indicates whether an instance stops or terminates when you initiate shutdown from the instance (using the operating system command for system shutdown).</p> <p>Default: <code>stop</code> </p>
 */
var RunInstancesRequestInstanceInitiatedShutdownBehaviorEnum;
(function (RunInstancesRequestInstanceInitiatedShutdownBehaviorEnum) {
    RunInstancesRequestInstanceInitiatedShutdownBehaviorEnum["Stop"] = "stop";
    RunInstancesRequestInstanceInitiatedShutdownBehaviorEnum["Terminate"] = "terminate";
})(RunInstancesRequestInstanceInitiatedShutdownBehaviorEnum = exports.RunInstancesRequestInstanceInitiatedShutdownBehaviorEnum || (exports.RunInstancesRequestInstanceInitiatedShutdownBehaviorEnum = {}));
/**
 * Describes an IPv6 address.
 */
var RunInstancesRequestIpv6Addresses = /** @class */ (function (_super) {
    __extends(RunInstancesRequestIpv6Addresses, _super);
    function RunInstancesRequestIpv6Addresses() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], RunInstancesRequestIpv6Addresses.prototype, "ipv6Address", void 0);
    return RunInstancesRequestIpv6Addresses;
}(utils_1.SpeakeasyBase));
exports.RunInstancesRequestIpv6Addresses = RunInstancesRequestIpv6Addresses;
/**
 * Describes a license configuration.
 */
var RunInstancesRequestLicenseSpecifications = /** @class */ (function (_super) {
    __extends(RunInstancesRequestLicenseSpecifications, _super);
    function RunInstancesRequestLicenseSpecifications() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], RunInstancesRequestLicenseSpecifications.prototype, "licenseConfigurationArn", void 0);
    return RunInstancesRequestLicenseSpecifications;
}(utils_1.SpeakeasyBase));
exports.RunInstancesRequestLicenseSpecifications = RunInstancesRequestLicenseSpecifications;
/**
 * Describes the IPv4 prefix option for a network interface.
 */
var RunInstancesRequestNetworkInterfacesIpv4Prefixes = /** @class */ (function (_super) {
    __extends(RunInstancesRequestNetworkInterfacesIpv4Prefixes, _super);
    function RunInstancesRequestNetworkInterfacesIpv4Prefixes() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], RunInstancesRequestNetworkInterfacesIpv4Prefixes.prototype, "ipv4Prefix", void 0);
    return RunInstancesRequestNetworkInterfacesIpv4Prefixes;
}(utils_1.SpeakeasyBase));
exports.RunInstancesRequestNetworkInterfacesIpv4Prefixes = RunInstancesRequestNetworkInterfacesIpv4Prefixes;
/**
 * Describes an IPv6 address.
 */
var RunInstancesRequestNetworkInterfacesIpv6Addresses = /** @class */ (function (_super) {
    __extends(RunInstancesRequestNetworkInterfacesIpv6Addresses, _super);
    function RunInstancesRequestNetworkInterfacesIpv6Addresses() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], RunInstancesRequestNetworkInterfacesIpv6Addresses.prototype, "ipv6Address", void 0);
    return RunInstancesRequestNetworkInterfacesIpv6Addresses;
}(utils_1.SpeakeasyBase));
exports.RunInstancesRequestNetworkInterfacesIpv6Addresses = RunInstancesRequestNetworkInterfacesIpv6Addresses;
/**
 * Describes the IPv4 prefix option for a network interface.
 */
var RunInstancesRequestNetworkInterfacesIpv6Prefixes = /** @class */ (function (_super) {
    __extends(RunInstancesRequestNetworkInterfacesIpv6Prefixes, _super);
    function RunInstancesRequestNetworkInterfacesIpv6Prefixes() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], RunInstancesRequestNetworkInterfacesIpv6Prefixes.prototype, "ipv6Prefix", void 0);
    return RunInstancesRequestNetworkInterfacesIpv6Prefixes;
}(utils_1.SpeakeasyBase));
exports.RunInstancesRequestNetworkInterfacesIpv6Prefixes = RunInstancesRequestNetworkInterfacesIpv6Prefixes;
/**
 * Describes a secondary private IPv4 address for a network interface.
 */
var RunInstancesRequestNetworkInterfacesPrivateIpAddresses = /** @class */ (function (_super) {
    __extends(RunInstancesRequestNetworkInterfacesPrivateIpAddresses, _super);
    function RunInstancesRequestNetworkInterfacesPrivateIpAddresses() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", Boolean)
    ], RunInstancesRequestNetworkInterfacesPrivateIpAddresses.prototype, "primary", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], RunInstancesRequestNetworkInterfacesPrivateIpAddresses.prototype, "privateIpAddress", void 0);
    return RunInstancesRequestNetworkInterfacesPrivateIpAddresses;
}(utils_1.SpeakeasyBase));
exports.RunInstancesRequestNetworkInterfacesPrivateIpAddresses = RunInstancesRequestNetworkInterfacesPrivateIpAddresses;
/**
 * Describes a network interface.
 */
var RunInstancesRequestNetworkInterfaces = /** @class */ (function (_super) {
    __extends(RunInstancesRequestNetworkInterfaces, _super);
    function RunInstancesRequestNetworkInterfaces() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", Boolean)
    ], RunInstancesRequestNetworkInterfaces.prototype, "associateCarrierIpAddress", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", Boolean)
    ], RunInstancesRequestNetworkInterfaces.prototype, "associatePublicIpAddress", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", Boolean)
    ], RunInstancesRequestNetworkInterfaces.prototype, "deleteOnTermination", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], RunInstancesRequestNetworkInterfaces.prototype, "description", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", Number)
    ], RunInstancesRequestNetworkInterfaces.prototype, "deviceIndex", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", Array)
    ], RunInstancesRequestNetworkInterfaces.prototype, "groups", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], RunInstancesRequestNetworkInterfaces.prototype, "interfaceType", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", Number)
    ], RunInstancesRequestNetworkInterfaces.prototype, "ipv4PrefixCount", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({
            elemType: RunInstancesRequestNetworkInterfacesIpv4Prefixes,
        }),
        __metadata("design:type", Array)
    ], RunInstancesRequestNetworkInterfaces.prototype, "ipv4Prefixes", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", Number)
    ], RunInstancesRequestNetworkInterfaces.prototype, "ipv6AddressCount", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({
            elemType: RunInstancesRequestNetworkInterfacesIpv6Addresses,
        }),
        __metadata("design:type", Array)
    ], RunInstancesRequestNetworkInterfaces.prototype, "ipv6Addresses", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", Number)
    ], RunInstancesRequestNetworkInterfaces.prototype, "ipv6PrefixCount", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({
            elemType: RunInstancesRequestNetworkInterfacesIpv6Prefixes,
        }),
        __metadata("design:type", Array)
    ], RunInstancesRequestNetworkInterfaces.prototype, "ipv6Prefixes", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", Number)
    ], RunInstancesRequestNetworkInterfaces.prototype, "networkCardIndex", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], RunInstancesRequestNetworkInterfaces.prototype, "networkInterfaceId", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], RunInstancesRequestNetworkInterfaces.prototype, "privateIpAddress", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({
            elemType: RunInstancesRequestNetworkInterfacesPrivateIpAddresses,
        }),
        __metadata("design:type", Array)
    ], RunInstancesRequestNetworkInterfaces.prototype, "privateIpAddresses", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", Number)
    ], RunInstancesRequestNetworkInterfaces.prototype, "secondaryPrivateIpAddressCount", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], RunInstancesRequestNetworkInterfaces.prototype, "subnetId", void 0);
    return RunInstancesRequestNetworkInterfaces;
}(utils_1.SpeakeasyBase));
exports.RunInstancesRequestNetworkInterfaces = RunInstancesRequestNetworkInterfaces;
/**
 * The type of resource to tag on creation.
 */
var RunInstancesRequestTagSpecificationsResourceTypeEnum;
(function (RunInstancesRequestTagSpecificationsResourceTypeEnum) {
    RunInstancesRequestTagSpecificationsResourceTypeEnum["CapacityReservation"] = "capacity-reservation";
    RunInstancesRequestTagSpecificationsResourceTypeEnum["ClientVpnEndpoint"] = "client-vpn-endpoint";
    RunInstancesRequestTagSpecificationsResourceTypeEnum["CustomerGateway"] = "customer-gateway";
    RunInstancesRequestTagSpecificationsResourceTypeEnum["CarrierGateway"] = "carrier-gateway";
    RunInstancesRequestTagSpecificationsResourceTypeEnum["CoipPool"] = "coip-pool";
    RunInstancesRequestTagSpecificationsResourceTypeEnum["DedicatedHost"] = "dedicated-host";
    RunInstancesRequestTagSpecificationsResourceTypeEnum["DhcpOptions"] = "dhcp-options";
    RunInstancesRequestTagSpecificationsResourceTypeEnum["EgressOnlyInternetGateway"] = "egress-only-internet-gateway";
    RunInstancesRequestTagSpecificationsResourceTypeEnum["ElasticIp"] = "elastic-ip";
    RunInstancesRequestTagSpecificationsResourceTypeEnum["ElasticGpu"] = "elastic-gpu";
    RunInstancesRequestTagSpecificationsResourceTypeEnum["ExportImageTask"] = "export-image-task";
    RunInstancesRequestTagSpecificationsResourceTypeEnum["ExportInstanceTask"] = "export-instance-task";
    RunInstancesRequestTagSpecificationsResourceTypeEnum["Fleet"] = "fleet";
    RunInstancesRequestTagSpecificationsResourceTypeEnum["FpgaImage"] = "fpga-image";
    RunInstancesRequestTagSpecificationsResourceTypeEnum["HostReservation"] = "host-reservation";
    RunInstancesRequestTagSpecificationsResourceTypeEnum["Image"] = "image";
    RunInstancesRequestTagSpecificationsResourceTypeEnum["ImportImageTask"] = "import-image-task";
    RunInstancesRequestTagSpecificationsResourceTypeEnum["ImportSnapshotTask"] = "import-snapshot-task";
    RunInstancesRequestTagSpecificationsResourceTypeEnum["Instance"] = "instance";
    RunInstancesRequestTagSpecificationsResourceTypeEnum["InstanceEventWindow"] = "instance-event-window";
    RunInstancesRequestTagSpecificationsResourceTypeEnum["InternetGateway"] = "internet-gateway";
    RunInstancesRequestTagSpecificationsResourceTypeEnum["Ipam"] = "ipam";
    RunInstancesRequestTagSpecificationsResourceTypeEnum["IpamPool"] = "ipam-pool";
    RunInstancesRequestTagSpecificationsResourceTypeEnum["IpamScope"] = "ipam-scope";
    RunInstancesRequestTagSpecificationsResourceTypeEnum["Ipv4poolEc2"] = "ipv4pool-ec2";
    RunInstancesRequestTagSpecificationsResourceTypeEnum["Ipv6poolEc2"] = "ipv6pool-ec2";
    RunInstancesRequestTagSpecificationsResourceTypeEnum["KeyPair"] = "key-pair";
    RunInstancesRequestTagSpecificationsResourceTypeEnum["LaunchTemplate"] = "launch-template";
    RunInstancesRequestTagSpecificationsResourceTypeEnum["LocalGateway"] = "local-gateway";
    RunInstancesRequestTagSpecificationsResourceTypeEnum["LocalGatewayRouteTable"] = "local-gateway-route-table";
    RunInstancesRequestTagSpecificationsResourceTypeEnum["LocalGatewayVirtualInterface"] = "local-gateway-virtual-interface";
    RunInstancesRequestTagSpecificationsResourceTypeEnum["LocalGatewayVirtualInterfaceGroup"] = "local-gateway-virtual-interface-group";
    RunInstancesRequestTagSpecificationsResourceTypeEnum["LocalGatewayRouteTableVpcAssociation"] = "local-gateway-route-table-vpc-association";
    RunInstancesRequestTagSpecificationsResourceTypeEnum["LocalGatewayRouteTableVirtualInterfaceGroupAssociation"] = "local-gateway-route-table-virtual-interface-group-association";
    RunInstancesRequestTagSpecificationsResourceTypeEnum["Natgateway"] = "natgateway";
    RunInstancesRequestTagSpecificationsResourceTypeEnum["NetworkAcl"] = "network-acl";
    RunInstancesRequestTagSpecificationsResourceTypeEnum["NetworkInterface"] = "network-interface";
    RunInstancesRequestTagSpecificationsResourceTypeEnum["NetworkInsightsAnalysis"] = "network-insights-analysis";
    RunInstancesRequestTagSpecificationsResourceTypeEnum["NetworkInsightsPath"] = "network-insights-path";
    RunInstancesRequestTagSpecificationsResourceTypeEnum["NetworkInsightsAccessScope"] = "network-insights-access-scope";
    RunInstancesRequestTagSpecificationsResourceTypeEnum["NetworkInsightsAccessScopeAnalysis"] = "network-insights-access-scope-analysis";
    RunInstancesRequestTagSpecificationsResourceTypeEnum["PlacementGroup"] = "placement-group";
    RunInstancesRequestTagSpecificationsResourceTypeEnum["PrefixList"] = "prefix-list";
    RunInstancesRequestTagSpecificationsResourceTypeEnum["ReplaceRootVolumeTask"] = "replace-root-volume-task";
    RunInstancesRequestTagSpecificationsResourceTypeEnum["ReservedInstances"] = "reserved-instances";
    RunInstancesRequestTagSpecificationsResourceTypeEnum["RouteTable"] = "route-table";
    RunInstancesRequestTagSpecificationsResourceTypeEnum["SecurityGroup"] = "security-group";
    RunInstancesRequestTagSpecificationsResourceTypeEnum["SecurityGroupRule"] = "security-group-rule";
    RunInstancesRequestTagSpecificationsResourceTypeEnum["Snapshot"] = "snapshot";
    RunInstancesRequestTagSpecificationsResourceTypeEnum["SpotFleetRequest"] = "spot-fleet-request";
    RunInstancesRequestTagSpecificationsResourceTypeEnum["SpotInstancesRequest"] = "spot-instances-request";
    RunInstancesRequestTagSpecificationsResourceTypeEnum["Subnet"] = "subnet";
    RunInstancesRequestTagSpecificationsResourceTypeEnum["SubnetCidrReservation"] = "subnet-cidr-reservation";
    RunInstancesRequestTagSpecificationsResourceTypeEnum["TrafficMirrorFilter"] = "traffic-mirror-filter";
    RunInstancesRequestTagSpecificationsResourceTypeEnum["TrafficMirrorSession"] = "traffic-mirror-session";
    RunInstancesRequestTagSpecificationsResourceTypeEnum["TrafficMirrorTarget"] = "traffic-mirror-target";
    RunInstancesRequestTagSpecificationsResourceTypeEnum["TransitGateway"] = "transit-gateway";
    RunInstancesRequestTagSpecificationsResourceTypeEnum["TransitGatewayAttachment"] = "transit-gateway-attachment";
    RunInstancesRequestTagSpecificationsResourceTypeEnum["TransitGatewayConnectPeer"] = "transit-gateway-connect-peer";
    RunInstancesRequestTagSpecificationsResourceTypeEnum["TransitGatewayMulticastDomain"] = "transit-gateway-multicast-domain";
    RunInstancesRequestTagSpecificationsResourceTypeEnum["TransitGatewayPolicyTable"] = "transit-gateway-policy-table";
    RunInstancesRequestTagSpecificationsResourceTypeEnum["TransitGatewayRouteTable"] = "transit-gateway-route-table";
    RunInstancesRequestTagSpecificationsResourceTypeEnum["TransitGatewayRouteTableAnnouncement"] = "transit-gateway-route-table-announcement";
    RunInstancesRequestTagSpecificationsResourceTypeEnum["Volume"] = "volume";
    RunInstancesRequestTagSpecificationsResourceTypeEnum["Vpc"] = "vpc";
    RunInstancesRequestTagSpecificationsResourceTypeEnum["VpcEndpoint"] = "vpc-endpoint";
    RunInstancesRequestTagSpecificationsResourceTypeEnum["VpcEndpointConnection"] = "vpc-endpoint-connection";
    RunInstancesRequestTagSpecificationsResourceTypeEnum["VpcEndpointService"] = "vpc-endpoint-service";
    RunInstancesRequestTagSpecificationsResourceTypeEnum["VpcEndpointServicePermission"] = "vpc-endpoint-service-permission";
    RunInstancesRequestTagSpecificationsResourceTypeEnum["VpcPeeringConnection"] = "vpc-peering-connection";
    RunInstancesRequestTagSpecificationsResourceTypeEnum["VpnConnection"] = "vpn-connection";
    RunInstancesRequestTagSpecificationsResourceTypeEnum["VpnGateway"] = "vpn-gateway";
    RunInstancesRequestTagSpecificationsResourceTypeEnum["VpcFlowLog"] = "vpc-flow-log";
    RunInstancesRequestTagSpecificationsResourceTypeEnum["CapacityReservationFleet"] = "capacity-reservation-fleet";
    RunInstancesRequestTagSpecificationsResourceTypeEnum["TrafficMirrorFilterRule"] = "traffic-mirror-filter-rule";
    RunInstancesRequestTagSpecificationsResourceTypeEnum["VpcEndpointConnectionDeviceType"] = "vpc-endpoint-connection-device-type";
    RunInstancesRequestTagSpecificationsResourceTypeEnum["VerifiedAccessInstance"] = "verified-access-instance";
    RunInstancesRequestTagSpecificationsResourceTypeEnum["VerifiedAccessGroup"] = "verified-access-group";
    RunInstancesRequestTagSpecificationsResourceTypeEnum["VerifiedAccessEndpoint"] = "verified-access-endpoint";
    RunInstancesRequestTagSpecificationsResourceTypeEnum["VerifiedAccessPolicy"] = "verified-access-policy";
    RunInstancesRequestTagSpecificationsResourceTypeEnum["VerifiedAccessTrustProvider"] = "verified-access-trust-provider";
    RunInstancesRequestTagSpecificationsResourceTypeEnum["VpnConnectionDeviceType"] = "vpn-connection-device-type";
    RunInstancesRequestTagSpecificationsResourceTypeEnum["VpcBlockPublicAccessExclusion"] = "vpc-block-public-access-exclusion";
    RunInstancesRequestTagSpecificationsResourceTypeEnum["IpamResourceDiscovery"] = "ipam-resource-discovery";
    RunInstancesRequestTagSpecificationsResourceTypeEnum["IpamResourceDiscoveryAssociation"] = "ipam-resource-discovery-association";
})(RunInstancesRequestTagSpecificationsResourceTypeEnum = exports.RunInstancesRequestTagSpecificationsResourceTypeEnum || (exports.RunInstancesRequestTagSpecificationsResourceTypeEnum = {}));
/**
 * Describes a tag.
 */
var RunInstancesRequestTagSpecificationsTags = /** @class */ (function (_super) {
    __extends(RunInstancesRequestTagSpecificationsTags, _super);
    function RunInstancesRequestTagSpecificationsTags() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], RunInstancesRequestTagSpecificationsTags.prototype, "key", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], RunInstancesRequestTagSpecificationsTags.prototype, "value", void 0);
    return RunInstancesRequestTagSpecificationsTags;
}(utils_1.SpeakeasyBase));
exports.RunInstancesRequestTagSpecificationsTags = RunInstancesRequestTagSpecificationsTags;
/**
 * <p>The tags to apply to a resource when the resource is being created. When you specify a tag, you must specify the resource type to tag, otherwise the request will fail.</p> <note> <p>The <code>Valid Values</code> lists all the resource types that can be tagged. However, the action you're using might not support tagging all of these resource types. If you try to tag a resource type that is unsupported for the action you're using, you'll get an error.</p> </note>
 */
var RunInstancesRequestTagSpecifications = /** @class */ (function (_super) {
    __extends(RunInstancesRequestTagSpecifications, _super);
    function RunInstancesRequestTagSpecifications() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], RunInstancesRequestTagSpecifications.prototype, "resourceType", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({ elemType: RunInstancesRequestTagSpecificationsTags }),
        __metadata("design:type", Array)
    ], RunInstancesRequestTagSpecifications.prototype, "tags", void 0);
    return RunInstancesRequestTagSpecifications;
}(utils_1.SpeakeasyBase));
exports.RunInstancesRequestTagSpecifications = RunInstancesRequestTagSpecifications;
var RunInstancesRequest = /** @class */ (function (_super) {
    __extends(RunInstancesRequest, _super);
    function RunInstancesRequest() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], RunInstancesRequest.prototype, "additionalInfo", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({ elemType: RunInstancesRequestBlockDeviceMappings }),
        __metadata("design:type", Array)
    ], RunInstancesRequest.prototype, "blockDeviceMappings", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", capacityreservationspecification_1.CapacityReservationSpecification)
    ], RunInstancesRequest.prototype, "capacityReservationSpecification", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], RunInstancesRequest.prototype, "clientToken", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", cpuoptionsrequest_1.CpuOptionsRequest)
    ], RunInstancesRequest.prototype, "cpuOptions", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", creditspecificationrequest_1.CreditSpecificationRequest)
    ], RunInstancesRequest.prototype, "creditSpecification", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", Boolean)
    ], RunInstancesRequest.prototype, "disableApiStop", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", Boolean)
    ], RunInstancesRequest.prototype, "disableApiTermination", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", Boolean)
    ], RunInstancesRequest.prototype, "dryRun", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", Boolean)
    ], RunInstancesRequest.prototype, "ebsOptimized", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({ elemType: elasticgpuspecifications_1.ElasticGpuSpecifications }),
        __metadata("design:type", Array)
    ], RunInstancesRequest.prototype, "elasticGpuSpecification", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({
            elemType: RunInstancesRequestElasticInferenceAccelerators,
        }),
        __metadata("design:type", Array)
    ], RunInstancesRequest.prototype, "elasticInferenceAccelerators", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", enclaveoptionsrequest_1.EnclaveOptionsRequest)
    ], RunInstancesRequest.prototype, "enclaveOptions", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", hibernationoptionsrequest_1.HibernationOptionsRequest)
    ], RunInstancesRequest.prototype, "hibernationOptions", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", RunInstancesRequestIamInstanceProfile)
    ], RunInstancesRequest.prototype, "iamInstanceProfile", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], RunInstancesRequest.prototype, "imageId", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], RunInstancesRequest.prototype, "instanceInitiatedShutdownBehavior", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", instancemarketoptionsrequest_1.InstanceMarketOptionsRequest)
    ], RunInstancesRequest.prototype, "instanceMarketOptions", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], RunInstancesRequest.prototype, "instanceType", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", Number)
    ], RunInstancesRequest.prototype, "ipv6AddressCount", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({ elemType: RunInstancesRequestIpv6Addresses }),
        __metadata("design:type", Array)
    ], RunInstancesRequest.prototype, "ipv6Addresses", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], RunInstancesRequest.prototype, "kernelId", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], RunInstancesRequest.prototype, "keyName", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", launchtemplatespecification_1.LaunchTemplateSpecification)
    ], RunInstancesRequest.prototype, "launchTemplate", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({ elemType: RunInstancesRequestLicenseSpecifications }),
        __metadata("design:type", Array)
    ], RunInstancesRequest.prototype, "licenseSpecifications", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", instancemaintenanceoptionsrequest_1.InstanceMaintenanceOptionsRequest)
    ], RunInstancesRequest.prototype, "maintenanceOptions", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", Number)
    ], RunInstancesRequest.prototype, "maxCount", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", instancemetadataoptionsrequest_1.InstanceMetadataOptionsRequest)
    ], RunInstancesRequest.prototype, "metadataOptions", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", Number)
    ], RunInstancesRequest.prototype, "minCount", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", runinstancesmonitoringenabled_1.RunInstancesMonitoringEnabled)
    ], RunInstancesRequest.prototype, "monitoring", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({ elemType: RunInstancesRequestNetworkInterfaces }),
        __metadata("design:type", Array)
    ], RunInstancesRequest.prototype, "networkInterfaces", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", placement_1.Placement)
    ], RunInstancesRequest.prototype, "placement", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", privatednsnameoptionsrequest_1.PrivateDnsNameOptionsRequest)
    ], RunInstancesRequest.prototype, "privateDnsNameOptions", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], RunInstancesRequest.prototype, "privateIpAddress", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], RunInstancesRequest.prototype, "ramdiskId", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", Array)
    ], RunInstancesRequest.prototype, "securityGroupIds", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", Array)
    ], RunInstancesRequest.prototype, "securityGroups", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], RunInstancesRequest.prototype, "subnetId", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({ elemType: RunInstancesRequestTagSpecifications }),
        __metadata("design:type", Array)
    ], RunInstancesRequest.prototype, "tagSpecifications", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], RunInstancesRequest.prototype, "userData", void 0);
    return RunInstancesRequest;
}(utils_1.SpeakeasyBase));
exports.RunInstancesRequest = RunInstancesRequest;
