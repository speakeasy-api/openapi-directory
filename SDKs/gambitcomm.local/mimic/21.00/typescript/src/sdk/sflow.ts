/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class Sflow {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Show the agent's SFLOW argument structure
   *
   * @remarks
   * Agent's SFLOW configuration with port,rule,prompt,paging_prompt,userdb,keymap
   */
  protocolSflowGetArgs(
    req: operations.ProtocolSflowGetArgsRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.ProtocolSflowGetArgsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ProtocolSflowGetArgsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/mimic/agent/{agentNum}/protocol/msg/sflow/get/args",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ProtocolSflowGetArgsResponse =
        new operations.ProtocolSflowGetArgsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.protocolSflowGetArgs200ApplicationJSONObject =
              utils.objectToClass(httpRes?.data);
          }
          break;
        case httpRes?.status == 400:
          break;
      }

      return res;
    });
  }

  /**
   * Show the agent's SFLOW configuration
   *
   * @remarks
   * Agent's SFLOW configuration with port,rule,prompt,paging_prompt,userdb,keymap
   */
  protocolSflowGetConfig(
    req: operations.ProtocolSflowGetConfigRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.ProtocolSflowGetConfigResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ProtocolSflowGetConfigRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/mimic/agent/{agentNum}/protocol/msg/sflow/get/config",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ProtocolSflowGetConfigResponse =
        new operations.ProtocolSflowGetConfigResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.configSFLOW = utils.objectToClass(
              httpRes?.data,
              shared.ConfigSFLOW
            );
          }
          break;
        case httpRes?.status == 400:
          break;
      }

      return res;
    });
  }

  /**
   * Show the agent's SFLOW statistics
   *
   * @remarks
   * Statistics of fields indicated in the headers
   */
  protocolSflowGetStatistics(
    req: operations.ProtocolSflowGetStatisticsRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.ProtocolSflowGetStatisticsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ProtocolSflowGetStatisticsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/mimic/agent/{agentNum}/protocol/msg/sflow/get/statistics",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ProtocolSflowGetStatisticsResponse =
        new operations.ProtocolSflowGetStatisticsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.protocolSflowGetStatistics200ApplicationJSONInt32Integers =
              utils.objectToClass(httpRes?.data);
          }
          break;
        case httpRes?.status == 400:
          break;
      }

      return res;
    });
  }

  /**
   * Show the SFLOW statistics headers
   *
   * @remarks
   * The headers of statistics fields
   */
  protocolSflowGetStatsHdr(
    config?: AxiosRequestConfig
  ): Promise<operations.ProtocolSflowGetStatsHdrResponse> {
    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/mimic/protocol/msg/sflow/get/stats_hdr";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ProtocolSflowGetStatsHdrResponse =
        new operations.ProtocolSflowGetStatsHdrResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.protocolSflowGetStatsHdr200ApplicationJSONStrings =
              utils.objectToClass(httpRes?.data);
          }
          break;
        case httpRes?.status == 400:
          break;
      }

      return res;
    });
  }

  /**
   * Show the agent's SFLOW traffic tracing
   *
   * @remarks
   * Trace 1 means enabled, 0 means not
   */
  protocolSflowGetTrace(
    req: operations.ProtocolSflowGetTraceRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.ProtocolSflowGetTraceResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ProtocolSflowGetTraceRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/mimic/agent/{agentNum}/protocol/msg/sflow/get/trace",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ProtocolSflowGetTraceResponse =
        new operations.ProtocolSflowGetTraceResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.configSFLOW = utils.objectToClass(
              httpRes?.data,
              shared.ConfigSFLOW
            );
          }
          break;
        case httpRes?.status == 400:
          break;
      }

      return res;
    });
  }

  /**
   * Halt SFLOW traffic
   *
   * @remarks
   * Halt SFLOW traffic
   */
  protocolSflowHalt(
    req: operations.ProtocolSflowHaltRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.ProtocolSflowHaltResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ProtocolSflowHaltRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/mimic/agent/{agentNum}/protocol/msg/sflow/halt",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "put",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ProtocolSflowHaltResponse =
        new operations.ProtocolSflowHaltResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.protocolSflowHalt200ApplicationJSONString = JSON.stringify(
              httpRes?.data
            );
          }
          break;
        case httpRes?.status == 400:
          break;
      }

      return res;
    });
  }

  /**
   * Reload SFLOW configuration before resuming traffic
   *
   * @remarks
   * Reload SFLOW configuration before resuming traffic
   */
  protocolSflowReload(
    req: operations.ProtocolSflowReloadRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.ProtocolSflowReloadResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ProtocolSflowReloadRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/mimic/agent/{agentNum}/protocol/msg/sflow/reload",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "put",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ProtocolSflowReloadResponse =
        new operations.ProtocolSflowReloadResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.protocolSflowReload200ApplicationJSONString = JSON.stringify(
              httpRes?.data
            );
          }
          break;
        case httpRes?.status == 400:
          break;
      }

      return res;
    });
  }

  /**
   * Resuming traffic
   *
   * @remarks
   * Resuming traffic
   */
  protocolSflowResume(
    req: operations.ProtocolSflowResumeRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.ProtocolSflowResumeResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ProtocolSflowResumeRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/mimic/agent/{agentNum}/protocol/msg/sflow/resume",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "put",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ProtocolSflowResumeResponse =
        new operations.ProtocolSflowResumeResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.protocolSflowResume200ApplicationJSONString = JSON.stringify(
              httpRes?.data
            );
          }
          break;
        case httpRes?.status == 400:
          break;
      }

      return res;
    });
  }

  /**
   * Set the agent's SFLOW configuration
   *
   * @remarks
   * Agent's SFLOW configuration with port,rule,prompt,paging_prompt,userdb,keymap
   */
  protocolSflowSetConfig(
    req: operations.ProtocolSflowSetConfigRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.ProtocolSflowSetConfigResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ProtocolSflowSetConfigRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/mimic/agent/{agentNum}/protocol/msg/sflow/set/config/{argument}/{value}",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "put",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ProtocolSflowSetConfigResponse =
        new operations.ProtocolSflowSetConfigResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.protocolSflowSetConfig200ApplicationJSONString = JSON.stringify(
              httpRes?.data
            );
          }
          break;
        case httpRes?.status == 400:
          break;
      }

      return res;
    });
  }

  /**
   * Set the agent's SFLOW traffic tracing
   *
   * @remarks
   * 1 to enable, 0 to disable
   */
  protocolSflowSetTrace(
    req: operations.ProtocolSflowSetTraceRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.ProtocolSflowSetTraceResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ProtocolSflowSetTraceRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/mimic/agent/{agentNum}/protocol/msg/sflow/set/trace/{enableOrNot}",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "put",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ProtocolSflowSetTraceResponse =
        new operations.ProtocolSflowSetTraceResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.protocolSflowSetTrace200ApplicationJSONString = JSON.stringify(
              httpRes?.data
            );
          }
          break;
        case httpRes?.status == 400:
          break;
      }

      return res;
    });
  }
}
