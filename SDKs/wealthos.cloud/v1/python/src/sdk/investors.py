"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations
from typing import Optional

class Investors:
    r"""The Investor endpoint allows you to create investors, update investors and retrieve investor records in bulk or individually. If a KYC/AML service has been set-up through WealthOS (e.g. Onfido), then the investor will be verified using this service.
    
    When retrieving the investor, the following fields will provide information regarding the investorâ€™s status that can be used for deciding on what subsequent investor action must be permitted.
     
    * dealing_status: Normally set to Active once KYC/AML passes, however may be independently set by administrators if required. 
     
    * kyc_aml_status - the status of the KYC/AML check 
     
    * Status - ultimate status of the investor derived from dealing_status and kcy_aml_status.
    
    If WealthOS is not set-up to manage the KYC/AML service then the wealth manager must specify the `kyc_aml_status` and `dealing_status` on investor creation and update. The `status` of the investor will be consider active only when the `kyc_aml_status : \"clear\"` and `dealing_status : \"active\"`
    """
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def create_investor(self, request: operations.CreateInvestorRequest, security: operations.CreateInvestorSecurity) -> operations.CreateInvestorResponse:
        r"""Create Investor
        Create a new investor in the system.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/tenant/investors/v1'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateInvestorResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.CreateInvestorRootTypeForInvestorCreationResponse])
                res.root_type_for_investor_creation_response = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.CreateInvestor400ApplicationJSON])
                res.create_investor_400_application_json_object = out
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.CreateInvestor401ApplicationJSON])
                res.create_investor_401_application_json_object = out
        elif http_res.status_code == 403:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.CreateInvestor403ApplicationJSON])
                res.create_investor_403_application_json_object = out
        elif http_res.status_code == 429:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.CreateInvestor429ApplicationJSON])
                res.create_investor_429_application_json_object = out
        elif http_res.status_code == 500:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.CreateInvestor500ApplicationJSON])
                res.create_investor_500_application_json_object = out

        return res

    def get_all_investors(self, request: operations.GetAllInvestorsRequest, security: operations.GetAllInvestorsSecurity) -> operations.GetAllInvestorsResponse:
        r"""Get All Investors
        Returns all the investors in an array
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/tenant/investors/v1'
        
        headers = utils.get_headers(request)
        query_params = utils.get_query_params(operations.GetAllInvestorsRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetAllInvestorsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetAllInvestors200ApplicationJSON])
                res.get_all_investors_200_application_json_object = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetAllInvestors400ApplicationJSON])
                res.get_all_investors_400_application_json_object = out
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetAllInvestors401ApplicationJSON])
                res.get_all_investors_401_application_json_object = out
        elif http_res.status_code == 403:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetAllInvestors403ApplicationJSON])
                res.get_all_investors_403_application_json_object = out
        elif http_res.status_code == 429:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetAllInvestors429ApplicationJSON])
                res.get_all_investors_429_application_json_object = out
        elif http_res.status_code == 500:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetAllInvestors500ApplicationJSON])
                res.get_all_investors_500_application_json_object = out

        return res

    def get_investor(self, request: operations.GetInvestorRequest, security: operations.GetInvestorSecurity) -> operations.GetInvestorResponse:
        r"""Get Investor
        Get details of an investor
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetInvestorRequest, base_url, '/tenant/investors/v1/{investor_id}', request)
        
        headers = utils.get_headers(request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetInvestorResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetInvestorRootTypeForInvestor])
                res.root_type_for_investor = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetInvestor400ApplicationJSON])
                res.get_investor_400_application_json_object = out
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetInvestor401ApplicationJSON])
                res.get_investor_401_application_json_object = out
        elif http_res.status_code == 403:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetInvestor403ApplicationJSON])
                res.get_investor_403_application_json_object = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetInvestor404ApplicationJSON])
                res.get_investor_404_application_json_object = out
        elif http_res.status_code == 429:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetInvestor429ApplicationJSON])
                res.get_investor_429_application_json_object = out
        elif http_res.status_code == 500:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetInvestor500ApplicationJSON])
                res.get_investor_500_application_json_object = out

        return res

    def update_investor(self, request: operations.UpdateInvestorRequest, security: operations.UpdateInvestorSecurity) -> operations.UpdateInvestorResponse:
        r"""Update Investor
        Update an existing investor. WealthOS will update only the fields sent in the request. Field mentioned as Nullable can be deleted by updating those values with null.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.UpdateInvestorRequest, base_url, '/tenant/investors/v1/{investor_id}', request)
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PATCH', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateInvestorResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.UpdateInvestorRootTypeForInvestor])
                res.root_type_for_investor = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.UpdateInvestor400ApplicationJSON])
                res.update_investor_400_application_json_object = out
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.UpdateInvestor401ApplicationJSON])
                res.update_investor_401_application_json_object = out
        elif http_res.status_code == 403:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.UpdateInvestor403ApplicationJSON])
                res.update_investor_403_application_json_object = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.UpdateInvestor404ApplicationJSON])
                res.update_investor_404_application_json_object = out
        elif http_res.status_code == 409:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.UpdateInvestor409ApplicationJSON])
                res.update_investor_409_application_json_object = out
        elif http_res.status_code == 429:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.UpdateInvestor429ApplicationJSON])
                res.update_investor_429_application_json_object = out
        elif http_res.status_code == 500:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.UpdateInvestor500ApplicationJSON])
                res.update_investor_500_application_json_object = out

        return res

    