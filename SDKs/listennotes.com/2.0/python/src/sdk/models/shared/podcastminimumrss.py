"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PodcastMinimumRss:
    r"""Triggered by your request to DELETE /podcasts/{id}, if the podcast is actually deleted."""
    
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""Podcast id, which can be used to further fetch detailed podcast metadata via `GET /podcasts/{id}`."""  
    image: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('image'), 'exclude': lambda f: f is None }})
    r"""Image url for this podcast's artwork. If you are using PRO/ENTERPRISE plan, then it's
    a high resolution image (1400x1400). If you are using FREE plan, then it's the same as **thumbnail**,
    low resolution image (300x300).
    """  
    listennotes_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('listennotes_url'), 'exclude': lambda f: f is None }})
    r"""The url of this podcast on [ListenNotes.com](https://www.ListenNotes.com)."""  
    publisher: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('publisher'), 'exclude': lambda f: f is None }})
    r"""Podcast publisher name."""  
    rss: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('rss'), 'exclude': lambda f: f is None }})
    r"""RSS url of this podcast. This field is available only in the PRO/ENTERPRISE plan."""  
    thumbnail: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('thumbnail'), 'exclude': lambda f: f is None }})
    r"""Thumbnail image url for this podcast's artwork (300x300)."""  
    title: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('title'), 'exclude': lambda f: f is None }})
    r"""Podcast name."""  
    