// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type ApplyYaraRulesRequestBodyFile struct {
	Content []byte `multipartForm:"content"`
	File    string `multipartForm:"name=file"`
}

type ApplyYaraRulesRequestBodyIsUnpackingRequiredEnum string

const (
	ApplyYaraRulesRequestBodyIsUnpackingRequiredEnumTrue  ApplyYaraRulesRequestBodyIsUnpackingRequiredEnum = "true"
	ApplyYaraRulesRequestBodyIsUnpackingRequiredEnumFalse ApplyYaraRulesRequestBodyIsUnpackingRequiredEnum = "false"
)

func (e *ApplyYaraRulesRequestBodyIsUnpackingRequiredEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "true":
		fallthrough
	case "false":
		*e = ApplyYaraRulesRequestBodyIsUnpackingRequiredEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ApplyYaraRulesRequestBodyIsUnpackingRequiredEnum: %s", s)
	}
}

type ApplyYaraRulesRequestBody struct {
	// file
	File                ApplyYaraRulesRequestBodyFile                     `multipartForm:"file"`
	IsUnpackingRequired *ApplyYaraRulesRequestBodyIsUnpackingRequiredEnum `multipartForm:"name=is_unpacking_required"`
	Rules               []string                                          `multipartForm:"name=rules"`
}

type ApplyYaraRulesRequest struct {
	Request ApplyYaraRulesRequestBody `request:"mediaType=multipart/form-data"`
}

// ApplyYaraRules200Wildcard - Yara rules
type ApplyYaraRules200Wildcard struct {
	Result *shared.ApplyYaraRule
}

type ApplyYaraRulesResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
