/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * GeonamesPlace - Full GeoNames place specification
 */
public class GeonamesPlace {
    /**
     * Fipscode (subject to change to iso code)
     */
    @JsonProperty("admin1_code")
    public String admin1Code;
    public GeonamesPlace withAdmin1Code(String admin1Code) {
        this.admin1Code = admin1Code;
        return this;
    }
    
    /**
     * GeoName ID for first administrative area
     */
    @JsonProperty("admin1_geonameid")
    public Integer admin1Geonameid;
    public GeonamesPlace withAdmin1Geonameid(Integer admin1Geonameid) {
        this.admin1Geonameid = admin1Geonameid;
        return this;
    }
    
    /**
     * Name of first administrative area
     */
    @JsonProperty("admin1_name")
    public String admin1Name;
    public GeonamesPlace withAdmin1Name(String admin1Name) {
        this.admin1Name = admin1Name;
        return this;
    }
    
    /**
     * Code for the second administrative division
     */
    @JsonProperty("admin2_code")
    public String admin2Code;
    public GeonamesPlace withAdmin2Code(String admin2Code) {
        this.admin2Code = admin2Code;
        return this;
    }
    
    /**
     * GeoName ID for second administrative area
     */
    @JsonProperty("admin2_geonameid")
    public Integer admin2Geonameid;
    public GeonamesPlace withAdmin2Geonameid(Integer admin2Geonameid) {
        this.admin2Geonameid = admin2Geonameid;
        return this;
    }
    
    /**
     * Name of second administrative area
     */
    @JsonProperty("admin2_name")
    public String admin2Name;
    public GeonamesPlace withAdmin2Name(String admin2Name) {
        this.admin2Name = admin2Name;
        return this;
    }
    
    /**
     * Code for third level administrative division
     */
    @JsonProperty("admin3_code")
    public String admin3Code;
    public GeonamesPlace withAdmin3Code(String admin3Code) {
        this.admin3Code = admin3Code;
        return this;
    }
    
    /**
     * Code for fourth level administrative division
     */
    @JsonProperty("admin4_code")
    public String admin4Code;
    public GeonamesPlace withAdmin4Code(String admin4Code) {
        this.admin4Code = admin4Code;
        return this;
    }
    
    /**
     * List of alternate ASCII names
     */
    @JsonProperty("alternatenames")
    public Object[] alternatenames;
    public GeonamesPlace withAlternatenames(Object[] alternatenames) {
        this.alternatenames = alternatenames;
        return this;
    }
    
    /**
     * Place Name (ASCII)
     */
    @JsonProperty("asciiname")
    public String asciiname;
    public GeonamesPlace withAsciiname(String asciiname) {
        this.asciiname = asciiname;
        return this;
    }
    
    /**
     * List of other countries codes mapping to this place
     */
    @JsonProperty("cc2")
    public Object[] cc2;
    public GeonamesPlace withCc2(Object[] cc2) {
        this.cc2 = cc2;
        return this;
    }
    
    /**
     * 2 Letter ISO country code
     */
    @JsonProperty("country_code")
    public String countryCode;
    public GeonamesPlace withCountryCode(String countryCode) {
        this.countryCode = countryCode;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("dataset")
    public GeonamesPlaceDatasetEnum dataset;
    public GeonamesPlace withDataset(GeonamesPlaceDatasetEnum dataset) {
        this.dataset = dataset;
        return this;
    }
    
    /**
     * Digital elevation model
     */
    @JsonProperty("dem")
    public Integer dem;
    public GeonamesPlace withDem(Integer dem) {
        this.dem = dem;
        return this;
    }
    
    /**
     * Elevation in meters
     */
    @JsonProperty("elevation")
    public Integer elevation;
    public GeonamesPlace withElevation(Integer elevation) {
        this.elevation = elevation;
        return this;
    }
    
    /**
     * GeoNames single letter feature code
     */
    @JsonProperty("feature_class")
    public GeonamesPlaceFeatureClassEnum featureClass;
    public GeonamesPlace withFeatureClass(GeonamesPlaceFeatureClassEnum featureClass) {
        this.featureClass = featureClass;
        return this;
    }
    
    /**
     * Full GeoNames feature code (http://www.geonames.org/export/codes.html)
     */
    @JsonProperty("feature_code")
    public String featureCode;
    public GeonamesPlace withFeatureCode(String featureCode) {
        this.featureCode = featureCode;
        return this;
    }
    
    /**
     * Unique identifier for GeoNames place
     */
    @JsonProperty("geonameid")
    public Integer geonameid;
    public GeonamesPlace withGeonameid(Integer geonameid) {
        this.geonameid = geonameid;
        return this;
    }
    
    /**
     * Unique place ID
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    public String id;
    public GeonamesPlace withId(String id) {
        this.id = id;
        return this;
    }
    
    /**
     * The latitude of the postcode (WGS84/ETRS89).
     * 
     * Can be a positive or negative decimal. E.g. `51.5083983`.
     * 
     * Returns an empty string if no location data is available. 
     */
    @JsonProperty("latitude")
    public Object latitude;
    public GeonamesPlace withLatitude(Object latitude) {
        this.latitude = latitude;
        return this;
    }
    
    /**
     * The longitude of the postcode (WGS84/ETRS89).
     * 
     * Can be a positive or negative decimal. E.g. -0.1283983
     * 
     * Returns an empty string if no location data is available. 
     */
    @JsonProperty("longitude")
    public Object longitude;
    public GeonamesPlace withLongitude(Object longitude) {
        this.longitude = longitude;
        return this;
    }
    
    /**
     * Datetime format
     */
    @JsonProperty("modification_date")
    public String modificationDate;
    public GeonamesPlace withModificationDate(String modificationDate) {
        this.modificationDate = modificationDate;
        return this;
    }
    
    /**
     * Place name (UTF8)
     */
    @JsonProperty("name")
    public String name;
    public GeonamesPlace withName(String name) {
        this.name = name;
        return this;
    }
    
    /**
     * Population at place. Represented as string as it could be a larger than a 32bit integer
     */
    @JsonProperty("population")
    public String population;
    public GeonamesPlace withPopulation(String population) {
        this.population = population;
        return this;
    }
    
    /**
     * The IANA timezone ID
     */
    @JsonProperty("timezone")
    public String timezone;
    public GeonamesPlace withTimezone(String timezone) {
        this.timezone = timezone;
        return this;
    }
    
}
