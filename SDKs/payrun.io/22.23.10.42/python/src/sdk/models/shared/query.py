"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class QueryQueryGroupGroupCondition:
    
    at_value_a: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('@ValueA'), 'exclude': lambda f: f is None }})
    r"""The compare condition bases' value a"""  
    at_value_b: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('@ValueB'), 'exclude': lambda f: f is None }})
    r"""The compare condition bases' value b"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class QueryQueryGroupGroupFilter:
    
    at_is_or: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('@IsOr'), 'exclude': lambda f: f is None }})
    r"""The filter bases' is or"""  
    at_property: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('@Property'), 'exclude': lambda f: f is None }})
    r"""The filter bases' property"""  
    at_value: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('@Value'), 'exclude': lambda f: f is None }})
    r"""The filter bases' value"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class QueryQueryGroupGroupOrder:
    
    at_property: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('@Property'), 'exclude': lambda f: f is None }})
    r"""The order by bases' property"""  
    
class QueryQueryGroupGroupOutputAtOutputEnum(str, Enum):
    r"""The output bases' output"""
    ELEMENT = 'Element'
    ATTRIBUTE = 'Attribute'
    VARIABLE = 'Variable'
    VARIABLE_SUM = 'VariableSum'
    VARIABLE_APPEND = 'VariableAppend'
    VARIABLE_PREPEND = 'VariablePrepend'
    ELEMENT_DATE_PART = 'ElementDatePart'
    INNER_TEXT = 'InnerText'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class QueryQueryGroupGroupOutput:
    
    at_max_length: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('@MaxLength'), 'exclude': lambda f: f is None }})
    r"""The output bases' max length"""  
    at_output: Optional[QueryQueryGroupGroupOutputAtOutputEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('@Output'), 'exclude': lambda f: f is None }})
    r"""The output bases' output"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class QueryQueryGroupGroup:
    
    at_group_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('@GroupName'), 'exclude': lambda f: f is None }})
    r"""The entity groups' group name"""  
    at_item_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('@ItemName'), 'exclude': lambda f: f is None }})
    r"""The entity groups' item name"""  
    at_loop_expression: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('@LoopExpression'), 'exclude': lambda f: f is None }})
    r"""The entity groups' loop expression"""  
    at_predicate: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('@Predicate'), 'exclude': lambda f: f is None }})
    r"""The entity groups' predicate"""  
    at_selector: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('@Selector'), 'exclude': lambda f: f is None }})
    r"""The entity groups' selector"""  
    at_unique_key_variable: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('@UniqueKeyVariable'), 'exclude': lambda f: f is None }})
    r"""The entity groups' unique key variable"""  
    condition: Optional[list[QueryQueryGroupGroupCondition]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Condition'), 'exclude': lambda f: f is None }})
    r"""The entity groups' conditions"""  
    filter: Optional[list[QueryQueryGroupGroupFilter]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Filter'), 'exclude': lambda f: f is None }})
    r"""The entity groups' filters"""  
    order: Optional[list[QueryQueryGroupGroupOrder]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Order'), 'exclude': lambda f: f is None }})
    r"""The entity groups' ordering"""  
    output: Optional[list[QueryQueryGroupGroupOutput]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Output'), 'exclude': lambda f: f is None }})
    r"""The entity groups' outputs"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class QueryQueryGroup:
    r"""The querys' groups"""
    
    group: Optional[list[QueryQueryGroupGroup]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Group'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class QueryQueryVariableVariable:
    
    at_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('@Name'), 'exclude': lambda f: f is None }})
    r"""The name value pairs' name"""  
    at_value: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('@Value'), 'exclude': lambda f: f is None }})
    r"""The name value pairs' value"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class QueryQueryVariable:
    r"""The querys' variables"""
    
    variable: Optional[list[QueryQueryVariableVariable]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Variable'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class QueryQuery:
    
    encoding: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Encoding'), 'exclude': lambda f: f is None }})
    r"""The querys' encoding"""  
    exclude_null_or_empty_elements: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ExcludeNullOrEmptyElements'), 'exclude': lambda f: f is None }})
    r"""The querys' exclude null or empty elements"""  
    groups: Optional[QueryQueryGroup] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Groups'), 'exclude': lambda f: f is None }})
    r"""The querys' groups"""  
    root_node_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('RootNodeName'), 'exclude': lambda f: f is None }})
    r"""The querys' root node name"""  
    suppress_metric_attributes: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SuppressMetricAttributes'), 'exclude': lambda f: f is None }})
    r"""The querys' suppress metric attributes"""  
    variables: Optional[QueryQueryVariable] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Variables'), 'exclude': lambda f: f is None }})
    r"""The querys' variables"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Query:
    r"""The query object to be executed against the application data."""
    
    query: Optional[QueryQuery] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Query'), 'exclude': lambda f: f is None }})  
    