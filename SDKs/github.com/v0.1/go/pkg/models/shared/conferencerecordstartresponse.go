// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// ConferenceRecordStartResponseMessageEnum - Response message
type ConferenceRecordStartResponseMessageEnum string

const (
	ConferenceRecordStartResponseMessageEnumConferenceRecordStartExecuted                 ConferenceRecordStartResponseMessageEnum = "Conference RecordStart Executed"
	ConferenceRecordStartResponseMessageEnumConferenceNameParameterMustBePresent          ConferenceRecordStartResponseMessageEnum = "ConferenceName Parameter must be present"
	ConferenceRecordStartResponseMessageEnumFileFormatParameterMustBe                     ConferenceRecordStartResponseMessageEnum = "FileFormat Parameter must be"
	ConferenceRecordStartResponseMessageEnumConferenceRecordStartFailed                   ConferenceRecordStartResponseMessageEnum = "Conference RecordStart Failed"
	ConferenceRecordStartResponseMessageEnumConferenceRecordStartFailedConferenceNotFound ConferenceRecordStartResponseMessageEnum = "Conference RecordStart Failed -- Conference not found"
)

func (e ConferenceRecordStartResponseMessageEnum) ToPointer() *ConferenceRecordStartResponseMessageEnum {
	return &e
}

func (e *ConferenceRecordStartResponseMessageEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Conference RecordStart Executed":
		fallthrough
	case "ConferenceName Parameter must be present":
		fallthrough
	case "FileFormat Parameter must be":
		fallthrough
	case "Conference RecordStart Failed":
		fallthrough
	case "Conference RecordStart Failed -- Conference not found":
		*e = ConferenceRecordStartResponseMessageEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ConferenceRecordStartResponseMessageEnum: %v", v)
	}
}

// ConferenceRecordStartResponse - Response
type ConferenceRecordStartResponse struct {
	// Response message
	Message ConferenceRecordStartResponseMessageEnum `json:"Message"`
	// Directory path/URI where the recording file will be saved
	RecordFile string `json:"RecordFile"`
	// Whether the request was successful or not
	Success bool `json:"Success"`
}
