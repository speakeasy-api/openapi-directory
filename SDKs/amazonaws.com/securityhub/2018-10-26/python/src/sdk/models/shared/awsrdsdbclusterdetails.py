"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import awsrdsdbclusterassociatedrole as shared_awsrdsdbclusterassociatedrole
from ..shared import awsrdsdbclustermember as shared_awsrdsdbclustermember
from ..shared import awsrdsdbclusteroptiongroupmembership as shared_awsrdsdbclusteroptiongroupmembership
from ..shared import awsrdsdbdomainmembership as shared_awsrdsdbdomainmembership
from ..shared import awsrdsdbinstancevpcsecuritygroup as shared_awsrdsdbinstancevpcsecuritygroup
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class AwsRdsDbClusterDetails:
    r"""Information about an Amazon RDS DB cluster."""
    
    activity_stream_status: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ActivityStreamStatus'), 'exclude': lambda f: f is None }})  
    allocated_storage: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AllocatedStorage'), 'exclude': lambda f: f is None }})  
    associated_roles: Optional[list[shared_awsrdsdbclusterassociatedrole.AwsRdsDbClusterAssociatedRole]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AssociatedRoles'), 'exclude': lambda f: f is None }})  
    availability_zones: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AvailabilityZones'), 'exclude': lambda f: f is None }})  
    backup_retention_period: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('BackupRetentionPeriod'), 'exclude': lambda f: f is None }})  
    cluster_create_time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ClusterCreateTime'), 'exclude': lambda f: f is None }})  
    copy_tags_to_snapshot: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CopyTagsToSnapshot'), 'exclude': lambda f: f is None }})  
    cross_account_clone: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CrossAccountClone'), 'exclude': lambda f: f is None }})  
    custom_endpoints: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CustomEndpoints'), 'exclude': lambda f: f is None }})  
    database_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DatabaseName'), 'exclude': lambda f: f is None }})  
    db_cluster_identifier: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DbClusterIdentifier'), 'exclude': lambda f: f is None }})  
    db_cluster_members: Optional[list[shared_awsrdsdbclustermember.AwsRdsDbClusterMember]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DbClusterMembers'), 'exclude': lambda f: f is None }})  
    db_cluster_option_group_memberships: Optional[list[shared_awsrdsdbclusteroptiongroupmembership.AwsRdsDbClusterOptionGroupMembership]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DbClusterOptionGroupMemberships'), 'exclude': lambda f: f is None }})  
    db_cluster_parameter_group: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DbClusterParameterGroup'), 'exclude': lambda f: f is None }})  
    db_cluster_resource_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DbClusterResourceId'), 'exclude': lambda f: f is None }})  
    db_subnet_group: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DbSubnetGroup'), 'exclude': lambda f: f is None }})  
    deletion_protection: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DeletionProtection'), 'exclude': lambda f: f is None }})  
    domain_memberships: Optional[list[shared_awsrdsdbdomainmembership.AwsRdsDbDomainMembership]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DomainMemberships'), 'exclude': lambda f: f is None }})  
    enabled_cloud_watch_logs_exports: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('EnabledCloudWatchLogsExports'), 'exclude': lambda f: f is None }})  
    endpoint: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Endpoint'), 'exclude': lambda f: f is None }})  
    engine: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Engine'), 'exclude': lambda f: f is None }})  
    engine_mode: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('EngineMode'), 'exclude': lambda f: f is None }})  
    engine_version: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('EngineVersion'), 'exclude': lambda f: f is None }})  
    hosted_zone_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('HostedZoneId'), 'exclude': lambda f: f is None }})  
    http_endpoint_enabled: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('HttpEndpointEnabled'), 'exclude': lambda f: f is None }})  
    iam_database_authentication_enabled: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('IamDatabaseAuthenticationEnabled'), 'exclude': lambda f: f is None }})  
    kms_key_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('KmsKeyId'), 'exclude': lambda f: f is None }})  
    master_username: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('MasterUsername'), 'exclude': lambda f: f is None }})  
    multi_az: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('MultiAz'), 'exclude': lambda f: f is None }})  
    port: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Port'), 'exclude': lambda f: f is None }})  
    preferred_backup_window: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PreferredBackupWindow'), 'exclude': lambda f: f is None }})  
    preferred_maintenance_window: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PreferredMaintenanceWindow'), 'exclude': lambda f: f is None }})  
    reader_endpoint: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ReaderEndpoint'), 'exclude': lambda f: f is None }})  
    read_replica_identifiers: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ReadReplicaIdentifiers'), 'exclude': lambda f: f is None }})  
    status: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Status'), 'exclude': lambda f: f is None }})  
    storage_encrypted: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('StorageEncrypted'), 'exclude': lambda f: f is None }})  
    vpc_security_groups: Optional[list[shared_awsrdsdbinstancevpcsecuritygroup.AwsRdsDbInstanceVpcSecurityGroup]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('VpcSecurityGroups'), 'exclude': lambda f: f is None }})  
    