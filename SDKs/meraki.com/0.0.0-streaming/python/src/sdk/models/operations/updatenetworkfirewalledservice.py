"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Any, Optional

class UpdateNetworkFirewalledServiceRequestBodyAccessEnum(str, Enum):
    r"""A string indicating the rule for which IPs are allowed to use the specified service. Acceptable values are \\"blocked\\" (no remote IPs can access the service), \\"restricted\\" (only whitelisted IPs can access the service), and \\"unrestriced\\" (any remote IP can access the service). This field is required"""
    BLOCKED = 'blocked'
    RESTRICTED = 'restricted'
    UNRESTRICTED = 'unrestricted'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateNetworkFirewalledServiceRequestBody:
    
    access: UpdateNetworkFirewalledServiceRequestBodyAccessEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('access') }})
    r"""A string indicating the rule for which IPs are allowed to use the specified service. Acceptable values are \\"blocked\\" (no remote IPs can access the service), \\"restricted\\" (only whitelisted IPs can access the service), and \\"unrestriced\\" (any remote IP can access the service). This field is required"""  
    allowed_ips: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('allowedIps'), 'exclude': lambda f: f is None }})
    r"""An array of whitelisted IPs that can access the service. This field is required if \\"access\\" is set to \\"restricted\\". Otherwise this field is ignored"""  
    

@dataclasses.dataclass
class UpdateNetworkFirewalledServiceRequest:
    
    network_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'networkId', 'style': 'simple', 'explode': False }})  
    request_body: UpdateNetworkFirewalledServiceRequestBody = dataclasses.field(metadata={'request': { 'media_type': 'application/json' }})  
    service: str = dataclasses.field(metadata={'path_param': { 'field_name': 'service', 'style': 'simple', 'explode': False }})  
    

@dataclasses.dataclass
class UpdateNetworkFirewalledServiceResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    update_network_firewalled_service_200_application_json_object: Optional[dict[str, Any]] = dataclasses.field(default=None)
    r"""Successful operation"""  
    