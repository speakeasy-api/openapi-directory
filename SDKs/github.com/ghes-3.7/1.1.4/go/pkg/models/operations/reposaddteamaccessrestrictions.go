// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"bytes"
	"encoding/json"
	"errors"
	"net/http"
	"openapi/pkg/models/shared"
)

type ReposAddTeamAccessRestrictionsPathParams struct {
	// The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/enterprise-server@3.7/graphql).
	Branch string `pathParam:"style=simple,explode=false,name=branch"`
	// The account owner of the repository. The name is not case sensitive.
	Owner string `pathParam:"style=simple,explode=false,name=owner"`
	// The name of the repository. The name is not case sensitive.
	Repo string `pathParam:"style=simple,explode=false,name=repo"`
}

// ReposAddTeamAccessRestrictionsRequestBody1 - The slug values for teams
type ReposAddTeamAccessRestrictionsRequestBody1 struct {
	// The slug values for teams
	Teams []string `json:"teams"`
}

type ReposAddTeamAccessRestrictionsRequestBodyType string

const (
	ReposAddTeamAccessRestrictionsRequestBodyTypeReposAddTeamAccessRestrictionsRequestBody1 ReposAddTeamAccessRestrictionsRequestBodyType = "repos/add-team-access-restrictions_requestBody_1"
	ReposAddTeamAccessRestrictionsRequestBodyTypeArrayOfstr                                 ReposAddTeamAccessRestrictionsRequestBodyType = "arrayOfstr"
)

type ReposAddTeamAccessRestrictionsRequestBody struct {
	ReposAddTeamAccessRestrictionsRequestBody1 *ReposAddTeamAccessRestrictionsRequestBody1
	ArrayOfstr                                 []string

	Type ReposAddTeamAccessRestrictionsRequestBodyType
}

func CreateReposAddTeamAccessRestrictionsRequestBodyReposAddTeamAccessRestrictionsRequestBody1(reposAddTeamAccessRestrictionsRequestBody1 ReposAddTeamAccessRestrictionsRequestBody1) ReposAddTeamAccessRestrictionsRequestBody {
	typ := ReposAddTeamAccessRestrictionsRequestBodyTypeReposAddTeamAccessRestrictionsRequestBody1

	return ReposAddTeamAccessRestrictionsRequestBody{
		ReposAddTeamAccessRestrictionsRequestBody1: &reposAddTeamAccessRestrictionsRequestBody1,
		Type: typ,
	}
}

func CreateReposAddTeamAccessRestrictionsRequestBodyArrayOfstr(arrayOfstr []string) ReposAddTeamAccessRestrictionsRequestBody {
	typ := ReposAddTeamAccessRestrictionsRequestBodyTypeArrayOfstr

	return ReposAddTeamAccessRestrictionsRequestBody{
		ArrayOfstr: arrayOfstr,
		Type:       typ,
	}
}

func (u *ReposAddTeamAccessRestrictionsRequestBody) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	reposAddTeamAccessRestrictionsRequestBody1 := new(ReposAddTeamAccessRestrictionsRequestBody1)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&reposAddTeamAccessRestrictionsRequestBody1); err == nil {
		u.ReposAddTeamAccessRestrictionsRequestBody1 = reposAddTeamAccessRestrictionsRequestBody1
		u.Type = ReposAddTeamAccessRestrictionsRequestBodyTypeReposAddTeamAccessRestrictionsRequestBody1
		return nil
	}

	arrayOfstr := []string{}
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&arrayOfstr); err == nil {
		u.ArrayOfstr = arrayOfstr
		u.Type = ReposAddTeamAccessRestrictionsRequestBodyTypeArrayOfstr
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u ReposAddTeamAccessRestrictionsRequestBody) MarshalJSON() ([]byte, error) {
	if u.ReposAddTeamAccessRestrictionsRequestBody1 != nil {
		return json.Marshal(u.ReposAddTeamAccessRestrictionsRequestBody1)
	}

	if u.ArrayOfstr != nil {
		return json.Marshal(u.ArrayOfstr)
	}

	return nil, nil
}

type ReposAddTeamAccessRestrictionsRequest struct {
	PathParams ReposAddTeamAccessRestrictionsPathParams
	Request    *ReposAddTeamAccessRestrictionsRequestBody `request:"mediaType=application/json"`
}

type ReposAddTeamAccessRestrictionsResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Response
	Teams []shared.Team
	// Validation failed, or the endpoint has been spammed.
	ValidationError *shared.ValidationError
}
