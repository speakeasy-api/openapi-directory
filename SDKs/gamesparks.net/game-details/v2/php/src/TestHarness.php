<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class TestHarness 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * createTestHarnessScenario
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateTestHarnessScenarioUsingPOSTRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateTestHarnessScenarioUsingPOSTResponse
     */
	public function createTestHarnessScenarioUsingPOST(
        \OpenAPI\OpenAPI\Models\Operations\CreateTestHarnessScenarioUsingPOSTRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateTestHarnessScenarioUsingPOSTResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/restv2/game/{apiKey}/admin/testHarness/scenarios', \OpenAPI\OpenAPI\Models\Operations\CreateTestHarnessScenarioUsingPOSTRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "testHarnessScenarioModel", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateTestHarnessScenarioUsingPOSTResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json;charset=UTF-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->testHarnessScenarioModel = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\TestHarnessScenarioModel', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
            if (Utils\Utils::matchContentType($contentType, 'application/json;charset=UTF-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->messageModel = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\MessageModel', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * deleteTestHarnessScenario
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DELETETestHarnessScenarioUsingDELETERequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DELETETestHarnessScenarioUsingDELETEResponse
     */
	public function deleteTestHarnessScenarioUsingDELETE(
        \OpenAPI\OpenAPI\Models\Operations\DELETETestHarnessScenarioUsingDELETERequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DELETETestHarnessScenarioUsingDELETEResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/restv2/game/{apiKey}/admin/testHarness/scenarios/{scenarioName}', \OpenAPI\OpenAPI\Models\Operations\DELETETestHarnessScenarioUsingDELETERequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DELETETestHarnessScenarioUsingDELETEResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 400) {
            if (Utils\Utils::matchContentType($contentType, 'application/json;charset=UTF-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->messageModel = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\MessageModel', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * getTestHarnessScenario
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GETTestHarnessScenarioUsingGETRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GETTestHarnessScenarioUsingGETResponse
     */
	public function getTestHarnessScenarioUsingGET(
        \OpenAPI\OpenAPI\Models\Operations\GETTestHarnessScenarioUsingGETRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GETTestHarnessScenarioUsingGETResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/restv2/game/{apiKey}/admin/testHarness/scenarios/{scenarioName}', \OpenAPI\OpenAPI\Models\Operations\GETTestHarnessScenarioUsingGETRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GETTestHarnessScenarioUsingGETResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json;charset=UTF-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->testHarnessScenarioModel = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\TestHarnessScenarioModel', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
            if (Utils\Utils::matchContentType($contentType, 'application/json;charset=UTF-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->messageModel = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\MessageModel', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * getTestHarnessScenarios
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GETTestHarnessScenariosUsingGETRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GETTestHarnessScenariosUsingGETResponse
     */
	public function getTestHarnessScenariosUsingGET(
        \OpenAPI\OpenAPI\Models\Operations\GETTestHarnessScenariosUsingGETRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GETTestHarnessScenariosUsingGETResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/restv2/game/{apiKey}/admin/testHarness/scenarios', \OpenAPI\OpenAPI\Models\Operations\GETTestHarnessScenariosUsingGETRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GETTestHarnessScenariosUsingGETResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json;charset=UTF-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->testHarnessScenarioModels = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\TestHarnessScenarioModel>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
            if (Utils\Utils::matchContentType($contentType, 'application/json;charset=UTF-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->messageModel = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\MessageModel', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * updateTestHarnessScenario
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateTestHarnessScenarioUsingPUTRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateTestHarnessScenarioUsingPUTResponse
     */
	public function updateTestHarnessScenarioUsingPUT(
        \OpenAPI\OpenAPI\Models\Operations\UpdateTestHarnessScenarioUsingPUTRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateTestHarnessScenarioUsingPUTResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/restv2/game/{apiKey}/admin/testHarness/scenarios/{scenarioName}', \OpenAPI\OpenAPI\Models\Operations\UpdateTestHarnessScenarioUsingPUTRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "testHarnessScenarioModel", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateTestHarnessScenarioUsingPUTResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json;charset=UTF-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->testHarnessScenarioModel = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\TestHarnessScenarioModel', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
            if (Utils\Utils::matchContentType($contentType, 'application/json;charset=UTF-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->messageModel = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\MessageModel', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
}