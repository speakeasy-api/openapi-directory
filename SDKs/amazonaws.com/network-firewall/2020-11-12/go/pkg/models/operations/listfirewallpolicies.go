// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type ListFirewallPoliciesQueryParams struct {
	// Pagination limit
	MaxResults *string `queryParam:"style=form,explode=true,name=MaxResults"`
	// Pagination token
	NextToken *string `queryParam:"style=form,explode=true,name=NextToken"`
}

// ListFirewallPoliciesXAmzTargetEnum
type ListFirewallPoliciesXAmzTargetEnum string

const (
	ListFirewallPoliciesXAmzTargetEnumNetworkFirewall20201112ListFirewallPolicies ListFirewallPoliciesXAmzTargetEnum = "NetworkFirewall_20201112.ListFirewallPolicies"
)

func (e *ListFirewallPoliciesXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "NetworkFirewall_20201112.ListFirewallPolicies":
		*e = ListFirewallPoliciesXAmzTargetEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ListFirewallPoliciesXAmzTargetEnum: %s", s)
	}
}

type ListFirewallPoliciesHeaders struct {
	XAmzAlgorithm     *string                            `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string                            `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string                            `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string                            `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string                            `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string                            `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string                            `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget        ListFirewallPoliciesXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type ListFirewallPoliciesRequest struct {
	QueryParams ListFirewallPoliciesQueryParams
	Headers     ListFirewallPoliciesHeaders
	Request     shared.ListFirewallPoliciesRequest `request:"mediaType=application/json"`
}

type ListFirewallPoliciesResponse struct {
	ContentType string
	// InternalServerError
	InternalServerError interface{}
	// InvalidRequestException
	InvalidRequestException interface{}
	// Success
	ListFirewallPoliciesResponse *shared.ListFirewallPoliciesResponse
	StatusCode                   int
	RawResponse                  *http.Response
	// ThrottlingException
	ThrottlingException interface{}
}
