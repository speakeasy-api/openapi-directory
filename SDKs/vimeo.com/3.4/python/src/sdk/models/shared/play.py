"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Any, Optional

class PlayProgressiveTypeEnum(str, Enum):
    r"""The type of the video file:
    
    Option descriptions:
     * `source` - The video is a source file.
     * `video/mp4` - The video is in MP4 format.
     * `video/webm` - The video is in WebM format.
     * `vp6/x-video` - The video is in VP6 format.
    """
    SOURCE = 'source'
    VIDEO_MP4 = 'video/mp4'
    VIDEO_WEBM = 'video/webm'
    VP6_X_VIDEO = 'vp6/x-video'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PlayProgressive:
    
    created_time: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('created_time') }})
    r"""The time in ISO 8601 format when this video file was created."""  
    fps: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('fps') }})
    r"""The FPS of the video file."""  
    height: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('height') }})
    r"""The height in pixels of the video."""  
    link: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('link') }})
    r"""The direct link to this video file."""  
    link_expiration_time: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('link_expiration_time') }})
    r"""The time in ISO 8601 format when the link to this video file expires."""  
    md5: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('md5') }})
    r"""The MD5 hash of the video file."""  
    size: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('size') }})
    r"""The file size in bytes of this video."""  
    type: PlayProgressiveTypeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type') }})
    r"""The type of the video file:
    
    Option descriptions:
     * `source` - The video is a source file.
     * `video/mp4` - The video is in MP4 format.
     * `video/webm` - The video is in WebM format.
     * `vp6/x-video` - The video is in VP6 format.
    """  
    width: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('width') }})
    r"""The width in pixels of the video."""  
    log: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('log'), 'exclude': lambda f: f is None }})
    r"""The URLs for logging events."""  
    
class PlayStatusEnum(str, Enum):
    r"""The play status of the video:
    
    Option descriptions:
     * `playable` - The video is playable.
     * `purchase_required` - The video must be purchased.
     * `restricted` - Playback for the video is restricted.
     * `unavailable` - The video is unavailable.
    """
    PLAYABLE = 'playable'
    PURCHASE_REQUIRED = 'purchase_required'
    RESTRICTED = 'restricted'
    UNAVAILABLE = 'unavailable'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Play:
    
    status: PlayStatusEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status') }})
    r"""The play status of the video:
    
    Option descriptions:
     * `playable` - The video is playable.
     * `purchase_required` - The video must be purchased.
     * `restricted` - Playback for the video is restricted.
     * `unavailable` - The video is unavailable.
    """  
    progressive: Optional[list[PlayProgressive]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('progressive'), 'exclude': lambda f: f is None }})
    r"""Progressive files."""  
    