// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// CreateServiceRequestBodyAuthTypeEnum - <p>The type of IAM policy.</p> <ul> <li> <p> <code>NONE</code>: The resource does not use an IAM policy. This is the default.</p> </li> <li> <p> <code>AWS_IAM</code>: The resource uses an IAM policy. When this type is used, auth is enabled and an auth policy is required.</p> </li> </ul>
type CreateServiceRequestBodyAuthTypeEnum string

const (
	CreateServiceRequestBodyAuthTypeEnumNone   CreateServiceRequestBodyAuthTypeEnum = "NONE"
	CreateServiceRequestBodyAuthTypeEnumAwsIam CreateServiceRequestBodyAuthTypeEnum = "AWS_IAM"
)

func (e CreateServiceRequestBodyAuthTypeEnum) ToPointer() *CreateServiceRequestBodyAuthTypeEnum {
	return &e
}

func (e *CreateServiceRequestBodyAuthTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "NONE":
		fallthrough
	case "AWS_IAM":
		*e = CreateServiceRequestBodyAuthTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateServiceRequestBodyAuthTypeEnum: %v", v)
	}
}

type CreateServiceRequestBody struct {
	// <p>The type of IAM policy.</p> <ul> <li> <p> <code>NONE</code>: The resource does not use an IAM policy. This is the default.</p> </li> <li> <p> <code>AWS_IAM</code>: The resource uses an IAM policy. When this type is used, auth is enabled and an auth policy is required.</p> </li> </ul>
	AuthType *CreateServiceRequestBodyAuthTypeEnum `json:"authType,omitempty"`
	// The Amazon Resource Name (ARN) of the certificate.
	CertificateArn *string `json:"certificateArn,omitempty"`
	// A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. If you retry a request that completed successfully using the same client token and parameters, the retry succeeds without performing any actions. If the parameters aren't identical, the retry fails.
	ClientToken *string `json:"clientToken,omitempty"`
	// The custom domain name of the service.
	CustomDomainName *string `json:"customDomainName,omitempty"`
	// The name of the service. The name must be unique within the account. The valid characters are a-z, 0-9, and hyphens (-). You can't use a hyphen as the first or last character, or immediately after another hyphen.
	Name string `json:"name"`
	// The tags for the service.
	Tags map[string]string `json:"tags,omitempty"`
}

type CreateServiceRequest struct {
	RequestBody       CreateServiceRequestBody `request:"mediaType=application/json"`
	XAmzAlgorithm     *string                  `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string                  `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string                  `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string                  `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string                  `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string                  `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string                  `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
}

type CreateServiceResponse struct {
	// AccessDeniedException
	AccessDeniedException interface{}
	// ConflictException
	ConflictException interface{}
	ContentType       string
	// Success
	CreateServiceResponse *shared.CreateServiceResponse
	// InternalServerException
	InternalServerException interface{}
	// ResourceNotFoundException
	ResourceNotFoundException interface{}
	StatusCode                int
	RawResponse               *http.Response
	// ServiceQuotaExceededException
	ServiceQuotaExceededException interface{}
	// ThrottlingException
	ThrottlingException interface{}
	// ValidationException
	ValidationException interface{}
}
