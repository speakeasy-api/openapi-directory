<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

/**
 * SDK - NFL schedules, scores, odds, weather, and news API.
 * 
 * @package OpenAPI\OpenAPI
 * @access public
 */
class SDK
{
	public const SERVERS = [
		'http://azure-api.sportsdata.io/v3/nfl/scores',
		'https://azure-api.sportsdata.io/v3/nfl/scores',
	];
  		
	// SDK private variables namespaced with _ to avoid conflicts with API models
	private ?\GuzzleHttp\ClientInterface $_defaultClient;
	private ?\GuzzleHttp\ClientInterface $_securityClient;
	private ?Models\Shared\Security $_security;
	private string $_serverUrl;
	private string $_language = 'php';
	private string $_sdkVersion = '0.0.1';
	private string $_genVersion = 'internal';

	/**
	 * Returns a new instance of the SDK builder used to configure and create the SDK instance.
	 * 
	 * @return SDKBuilder
	 */
	public static function builder(): SDKBuilder
	{
		return new SDKBuilder();
	}

	/**
	 * @param \GuzzleHttp\ClientInterface|null $client	 
	 * @param Models\Shared\Security|null $security
	 * @param string $serverUrl
	 * @param array<string, string>|null $params
	 */
	public function __construct(?\GuzzleHttp\ClientInterface $client, ?Models\Shared\Security $security, string $serverUrl, ?array $params)
	{
		$this->_defaultClient = $client;
		
		if ($this->_defaultClient === null) {
			$this->_defaultClient = new \GuzzleHttp\Client([
				'timeout' => 60,
			]);
		}

		$this->_securityClient = null;
		if ($security !== null) {
			$this->_security = $security;
			$this->_securityClient = Utils\Utils::configureSecurityClient($this->_defaultClient, $this->_security);
		}
		
		if ($this->_securityClient === null) {
			$this->_securityClient = $this->_defaultClient;
		}

		if (!empty($serverUrl)) {
			$this->_serverUrl = Utils\Utils::templateUrl($serverUrl, $params);
		}
		
		if (empty($this->_serverUrl)) {
			$this->_serverUrl = $this::SERVERS[0];
		}
	}
	
    /**
     * Are Games In Progress
     * 
     * Returns <code>true</code> if there is at least one game being played at the time of the request or <code>false</code> if there are none.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AreGamesInProgressRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\AreGamesInProgressResponse
     */
	public function areGamesInProgress(
        \OpenAPI\OpenAPI\Models\Operations\AreGamesInProgressRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\AreGamesInProgressResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{format}/AreAnyGamesInProgress', \OpenAPI\OpenAPI\Models\Operations\AreGamesInProgressRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AreGamesInProgressResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->areGamesInProgress200ApplicationJSONBoolean = $serializer->deserialize((string)$httpResponse->getBody(), 'bool', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Bye Weeks
     * 
     * Get bye weeks for the teams during a specified NFL season. 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ByeWeeksRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ByeWeeksResponse
     */
	public function byeWeeks(
        \OpenAPI\OpenAPI\Models\Operations\ByeWeeksRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ByeWeeksResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{format}/Byes/{season}', \OpenAPI\OpenAPI\Models\Operations\ByeWeeksRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ByeWeeksResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->byes = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Bye>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Depth Charts
     * 
     * Depth charts for all NFL teams split by offensive, defensive, and special teams position groupings.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DepthChartsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DepthChartsResponse
     */
	public function depthCharts(
        \OpenAPI\OpenAPI\Models\Operations\DepthChartsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DepthChartsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{format}/DepthCharts', \OpenAPI\OpenAPI\Models\Operations\DepthChartsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DepthChartsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->teamDepthCharts = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\TeamDepthChart>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Game Stats by Season (Deprecated, use Team Game Stats instead)
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GameStatsBySeasonDeprecatedUseTeamGameStatsInsteadRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GameStatsBySeasonDeprecatedUseTeamGameStatsInsteadResponse
     */
	public function gameStatsBySeasonDeprecatedUseTeamGameStatsInstead(
        \OpenAPI\OpenAPI\Models\Operations\GameStatsBySeasonDeprecatedUseTeamGameStatsInsteadRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GameStatsBySeasonDeprecatedUseTeamGameStatsInsteadResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{format}/GameStats/{season}', \OpenAPI\OpenAPI\Models\Operations\GameStatsBySeasonDeprecatedUseTeamGameStatsInsteadRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GameStatsBySeasonDeprecatedUseTeamGameStatsInsteadResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->games = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Game>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Game Stats by Week (Deprecated, use Team Game Stats instead)
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GameStatsByWeekDeprecatedUseTeamGameStatsInsteadRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GameStatsByWeekDeprecatedUseTeamGameStatsInsteadResponse
     */
	public function gameStatsByWeekDeprecatedUseTeamGameStatsInstead(
        \OpenAPI\OpenAPI\Models\Operations\GameStatsByWeekDeprecatedUseTeamGameStatsInsteadRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GameStatsByWeekDeprecatedUseTeamGameStatsInsteadResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{format}/GameStatsByWeek/{season}/{week}', \OpenAPI\OpenAPI\Models\Operations\GameStatsByWeekDeprecatedUseTeamGameStatsInsteadRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GameStatsByWeekDeprecatedUseTeamGameStatsInsteadResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->games = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Game>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * News
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\NewsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\NewsResponse
     */
	public function news(
        \OpenAPI\OpenAPI\Models\Operations\NewsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\NewsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{format}/News', \OpenAPI\OpenAPI\Models\Operations\NewsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\NewsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->news = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\News>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * News by Date
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\NewsByDateRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\NewsByDateResponse
     */
	public function newsByDate(
        \OpenAPI\OpenAPI\Models\Operations\NewsByDateRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\NewsByDateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{format}/NewsByDate/{date}', \OpenAPI\OpenAPI\Models\Operations\NewsByDateRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\NewsByDateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->news = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\News>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * News by Player
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\NewsByPlayerRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\NewsByPlayerResponse
     */
	public function newsByPlayer(
        \OpenAPI\OpenAPI\Models\Operations\NewsByPlayerRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\NewsByPlayerResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{format}/NewsByPlayerID/{playerid}', \OpenAPI\OpenAPI\Models\Operations\NewsByPlayerRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\NewsByPlayerResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->news = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\News>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * News by Team
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\NewsByTeamRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\NewsByTeamResponse
     */
	public function newsByTeam(
        \OpenAPI\OpenAPI\Models\Operations\NewsByTeamRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\NewsByTeamResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{format}/NewsByTeam/{team}', \OpenAPI\OpenAPI\Models\Operations\NewsByTeamRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\NewsByTeamResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->news = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\News>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Player Details by Available
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PlayerDetailsByAvailableRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PlayerDetailsByAvailableResponse
     */
	public function playerDetailsByAvailable(
        \OpenAPI\OpenAPI\Models\Operations\PlayerDetailsByAvailableRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PlayerDetailsByAvailableResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{format}/Players', \OpenAPI\OpenAPI\Models\Operations\PlayerDetailsByAvailableRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PlayerDetailsByAvailableResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->players = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Player>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Player Details by Free Agents
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PlayerDetailsByFreeAgentsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PlayerDetailsByFreeAgentsResponse
     */
	public function playerDetailsByFreeAgents(
        \OpenAPI\OpenAPI\Models\Operations\PlayerDetailsByFreeAgentsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PlayerDetailsByFreeAgentsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{format}/FreeAgents', \OpenAPI\OpenAPI\Models\Operations\PlayerDetailsByFreeAgentsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PlayerDetailsByFreeAgentsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->players = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Player>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Player Details by Player
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PlayerDetailsByPlayerRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PlayerDetailsByPlayerResponse
     */
	public function playerDetailsByPlayer(
        \OpenAPI\OpenAPI\Models\Operations\PlayerDetailsByPlayerRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PlayerDetailsByPlayerResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{format}/Player/{playerid}', \OpenAPI\OpenAPI\Models\Operations\PlayerDetailsByPlayerRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PlayerDetailsByPlayerResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->playerDetail = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PlayerDetail', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Player Details by Rookie Draft Year
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PlayerDetailsByRookieDraftYearRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PlayerDetailsByRookieDraftYearResponse
     */
	public function playerDetailsByRookieDraftYear(
        \OpenAPI\OpenAPI\Models\Operations\PlayerDetailsByRookieDraftYearRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PlayerDetailsByRookieDraftYearResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{format}/Rookies/{season}', \OpenAPI\OpenAPI\Models\Operations\PlayerDetailsByRookieDraftYearRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PlayerDetailsByRookieDraftYearResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->players = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Player>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Player Details by Team
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PlayerDetailsByTeamRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PlayerDetailsByTeamResponse
     */
	public function playerDetailsByTeam(
        \OpenAPI\OpenAPI\Models\Operations\PlayerDetailsByTeamRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PlayerDetailsByTeamResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{format}/Players/{team}', \OpenAPI\OpenAPI\Models\Operations\PlayerDetailsByTeamRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PlayerDetailsByTeamResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->playerDetails = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\PlayerDetail>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Referees
     * 
     * Returns full list of NFL Referees
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\RefereesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\RefereesResponse
     */
	public function referees(
        \OpenAPI\OpenAPI\Models\Operations\RefereesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\RefereesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{format}/Referees', \OpenAPI\OpenAPI\Models\Operations\RefereesRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\RefereesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->referees = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Referee>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Schedule
     * 
     * Game schedule for a specified season.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ScheduleRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ScheduleResponse
     */
	public function schedule(
        \OpenAPI\OpenAPI\Models\Operations\ScheduleRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ScheduleResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{format}/Schedules/{season}', \OpenAPI\OpenAPI\Models\Operations\ScheduleRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ScheduleResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->schedules = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Schedule>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Scores by Date
     * 
     * Get game scores for a specified week of a season.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ScoresByDateRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ScoresByDateResponse
     */
	public function scoresByDate(
        \OpenAPI\OpenAPI\Models\Operations\ScoresByDateRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ScoresByDateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{format}/ScoresByDate/{date}', \OpenAPI\OpenAPI\Models\Operations\ScoresByDateRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ScoresByDateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->scores = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Score>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Scores by Season 
     * 
     * Game scores for a specified season.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ScoresBySeasonRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ScoresBySeasonResponse
     */
	public function scoresBySeason(
        \OpenAPI\OpenAPI\Models\Operations\ScoresBySeasonRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ScoresBySeasonResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{format}/Scores/{season}', \OpenAPI\OpenAPI\Models\Operations\ScoresBySeasonRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ScoresBySeasonResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->scores = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Score>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Scores by Week
     * 
     * Get game scores for a specified week of a season.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ScoresByWeekRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ScoresByWeekResponse
     */
	public function scoresByWeek(
        \OpenAPI\OpenAPI\Models\Operations\ScoresByWeekRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ScoresByWeekResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{format}/ScoresByWeek/{season}/{week}', \OpenAPI\OpenAPI\Models\Operations\ScoresByWeekRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ScoresByWeekResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->scores = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Score>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Scores by Week Simulation
     * 
     * Gets simulated live scores of NFL games, covering the Conference Championship games on January 21, 2018.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ScoresByWeekSimulationRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ScoresByWeekSimulationResponse
     */
	public function scoresByWeekSimulation(
        \OpenAPI\OpenAPI\Models\Operations\ScoresByWeekSimulationRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ScoresByWeekSimulationResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{format}/SimulatedScores/{numberofplays}', \OpenAPI\OpenAPI\Models\Operations\ScoresByWeekSimulationRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ScoresByWeekSimulationResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->scores = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Score>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Season Current
     * 
     * Year of the current NFL season. This value changes at the start of the new NFL league year. The earliest season for Fantasy data is 2001. The earliest season for Team data is 1985. The earliest season for Fantasy data is 2001. The earliest season for Team data is 1985.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\SeasonCurrentRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\SeasonCurrentResponse
     */
	public function seasonCurrent(
        \OpenAPI\OpenAPI\Models\Operations\SeasonCurrentRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\SeasonCurrentResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{format}/CurrentSeason', \OpenAPI\OpenAPI\Models\Operations\SeasonCurrentRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\SeasonCurrentResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->seasonCurrent200ApplicationJSONInteger = $serializer->deserialize((string)$httpResponse->getBody(), 'int', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Season Last Completed
     * 
     * Year of the most recently completed season. this value changes immediately after the Super Bowl. The earliest season for Fantasy data is 2001. The earliest season for Team data is 1985.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\SeasonLastCompletedRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\SeasonLastCompletedResponse
     */
	public function seasonLastCompleted(
        \OpenAPI\OpenAPI\Models\Operations\SeasonLastCompletedRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\SeasonLastCompletedResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{format}/LastCompletedSeason', \OpenAPI\OpenAPI\Models\Operations\SeasonLastCompletedRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\SeasonLastCompletedResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->seasonLastCompleted200ApplicationJSONInteger = $serializer->deserialize((string)$httpResponse->getBody(), 'int', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Season Upcoming
     * 
     * Year of the current NFL season, if we are in the mid-season. If we are in the off-season, then year of the next upcoming season. This value changes immediately after the Super Bowl. The earliest season for Fantasy data is 2001. The earliest season for Team data is 1985.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\SeasonUpcomingRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\SeasonUpcomingResponse
     */
	public function seasonUpcoming(
        \OpenAPI\OpenAPI\Models\Operations\SeasonUpcomingRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\SeasonUpcomingResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{format}/UpcomingSeason', \OpenAPI\OpenAPI\Models\Operations\SeasonUpcomingRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\SeasonUpcomingResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->seasonUpcoming200ApplicationJSONInteger = $serializer->deserialize((string)$httpResponse->getBody(), 'int', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Stadiums
     * 
     * This method returns all stadiums.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\StadiumsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\StadiumsResponse
     */
	public function stadiums(
        \OpenAPI\OpenAPI\Models\Operations\StadiumsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\StadiumsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{format}/Stadiums', \OpenAPI\OpenAPI\Models\Operations\StadiumsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\StadiumsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->stadiums = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Stadium>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Standings
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\StandingsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\StandingsResponse
     */
	public function standings(
        \OpenAPI\OpenAPI\Models\Operations\StandingsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\StandingsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{format}/Standings/{season}', \OpenAPI\OpenAPI\Models\Operations\StandingsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\StandingsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->standings = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Standing>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Team Game Logs By Season
     * 
     * Game by game log of total team statistics.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\TeamGameLogsBySeasonRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\TeamGameLogsBySeasonResponse
     */
	public function teamGameLogsBySeason(
        \OpenAPI\OpenAPI\Models\Operations\TeamGameLogsBySeasonRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\TeamGameLogsBySeasonResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{format}/TeamGameStatsBySeason/{season}/{teamid}/{numberofgames}', \OpenAPI\OpenAPI\Models\Operations\TeamGameLogsBySeasonRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\TeamGameLogsBySeasonResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->teamGames = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\TeamGame>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Team Game Stats
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\TeamGameStatsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\TeamGameStatsResponse
     */
	public function teamGameStats(
        \OpenAPI\OpenAPI\Models\Operations\TeamGameStatsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\TeamGameStatsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{format}/TeamGameStats/{season}/{week}', \OpenAPI\OpenAPI\Models\Operations\TeamGameStatsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\TeamGameStatsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->teamGames = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\TeamGame>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Team Season Stats
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\TeamSeasonStatsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\TeamSeasonStatsResponse
     */
	public function teamSeasonStats(
        \OpenAPI\OpenAPI\Models\Operations\TeamSeasonStatsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\TeamSeasonStatsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{format}/TeamSeasonStats/{season}', \OpenAPI\OpenAPI\Models\Operations\TeamSeasonStatsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\TeamSeasonStatsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->teamSeasons = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\TeamSeason>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Teams (Active)
     * 
     * Gets all active teams.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\TeamsActiveRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\TeamsActiveResponse
     */
	public function teamsActive(
        \OpenAPI\OpenAPI\Models\Operations\TeamsActiveRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\TeamsActiveResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{format}/Teams', \OpenAPI\OpenAPI\Models\Operations\TeamsActiveRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\TeamsActiveResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->teams = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Team>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Teams (All)
     * 
     * Gets all teams, including pro bowl teams.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\TeamsAllRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\TeamsAllResponse
     */
	public function teamsAll(
        \OpenAPI\OpenAPI\Models\Operations\TeamsAllRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\TeamsAllResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{format}/AllTeams', \OpenAPI\OpenAPI\Models\Operations\TeamsAllRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\TeamsAllResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->teams = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Team>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Teams by Season
     * 
     * List of teams playing in a specified season.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\TeamsBySeasonRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\TeamsBySeasonResponse
     */
	public function teamsBySeason(
        \OpenAPI\OpenAPI\Models\Operations\TeamsBySeasonRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\TeamsBySeasonResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{format}/Teams/{season}', \OpenAPI\OpenAPI\Models\Operations\TeamsBySeasonRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\TeamsBySeasonResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->teams = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Team>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Timeframes
     * 
     * Get detailed information about past, present, and future timeframes.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\TimeframesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\TimeframesResponse
     */
	public function timeframes(
        \OpenAPI\OpenAPI\Models\Operations\TimeframesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\TimeframesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{format}/Timeframes/{type}', \OpenAPI\OpenAPI\Models\Operations\TimeframesRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\TimeframesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->timeframes = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Timeframe>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Week Current
     * 
     * Number of the current week of the NFL season. This value usually changes on Tuesday nights or Wednesday mornings at midnight ET.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\WeekCurrentRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\WeekCurrentResponse
     */
	public function weekCurrent(
        \OpenAPI\OpenAPI\Models\Operations\WeekCurrentRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\WeekCurrentResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{format}/CurrentWeek', \OpenAPI\OpenAPI\Models\Operations\WeekCurrentRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\WeekCurrentResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->weekCurrent200ApplicationJSONInteger = $serializer->deserialize((string)$httpResponse->getBody(), 'int', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Week Last Completed
     * 
     * Number of the last completed week of the NFL season. This value usually changes on Tuesday nights or Wednesday mornings at midnight ET.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\WeekLastCompletedRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\WeekLastCompletedResponse
     */
	public function weekLastCompleted(
        \OpenAPI\OpenAPI\Models\Operations\WeekLastCompletedRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\WeekLastCompletedResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{format}/LastCompletedWeek', \OpenAPI\OpenAPI\Models\Operations\WeekLastCompletedRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\WeekLastCompletedResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->weekLastCompleted200ApplicationJSONInteger = $serializer->deserialize((string)$httpResponse->getBody(), 'int', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Week Upcoming
     * 
     * Number of the upcoming week of the NFL season. This value usually changes on Tuesday nights or Wednesday mornings at midnight ET.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\WeekUpcomingRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\WeekUpcomingResponse
     */
	public function weekUpcoming(
        \OpenAPI\OpenAPI\Models\Operations\WeekUpcomingRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\WeekUpcomingResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{format}/UpcomingWeek', \OpenAPI\OpenAPI\Models\Operations\WeekUpcomingRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\WeekUpcomingResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->weekUpcoming200ApplicationJSONInteger = $serializer->deserialize((string)$httpResponse->getBody(), 'int', 'json');
            }
        }

        return $response;
    }
	
    /**
     * X Ping
     * 
     * Ping NFL API
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\XPingRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\XPingResponse
     */
	public function xPing(
        \OpenAPI\OpenAPI\Models\Operations\XPingRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\XPingResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{format}/Ping/{seconds}', \OpenAPI\OpenAPI\Models\Operations\XPingRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\XPingResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->xPing200ApplicationJSONAny = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }

        return $response;
    }
}