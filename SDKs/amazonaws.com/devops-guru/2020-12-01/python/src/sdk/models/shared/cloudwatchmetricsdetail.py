"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import cloudwatchmetricsdatasummary as shared_cloudwatchmetricsdatasummary
from ..shared import cloudwatchmetricsdimension as shared_cloudwatchmetricsdimension
from ..shared import cloudwatchmetricsstat_enum as shared_cloudwatchmetricsstat_enum
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CloudWatchMetricsDetail:
    r"""Information about an Amazon CloudWatch metric."""
    
    dimensions: Optional[list[shared_cloudwatchmetricsdimension.CloudWatchMetricsDimension]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Dimensions'), 'exclude': lambda f: f is None }})  
    metric_data_summary: Optional[shared_cloudwatchmetricsdatasummary.CloudWatchMetricsDataSummary] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('MetricDataSummary'), 'exclude': lambda f: f is None }})  
    metric_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('MetricName'), 'exclude': lambda f: f is None }})  
    namespace: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Namespace'), 'exclude': lambda f: f is None }})  
    period: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Period'), 'exclude': lambda f: f is None }})  
    stat: Optional[shared_cloudwatchmetricsstat_enum.CloudWatchMetricsStatEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Stat'), 'exclude': lambda f: f is None }})  
    unit: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Unit'), 'exclude': lambda f: f is None }})  
    