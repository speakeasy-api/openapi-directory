/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { Expose } from "class-transformer";

/**
 * [Deprecated] All fields defined in a principal are ANDed.
 */
export class Principal extends SpeakeasyBase {
  /**
   * An expression to specify custom condition.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "condition" })
  condition?: string;

  /**
   * The groups the principal belongs to. Exact match, prefix match, and suffix match are supported.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "groups" })
  groups?: string[];

  /**
   * IPv4 or IPv6 address or range (In CIDR format)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "ips" })
  ips?: string[];

  /**
   * The namespaces. Exact match, prefix match, and suffix match are supported.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "namespaces" })
  namespaces?: string[];

  /**
   * Negate of groups. Specifies exclusions.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "notGroups" })
  notGroups?: string[];

  /**
   * Negate of IPs. Specifies exclusions.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "notIps" })
  notIps?: string[];

  /**
   * Negate of namespaces. Specifies exclusions.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "notNamespaces" })
  notNamespaces?: string[];

  /**
   * Negate of users. Specifies exclusions.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "notUsers" })
  notUsers?: string[];

  /**
   * A map of Istio attribute to expected values. Exact match, prefix match, and suffix match are supported for values. For example, `request.headers[version]: "v1"`. The properties are ANDed together.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "properties" })
  properties?: Record<string, string>;

  /**
   * The user names/IDs or service accounts. Exact match, prefix match, and suffix match are supported.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "users" })
  users?: string[];
}
