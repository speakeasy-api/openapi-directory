// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"net/http"
	"openapi/pkg/models/shared"
)

type StartStageDeploymentPathParams struct {
	// The name of the game.
	GameName string `pathParam:"style=simple,explode=false,name=GameName"`
	// The name of the stage to deploy the snapshot onto.
	StageName string `pathParam:"style=simple,explode=false,name=StageName"`
}

type StartStageDeploymentHeaders struct {
	XAmzAlgorithm     *string `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
}

type StartStageDeploymentRequestBody struct {
	//  A client-defined token. With an active client token in the request, this action is idempotent.
	ClientToken *string `json:"ClientToken,omitempty"`
	// The identifier of the snapshot to deploy.
	SnapshotID string `json:"SnapshotId"`
}

type StartStageDeploymentRequest struct {
	PathParams StartStageDeploymentPathParams
	Headers    StartStageDeploymentHeaders
	Request    StartStageDeploymentRequestBody `request:"mediaType=application/json"`
}

type StartStageDeploymentResponse struct {
	// AccessDeniedException
	AccessDeniedException interface{}
	// ConflictException
	ConflictException interface{}
	ContentType       string
	// InternalServerException
	InternalServerException interface{}
	// ResourceNotFoundException
	ResourceNotFoundException interface{}
	// Success
	StartStageDeploymentResult *shared.StartStageDeploymentResult
	StatusCode                 int
	RawResponse                *http.Response
	// ThrottlingException
	ThrottlingException interface{}
	// ValidationException
	ValidationException interface{}
}
