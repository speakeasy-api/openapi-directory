/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

public class PutServersId200ApplicationJSONServer {
    /**
     * Time window (UTC) in which the backup will run, or null if the backups are not enabled
     */
    @JsonProperty("backup_window")
    public String backupWindow;

    public PutServersId200ApplicationJSONServer withBackupWindow(String backupWindow) {
        this.backupWindow = backupWindow;
        return this;
    }
    
    /**
     * Point in time when the Resource was created (in ISO-8601 format)
     */
    @JsonProperty("created")
    public String created;

    public PutServersId200ApplicationJSONServer withCreated(String created) {
        this.created = created;
        return this;
    }
    
    /**
     * Datacenter this Resource is located at
     */
    @JsonProperty("datacenter")
    public PutServersId200ApplicationJSONServerDatacenter datacenter;

    public PutServersId200ApplicationJSONServer withDatacenter(PutServersId200ApplicationJSONServerDatacenter datacenter) {
        this.datacenter = datacenter;
        return this;
    }
    
    /**
     * ID of the Resource
     */
    @JsonProperty("id")
    public Long id;

    public PutServersId200ApplicationJSONServer withId(Long id) {
        this.id = id;
        return this;
    }
    
    @JsonProperty("image")
    public PutServersId200ApplicationJSONServerImage image;

    public PutServersId200ApplicationJSONServer withImage(PutServersId200ApplicationJSONServerImage image) {
        this.image = image;
        return this;
    }
    
    /**
     * Free Traffic for the current billing period in bytes
     */
    @JsonProperty("included_traffic")
    public Double includedTraffic;

    public PutServersId200ApplicationJSONServer withIncludedTraffic(Double includedTraffic) {
        this.includedTraffic = includedTraffic;
        return this;
    }
    
    /**
     * Inbound Traffic for the current billing period in bytes
     */
    @JsonProperty("ingoing_traffic")
    public Double ingoingTraffic;

    public PutServersId200ApplicationJSONServer withIngoingTraffic(Double ingoingTraffic) {
        this.ingoingTraffic = ingoingTraffic;
        return this;
    }
    
    /**
     * ISO Image that is attached to this Server. Null if no ISO is attached.
     */
    @JsonProperty("iso")
    public PutServersId200ApplicationJSONServerIso iso;

    public PutServersId200ApplicationJSONServer withIso(PutServersId200ApplicationJSONServerIso iso) {
        this.iso = iso;
        return this;
    }
    
    /**
     * User-defined labels (key-value pairs)
     */
    @JsonProperty("labels")
    public java.util.Map<String, String> labels;

    public PutServersId200ApplicationJSONServer withLabels(java.util.Map<String, String> labels) {
        this.labels = labels;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("load_balancers")
    public Long[] loadBalancers;

    public PutServersId200ApplicationJSONServer withLoadBalancers(Long[] loadBalancers) {
        this.loadBalancers = loadBalancers;
        return this;
    }
    
    /**
     * True if Server has been locked and is not available to user
     */
    @JsonProperty("locked")
    public Boolean locked;

    public PutServersId200ApplicationJSONServer withLocked(Boolean locked) {
        this.locked = locked;
        return this;
    }
    
    /**
     * Name of the Server (must be unique per Project and a valid hostname as per RFC 1123)
     */
    @JsonProperty("name")
    public String name;

    public PutServersId200ApplicationJSONServer withName(String name) {
        this.name = name;
        return this;
    }
    
    /**
     * Outbound Traffic for the current billing period in bytes
     */
    @JsonProperty("outgoing_traffic")
    public Double outgoingTraffic;

    public PutServersId200ApplicationJSONServer withOutgoingTraffic(Double outgoingTraffic) {
        this.outgoingTraffic = outgoingTraffic;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("placement_group")
    public PutServersId200ApplicationJSONServerPlacementGroupNullable placementGroup;

    public PutServersId200ApplicationJSONServer withPlacementGroup(PutServersId200ApplicationJSONServerPlacementGroupNullable placementGroup) {
        this.placementGroup = placementGroup;
        return this;
    }
    
    /**
     * Size of the primary Disk
     */
    @JsonProperty("primary_disk_size")
    public Double primaryDiskSize;

    public PutServersId200ApplicationJSONServer withPrimaryDiskSize(Double primaryDiskSize) {
        this.primaryDiskSize = primaryDiskSize;
        return this;
    }
    
    /**
     * Private networks information
     */
    @JsonProperty("private_net")
    public PutServersId200ApplicationJSONServerPrivateNet[] privateNet;

    public PutServersId200ApplicationJSONServer withPrivateNet(PutServersId200ApplicationJSONServerPrivateNet[] privateNet) {
        this.privateNet = privateNet;
        return this;
    }
    
    /**
     * Protection configuration for the Server
     */
    @JsonProperty("protection")
    public PutServersId200ApplicationJSONServerProtection protection;

    public PutServersId200ApplicationJSONServer withProtection(PutServersId200ApplicationJSONServerProtection protection) {
        this.protection = protection;
        return this;
    }
    
    /**
     * Public network information. The Server's IPv4 address can be found in `public_net-&gt;ipv4-&gt;ip`
     */
    @JsonProperty("public_net")
    public PutServersId200ApplicationJSONServerPublicNet publicNet;

    public PutServersId200ApplicationJSONServer withPublicNet(PutServersId200ApplicationJSONServerPublicNet publicNet) {
        this.publicNet = publicNet;
        return this;
    }
    
    /**
     * True if rescue mode is enabled. Server will then boot into rescue system on next reboot
     */
    @JsonProperty("rescue_enabled")
    public Boolean rescueEnabled;

    public PutServersId200ApplicationJSONServer withRescueEnabled(Boolean rescueEnabled) {
        this.rescueEnabled = rescueEnabled;
        return this;
    }
    
    /**
     * Type of Server - determines how much ram, disk and cpu a Server has
     */
    @JsonProperty("server_type")
    public PutServersId200ApplicationJSONServerServerType serverType;

    public PutServersId200ApplicationJSONServer withServerType(PutServersId200ApplicationJSONServerServerType serverType) {
        this.serverType = serverType;
        return this;
    }
    
    /**
     * Status of the Server
     */
    @JsonProperty("status")
    public PutServersId200ApplicationJSONServerStatusEnum status;

    public PutServersId200ApplicationJSONServer withStatus(PutServersId200ApplicationJSONServerStatusEnum status) {
        this.status = status;
        return this;
    }
    
    /**
     * IDs of Volumes assigned to this Server
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("volumes")
    public Long[] volumes;

    public PutServersId200ApplicationJSONServer withVolumes(Long[] volumes) {
        this.volumes = volumes;
        return this;
    }
    
    public PutServersId200ApplicationJSONServer(@JsonProperty("backup_window") String backupWindow, @JsonProperty("created") String created, @JsonProperty("datacenter") PutServersId200ApplicationJSONServerDatacenter datacenter, @JsonProperty("id") Long id, @JsonProperty("image") PutServersId200ApplicationJSONServerImage image, @JsonProperty("included_traffic") Double includedTraffic, @JsonProperty("ingoing_traffic") Double ingoingTraffic, @JsonProperty("iso") PutServersId200ApplicationJSONServerIso iso, @JsonProperty("labels") java.util.Map<String, String> labels, @JsonProperty("locked") Boolean locked, @JsonProperty("name") String name, @JsonProperty("outgoing_traffic") Double outgoingTraffic, @JsonProperty("primary_disk_size") Double primaryDiskSize, @JsonProperty("private_net") PutServersId200ApplicationJSONServerPrivateNet[] privateNet, @JsonProperty("protection") PutServersId200ApplicationJSONServerProtection protection, @JsonProperty("public_net") PutServersId200ApplicationJSONServerPublicNet publicNet, @JsonProperty("rescue_enabled") Boolean rescueEnabled, @JsonProperty("server_type") PutServersId200ApplicationJSONServerServerType serverType, @JsonProperty("status") PutServersId200ApplicationJSONServerStatusEnum status) {
        this.backupWindow = backupWindow;
        this.created = created;
        this.datacenter = datacenter;
        this.id = id;
        this.image = image;
        this.includedTraffic = includedTraffic;
        this.ingoingTraffic = ingoingTraffic;
        this.iso = iso;
        this.labels = labels;
        this.locked = locked;
        this.name = name;
        this.outgoingTraffic = outgoingTraffic;
        this.primaryDiskSize = primaryDiskSize;
        this.privateNet = privateNet;
        this.protection = protection;
        this.publicNet = publicNet;
        this.rescueEnabled = rescueEnabled;
        this.serverType = serverType;
        this.status = status;
  }
}
