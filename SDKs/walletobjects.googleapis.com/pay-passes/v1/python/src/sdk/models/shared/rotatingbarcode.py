"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import localizedstring as shared_localizedstring
from ..shared import rotatingbarcodetotpdetails as shared_rotatingbarcodetotpdetails
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class RotatingBarcodeRenderEncodingEnum(str, Enum):
    r"""The render encoding for the barcode. When specified, barcode is rendered in the given encoding. Otherwise best known encoding is chosen by Google."""
    RENDER_ENCODING_UNSPECIFIED = 'RENDER_ENCODING_UNSPECIFIED'
    UTF_8 = 'UTF_8'

class RotatingBarcodeTypeEnum(str, Enum):
    r"""The type of this barcode."""
    BARCODE_TYPE_UNSPECIFIED = 'BARCODE_TYPE_UNSPECIFIED'
    AZTEC_UPPER = 'AZTEC'
    AZTEC_LOWER = 'aztec'
    CODE_39 = 'CODE_39'
    CODE39 = 'code39'
    CODE_128 = 'CODE_128'
    CODE128 = 'code128'
    CODABAR_UPPER = 'CODABAR'
    CODABAR_LOWER = 'codabar'
    DATA_MATRIX_UPPER = 'DATA_MATRIX'
    DATA_MATRIX_MIXED = 'dataMatrix'
    EAN_8 = 'EAN_8'
    EAN8 = 'ean8'
    EAN_13 = 'EAN_13'
    EAN13_LOWER = 'ean13'
    EAN13_UPPER = 'EAN13'
    ITF_14 = 'ITF_14'
    ITF14 = 'itf14'
    PDF_417 = 'PDF_417'
    PDF417_LOWER = 'pdf417'
    PDF417_UPPER = 'PDF417'
    QR_CODE_UPPER = 'QR_CODE'
    QR_CODE_MIXED = 'qrCode'
    QRCODE = 'qrcode'
    UPC_A_UPPER = 'UPC_A'
    UPC_A_MIXED = 'upcA'
    TEXT_ONLY_UPPER = 'TEXT_ONLY'
    TEXT_ONLY_MIXED = 'textOnly'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class RotatingBarcode:
    
    alternate_text: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('alternateText'), 'exclude': lambda f: f is None }})
    r"""An optional text that will override the default text that shows under the barcode. This field is intended for a human readable equivalent of the barcode value, used when the barcode cannot be scanned."""  
    render_encoding: Optional[RotatingBarcodeRenderEncodingEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('renderEncoding'), 'exclude': lambda f: f is None }})
    r"""The render encoding for the barcode. When specified, barcode is rendered in the given encoding. Otherwise best known encoding is chosen by Google."""  
    show_code_text: Optional[shared_localizedstring.LocalizedString] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('showCodeText'), 'exclude': lambda f: f is None }})  
    totp_details: Optional[shared_rotatingbarcodetotpdetails.RotatingBarcodeTotpDetails] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('totpDetails'), 'exclude': lambda f: f is None }})
    r"""Configuration for the time-based OTP substitutions. See https://tools.ietf.org/html/rfc6238"""  
    type: Optional[RotatingBarcodeTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})
    r"""The type of this barcode."""  
    value_pattern: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('valuePattern'), 'exclude': lambda f: f is None }})
    r"""String encoded barcode value. This string supports the following substitutions: * {totp_value_n}: Replaced with the TOTP value (see TotpDetails.parameters). * {totp_timestamp_millis}: Replaced with the timestamp (millis since epoch) at which the barcode was generated. * {totp_timestamp_seconds}: Replaced with the timestamp (seconds since epoch) at which the barcode was generated."""  
    