<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Shared;


/**
 * KeyUsageOptions - KeyUsage.KeyUsageOptions corresponds to the key usage values described in https://tools.ietf.org/html/rfc5280#section-4.2.1.3.
 * 
 * @package OpenAPI\OpenAPI\Models\Shared
 * @access public
 */
class KeyUsageOptions
{
    /**
     * The key may be used to sign certificates.
     * 
     * @var ?bool $certSign
     */
	#[\JMS\Serializer\Annotation\SerializedName('certSign')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $certSign = null;
    
    /**
     * The key may be used for cryptographic commitments. Note that this may also be referred to as "non-repudiation".
     * 
     * @var ?bool $contentCommitment
     */
	#[\JMS\Serializer\Annotation\SerializedName('contentCommitment')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $contentCommitment = null;
    
    /**
     * The key may be used sign certificate revocation lists.
     * 
     * @var ?bool $crlSign
     */
	#[\JMS\Serializer\Annotation\SerializedName('crlSign')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $crlSign = null;
    
    /**
     * The key may be used to encipher data.
     * 
     * @var ?bool $dataEncipherment
     */
	#[\JMS\Serializer\Annotation\SerializedName('dataEncipherment')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $dataEncipherment = null;
    
    /**
     * The key may be used to decipher only.
     * 
     * @var ?bool $decipherOnly
     */
	#[\JMS\Serializer\Annotation\SerializedName('decipherOnly')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $decipherOnly = null;
    
    /**
     * The key may be used for digital signatures.
     * 
     * @var ?bool $digitalSignature
     */
	#[\JMS\Serializer\Annotation\SerializedName('digitalSignature')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $digitalSignature = null;
    
    /**
     * The key may be used to encipher only.
     * 
     * @var ?bool $encipherOnly
     */
	#[\JMS\Serializer\Annotation\SerializedName('encipherOnly')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $encipherOnly = null;
    
    /**
     * The key may be used in a key agreement protocol.
     * 
     * @var ?bool $keyAgreement
     */
	#[\JMS\Serializer\Annotation\SerializedName('keyAgreement')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $keyAgreement = null;
    
    /**
     * The key may be used to encipher other keys.
     * 
     * @var ?bool $keyEncipherment
     */
	#[\JMS\Serializer\Annotation\SerializedName('keyEncipherment')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $keyEncipherment = null;
    
	public function __construct()
	{
		$this->certSign = null;
		$this->contentCommitment = null;
		$this->crlSign = null;
		$this->dataEncipherment = null;
		$this->decipherOnly = null;
		$this->digitalSignature = null;
		$this->encipherOnly = null;
		$this->keyAgreement = null;
		$this->keyEncipherment = null;
	}
}
