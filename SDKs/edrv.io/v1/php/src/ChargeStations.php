<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class ChargeStations 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Use to delete a charge station
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteChargeStationRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteChargeStationResponse
     */
	public function deleteChargeStation(
        \OpenAPI\OpenAPI\Models\Operations\DeleteChargeStationRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteChargeStationResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/chargestations/{id}', \OpenAPI\OpenAPI\Models\Operations\DeleteChargeStationRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteChargeStationResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
	
    /**
     * Get a single charge station's data
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetChargeStationRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetChargeStationResponse
     */
	public function getChargeStation(
        \OpenAPI\OpenAPI\Models\Operations\GetChargeStationRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetChargeStationResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/chargestations/{id}', \OpenAPI\OpenAPI\Models\Operations\GetChargeStationRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetChargeStationRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetChargeStationResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * List connectors for a chargestation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetChargeStationConnectorsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetChargeStationConnectorsResponse
     */
	public function getChargeStationConnectors(
        \OpenAPI\OpenAPI\Models\Operations\GetChargeStationConnectorsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetChargeStationConnectorsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/chargestations/{id}/connectors', \OpenAPI\OpenAPI\Models\Operations\GetChargeStationConnectorsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetChargeStationConnectorsRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetChargeStationConnectorsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
	
    /**
     * List all Chargestations
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetChargeStationsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetChargeStationsResponse
     */
	public function getChargeStations(
        \OpenAPI\OpenAPI\Models\Operations\GetChargeStationsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetChargeStationsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/chargestations');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetChargeStationsRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetChargeStationsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Update a charge station's data
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PatchChargeStationRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PatchChargeStationResponse
     */
	public function patchChargeStation(
        \OpenAPI\OpenAPI\Models\Operations\PatchChargeStationRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PatchChargeStationResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/chargestations/{id}', \OpenAPI\OpenAPI\Models\Operations\PatchChargeStationRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "schema1", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PatchChargeStationResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->patchChargeStation200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\PatchChargeStation200ApplicationJSON', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
	
    /**
     * Create a new charge station
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\Schema1 $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostChargeStationsResponse
     */
	public function postChargeStations(
        \OpenAPI\OpenAPI\Models\Shared\Schema1 $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostChargeStationsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/chargestations');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostChargeStationsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->postChargeStations201ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\PostChargeStations201ApplicationJSON', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
}