/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * FoodAndDrink - Meals, snacks, and beverages available at the property.
 */
public class FoodAndDrink {
    /**
     * Bar. A designated room, lounge or area of an on-site restaurant with seating at a counter behind which a hotel staffer takes the guest's order and provides the requested alcoholic drink. Can be indoors or outdoors. Also known as Pub.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("bar")
    public Boolean bar;

    public FoodAndDrink withBar(Boolean bar) {
        this.bar = bar;
        return this;
    }
    
    /**
     * Bar exception.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("barException")
    public FoodAndDrinkBarExceptionEnum barException;

    public FoodAndDrink withBarException(FoodAndDrinkBarExceptionEnum barException) {
        this.barException = barException;
        return this;
    }
    
    /**
     * Breakfast available. The morning meal is offered to all guests. Can be free or for a fee.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("breakfastAvailable")
    public Boolean breakfastAvailable;

    public FoodAndDrink withBreakfastAvailable(Boolean breakfastAvailable) {
        this.breakfastAvailable = breakfastAvailable;
        return this;
    }
    
    /**
     * Breakfast available exception.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("breakfastAvailableException")
    public FoodAndDrinkBreakfastAvailableExceptionEnum breakfastAvailableException;

    public FoodAndDrink withBreakfastAvailableException(FoodAndDrinkBreakfastAvailableExceptionEnum breakfastAvailableException) {
        this.breakfastAvailableException = breakfastAvailableException;
        return this;
    }
    
    /**
     * Breakfast buffet. Breakfast meal service where guests serve themselves from a variety of dishes/foods that are put out on a table.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("breakfastBuffet")
    public Boolean breakfastBuffet;

    public FoodAndDrink withBreakfastBuffet(Boolean breakfastBuffet) {
        this.breakfastBuffet = breakfastBuffet;
        return this;
    }
    
    /**
     * Breakfast buffet exception.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("breakfastBuffetException")
    public FoodAndDrinkBreakfastBuffetExceptionEnum breakfastBuffetException;

    public FoodAndDrink withBreakfastBuffetException(FoodAndDrinkBreakfastBuffetExceptionEnum breakfastBuffetException) {
        this.breakfastBuffetException = breakfastBuffetException;
        return this;
    }
    
    /**
     * Buffet. A type of meal where guests serve themselves from a variety of dishes/foods that are put out on a table. Includes lunch and/or dinner meals. A breakfast-only buffet is not sufficient.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("buffet")
    public Boolean buffet;

    public FoodAndDrink withBuffet(Boolean buffet) {
        this.buffet = buffet;
        return this;
    }
    
    /**
     * Buffet exception.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("buffetException")
    public FoodAndDrinkBuffetExceptionEnum buffetException;

    public FoodAndDrink withBuffetException(FoodAndDrinkBuffetExceptionEnum buffetException) {
        this.buffetException = buffetException;
        return this;
    }
    
    /**
     * Dinner buffet. Dinner meal service where guests serve themselves from a variety of dishes/foods that are put out on a table.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("dinnerBuffet")
    public Boolean dinnerBuffet;

    public FoodAndDrink withDinnerBuffet(Boolean dinnerBuffet) {
        this.dinnerBuffet = dinnerBuffet;
        return this;
    }
    
    /**
     * Dinner buffet exception.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("dinnerBuffetException")
    public FoodAndDrinkDinnerBuffetExceptionEnum dinnerBuffetException;

    public FoodAndDrink withDinnerBuffetException(FoodAndDrinkDinnerBuffetExceptionEnum dinnerBuffetException) {
        this.dinnerBuffetException = dinnerBuffetException;
        return this;
    }
    
    /**
     * Free breakfast. Breakfast is offered for free to all guests. Does not apply if limited to certain room packages.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("freeBreakfast")
    public Boolean freeBreakfast;

    public FoodAndDrink withFreeBreakfast(Boolean freeBreakfast) {
        this.freeBreakfast = freeBreakfast;
        return this;
    }
    
    /**
     * Free breakfast exception.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("freeBreakfastException")
    public FoodAndDrinkFreeBreakfastExceptionEnum freeBreakfastException;

    public FoodAndDrink withFreeBreakfastException(FoodAndDrinkFreeBreakfastExceptionEnum freeBreakfastException) {
        this.freeBreakfastException = freeBreakfastException;
        return this;
    }
    
    /**
     * Restaurant. A business onsite at the hotel that is open to the public as well as guests, and offers meals and beverages to consume at tables or counters. May or may not include table service. Also known as cafe, buffet, eatery. A "breakfast room" where the hotel serves breakfast only to guests (not the general public) does not count as a restaurant.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("restaurant")
    public Boolean restaurant;

    public FoodAndDrink withRestaurant(Boolean restaurant) {
        this.restaurant = restaurant;
        return this;
    }
    
    /**
     * Restaurant exception.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("restaurantException")
    public FoodAndDrinkRestaurantExceptionEnum restaurantException;

    public FoodAndDrink withRestaurantException(FoodAndDrinkRestaurantExceptionEnum restaurantException) {
        this.restaurantException = restaurantException;
        return this;
    }
    
    /**
     * Restaurants count. The number of restaurants at the hotel.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("restaurantsCount")
    public Integer restaurantsCount;

    public FoodAndDrink withRestaurantsCount(Integer restaurantsCount) {
        this.restaurantsCount = restaurantsCount;
        return this;
    }
    
    /**
     * Restaurants count exception.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("restaurantsCountException")
    public FoodAndDrinkRestaurantsCountExceptionEnum restaurantsCountException;

    public FoodAndDrink withRestaurantsCountException(FoodAndDrinkRestaurantsCountExceptionEnum restaurantsCountException) {
        this.restaurantsCountException = restaurantsCountException;
        return this;
    }
    
    /**
     * Room service. A hotel staffer delivers meals prepared onsite to a guest's room as per their request. May or may not be available during specific hours. Services should be available to all guests (not based on rate/room booked/reward program, etc).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("roomService")
    public Boolean roomService;

    public FoodAndDrink withRoomService(Boolean roomService) {
        this.roomService = roomService;
        return this;
    }
    
    /**
     * Room service exception.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("roomServiceException")
    public FoodAndDrinkRoomServiceExceptionEnum roomServiceException;

    public FoodAndDrink withRoomServiceException(FoodAndDrinkRoomServiceExceptionEnum roomServiceException) {
        this.roomServiceException = roomServiceException;
        return this;
    }
    
    /**
     * Table service. A restaurant in which a staff member is assigned to a guest's table to take their order, deliver and clear away food, and deliver the bill, if applicable. Also known as sit-down restaurant.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tableService")
    public Boolean tableService;

    public FoodAndDrink withTableService(Boolean tableService) {
        this.tableService = tableService;
        return this;
    }
    
    /**
     * Table service exception.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tableServiceException")
    public FoodAndDrinkTableServiceExceptionEnum tableServiceException;

    public FoodAndDrink withTableServiceException(FoodAndDrinkTableServiceExceptionEnum tableServiceException) {
        this.tableServiceException = tableServiceException;
        return this;
    }
    
    /**
     * 24hr room service. Room service is available 24 hours a day.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("twentyFourHourRoomService")
    public Boolean twentyFourHourRoomService;

    public FoodAndDrink withTwentyFourHourRoomService(Boolean twentyFourHourRoomService) {
        this.twentyFourHourRoomService = twentyFourHourRoomService;
        return this;
    }
    
    /**
     * 24hr room service exception.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("twentyFourHourRoomServiceException")
    public FoodAndDrinkTwentyFourHourRoomServiceExceptionEnum twentyFourHourRoomServiceException;

    public FoodAndDrink withTwentyFourHourRoomServiceException(FoodAndDrinkTwentyFourHourRoomServiceExceptionEnum twentyFourHourRoomServiceException) {
        this.twentyFourHourRoomServiceException = twentyFourHourRoomServiceException;
        return this;
    }
    
    /**
     * Vending machine. A glass-fronted mechanized cabinet displaying and dispensing snacks and beverages for purchase by coins, paper money and/or credit cards.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("vendingMachine")
    public Boolean vendingMachine;

    public FoodAndDrink withVendingMachine(Boolean vendingMachine) {
        this.vendingMachine = vendingMachine;
        return this;
    }
    
    /**
     * Vending machine exception.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("vendingMachineException")
    public FoodAndDrinkVendingMachineExceptionEnum vendingMachineException;

    public FoodAndDrink withVendingMachineException(FoodAndDrinkVendingMachineExceptionEnum vendingMachineException) {
        this.vendingMachineException = vendingMachineException;
        return this;
    }
    
    public FoodAndDrink(){}
}
