"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import basic_error as shared_basic_error
from ..shared import dependabot_alert as shared_dependabot_alert
from ..shared import scim_error as shared_scim_error
from ..shared import validation_error_simple as shared_validation_error_simple
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class DependabotUpdateAlertRequestBodyDismissedReasonEnum(str, Enum):
    r"""**Required when `state` is `dismissed`.** A reason for dismissing the alert."""
    FIX_STARTED = 'fix_started'
    INACCURATE = 'inaccurate'
    NO_BANDWIDTH = 'no_bandwidth'
    NOT_USED = 'not_used'
    TOLERABLE_RISK = 'tolerable_risk'

class DependabotUpdateAlertRequestBodyStateEnum(str, Enum):
    r"""The state of the Dependabot alert.
    A `dismissed_reason` must be provided when setting the state to `dismissed`.
    """
    DISMISSED = 'dismissed'
    OPEN = 'open'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class DependabotUpdateAlertRequestBody:
    
    state: DependabotUpdateAlertRequestBodyStateEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('state') }})
    r"""The state of the Dependabot alert.
    A `dismissed_reason` must be provided when setting the state to `dismissed`.
    """  
    dismissed_comment: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dismissed_comment'), 'exclude': lambda f: f is None }})
    r"""An optional comment associated with dismissing the alert."""  
    dismissed_reason: Optional[DependabotUpdateAlertRequestBodyDismissedReasonEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dismissed_reason'), 'exclude': lambda f: f is None }})
    r"""**Required when `state` is `dismissed`.** A reason for dismissing the alert."""  
    

@dataclasses.dataclass
class DependabotUpdateAlertRequest:
    
    alert_number: int = dataclasses.field(metadata={'path_param': { 'field_name': 'alert_number', 'style': 'simple', 'explode': False }})
    r"""The number that identifies a Dependabot alert in its repository.
    You can find this at the end of the URL for a Dependabot alert within GitHub,
    or in `number` fields in the response from the
    `GET /repos/{owner}/{repo}/dependabot/alerts` operation.
    """  
    owner: str = dataclasses.field(metadata={'path_param': { 'field_name': 'owner', 'style': 'simple', 'explode': False }})
    r"""The account owner of the repository. The name is not case sensitive."""  
    repo: str = dataclasses.field(metadata={'path_param': { 'field_name': 'repo', 'style': 'simple', 'explode': False }})
    r"""The name of the repository. The name is not case sensitive."""  
    request_body: DependabotUpdateAlertRequestBody = dataclasses.field(metadata={'request': { 'media_type': 'application/json' }})  
    

@dataclasses.dataclass
class DependabotUpdateAlertResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    basic_error: Optional[shared_basic_error.BasicError] = dataclasses.field(default=None)
    r"""Bad Request"""  
    dependabot_alert: Optional[shared_dependabot_alert.DependabotAlert] = dataclasses.field(default=None)
    r"""Response"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    scim_error: Optional[shared_scim_error.ScimError] = dataclasses.field(default=None)
    r"""Bad Request"""  
    validation_error_simple: Optional[shared_validation_error_simple.ValidationErrorSimple] = dataclasses.field(default=None)
    r"""Validation failed, or the endpoint has been spammed."""  
    