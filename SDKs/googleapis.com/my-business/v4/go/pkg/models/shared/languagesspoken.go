// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// LanguagesSpokenArabicSpokenExceptionEnum - Arabic exception.
type LanguagesSpokenArabicSpokenExceptionEnum string

const (
	LanguagesSpokenArabicSpokenExceptionEnumExceptionUnspecified LanguagesSpokenArabicSpokenExceptionEnum = "EXCEPTION_UNSPECIFIED"
	LanguagesSpokenArabicSpokenExceptionEnumUnderConstruction    LanguagesSpokenArabicSpokenExceptionEnum = "UNDER_CONSTRUCTION"
	LanguagesSpokenArabicSpokenExceptionEnumDependentOnSeason    LanguagesSpokenArabicSpokenExceptionEnum = "DEPENDENT_ON_SEASON"
	LanguagesSpokenArabicSpokenExceptionEnumDependentOnDayOfWeek LanguagesSpokenArabicSpokenExceptionEnum = "DEPENDENT_ON_DAY_OF_WEEK"
)

func (e LanguagesSpokenArabicSpokenExceptionEnum) ToPointer() *LanguagesSpokenArabicSpokenExceptionEnum {
	return &e
}

func (e *LanguagesSpokenArabicSpokenExceptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "EXCEPTION_UNSPECIFIED":
		fallthrough
	case "UNDER_CONSTRUCTION":
		fallthrough
	case "DEPENDENT_ON_SEASON":
		fallthrough
	case "DEPENDENT_ON_DAY_OF_WEEK":
		*e = LanguagesSpokenArabicSpokenExceptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for LanguagesSpokenArabicSpokenExceptionEnum: %v", v)
	}
}

// LanguagesSpokenCantoneseSpokenExceptionEnum - Cantonese exception.
type LanguagesSpokenCantoneseSpokenExceptionEnum string

const (
	LanguagesSpokenCantoneseSpokenExceptionEnumExceptionUnspecified LanguagesSpokenCantoneseSpokenExceptionEnum = "EXCEPTION_UNSPECIFIED"
	LanguagesSpokenCantoneseSpokenExceptionEnumUnderConstruction    LanguagesSpokenCantoneseSpokenExceptionEnum = "UNDER_CONSTRUCTION"
	LanguagesSpokenCantoneseSpokenExceptionEnumDependentOnSeason    LanguagesSpokenCantoneseSpokenExceptionEnum = "DEPENDENT_ON_SEASON"
	LanguagesSpokenCantoneseSpokenExceptionEnumDependentOnDayOfWeek LanguagesSpokenCantoneseSpokenExceptionEnum = "DEPENDENT_ON_DAY_OF_WEEK"
)

func (e LanguagesSpokenCantoneseSpokenExceptionEnum) ToPointer() *LanguagesSpokenCantoneseSpokenExceptionEnum {
	return &e
}

func (e *LanguagesSpokenCantoneseSpokenExceptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "EXCEPTION_UNSPECIFIED":
		fallthrough
	case "UNDER_CONSTRUCTION":
		fallthrough
	case "DEPENDENT_ON_SEASON":
		fallthrough
	case "DEPENDENT_ON_DAY_OF_WEEK":
		*e = LanguagesSpokenCantoneseSpokenExceptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for LanguagesSpokenCantoneseSpokenExceptionEnum: %v", v)
	}
}

// LanguagesSpokenDutchSpokenExceptionEnum - Dutch exception.
type LanguagesSpokenDutchSpokenExceptionEnum string

const (
	LanguagesSpokenDutchSpokenExceptionEnumExceptionUnspecified LanguagesSpokenDutchSpokenExceptionEnum = "EXCEPTION_UNSPECIFIED"
	LanguagesSpokenDutchSpokenExceptionEnumUnderConstruction    LanguagesSpokenDutchSpokenExceptionEnum = "UNDER_CONSTRUCTION"
	LanguagesSpokenDutchSpokenExceptionEnumDependentOnSeason    LanguagesSpokenDutchSpokenExceptionEnum = "DEPENDENT_ON_SEASON"
	LanguagesSpokenDutchSpokenExceptionEnumDependentOnDayOfWeek LanguagesSpokenDutchSpokenExceptionEnum = "DEPENDENT_ON_DAY_OF_WEEK"
)

func (e LanguagesSpokenDutchSpokenExceptionEnum) ToPointer() *LanguagesSpokenDutchSpokenExceptionEnum {
	return &e
}

func (e *LanguagesSpokenDutchSpokenExceptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "EXCEPTION_UNSPECIFIED":
		fallthrough
	case "UNDER_CONSTRUCTION":
		fallthrough
	case "DEPENDENT_ON_SEASON":
		fallthrough
	case "DEPENDENT_ON_DAY_OF_WEEK":
		*e = LanguagesSpokenDutchSpokenExceptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for LanguagesSpokenDutchSpokenExceptionEnum: %v", v)
	}
}

// LanguagesSpokenEnglishSpokenExceptionEnum - English exception.
type LanguagesSpokenEnglishSpokenExceptionEnum string

const (
	LanguagesSpokenEnglishSpokenExceptionEnumExceptionUnspecified LanguagesSpokenEnglishSpokenExceptionEnum = "EXCEPTION_UNSPECIFIED"
	LanguagesSpokenEnglishSpokenExceptionEnumUnderConstruction    LanguagesSpokenEnglishSpokenExceptionEnum = "UNDER_CONSTRUCTION"
	LanguagesSpokenEnglishSpokenExceptionEnumDependentOnSeason    LanguagesSpokenEnglishSpokenExceptionEnum = "DEPENDENT_ON_SEASON"
	LanguagesSpokenEnglishSpokenExceptionEnumDependentOnDayOfWeek LanguagesSpokenEnglishSpokenExceptionEnum = "DEPENDENT_ON_DAY_OF_WEEK"
)

func (e LanguagesSpokenEnglishSpokenExceptionEnum) ToPointer() *LanguagesSpokenEnglishSpokenExceptionEnum {
	return &e
}

func (e *LanguagesSpokenEnglishSpokenExceptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "EXCEPTION_UNSPECIFIED":
		fallthrough
	case "UNDER_CONSTRUCTION":
		fallthrough
	case "DEPENDENT_ON_SEASON":
		fallthrough
	case "DEPENDENT_ON_DAY_OF_WEEK":
		*e = LanguagesSpokenEnglishSpokenExceptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for LanguagesSpokenEnglishSpokenExceptionEnum: %v", v)
	}
}

// LanguagesSpokenFilipinoSpokenExceptionEnum - Filipino exception.
type LanguagesSpokenFilipinoSpokenExceptionEnum string

const (
	LanguagesSpokenFilipinoSpokenExceptionEnumExceptionUnspecified LanguagesSpokenFilipinoSpokenExceptionEnum = "EXCEPTION_UNSPECIFIED"
	LanguagesSpokenFilipinoSpokenExceptionEnumUnderConstruction    LanguagesSpokenFilipinoSpokenExceptionEnum = "UNDER_CONSTRUCTION"
	LanguagesSpokenFilipinoSpokenExceptionEnumDependentOnSeason    LanguagesSpokenFilipinoSpokenExceptionEnum = "DEPENDENT_ON_SEASON"
	LanguagesSpokenFilipinoSpokenExceptionEnumDependentOnDayOfWeek LanguagesSpokenFilipinoSpokenExceptionEnum = "DEPENDENT_ON_DAY_OF_WEEK"
)

func (e LanguagesSpokenFilipinoSpokenExceptionEnum) ToPointer() *LanguagesSpokenFilipinoSpokenExceptionEnum {
	return &e
}

func (e *LanguagesSpokenFilipinoSpokenExceptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "EXCEPTION_UNSPECIFIED":
		fallthrough
	case "UNDER_CONSTRUCTION":
		fallthrough
	case "DEPENDENT_ON_SEASON":
		fallthrough
	case "DEPENDENT_ON_DAY_OF_WEEK":
		*e = LanguagesSpokenFilipinoSpokenExceptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for LanguagesSpokenFilipinoSpokenExceptionEnum: %v", v)
	}
}

// LanguagesSpokenFrenchSpokenExceptionEnum - French exception.
type LanguagesSpokenFrenchSpokenExceptionEnum string

const (
	LanguagesSpokenFrenchSpokenExceptionEnumExceptionUnspecified LanguagesSpokenFrenchSpokenExceptionEnum = "EXCEPTION_UNSPECIFIED"
	LanguagesSpokenFrenchSpokenExceptionEnumUnderConstruction    LanguagesSpokenFrenchSpokenExceptionEnum = "UNDER_CONSTRUCTION"
	LanguagesSpokenFrenchSpokenExceptionEnumDependentOnSeason    LanguagesSpokenFrenchSpokenExceptionEnum = "DEPENDENT_ON_SEASON"
	LanguagesSpokenFrenchSpokenExceptionEnumDependentOnDayOfWeek LanguagesSpokenFrenchSpokenExceptionEnum = "DEPENDENT_ON_DAY_OF_WEEK"
)

func (e LanguagesSpokenFrenchSpokenExceptionEnum) ToPointer() *LanguagesSpokenFrenchSpokenExceptionEnum {
	return &e
}

func (e *LanguagesSpokenFrenchSpokenExceptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "EXCEPTION_UNSPECIFIED":
		fallthrough
	case "UNDER_CONSTRUCTION":
		fallthrough
	case "DEPENDENT_ON_SEASON":
		fallthrough
	case "DEPENDENT_ON_DAY_OF_WEEK":
		*e = LanguagesSpokenFrenchSpokenExceptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for LanguagesSpokenFrenchSpokenExceptionEnum: %v", v)
	}
}

// LanguagesSpokenGermanSpokenExceptionEnum - German exception.
type LanguagesSpokenGermanSpokenExceptionEnum string

const (
	LanguagesSpokenGermanSpokenExceptionEnumExceptionUnspecified LanguagesSpokenGermanSpokenExceptionEnum = "EXCEPTION_UNSPECIFIED"
	LanguagesSpokenGermanSpokenExceptionEnumUnderConstruction    LanguagesSpokenGermanSpokenExceptionEnum = "UNDER_CONSTRUCTION"
	LanguagesSpokenGermanSpokenExceptionEnumDependentOnSeason    LanguagesSpokenGermanSpokenExceptionEnum = "DEPENDENT_ON_SEASON"
	LanguagesSpokenGermanSpokenExceptionEnumDependentOnDayOfWeek LanguagesSpokenGermanSpokenExceptionEnum = "DEPENDENT_ON_DAY_OF_WEEK"
)

func (e LanguagesSpokenGermanSpokenExceptionEnum) ToPointer() *LanguagesSpokenGermanSpokenExceptionEnum {
	return &e
}

func (e *LanguagesSpokenGermanSpokenExceptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "EXCEPTION_UNSPECIFIED":
		fallthrough
	case "UNDER_CONSTRUCTION":
		fallthrough
	case "DEPENDENT_ON_SEASON":
		fallthrough
	case "DEPENDENT_ON_DAY_OF_WEEK":
		*e = LanguagesSpokenGermanSpokenExceptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for LanguagesSpokenGermanSpokenExceptionEnum: %v", v)
	}
}

// LanguagesSpokenHindiSpokenExceptionEnum - Hindi exception.
type LanguagesSpokenHindiSpokenExceptionEnum string

const (
	LanguagesSpokenHindiSpokenExceptionEnumExceptionUnspecified LanguagesSpokenHindiSpokenExceptionEnum = "EXCEPTION_UNSPECIFIED"
	LanguagesSpokenHindiSpokenExceptionEnumUnderConstruction    LanguagesSpokenHindiSpokenExceptionEnum = "UNDER_CONSTRUCTION"
	LanguagesSpokenHindiSpokenExceptionEnumDependentOnSeason    LanguagesSpokenHindiSpokenExceptionEnum = "DEPENDENT_ON_SEASON"
	LanguagesSpokenHindiSpokenExceptionEnumDependentOnDayOfWeek LanguagesSpokenHindiSpokenExceptionEnum = "DEPENDENT_ON_DAY_OF_WEEK"
)

func (e LanguagesSpokenHindiSpokenExceptionEnum) ToPointer() *LanguagesSpokenHindiSpokenExceptionEnum {
	return &e
}

func (e *LanguagesSpokenHindiSpokenExceptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "EXCEPTION_UNSPECIFIED":
		fallthrough
	case "UNDER_CONSTRUCTION":
		fallthrough
	case "DEPENDENT_ON_SEASON":
		fallthrough
	case "DEPENDENT_ON_DAY_OF_WEEK":
		*e = LanguagesSpokenHindiSpokenExceptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for LanguagesSpokenHindiSpokenExceptionEnum: %v", v)
	}
}

// LanguagesSpokenIndonesianSpokenExceptionEnum - Indonesian exception.
type LanguagesSpokenIndonesianSpokenExceptionEnum string

const (
	LanguagesSpokenIndonesianSpokenExceptionEnumExceptionUnspecified LanguagesSpokenIndonesianSpokenExceptionEnum = "EXCEPTION_UNSPECIFIED"
	LanguagesSpokenIndonesianSpokenExceptionEnumUnderConstruction    LanguagesSpokenIndonesianSpokenExceptionEnum = "UNDER_CONSTRUCTION"
	LanguagesSpokenIndonesianSpokenExceptionEnumDependentOnSeason    LanguagesSpokenIndonesianSpokenExceptionEnum = "DEPENDENT_ON_SEASON"
	LanguagesSpokenIndonesianSpokenExceptionEnumDependentOnDayOfWeek LanguagesSpokenIndonesianSpokenExceptionEnum = "DEPENDENT_ON_DAY_OF_WEEK"
)

func (e LanguagesSpokenIndonesianSpokenExceptionEnum) ToPointer() *LanguagesSpokenIndonesianSpokenExceptionEnum {
	return &e
}

func (e *LanguagesSpokenIndonesianSpokenExceptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "EXCEPTION_UNSPECIFIED":
		fallthrough
	case "UNDER_CONSTRUCTION":
		fallthrough
	case "DEPENDENT_ON_SEASON":
		fallthrough
	case "DEPENDENT_ON_DAY_OF_WEEK":
		*e = LanguagesSpokenIndonesianSpokenExceptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for LanguagesSpokenIndonesianSpokenExceptionEnum: %v", v)
	}
}

// LanguagesSpokenItalianSpokenExceptionEnum - Italian exception.
type LanguagesSpokenItalianSpokenExceptionEnum string

const (
	LanguagesSpokenItalianSpokenExceptionEnumExceptionUnspecified LanguagesSpokenItalianSpokenExceptionEnum = "EXCEPTION_UNSPECIFIED"
	LanguagesSpokenItalianSpokenExceptionEnumUnderConstruction    LanguagesSpokenItalianSpokenExceptionEnum = "UNDER_CONSTRUCTION"
	LanguagesSpokenItalianSpokenExceptionEnumDependentOnSeason    LanguagesSpokenItalianSpokenExceptionEnum = "DEPENDENT_ON_SEASON"
	LanguagesSpokenItalianSpokenExceptionEnumDependentOnDayOfWeek LanguagesSpokenItalianSpokenExceptionEnum = "DEPENDENT_ON_DAY_OF_WEEK"
)

func (e LanguagesSpokenItalianSpokenExceptionEnum) ToPointer() *LanguagesSpokenItalianSpokenExceptionEnum {
	return &e
}

func (e *LanguagesSpokenItalianSpokenExceptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "EXCEPTION_UNSPECIFIED":
		fallthrough
	case "UNDER_CONSTRUCTION":
		fallthrough
	case "DEPENDENT_ON_SEASON":
		fallthrough
	case "DEPENDENT_ON_DAY_OF_WEEK":
		*e = LanguagesSpokenItalianSpokenExceptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for LanguagesSpokenItalianSpokenExceptionEnum: %v", v)
	}
}

// LanguagesSpokenJapaneseSpokenExceptionEnum - Japanese exception.
type LanguagesSpokenJapaneseSpokenExceptionEnum string

const (
	LanguagesSpokenJapaneseSpokenExceptionEnumExceptionUnspecified LanguagesSpokenJapaneseSpokenExceptionEnum = "EXCEPTION_UNSPECIFIED"
	LanguagesSpokenJapaneseSpokenExceptionEnumUnderConstruction    LanguagesSpokenJapaneseSpokenExceptionEnum = "UNDER_CONSTRUCTION"
	LanguagesSpokenJapaneseSpokenExceptionEnumDependentOnSeason    LanguagesSpokenJapaneseSpokenExceptionEnum = "DEPENDENT_ON_SEASON"
	LanguagesSpokenJapaneseSpokenExceptionEnumDependentOnDayOfWeek LanguagesSpokenJapaneseSpokenExceptionEnum = "DEPENDENT_ON_DAY_OF_WEEK"
)

func (e LanguagesSpokenJapaneseSpokenExceptionEnum) ToPointer() *LanguagesSpokenJapaneseSpokenExceptionEnum {
	return &e
}

func (e *LanguagesSpokenJapaneseSpokenExceptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "EXCEPTION_UNSPECIFIED":
		fallthrough
	case "UNDER_CONSTRUCTION":
		fallthrough
	case "DEPENDENT_ON_SEASON":
		fallthrough
	case "DEPENDENT_ON_DAY_OF_WEEK":
		*e = LanguagesSpokenJapaneseSpokenExceptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for LanguagesSpokenJapaneseSpokenExceptionEnum: %v", v)
	}
}

// LanguagesSpokenKoreanSpokenExceptionEnum - Korean exception.
type LanguagesSpokenKoreanSpokenExceptionEnum string

const (
	LanguagesSpokenKoreanSpokenExceptionEnumExceptionUnspecified LanguagesSpokenKoreanSpokenExceptionEnum = "EXCEPTION_UNSPECIFIED"
	LanguagesSpokenKoreanSpokenExceptionEnumUnderConstruction    LanguagesSpokenKoreanSpokenExceptionEnum = "UNDER_CONSTRUCTION"
	LanguagesSpokenKoreanSpokenExceptionEnumDependentOnSeason    LanguagesSpokenKoreanSpokenExceptionEnum = "DEPENDENT_ON_SEASON"
	LanguagesSpokenKoreanSpokenExceptionEnumDependentOnDayOfWeek LanguagesSpokenKoreanSpokenExceptionEnum = "DEPENDENT_ON_DAY_OF_WEEK"
)

func (e LanguagesSpokenKoreanSpokenExceptionEnum) ToPointer() *LanguagesSpokenKoreanSpokenExceptionEnum {
	return &e
}

func (e *LanguagesSpokenKoreanSpokenExceptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "EXCEPTION_UNSPECIFIED":
		fallthrough
	case "UNDER_CONSTRUCTION":
		fallthrough
	case "DEPENDENT_ON_SEASON":
		fallthrough
	case "DEPENDENT_ON_DAY_OF_WEEK":
		*e = LanguagesSpokenKoreanSpokenExceptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for LanguagesSpokenKoreanSpokenExceptionEnum: %v", v)
	}
}

// LanguagesSpokenMandarinSpokenExceptionEnum - Mandarin exception.
type LanguagesSpokenMandarinSpokenExceptionEnum string

const (
	LanguagesSpokenMandarinSpokenExceptionEnumExceptionUnspecified LanguagesSpokenMandarinSpokenExceptionEnum = "EXCEPTION_UNSPECIFIED"
	LanguagesSpokenMandarinSpokenExceptionEnumUnderConstruction    LanguagesSpokenMandarinSpokenExceptionEnum = "UNDER_CONSTRUCTION"
	LanguagesSpokenMandarinSpokenExceptionEnumDependentOnSeason    LanguagesSpokenMandarinSpokenExceptionEnum = "DEPENDENT_ON_SEASON"
	LanguagesSpokenMandarinSpokenExceptionEnumDependentOnDayOfWeek LanguagesSpokenMandarinSpokenExceptionEnum = "DEPENDENT_ON_DAY_OF_WEEK"
)

func (e LanguagesSpokenMandarinSpokenExceptionEnum) ToPointer() *LanguagesSpokenMandarinSpokenExceptionEnum {
	return &e
}

func (e *LanguagesSpokenMandarinSpokenExceptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "EXCEPTION_UNSPECIFIED":
		fallthrough
	case "UNDER_CONSTRUCTION":
		fallthrough
	case "DEPENDENT_ON_SEASON":
		fallthrough
	case "DEPENDENT_ON_DAY_OF_WEEK":
		*e = LanguagesSpokenMandarinSpokenExceptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for LanguagesSpokenMandarinSpokenExceptionEnum: %v", v)
	}
}

// LanguagesSpokenPortugueseSpokenExceptionEnum - Portuguese exception.
type LanguagesSpokenPortugueseSpokenExceptionEnum string

const (
	LanguagesSpokenPortugueseSpokenExceptionEnumExceptionUnspecified LanguagesSpokenPortugueseSpokenExceptionEnum = "EXCEPTION_UNSPECIFIED"
	LanguagesSpokenPortugueseSpokenExceptionEnumUnderConstruction    LanguagesSpokenPortugueseSpokenExceptionEnum = "UNDER_CONSTRUCTION"
	LanguagesSpokenPortugueseSpokenExceptionEnumDependentOnSeason    LanguagesSpokenPortugueseSpokenExceptionEnum = "DEPENDENT_ON_SEASON"
	LanguagesSpokenPortugueseSpokenExceptionEnumDependentOnDayOfWeek LanguagesSpokenPortugueseSpokenExceptionEnum = "DEPENDENT_ON_DAY_OF_WEEK"
)

func (e LanguagesSpokenPortugueseSpokenExceptionEnum) ToPointer() *LanguagesSpokenPortugueseSpokenExceptionEnum {
	return &e
}

func (e *LanguagesSpokenPortugueseSpokenExceptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "EXCEPTION_UNSPECIFIED":
		fallthrough
	case "UNDER_CONSTRUCTION":
		fallthrough
	case "DEPENDENT_ON_SEASON":
		fallthrough
	case "DEPENDENT_ON_DAY_OF_WEEK":
		*e = LanguagesSpokenPortugueseSpokenExceptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for LanguagesSpokenPortugueseSpokenExceptionEnum: %v", v)
	}
}

// LanguagesSpokenRussianSpokenExceptionEnum - Russian exception.
type LanguagesSpokenRussianSpokenExceptionEnum string

const (
	LanguagesSpokenRussianSpokenExceptionEnumExceptionUnspecified LanguagesSpokenRussianSpokenExceptionEnum = "EXCEPTION_UNSPECIFIED"
	LanguagesSpokenRussianSpokenExceptionEnumUnderConstruction    LanguagesSpokenRussianSpokenExceptionEnum = "UNDER_CONSTRUCTION"
	LanguagesSpokenRussianSpokenExceptionEnumDependentOnSeason    LanguagesSpokenRussianSpokenExceptionEnum = "DEPENDENT_ON_SEASON"
	LanguagesSpokenRussianSpokenExceptionEnumDependentOnDayOfWeek LanguagesSpokenRussianSpokenExceptionEnum = "DEPENDENT_ON_DAY_OF_WEEK"
)

func (e LanguagesSpokenRussianSpokenExceptionEnum) ToPointer() *LanguagesSpokenRussianSpokenExceptionEnum {
	return &e
}

func (e *LanguagesSpokenRussianSpokenExceptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "EXCEPTION_UNSPECIFIED":
		fallthrough
	case "UNDER_CONSTRUCTION":
		fallthrough
	case "DEPENDENT_ON_SEASON":
		fallthrough
	case "DEPENDENT_ON_DAY_OF_WEEK":
		*e = LanguagesSpokenRussianSpokenExceptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for LanguagesSpokenRussianSpokenExceptionEnum: %v", v)
	}
}

// LanguagesSpokenSpanishSpokenExceptionEnum - Spanish exception.
type LanguagesSpokenSpanishSpokenExceptionEnum string

const (
	LanguagesSpokenSpanishSpokenExceptionEnumExceptionUnspecified LanguagesSpokenSpanishSpokenExceptionEnum = "EXCEPTION_UNSPECIFIED"
	LanguagesSpokenSpanishSpokenExceptionEnumUnderConstruction    LanguagesSpokenSpanishSpokenExceptionEnum = "UNDER_CONSTRUCTION"
	LanguagesSpokenSpanishSpokenExceptionEnumDependentOnSeason    LanguagesSpokenSpanishSpokenExceptionEnum = "DEPENDENT_ON_SEASON"
	LanguagesSpokenSpanishSpokenExceptionEnumDependentOnDayOfWeek LanguagesSpokenSpanishSpokenExceptionEnum = "DEPENDENT_ON_DAY_OF_WEEK"
)

func (e LanguagesSpokenSpanishSpokenExceptionEnum) ToPointer() *LanguagesSpokenSpanishSpokenExceptionEnum {
	return &e
}

func (e *LanguagesSpokenSpanishSpokenExceptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "EXCEPTION_UNSPECIFIED":
		fallthrough
	case "UNDER_CONSTRUCTION":
		fallthrough
	case "DEPENDENT_ON_SEASON":
		fallthrough
	case "DEPENDENT_ON_DAY_OF_WEEK":
		*e = LanguagesSpokenSpanishSpokenExceptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for LanguagesSpokenSpanishSpokenExceptionEnum: %v", v)
	}
}

// LanguagesSpokenVietnameseSpokenExceptionEnum - Vietnamese exception.
type LanguagesSpokenVietnameseSpokenExceptionEnum string

const (
	LanguagesSpokenVietnameseSpokenExceptionEnumExceptionUnspecified LanguagesSpokenVietnameseSpokenExceptionEnum = "EXCEPTION_UNSPECIFIED"
	LanguagesSpokenVietnameseSpokenExceptionEnumUnderConstruction    LanguagesSpokenVietnameseSpokenExceptionEnum = "UNDER_CONSTRUCTION"
	LanguagesSpokenVietnameseSpokenExceptionEnumDependentOnSeason    LanguagesSpokenVietnameseSpokenExceptionEnum = "DEPENDENT_ON_SEASON"
	LanguagesSpokenVietnameseSpokenExceptionEnumDependentOnDayOfWeek LanguagesSpokenVietnameseSpokenExceptionEnum = "DEPENDENT_ON_DAY_OF_WEEK"
)

func (e LanguagesSpokenVietnameseSpokenExceptionEnum) ToPointer() *LanguagesSpokenVietnameseSpokenExceptionEnum {
	return &e
}

func (e *LanguagesSpokenVietnameseSpokenExceptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "EXCEPTION_UNSPECIFIED":
		fallthrough
	case "UNDER_CONSTRUCTION":
		fallthrough
	case "DEPENDENT_ON_SEASON":
		fallthrough
	case "DEPENDENT_ON_DAY_OF_WEEK":
		*e = LanguagesSpokenVietnameseSpokenExceptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for LanguagesSpokenVietnameseSpokenExceptionEnum: %v", v)
	}
}

// LanguagesSpoken - Languages spoken by at least one staff member.
type LanguagesSpoken struct {
	// Arabic. At least one staff member speaks Arabic.
	ArabicSpoken *bool `json:"arabicSpoken,omitempty"`
	// Arabic exception.
	ArabicSpokenException *LanguagesSpokenArabicSpokenExceptionEnum `json:"arabicSpokenException,omitempty"`
	// Cantonese. At least one staff member speaks Cantonese.
	CantoneseSpoken *bool `json:"cantoneseSpoken,omitempty"`
	// Cantonese exception.
	CantoneseSpokenException *LanguagesSpokenCantoneseSpokenExceptionEnum `json:"cantoneseSpokenException,omitempty"`
	// Dutch. At least one staff member speaks Dutch.
	DutchSpoken *bool `json:"dutchSpoken,omitempty"`
	// Dutch exception.
	DutchSpokenException *LanguagesSpokenDutchSpokenExceptionEnum `json:"dutchSpokenException,omitempty"`
	// English. At least one staff member speaks English.
	EnglishSpoken *bool `json:"englishSpoken,omitempty"`
	// English exception.
	EnglishSpokenException *LanguagesSpokenEnglishSpokenExceptionEnum `json:"englishSpokenException,omitempty"`
	// Filipino. At least one staff member speaks Filipino.
	FilipinoSpoken *bool `json:"filipinoSpoken,omitempty"`
	// Filipino exception.
	FilipinoSpokenException *LanguagesSpokenFilipinoSpokenExceptionEnum `json:"filipinoSpokenException,omitempty"`
	// French. At least one staff member speaks French.
	FrenchSpoken *bool `json:"frenchSpoken,omitempty"`
	// French exception.
	FrenchSpokenException *LanguagesSpokenFrenchSpokenExceptionEnum `json:"frenchSpokenException,omitempty"`
	// German. At least one staff member speaks German.
	GermanSpoken *bool `json:"germanSpoken,omitempty"`
	// German exception.
	GermanSpokenException *LanguagesSpokenGermanSpokenExceptionEnum `json:"germanSpokenException,omitempty"`
	// Hindi. At least one staff member speaks Hindi.
	HindiSpoken *bool `json:"hindiSpoken,omitempty"`
	// Hindi exception.
	HindiSpokenException *LanguagesSpokenHindiSpokenExceptionEnum `json:"hindiSpokenException,omitempty"`
	// Indonesian. At least one staff member speaks Indonesian.
	IndonesianSpoken *bool `json:"indonesianSpoken,omitempty"`
	// Indonesian exception.
	IndonesianSpokenException *LanguagesSpokenIndonesianSpokenExceptionEnum `json:"indonesianSpokenException,omitempty"`
	// Italian. At least one staff member speaks Italian.
	ItalianSpoken *bool `json:"italianSpoken,omitempty"`
	// Italian exception.
	ItalianSpokenException *LanguagesSpokenItalianSpokenExceptionEnum `json:"italianSpokenException,omitempty"`
	// Japanese. At least one staff member speaks Japanese.
	JapaneseSpoken *bool `json:"japaneseSpoken,omitempty"`
	// Japanese exception.
	JapaneseSpokenException *LanguagesSpokenJapaneseSpokenExceptionEnum `json:"japaneseSpokenException,omitempty"`
	// Korean. At least one staff member speaks Korean.
	KoreanSpoken *bool `json:"koreanSpoken,omitempty"`
	// Korean exception.
	KoreanSpokenException *LanguagesSpokenKoreanSpokenExceptionEnum `json:"koreanSpokenException,omitempty"`
	// Mandarin. At least one staff member speaks Mandarin.
	MandarinSpoken *bool `json:"mandarinSpoken,omitempty"`
	// Mandarin exception.
	MandarinSpokenException *LanguagesSpokenMandarinSpokenExceptionEnum `json:"mandarinSpokenException,omitempty"`
	// Portuguese. At least one staff member speaks Portuguese.
	PortugueseSpoken *bool `json:"portugueseSpoken,omitempty"`
	// Portuguese exception.
	PortugueseSpokenException *LanguagesSpokenPortugueseSpokenExceptionEnum `json:"portugueseSpokenException,omitempty"`
	// Russian. At least one staff member speaks Russian.
	RussianSpoken *bool `json:"russianSpoken,omitempty"`
	// Russian exception.
	RussianSpokenException *LanguagesSpokenRussianSpokenExceptionEnum `json:"russianSpokenException,omitempty"`
	// Spanish. At least one staff member speaks Spanish.
	SpanishSpoken *bool `json:"spanishSpoken,omitempty"`
	// Spanish exception.
	SpanishSpokenException *LanguagesSpokenSpanishSpokenExceptionEnum `json:"spanishSpokenException,omitempty"`
	// Vietnamese. At least one staff member speaks Vietnamese.
	VietnameseSpoken *bool `json:"vietnameseSpoken,omitempty"`
	// Vietnamese exception.
	VietnameseSpokenException *LanguagesSpokenVietnameseSpokenExceptionEnum `json:"vietnameseSpokenException,omitempty"`
}
