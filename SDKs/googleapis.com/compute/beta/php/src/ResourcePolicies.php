<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class ResourcePolicies 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Retrieves an aggregated list of resource policies.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeResourcePoliciesAggregatedListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeResourcePoliciesAggregatedListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeResourcePoliciesAggregatedListResponse
     */
	public function computeResourcePoliciesAggregatedList(
        \OpenAPI\OpenAPI\Models\Operations\ComputeResourcePoliciesAggregatedListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeResourcePoliciesAggregatedListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeResourcePoliciesAggregatedListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/aggregated/resourcePolicies', \OpenAPI\OpenAPI\Models\Operations\ComputeResourcePoliciesAggregatedListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeResourcePoliciesAggregatedListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeResourcePoliciesAggregatedListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->resourcePolicyAggregatedList = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ResourcePolicyAggregatedList', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Deletes the specified resource policy.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeResourcePoliciesDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeResourcePoliciesDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeResourcePoliciesDeleteResponse
     */
	public function computeResourcePoliciesDelete(
        \OpenAPI\OpenAPI\Models\Operations\ComputeResourcePoliciesDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeResourcePoliciesDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeResourcePoliciesDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/regions/{region}/resourcePolicies/{resourcePolicy}', \OpenAPI\OpenAPI\Models\Operations\ComputeResourcePoliciesDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeResourcePoliciesDeleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeResourcePoliciesDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieves all information of the specified resource policy.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeResourcePoliciesGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeResourcePoliciesGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeResourcePoliciesGetResponse
     */
	public function computeResourcePoliciesGet(
        \OpenAPI\OpenAPI\Models\Operations\ComputeResourcePoliciesGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeResourcePoliciesGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeResourcePoliciesGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/regions/{region}/resourcePolicies/{resourcePolicy}', \OpenAPI\OpenAPI\Models\Operations\ComputeResourcePoliciesGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeResourcePoliciesGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeResourcePoliciesGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->resourcePolicy = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ResourcePolicy', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets the access control policy for a resource. May be empty if no such policy or resource exists.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeResourcePoliciesGetIamPolicyRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeResourcePoliciesGetIamPolicySecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeResourcePoliciesGetIamPolicyResponse
     */
	public function computeResourcePoliciesGetIamPolicy(
        \OpenAPI\OpenAPI\Models\Operations\ComputeResourcePoliciesGetIamPolicyRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeResourcePoliciesGetIamPolicySecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeResourcePoliciesGetIamPolicyResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/regions/{region}/resourcePolicies/{resource}/getIamPolicy', \OpenAPI\OpenAPI\Models\Operations\ComputeResourcePoliciesGetIamPolicyRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeResourcePoliciesGetIamPolicyRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeResourcePoliciesGetIamPolicyResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->policy = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Policy', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a new resource policy.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeResourcePoliciesInsertRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeResourcePoliciesInsertSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeResourcePoliciesInsertResponse
     */
	public function computeResourcePoliciesInsert(
        \OpenAPI\OpenAPI\Models\Operations\ComputeResourcePoliciesInsertRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeResourcePoliciesInsertSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeResourcePoliciesInsertResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/regions/{region}/resourcePolicies', \OpenAPI\OpenAPI\Models\Operations\ComputeResourcePoliciesInsertRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "resourcePolicy", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeResourcePoliciesInsertRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeResourcePoliciesInsertResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * A list all the resource policies that have been configured for the specified project in specified region.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeResourcePoliciesListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeResourcePoliciesListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeResourcePoliciesListResponse
     */
	public function computeResourcePoliciesList(
        \OpenAPI\OpenAPI\Models\Operations\ComputeResourcePoliciesListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeResourcePoliciesListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeResourcePoliciesListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/regions/{region}/resourcePolicies', \OpenAPI\OpenAPI\Models\Operations\ComputeResourcePoliciesListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeResourcePoliciesListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeResourcePoliciesListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->resourcePolicyList = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ResourcePolicyList', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Modify the specified resource policy.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeResourcePoliciesPatchRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeResourcePoliciesPatchSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeResourcePoliciesPatchResponse
     */
	public function computeResourcePoliciesPatch(
        \OpenAPI\OpenAPI\Models\Operations\ComputeResourcePoliciesPatchRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeResourcePoliciesPatchSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeResourcePoliciesPatchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/regions/{region}/resourcePolicies/{resourcePolicy}', \OpenAPI\OpenAPI\Models\Operations\ComputeResourcePoliciesPatchRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "resourcePolicy1", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeResourcePoliciesPatchRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeResourcePoliciesPatchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Sets the access control policy on the specified resource. Replaces any existing policy.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeResourcePoliciesSetIamPolicyRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeResourcePoliciesSetIamPolicySecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeResourcePoliciesSetIamPolicyResponse
     */
	public function computeResourcePoliciesSetIamPolicy(
        \OpenAPI\OpenAPI\Models\Operations\ComputeResourcePoliciesSetIamPolicyRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeResourcePoliciesSetIamPolicySecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeResourcePoliciesSetIamPolicyResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/regions/{region}/resourcePolicies/{resource}/setIamPolicy', \OpenAPI\OpenAPI\Models\Operations\ComputeResourcePoliciesSetIamPolicyRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "regionSetPolicyRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeResourcePoliciesSetIamPolicyRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeResourcePoliciesSetIamPolicyResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->policy = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Policy', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns permissions that a caller has on the specified resource.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeResourcePoliciesTestIamPermissionsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeResourcePoliciesTestIamPermissionsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeResourcePoliciesTestIamPermissionsResponse
     */
	public function computeResourcePoliciesTestIamPermissions(
        \OpenAPI\OpenAPI\Models\Operations\ComputeResourcePoliciesTestIamPermissionsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeResourcePoliciesTestIamPermissionsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeResourcePoliciesTestIamPermissionsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/regions/{region}/resourcePolicies/{resource}/testIamPermissions', \OpenAPI\OpenAPI\Models\Operations\ComputeResourcePoliciesTestIamPermissionsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "testPermissionsRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeResourcePoliciesTestIamPermissionsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeResourcePoliciesTestIamPermissionsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->testPermissionsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\TestPermissionsResponse', 'json');
            }
        }

        return $response;
    }
}