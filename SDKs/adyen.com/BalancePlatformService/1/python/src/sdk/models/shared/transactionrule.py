"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import amount as shared_amount
from ..shared import transactionruleinterval as shared_transactionruleinterval
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class TransactionRuleEntryModesEnum(str, Enum):
    BARCODE = 'barcode'
    CHIP = 'chip'
    COF = 'cof'
    CONTACTLESS = 'contactless'
    MAGSTRIPE = 'magstripe'
    MANUAL = 'manual'
    OCR = 'ocr'
    SERVER = 'server'
    UNKNOWN = 'unknown'

class TransactionRuleProcessingTypesEnum(str, Enum):
    ATM_WITHDRAW = 'atmWithdraw'
    BALANCE_INQUIRY = 'balanceInquiry'
    ECOMMERCE = 'ecommerce'
    MOTO = 'moto'
    POS = 'pos'
    RECURRING = 'recurring'
    TOKEN = 'token'
    UNKNOWN = 'unknown'

class TransactionRuleStatusEnum(str, Enum):
    r"""The status of the transaction rule. If you provide a `startDate` in the request, the rule is automatically created
    with an **active** status. 
    
    Possible values: **active**, **inactive**.
    """
    ACTIVE = 'active'
    INACTIVE = 'inactive'

class TransactionRuleTypeEnum(str, Enum):
    r"""Type of conditions provided in the rule.
    
    Possible values:
      * **allowList**: The rule provides categories (such as country and MCC) where payments must be allowed.
     * **blockList**: The rule provides categories (such as country and MCC) where payments must be blocked.
     * **maxUsage**: The rule sets limits for the maximum amount or maximum number of transactions for the lifetime of the payment instrument.
     * **velocity**: The rule sets limits for the maximum amount or maximum number of transactions for a given time interval.
    """
    ALLOW_LIST = 'allowList'
    BLOCK_LIST = 'blockList'
    MAX_USAGE = 'maxUsage'
    VELOCITY = 'velocity'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class TransactionRule:
    r"""OK - the request has succeeded."""
    
    description: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description') }})
    r"""Your description for the transaction rule, maximum 300 characters."""  
    interval: shared_transactionruleinterval.TransactionRuleInterval = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('interval') }})  
    reference: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('reference') }})
    r"""Your reference for the transaction rule, maximum 150 characters."""  
    type: TransactionRuleTypeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type') }})
    r"""Type of conditions provided in the rule.
    
    Possible values:
      * **allowList**: The rule provides categories (such as country and MCC) where payments must be allowed.
     * **blockList**: The rule provides categories (such as country and MCC) where payments must be blocked.
     * **maxUsage**: The rule sets limits for the maximum amount or maximum number of transactions for the lifetime of the payment instrument.
     * **velocity**: The rule sets limits for the maximum amount or maximum number of transactions for a given time interval.
    """  
    amount: Optional[shared_amount.Amount] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('amount'), 'exclude': lambda f: f is None }})  
    balance_platform_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('balancePlatformId'), 'exclude': lambda f: f is None }})
    r"""The unique identifier of the [balance platform](https://docs.adyen.com/api-explorer/#/balanceplatform/v1/get/balancePlatforms/{id}__queryParam_id) to which the rule applies."""  
    countries: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('countries'), 'exclude': lambda f: f is None }})
    r"""List of countries to which the rule applies. For example: **[\\"NL\\",\\"US\\"]**."""  
    end_date: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('endDate'), 'exclude': lambda f: f is None }})
    r"""The date when the rule will stop being evaluated, in ISO 8601 extended offset date-time format. For example, **2020-12-18T10:15:30+01:00**.
    
    If not provided, the rule will be evaluated until the rule status is set to **inactive**.
    """  
    entry_modes: Optional[list[TransactionRuleEntryModesEnum]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('entryModes'), 'exclude': lambda f: f is None }})
    r"""List of point-of-sale entry modes to which the rule applies.
    
    Possible values: **manual**, **chip**, **magstripe**, **contactless**, **cof**, **token**, **server**, **barcode**, **ocr**.
    """  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""The unique identifier of the transaction rule."""  
    max_transactions: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('maxTransactions'), 'exclude': lambda f: f is None }})
    r"""The maximum number of transactions that a payment instrument can be used for in the period specified in the `interval.type`."""  
    mccs: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('mccs'), 'exclude': lambda f: f is None }})
    r"""List of Merchant Category Codes (MCCs) to which the rule applies."""  
    payment_instrument_group_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('paymentInstrumentGroupId'), 'exclude': lambda f: f is None }})
    r"""The unique identifier of the [payment instrument group](https://docs.adyen.com/api-explorer/#/balanceplatform/latest/post/paymentInstrumentGroups__resParam_id) to which the rule applies."""  
    payment_instrument_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('paymentInstrumentId'), 'exclude': lambda f: f is None }})
    r"""The unique identifier of the [payment instrument](https://docs.adyen.com/api-explorer/#/balanceplatform/latest/post/paymentInstruments__resParam_id) to which the rule applies."""  
    processing_types: Optional[list[TransactionRuleProcessingTypesEnum]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('processingTypes'), 'exclude': lambda f: f is None }})
    r"""List of processing types to which the rule applies.
    
    Possible values: **atmWithdraw**, **pos**, **ecommerce**, **moto**, **recurring**, **balanceInquiry**.
    """  
    start_date: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('startDate'), 'exclude': lambda f: f is None }})
    r"""The date when the rule will start to be evaluated, in ISO 8601 extended offset date-time format. For example, **2020-12-18T10:15:30+01:00**.
    
    If not provided when creating a transaction rule, the `startDate` is set to the date when the rule status is set to **active**.
    """  
    status: Optional[TransactionRuleStatusEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status'), 'exclude': lambda f: f is None }})
    r"""The status of the transaction rule. If you provide a `startDate` in the request, the rule is automatically created
    with an **active** status. 
    
    Possible values: **active**, **inactive**.
    """  
    