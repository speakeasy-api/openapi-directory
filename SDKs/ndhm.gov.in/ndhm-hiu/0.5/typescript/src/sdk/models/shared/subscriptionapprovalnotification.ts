/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { HIUSubscription } from "./hiusubscription";
import { SubscriptionStatusEnum } from "./subscriptionstatusenum";
import { Expose, Transform, Type } from "class-transformer";

export class SubscriptionApprovalNotificationNotification extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "status" })
  status: SubscriptionStatusEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "subscription" })
  @Type(() => HIUSubscription)
  subscription?: HIUSubscription;

  @SpeakeasyMetadata()
  @Expose({ name: "subscriptionRequestId" })
  subscriptionRequestId?: string;
}

export class SubscriptionApprovalNotification extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "notification" })
  @Type(() => SubscriptionApprovalNotificationNotification)
  notification: SubscriptionApprovalNotificationNotification;

  /**
   * a nonce, unique for each HTTP request
   */
  @SpeakeasyMetadata()
  @Expose({ name: "requestId" })
  requestId: string;

  /**
   * Date time format in UTC, includes miliseconds YYYY-MM-DDThh:mm:ss.vZ
   */
  @SpeakeasyMetadata()
  @Expose({ name: "timestamp" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  timestamp: Date;
}
