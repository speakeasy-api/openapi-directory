<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class NodeTemplates 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Retrieves an aggregated list of node templates.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeNodeTemplatesAggregatedListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeNodeTemplatesAggregatedListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeNodeTemplatesAggregatedListResponse
     */
	public function computeNodeTemplatesAggregatedList(
        \OpenAPI\OpenAPI\Models\Operations\ComputeNodeTemplatesAggregatedListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeNodeTemplatesAggregatedListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeNodeTemplatesAggregatedListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/aggregated/nodeTemplates', \OpenAPI\OpenAPI\Models\Operations\ComputeNodeTemplatesAggregatedListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeNodeTemplatesAggregatedListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeNodeTemplatesAggregatedListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->nodeTemplateAggregatedList = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\NodeTemplateAggregatedList', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Deletes the specified NodeTemplate resource.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeNodeTemplatesDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeNodeTemplatesDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeNodeTemplatesDeleteResponse
     */
	public function computeNodeTemplatesDelete(
        \OpenAPI\OpenAPI\Models\Operations\ComputeNodeTemplatesDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeNodeTemplatesDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeNodeTemplatesDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/regions/{region}/nodeTemplates/{nodeTemplate}', \OpenAPI\OpenAPI\Models\Operations\ComputeNodeTemplatesDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeNodeTemplatesDeleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeNodeTemplatesDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns the specified node template.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeNodeTemplatesGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeNodeTemplatesGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeNodeTemplatesGetResponse
     */
	public function computeNodeTemplatesGet(
        \OpenAPI\OpenAPI\Models\Operations\ComputeNodeTemplatesGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeNodeTemplatesGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeNodeTemplatesGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/regions/{region}/nodeTemplates/{nodeTemplate}', \OpenAPI\OpenAPI\Models\Operations\ComputeNodeTemplatesGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeNodeTemplatesGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeNodeTemplatesGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->nodeTemplate = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\NodeTemplate', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets the access control policy for a resource. May be empty if no such policy or resource exists.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeNodeTemplatesGetIamPolicyRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeNodeTemplatesGetIamPolicySecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeNodeTemplatesGetIamPolicyResponse
     */
	public function computeNodeTemplatesGetIamPolicy(
        \OpenAPI\OpenAPI\Models\Operations\ComputeNodeTemplatesGetIamPolicyRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeNodeTemplatesGetIamPolicySecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeNodeTemplatesGetIamPolicyResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/regions/{region}/nodeTemplates/{resource}/getIamPolicy', \OpenAPI\OpenAPI\Models\Operations\ComputeNodeTemplatesGetIamPolicyRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeNodeTemplatesGetIamPolicyRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeNodeTemplatesGetIamPolicyResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->policy = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Policy', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a NodeTemplate resource in the specified project using the data included in the request.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeNodeTemplatesInsertRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeNodeTemplatesInsertSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeNodeTemplatesInsertResponse
     */
	public function computeNodeTemplatesInsert(
        \OpenAPI\OpenAPI\Models\Operations\ComputeNodeTemplatesInsertRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeNodeTemplatesInsertSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeNodeTemplatesInsertResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/regions/{region}/nodeTemplates', \OpenAPI\OpenAPI\Models\Operations\ComputeNodeTemplatesInsertRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "nodeTemplate", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeNodeTemplatesInsertRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeNodeTemplatesInsertResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieves a list of node templates available to the specified project.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeNodeTemplatesListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeNodeTemplatesListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeNodeTemplatesListResponse
     */
	public function computeNodeTemplatesList(
        \OpenAPI\OpenAPI\Models\Operations\ComputeNodeTemplatesListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeNodeTemplatesListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeNodeTemplatesListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/regions/{region}/nodeTemplates', \OpenAPI\OpenAPI\Models\Operations\ComputeNodeTemplatesListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeNodeTemplatesListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeNodeTemplatesListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->nodeTemplateList = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\NodeTemplateList', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Sets the access control policy on the specified resource. Replaces any existing policy.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeNodeTemplatesSetIamPolicyRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeNodeTemplatesSetIamPolicySecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeNodeTemplatesSetIamPolicyResponse
     */
	public function computeNodeTemplatesSetIamPolicy(
        \OpenAPI\OpenAPI\Models\Operations\ComputeNodeTemplatesSetIamPolicyRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeNodeTemplatesSetIamPolicySecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeNodeTemplatesSetIamPolicyResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/regions/{region}/nodeTemplates/{resource}/setIamPolicy', \OpenAPI\OpenAPI\Models\Operations\ComputeNodeTemplatesSetIamPolicyRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "regionSetPolicyRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeNodeTemplatesSetIamPolicyRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeNodeTemplatesSetIamPolicyResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->policy = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Policy', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns permissions that a caller has on the specified resource.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeNodeTemplatesTestIamPermissionsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeNodeTemplatesTestIamPermissionsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeNodeTemplatesTestIamPermissionsResponse
     */
	public function computeNodeTemplatesTestIamPermissions(
        \OpenAPI\OpenAPI\Models\Operations\ComputeNodeTemplatesTestIamPermissionsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeNodeTemplatesTestIamPermissionsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeNodeTemplatesTestIamPermissionsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/regions/{region}/nodeTemplates/{resource}/testIamPermissions', \OpenAPI\OpenAPI\Models\Operations\ComputeNodeTemplatesTestIamPermissionsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "testPermissionsRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeNodeTemplatesTestIamPermissionsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeNodeTemplatesTestIamPermissionsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->testPermissionsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\TestPermissionsResponse', 'json');
            }
        }

        return $response;
    }
}