"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Any, Optional

class CashReceipts:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def cash_receipts_delete(self, request: operations.CashReceiptsDeleteRequest) -> operations.CashReceiptsDeleteResponse:
        r"""Removes an existing Cash Receipt."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.CashReceiptsDeleteRequest, base_url, '/v1/cashReceipts/{id}', request)
        
        query_params = utils.get_query_params(operations.CashReceiptsDeleteRequest, request)
        
        client = self._client
        
        http_res = client.request('DELETE', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CashReceiptsDeleteResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.cash_receipts_delete_200_application_json_object = out

        return res

    def cash_receipts_get(self) -> operations.CashReceiptsGetResponse:
        r"""Returns a list of company's Cash Receipts. Supports OData querying protocol.
        Filtering is allowed by \\"entryDate\\" field.
        Ordering is allowed by \\"id\\" field.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v1/cashReceipts'
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CashReceiptsGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.PageResultCashReceiptQueryDto])
                res.page_result_cash_receipt_query_dto = out

        return res

    def cash_receipts_post(self, request: shared.CashReceiptDto) -> operations.CashReceiptsPostResponse:
        r"""Creates a new Cash Receipt."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v1/cashReceipts'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CashReceiptsPostResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.cash_receipts_post_200_application_json_object = out

        return res

    def cash_receipts_process_batch(self, request: list[shared.BatchItemCashReceiptDto]) -> operations.CashReceiptsProcessBatchResponse:
        r"""Processes a batch of Cash Receipts."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v1/cashReceipts/batch'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CashReceiptsProcessBatchResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.cash_receipts_process_batch_200_application_json_object = out

        return res

    def cash_receipts_put(self, request: operations.CashReceiptsPutRequest) -> operations.CashReceiptsPutResponse:
        r"""Updates an existing Cash Receipt."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.CashReceiptsPutRequest, base_url, '/v1/cashReceipts/{id}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "cash_receipt_dto", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CashReceiptsPutResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.cash_receipts_put_200_application_json_object = out

        return res

    def get_v1_cash_receipts_id_(self, request: operations.GetV1CashReceiptsIDRequest) -> operations.GetV1CashReceiptsIDResponse:
        r"""Returns information about a single Cash Receipt."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetV1CashReceiptsIDRequest, base_url, '/v1/cashReceipts/{id}', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetV1CashReceiptsIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.CashReceiptDto])
                res.cash_receipt_dto = out

        return res

    