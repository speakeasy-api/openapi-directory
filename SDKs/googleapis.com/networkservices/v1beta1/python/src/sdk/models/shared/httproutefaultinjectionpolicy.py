"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import httproutefaultinjectionpolicyabort as shared_httproutefaultinjectionpolicyabort
from ..shared import httproutefaultinjectionpolicydelay as shared_httproutefaultinjectionpolicydelay
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class HTTPRouteFaultInjectionPolicy:
    r"""The specification for fault injection introduced into traffic to test the resiliency of clients to destination service failure. As part of fault injection, when clients send requests to a destination, delays can be introduced by client proxy on a percentage of requests before sending those requests to the destination service. Similarly requests can be aborted by client proxy for a percentage of requests."""
    
    abort: Optional[shared_httproutefaultinjectionpolicyabort.HTTPRouteFaultInjectionPolicyAbort] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('abort'), 'exclude': lambda f: f is None }})
    r"""Specification of how client requests are aborted as part of fault injection before being sent to a destination."""  
    delay: Optional[shared_httproutefaultinjectionpolicydelay.HTTPRouteFaultInjectionPolicyDelay] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('delay'), 'exclude': lambda f: f is None }})
    r"""Specification of how client requests are delayed as part of fault injection before being sent to a destination."""  
    