"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import ordertype_enum as shared_ordertype_enum
from ..shared import timeinforce_enum as shared_timeinforce_enum
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class PostAccountsAccountOrderImpactRequestBodySideEnum(str, Enum):
    r"""Buy = '1', Sell = '2'"""
    ONE = '1'
    TWO = '2'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PostAccountsAccountOrderImpactRequestBody:
    r"""Order Parameters"""
    
    aux_price: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Aux Price'), 'exclude': lambda f: f is None }})
    r"""Required price to support Stop and Stop Limit orders"""  
    contract_id: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ContractId'), 'exclude': lambda f: f is None }})
    r"""The internal IB identifier for the trading product specified as an integer (can be obtained in response to /secdef request)"""  
    currency: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Currency'), 'exclude': lambda f: f is None }})
    r"""The currency in which the FX pair trades (only for InstrumentType=CASH)"""  
    customer_order_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CustomerOrderId'), 'exclude': lambda f: f is None }})
    r"""The order ID assigned by the customer."""  
    instrument_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('InstrumentType'), 'exclude': lambda f: f is None }})
    r"""The instrument type of the contract"""  
    listing_exchange: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ListingExchange'), 'exclude': lambda f: f is None }})
    r"""The exchange on which the trading product is listed (only for InstrumentType=STK)"""  
    order_type: Optional[shared_ordertype_enum.OrderTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Order Type'), 'exclude': lambda f: f is None }})
    r"""Market = '1'
    Limit = '2'
    Stop = '3'
    StopLimit = '4'
    """  
    price: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Price'), 'exclude': lambda f: f is None }})
    r"""The order price"""  
    quantity: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Quantity'), 'exclude': lambda f: f is None }})
    r"""The number of units in the order; contracts or shares"""  
    side: Optional[PostAccountsAccountOrderImpactRequestBodySideEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Side'), 'exclude': lambda f: f is None }})
    r"""Buy = '1', Sell = '2'"""  
    ticker: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Ticker'), 'exclude': lambda f: f is None }})
    r"""The symbol that identifies the trading product"""  
    time_in_force: Optional[shared_timeinforce_enum.TimeInForceEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Time in Force'), 'exclude': lambda f: f is None }})
    r"""Defines order's active lifetime.
    Day = '0'
    GTC (Good till Cancel) = '1'
    IOC (Immediate or Cancel) = '3'
    Open = '2'
    Close = '7'
    """  
    

@dataclasses.dataclass
class PostAccountsAccountOrderImpactRequest:
    
    account: str = dataclasses.field(metadata={'path_param': { 'field_name': 'account', 'style': 'simple', 'explode': False }})
    r"""Account Number"""  
    request_body: PostAccountsAccountOrderImpactRequestBody = dataclasses.field(metadata={'request': { 'media_type': 'application/json' }})
    r"""Order Parameters"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PostAccountsAccountOrderImpact200ApplicationJSON:
    r"""Order impact info"""
    
    commission: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Commission'), 'exclude': lambda f: f is None }})  
    commissions_currency: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CommissionsCurrency'), 'exclude': lambda f: f is None }})  
    equity_with_loan: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('EquityWithLoan'), 'exclude': lambda f: f is None }})  
    init_margin: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('InitMargin'), 'exclude': lambda f: f is None }})  
    init_margin_before: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('InitMarginBefore'), 'exclude': lambda f: f is None }})  
    maint_margin: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('MaintMargin'), 'exclude': lambda f: f is None }})  
    maint_margin_before: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('MaintMarginBefore'), 'exclude': lambda f: f is None }})  
    margin_currency: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('MarginCurrency'), 'exclude': lambda f: f is None }})  
    max_commissions: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('MaxCommissions'), 'exclude': lambda f: f is None }})  
    min_commissions: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('MinCommissions'), 'exclude': lambda f: f is None }})  
    

@dataclasses.dataclass
class PostAccountsAccountOrderImpactResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    post_accounts_account_order_impact_200_application_json_object: Optional[PostAccountsAccountOrderImpact200ApplicationJSON] = dataclasses.field(default=None)
    r"""Order impact info"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    