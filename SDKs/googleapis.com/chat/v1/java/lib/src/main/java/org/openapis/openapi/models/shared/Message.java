/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Message - A message in Google Chat.
 */
public class Message {
    /**
     * Parameters that a Chat app can use to configure how its response is posted.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("actionResponse")
    public ActionResponse actionResponse;
    public Message withActionResponse(ActionResponse actionResponse) {
        this.actionResponse = actionResponse;
        return this;
    }
    
    /**
     * Output only. Annotations associated with the text in this message.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("annotations")
    public Annotation[] annotations;
    public Message withAnnotations(Annotation[] annotations) {
        this.annotations = annotations;
        return this;
    }
    
    /**
     * Output only. Plain-text body of the message with all Chat app mentions stripped out.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("argumentText")
    public String argumentText;
    public Message withArgumentText(String argumentText) {
        this.argumentText = argumentText;
        return this;
    }
    
    /**
     * User-uploaded attachment.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("attachment")
    public Attachment[] attachment;
    public Message withAttachment(Attachment[] attachment) {
        this.attachment = attachment;
        return this;
    }
    
    /**
     * Deprecated: Use `cards_v2` instead. Rich, formatted and interactive cards that can be used to display UI elements such as: formatted texts, buttons, clickable images. Cards are normally displayed below the plain-text body of the message. `cards` and `cards_v2` can have a maximum size of 32 KB.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("cards")
    public Card[] cards;
    public Message withCards(Card[] cards) {
        this.cards = cards;
        return this;
    }
    
    /**
     * Richly formatted and interactive cards that display UI elements and editable widgets, such as: - Formatted text - Buttons - Clickable images - Checkboxes - Radio buttons - Input widgets. Cards are usually displayed below the text body of a Chat message, but can situationally appear other places, such as [dialogs](https://developers.google.com/chat/how-tos/dialogs). Each card can have a maximum size of 32 KB. The `cardId` is a unique identifier among cards in the same message and for identifying user input values. Currently supported widgets include: - `TextParagraph` - `DecoratedText` - `Image` - `ButtonList` - `Divider` - `TextInput` - `SelectionInput` - `Grid`
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("cardsV2")
    public CardWithId[] cardsV2;
    public Message withCardsV2(CardWithId[] cardsV2) {
        this.cardsV2 = cardsV2;
        return this;
    }
    
    /**
     * A custom name for a Chat message assigned at creation. Must start with `client-` and contain only lowercase letters, numbers, and hyphens up to 63 characters in length. Specify this field to get, update, or delete the message with the specified value. For example usage, see [Name a created message](https://developers.google.com/chat/api/guides/crudl/messages#name_a_created_message).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("clientAssignedMessageId")
    public String clientAssignedMessageId;
    public Message withClientAssignedMessageId(String clientAssignedMessageId) {
        this.clientAssignedMessageId = clientAssignedMessageId;
        return this;
    }
    
    /**
     * Output only. The time at which the message was created in Google Chat server.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("createTime")
    public String createTime;
    public Message withCreateTime(String createTime) {
        this.createTime = createTime;
        return this;
    }
    
    /**
     * A plain-text description of the message's cards, used when the actual cards cannot be displayed (e.g. mobile notifications).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("fallbackText")
    public String fallbackText;
    public Message withFallbackText(String fallbackText) {
        this.fallbackText = fallbackText;
        return this;
    }
    
    /**
     * Output only. The time at which the message was last edited by a user. If the message has never been edited, this field is empty.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("lastUpdateTime")
    public String lastUpdateTime;
    public Message withLastUpdateTime(String lastUpdateTime) {
        this.lastUpdateTime = lastUpdateTime;
        return this;
    }
    
    /**
     * A matched url in a Chat message. Chat apps can preview matched URLs. For more information, refer to [Preview links](https://developers.google.com/chat/how-tos/preview-links).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("matchedUrl")
    public MatchedUrl matchedUrl;
    public Message withMatchedUrl(MatchedUrl matchedUrl) {
        this.matchedUrl = matchedUrl;
        return this;
    }
    
    /**
     * Resource name in the form `spaces/* /messages/*`. Example: `spaces/AAAAAAAAAAA/messages/BBBBBBBBBBB.BBBBBBBBBBB`
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    public String name;
    public Message withName(String name) {
        this.name = name;
        return this;
    }
    
    /**
     * A user in Google Chat.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sender")
    public User sender;
    public Message withSender(User sender) {
        this.sender = sender;
        return this;
    }
    
    /**
     * A [slash command](https://developers.google.com/chat/how-tos/slash-commands) in Google Chat.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("slashCommand")
    public SlashCommand slashCommand;
    public Message withSlashCommand(SlashCommand slashCommand) {
        this.slashCommand = slashCommand;
        return this;
    }
    
    /**
     * A space in Google Chat. Spaces are conversations between two or more users or 1:1 messages between a user and a Chat app.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("space")
    public Space space;
    public Message withSpace(Space space) {
        this.space = space;
        return this;
    }
    
    /**
     * Plain-text body of the message. The first link to an image, video, web page, or other preview-able item generates a preview chip.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("text")
    public String text;
    public Message withText(String text) {
        this.text = text;
        return this;
    }
    
    /**
     * A thread in Google Chat.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("thread")
    public Thread thread;
    public Message withThread(Thread thread) {
        this.thread = thread;
        return this;
    }
    
    /**
     * Output only. When `true`, the message is a response in a reply thread. When `false`, the message is visible in the space's top-level conversation as either the first message of a thread or a message with no threaded replies. If the space doesn't support reply in threads, this field is always `false`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("threadReply")
    public Boolean threadReply;
    public Message withThreadReply(Boolean threadReply) {
        this.threadReply = threadReply;
        return this;
    }
    
}
