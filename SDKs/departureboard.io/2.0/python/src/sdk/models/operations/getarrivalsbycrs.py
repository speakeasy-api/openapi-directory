"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from typing import Optional


@dataclasses.dataclass
class GetArrivalsByCRSRequest:
    
    api_key: str = dataclasses.field(metadata={'query_param': { 'field_name': 'apiKey', 'style': 'form', 'explode': True }})
    r"""The National Rail OpenLDBWS API Key to use for looking up service information. You must register with National Rail to obtain this key and whitelist it with us. See https://api.departureboard.io/docs/registration for more information."""  
    crs: str = dataclasses.field(metadata={'path_param': { 'field_name': 'CRS', 'style': 'simple', 'explode': False }})
    r"""The CRS (Computer Reservation System) for the Station you wish to get arrival information for, e.g. KGX for London Kings Cross."""  
    filter_station: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'filterStation', 'style': 'form', 'explode': True }})
    r"""The CRS (Computer Reservation System) code to filter the results by. For example, performing a lookup for PAD (London Paddington) and setting filterStation to RED (Reading), will only show services arriving to Paddington that stopped at Reading."""  
    num_services: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'numServices', 'style': 'form', 'explode': True }})
    r"""The number of arriving train services to return. This is a maximum value, less may be returned if there is not a sufficient amount of services running to this station within the time window specified."""  
    service_details: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'serviceDetails', 'style': 'form', 'explode': True }})
    r"""Should the response contain information on the calling points for each service? If set to false, calling points will not be returned."""  
    time_offset: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'timeOffset', 'style': 'form', 'explode': True }})
    r"""The time window in minutes to offset the arrival information by. For example, a value of 20 will not show services arriving within the next 20 minutes."""  
    time_window: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'timeWindow', 'style': 'form', 'explode': True }})
    r"""The time window to show train services for in minutes. For example, a value of 60 will show services arriving to the station in the next 60 minutes."""  
    

@dataclasses.dataclass
class GetArrivalsByCRSResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    