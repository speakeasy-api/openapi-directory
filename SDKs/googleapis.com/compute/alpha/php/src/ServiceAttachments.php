<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class ServiceAttachments 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Retrieves the list of all ServiceAttachment resources, regional and global, available to the specified project.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeServiceAttachmentsAggregatedListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeServiceAttachmentsAggregatedListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeServiceAttachmentsAggregatedListResponse
     */
	public function computeServiceAttachmentsAggregatedList(
        \OpenAPI\OpenAPI\Models\Operations\ComputeServiceAttachmentsAggregatedListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeServiceAttachmentsAggregatedListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeServiceAttachmentsAggregatedListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/aggregated/serviceAttachments', \OpenAPI\OpenAPI\Models\Operations\ComputeServiceAttachmentsAggregatedListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeServiceAttachmentsAggregatedListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeServiceAttachmentsAggregatedListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->serviceAttachmentAggregatedList = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ServiceAttachmentAggregatedList', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Deletes the specified ServiceAttachment in the given scope
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeServiceAttachmentsDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeServiceAttachmentsDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeServiceAttachmentsDeleteResponse
     */
	public function computeServiceAttachmentsDelete(
        \OpenAPI\OpenAPI\Models\Operations\ComputeServiceAttachmentsDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeServiceAttachmentsDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeServiceAttachmentsDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/regions/{region}/serviceAttachments/{serviceAttachment}', \OpenAPI\OpenAPI\Models\Operations\ComputeServiceAttachmentsDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeServiceAttachmentsDeleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeServiceAttachmentsDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns the specified ServiceAttachment resource in the given scope.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeServiceAttachmentsGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeServiceAttachmentsGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeServiceAttachmentsGetResponse
     */
	public function computeServiceAttachmentsGet(
        \OpenAPI\OpenAPI\Models\Operations\ComputeServiceAttachmentsGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeServiceAttachmentsGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeServiceAttachmentsGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/regions/{region}/serviceAttachments/{serviceAttachment}', \OpenAPI\OpenAPI\Models\Operations\ComputeServiceAttachmentsGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeServiceAttachmentsGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeServiceAttachmentsGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->serviceAttachment = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ServiceAttachment', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets the access control policy for a resource. May be empty if no such policy or resource exists.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeServiceAttachmentsGetIamPolicyRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeServiceAttachmentsGetIamPolicySecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeServiceAttachmentsGetIamPolicyResponse
     */
	public function computeServiceAttachmentsGetIamPolicy(
        \OpenAPI\OpenAPI\Models\Operations\ComputeServiceAttachmentsGetIamPolicyRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeServiceAttachmentsGetIamPolicySecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeServiceAttachmentsGetIamPolicyResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/regions/{region}/serviceAttachments/{resource}/getIamPolicy', \OpenAPI\OpenAPI\Models\Operations\ComputeServiceAttachmentsGetIamPolicyRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeServiceAttachmentsGetIamPolicyRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeServiceAttachmentsGetIamPolicyResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->policy = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Policy', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a ServiceAttachment in the specified project in the given scope using the parameters that are included in the request.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeServiceAttachmentsInsertRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeServiceAttachmentsInsertSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeServiceAttachmentsInsertResponse
     */
	public function computeServiceAttachmentsInsert(
        \OpenAPI\OpenAPI\Models\Operations\ComputeServiceAttachmentsInsertRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeServiceAttachmentsInsertSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeServiceAttachmentsInsertResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/regions/{region}/serviceAttachments', \OpenAPI\OpenAPI\Models\Operations\ComputeServiceAttachmentsInsertRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "serviceAttachment", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeServiceAttachmentsInsertRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeServiceAttachmentsInsertResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists the ServiceAttachments for a project in the given scope.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeServiceAttachmentsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeServiceAttachmentsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeServiceAttachmentsListResponse
     */
	public function computeServiceAttachmentsList(
        \OpenAPI\OpenAPI\Models\Operations\ComputeServiceAttachmentsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeServiceAttachmentsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeServiceAttachmentsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/regions/{region}/serviceAttachments', \OpenAPI\OpenAPI\Models\Operations\ComputeServiceAttachmentsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeServiceAttachmentsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeServiceAttachmentsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->serviceAttachmentList = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ServiceAttachmentList', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Patches the specified ServiceAttachment resource with the data included in the request. This method supports PATCH semantics and uses JSON merge patch format and processing rules.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeServiceAttachmentsPatchRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeServiceAttachmentsPatchSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeServiceAttachmentsPatchResponse
     */
	public function computeServiceAttachmentsPatch(
        \OpenAPI\OpenAPI\Models\Operations\ComputeServiceAttachmentsPatchRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeServiceAttachmentsPatchSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeServiceAttachmentsPatchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/regions/{region}/serviceAttachments/{serviceAttachment}', \OpenAPI\OpenAPI\Models\Operations\ComputeServiceAttachmentsPatchRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "serviceAttachment1", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeServiceAttachmentsPatchRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeServiceAttachmentsPatchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Sets the access control policy on the specified resource. Replaces any existing policy.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeServiceAttachmentsSetIamPolicyRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeServiceAttachmentsSetIamPolicySecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeServiceAttachmentsSetIamPolicyResponse
     */
	public function computeServiceAttachmentsSetIamPolicy(
        \OpenAPI\OpenAPI\Models\Operations\ComputeServiceAttachmentsSetIamPolicyRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeServiceAttachmentsSetIamPolicySecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeServiceAttachmentsSetIamPolicyResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/regions/{region}/serviceAttachments/{resource}/setIamPolicy', \OpenAPI\OpenAPI\Models\Operations\ComputeServiceAttachmentsSetIamPolicyRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "regionSetPolicyRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeServiceAttachmentsSetIamPolicyRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeServiceAttachmentsSetIamPolicyResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->policy = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Policy', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns permissions that a caller has on the specified resource.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeServiceAttachmentsTestIamPermissionsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeServiceAttachmentsTestIamPermissionsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeServiceAttachmentsTestIamPermissionsResponse
     */
	public function computeServiceAttachmentsTestIamPermissions(
        \OpenAPI\OpenAPI\Models\Operations\ComputeServiceAttachmentsTestIamPermissionsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeServiceAttachmentsTestIamPermissionsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeServiceAttachmentsTestIamPermissionsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/regions/{region}/serviceAttachments/{resource}/testIamPermissions', \OpenAPI\OpenAPI\Models\Operations\ComputeServiceAttachmentsTestIamPermissionsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "testPermissionsRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeServiceAttachmentsTestIamPermissionsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeServiceAttachmentsTestIamPermissionsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->testPermissionsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\TestPermissionsResponse', 'json');
            }
        }

        return $response;
    }
}