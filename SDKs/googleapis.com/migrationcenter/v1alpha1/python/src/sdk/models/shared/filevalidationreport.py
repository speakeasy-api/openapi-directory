"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import importerror as shared_importerror
from ..shared import importrowerror as shared_importrowerror
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class FileValidationReport:
    r"""A resource that aggregates the validation errors found in an import job file."""
    
    file_errors: Optional[list[shared_importerror.ImportErrorT]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('fileErrors'), 'exclude': lambda f: f is None }})
    r"""List of file level errors."""  
    file_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('fileName'), 'exclude': lambda f: f is None }})
    r"""The name of the file."""  
    partial_report: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('partialReport'), 'exclude': lambda f: f is None }})
    r"""Flag indicating that processing was aborted due to maximum number of errors."""  
    row_errors: Optional[list[shared_importrowerror.ImportRowError]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('rowErrors'), 'exclude': lambda f: f is None }})
    r"""Partial list of rows that encountered validation error."""  
    