/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

/**
 * AudioRenderResult - The output of an audio render in WAV or MP3 format
 */
public class AudioRenderResult {
    /**
     * The time the render was submitted to the API
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("created_date")
    public OffsetDateTime createdDate;

    public AudioRenderResult withCreatedDate(OffsetDateTime createdDate) {
        this.createdDate = createdDate;
        return this;
    }
    
    /**
     * The files associated with the render
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("files")
    public AudioRendersFilesList[] files;

    public AudioRenderResult withFiles(AudioRendersFilesList[] files) {
        this.files = files;
        return this;
    }
    
    /**
     * The alphanumeric ID of the simple render
     */
    @JsonProperty("id")
    public String id;

    public AudioRenderResult withId(String id) {
        this.id = id;
        return this;
    }
    
    /**
     * The file format preset
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("preset")
    public AudioRenderResultPresetEnum preset;

    public AudioRenderResult withPreset(AudioRenderResultPresetEnum preset) {
        this.preset = preset;
        return this;
    }
    
    /**
     * The current progress of the render as a percentage
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("progress_percent")
    public Long progressPercent;

    public AudioRenderResult withProgressPercent(Long progressPercent) {
        this.progressPercent = progressPercent;
        return this;
    }
    
    /**
     * A coarse progress indicator
     */
    @JsonProperty("status")
    public AudioRenderResultStatusEnum status;

    public AudioRenderResult withStatus(AudioRenderResultStatusEnum status) {
        this.status = status;
        return this;
    }
    
    /**
     * A timeline object that represents either a request for music to be created or an entire music composition
     */
    @JsonProperty("timeline")
    public AudioRenderTimeline timeline;

    public AudioRenderResult withTimeline(AudioRenderTimeline timeline) {
        this.timeline = timeline;
        return this;
    }
    
    /**
     * The time that the audio output was uploaded
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("updated_date")
    public OffsetDateTime updatedDate;

    public AudioRenderResult withUpdatedDate(OffsetDateTime updatedDate) {
        this.updatedDate = updatedDate;
        return this;
    }
    
    public AudioRenderResult(@JsonProperty("id") String id, @JsonProperty("status") AudioRenderResultStatusEnum status, @JsonProperty("timeline") AudioRenderTimeline timeline) {
        this.id = id;
        this.status = status;
        this.timeline = timeline;
  }
}
