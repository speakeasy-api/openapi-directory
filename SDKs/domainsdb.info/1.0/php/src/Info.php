<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Info 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Returns overall Tld info
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\GetInfoTldResponse
     */
	public function getInfoTld(
    ): \OpenAPI\OpenAPI\Models\Operations\GetInfoTldResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/info/tld/');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetInfoTldResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->zoneInfos = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\ZoneInfo>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns statistics for specific zone
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetInfoTldZoneRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetInfoTldZoneResponse
     */
	public function getInfoTldZone(
        \OpenAPI\OpenAPI\Models\Operations\GetInfoTldZoneRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetInfoTldZoneResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/info/tld/{zone}', \OpenAPI\OpenAPI\Models\Operations\GetInfoTldZoneRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetInfoTldZoneRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetInfoTldZoneResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->zoneInfo = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ZoneInfo', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * getApiInfoItem
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetApiInfoItemRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetApiInfoItemResponse
     */
	public function getApiInfoItem(
        \OpenAPI\OpenAPI\Models\Operations\GetApiInfoItemRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetApiInfoItemResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/info/api');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetApiInfoItemRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetApiInfoItemResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiKeyInfo = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\APIKeyInfo', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns overall stagtistics
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetStatisticsCollectionRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetStatisticsCollectionResponse
     */
	public function getStatisticsCollection(
        \OpenAPI\OpenAPI\Models\Operations\GetStatisticsCollectionRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetStatisticsCollectionResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/info/stat/');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetStatisticsCollectionRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetStatisticsCollectionResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->zoneStats = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\ZoneStats>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns statistics for specific zone
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetStatisticsItemRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetStatisticsItemResponse
     */
	public function getStatisticsItem(
        \OpenAPI\OpenAPI\Models\Operations\GetStatisticsItemRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetStatisticsItemResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/info/stat/{zone}', \OpenAPI\OpenAPI\Models\Operations\GetStatisticsItemRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetStatisticsItemRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetStatisticsItemResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->zoneStats = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ZoneStats', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
}