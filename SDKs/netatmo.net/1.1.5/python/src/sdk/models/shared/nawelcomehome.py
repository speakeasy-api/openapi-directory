"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import nawelcomecamera as shared_nawelcomecamera
from ..shared import nawelcomeevent as shared_nawelcomeevent
from ..shared import nawelcomemodule as shared_nawelcomemodule
from ..shared import nawelcomeperson as shared_nawelcomeperson
from ..shared import nawelcomeplace as shared_nawelcomeplace
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class NAWelcomeHome:
    
    cameras: Optional[list[shared_nawelcomecamera.NAWelcomeCamera]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cameras'), 'exclude': lambda f: f is None }})  
    events: Optional[list[shared_nawelcomeevent.NAWelcomeEvent]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('events'), 'exclude': lambda f: f is None }})  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""Id of the home."""  
    modules: Optional[list[shared_nawelcomemodule.NAWelcomeModule]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('modules'), 'exclude': lambda f: f is None }})  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""Name of the home"""  
    persons: Optional[list[shared_nawelcomeperson.NAWelcomePerson]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('persons'), 'exclude': lambda f: f is None }})  
    place: Optional[shared_nawelcomeplace.NAWelcomePlace] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('place'), 'exclude': lambda f: f is None }})  
    