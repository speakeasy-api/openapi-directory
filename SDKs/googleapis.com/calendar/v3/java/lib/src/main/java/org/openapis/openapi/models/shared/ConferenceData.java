/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

public class ConferenceData {
    /**
     * The ID of the conference.
     * Can be used by developers to keep track of conferences, should not be displayed to users.
     * The ID value is formed differently for each conference solution type:  
     * - eventHangout: ID is not set. (This conference type is deprecated.)
     * - eventNamedHangout: ID is the name of the Hangout. (This conference type is deprecated.)
     * - hangoutsMeet: ID is the 10-letter meeting code, for example aaa-bbbb-ccc.
     * - addOn: ID is defined by the third-party provider.  Optional.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("conferenceId")
    public String conferenceId;

    public ConferenceData withConferenceId(String conferenceId) {
        this.conferenceId = conferenceId;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("conferenceSolution")
    public ConferenceSolution conferenceSolution;

    public ConferenceData withConferenceSolution(ConferenceSolution conferenceSolution) {
        this.conferenceSolution = conferenceSolution;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("createRequest")
    public CreateConferenceRequest createRequest;

    public ConferenceData withCreateRequest(CreateConferenceRequest createRequest) {
        this.createRequest = createRequest;
        return this;
    }
    
    /**
     * Information about individual conference entry points, such as URLs or phone numbers.
     * All of them must belong to the same conference.
     * Either conferenceSolution and at least one entryPoint, or createRequest is required.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("entryPoints")
    public EntryPoint[] entryPoints;

    public ConferenceData withEntryPoints(EntryPoint[] entryPoints) {
        this.entryPoints = entryPoints;
        return this;
    }
    
    /**
     * Additional notes (such as instructions from the domain administrator, legal notices) to display to the user. Can contain HTML. The maximum length is 2048 characters. Optional.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("notes")
    public String notes;

    public ConferenceData withNotes(String notes) {
        this.notes = notes;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("parameters")
    public ConferenceParameters parameters;

    public ConferenceData withParameters(ConferenceParameters parameters) {
        this.parameters = parameters;
        return this;
    }
    
    /**
     * The signature of the conference data.
     * Generated on server side.
     * Unset for a conference with a failed create request.
     * Optional for a conference with a pending create request.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("signature")
    public String signature;

    public ConferenceData withSignature(String signature) {
        this.signature = signature;
        return this;
    }
    
    public ConferenceData(){}
}
