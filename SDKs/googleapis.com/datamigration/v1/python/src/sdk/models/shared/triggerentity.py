"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Any, Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class TriggerEntity:
    r"""Trigger is not used as an independent entity, it is retrieved as part of a Table entity."""
    
    custom_features: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('customFeatures'), 'exclude': lambda f: f is None }})
    r"""Custom engine specific features."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""The name of the trigger."""  
    sql_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sqlCode'), 'exclude': lambda f: f is None }})
    r"""The SQL code which creates the trigger."""  
    triggering_events: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('triggeringEvents'), 'exclude': lambda f: f is None }})
    r"""The DML, DDL, or database events that fire the trigger, for example INSERT, UPDATE."""  
    trigger_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('triggerType'), 'exclude': lambda f: f is None }})
    r"""Indicates when the trigger fires, for example BEFORE STATEMENT, AFTER EACH ROW."""  
    