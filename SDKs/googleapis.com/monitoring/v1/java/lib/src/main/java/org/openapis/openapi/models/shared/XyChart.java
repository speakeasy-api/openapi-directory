/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * XyChart - A chart that displays data on a 2D (X and Y axes) plane.
 */
public class XyChart {
    /**
     * Options to control visual rendering of a chart.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("chartOptions")
    public ChartOptions chartOptions;
    public XyChart withChartOptions(ChartOptions chartOptions) {
        this.chartOptions = chartOptions;
        return this;
    }
    
    /**
     * Required. The data displayed in this chart.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("dataSets")
    public DataSet[] dataSets;
    public XyChart withDataSets(DataSet[] dataSets) {
        this.dataSets = dataSets;
        return this;
    }
    
    /**
     * Threshold lines drawn horizontally across the chart.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("thresholds")
    public Threshold[] thresholds;
    public XyChart withThresholds(Threshold[] thresholds) {
        this.thresholds = thresholds;
        return this;
    }
    
    /**
     * The duration used to display a comparison chart. A comparison chart simultaneously shows values from two similar-length time periods (e.g., week-over-week metrics). The duration must be positive, and it can only be applied to charts with data sets of LINE plot type.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("timeshiftDuration")
    public String timeshiftDuration;
    public XyChart withTimeshiftDuration(String timeshiftDuration) {
        this.timeshiftDuration = timeshiftDuration;
        return this;
    }
    
    /**
     * A chart axis.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("xAxis")
    public Axis xAxis;
    public XyChart withXAxis(Axis xAxis) {
        this.xAxis = xAxis;
        return this;
    }
    
    /**
     * A chart axis.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("y2Axis")
    public Axis y2Axis;
    public XyChart withY2Axis(Axis y2Axis) {
        this.y2Axis = y2Axis;
        return this;
    }
    
    /**
     * A chart axis.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("yAxis")
    public Axis yAxis;
    public XyChart withYAxis(Axis yAxis) {
        this.yAxis = yAxis;
        return this;
    }
    
}
