"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class CVSSAttackComplexityEnum(str, Enum):
    ATTACK_COMPLEXITY_UNSPECIFIED = 'ATTACK_COMPLEXITY_UNSPECIFIED'
    ATTACK_COMPLEXITY_LOW = 'ATTACK_COMPLEXITY_LOW'
    ATTACK_COMPLEXITY_HIGH = 'ATTACK_COMPLEXITY_HIGH'

class CVSSAttackVectorEnum(str, Enum):
    r"""Base Metrics Represents the intrinsic characteristics of a vulnerability that are constant over time and across user environments."""
    ATTACK_VECTOR_UNSPECIFIED = 'ATTACK_VECTOR_UNSPECIFIED'
    ATTACK_VECTOR_NETWORK = 'ATTACK_VECTOR_NETWORK'
    ATTACK_VECTOR_ADJACENT = 'ATTACK_VECTOR_ADJACENT'
    ATTACK_VECTOR_LOCAL = 'ATTACK_VECTOR_LOCAL'
    ATTACK_VECTOR_PHYSICAL = 'ATTACK_VECTOR_PHYSICAL'

class CVSSAuthenticationEnum(str, Enum):
    AUTHENTICATION_UNSPECIFIED = 'AUTHENTICATION_UNSPECIFIED'
    AUTHENTICATION_MULTIPLE = 'AUTHENTICATION_MULTIPLE'
    AUTHENTICATION_SINGLE = 'AUTHENTICATION_SINGLE'
    AUTHENTICATION_NONE = 'AUTHENTICATION_NONE'

class CVSSAvailabilityImpactEnum(str, Enum):
    IMPACT_UNSPECIFIED = 'IMPACT_UNSPECIFIED'
    IMPACT_HIGH = 'IMPACT_HIGH'
    IMPACT_LOW = 'IMPACT_LOW'
    IMPACT_NONE = 'IMPACT_NONE'

class CVSSConfidentialityImpactEnum(str, Enum):
    IMPACT_UNSPECIFIED = 'IMPACT_UNSPECIFIED'
    IMPACT_HIGH = 'IMPACT_HIGH'
    IMPACT_LOW = 'IMPACT_LOW'
    IMPACT_NONE = 'IMPACT_NONE'

class CVSSIntegrityImpactEnum(str, Enum):
    IMPACT_UNSPECIFIED = 'IMPACT_UNSPECIFIED'
    IMPACT_HIGH = 'IMPACT_HIGH'
    IMPACT_LOW = 'IMPACT_LOW'
    IMPACT_NONE = 'IMPACT_NONE'

class CVSSPrivilegesRequiredEnum(str, Enum):
    PRIVILEGES_REQUIRED_UNSPECIFIED = 'PRIVILEGES_REQUIRED_UNSPECIFIED'
    PRIVILEGES_REQUIRED_NONE = 'PRIVILEGES_REQUIRED_NONE'
    PRIVILEGES_REQUIRED_LOW = 'PRIVILEGES_REQUIRED_LOW'
    PRIVILEGES_REQUIRED_HIGH = 'PRIVILEGES_REQUIRED_HIGH'

class CVSSScopeEnum(str, Enum):
    SCOPE_UNSPECIFIED = 'SCOPE_UNSPECIFIED'
    SCOPE_UNCHANGED = 'SCOPE_UNCHANGED'
    SCOPE_CHANGED = 'SCOPE_CHANGED'

class CVSSUserInteractionEnum(str, Enum):
    USER_INTERACTION_UNSPECIFIED = 'USER_INTERACTION_UNSPECIFIED'
    USER_INTERACTION_NONE = 'USER_INTERACTION_NONE'
    USER_INTERACTION_REQUIRED = 'USER_INTERACTION_REQUIRED'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Cvss:
    r"""Common Vulnerability Scoring System. For details, see https://www.first.org/cvss/specification-document This is a message we will try to use for storing various versions of CVSS rather than making a separate proto for storing a specific version."""
    
    attack_complexity: Optional[CVSSAttackComplexityEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('attackComplexity'), 'exclude': lambda f: f is None }})  
    attack_vector: Optional[CVSSAttackVectorEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('attackVector'), 'exclude': lambda f: f is None }})
    r"""Base Metrics Represents the intrinsic characteristics of a vulnerability that are constant over time and across user environments."""  
    authentication: Optional[CVSSAuthenticationEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('authentication'), 'exclude': lambda f: f is None }})  
    availability_impact: Optional[CVSSAvailabilityImpactEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('availabilityImpact'), 'exclude': lambda f: f is None }})  
    base_score: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('baseScore'), 'exclude': lambda f: f is None }})
    r"""The base score is a function of the base metric scores."""  
    confidentiality_impact: Optional[CVSSConfidentialityImpactEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('confidentialityImpact'), 'exclude': lambda f: f is None }})  
    exploitability_score: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('exploitabilityScore'), 'exclude': lambda f: f is None }})  
    impact_score: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('impactScore'), 'exclude': lambda f: f is None }})  
    integrity_impact: Optional[CVSSIntegrityImpactEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('integrityImpact'), 'exclude': lambda f: f is None }})  
    privileges_required: Optional[CVSSPrivilegesRequiredEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('privilegesRequired'), 'exclude': lambda f: f is None }})  
    scope: Optional[CVSSScopeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('scope'), 'exclude': lambda f: f is None }})  
    user_interaction: Optional[CVSSUserInteractionEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('userInteraction'), 'exclude': lambda f: f is None }})  
    