<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Analytics 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Returns whether audience definition exists.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsAudienceNameExistsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsAudienceNameExistsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AnalyticsAudienceNameExistsResponse
     */
	public function analyticsAudienceNameExists(
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsAudienceNameExistsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsAudienceNameExistsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AnalyticsAudienceNameExistsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/apps/{owner_name}/{app_name}/analytics/audiences/{audience_name}', \OpenAPI\OpenAPI\Models\Operations\AnalyticsAudienceNameExistsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('HEAD', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AnalyticsAudienceNameExistsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204 or $httpResponse->getStatusCode() === 404) {
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->analyticsAudienceNameExistsDefaultApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\AnalyticsAudienceNameExistsDefaultApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Percentage of crash-free device by day in the time range based on the selected versions. Api will return -1 if crash devices is greater than active devices.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsCrashFreeDevicePercentagesRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsCrashFreeDevicePercentagesSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AnalyticsCrashFreeDevicePercentagesResponse
     */
	public function analyticsCrashFreeDevicePercentages(
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsCrashFreeDevicePercentagesRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsCrashFreeDevicePercentagesSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AnalyticsCrashFreeDevicePercentagesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/apps/{owner_name}/{app_name}/analytics/crashfree_device_percentages', \OpenAPI\OpenAPI\Models\Operations\AnalyticsCrashFreeDevicePercentagesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AnalyticsCrashFreeDevicePercentagesRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AnalyticsCrashFreeDevicePercentagesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->analyticsCrashFreeDevicePercentages200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\AnalyticsCrashFreeDevicePercentages200ApplicationJSON', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->analyticsCrashFreeDevicePercentagesDefaultApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\AnalyticsCrashFreeDevicePercentagesDefaultApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Available for UWP apps only.
     * 
     * Count of crashes by day in the time range of the selected crash group with selected version. Available for UWP apps only.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsCrashGroupCountsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsCrashGroupCountsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AnalyticsCrashGroupCountsResponse
     */
	public function analyticsCrashGroupCounts(
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsCrashGroupCountsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsCrashGroupCountsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AnalyticsCrashGroupCountsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/apps/{owner_name}/{app_name}/analytics/crash_groups/{crash_group_id}/crash_counts', \OpenAPI\OpenAPI\Models\Operations\AnalyticsCrashGroupCountsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AnalyticsCrashGroupCountsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AnalyticsCrashGroupCountsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->analyticsCrashGroupCounts200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\AnalyticsCrashGroupCounts200ApplicationJSON', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->analyticsCrashGroupCountsDefaultApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\AnalyticsCrashGroupCountsDefaultApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Available for UWP apps only.
     * 
     * Top models of the selected crash group with selected version. Available for UWP apps only.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsCrashGroupModelCountsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsCrashGroupModelCountsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AnalyticsCrashGroupModelCountsResponse
     */
	public function analyticsCrashGroupModelCounts(
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsCrashGroupModelCountsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsCrashGroupModelCountsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AnalyticsCrashGroupModelCountsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/apps/{owner_name}/{app_name}/analytics/crash_groups/{crash_group_id}/models', \OpenAPI\OpenAPI\Models\Operations\AnalyticsCrashGroupModelCountsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AnalyticsCrashGroupModelCountsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AnalyticsCrashGroupModelCountsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->analyticsCrashGroupModelCounts200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\AnalyticsCrashGroupModelCounts200ApplicationJSON', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->analyticsCrashGroupModelCountsDefaultApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\AnalyticsCrashGroupModelCountsDefaultApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Available for UWP apps only.
     * 
     * Top OSes of the selected crash group with selected version. Available for UWP apps only.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsCrashGroupOperatingSystemCountsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsCrashGroupOperatingSystemCountsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AnalyticsCrashGroupOperatingSystemCountsResponse
     */
	public function analyticsCrashGroupOperatingSystemCounts(
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsCrashGroupOperatingSystemCountsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsCrashGroupOperatingSystemCountsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AnalyticsCrashGroupOperatingSystemCountsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/apps/{owner_name}/{app_name}/analytics/crash_groups/{crash_group_id}/operating_systems', \OpenAPI\OpenAPI\Models\Operations\AnalyticsCrashGroupOperatingSystemCountsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AnalyticsCrashGroupOperatingSystemCountsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AnalyticsCrashGroupOperatingSystemCountsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->analyticsCrashGroupOperatingSystemCounts200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\AnalyticsCrashGroupOperatingSystemCounts200ApplicationJSON', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->analyticsCrashGroupOperatingSystemCountsDefaultApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\AnalyticsCrashGroupOperatingSystemCountsDefaultApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Available for UWP apps only.
     * 
     * Overall crashes and affected users count of the selected crash group with selected version. Available for UWP apps only.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsCrashGroupTotalsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsCrashGroupTotalsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AnalyticsCrashGroupTotalsResponse
     */
	public function analyticsCrashGroupTotals(
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsCrashGroupTotalsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsCrashGroupTotalsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AnalyticsCrashGroupTotalsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/apps/{owner_name}/{app_name}/analytics/crash_groups/{crash_group_id}/overall', \OpenAPI\OpenAPI\Models\Operations\AnalyticsCrashGroupTotalsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AnalyticsCrashGroupTotalsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AnalyticsCrashGroupTotalsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->analyticsCrashGroupTotals200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\AnalyticsCrashGroupTotals200ApplicationJSON', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->analyticsCrashGroupTotalsDefaultApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\AnalyticsCrashGroupTotalsDefaultApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Overall crashes and affected users count of the selected crash groups with selected versions.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsCrashGroupsTotalsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsCrashGroupsTotalsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AnalyticsCrashGroupsTotalsResponse
     */
	public function analyticsCrashGroupsTotals(
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsCrashGroupsTotalsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsCrashGroupsTotalsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AnalyticsCrashGroupsTotalsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/apps/{owner_name}/{app_name}/analytics/crash_groups', \OpenAPI\OpenAPI\Models\Operations\AnalyticsCrashGroupsTotalsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AnalyticsCrashGroupsTotalsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->analyticsCrashGroupsTotals200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Operations\AnalyticsCrashGroupsTotals200ApplicationJSON>', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->analyticsCrashGroupsTotalsDefaultApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\AnalyticsCrashGroupsTotalsDefaultApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates or updates audience definition.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsCreateOrUpdateAudienceRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsCreateOrUpdateAudienceSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AnalyticsCreateOrUpdateAudienceResponse
     */
	public function analyticsCreateOrUpdateAudience(
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsCreateOrUpdateAudienceRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsCreateOrUpdateAudienceSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AnalyticsCreateOrUpdateAudienceResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/apps/{owner_name}/{app_name}/analytics/audiences/{audience_name}', \OpenAPI\OpenAPI\Models\Operations\AnalyticsCreateOrUpdateAudienceRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AnalyticsCreateOrUpdateAudienceResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->analyticsCreateOrUpdateAudience200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\AnalyticsCreateOrUpdateAudience200ApplicationJSON', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->analyticsCreateOrUpdateAudienceDefaultApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\AnalyticsCreateOrUpdateAudienceDefaultApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Deletes audience definition.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsDeleteAudienceRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsDeleteAudienceSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AnalyticsDeleteAudienceResponse
     */
	public function analyticsDeleteAudience(
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsDeleteAudienceRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsDeleteAudienceSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AnalyticsDeleteAudienceResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/apps/{owner_name}/{app_name}/analytics/audiences/{audience_name}', \OpenAPI\OpenAPI\Models\Operations\AnalyticsDeleteAudienceRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AnalyticsDeleteAudienceResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204 or $httpResponse->getStatusCode() === 404) {
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->analyticsDeleteAudienceDefaultApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\AnalyticsDeleteAudienceDefaultApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Count of total downloads for the provided distribution releases.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsDistributionReleaseCountsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsDistributionReleaseCountsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AnalyticsDistributionReleaseCountsResponse
     */
	public function analyticsDistributionReleaseCounts(
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsDistributionReleaseCountsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsDistributionReleaseCountsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AnalyticsDistributionReleaseCountsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/apps/{owner_name}/{app_name}/analytics/distribution/release_counts', \OpenAPI\OpenAPI\Models\Operations\AnalyticsDistributionReleaseCountsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AnalyticsDistributionReleaseCountsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->analyticsDistributionReleaseCounts200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\AnalyticsDistributionReleaseCounts200ApplicationJSON', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->analyticsDistributionReleaseCountsDefaultApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\AnalyticsDistributionReleaseCountsDefaultApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Event properties.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsEventPropertiesRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsEventPropertiesSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AnalyticsEventPropertiesResponse
     */
	public function analyticsEventProperties(
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsEventPropertiesRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsEventPropertiesSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AnalyticsEventPropertiesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/apps/{owner_name}/{app_name}/analytics/events/{event_name}/properties', \OpenAPI\OpenAPI\Models\Operations\AnalyticsEventPropertiesRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AnalyticsEventPropertiesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->analyticsEventProperties200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\AnalyticsEventProperties200ApplicationJSON', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->analyticsEventPropertiesDefaultApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\AnalyticsEventPropertiesDefaultApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Delete the set of Events with the specified event names.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsEventsDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsEventsDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AnalyticsEventsDeleteResponse
     */
	public function analyticsEventsDelete(
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsEventsDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsEventsDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AnalyticsEventsDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/apps/{owner_name}/{app_name}/analytics/events/{event_name}', \OpenAPI\OpenAPI\Models\Operations\AnalyticsEventsDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AnalyticsEventsDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->analyticsEventsDeleteDefaultApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\AnalyticsEventsDeleteDefaultApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Delete the set of Events with the specified event names.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsEventsDeleteLogsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsEventsDeleteLogsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AnalyticsEventsDeleteLogsResponse
     */
	public function analyticsEventsDeleteLogs(
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsEventsDeleteLogsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsEventsDeleteLogsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AnalyticsEventsDeleteLogsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/apps/{owner_name}/{app_name}/analytics/event_logs/{event_name}', \OpenAPI\OpenAPI\Models\Operations\AnalyticsEventsDeleteLogsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AnalyticsEventsDeleteLogsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->analyticsEventsDeleteLogsDefaultApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\AnalyticsEventsDeleteLogsDefaultApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Logs received between the specified start time and the current time. The API will return a maximum of 100 logs per call.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsGenericLogFlowRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsGenericLogFlowSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AnalyticsGenericLogFlowResponse
     */
	public function analyticsGenericLogFlow(
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsGenericLogFlowRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsGenericLogFlowSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AnalyticsGenericLogFlowResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/apps/{owner_name}/{app_name}/analytics/generic_log_flow', \OpenAPI\OpenAPI\Models\Operations\AnalyticsGenericLogFlowRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AnalyticsGenericLogFlowRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AnalyticsGenericLogFlowResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->analyticsGenericLogFlow200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\AnalyticsGenericLogFlow200ApplicationJSON', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->analyticsGenericLogFlowDefaultApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\AnalyticsGenericLogFlowDefaultApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets audience definition.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsGetAudienceRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsGetAudienceSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AnalyticsGetAudienceResponse
     */
	public function analyticsGetAudience(
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsGetAudienceRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsGetAudienceSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AnalyticsGetAudienceResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/apps/{owner_name}/{app_name}/analytics/audiences/{audience_name}', \OpenAPI\OpenAPI\Models\Operations\AnalyticsGetAudienceRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AnalyticsGetAudienceResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->analyticsGetAudience200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\AnalyticsGetAudience200ApplicationJSON', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->analyticsGetAudienceDefaultApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\AnalyticsGetAudienceDefaultApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get list of audiences.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsListAudiencesRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsListAudiencesSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AnalyticsListAudiencesResponse
     */
	public function analyticsListAudiences(
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsListAudiencesRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsListAudiencesSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AnalyticsListAudiencesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/apps/{owner_name}/{app_name}/analytics/audiences', \OpenAPI\OpenAPI\Models\Operations\AnalyticsListAudiencesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AnalyticsListAudiencesRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AnalyticsListAudiencesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->analyticsListAudiences200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\AnalyticsListAudiences200ApplicationJSON', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->analyticsListAudiencesDefaultApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\AnalyticsListAudiencesDefaultApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get list of custom properties.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsListCustomPropertiesRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsListCustomPropertiesSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AnalyticsListCustomPropertiesResponse
     */
	public function analyticsListCustomProperties(
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsListCustomPropertiesRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsListCustomPropertiesSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AnalyticsListCustomPropertiesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/apps/{owner_name}/{app_name}/analytics/audiences/metadata/custom_properties', \OpenAPI\OpenAPI\Models\Operations\AnalyticsListCustomPropertiesRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AnalyticsListCustomPropertiesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->analyticsListCustomProperties200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\AnalyticsListCustomProperties200ApplicationJSON', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->analyticsListCustomPropertiesDefaultApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\AnalyticsListCustomPropertiesDefaultApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get list of device properties.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsListDevicePropertiesRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsListDevicePropertiesSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AnalyticsListDevicePropertiesResponse
     */
	public function analyticsListDeviceProperties(
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsListDevicePropertiesRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsListDevicePropertiesSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AnalyticsListDevicePropertiesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/apps/{owner_name}/{app_name}/analytics/audiences/metadata/device_properties', \OpenAPI\OpenAPI\Models\Operations\AnalyticsListDevicePropertiesRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AnalyticsListDevicePropertiesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->analyticsListDeviceProperties200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\AnalyticsListDeviceProperties200ApplicationJSON', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->analyticsListDevicePropertiesDefaultApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\AnalyticsListDevicePropertiesDefaultApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get list of device property values.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsListDevicePropertyValuesRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsListDevicePropertyValuesSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AnalyticsListDevicePropertyValuesResponse
     */
	public function analyticsListDevicePropertyValues(
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsListDevicePropertyValuesRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsListDevicePropertyValuesSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AnalyticsListDevicePropertyValuesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/apps/{owner_name}/{app_name}/analytics/audiences/metadata/device_properties/{property_name}/values', \OpenAPI\OpenAPI\Models\Operations\AnalyticsListDevicePropertyValuesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AnalyticsListDevicePropertyValuesRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AnalyticsListDevicePropertyValuesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->analyticsListDevicePropertyValues200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\AnalyticsListDevicePropertyValues200ApplicationJSON', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->analyticsListDevicePropertyValuesDefaultApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\AnalyticsListDevicePropertyValuesDefaultApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Logs received between the specified start time and the current time. The API will return a maximum of 100 logs per call.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsLogFlowRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsLogFlowSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AnalyticsLogFlowResponse
     */
	public function analyticsLogFlow(
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsLogFlowRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsLogFlowSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AnalyticsLogFlowResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/apps/{owner_name}/{app_name}/analytics/log_flow', \OpenAPI\OpenAPI\Models\Operations\AnalyticsLogFlowRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AnalyticsLogFlowRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AnalyticsLogFlowResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->analyticsLogFlow200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\AnalyticsLogFlow200ApplicationJSON', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->analyticsLogFlowDefaultApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\AnalyticsLogFlowDefaultApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Tests audience definition.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsTestAudienceRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsTestAudienceSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AnalyticsTestAudienceResponse
     */
	public function analyticsTestAudience(
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsTestAudienceRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsTestAudienceSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AnalyticsTestAudienceResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/apps/{owner_name}/{app_name}/analytics/audiences/definition/test', \OpenAPI\OpenAPI\Models\Operations\AnalyticsTestAudienceRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AnalyticsTestAudienceResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->analyticsTestAudience200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\AnalyticsTestAudience200ApplicationJSON', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->analyticsTestAudienceDefaultApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\AnalyticsTestAudienceDefaultApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * **Warning, this operation is not reversible.** 
     * 
     * A successful call to this API will permanently stop ingesting any logs received via SDK by app_id, and cannot be restored. We advise caution when using this API, it is designed to permanently disable an app_id.
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AppBlockLogsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AppBlockLogsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AppBlockLogsResponse
     */
	public function appBlockLogs(
        \OpenAPI\OpenAPI\Models\Operations\AppBlockLogsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AppBlockLogsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AppBlockLogsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/apps/{owner_name}/{app_name}/devices/block_logs', \OpenAPI\OpenAPI\Models\Operations\AppBlockLogsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AppBlockLogsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $response->appBlockLogs200ApplicationJSONStringString = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Get session logs by crash ID
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CrashesListSessionLogsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CrashesListSessionLogsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CrashesListSessionLogsResponse
     */
	public function crashesListSessionLogs(
        \OpenAPI\OpenAPI\Models\Operations\CrashesListSessionLogsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CrashesListSessionLogsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CrashesListSessionLogsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/apps/{owner_name}/{app_name}/crashes/{crash_id}/session_logs', \OpenAPI\OpenAPI\Models\Operations\CrashesListSessionLogsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\CrashesListSessionLogsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CrashesListSessionLogsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->crashesListSessionLogs200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\CrashesListSessionLogs200ApplicationJSON', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->crashesListSessionLogsDefaultApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\CrashesListSessionLogsDefaultApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * **Warning, this operation is not reversible.**
     * 
     *  A successful call to this API will permanently stop ingesting any logs received via SDK for the given installation ID, and cannot be restored. We advise caution when using this API, it is designed to permanently disable collection from a specific installation of the app on a device, usually following the request from a user.
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DevicesBlockLogsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DevicesBlockLogsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DevicesBlockLogsResponse
     */
	public function devicesBlockLogs(
        \OpenAPI\OpenAPI\Models\Operations\DevicesBlockLogsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DevicesBlockLogsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DevicesBlockLogsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/apps/{owner_name}/{app_name}/devices/block_logs/{install_id}', \OpenAPI\OpenAPI\Models\Operations\DevicesBlockLogsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DevicesBlockLogsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $response->devicesBlockLogs200ApplicationJSONStringString = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
}