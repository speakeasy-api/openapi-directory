"use strict";
/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Vendors = void 0;
var utils = __importStar(require("../internal/utils"));
var operations = __importStar(require("./models/operations"));
var shared = __importStar(require("./models/shared"));
/**
 * To change the description use /examples/TagsDescriptions.json
 */
var Vendors = /** @class */ (function () {
    function Vendors(defaultClient, securityClient, serverURL, language, sdkVersion, genVersion) {
        this._defaultClient = defaultClient;
        this._securityClient = securityClient;
        this._serverURL = serverURL;
        this._language = language;
        this._sdkVersion = sdkVersion;
        this._genVersion = genVersion;
    }
    /**
     * Removes a provider.
     *
     * @remarks
     * Removes a provider.
     */
    Vendors.prototype.delete10 = function (req, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.Delete10Request(req);
        }
        var baseURL = this._serverURL;
        var url = utils.generateURL(baseURL, "/providers/{providerId}", req);
        var client = this._securityClient || this._defaultClient;
        var r = client.request(__assign({ url: url, method: "delete" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.Delete10Response({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 204:
                    break;
            }
            return res;
        });
    };
    /**
     * Removes a person.
     *
     * @remarks
     * Removes a person.
     */
    Vendors.prototype.delete8 = function (req, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.Delete8Request(req);
        }
        var baseURL = this._serverURL;
        var url = utils.generateURL(baseURL, "/providers/persons/{personId}", req);
        var client = this._securityClient || this._defaultClient;
        var r = client.request(__assign({ url: url, method: "delete" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.Delete8Response({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 204:
                    break;
            }
            return res;
        });
    };
    /**
     * Removes a provider price list.
     *
     * @remarks
     * Removes a provider price list.
     */
    Vendors.prototype.delete9 = function (req, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.Delete9Request(req);
        }
        var baseURL = this._serverURL;
        var url = utils.generateURL(baseURL, "/providers/priceLists/{priceListId}", req);
        var client = this._securityClient || this._defaultClient;
        var r = client.request(__assign({ url: url, method: "delete" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.Delete9Response({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 204:
                    break;
            }
            return res;
        });
    };
    /**
     * Returns address of a given provider.
     *
     * @remarks
     * Returns address of a given provider.
     */
    Vendors.prototype.getAddress1 = function (req, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.GetAddress1Request(req);
        }
        var baseURL = this._serverURL;
        var url = utils.generateURL(baseURL, "/providers/{providerId}/address", req);
        var client = this._securityClient || this._defaultClient;
        var r = client.request(__assign({ url: url, method: "get" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.GetAddress1Response({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                default:
                    if (utils.matchContentType(contentType, "application/vnd.xtrf-v1+json;charset=UTF-8")) {
                        res.addressDTO = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.AddressDTO);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Returns persons' internal identifiers.
     *
     * @remarks
     * Returns persons' internal identifiers.
     */
    Vendors.prototype.getAllIds4 = function (req, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.GetAllIds4Request(req);
        }
        var baseURL = this._serverURL;
        var url = baseURL.replace(/\/$/, "") + "/providers/persons/ids";
        var client = this._securityClient || this._defaultClient;
        var queryParams = utils.serializeQueryParams(req);
        var r = client.request(__assign({ url: url + queryParams, method: "get" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.GetAllIds4Response({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                default:
                    if (utils.matchContentType(contentType, "application/vnd.xtrf-v1+json;charset=UTF-8")) {
                        res.getAllIds4DefaultApplicationVndXtrfV1PlusJsonInt32Integers =
                            utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Returns providers' internal identifiers.
     *
     * @remarks
     * Returns providers' internal identifiers.
     */
    Vendors.prototype.getAllIds5 = function (req, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.GetAllIds5Request(req);
        }
        var baseURL = this._serverURL;
        var url = baseURL.replace(/\/$/, "") + "/providers/ids";
        var client = this._securityClient || this._defaultClient;
        var queryParams = utils.serializeQueryParams(req);
        var r = client.request(__assign({ url: url + queryParams, method: "get" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.GetAllIds5Response({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                default:
                    if (utils.matchContentType(contentType, "application/vnd.xtrf-v1+json;charset=UTF-8")) {
                        res.getAllIds5DefaultApplicationVndXtrfV1PlusJsonInt32Integers =
                            utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Returns person details.
     *
     * @remarks
     * Returns person details.
     */
    Vendors.prototype.getById4 = function (req, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.GetById4Request(req);
        }
        var baseURL = this._serverURL;
        var url = utils.generateURL(baseURL, "/providers/persons/{personId}", req);
        var client = this._securityClient || this._defaultClient;
        var r = client.request(__assign({ url: url, method: "get" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.GetById4Response({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                default:
                    if (utils.matchContentType(contentType, "application/vnd.xtrf-v1+json;charset=UTF-8")) {
                        res.providerPersonDTO = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.ProviderPersonDTO);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Returns provider details.
     *
     * @remarks
     * Returns provider details.
     */
    Vendors.prototype.getById5 = function (req, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.GetById5Request(req);
        }
        var baseURL = this._serverURL;
        var url = utils.generateURL(baseURL, "/providers/{providerId}", req);
        var client = this._securityClient || this._defaultClient;
        var queryParams = utils.serializeQueryParams(req);
        var r = client.request(__assign({ url: url + queryParams, method: "get" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.GetById5Response({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                default:
                    if (utils.matchContentType(contentType, "application/vnd.xtrf-v1+json;charset=UTF-8")) {
                        res.providerDTO = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.ProviderDTO);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Returns competencies of a given provider.
     *
     * @remarks
     * Returns competencies of a given provider.
     */
    Vendors.prototype.getCompetencies = function (req, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.GetCompetenciesRequest(req);
        }
        var baseURL = this._serverURL;
        var url = utils.generateURL(baseURL, "/providers/{providerId}/competencies", req);
        var client = this._securityClient || this._defaultClient;
        var r = client.request(__assign({ url: url, method: "get" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.GetCompetenciesResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                default:
                    if (utils.matchContentType(contentType, "application/vnd.xtrf-v1+json;charset=UTF-8")) {
                        res.competenciesDTO = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.CompetenciesDTO);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Returns contact of a given person.
     *
     * @remarks
     * Returns contact of a given person.
     */
    Vendors.prototype.getContact2 = function (req, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.GetContact2Request(req);
        }
        var baseURL = this._serverURL;
        var url = utils.generateURL(baseURL, "/providers/persons/{personId}/contact", req);
        var client = this._securityClient || this._defaultClient;
        var r = client.request(__assign({ url: url, method: "get" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.GetContact2Response({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                default:
                    if (utils.matchContentType(contentType, "application/vnd.xtrf-v1+json;charset=UTF-8")) {
                        res.personContactDTO = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.PersonContactDTO);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Returns contact of a given provider.
     *
     * @remarks
     * Returns contact of a given provider.
     */
    Vendors.prototype.getContact3 = function (req, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.GetContact3Request(req);
        }
        var baseURL = this._serverURL;
        var url = utils.generateURL(baseURL, "/providers/{providerId}/contact", req);
        var client = this._securityClient || this._defaultClient;
        var r = client.request(__assign({ url: url, method: "get" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.GetContact3Response({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                default:
                    if (utils.matchContentType(contentType, "application/vnd.xtrf-v1+json;charset=UTF-8")) {
                        res.contactDTO = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.ContactDTO);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Returns correspondence address of a given provider.
     *
     * @remarks
     * Returns correspondence address of a given provider.
     */
    Vendors.prototype.getCorrespondenceAddress1 = function (req, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.GetCorrespondenceAddress1Request(req);
        }
        var baseURL = this._serverURL;
        var url = utils.generateURL(baseURL, "/providers/{providerId}/correspondenceAddress", req);
        var client = this._securityClient || this._defaultClient;
        var r = client.request(__assign({ url: url, method: "get" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.GetCorrespondenceAddress1Response({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                default:
                    if (utils.matchContentType(contentType, "application/vnd.xtrf-v1+json;charset=UTF-8")) {
                        res.addressDTO = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.AddressDTO);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Returns custom fields of a given person.
     *
     * @remarks
     * Returns custom fields of a given person.
     */
    Vendors.prototype.getCustomFields2 = function (req, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.GetCustomFields2Request(req);
        }
        var baseURL = this._serverURL;
        var url = utils.generateURL(baseURL, "/providers/persons/{personId}/customFields", req);
        var client = this._securityClient || this._defaultClient;
        var r = client.request(__assign({ url: url, method: "get" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.GetCustomFields2Response({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                default:
                    if (utils.matchContentType(contentType, "application/vnd.xtrf-v1+json;charset=UTF-8")) {
                        res.customFieldsDTO = [];
                        var resFieldDepth = utils.getResFieldDepth(res);
                        res.customFieldsDTO = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.CustomFieldDTO, resFieldDepth);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Returns custom fields of a given provider.
     *
     * @remarks
     * Returns custom fields of a given provider.
     */
    Vendors.prototype.getCustomFields3 = function (req, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.GetCustomFields3Request(req);
        }
        var baseURL = this._serverURL;
        var url = utils.generateURL(baseURL, "/providers/{providerId}/customFields", req);
        var client = this._securityClient || this._defaultClient;
        var r = client.request(__assign({ url: url, method: "get" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.GetCustomFields3Response({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                default:
                    if (utils.matchContentType(contentType, "application/vnd.xtrf-v1+json;charset=UTF-8")) {
                        res.customFieldsDTO = [];
                        var resFieldDepth = utils.getResFieldDepth(res);
                        res.customFieldsDTO = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.CustomFieldDTO, resFieldDepth);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Sends invitation to Vendor Portal.
     *
     * @remarks
     * Sends invitation to Vendor Portal.
     */
    Vendors.prototype.sendInvitations = function (req, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.SendInvitationsRequest(req);
        }
        var baseURL = this._serverURL;
        var url = utils.generateURL(baseURL, "/providers/persons/{personId}/notification/invitation", req);
        var client = this._securityClient || this._defaultClient;
        var r = client.request(__assign({ url: url, method: "post" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.SendInvitationsResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                default:
                    if (utils.matchContentType(contentType, "application/vnd.xtrf-v1+json;charset=UTF-8")) {
                        res.invitationStatisticsDTO = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.InvitationStatisticsDTO);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Sends invitations to Vendor Portal.
     *
     * @remarks
     * Sends invitations to Vendor Portal.
     */
    Vendors.prototype.sendInvitations1 = function (req, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.SendInvitations1Request(req);
        }
        var baseURL = this._serverURL;
        var url = utils.generateURL(baseURL, "/providers/{providerId}/notification/invitation", req);
        var client = this._securityClient || this._defaultClient;
        var r = client.request(__assign({ url: url, method: "post" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.SendInvitations1Response({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                default:
                    if (utils.matchContentType(contentType, "application/vnd.xtrf-v1+json;charset=UTF-8")) {
                        res.invitationStatisticsDTO = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.InvitationStatisticsDTO);
                    }
                    break;
            }
            return res;
        });
    };
    return Vendors;
}());
exports.Vendors = Vendors;
