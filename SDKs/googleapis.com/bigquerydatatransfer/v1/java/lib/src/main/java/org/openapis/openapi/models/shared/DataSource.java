/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * DataSource - Defines the properties and custom parameters for a data source.
 */
public class DataSource {
    /**
     * Indicates the type of authorization.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("authorizationType")
    public DataSourceAuthorizationTypeEnum authorizationType;
    public DataSource withAuthorizationType(DataSourceAuthorizationTypeEnum authorizationType) {
        this.authorizationType = authorizationType;
        return this;
    }
    
    /**
     * Data source client id which should be used to receive refresh token.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("clientId")
    public String clientId;
    public DataSource withClientId(String clientId) {
        this.clientId = clientId;
        return this;
    }
    
    /**
     * Specifies whether the data source supports automatic data refresh for the past few days, and how it's supported. For some data sources, data might not be complete until a few days later, so it's useful to refresh data automatically.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("dataRefreshType")
    public DataSourceDataRefreshTypeEnum dataRefreshType;
    public DataSource withDataRefreshType(DataSourceDataRefreshTypeEnum dataRefreshType) {
        this.dataRefreshType = dataRefreshType;
        return this;
    }
    
    /**
     * Data source id.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("dataSourceId")
    public String dataSourceId;
    public DataSource withDataSourceId(String dataSourceId) {
        this.dataSourceId = dataSourceId;
        return this;
    }
    
    /**
     * Default data refresh window on days. Only meaningful when `data_refresh_type` = `SLIDING_WINDOW`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("defaultDataRefreshWindowDays")
    public Integer defaultDataRefreshWindowDays;
    public DataSource withDefaultDataRefreshWindowDays(Integer defaultDataRefreshWindowDays) {
        this.defaultDataRefreshWindowDays = defaultDataRefreshWindowDays;
        return this;
    }
    
    /**
     * Default data transfer schedule. Examples of valid schedules include: `1st,3rd monday of month 15:30`, `every wed,fri of jan,jun 13:15`, and `first sunday of quarter 00:00`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("defaultSchedule")
    public String defaultSchedule;
    public DataSource withDefaultSchedule(String defaultSchedule) {
        this.defaultSchedule = defaultSchedule;
        return this;
    }
    
    /**
     * User friendly data source description string.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    public String description;
    public DataSource withDescription(String description) {
        this.description = description;
        return this;
    }
    
    /**
     * User friendly data source name.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("displayName")
    public String displayName;
    public DataSource withDisplayName(String displayName) {
        this.displayName = displayName;
        return this;
    }
    
    /**
     * Url for the help document for this data source.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("helpUrl")
    public String helpUrl;
    public DataSource withHelpUrl(String helpUrl) {
        this.helpUrl = helpUrl;
        return this;
    }
    
    /**
     * Disables backfilling and manual run scheduling for the data source.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("manualRunsDisabled")
    public Boolean manualRunsDisabled;
    public DataSource withManualRunsDisabled(Boolean manualRunsDisabled) {
        this.manualRunsDisabled = manualRunsDisabled;
        return this;
    }
    
    /**
     * The minimum interval for scheduler to schedule runs.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("minimumScheduleInterval")
    public String minimumScheduleInterval;
    public DataSource withMinimumScheduleInterval(String minimumScheduleInterval) {
        this.minimumScheduleInterval = minimumScheduleInterval;
        return this;
    }
    
    /**
     * Output only. Data source resource name.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    public String name;
    public DataSource withName(String name) {
        this.name = name;
        return this;
    }
    
    /**
     * Data source parameters.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("parameters")
    public DataSourceParameter[] parameters;
    public DataSource withParameters(DataSourceParameter[] parameters) {
        this.parameters = parameters;
        return this;
    }
    
    /**
     * Api auth scopes for which refresh token needs to be obtained. These are scopes needed by a data source to prepare data and ingest them into BigQuery, e.g., https://www.googleapis.com/auth/bigquery
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("scopes")
    public String[] scopes;
    public DataSource withScopes(String[] scopes) {
        this.scopes = scopes;
        return this;
    }
    
    /**
     * Specifies whether the data source supports a user defined schedule, or operates on the default schedule. When set to `true`, user can override default schedule.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("supportsCustomSchedule")
    public Boolean supportsCustomSchedule;
    public DataSource withSupportsCustomSchedule(Boolean supportsCustomSchedule) {
        this.supportsCustomSchedule = supportsCustomSchedule;
        return this;
    }
    
    /**
     * Deprecated. This field has no effect.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("supportsMultipleTransfers")
    public Boolean supportsMultipleTransfers;
    public DataSource withSupportsMultipleTransfers(Boolean supportsMultipleTransfers) {
        this.supportsMultipleTransfers = supportsMultipleTransfers;
        return this;
    }
    
    /**
     * Deprecated. This field has no effect.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("transferType")
    public DataSourceTransferTypeEnum transferType;
    public DataSource withTransferType(DataSourceTransferTypeEnum transferType) {
        this.transferType = transferType;
        return this;
    }
    
    /**
     * The number of seconds to wait for an update from the data source before the Data Transfer Service marks the transfer as FAILED.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("updateDeadlineSeconds")
    public Integer updateDeadlineSeconds;
    public DataSource withUpdateDeadlineSeconds(Integer updateDeadlineSeconds) {
        this.updateDeadlineSeconds = updateDeadlineSeconds;
        return this;
    }
    
}
