/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { ChargeLanguageCombinationDTO } from "./chargelanguagecombinationdto";
import { Expose, Type } from "class-transformer";

export enum PayableDTORateOriginEnum {
  PriceProfile = "PRICE_PROFILE",
  PriceList = "PRICE_LIST",
  FilledManually = "FILLED_MANUALLY",
  Autocalculated = "AUTOCALCULATED",
}

export enum PayableDTOTypeEnum {
  Simple = "SIMPLE",
  Cat = "CAT",
}

/**
 * Success
 */
export class PayableDTO extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "calculationUnitId" })
  calculationUnitId?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "currencyId" })
  currencyId?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "description" })
  description?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "ignoreMinimumCharge" })
  ignoreMinimumCharge?: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "invoiceId" })
  invoiceId?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "jobId" })
  jobId?: Record<string, any>;

  @SpeakeasyMetadata()
  @Expose({ name: "jobTypeId" })
  jobTypeId?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "languageCombination" })
  @Type(() => ChargeLanguageCombinationDTO)
  languageCombination?: ChargeLanguageCombinationDTO;

  @SpeakeasyMetadata()
  @Expose({ name: "languageCombinationIdNumber" })
  languageCombinationIdNumber?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "minimumCharge" })
  minimumCharge?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "quantity" })
  quantity?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "rate" })
  rate?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "rateOrigin" })
  rateOrigin?: PayableDTORateOriginEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "total" })
  total?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "type" })
  type?: PayableDTOTypeEnum;
}
