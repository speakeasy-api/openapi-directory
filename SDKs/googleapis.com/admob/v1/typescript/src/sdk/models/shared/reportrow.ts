/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import {
  objectToClass,
  SpeakeasyBase,
  SpeakeasyMetadata,
} from "../../../internal/utils";
import { ReportRowDimensionValue } from "./reportrowdimensionvalue";
import { ReportRowMetricValue } from "./reportrowmetricvalue";
import { Expose, Transform } from "class-transformer";

/**
 * A row of the returning report.
 */
export class ReportRow extends SpeakeasyBase {
  /**
   * Map of dimension values in a row, with keys as enum name of the dimensions.
   */
  @SpeakeasyMetadata({ elemType: ReportRowDimensionValue })
  @Expose({ name: "dimensionValues" })
  @Transform(
    ({ value }) => {
      const obj: Record<string, ReportRowDimensionValue> = {};
      for (const key in value) {
        obj[key] = objectToClass(value[key], ReportRowDimensionValue);
      }
      return obj;
    },
    { toClassOnly: true }
  )
  dimensionValues?: Record<string, ReportRowDimensionValue>;

  /**
   * Map of metric values in a row, with keys as enum name of the metrics. If a metric being requested has no value returned, the map will not include it.
   */
  @SpeakeasyMetadata({ elemType: ReportRowMetricValue })
  @Expose({ name: "metricValues" })
  @Transform(
    ({ value }) => {
      const obj: Record<string, ReportRowMetricValue> = {};
      for (const key in value) {
        obj[key] = objectToClass(value[key], ReportRowMetricValue);
      }
      return obj;
    },
    { toClassOnly: true }
  )
  metricValues?: Record<string, ReportRowMetricValue>;
}
