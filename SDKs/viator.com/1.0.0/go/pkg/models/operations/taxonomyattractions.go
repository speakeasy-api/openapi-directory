// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

type TaxonomyAttractionsHeaders struct {
	// Specifies the language into which the natural-language fields in the response from this service will be translated (see [Accept-Language header](#section/Appendices/Accept-Language-header) for available langage codes)
	//
	AcceptLanguage string `header:"style=simple,explode=false,name=Accept-Language"`
}

// TaxonomyAttractionsRequestBodySortOrderEnum - **sort order** in which to return the results that is *one of*:
//   - `"SEO_PUBLISHED_DATE_D"`: publish date (descending)
//   - `"SEO_PUBLISHED_DATE_A"`: publish date (ascending)
//   - `"SEO_REVIEW_AVG_RATING_D"`: traveler rating (high→low)
//   - `"SEO_REVIEW_AVG_RATING_A"`: traveler rating (low→high)
//   - `"SEO_ALPHABETICAL"`: alphabetical (A→Z)
type TaxonomyAttractionsRequestBodySortOrderEnum string

const (
	TaxonomyAttractionsRequestBodySortOrderEnumSeoPublishedDateD   TaxonomyAttractionsRequestBodySortOrderEnum = "SEO_PUBLISHED_DATE_D"
	TaxonomyAttractionsRequestBodySortOrderEnumSeoPublishedDateA   TaxonomyAttractionsRequestBodySortOrderEnum = "SEO_PUBLISHED_DATE_A"
	TaxonomyAttractionsRequestBodySortOrderEnumSeoReviewAvgRatingD TaxonomyAttractionsRequestBodySortOrderEnum = "SEO_REVIEW_AVG_RATING_D"
	TaxonomyAttractionsRequestBodySortOrderEnumSeoReviewAvgRatingA TaxonomyAttractionsRequestBodySortOrderEnum = "SEO_REVIEW_AVG_RATING_A"
	TaxonomyAttractionsRequestBodySortOrderEnumSeoAlphabetical     TaxonomyAttractionsRequestBodySortOrderEnum = "SEO_ALPHABETICAL"
)

func (e *TaxonomyAttractionsRequestBodySortOrderEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "SEO_PUBLISHED_DATE_D":
		fallthrough
	case "SEO_PUBLISHED_DATE_A":
		fallthrough
	case "SEO_REVIEW_AVG_RATING_D":
		fallthrough
	case "SEO_REVIEW_AVG_RATING_A":
		fallthrough
	case "SEO_ALPHABETICAL":
		*e = TaxonomyAttractionsRequestBodySortOrderEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for TaxonomyAttractionsRequestBodySortOrderEnum: %s", s)
	}
}

type TaxonomyAttractionsRequestBody struct {
	// **unique numeric identifier** of the destination in which to search for attractions
	DestID *int64 `json:"destId,omitempty"`
	// **sort order** in which to return the results that is *one of*:
	//   * `"SEO_PUBLISHED_DATE_D"`: publish date (descending)
	//   * `"SEO_PUBLISHED_DATE_A"`: publish date (ascending)
	//   * `"SEO_REVIEW_AVG_RATING_D"`: traveler rating (high→low)
	//   * `"SEO_REVIEW_AVG_RATING_A"`: traveler rating (low→high)
	//   * `"SEO_ALPHABETICAL"`: alphabetical (A→Z)
	//
	SortOrder *TaxonomyAttractionsRequestBodySortOrderEnum `json:"sortOrder,omitempty"`
	// **start and end rows** to return in the format {start}-{end}
	// - e.g. `'1-10'`, `'11-20'`
	//
	// **Note**:
	// - the maximum number of rows per request is 100; therefore, `'100-400'` will return the same as `'100-200'`
	// - if `topX` is not specified, the default is `'1-100'`
	//
	TopX *string `json:"topX,omitempty"`
}

type TaxonomyAttractionsRequest struct {
	Headers TaxonomyAttractionsHeaders
	Request *TaxonomyAttractionsRequestBody `request:"mediaType=application/json"`
}

type TaxonomyAttractions200ApplicationJSONData struct {
	// **name** of the city in which the attraction is located
	AttractionCity *string `json:"attractionCity,omitempty"`
	// **latitude component** of the attraction's location
	AttractionLatitude *float64 `json:"attractionLatitude,omitempty"`
	// **longitude component** of the attraction's location
	AttractionLongitude *float64 `json:"attractionLongitude,omitempty"`
	// **name** of the state in which the attraction is located
	AttractionState *string `json:"attractionState,omitempty"`
	// **street address** of the attraction
	AttractionStreetAddress *string `json:"attractionStreetAddress,omitempty"`
	// **unique numeric identifier** of the the destination associated with the attraction
	DestinationID *int64 `json:"destinationId,omitempty"`
	// **URL-formatted title** of the attraction page
	PageURLName *string `json:"pageUrlName,omitempty"`
	// **number** of user photos published for the attraction
	PhotoCount *int64 `json:"photoCount,omitempty"`
	// **unique numeric identifier** of the attraction's primary destination
	PrimaryDestinationID *int64 `json:"primaryDestinationId,omitempty"`
	// **natural-language name** of the attraction's primary destination
	PrimaryDestinationName *string `json:"primaryDestinationName,omitempty"`
	// **URL-formatted name** of the destination associated with *this* attraction
	PrimaryDestinationURLName *string `json:"primaryDestinationUrlName,omitempty"`
	// **number** of products associated with the attraction
	ProductCount *int64 `json:"productCount,omitempty"`
	// **conventionally-formatted date** on which the attraction was listed
	PublishedDate *string `json:"publishedDate,omitempty"`
	// **average user rating** of the attraction
	Rating *float64 `json:"rating,omitempty"`
	// **unique numeric identifier** of the attraction
	// - use as an input for [/search/products](#operation/searchProducts)
	//
	SeoID *int64 `json:"seoId,omitempty"`
	// **sort order** of *this* listing
	SortOrder *int64 `json:"sortOrder,omitempty"`
	// **URL** for the attraction's high-resolution thumbnail image
	ThumbnailHiResURL *string `json:"thumbnailHiResURL,omitempty"`
	// **URL** the attraction's thumbnail image
	ThumbnailURL *string `json:"thumbnailURL,omitempty"`
	// **natural-language title** of the attraction
	Title *string `json:"title,omitempty"`
	// ignore (Viator only)
	WebURL *string `json:"webURL,omitempty"`
}

// TaxonomyAttractions200ApplicationJSON - Success
type TaxonomyAttractions200ApplicationJSON struct {
	// **array** of attraction objects
	Data []TaxonomyAttractions200ApplicationJSONData `json:"data,omitempty"`
	// **timestamp** of *this* response
	DateStamp *string `json:"dateStamp,omitempty"`
	// **array** of error codes pertaining to *this* error
	// - See: [Viator API error codes](#section/Appendices/Viator-API-error-codes) for a list of possible error codes
	//
	ErrorCodes []string `json:"errorCodes,omitempty"`
	// **array** of error message strings
	ErrorMessage []interface{} `json:"errorMessage,omitempty"`
	// **array** of error message strings in plain text
	ErrorMessageText *string `json:"errorMessageText,omitempty"`
	// **name** of *this* type of error
	ErrorName *string `json:"errorName,omitempty"`
	// **reference number** of *this* error
	ErrorReference *string `json:"errorReference,omitempty"`
	// **code** specifying the type of error
	ErrorType *string `json:"errorType,omitempty"`
	// ignore (Viator only)
	ExtraInfo map[string]interface{} `json:"extraInfo,omitempty"`
	// ignore (Viator only)
	ExtraObject map[string]interface{} `json:"extraObject,omitempty"`
	// **boolean indicator** of *this* request's outcome
	// - `true`: the request was successful with no errors
	// - `false`: an error was encountered
	//
	Success *bool `json:"success,omitempty"`
	// **number** of results available for *this* service
	//
	TotalCount *int64 `json:"totalCount,omitempty"`
	// **unique numeric id** of the server that processed *this* request
	Vmid *string `json:"vmid,omitempty"`
}

type TaxonomyAttractionsResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Success
	TaxonomyAttractions200ApplicationJSONObject *TaxonomyAttractions200ApplicationJSON
}
