"use strict";
/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GooglePrivacyDlpV2FindingLimits = void 0;
var utils_1 = require("../../../internal/utils");
var googleprivacydlpv2infotypelimit_1 = require("./googleprivacydlpv2infotypelimit");
var class_transformer_1 = require("class-transformer");
/**
 * Configuration to control the number of findings returned for inspection. This is not used for de-identification or data profiling. When redacting sensitive data from images, finding limits don't apply. They can cause unexpected or inconsistent results, where only some data is redacted. Don't include finding limits in RedactImage requests. Otherwise, Cloud DLP returns an error.
 */
var GooglePrivacyDlpV2FindingLimits = /** @class */ (function (_super) {
    __extends(GooglePrivacyDlpV2FindingLimits, _super);
    function GooglePrivacyDlpV2FindingLimits() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({ elemType: googleprivacydlpv2infotypelimit_1.GooglePrivacyDlpV2InfoTypeLimit }),
        (0, class_transformer_1.Expose)({ name: "maxFindingsPerInfoType" }),
        (0, class_transformer_1.Type)(function () { return googleprivacydlpv2infotypelimit_1.GooglePrivacyDlpV2InfoTypeLimit; }),
        __metadata("design:type", Array)
    ], GooglePrivacyDlpV2FindingLimits.prototype, "maxFindingsPerInfoType", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "maxFindingsPerItem" }),
        __metadata("design:type", Number)
    ], GooglePrivacyDlpV2FindingLimits.prototype, "maxFindingsPerItem", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "maxFindingsPerRequest" }),
        __metadata("design:type", Number)
    ], GooglePrivacyDlpV2FindingLimits.prototype, "maxFindingsPerRequest", void 0);
    return GooglePrivacyDlpV2FindingLimits;
}(utils_1.SpeakeasyBase));
exports.GooglePrivacyDlpV2FindingLimits = GooglePrivacyDlpV2FindingLimits;
