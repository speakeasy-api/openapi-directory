"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import language_enum as shared_language_enum
from ..shared import security as shared_security
from ..shared import sfxsearchresults as shared_sfxsearchresults
from datetime import date
from enum import Enum
from typing import Optional


@dataclasses.dataclass
class SearchSFXSecurity:
    
    basic: Optional[shared_security.SchemeBasic] = dataclasses.field(default=None, metadata={'security': { 'scheme': True, 'type': 'http', 'sub_type': 'basic' }})  
    customer_access_code: Optional[str] = dataclasses.field(default=None, metadata={'security': { 'scheme': True, 'type': 'oauth2', 'field_name': 'Authorization' }})  
    
class SearchSFXSortEnum(str, Enum):
    r"""Sort by"""
    POPULAR = 'popular'
    NEWEST = 'newest'
    RELEVANCE = 'relevance'
    RANDOM = 'random'
    OLDEST = 'oldest'

class SearchSFXViewEnum(str, Enum):
    r"""Amount of detail to render in the response"""
    MINIMAL = 'minimal'
    FULL = 'full'


@dataclasses.dataclass
class SearchSFXRequest:
    
    added_date: Optional[date] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'added_date', 'style': 'form', 'explode': True }})
    r"""Show sound effects added on the specified date"""  
    added_date_end: Optional[date] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'added_date_end', 'style': 'form', 'explode': True }})
    r"""Show sound effects added before the specified date"""  
    added_date_start: Optional[date] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'added_date_start', 'style': 'form', 'explode': True }})
    r"""Show sound effects added on or after the specified date"""  
    duration: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'duration', 'style': 'form', 'explode': True }})
    r"""Show sound effects with the specified duration in seconds"""  
    duration_from: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'duration_from', 'style': 'form', 'explode': True }})
    r"""Show sound effects with the specified duration or longer in seconds"""  
    duration_to: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'duration_to', 'style': 'form', 'explode': True }})
    r"""Show sound effects with the specified duration or shorter in seconds"""  
    language: Optional[shared_language_enum.LanguageEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'language', 'style': 'form', 'explode': True }})
    r"""Set query and result language (uses Accept-Language header if not set)"""  
    page: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'page', 'style': 'form', 'explode': True }})
    r"""Page number"""  
    per_page: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'per_page', 'style': 'form', 'explode': True }})
    r"""Number of results per page"""  
    query: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'query', 'style': 'form', 'explode': True }})
    r"""One or more search terms separated by spaces"""  
    safe: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'safe', 'style': 'form', 'explode': True }})
    r"""Enable or disable safe search"""  
    sort: Optional[SearchSFXSortEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'sort', 'style': 'form', 'explode': True }})
    r"""Sort by"""  
    view: Optional[SearchSFXViewEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'view', 'style': 'form', 'explode': True }})
    r"""Amount of detail to render in the response"""  
    

@dataclasses.dataclass
class SearchSFXResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    sfx_search_results: Optional[shared_sfxsearchresults.SFXSearchResults] = dataclasses.field(default=None)
    r"""OK"""  
    