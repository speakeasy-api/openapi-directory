/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { ConferenceParticipantEnumCallDirectionEnum } from "./conferenceparticipantenumcalldirectionenum";
import { ConferenceParticipantEnumCallStatusEnum } from "./conferenceparticipantenumcallstatusenum";
import { ConferenceParticipantEnumCallTypeEnum } from "./conferenceparticipantenumcalltypeenum";
import { ConferenceParticipantEnumJitterBufferSizeEnum } from "./conferenceparticipantenumjitterbuffersizeenum";
import { ConferenceParticipantEnumProcessingStateEnum } from "./conferenceparticipantenumprocessingstateenum";
import { ConferenceParticipantEnumRegionEnum } from "./conferenceparticipantenumregionenum";
import { Expose, Transform } from "class-transformer";

/**
 * OK
 */
export class InsightsV1ConferenceConferenceParticipant extends SpeakeasyBase {
  /**
   * The unique SID identifier of the Account.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "account_sid" })
  accountSid?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "call_direction" })
  callDirection?: ConferenceParticipantEnumCallDirectionEnum;

  /**
   * Unique SID identifier of the call that generated the Participant resource.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "call_sid" })
  callSid?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "call_status" })
  callStatus?: ConferenceParticipantEnumCallStatusEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "call_type" })
  callType?: ConferenceParticipantEnumCallTypeEnum;

  /**
   * Call SIDs coached by this participant.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "coached_participants" })
  coachedParticipants?: string[];

  @SpeakeasyMetadata()
  @Expose({ name: "conference_region" })
  conferenceRegion?: ConferenceParticipantEnumRegionEnum;

  /**
   * The unique SID identifier of the Conference.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "conference_sid" })
  conferenceSid?: string;

  /**
   * ISO alpha-2 country code of the participant based on caller ID or called number.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "country_code" })
  countryCode?: string;

  /**
   * Participant durations in seconds.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "duration_seconds" })
  durationSeconds?: number;

  /**
   * Object containing information of actions taken by participants. Contains a dictionary of URL links to nested resources of this Conference Participant.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "events" })
  events?: any;

  /**
   * Caller ID of the calling party.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "from" })
  from?: string;

  /**
   * Boolean. Indicated whether participant was a coach.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "is_coach" })
  isCoach?: boolean;

  /**
   * Boolean. Indicates whether participant had startConferenceOnEnter=true or endConferenceOnExit=true.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "is_moderator" })
  isModerator?: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "jitter_buffer_size" })
  jitterBufferSize?: ConferenceParticipantEnumJitterBufferSizeEnum;

  /**
   * ISO 8601 timestamp of participant join event.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "join_time" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  joinTime?: Date;

  /**
   * The user-specified label of this participant.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "label" })
  label?: string;

  /**
   * ISO 8601 timestamp of participant leave event.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "leave_time" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  leaveTime?: Date;

  /**
   * Object. Contains participant call quality metrics.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "metrics" })
  metrics?: any;

  /**
   * Add Participant API only. Estimated time in queue at call creation.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "outbound_queue_length" })
  outboundQueueLength?: number;

  /**
   * Add Participant API only. Actual time in queue in seconds.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "outbound_time_in_queue" })
  outboundTimeInQueue?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "participant_region" })
  participantRegion?: ConferenceParticipantEnumRegionEnum;

  /**
   * SID for this participant.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "participant_sid" })
  participantSid?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "processing_state" })
  processingState?: ConferenceParticipantEnumProcessingStateEnum;

  /**
   * Participant properties and metadata.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "properties" })
  properties?: any;

  /**
   * Called party.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "to" })
  to?: string;

  /**
   * The URL of this resource.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "url" })
  url?: string;
}
