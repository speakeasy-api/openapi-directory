// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// NfsShareStateEnum - Output only. The state of the NFS share.
type NfsShareStateEnum string

const (
	NfsShareStateEnumStateUnspecified NfsShareStateEnum = "STATE_UNSPECIFIED"
	NfsShareStateEnumProvisioned      NfsShareStateEnum = "PROVISIONED"
	NfsShareStateEnumCreating         NfsShareStateEnum = "CREATING"
	NfsShareStateEnumUpdating         NfsShareStateEnum = "UPDATING"
	NfsShareStateEnumDeleting         NfsShareStateEnum = "DELETING"
)

func (e NfsShareStateEnum) ToPointer() *NfsShareStateEnum {
	return &e
}

func (e *NfsShareStateEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "STATE_UNSPECIFIED":
		fallthrough
	case "PROVISIONED":
		fallthrough
	case "CREATING":
		fallthrough
	case "UPDATING":
		fallthrough
	case "DELETING":
		*e = NfsShareStateEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for NfsShareStateEnum: %v", v)
	}
}

// NfsShareStorageTypeEnum - Immutable. The storage type of the underlying volume.
type NfsShareStorageTypeEnum string

const (
	NfsShareStorageTypeEnumStorageTypeUnspecified NfsShareStorageTypeEnum = "STORAGE_TYPE_UNSPECIFIED"
	NfsShareStorageTypeEnumSsd                    NfsShareStorageTypeEnum = "SSD"
	NfsShareStorageTypeEnumHdd                    NfsShareStorageTypeEnum = "HDD"
)

func (e NfsShareStorageTypeEnum) ToPointer() *NfsShareStorageTypeEnum {
	return &e
}

func (e *NfsShareStorageTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "STORAGE_TYPE_UNSPECIFIED":
		fallthrough
	case "SSD":
		fallthrough
	case "HDD":
		*e = NfsShareStorageTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for NfsShareStorageTypeEnum: %v", v)
	}
}

// NfsShare - An NFS share.
type NfsShare struct {
	// List of allowed access points.
	AllowedClients []AllowedClient `json:"allowedClients,omitempty"`
	// Output only. An identifier for the NFS share, generated by the backend. This is the same value as nfs_share_id and will replace it in the future.
	ID *string `json:"id,omitempty"`
	// Labels as key value pairs.
	Labels map[string]string `json:"labels,omitempty"`
	// Immutable. The name of the NFS share.
	Name *string `json:"name,omitempty"`
	// Output only. An identifier for the NFS share, generated by the backend. This field will be deprecated in the future, use `id` instead.
	NfsShareID *string `json:"nfsShareId,omitempty"`
	// The requested size, in GiB.
	RequestedSizeGib *string `json:"requestedSizeGib,omitempty"`
	// Output only. The state of the NFS share.
	State *NfsShareStateEnum `json:"state,omitempty"`
	// Immutable. The storage type of the underlying volume.
	StorageType *NfsShareStorageTypeEnum `json:"storageType,omitempty"`
	// Output only. The underlying volume of the share. Created automatically during provisioning.
	Volume *string `json:"volume,omitempty"`
}

// NfsShareInput - An NFS share.
type NfsShareInput struct {
	// List of allowed access points.
	AllowedClients []AllowedClientInput `json:"allowedClients,omitempty"`
	// Labels as key value pairs.
	Labels map[string]string `json:"labels,omitempty"`
	// Immutable. The name of the NFS share.
	Name *string `json:"name,omitempty"`
	// The requested size, in GiB.
	RequestedSizeGib *string `json:"requestedSizeGib,omitempty"`
	// Immutable. The storage type of the underlying volume.
	StorageType *NfsShareStorageTypeEnum `json:"storageType,omitempty"`
}
