// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type RecordingAddOnResultEnumStatusEnum string

const (
	RecordingAddOnResultEnumStatusEnumCanceled   RecordingAddOnResultEnumStatusEnum = "canceled"
	RecordingAddOnResultEnumStatusEnumCompleted  RecordingAddOnResultEnumStatusEnum = "completed"
	RecordingAddOnResultEnumStatusEnumDeleted    RecordingAddOnResultEnumStatusEnum = "deleted"
	RecordingAddOnResultEnumStatusEnumFailed     RecordingAddOnResultEnumStatusEnum = "failed"
	RecordingAddOnResultEnumStatusEnumInProgress RecordingAddOnResultEnumStatusEnum = "in-progress"
	RecordingAddOnResultEnumStatusEnumInit       RecordingAddOnResultEnumStatusEnum = "init"
	RecordingAddOnResultEnumStatusEnumProcessing RecordingAddOnResultEnumStatusEnum = "processing"
	RecordingAddOnResultEnumStatusEnumQueued     RecordingAddOnResultEnumStatusEnum = "queued"
)

func (e RecordingAddOnResultEnumStatusEnum) ToPointer() *RecordingAddOnResultEnumStatusEnum {
	return &e
}

func (e *RecordingAddOnResultEnumStatusEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "canceled":
		fallthrough
	case "completed":
		fallthrough
	case "deleted":
		fallthrough
	case "failed":
		fallthrough
	case "in-progress":
		fallthrough
	case "init":
		fallthrough
	case "processing":
		fallthrough
	case "queued":
		*e = RecordingAddOnResultEnumStatusEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RecordingAddOnResultEnumStatusEnum: %v", v)
	}
}
