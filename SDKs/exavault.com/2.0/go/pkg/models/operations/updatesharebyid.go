// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"net/http"
	"openapi/pkg/models/shared"
	"time"
)

type UpdateShareByIDPathParams struct {
	// ID of the share entry
	ID int `pathParam:"style=simple,explode=false,name=id"`
}

type UpdateShareByIDHeaders struct {
	// Access Token
	EvAccessToken string `header:"style=simple,explode=false,name=ev-access-token"`
	// API Key
	EvAPIKey string `header:"style=simple,explode=false,name=ev-api-key"`
}

type UpdateShareByIDUpdateShareRequestBodyRecipients struct {
	// Email address of person you are inviting to the share
	Email *string `json:"email,omitempty"`
	// What kind of email should be sent to this recipient. Valid choices are **direct** and **cc**
	Type *string `json:"type,omitempty"`
}

type UpdateShareByIDUpdateShareRequestBody struct {
	// An object defining what a not-logged-in visitor can do with the share contents
	AccessMode *shared.AccessMode `json:"accessMode,omitempty"`
	// Whether the share can be embedded in another web page.
	Embed *bool `json:"embed,omitempty"`
	// New expiration date and time for the share
	Expiration *time.Time `json:"expiration,omitempty"`
	// Whether uploads to a receive folder should be automatically placed into subfolders. See our [receive folder documentation](/docs/account/05-file-sharing/05-form-builder#advanced-form-settings)
	FileDropCreateFolders *bool `json:"fileDropCreateFolders,omitempty"`
	// Whether delivery receipts should be sent for this share.
	HasNotification *bool `json:"hasNotification,omitempty"`
	// Whether people can visit the share without following a link from an invitation email
	IsPublic *bool `json:"isPublic,omitempty"`
	// Message content to use for emails inviting recipients to the share. Ignored if you have not also provided `recipients` and a `subject`
	MessageBody *string `json:"messageBody,omitempty"`
	// Subject to use on emails inviting recipients to the share. Ignored if you have not also provided `recipients` and a `message`
	MessageSubject *string `json:"messageSubject,omitempty"`
	// Name of the share.
	Name *string `json:"name,omitempty"`
	// List of email addresses to send delivery receipts to. Ignored if `hasNotification` is false.
	NotificationEmails []string `json:"notificationEmails,omitempty"`
	// New password for the share. To leave the password unchanged, do not send this parameter.
	Password *string `json:"password,omitempty"`
	// People you want to invite to the share.
	//
	// **Note**: unless you also set the `subject` and `message` for the new share, invitation emails will not be sent to these recipients.
	//
	// **Note**: Recipients in this list will **REPLACE** the recipients already assigned to this share.
	Recipients []UpdateShareByIDUpdateShareRequestBodyRecipients `json:"recipients,omitempty"`
	// Whether visitors to the share will be required to enter their email in order to access the share.
	RequireEmail *bool `json:"requireEmail,omitempty"`
	// Array of resources for this share. See details on [how to specify resources](#section/Identifying-Resources) above.
	//
	// **shared_folder** and **receive** shares must have only one `resource`, which is a directory that does not have a current share attached.
	//
	// **send** shares may have multiple `resource` parameters.
	//
	// **NOTE**: Sending this parameter will **REPLACE** the existing resources with the resources included in this request.
	Resources []string `json:"resources,omitempty"`
	// New status for the share. You can set an active share to inactive by setting the status to **0**
	Status *int64 `json:"status,omitempty"`
}

type UpdateShareByIDRequest struct {
	PathParams UpdateShareByIDPathParams
	Headers    UpdateShareByIDHeaders
	Request    UpdateShareByIDUpdateShareRequestBody `request:"mediaType=application/json"`
}

type UpdateShareByIDResponse struct {
	ContentType string
	// Successful operation
	ShareResponse *shared.ShareResponse
	StatusCode    int
	RawResponse   *http.Response
}
