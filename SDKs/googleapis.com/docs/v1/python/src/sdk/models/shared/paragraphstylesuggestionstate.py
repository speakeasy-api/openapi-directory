"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import shadingsuggestionstate as shared_shadingsuggestionstate
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ParagraphStyleSuggestionState:
    r"""A mask that indicates which of the fields on the base ParagraphStyle have been changed in this suggestion. For any field set to true, there's a new suggested value."""
    
    alignment_suggested: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('alignmentSuggested'), 'exclude': lambda f: f is None }})
    r"""Indicates if there was a suggested change to alignment."""  
    avoid_widow_and_orphan_suggested: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('avoidWidowAndOrphanSuggested'), 'exclude': lambda f: f is None }})
    r"""Indicates if there was a suggested change to avoid_widow_and_orphan."""  
    border_between_suggested: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('borderBetweenSuggested'), 'exclude': lambda f: f is None }})
    r"""Indicates if there was a suggested change to border_between."""  
    border_bottom_suggested: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('borderBottomSuggested'), 'exclude': lambda f: f is None }})
    r"""Indicates if there was a suggested change to border_bottom."""  
    border_left_suggested: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('borderLeftSuggested'), 'exclude': lambda f: f is None }})
    r"""Indicates if there was a suggested change to border_left."""  
    border_right_suggested: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('borderRightSuggested'), 'exclude': lambda f: f is None }})
    r"""Indicates if there was a suggested change to border_right."""  
    border_top_suggested: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('borderTopSuggested'), 'exclude': lambda f: f is None }})
    r"""Indicates if there was a suggested change to border_top."""  
    direction_suggested: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('directionSuggested'), 'exclude': lambda f: f is None }})
    r"""Indicates if there was a suggested change to direction."""  
    heading_id_suggested: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('headingIdSuggested'), 'exclude': lambda f: f is None }})
    r"""Indicates if there was a suggested change to heading_id."""  
    indent_end_suggested: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('indentEndSuggested'), 'exclude': lambda f: f is None }})
    r"""Indicates if there was a suggested change to indent_end."""  
    indent_first_line_suggested: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('indentFirstLineSuggested'), 'exclude': lambda f: f is None }})
    r"""Indicates if there was a suggested change to indent_first_line."""  
    indent_start_suggested: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('indentStartSuggested'), 'exclude': lambda f: f is None }})
    r"""Indicates if there was a suggested change to indent_start."""  
    keep_lines_together_suggested: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('keepLinesTogetherSuggested'), 'exclude': lambda f: f is None }})
    r"""Indicates if there was a suggested change to keep_lines_together."""  
    keep_with_next_suggested: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('keepWithNextSuggested'), 'exclude': lambda f: f is None }})
    r"""Indicates if there was a suggested change to keep_with_next."""  
    line_spacing_suggested: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lineSpacingSuggested'), 'exclude': lambda f: f is None }})
    r"""Indicates if there was a suggested change to line_spacing."""  
    named_style_type_suggested: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('namedStyleTypeSuggested'), 'exclude': lambda f: f is None }})
    r"""Indicates if there was a suggested change to named_style_type."""  
    page_break_before_suggested: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('pageBreakBeforeSuggested'), 'exclude': lambda f: f is None }})
    r"""Indicates if there was a suggested change to page_break_before."""  
    shading_suggestion_state: Optional[shared_shadingsuggestionstate.ShadingSuggestionState] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('shadingSuggestionState'), 'exclude': lambda f: f is None }})
    r"""A mask that indicates which of the fields on the base Shading have been changed in this suggested change. For any field set to true, there's a new suggested value."""  
    space_above_suggested: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('spaceAboveSuggested'), 'exclude': lambda f: f is None }})
    r"""Indicates if there was a suggested change to space_above."""  
    space_below_suggested: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('spaceBelowSuggested'), 'exclude': lambda f: f is None }})
    r"""Indicates if there was a suggested change to space_below."""  
    spacing_mode_suggested: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('spacingModeSuggested'), 'exclude': lambda f: f is None }})
    r"""Indicates if there was a suggested change to spacing_mode."""  
    