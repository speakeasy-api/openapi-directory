/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";

export class GetUserPermissionsRepositoriesSecurity extends SpeakeasyBase {
  @SpeakeasyMetadata({
    data: "security, scheme=true;type=apiKey;subtype=header;name=Authorization",
  })
  apiKey?: string;

  @SpeakeasyMetadata({ data: "security, scheme=true;type=http;subtype=basic" })
  basic?: shared.SchemeBasic;

  @SpeakeasyMetadata({
    data: "security, scheme=true;type=oauth2;name=Authorization",
  })
  oauth2?: string;
}

export class GetUserPermissionsRepositoriesRequest extends SpeakeasyBase {
  /**
   *
   * @remarks
   * Query string to narrow down the response as per
   * [filtering and sorting](/cloud/bitbucket/rest/intro/#filtering).
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=q" })
  q?: string;

  /**
   *
   * @remarks
   * Name of a response property sort the result by as per
   * [filtering and sorting](/cloud/bitbucket/rest/intro/#filtering).
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=sort" })
  sort?: string;
}

export class GetUserPermissionsRepositoriesResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * Repository permissions for the repositories a caller has explicit access to.
   */
  @SpeakeasyMetadata()
  paginatedRepositoryPermissions?: shared.PaginatedRepositoryPermissions;
}
