/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

public class ProxyGetUnitOfMeasure {
    /**
     *  Indicates if the UOM is available for new product rate plans. The default value is `true`.
     * **Character limit**: 5 **Values**: `true`, `false ` 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Active")
    public Boolean active;
    public ProxyGetUnitOfMeasure withActive(Boolean active) {
        this.active = active;
        return this;
    }
    
    /**
     *  The ID of the Zuora user who created the UOM.
     * **Character limit**: 32 **Values**: automatically generated 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("CreatedById")
    public String createdById;
    public ProxyGetUnitOfMeasure withCreatedById(String createdById) {
        this.createdById = createdById;
        return this;
    }
    
    /**
     *  The date when the UOM was created.
     * **Character limit**: 29 **Values**: automatically generated 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("CreatedDate")
    public OffsetDateTime createdDate;
    public ProxyGetUnitOfMeasure withCreatedDate(OffsetDateTime createdDate) {
        this.createdDate = createdDate;
        return this;
    }
    
    /**
     * The number of digits to the right of the decimal point that you want to measure for the unit. To use whole numbers only, set this value to 0. You can't change this value after this `UOM` is used in any product, subscription, or usage. **Character limit**: 1 **Values**: an integer between 0 and 9, exclusive 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("DecimalPlaces")
    public Long decimalPlaces;
    public ProxyGetUnitOfMeasure withDecimalPlaces(Long decimalPlaces) {
        this.decimalPlaces = decimalPlaces;
        return this;
    }
    
    /**
     * The name of the UOM that you want displayed on invoices. The default value is the `UomName` field value. **Character limit**: 50 **Values**: A string of 50 characters or fewer 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("DisplayedAs")
    public String displayedAs;
    public ProxyGetUnitOfMeasure withDisplayedAs(String displayedAs) {
        this.displayedAs = displayedAs;
        return this;
    }
    
    /**
     * Object identifier.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Id")
    public String id;
    public ProxyGetUnitOfMeasure withId(String id) {
        this.id = id;
        return this;
    }
    
    /**
     *  Specifies whether to round the UOM value up or down when the value exceeds the `DecimalPlaces` field value. The default value is `Up`.
     * **Character limit**: 4 **Values**: `Up`, `Down` 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("RoundingMode")
    public String roundingMode;
    public ProxyGetUnitOfMeasure withRoundingMode(String roundingMode) {
        this.roundingMode = roundingMode;
        return this;
    }
    
    /**
     *  The name of the UOM, such as license or GB. This name is displayed in query results and in the web-based UI labels. If you want a different name to be displayed on invoices, then use the `DisplayedAs` field to provide the invoice label.
     * **Character limit**: 50 **Values**: a string of 50 characters or fewer 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("UomName")
    public String uomName;
    public ProxyGetUnitOfMeasure withUomName(String uomName) {
        this.uomName = uomName;
        return this;
    }
    
    /**
     * The ID of the user who lasted updated the UOM. **Character limit**: 32 **Values**: automatically generated 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("UpdatedById")
    public String updatedById;
    public ProxyGetUnitOfMeasure withUpdatedById(String updatedById) {
        this.updatedById = updatedById;
        return this;
    }
    
    /**
     *  The date when the UOM was last updated.
     * **Character limit**: 29 **Values**: automatically generated 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("UpdatedDate")
    public OffsetDateTime updatedDate;
    public ProxyGetUnitOfMeasure withUpdatedDate(OffsetDateTime updatedDate) {
        this.updatedDate = updatedDate;
        return this;
    }
    
}
