<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Projects 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Create a DataAttributeBinding resource.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsDataAttributeBindingsCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsDataAttributeBindingsCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsDataAttributeBindingsCreateResponse
     */
	public function dataplexProjectsLocationsDataAttributeBindingsCreate(
        \OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsDataAttributeBindingsCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsDataAttributeBindingsCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsDataAttributeBindingsCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}/dataAttributeBindings', \OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsDataAttributeBindingsCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googleCloudDataplexV1DataAttributeBindingInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsDataAttributeBindingsCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsDataAttributeBindingsCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleLongrunningOperation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleLongrunningOperation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists DataAttributeBinding resources in a project and location.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsDataAttributeBindingsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsDataAttributeBindingsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsDataAttributeBindingsListResponse
     */
	public function dataplexProjectsLocationsDataAttributeBindingsList(
        \OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsDataAttributeBindingsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsDataAttributeBindingsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsDataAttributeBindingsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}/dataAttributeBindings', \OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsDataAttributeBindingsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsDataAttributeBindingsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsDataAttributeBindingsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleCloudDataplexV1ListDataAttributeBindingsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleCloudDataplexV1ListDataAttributeBindingsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a DataScan resource.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsDataScansCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsDataScansCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsDataScansCreateResponse
     */
	public function dataplexProjectsLocationsDataScansCreate(
        \OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsDataScansCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsDataScansCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsDataScansCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}/dataScans', \OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsDataScansCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googleCloudDataplexV1DataScanInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsDataScansCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsDataScansCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleLongrunningOperation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleLongrunningOperation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists DataScans.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsDataScansListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsDataScansListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsDataScansListResponse
     */
	public function dataplexProjectsLocationsDataScansList(
        \OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsDataScansListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsDataScansListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsDataScansListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}/dataScans', \OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsDataScansListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsDataScansListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsDataScansListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleCloudDataplexV1ListDataScansResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleCloudDataplexV1ListDataScansResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create a DataAttribute resource.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsDataTaxonomiesAttributesCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsDataTaxonomiesAttributesCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsDataTaxonomiesAttributesCreateResponse
     */
	public function dataplexProjectsLocationsDataTaxonomiesAttributesCreate(
        \OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsDataTaxonomiesAttributesCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsDataTaxonomiesAttributesCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsDataTaxonomiesAttributesCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}/attributes', \OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsDataTaxonomiesAttributesCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googleCloudDataplexV1DataAttributeInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsDataTaxonomiesAttributesCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsDataTaxonomiesAttributesCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleLongrunningOperation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleLongrunningOperation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists Data Attribute resources in a DataTaxonomy.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsDataTaxonomiesAttributesListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsDataTaxonomiesAttributesListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsDataTaxonomiesAttributesListResponse
     */
	public function dataplexProjectsLocationsDataTaxonomiesAttributesList(
        \OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsDataTaxonomiesAttributesListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsDataTaxonomiesAttributesListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsDataTaxonomiesAttributesListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}/attributes', \OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsDataTaxonomiesAttributesListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsDataTaxonomiesAttributesListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsDataTaxonomiesAttributesListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleCloudDataplexV1ListDataAttributesResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleCloudDataplexV1ListDataAttributesResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create a DataTaxonomy resource.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsDataTaxonomiesCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsDataTaxonomiesCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsDataTaxonomiesCreateResponse
     */
	public function dataplexProjectsLocationsDataTaxonomiesCreate(
        \OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsDataTaxonomiesCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsDataTaxonomiesCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsDataTaxonomiesCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}/dataTaxonomies', \OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsDataTaxonomiesCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googleCloudDataplexV1DataTaxonomyInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsDataTaxonomiesCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsDataTaxonomiesCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleLongrunningOperation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleLongrunningOperation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists DataTaxonomy resources in a project and location.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsDataTaxonomiesListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsDataTaxonomiesListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsDataTaxonomiesListResponse
     */
	public function dataplexProjectsLocationsDataTaxonomiesList(
        \OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsDataTaxonomiesListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsDataTaxonomiesListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsDataTaxonomiesListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}/dataTaxonomies', \OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsDataTaxonomiesListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsDataTaxonomiesListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsDataTaxonomiesListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleCloudDataplexV1ListDataTaxonomiesResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleCloudDataplexV1ListDataTaxonomiesResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create a content.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsLakesContentCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsLakesContentCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsLakesContentCreateResponse
     */
	public function dataplexProjectsLocationsLakesContentCreate(
        \OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsLakesContentCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsLakesContentCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsLakesContentCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}/content', \OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsLakesContentCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googleCloudDataplexV1ContentInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsLakesContentCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsLakesContentCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleCloudDataplexV1Content = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleCloudDataplexV1Content', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List content.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsLakesContentListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsLakesContentListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsLakesContentListResponse
     */
	public function dataplexProjectsLocationsLakesContentList(
        \OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsLakesContentListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsLakesContentListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsLakesContentListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}/content', \OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsLakesContentListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsLakesContentListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsLakesContentListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleCloudDataplexV1ListContentResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleCloudDataplexV1ListContentResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create a content.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsLakesContentitemsCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsLakesContentitemsCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsLakesContentitemsCreateResponse
     */
	public function dataplexProjectsLocationsLakesContentitemsCreate(
        \OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsLakesContentitemsCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsLakesContentitemsCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsLakesContentitemsCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}/contentitems', \OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsLakesContentitemsCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googleCloudDataplexV1ContentInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsLakesContentitemsCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsLakesContentitemsCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleCloudDataplexV1Content = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleCloudDataplexV1Content', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List content.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsLakesContentitemsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsLakesContentitemsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsLakesContentitemsListResponse
     */
	public function dataplexProjectsLocationsLakesContentitemsList(
        \OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsLakesContentitemsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsLakesContentitemsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsLakesContentitemsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}/contentitems', \OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsLakesContentitemsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsLakesContentitemsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsLakesContentitemsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleCloudDataplexV1ListContentResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleCloudDataplexV1ListContentResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a lake resource.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsLakesCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsLakesCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsLakesCreateResponse
     */
	public function dataplexProjectsLocationsLakesCreate(
        \OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsLakesCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsLakesCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsLakesCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}/lakes', \OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsLakesCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googleCloudDataplexV1LakeInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsLakesCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsLakesCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleLongrunningOperation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleLongrunningOperation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create an environment resource.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsLakesEnvironmentsCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsLakesEnvironmentsCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsLakesEnvironmentsCreateResponse
     */
	public function dataplexProjectsLocationsLakesEnvironmentsCreate(
        \OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsLakesEnvironmentsCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsLakesEnvironmentsCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsLakesEnvironmentsCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}/environments', \OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsLakesEnvironmentsCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googleCloudDataplexV1EnvironmentInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsLakesEnvironmentsCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsLakesEnvironmentsCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleLongrunningOperation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleLongrunningOperation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists environments under the given lake.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsLakesEnvironmentsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsLakesEnvironmentsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsLakesEnvironmentsListResponse
     */
	public function dataplexProjectsLocationsLakesEnvironmentsList(
        \OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsLakesEnvironmentsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsLakesEnvironmentsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsLakesEnvironmentsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}/environments', \OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsLakesEnvironmentsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsLakesEnvironmentsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsLakesEnvironmentsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleCloudDataplexV1ListEnvironmentsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleCloudDataplexV1ListEnvironmentsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists session resources in an environment.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsLakesEnvironmentsSessionsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsLakesEnvironmentsSessionsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsLakesEnvironmentsSessionsListResponse
     */
	public function dataplexProjectsLocationsLakesEnvironmentsSessionsList(
        \OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsLakesEnvironmentsSessionsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsLakesEnvironmentsSessionsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsLakesEnvironmentsSessionsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}/sessions', \OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsLakesEnvironmentsSessionsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsLakesEnvironmentsSessionsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsLakesEnvironmentsSessionsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleCloudDataplexV1ListSessionsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleCloudDataplexV1ListSessionsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists lake resources in a project and location.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsLakesListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsLakesListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsLakesListResponse
     */
	public function dataplexProjectsLocationsLakesList(
        \OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsLakesListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsLakesListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsLakesListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}/lakes', \OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsLakesListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsLakesListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsLakesListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleCloudDataplexV1ListLakesResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleCloudDataplexV1ListLakesResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a task resource within a lake.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsLakesTasksCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsLakesTasksCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsLakesTasksCreateResponse
     */
	public function dataplexProjectsLocationsLakesTasksCreate(
        \OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsLakesTasksCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsLakesTasksCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsLakesTasksCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}/tasks', \OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsLakesTasksCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googleCloudDataplexV1TaskInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsLakesTasksCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsLakesTasksCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleLongrunningOperation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleLongrunningOperation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists Jobs under the given task.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsLakesTasksJobsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsLakesTasksJobsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsLakesTasksJobsListResponse
     */
	public function dataplexProjectsLocationsLakesTasksJobsList(
        \OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsLakesTasksJobsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsLakesTasksJobsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsLakesTasksJobsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}/jobs', \OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsLakesTasksJobsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsLakesTasksJobsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsLakesTasksJobsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleCloudDataplexV1ListJobsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleCloudDataplexV1ListJobsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists tasks under the given lake.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsLakesTasksListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsLakesTasksListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsLakesTasksListResponse
     */
	public function dataplexProjectsLocationsLakesTasksList(
        \OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsLakesTasksListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsLakesTasksListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsLakesTasksListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}/tasks', \OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsLakesTasksListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsLakesTasksListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsLakesTasksListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleCloudDataplexV1ListTasksResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleCloudDataplexV1ListTasksResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Run an on demand execution of a Task.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsLakesTasksRunRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsLakesTasksRunSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsLakesTasksRunResponse
     */
	public function dataplexProjectsLocationsLakesTasksRun(
        \OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsLakesTasksRunRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsLakesTasksRunSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsLakesTasksRunResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{name}:run', \OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsLakesTasksRunRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsLakesTasksRunRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsLakesTasksRunResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleCloudDataplexV1RunTaskResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleCloudDataplexV1RunTaskResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists action resources in an asset.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsLakesZonesAssetsActionsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsLakesZonesAssetsActionsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsLakesZonesAssetsActionsListResponse
     */
	public function dataplexProjectsLocationsLakesZonesAssetsActionsList(
        \OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsLakesZonesAssetsActionsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsLakesZonesAssetsActionsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsLakesZonesAssetsActionsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}/actions', \OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsLakesZonesAssetsActionsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsLakesZonesAssetsActionsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsLakesZonesAssetsActionsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleCloudDataplexV1ListActionsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleCloudDataplexV1ListActionsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates an asset resource.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsLakesZonesAssetsCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsLakesZonesAssetsCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsLakesZonesAssetsCreateResponse
     */
	public function dataplexProjectsLocationsLakesZonesAssetsCreate(
        \OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsLakesZonesAssetsCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsLakesZonesAssetsCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsLakesZonesAssetsCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}/assets', \OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsLakesZonesAssetsCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googleCloudDataplexV1AssetInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsLakesZonesAssetsCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsLakesZonesAssetsCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleLongrunningOperation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleLongrunningOperation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsLakesZonesAssetsGetIamPolicyRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsLakesZonesAssetsGetIamPolicySecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsLakesZonesAssetsGetIamPolicyResponse
     */
	public function dataplexProjectsLocationsLakesZonesAssetsGetIamPolicy(
        \OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsLakesZonesAssetsGetIamPolicyRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsLakesZonesAssetsGetIamPolicySecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsLakesZonesAssetsGetIamPolicyResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{resource}:getIamPolicy', \OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsLakesZonesAssetsGetIamPolicyRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsLakesZonesAssetsGetIamPolicyRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsLakesZonesAssetsGetIamPolicyResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleIamV1Policy = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleIamV1Policy', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists asset resources in a zone.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsLakesZonesAssetsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsLakesZonesAssetsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsLakesZonesAssetsListResponse
     */
	public function dataplexProjectsLocationsLakesZonesAssetsList(
        \OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsLakesZonesAssetsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsLakesZonesAssetsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsLakesZonesAssetsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}/assets', \OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsLakesZonesAssetsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsLakesZonesAssetsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsLakesZonesAssetsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleCloudDataplexV1ListAssetsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleCloudDataplexV1ListAssetsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates an asset resource.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsLakesZonesAssetsPatchRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsLakesZonesAssetsPatchSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsLakesZonesAssetsPatchResponse
     */
	public function dataplexProjectsLocationsLakesZonesAssetsPatch(
        \OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsLakesZonesAssetsPatchRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsLakesZonesAssetsPatchSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsLakesZonesAssetsPatchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{name}', \OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsLakesZonesAssetsPatchRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googleCloudDataplexV1AssetInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsLakesZonesAssetsPatchRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsLakesZonesAssetsPatchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleLongrunningOperation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleLongrunningOperation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Sets the access control policy on the specified resource. Replaces any existing policy.Can return NOT_FOUND, INVALID_ARGUMENT, and PERMISSION_DENIED errors.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsLakesZonesAssetsSetIamPolicyRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsLakesZonesAssetsSetIamPolicySecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsLakesZonesAssetsSetIamPolicyResponse
     */
	public function dataplexProjectsLocationsLakesZonesAssetsSetIamPolicy(
        \OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsLakesZonesAssetsSetIamPolicyRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsLakesZonesAssetsSetIamPolicySecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsLakesZonesAssetsSetIamPolicyResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{resource}:setIamPolicy', \OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsLakesZonesAssetsSetIamPolicyRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googleIamV1SetIamPolicyRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsLakesZonesAssetsSetIamPolicyRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsLakesZonesAssetsSetIamPolicyResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleIamV1Policy = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleIamV1Policy', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a NOT_FOUND error.Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsLakesZonesAssetsTestIamPermissionsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsLakesZonesAssetsTestIamPermissionsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsLakesZonesAssetsTestIamPermissionsResponse
     */
	public function dataplexProjectsLocationsLakesZonesAssetsTestIamPermissions(
        \OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsLakesZonesAssetsTestIamPermissionsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsLakesZonesAssetsTestIamPermissionsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsLakesZonesAssetsTestIamPermissionsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{resource}:testIamPermissions', \OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsLakesZonesAssetsTestIamPermissionsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googleIamV1TestIamPermissionsRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsLakesZonesAssetsTestIamPermissionsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsLakesZonesAssetsTestIamPermissionsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleIamV1TestIamPermissionsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleIamV1TestIamPermissionsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a zone resource within a lake.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsLakesZonesCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsLakesZonesCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsLakesZonesCreateResponse
     */
	public function dataplexProjectsLocationsLakesZonesCreate(
        \OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsLakesZonesCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsLakesZonesCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsLakesZonesCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}/zones', \OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsLakesZonesCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googleCloudDataplexV1ZoneInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsLakesZonesCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsLakesZonesCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleLongrunningOperation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleLongrunningOperation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create a metadata entity.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsLakesZonesEntitiesCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsLakesZonesEntitiesCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsLakesZonesEntitiesCreateResponse
     */
	public function dataplexProjectsLocationsLakesZonesEntitiesCreate(
        \OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsLakesZonesEntitiesCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsLakesZonesEntitiesCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsLakesZonesEntitiesCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}/entities', \OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsLakesZonesEntitiesCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googleCloudDataplexV1EntityInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsLakesZonesEntitiesCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsLakesZonesEntitiesCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleCloudDataplexV1Entity = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleCloudDataplexV1Entity', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List metadata entities in a zone.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsLakesZonesEntitiesListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsLakesZonesEntitiesListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsLakesZonesEntitiesListResponse
     */
	public function dataplexProjectsLocationsLakesZonesEntitiesList(
        \OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsLakesZonesEntitiesListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsLakesZonesEntitiesListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsLakesZonesEntitiesListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}/entities', \OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsLakesZonesEntitiesListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsLakesZonesEntitiesListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsLakesZonesEntitiesListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleCloudDataplexV1ListEntitiesResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleCloudDataplexV1ListEntitiesResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create a metadata partition.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsLakesZonesEntitiesPartitionsCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsLakesZonesEntitiesPartitionsCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsLakesZonesEntitiesPartitionsCreateResponse
     */
	public function dataplexProjectsLocationsLakesZonesEntitiesPartitionsCreate(
        \OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsLakesZonesEntitiesPartitionsCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsLakesZonesEntitiesPartitionsCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsLakesZonesEntitiesPartitionsCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}/partitions', \OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsLakesZonesEntitiesPartitionsCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googleCloudDataplexV1PartitionInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsLakesZonesEntitiesPartitionsCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsLakesZonesEntitiesPartitionsCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleCloudDataplexV1Partition = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleCloudDataplexV1Partition', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List metadata partitions of an entity.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsLakesZonesEntitiesPartitionsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsLakesZonesEntitiesPartitionsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsLakesZonesEntitiesPartitionsListResponse
     */
	public function dataplexProjectsLocationsLakesZonesEntitiesPartitionsList(
        \OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsLakesZonesEntitiesPartitionsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsLakesZonesEntitiesPartitionsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsLakesZonesEntitiesPartitionsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}/partitions', \OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsLakesZonesEntitiesPartitionsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsLakesZonesEntitiesPartitionsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsLakesZonesEntitiesPartitionsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleCloudDataplexV1ListPartitionsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleCloudDataplexV1ListPartitionsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update a metadata entity. Only supports full resource update.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsLakesZonesEntitiesUpdateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsLakesZonesEntitiesUpdateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsLakesZonesEntitiesUpdateResponse
     */
	public function dataplexProjectsLocationsLakesZonesEntitiesUpdate(
        \OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsLakesZonesEntitiesUpdateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsLakesZonesEntitiesUpdateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsLakesZonesEntitiesUpdateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{name}', \OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsLakesZonesEntitiesUpdateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googleCloudDataplexV1EntityInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsLakesZonesEntitiesUpdateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsLakesZonesEntitiesUpdateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleCloudDataplexV1Entity = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleCloudDataplexV1Entity', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists zone resources in a lake.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsLakesZonesListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsLakesZonesListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsLakesZonesListResponse
     */
	public function dataplexProjectsLocationsLakesZonesList(
        \OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsLakesZonesListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsLakesZonesListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsLakesZonesListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}/zones', \OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsLakesZonesListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsLakesZonesListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsLakesZonesListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleCloudDataplexV1ListZonesResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleCloudDataplexV1ListZonesResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists information about the supported locations for this service.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsListResponse
     */
	public function dataplexProjectsLocationsList(
        \OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{name}/locations', \OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleCloudLocationListLocationsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleCloudLocationListLocationsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns google.rpc.Code.UNIMPLEMENTED. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to Code.CANCELLED.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsOperationsCancelRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsOperationsCancelSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsOperationsCancelResponse
     */
	public function dataplexProjectsLocationsOperationsCancel(
        \OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsOperationsCancelRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsOperationsCancelSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsOperationsCancelResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{name}:cancel', \OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsOperationsCancelRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsOperationsCancelRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsOperationsCancelResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->empty = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Deletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn't support this method, it returns google.rpc.Code.UNIMPLEMENTED.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsOperationsDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsOperationsDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsOperationsDeleteResponse
     */
	public function dataplexProjectsLocationsOperationsDelete(
        \OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsOperationsDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsOperationsDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsOperationsDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{name}', \OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsOperationsDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsOperationsDeleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsOperationsDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->empty = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsOperationsGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsOperationsGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsOperationsGetResponse
     */
	public function dataplexProjectsLocationsOperationsGet(
        \OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsOperationsGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsOperationsGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsOperationsGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{name}', \OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsOperationsGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsOperationsGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsOperationsGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleLongrunningOperation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleLongrunningOperation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns UNIMPLEMENTED.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsOperationsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsOperationsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsOperationsListResponse
     */
	public function dataplexProjectsLocationsOperationsList(
        \OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsOperationsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsOperationsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsOperationsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{name}/operations', \OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsOperationsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsOperationsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DataplexProjectsLocationsOperationsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleLongrunningListOperationsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleLongrunningListOperationsResponse', 'json');
            }
        }

        return $response;
    }
}