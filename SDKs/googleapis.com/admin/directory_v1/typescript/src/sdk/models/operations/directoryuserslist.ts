/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";

export class DirectoryUsersListSecurityOption1 extends SpeakeasyBase {
  @SpeakeasyMetadata({
    data: "security, scheme=true;type=oauth2;name=Authorization",
  })
  oauth2: string;

  @SpeakeasyMetadata({
    data: "security, scheme=true;type=oauth2;name=Authorization",
  })
  oauth2c: string;
}

export class DirectoryUsersListSecurityOption2 extends SpeakeasyBase {
  @SpeakeasyMetadata({
    data: "security, scheme=true;type=oauth2;name=Authorization",
  })
  oauth2: string;

  @SpeakeasyMetadata({
    data: "security, scheme=true;type=oauth2;name=Authorization",
  })
  oauth2c: string;
}

export class DirectoryUsersListSecurityOption3 extends SpeakeasyBase {
  @SpeakeasyMetadata({
    data: "security, scheme=true;type=oauth2;name=Authorization",
  })
  oauth2: string;

  @SpeakeasyMetadata({
    data: "security, scheme=true;type=oauth2;name=Authorization",
  })
  oauth2c: string;
}

export class DirectoryUsersListSecurity extends SpeakeasyBase {
  @SpeakeasyMetadata({ data: "security, option=true" })
  option1?: DirectoryUsersListSecurityOption1;

  @SpeakeasyMetadata({ data: "security, option=true" })
  option2?: DirectoryUsersListSecurityOption2;

  @SpeakeasyMetadata({ data: "security, option=true" })
  option3?: DirectoryUsersListSecurityOption3;
}

/**
 * Event on which subscription is intended (if subscribing)
 */
export enum DirectoryUsersListEventEnum {
  Add = "add",
  Delete = "delete",
  MakeAdmin = "makeAdmin",
  Undelete = "undelete",
  Update = "update",
}

/**
 * Property to use for sorting results.
 */
export enum DirectoryUsersListOrderByEnum {
  Email = "email",
  FamilyName = "familyName",
  GivenName = "givenName",
}

/**
 * What subset of fields to fetch for this user.
 */
export enum DirectoryUsersListProjectionEnum {
  Basic = "basic",
  Custom = "custom",
  Full = "full",
}

/**
 * Whether to return results in ascending or descending order, ignoring case.
 */
export enum DirectoryUsersListSortOrderEnum {
  Ascending = "ASCENDING",
  Descending = "DESCENDING",
}

/**
 * Whether to fetch the administrator-only or domain-wide public view of the user. For more information, see [Retrieve a user as a non-administrator](/admin-sdk/directory/v1/guides/manage-users#retrieve_users_non_admin).
 */
export enum DirectoryUsersListViewTypeEnum {
  AdminView = "admin_view",
  DomainPublic = "domain_public",
}

export class DirectoryUsersListRequest extends SpeakeasyBase {
  /**
   * V1 error format.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=$.xgafv",
  })
  dollarXgafv?: shared.XgafvEnum;

  /**
   * OAuth access token.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=access_token",
  })
  accessToken?: string;

  /**
   * Data format for response.
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=alt" })
  alt?: shared.AltEnum;

  /**
   * JSONP
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=callback",
  })
  callback?: string;

  /**
   * A comma-separated list of schema names. All fields from these schemas are fetched. This should only be set when `projection=custom`.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=customFieldMask",
  })
  customFieldMask?: string;

  /**
   * The unique ID for the customer's Google Workspace account. In case of a multi-domain account, to fetch all groups for a customer, use this field instead of `domain`. You can also use the `my_customer` alias to represent your account's `customerId`. The `customerId` is also returned as part of the [Users](/admin-sdk/directory/v1/reference/users) resource. You must provide either the `customer` or the `domain` parameter.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=customer",
  })
  customer?: string;

  /**
   * The domain name. Use this field to get groups from only one domain. To return all domains for a customer account, use the `customer` query parameter instead. Either the `customer` or the `domain` parameter must be provided.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=domain",
  })
  domain?: string;

  /**
   * Event on which subscription is intended (if subscribing)
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=event" })
  event?: DirectoryUsersListEventEnum;

  /**
   * Selector specifying which fields to include in a partial response.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=fields",
  })
  fields?: string;

  /**
   * API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=key" })
  key?: string;

  /**
   * Maximum number of results to return.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=maxResults",
  })
  maxResults?: number;

  /**
   * OAuth 2.0 token for the current user.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=oauth_token",
  })
  oauthToken?: string;

  /**
   * Property to use for sorting results.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=orderBy",
  })
  orderBy?: DirectoryUsersListOrderByEnum;

  /**
   * Token to specify next page in the list
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=pageToken",
  })
  pageToken?: string;

  /**
   * Returns response with indentations and line breaks.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=prettyPrint",
  })
  prettyPrint?: boolean;

  /**
   * What subset of fields to fetch for this user.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=projection",
  })
  projection?: DirectoryUsersListProjectionEnum;

  /**
   * Query string for searching user fields. For more information on constructing user queries, see [Search for Users](/admin-sdk/directory/v1/guides/search-users).
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=query" })
  query?: string;

  /**
   * Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=quotaUser",
  })
  quotaUser?: string;

  /**
   * If set to `true`, retrieves the list of deleted users. (Default: `false`)
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=showDeleted",
  })
  showDeleted?: string;

  /**
   * Whether to return results in ascending or descending order, ignoring case.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=sortOrder",
  })
  sortOrder?: DirectoryUsersListSortOrderEnum;

  /**
   * Legacy upload protocol for media (e.g. "media", "multipart").
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=uploadType",
  })
  uploadType?: string;

  /**
   * Upload protocol for media (e.g. "raw", "multipart").
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=upload_protocol",
  })
  uploadProtocol?: string;

  /**
   * Whether to fetch the administrator-only or domain-wide public view of the user. For more information, see [Retrieve a user as a non-administrator](/admin-sdk/directory/v1/guides/manage-users#retrieve_users_non_admin).
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=viewType",
  })
  viewType?: DirectoryUsersListViewTypeEnum;
}

export class DirectoryUsersListResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * Successful response
   */
  @SpeakeasyMetadata()
  users?: shared.Users;
}
