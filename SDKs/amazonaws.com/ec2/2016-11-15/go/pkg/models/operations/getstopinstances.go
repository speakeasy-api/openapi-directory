// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// GETStopInstancesActionEnum
type GETStopInstancesActionEnum string

const (
	GETStopInstancesActionEnumStopInstances GETStopInstancesActionEnum = "StopInstances"
)

func (e GETStopInstancesActionEnum) ToPointer() *GETStopInstancesActionEnum {
	return &e
}

func (e *GETStopInstancesActionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "StopInstances":
		*e = GETStopInstancesActionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GETStopInstancesActionEnum: %v", v)
	}
}

// GETStopInstancesVersionEnum
type GETStopInstancesVersionEnum string

const (
	GETStopInstancesVersionEnumTwoThousandAndSixteen1115 GETStopInstancesVersionEnum = "2016-11-15"
)

func (e GETStopInstancesVersionEnum) ToPointer() *GETStopInstancesVersionEnum {
	return &e
}

func (e *GETStopInstancesVersionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "2016-11-15":
		*e = GETStopInstancesVersionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GETStopInstancesVersionEnum: %v", v)
	}
}

type GETStopInstancesRequest struct {
	Action GETStopInstancesActionEnum `queryParam:"style=form,explode=true,name=Action"`
	// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
	DryRun *bool `queryParam:"style=form,explode=true,name=DryRun"`
	// <p>Forces the instances to stop. The instances do not have an opportunity to flush file system caches or file system metadata. If you use this option, you must perform file system check and repair procedures. This option is not recommended for Windows instances.</p> <p>Default: <code>false</code> </p>
	Force *bool `queryParam:"style=form,explode=true,name=Force"`
	// <p>Hibernates the instance if the instance was enabled for hibernation at launch. If the instance cannot hibernate successfully, a normal shutdown occurs. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Hibernate.html">Hibernate your instance</a> in the <i>Amazon EC2 User Guide</i>.</p> <p> Default: <code>false</code> </p>
	Hibernate *bool `queryParam:"style=form,explode=true,name=Hibernate"`
	// The IDs of the instances.
	InstanceID        []string                    `queryParam:"style=form,explode=true,name=InstanceId"`
	Version           GETStopInstancesVersionEnum `queryParam:"style=form,explode=true,name=Version"`
	XAmzAlgorithm     *string                     `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string                     `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string                     `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string                     `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string                     `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string                     `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string                     `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
}

type GETStopInstancesResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
