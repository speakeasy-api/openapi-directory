/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * AnnotateTextRequest - The request message for the text annotation API, which can perform multiple analysis types (sentiment, entities, and syntax) in one call.
 */
public class AnnotateTextRequest {
    /**
     * Represents the input to API methods.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("document")
    public Document document;

    public AnnotateTextRequest withDocument(Document document) {
        this.document = document;
        return this;
    }
    
    /**
     * The encoding type used by the API to calculate offsets.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("encodingType")
    public AnnotateTextRequestEncodingTypeEnum encodingType;

    public AnnotateTextRequest withEncodingType(AnnotateTextRequestEncodingTypeEnum encodingType) {
        this.encodingType = encodingType;
        return this;
    }
    
    /**
     * All available features for sentiment, syntax, and semantic analysis. Setting each one to true will enable that specific analysis for the input. Next ID: 12
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("features")
    public Features features;

    public AnnotateTextRequest withFeatures(Features features) {
        this.features = features;
        return this;
    }
    
    public AnnotateTextRequest(){}
}
