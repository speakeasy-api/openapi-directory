/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";

/**
 * The current state of the gateway association.
 */
export enum CreateVpnConnectionResultVpnConnectionGatewayAssociationStateEnum {
  Associated = "associated",
  NotAssociated = "not-associated",
  Associating = "associating",
  Disassociating = "disassociating",
}

/**
 * Indicates whether the VPN tunnels process IPv4 or IPv6 traffic.
 */
export enum CreateVpnConnectionResultVpnConnectionOptionsTunnelInsideIpVersionEnum {
  Ipv4 = "ipv4",
  Ipv6 = "ipv6",
}

/**
 * The internet key exchange (IKE) version permitted for the VPN tunnel.
 */
export class CreateVpnConnectionResultVpnConnectionOptionsTunnelOptionsIkeVersions extends SpeakeasyBase {
  @SpeakeasyMetadata()
  value?: string;
}

/**
 * Options for sending VPN tunnel logs to CloudWatch.
 */
export class CreateVpnConnectionResultVpnConnectionOptionsTunnelOptionsLogOptionsCloudWatchLogOptions extends SpeakeasyBase {
  @SpeakeasyMetadata()
  logEnabled?: boolean;

  @SpeakeasyMetadata()
  logGroupArn?: string;

  @SpeakeasyMetadata()
  logOutputFormat?: string;
}

/**
 * Options for logging VPN tunnel activity.
 */
export class CreateVpnConnectionResultVpnConnectionOptionsTunnelOptionsLogOptions extends SpeakeasyBase {
  @SpeakeasyMetadata()
  cloudWatchLogOptions?: CreateVpnConnectionResultVpnConnectionOptionsTunnelOptionsLogOptionsCloudWatchLogOptions;
}

/**
 * The Diffie-Hellmann group number for phase 1 IKE negotiations.
 */
export class CreateVpnConnectionResultVpnConnectionOptionsTunnelOptionsPhase1DHGroupNumbers extends SpeakeasyBase {
  @SpeakeasyMetadata()
  value?: number;
}

/**
 * The encryption algorithm for phase 1 IKE negotiations.
 */
export class CreateVpnConnectionResultVpnConnectionOptionsTunnelOptionsPhase1EncryptionAlgorithms extends SpeakeasyBase {
  @SpeakeasyMetadata()
  value?: string;
}

/**
 * The integrity algorithm for phase 1 IKE negotiations.
 */
export class CreateVpnConnectionResultVpnConnectionOptionsTunnelOptionsPhase1IntegrityAlgorithms extends SpeakeasyBase {
  @SpeakeasyMetadata()
  value?: string;
}

/**
 * The Diffie-Hellmann group number for phase 2 IKE negotiations.
 */
export class CreateVpnConnectionResultVpnConnectionOptionsTunnelOptionsPhase2DHGroupNumbers extends SpeakeasyBase {
  @SpeakeasyMetadata()
  value?: number;
}

/**
 * The encryption algorithm for phase 2 IKE negotiations.
 */
export class CreateVpnConnectionResultVpnConnectionOptionsTunnelOptionsPhase2EncryptionAlgorithms extends SpeakeasyBase {
  @SpeakeasyMetadata()
  value?: string;
}

/**
 * The integrity algorithm for phase 2 IKE negotiations.
 */
export class CreateVpnConnectionResultVpnConnectionOptionsTunnelOptionsPhase2IntegrityAlgorithms extends SpeakeasyBase {
  @SpeakeasyMetadata()
  value?: string;
}

/**
 * The VPN tunnel options.
 */
export class CreateVpnConnectionResultVpnConnectionOptionsTunnelOptions extends SpeakeasyBase {
  @SpeakeasyMetadata()
  dpdTimeoutAction?: string;

  @SpeakeasyMetadata()
  dpdTimeoutSeconds?: number;

  @SpeakeasyMetadata({
    elemType:
      CreateVpnConnectionResultVpnConnectionOptionsTunnelOptionsIkeVersions,
  })
  ikeVersions?: CreateVpnConnectionResultVpnConnectionOptionsTunnelOptionsIkeVersions[];

  @SpeakeasyMetadata()
  logOptions?: CreateVpnConnectionResultVpnConnectionOptionsTunnelOptionsLogOptions;

  @SpeakeasyMetadata()
  outsideIpAddress?: string;

  @SpeakeasyMetadata({
    elemType:
      CreateVpnConnectionResultVpnConnectionOptionsTunnelOptionsPhase1DHGroupNumbers,
  })
  phase1DHGroupNumbers?: CreateVpnConnectionResultVpnConnectionOptionsTunnelOptionsPhase1DHGroupNumbers[];

  @SpeakeasyMetadata({
    elemType:
      CreateVpnConnectionResultVpnConnectionOptionsTunnelOptionsPhase1EncryptionAlgorithms,
  })
  phase1EncryptionAlgorithms?: CreateVpnConnectionResultVpnConnectionOptionsTunnelOptionsPhase1EncryptionAlgorithms[];

  @SpeakeasyMetadata({
    elemType:
      CreateVpnConnectionResultVpnConnectionOptionsTunnelOptionsPhase1IntegrityAlgorithms,
  })
  phase1IntegrityAlgorithms?: CreateVpnConnectionResultVpnConnectionOptionsTunnelOptionsPhase1IntegrityAlgorithms[];

  @SpeakeasyMetadata()
  phase1LifetimeSeconds?: number;

  @SpeakeasyMetadata({
    elemType:
      CreateVpnConnectionResultVpnConnectionOptionsTunnelOptionsPhase2DHGroupNumbers,
  })
  phase2DHGroupNumbers?: CreateVpnConnectionResultVpnConnectionOptionsTunnelOptionsPhase2DHGroupNumbers[];

  @SpeakeasyMetadata({
    elemType:
      CreateVpnConnectionResultVpnConnectionOptionsTunnelOptionsPhase2EncryptionAlgorithms,
  })
  phase2EncryptionAlgorithms?: CreateVpnConnectionResultVpnConnectionOptionsTunnelOptionsPhase2EncryptionAlgorithms[];

  @SpeakeasyMetadata({
    elemType:
      CreateVpnConnectionResultVpnConnectionOptionsTunnelOptionsPhase2IntegrityAlgorithms,
  })
  phase2IntegrityAlgorithms?: CreateVpnConnectionResultVpnConnectionOptionsTunnelOptionsPhase2IntegrityAlgorithms[];

  @SpeakeasyMetadata()
  phase2LifetimeSeconds?: number;

  @SpeakeasyMetadata()
  preSharedKey?: string;

  @SpeakeasyMetadata()
  rekeyFuzzPercentage?: number;

  @SpeakeasyMetadata()
  rekeyMarginTimeSeconds?: number;

  @SpeakeasyMetadata()
  replayWindowSize?: number;

  @SpeakeasyMetadata()
  startupAction?: string;

  @SpeakeasyMetadata()
  tunnelInsideCidr?: string;

  @SpeakeasyMetadata()
  tunnelInsideIpv6Cidr?: string;
}

/**
 * The VPN connection options.
 */
export class CreateVpnConnectionResultVpnConnectionOptions extends SpeakeasyBase {
  @SpeakeasyMetadata()
  enableAcceleration?: boolean;

  @SpeakeasyMetadata()
  localIpv4NetworkCidr?: string;

  @SpeakeasyMetadata()
  localIpv6NetworkCidr?: string;

  @SpeakeasyMetadata()
  outsideIpAddressType?: string;

  @SpeakeasyMetadata()
  remoteIpv4NetworkCidr?: string;

  @SpeakeasyMetadata()
  remoteIpv6NetworkCidr?: string;

  @SpeakeasyMetadata()
  staticRoutesOnly?: boolean;

  @SpeakeasyMetadata()
  transportTransitGatewayAttachmentId?: string;

  @SpeakeasyMetadata()
  tunnelInsideIpVersion?: CreateVpnConnectionResultVpnConnectionOptionsTunnelInsideIpVersionEnum;

  @SpeakeasyMetadata({
    elemType: CreateVpnConnectionResultVpnConnectionOptionsTunnelOptions,
  })
  tunnelOptions?: CreateVpnConnectionResultVpnConnectionOptionsTunnelOptions[];
}

/**
 * Indicates how the routes were provided.
 */
export enum CreateVpnConnectionResultVpnConnectionRoutesSourceEnum {
  Static = "Static",
}

/**
 * The current state of the static route.
 */
export enum CreateVpnConnectionResultVpnConnectionRoutesStateEnum {
  Pending = "pending",
  Available = "available",
  Deleting = "deleting",
  Deleted = "deleted",
}

/**
 * Describes a static route for a VPN connection.
 */
export class CreateVpnConnectionResultVpnConnectionRoutes extends SpeakeasyBase {
  @SpeakeasyMetadata()
  destinationCidrBlock?: string;

  @SpeakeasyMetadata()
  source?: CreateVpnConnectionResultVpnConnectionRoutesSourceEnum;

  @SpeakeasyMetadata()
  state?: CreateVpnConnectionResultVpnConnectionRoutesStateEnum;
}

/**
 * The current state of the VPN connection.
 */
export enum CreateVpnConnectionResultVpnConnectionStateEnum {
  Pending = "pending",
  Available = "available",
  Deleting = "deleting",
  Deleted = "deleted",
}

/**
 * Describes a tag.
 */
export class CreateVpnConnectionResultVpnConnectionTags extends SpeakeasyBase {
  @SpeakeasyMetadata()
  key?: string;

  @SpeakeasyMetadata()
  value?: string;
}

/**
 * The type of VPN connection.
 */
export enum CreateVpnConnectionResultVpnConnectionTypeEnum {
  Ipsec1 = "ipsec.1",
}

/**
 * The status of the VPN tunnel.
 */
export enum CreateVpnConnectionResultVpnConnectionVgwTelemetryStatusEnum {
  Up = "UP",
  Down = "DOWN",
}

/**
 * Describes telemetry for a VPN tunnel.
 */
export class CreateVpnConnectionResultVpnConnectionVgwTelemetry extends SpeakeasyBase {
  @SpeakeasyMetadata()
  acceptedRouteCount?: number;

  @SpeakeasyMetadata()
  certificateArn?: string;

  @SpeakeasyMetadata()
  lastStatusChange?: Date;

  @SpeakeasyMetadata()
  outsideIpAddress?: string;

  @SpeakeasyMetadata()
  status?: CreateVpnConnectionResultVpnConnectionVgwTelemetryStatusEnum;

  @SpeakeasyMetadata()
  statusMessage?: string;
}

/**
 * Information about the VPN connection.
 */
export class CreateVpnConnectionResultVpnConnection extends SpeakeasyBase {
  @SpeakeasyMetadata()
  category?: string;

  @SpeakeasyMetadata()
  coreNetworkArn?: string;

  @SpeakeasyMetadata()
  coreNetworkAttachmentArn?: string;

  @SpeakeasyMetadata()
  customerGatewayConfiguration?: string;

  @SpeakeasyMetadata()
  customerGatewayId?: string;

  @SpeakeasyMetadata()
  gatewayAssociationState?: CreateVpnConnectionResultVpnConnectionGatewayAssociationStateEnum;

  @SpeakeasyMetadata()
  options?: CreateVpnConnectionResultVpnConnectionOptions;

  @SpeakeasyMetadata({ elemType: CreateVpnConnectionResultVpnConnectionRoutes })
  routes?: CreateVpnConnectionResultVpnConnectionRoutes[];

  @SpeakeasyMetadata()
  state?: CreateVpnConnectionResultVpnConnectionStateEnum;

  @SpeakeasyMetadata({ elemType: CreateVpnConnectionResultVpnConnectionTags })
  tags?: CreateVpnConnectionResultVpnConnectionTags[];

  @SpeakeasyMetadata()
  transitGatewayId?: string;

  @SpeakeasyMetadata()
  type?: CreateVpnConnectionResultVpnConnectionTypeEnum;

  @SpeakeasyMetadata({
    elemType: CreateVpnConnectionResultVpnConnectionVgwTelemetry,
  })
  vgwTelemetry?: CreateVpnConnectionResultVpnConnectionVgwTelemetry[];

  @SpeakeasyMetadata()
  vpnConnectionId?: string;

  @SpeakeasyMetadata()
  vpnGatewayId?: string;
}

/**
 * Contains the output of CreateVpnConnection.
 */
export class CreateVpnConnectionResult extends SpeakeasyBase {
  @SpeakeasyMetadata()
  vpnConnection?: CreateVpnConnectionResultVpnConnection;
}
