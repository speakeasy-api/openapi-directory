// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

type TravelTimeGetOverlayPathParams struct {
	// The height of the requested overlay.
	Height int `pathParam:"style=simple,explode=false,name=height"`
	// The map center latitude.
	MapCenterLat float64 `pathParam:"style=simple,explode=false,name=mapCenterLat"`
	// The map center longitude.
	MapCenterLon float64 `pathParam:"style=simple,explode=false,name=mapCenterLon"`
	// The latitude of the pin.
	PinLat float64 `pathParam:"style=simple,explode=false,name=pinLat"`
	// The longitude of the pin.
	PinLon float64 `pathParam:"style=simple,explode=false,name=pinLon"`
	// The width of the requested overlay.
	Width int `pathParam:"style=simple,explode=false,name=width"`
	// The zoom level.
	Z int `pathParam:"style=simple,explode=false,name=z"`
}

// TravelTimeGetOverlayDirectionEnum - The direction of travel.
type TravelTimeGetOverlayDirectionEnum string

const (
	TravelTimeGetOverlayDirectionEnumAverage TravelTimeGetOverlayDirectionEnum = "Average"
	TravelTimeGetOverlayDirectionEnumFrom    TravelTimeGetOverlayDirectionEnum = "From"
	TravelTimeGetOverlayDirectionEnumTo      TravelTimeGetOverlayDirectionEnum = "To"
)

func (e *TravelTimeGetOverlayDirectionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Average":
		fallthrough
	case "From":
		fallthrough
	case "To":
		*e = TravelTimeGetOverlayDirectionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for TravelTimeGetOverlayDirectionEnum: %s", s)
	}
}

type TravelTimeGetOverlayQueryParams struct {
	// The direction of travel.
	Direction TravelTimeGetOverlayDirectionEnum `queryParam:"style=form,explode=true,name=direction"`
	// The id of the mode.
	ModeID string `queryParam:"style=form,explode=true,name=modeId"`
	// The title of the scenario.
	ScenarioTitle string `queryParam:"style=form,explode=true,name=scenarioTitle"`
	// The id for the time of day (AM/INTER/PM)
	TimeOfDayID string `queryParam:"style=form,explode=true,name=timeOfDayId"`
	// The total minutes between the travel time bands
	TravelTimeInterval int `queryParam:"style=form,explode=true,name=travelTimeInterval"`
}

type TravelTimeGetOverlayRequest struct {
	PathParams  TravelTimeGetOverlayPathParams
	QueryParams TravelTimeGetOverlayQueryParams
}

type TravelTimeGetOverlayResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// OK
	SystemObject map[string]interface{}
}
