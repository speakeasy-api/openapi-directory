// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type TypeHintEnum string

const (
	TypeHintEnumJSON      TypeHintEnum = "JSON"
	TypeHintEnumUUID      TypeHintEnum = "UUID"
	TypeHintEnumTimestamp TypeHintEnum = "TIMESTAMP"
	TypeHintEnumDate      TypeHintEnum = "DATE"
	TypeHintEnumTime      TypeHintEnum = "TIME"
	TypeHintEnumDecimal   TypeHintEnum = "DECIMAL"
)

func (e TypeHintEnum) ToPointer() *TypeHintEnum {
	return &e
}

func (e *TypeHintEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "JSON":
		fallthrough
	case "UUID":
		fallthrough
	case "TIMESTAMP":
		fallthrough
	case "DATE":
		fallthrough
	case "TIME":
		fallthrough
	case "DECIMAL":
		*e = TypeHintEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TypeHintEnum: %v", v)
	}
}
