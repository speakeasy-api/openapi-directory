/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import java.time.LocalDate;

/**
 * Meeting - Success
 */
public class Meeting {
    /**
     * ID of the account the recipient associated to
     */
    
    public String accountId;
    public Meeting withAccountId(String accountId) {
        this.accountId = accountId;
        return this;
    }
    
    /**
     * Whether the meeting is an all-day meeting
     */
    
    public Boolean allDay;
    public Meeting withAllDay(Boolean allDay) {
        this.allDay = allDay;
        return this;
    }
    
    /**
     * The attendees of the meeting. Each attendee includes the following fields: status, email, name, organizer
     */
    
    public EmbeddedAttendeeResource[] attendees;
    public Meeting withAttendees(EmbeddedAttendeeResource[] attendees) {
        this.attendees = attendees;
        return this;
    }
    
    
    public EventMeetingSetting bookedByMeetingsSettings;
    public Meeting withBookedByMeetingsSettings(EventMeetingSetting bookedByMeetingsSettings) {
        this.bookedByMeetingsSettings = bookedByMeetingsSettings;
        return this;
    }
    
    
    public EmbeddedResource bookedByUser;
    public Meeting withBookedByUser(EmbeddedResource bookedByUser) {
        this.bookedByUser = bookedByUser;
        return this;
    }
    
    
    public EmbeddedResource cadence;
    public Meeting withCadence(EmbeddedResource cadence) {
        this.cadence = cadence;
        return this;
    }
    
    /**
     * Calendar ID of the meeting owner
     */
    
    public String calendarId;
    public Meeting withCalendarId(String calendarId) {
        this.calendarId = calendarId;
        return this;
    }
    
    /**
     * Calendar type of the meeting owner. Possible values are: gmail, azure, nylas, linkedin_azure, cerebro, external
     */
    
    public String calendarType;
    public Meeting withCalendarType(String calendarType) {
        this.calendarType = calendarType;
        return this;
    }
    
    /**
     * Datetime of when the meeting was canceled
     */
    
    public LocalDate canceledAt;
    public Meeting withCanceledAt(LocalDate canceledAt) {
        this.canceledAt = canceledAt;
        return this;
    }
    
    /**
     * Datetime of when the meeting was created
     */
    
    public LocalDate createdAt;
    public Meeting withCreatedAt(LocalDate createdAt) {
        this.createdAt = createdAt;
        return this;
    }
    
    /**
     * List of crm custom fields which will be logged to SFDC
     */
    
    public java.util.Map<String, Object> crmCustomFields;
    public Meeting withCrmCustomFields(java.util.Map<String, Object> crmCustomFields) {
        this.crmCustomFields = crmCustomFields;
        return this;
    }
    
    /**
     * List of crm references associated with the meeting
     */
    
    public java.util.Map<String, Object> crmReferences;
    public Meeting withCrmReferences(java.util.Map<String, Object> crmReferences) {
        this.crmReferences = crmReferences;
        return this;
    }
    
    /**
     * Description of the meeting
     */
    
    public String description;
    public Meeting withDescription(String description) {
        this.description = description;
        return this;
    }
    
    /**
     * End time of the meeting
     */
    
    public LocalDate endTime;
    public Meeting withEndTime(LocalDate endTime) {
        this.endTime = endTime;
        return this;
    }
    
    /**
     * ID of the meeting created by target calendar
     */
    
    public String eventId;
    public Meeting withEventId(String eventId) {
        this.eventId = eventId;
        return this;
    }
    
    /**
     * Source of the meeting. Possible values are: 'external' - The event was synced to Salesloft platform via Calendar Sync, 'internal' - The event was created via Salesloft platform
     */
    
    public String eventSource;
    public Meeting withEventSource(String eventSource) {
        this.eventSource = eventSource;
        return this;
    }
    
    /**
     * The list of attendees emails of the meeting
     */
    
    public String[] guests;
    public Meeting withGuests(String[] guests) {
        this.guests = guests;
        return this;
    }
    
    /**
     * UID of the meeting provided by target calendar provider
     */
    
    public String iCalUid;
    public Meeting withICalUid(String iCalUid) {
        this.iCalUid = iCalUid;
        return this;
    }
    
    /**
     * ID of the meeting
     */
    
    public Long id;
    public Meeting withId(Long id) {
        this.id = id;
        return this;
    }
    
    /**
     * Location of the meeting
     */
    
    public String location;
    public Meeting withLocation(String location) {
        this.location = location;
        return this;
    }
    
    /**
     * Meeting type
     */
    
    public String meetingType;
    public Meeting withMeetingType(String meetingType) {
        this.meetingType = meetingType;
        return this;
    }
    
    /**
     * Whether the meeting is a No Show meeting
     */
    
    public Boolean noShow;
    public Meeting withNoShow(Boolean noShow) {
        this.noShow = noShow;
        return this;
    }
    
    
    public EventMeetingSetting ownedByMeetingsSettings;
    public Meeting withOwnedByMeetingsSettings(EventMeetingSetting ownedByMeetingsSettings) {
        this.ownedByMeetingsSettings = ownedByMeetingsSettings;
        return this;
    }
    
    
    public EmbeddedResource person;
    public Meeting withPerson(EmbeddedResource person) {
        this.person = person;
        return this;
    }
    
    /**
     * Email of the meeting invite recipient
     */
    
    public String recipientEmail;
    public Meeting withRecipientEmail(String recipientEmail) {
        this.recipientEmail = recipientEmail;
        return this;
    }
    
    /**
     * Name of the meeting invite recipient
     */
    
    public String recipientName;
    public Meeting withRecipientName(String recipientName) {
        this.recipientName = recipientName;
        return this;
    }
    
    /**
     * Start time of the meeting
     */
    
    public LocalDate startTime;
    public Meeting withStartTime(LocalDate startTime) {
        this.startTime = startTime;
        return this;
    }
    
    /**
     * Status of the meeting. Possible values are: pending, booked, failed, retry
     */
    
    public String status;
    public Meeting withStatus(String status) {
        this.status = status;
        return this;
    }
    
    
    public EmbeddedResource step;
    public Meeting withStep(EmbeddedResource step) {
        this.step = step;
        return this;
    }
    
    /**
     * Strict attribution means that we 100% sure which cadence generate the meeting
     */
    
    public Boolean strictAttribution;
    public Meeting withStrictAttribution(Boolean strictAttribution) {
        this.strictAttribution = strictAttribution;
        return this;
    }
    
    /**
     * ID of the created task
     */
    
    public String taskId;
    public Meeting withTaskId(String taskId) {
        this.taskId = taskId;
        return this;
    }
    
    /**
     * Title of the meeting
     */
    
    public String title;
    public Meeting withTitle(String title) {
        this.title = title;
        return this;
    }
    
    /**
     * Datetime of when the meeting was last updated
     */
    
    public LocalDate updatedAt;
    public Meeting withUpdatedAt(LocalDate updatedAt) {
        this.updatedAt = updatedAt;
        return this;
    }
    
}
