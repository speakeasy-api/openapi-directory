/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * EventSelector - &lt;p&gt;Use event selectors to further specify the management and data event settings for your trail. By default, trails created without specific event selectors will be configured to log all read and write management events, and no data events. When an event occurs in your account, CloudTrail evaluates the event selector for all trails. For each trail, if the event matches any event selector, the trail processes and logs the event. If the event doesn't match any event selector, the trail doesn't log the event.&lt;/p&gt; &lt;p&gt;You can configure up to five event selectors for a trail.&lt;/p&gt; &lt;p&gt;You cannot apply both event selectors and advanced event selectors to a trail.&lt;/p&gt;
 */
public class EventSelector {
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("DataResources")
    public DataResource[] dataResources;

    public EventSelector withDataResources(DataResource[] dataResources) {
        this.dataResources = dataResources;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ExcludeManagementEventSources")
    public String[] excludeManagementEventSources;

    public EventSelector withExcludeManagementEventSources(String[] excludeManagementEventSources) {
        this.excludeManagementEventSources = excludeManagementEventSources;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("IncludeManagementEvents")
    public Boolean includeManagementEvents;

    public EventSelector withIncludeManagementEvents(Boolean includeManagementEvents) {
        this.includeManagementEvents = includeManagementEvents;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ReadWriteType")
    public ReadWriteTypeEnum readWriteType;

    public EventSelector withReadWriteType(ReadWriteTypeEnum readWriteType) {
        this.readWriteType = readWriteType;
        return this;
    }
    
    public EventSelector(){}
}
