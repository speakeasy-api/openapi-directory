// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// UpdateIdentityProviderRequestBodyIdentityProviderTypeEnum - The type of the identity provider.
type UpdateIdentityProviderRequestBodyIdentityProviderTypeEnum string

const (
	UpdateIdentityProviderRequestBodyIdentityProviderTypeEnumSaml            UpdateIdentityProviderRequestBodyIdentityProviderTypeEnum = "SAML"
	UpdateIdentityProviderRequestBodyIdentityProviderTypeEnumFacebook        UpdateIdentityProviderRequestBodyIdentityProviderTypeEnum = "Facebook"
	UpdateIdentityProviderRequestBodyIdentityProviderTypeEnumGoogle          UpdateIdentityProviderRequestBodyIdentityProviderTypeEnum = "Google"
	UpdateIdentityProviderRequestBodyIdentityProviderTypeEnumLoginWithAmazon UpdateIdentityProviderRequestBodyIdentityProviderTypeEnum = "LoginWithAmazon"
	UpdateIdentityProviderRequestBodyIdentityProviderTypeEnumSignInWithApple UpdateIdentityProviderRequestBodyIdentityProviderTypeEnum = "SignInWithApple"
	UpdateIdentityProviderRequestBodyIdentityProviderTypeEnumOidc            UpdateIdentityProviderRequestBodyIdentityProviderTypeEnum = "OIDC"
)

func (e UpdateIdentityProviderRequestBodyIdentityProviderTypeEnum) ToPointer() *UpdateIdentityProviderRequestBodyIdentityProviderTypeEnum {
	return &e
}

func (e *UpdateIdentityProviderRequestBodyIdentityProviderTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "SAML":
		fallthrough
	case "Facebook":
		fallthrough
	case "Google":
		fallthrough
	case "LoginWithAmazon":
		fallthrough
	case "SignInWithApple":
		fallthrough
	case "OIDC":
		*e = UpdateIdentityProviderRequestBodyIdentityProviderTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateIdentityProviderRequestBodyIdentityProviderTypeEnum: %v", v)
	}
}

type UpdateIdentityProviderRequestBody struct {
	// <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. Idempotency ensures that an API request completes only once. With an idempotent request, if the original request completes successfully, subsequent retries with the same client token return the result from the original successful request. </p> <p>If you do not specify a client token, one is automatically generated by the AWS SDK.</p>
	ClientToken *string `json:"clientToken,omitempty"`
	// <p>The details of the identity provider. The following list describes the provider detail keys for each identity provider type. </p> <ul> <li> <p>For Google and Login with Amazon:</p> <ul> <li> <p> <code>client_id</code> </p> </li> <li> <p> <code>client_secret</code> </p> </li> <li> <p> <code>authorize_scopes</code> </p> </li> </ul> </li> <li> <p>For Facebook:</p> <ul> <li> <p> <code>client_id</code> </p> </li> <li> <p> <code>client_secret</code> </p> </li> <li> <p> <code>authorize_scopes</code> </p> </li> <li> <p> <code>api_version</code> </p> </li> </ul> </li> <li> <p>For Sign in with Apple:</p> <ul> <li> <p> <code>client_id</code> </p> </li> <li> <p> <code>team_id</code> </p> </li> <li> <p> <code>key_id</code> </p> </li> <li> <p> <code>private_key</code> </p> </li> <li> <p> <code>authorize_scopes</code> </p> </li> </ul> </li> <li> <p>For OIDC providers:</p> <ul> <li> <p> <code>client_id</code> </p> </li> <li> <p> <code>client_secret</code> </p> </li> <li> <p> <code>attributes_request_method</code> </p> </li> <li> <p> <code>oidc_issuer</code> </p> </li> <li> <p> <code>authorize_scopes</code> </p> </li> <li> <p> <code>authorize_url</code> <i>if not available from discovery URL specified by <code>oidc_issuer</code> key</i> </p> </li> <li> <p> <code>token_url</code> <i>if not available from discovery URL specified by <code>oidc_issuer</code> key</i> </p> </li> <li> <p> <code>attributes_url</code> <i>if not available from discovery URL specified by <code>oidc_issuer</code> key</i> </p> </li> <li> <p> <code>jwks_uri</code> <i>if not available from discovery URL specified by <code>oidc_issuer</code> key</i> </p> </li> </ul> </li> <li> <p>For SAML providers:</p> <ul> <li> <p> <code>MetadataFile</code> OR <code>MetadataURL</code> </p> </li> <li> <p> <code>IDPSignout</code> (boolean) <i>optional</i> </p> </li> </ul> </li> </ul>
	IdentityProviderDetails map[string]string `json:"identityProviderDetails,omitempty"`
	// The name of the identity provider.
	IdentityProviderName *string `json:"identityProviderName,omitempty"`
	// The type of the identity provider.
	IdentityProviderType *UpdateIdentityProviderRequestBodyIdentityProviderTypeEnum `json:"identityProviderType,omitempty"`
}

type UpdateIdentityProviderRequest struct {
	RequestBody       UpdateIdentityProviderRequestBody `request:"mediaType=application/json"`
	XAmzAlgorithm     *string                           `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string                           `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string                           `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string                           `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string                           `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string                           `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string                           `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	// The ARN of the identity provider.
	IdentityProviderArn string `pathParam:"style=simple,explode=false,name=identityProviderArn"`
}

type UpdateIdentityProviderResponse struct {
	// AccessDeniedException
	AccessDeniedException interface{}
	ContentType           string
	// InternalServerException
	InternalServerException interface{}
	// ResourceNotFoundException
	ResourceNotFoundException interface{}
	StatusCode                int
	RawResponse               *http.Response
	// ThrottlingException
	ThrottlingException interface{}
	// Success
	UpdateIdentityProviderResponse *shared.UpdateIdentityProviderResponse
	// ValidationException
	ValidationException interface{}
}
