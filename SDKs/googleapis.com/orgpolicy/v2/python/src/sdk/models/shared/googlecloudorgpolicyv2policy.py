"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import googlecloudorgpolicyv2alternatepolicyspec as shared_googlecloudorgpolicyv2alternatepolicyspec
from ..shared import googlecloudorgpolicyv2policyspec as shared_googlecloudorgpolicyv2policyspec
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GoogleCloudOrgpolicyV2PolicyInput:
    r"""Defines an organization policy which is used to specify constraints for configurations of Google Cloud resources."""
    
    alternate: Optional[shared_googlecloudorgpolicyv2alternatepolicyspec.GoogleCloudOrgpolicyV2AlternatePolicySpecInput] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('alternate'), 'exclude': lambda f: f is None }})
    r"""Similar to PolicySpec but with an extra 'launch' field for launch reference. The PolicySpec here is specific for dry-run/darklaunch."""  
    dry_run_spec: Optional[shared_googlecloudorgpolicyv2policyspec.GoogleCloudOrgpolicyV2PolicySpecInput] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dryRunSpec'), 'exclude': lambda f: f is None }})
    r"""Defines a Google Cloud policy specification which is used to specify constraints for configurations of Google Cloud resources."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""Immutable. The resource name of the policy. Must be one of the following forms, where constraint_name is the name of the constraint which this policy configures: * `projects/{project_number}/policies/{constraint_name}` * `folders/{folder_id}/policies/{constraint_name}` * `organizations/{organization_id}/policies/{constraint_name}` For example, \\"projects/123/policies/compute.disableSerialPortAccess\\". Note: `projects/{project_id}/policies/{constraint_name}` is also an acceptable name for API requests, but responses will return the name using the equivalent project number."""  
    spec: Optional[shared_googlecloudorgpolicyv2policyspec.GoogleCloudOrgpolicyV2PolicySpecInput] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('spec'), 'exclude': lambda f: f is None }})
    r"""Defines a Google Cloud policy specification which is used to specify constraints for configurations of Google Cloud resources."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GoogleCloudOrgpolicyV2Policy:
    r"""Defines an organization policy which is used to specify constraints for configurations of Google Cloud resources."""
    
    alternate: Optional[shared_googlecloudorgpolicyv2alternatepolicyspec.GoogleCloudOrgpolicyV2AlternatePolicySpec] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('alternate'), 'exclude': lambda f: f is None }})
    r"""Similar to PolicySpec but with an extra 'launch' field for launch reference. The PolicySpec here is specific for dry-run/darklaunch."""  
    dry_run_spec: Optional[shared_googlecloudorgpolicyv2policyspec.GoogleCloudOrgpolicyV2PolicySpec] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dryRunSpec'), 'exclude': lambda f: f is None }})
    r"""Defines a Google Cloud policy specification which is used to specify constraints for configurations of Google Cloud resources."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""Immutable. The resource name of the policy. Must be one of the following forms, where constraint_name is the name of the constraint which this policy configures: * `projects/{project_number}/policies/{constraint_name}` * `folders/{folder_id}/policies/{constraint_name}` * `organizations/{organization_id}/policies/{constraint_name}` For example, \\"projects/123/policies/compute.disableSerialPortAccess\\". Note: `projects/{project_id}/policies/{constraint_name}` is also an acceptable name for API requests, but responses will return the name using the equivalent project number."""  
    spec: Optional[shared_googlecloudorgpolicyv2policyspec.GoogleCloudOrgpolicyV2PolicySpec] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('spec'), 'exclude': lambda f: f is None }})
    r"""Defines a Google Cloud policy specification which is used to specify constraints for configurations of Google Cloud resources."""  
    