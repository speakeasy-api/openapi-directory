"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations

class OnThisDay:
    r"""On this day historical events for birth, death and other events.
    http://fungenerators.com/api/facts#number - Find out more
    """
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def get_fact_onthisday_born(self, request: operations.GetFactOnthisdayBornRequest, security: operations.GetFactOnthisdayBornSecurity) -> operations.GetFactOnthisdayBornResponse:
        r"""Returns a random ( famous/ relatively famous ) person born on a given day and month"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/fact/onthisday/born'
        
        query_params = utils.get_query_params(operations.GetFactOnthisdayBornRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetFactOnthisdayBornResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def get_fact_onthisday_died(self, request: operations.GetFactOnthisdayDiedRequest, security: operations.GetFactOnthisdayDiedSecurity) -> operations.GetFactOnthisdayDiedResponse:
        r"""Returns a random ( famous/ relatively famous ) person died on a given day and month"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/fact/onthisday/died'
        
        query_params = utils.get_query_params(operations.GetFactOnthisdayDiedRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetFactOnthisdayDiedResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def get_fact_onthisday_event(self, request: operations.GetFactOnthisdayEventRequest, security: operations.GetFactOnthisdayEventSecurity) -> operations.GetFactOnthisdayEventResponse:
        r"""Returns a random ( famous/ relatively famous ) historic event on a given day and month"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/fact/onthisday/event'
        
        query_params = utils.get_query_params(operations.GetFactOnthisdayEventRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetFactOnthisdayEventResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    