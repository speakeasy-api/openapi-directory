"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class GiftCards:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def create_gift_card(self, request: shared.CreateGiftCardRequest, security: operations.CreateGiftCardSecurity) -> operations.CreateGiftCardResponse:
        r"""CreateGiftCard
        Creates a digital gift card or registers a physical (plastic) gift card. You must activate the gift card before 
        it can be used for payment. For more information, see 
        [Selling gift cards](https://developer.squareup.com/docs/gift-cards/using-gift-cards-api#selling-square-gift-cards).
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v2/gift-cards'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateGiftCardResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.CreateGiftCardResponse])
                res.create_gift_card_response = out

        return res

    def link_customer_to_gift_card(self, request: operations.LinkCustomerToGiftCardRequest, security: operations.LinkCustomerToGiftCardSecurity) -> operations.LinkCustomerToGiftCardResponse:
        r"""LinkCustomerToGiftCard
        Links a customer to a gift card
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.LinkCustomerToGiftCardRequest, base_url, '/v2/gift-cards/{gift_card_id}/link-customer', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "link_customer_to_gift_card_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.LinkCustomerToGiftCardResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.LinkCustomerToGiftCardResponse])
                res.link_customer_to_gift_card_response = out

        return res

    def list_gift_cards(self, request: operations.ListGiftCardsRequest, security: operations.ListGiftCardsSecurity) -> operations.ListGiftCardsResponse:
        r"""ListGiftCards
        Lists all gift cards. You can specify optional filters to retrieve 
        a subset of the gift cards.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v2/gift-cards'
        
        query_params = utils.get_query_params(operations.ListGiftCardsRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ListGiftCardsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ListGiftCardsResponse])
                res.list_gift_cards_response = out

        return res

    def retrieve_gift_card(self, request: operations.RetrieveGiftCardRequest, security: operations.RetrieveGiftCardSecurity) -> operations.RetrieveGiftCardResponse:
        r"""RetrieveGiftCard
        Retrieves a gift card using its ID.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.RetrieveGiftCardRequest, base_url, '/v2/gift-cards/{id}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.RetrieveGiftCardResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.RetrieveGiftCardResponse])
                res.retrieve_gift_card_response = out

        return res

    def retrieve_gift_card_from_gan(self, request: shared.RetrieveGiftCardFromGANRequest, security: operations.RetrieveGiftCardFromGANSecurity) -> operations.RetrieveGiftCardFromGANResponse:
        r"""RetrieveGiftCardFromGAN
        Retrieves a gift card using the gift card account number (GAN).
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v2/gift-cards/from-gan'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.RetrieveGiftCardFromGANResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.RetrieveGiftCardFromGANResponse])
                res.retrieve_gift_card_from_gan_response = out

        return res

    def retrieve_gift_card_from_nonce(self, request: shared.RetrieveGiftCardFromNonceRequest, security: operations.RetrieveGiftCardFromNonceSecurity) -> operations.RetrieveGiftCardFromNonceResponse:
        r"""RetrieveGiftCardFromNonce
        Retrieves a gift card using a nonce (a secure token) that represents the gift card.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v2/gift-cards/from-nonce'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.RetrieveGiftCardFromNonceResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.RetrieveGiftCardFromNonceResponse])
                res.retrieve_gift_card_from_nonce_response = out

        return res

    def unlink_customer_from_gift_card(self, request: operations.UnlinkCustomerFromGiftCardRequest, security: operations.UnlinkCustomerFromGiftCardSecurity) -> operations.UnlinkCustomerFromGiftCardResponse:
        r"""UnlinkCustomerFromGiftCard
        Unlinks a customer from a gift card
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.UnlinkCustomerFromGiftCardRequest, base_url, '/v2/gift-cards/{gift_card_id}/unlink-customer', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "unlink_customer_from_gift_card_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UnlinkCustomerFromGiftCardResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.UnlinkCustomerFromGiftCardResponse])
                res.unlink_customer_from_gift_card_response = out

        return res

    