/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Instance - A Memorystore for Memcached instance
 */
public class Instance {
    /**
     * The full name of the Google Compute Engine [network](/compute/docs/networks-and-firewalls#networks) to which the instance is connected. If left unspecified, the `default` network will be used.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("authorizedNetwork")
    public String authorizedNetwork;
    public Instance withAuthorizedNetwork(String authorizedNetwork) {
        this.authorizedNetwork = authorizedNetwork;
        return this;
    }
    
    /**
     * Output only. The time the instance was created.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("createTime")
    public String createTime;
    public Instance withCreateTime(String createTime) {
        this.createTime = createTime;
        return this;
    }
    
    /**
     * Output only. Endpoint for the Discovery API.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("discoveryEndpoint")
    public String discoveryEndpoint;
    public Instance withDiscoveryEndpoint(String discoveryEndpoint) {
        this.discoveryEndpoint = discoveryEndpoint;
        return this;
    }
    
    /**
     * User provided name for the instance, which is only used for display purposes. Cannot be more than 80 characters.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("displayName")
    public String displayName;
    public Instance withDisplayName(String displayName) {
        this.displayName = displayName;
        return this;
    }
    
    /**
     * List of messages that describe the current state of the Memcached instance.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("instanceMessages")
    public InstanceMessage[] instanceMessages;
    public Instance withInstanceMessages(InstanceMessage[] instanceMessages) {
        this.instanceMessages = instanceMessages;
        return this;
    }
    
    /**
     * Resource labels to represent user-provided metadata. Refer to cloud documentation on labels for more details. https://cloud.google.com/compute/docs/labeling-resources
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("labels")
    public java.util.Map<String, String> labels;
    public Instance withLabels(java.util.Map<String, String> labels) {
        this.labels = labels;
        return this;
    }
    
    /**
     * Maintenance policy per instance.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("maintenancePolicy")
    public GoogleCloudMemcacheV1MaintenancePolicy maintenancePolicy;
    public Instance withMaintenancePolicy(GoogleCloudMemcacheV1MaintenancePolicy maintenancePolicy) {
        this.maintenancePolicy = maintenancePolicy;
        return this;
    }
    
    /**
     * Upcoming maintenance schedule.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("maintenanceSchedule")
    public MaintenanceSchedule maintenanceSchedule;
    public Instance withMaintenanceSchedule(MaintenanceSchedule maintenanceSchedule) {
        this.maintenanceSchedule = maintenanceSchedule;
        return this;
    }
    
    /**
     * Output only. The full version of memcached server running on this instance. System automatically determines the full memcached version for an instance based on the input MemcacheVersion. The full version format will be "memcached-1.5.16".
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("memcacheFullVersion")
    public String memcacheFullVersion;
    public Instance withMemcacheFullVersion(String memcacheFullVersion) {
        this.memcacheFullVersion = memcacheFullVersion;
        return this;
    }
    
    /**
     * Output only. List of Memcached nodes. Refer to Node message for more details.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("memcacheNodes")
    public Node[] memcacheNodes;
    public Instance withMemcacheNodes(Node[] memcacheNodes) {
        this.memcacheNodes = memcacheNodes;
        return this;
    }
    
    /**
     * The major version of Memcached software. If not provided, latest supported version will be used. Currently the latest supported major version is `MEMCACHE_1_5`. The minor version will be automatically determined by our system based on the latest supported minor version.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("memcacheVersion")
    public InstanceMemcacheVersionEnum memcacheVersion;
    public Instance withMemcacheVersion(InstanceMemcacheVersionEnum memcacheVersion) {
        this.memcacheVersion = memcacheVersion;
        return this;
    }
    
    /**
     * Required. Unique name of the resource in this scope including project and location using the form: `projects/{project_id}/locations/{location_id}/instances/{instance_id}` Note: Memcached instances are managed and addressed at the regional level so `location_id` here refers to a Google Cloud region; however, users may choose which zones Memcached nodes should be provisioned in within an instance. Refer to zones field for more details.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    public String name;
    public Instance withName(String name) {
        this.name = name;
        return this;
    }
    
    /**
     * Configuration for a Memcached Node.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("nodeConfig")
    public NodeConfig nodeConfig;
    public Instance withNodeConfig(NodeConfig nodeConfig) {
        this.nodeConfig = nodeConfig;
        return this;
    }
    
    /**
     * Required. Number of nodes in the Memcached instance.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("nodeCount")
    public Integer nodeCount;
    public Instance withNodeCount(Integer nodeCount) {
        this.nodeCount = nodeCount;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("parameters")
    public MemcacheParameters parameters;
    public Instance withParameters(MemcacheParameters parameters) {
        this.parameters = parameters;
        return this;
    }
    
    /**
     * Output only. The state of this Memcached instance.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("state")
    public InstanceStateEnum state;
    public Instance withState(InstanceStateEnum state) {
        this.state = state;
        return this;
    }
    
    /**
     * Output only. The time the instance was updated.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("updateTime")
    public String updateTime;
    public Instance withUpdateTime(String updateTime) {
        this.updateTime = updateTime;
        return this;
    }
    
    /**
     * Zones in which Memcached nodes should be provisioned. Memcached nodes will be equally distributed across these zones. If not provided, the service will by default create nodes in all zones in the region for the instance.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("zones")
    public String[] zones;
    public Instance withZones(String[] zones) {
        this.zones = zones;
        return this;
    }
    
}
