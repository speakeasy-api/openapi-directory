"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Webhooks:
    r"""Webhooks are external URLs which subscribe to receive events via HTTP POST for a specified set of events."""
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def create_webhook(self, request: shared.WebhookCreate) -> operations.CreateWebhookResponse:
        r"""Create a new webhook subscription"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/self/webhooks'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateWebhookResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Webhook])
                res.webhook = out
        elif http_res.status_code in [400, 422]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorResponse])
                res.error_response = out
        elif http_res.status_code in [401, 403, 408, 500, 502]:
            pass

        return res

    def destroy_webhook(self, request: operations.DestroyWebhookRequest) -> operations.DestroyWebhookResponse:
        r"""Remove a web hook"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DestroyWebhookRequest, base_url, '/self/webhooks/{id}', request)
        
        
        client = self._client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DestroyWebhookResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code in [204, 401, 403, 408, 500, 502]:
            pass
        elif http_res.status_code in [400, 422]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorResponse])
                res.error_response = out

        return res

    def list_webhooks(self) -> operations.ListWebhooksResponse:
        r"""List web hooks"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/self/webhooks'
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ListWebhooksResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.Webhook]])
                res.webhooks = out
        elif http_res.status_code in [400, 422]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorResponse])
                res.error_response = out
        elif http_res.status_code in [401, 403, 408, 500, 502]:
            pass

        return res

    def renew_webhook(self, request: operations.RenewWebhookRequest) -> operations.RenewWebhookResponse:
        r"""Renews a web hook"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.RenewWebhookRequest, base_url, '/self/webhooks/{id}/renew', request)
        
        
        client = self._client
        
        http_res = client.request('PUT', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.RenewWebhookResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Webhook])
                res.webhook = out
        elif http_res.status_code in [400, 422]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorResponse])
                res.error_response = out
        elif http_res.status_code in [401, 403, 408, 500, 502]:
            pass

        return res

    def view_webhook(self, request: operations.ViewWebhookRequest) -> operations.ViewWebhookResponse:
        r"""Get web hook details"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ViewWebhookRequest, base_url, '/self/webhooks/{id}', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ViewWebhookResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Webhook])
                res.webhook = out
        elif http_res.status_code in [400, 422]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorResponse])
                res.error_response = out
        elif http_res.status_code in [401, 403, 408, 500, 502]:
            pass

        return res

    