// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// GETDeleteInstanceEventWindowActionEnum
type GETDeleteInstanceEventWindowActionEnum string

const (
	GETDeleteInstanceEventWindowActionEnumDeleteInstanceEventWindow GETDeleteInstanceEventWindowActionEnum = "DeleteInstanceEventWindow"
)

func (e GETDeleteInstanceEventWindowActionEnum) ToPointer() *GETDeleteInstanceEventWindowActionEnum {
	return &e
}

func (e *GETDeleteInstanceEventWindowActionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "DeleteInstanceEventWindow":
		*e = GETDeleteInstanceEventWindowActionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GETDeleteInstanceEventWindowActionEnum: %v", v)
	}
}

// GETDeleteInstanceEventWindowVersionEnum
type GETDeleteInstanceEventWindowVersionEnum string

const (
	GETDeleteInstanceEventWindowVersionEnumTwoThousandAndSixteen1115 GETDeleteInstanceEventWindowVersionEnum = "2016-11-15"
)

func (e GETDeleteInstanceEventWindowVersionEnum) ToPointer() *GETDeleteInstanceEventWindowVersionEnum {
	return &e
}

func (e *GETDeleteInstanceEventWindowVersionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "2016-11-15":
		*e = GETDeleteInstanceEventWindowVersionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GETDeleteInstanceEventWindowVersionEnum: %v", v)
	}
}

type GETDeleteInstanceEventWindowRequest struct {
	Action GETDeleteInstanceEventWindowActionEnum `queryParam:"style=form,explode=true,name=Action"`
	// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
	DryRun *bool `queryParam:"style=form,explode=true,name=DryRun"`
	// Specify <code>true</code> to force delete the event window. Use the force delete parameter if the event window is currently associated with targets.
	ForceDelete *bool `queryParam:"style=form,explode=true,name=ForceDelete"`
	// The ID of the event window.
	InstanceEventWindowID string                                  `queryParam:"style=form,explode=true,name=InstanceEventWindowId"`
	Version               GETDeleteInstanceEventWindowVersionEnum `queryParam:"style=form,explode=true,name=Version"`
	XAmzAlgorithm         *string                                 `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256     *string                                 `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential        *string                                 `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate              *string                                 `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken     *string                                 `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature         *string                                 `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders     *string                                 `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
}

type GETDeleteInstanceEventWindowResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
