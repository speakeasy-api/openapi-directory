/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";

/**
 * The direction of travel. Can be inbound or outbound.
 */
export enum LineRouteSequenceDirectionEnum {
  Inbound = "inbound",
  Outbound = "outbound",
  All = "all",
}

export enum LineRouteSequenceServiceTypesEnum {
  Regular = "Regular",
  Night = "Night",
}

export class LineRouteSequenceRequest extends SpeakeasyBase {
  /**
   * The direction of travel. Can be inbound or outbound.
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=direction",
  })
  direction: LineRouteSequenceDirectionEnum;

  /**
   * That excludes crowding from line disruptions. Can be true or false.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=excludeCrowding",
  })
  excludeCrowding?: boolean;

  /**
   * A single line id e.g. victoria
   */
  @SpeakeasyMetadata({ data: "pathParam, style=simple;explode=false;name=id" })
  id: string;

  /**
   * A comma seperated list of service types to filter on. Supported values: Regular, Night. Defaulted to 'Regular' if not specified
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=serviceTypes",
  })
  serviceTypes?: LineRouteSequenceServiceTypesEnum[];
}

export class LineRouteSequenceResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  body?: Uint8Array;

  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * OK
   */
  @SpeakeasyMetadata()
  tflApiPresentationEntitiesRouteSequence?: shared.TflApiPresentationEntitiesRouteSequence;
}
