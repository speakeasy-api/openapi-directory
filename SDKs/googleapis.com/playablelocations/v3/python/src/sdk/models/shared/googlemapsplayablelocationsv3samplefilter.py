"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import googlemapsplayablelocationsv3samplespacingoptions as shared_googlemapsplayablelocationsv3samplespacingoptions
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GoogleMapsPlayablelocationsV3SampleFilter:
    r"""Specifies the filters to use when searching for playable locations."""
    
    included_types: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('includedTypes'), 'exclude': lambda f: f is None }})
    r"""Restricts the set of playable locations to just the [types](/maps/documentation/gaming/tt/types) that you want."""  
    max_location_count: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('maxLocationCount'), 'exclude': lambda f: f is None }})
    r"""Specifies the maximum number of playable locations to return. This value must not be greater than 1000. The default value is 100. Only the top-ranking playable locations are returned."""  
    spacing: Optional[shared_googlemapsplayablelocationsv3samplespacingoptions.GoogleMapsPlayablelocationsV3SampleSpacingOptions] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('spacing'), 'exclude': lambda f: f is None }})
    r"""A set of options that specifies the separation between playable locations."""  
    