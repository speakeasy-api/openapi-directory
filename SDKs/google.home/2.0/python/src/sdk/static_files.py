"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations

class StaticFiles:
    r"""This folder contains a list of static files stored in Home."""
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def chromecast_icon(self) -> operations.ChromecastIconResponse:
        r"""Chromecast Icon
        **Update:** This no longer exists. It's not useful, anyway.
        
        A redirect to `http://www.gstatic.com/eureka/images/eureka_device.png`
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/icon.png'
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ChromecastIconResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def legal_notice(self) -> operations.LegalNoticeResponse:
        r"""Legal Notice
        All licenses of programs used by Home.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/NOTICE.html.gz'
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.LegalNoticeResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'text/plain'):
                res.legal_notice_200_text_plain_string = http_res.content

        return res

    