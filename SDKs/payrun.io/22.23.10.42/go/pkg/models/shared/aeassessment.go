// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"openapi/pkg/types"
)

// AEAssessmentAEAssessmentAssessmentCodeEnum - The a e assessments' assessment code
type AEAssessmentAEAssessmentAssessmentCodeEnum string

const (
	AEAssessmentAEAssessmentAssessmentCodeEnumExcluded             AEAssessmentAEAssessmentAssessmentCodeEnum = "Excluded"
	AEAssessmentAEAssessmentAssessmentCodeEnumEligibleJobHolder    AEAssessmentAEAssessmentAssessmentCodeEnum = "EligibleJobHolder"
	AEAssessmentAEAssessmentAssessmentCodeEnumNonEligibleJobHolder AEAssessmentAEAssessmentAssessmentCodeEnum = "NonEligibleJobHolder"
	AEAssessmentAEAssessmentAssessmentCodeEnumEntitledWorker       AEAssessmentAEAssessmentAssessmentCodeEnum = "EntitledWorker"
)

func (e *AEAssessmentAEAssessmentAssessmentCodeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Excluded":
		fallthrough
	case "EligibleJobHolder":
		fallthrough
	case "NonEligibleJobHolder":
		fallthrough
	case "EntitledWorker":
		*e = AEAssessmentAEAssessmentAssessmentCodeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for AEAssessmentAEAssessmentAssessmentCodeEnum: %s", s)
	}
}

// AEAssessmentAEAssessmentAssessmentEventEnum - The a e assessments' assessment event
type AEAssessmentAEAssessmentAssessmentEventEnum string

const (
	AEAssessmentAEAssessmentAssessmentEventEnumNonEnrolmentEvent    AEAssessmentAEAssessmentAssessmentEventEnum = "NonEnrolmentEvent"
	AEAssessmentAEAssessmentAssessmentEventEnumAutomaticEnrolment   AEAssessmentAEAssessmentAssessmentEventEnum = "AutomaticEnrolment"
	AEAssessmentAEAssessmentAssessmentEventEnumOptIn                AEAssessmentAEAssessmentAssessmentEventEnum = "OptIn"
	AEAssessmentAEAssessmentAssessmentEventEnumVoluntaryJoiner      AEAssessmentAEAssessmentAssessmentEventEnum = "VoluntaryJoiner"
	AEAssessmentAEAssessmentAssessmentEventEnumContractualEnrolment AEAssessmentAEAssessmentAssessmentEventEnum = "ContractualEnrolment"
)

func (e *AEAssessmentAEAssessmentAssessmentEventEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "NonEnrolmentEvent":
		fallthrough
	case "AutomaticEnrolment":
		fallthrough
	case "OptIn":
		fallthrough
	case "VoluntaryJoiner":
		fallthrough
	case "ContractualEnrolment":
		*e = AEAssessmentAEAssessmentAssessmentEventEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for AEAssessmentAEAssessmentAssessmentEventEnum: %s", s)
	}
}

// AEAssessmentAEAssessmentAssessmentOverrideEnum - The a e assessments' assessment override
type AEAssessmentAEAssessmentAssessmentOverrideEnum string

const (
	AEAssessmentAEAssessmentAssessmentOverrideEnumNone               AEAssessmentAEAssessmentAssessmentOverrideEnum = "None"
	AEAssessmentAEAssessmentAssessmentOverrideEnumOptOut             AEAssessmentAEAssessmentAssessmentOverrideEnum = "OptOut"
	AEAssessmentAEAssessmentAssessmentOverrideEnumOptIn              AEAssessmentAEAssessmentAssessmentOverrideEnum = "OptIn"
	AEAssessmentAEAssessmentAssessmentOverrideEnumVoluntaryJoiner    AEAssessmentAEAssessmentAssessmentOverrideEnum = "VoluntaryJoiner"
	AEAssessmentAEAssessmentAssessmentOverrideEnumContractualPension AEAssessmentAEAssessmentAssessmentOverrideEnum = "ContractualPension"
	AEAssessmentAEAssessmentAssessmentOverrideEnumCeasedMembership   AEAssessmentAEAssessmentAssessmentOverrideEnum = "CeasedMembership"
	AEAssessmentAEAssessmentAssessmentOverrideEnumLeaver             AEAssessmentAEAssessmentAssessmentOverrideEnum = "Leaver"
	AEAssessmentAEAssessmentAssessmentOverrideEnumExcluded           AEAssessmentAEAssessmentAssessmentOverrideEnum = "Excluded"
)

func (e *AEAssessmentAEAssessmentAssessmentOverrideEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "None":
		fallthrough
	case "OptOut":
		fallthrough
	case "OptIn":
		fallthrough
	case "VoluntaryJoiner":
		fallthrough
	case "ContractualPension":
		fallthrough
	case "CeasedMembership":
		fallthrough
	case "Leaver":
		fallthrough
	case "Excluded":
		*e = AEAssessmentAEAssessmentAssessmentOverrideEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for AEAssessmentAEAssessmentAssessmentOverrideEnum: %s", s)
	}
}

// AEAssessmentAEAssessmentAssessmentResultEnum - The a e assessments' assessment result
type AEAssessmentAEAssessmentAssessmentResultEnum string

const (
	AEAssessmentAEAssessmentAssessmentResultEnumInconclusive AEAssessmentAEAssessmentAssessmentResultEnum = "Inconclusive"
	AEAssessmentAEAssessmentAssessmentResultEnumNoChange     AEAssessmentAEAssessmentAssessmentResultEnum = "NoChange"
	AEAssessmentAEAssessmentAssessmentResultEnumEnrol        AEAssessmentAEAssessmentAssessmentResultEnum = "Enrol"
	AEAssessmentAEAssessmentAssessmentResultEnumExit         AEAssessmentAEAssessmentAssessmentResultEnum = "Exit"
)

func (e *AEAssessmentAEAssessmentAssessmentResultEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Inconclusive":
		fallthrough
	case "NoChange":
		fallthrough
	case "Enrol":
		fallthrough
	case "Exit":
		*e = AEAssessmentAEAssessmentAssessmentResultEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for AEAssessmentAEAssessmentAssessmentResultEnum: %s", s)
	}
}

type AEAssessmentAEAssessment struct {
	// The a e assessments' age
	Age *int `json:"Age,omitempty"`
	// The a e assessments' assessment code
	AssessmentCode *AEAssessmentAEAssessmentAssessmentCodeEnum `json:"AssessmentCode,omitempty"`
	// The a e assessments' assessment date
	AssessmentDate *types.Date `json:"AssessmentDate,omitempty"`
	// The a e assessments' assessment event
	AssessmentEvent *AEAssessmentAEAssessmentAssessmentEventEnum `json:"AssessmentEvent,omitempty"`
	// The a e assessments' assessment override
	AssessmentOverride *AEAssessmentAEAssessmentAssessmentOverrideEnum `json:"AssessmentOverride,omitempty"`
	// The a e assessments' assessment result
	AssessmentResult *AEAssessmentAEAssessmentAssessmentResultEnum `json:"AssessmentResult,omitempty"`
	// The a e assessments' is member of alternative pension scheme
	IsMemberOfAlternativePensionScheme *bool `json:"IsMemberOfAlternativePensionScheme,omitempty"`
	// The a e assessments' opt out window end date
	OptOutWindowEndDate *types.Date `json:"OptOutWindowEndDate,omitempty"`
	// The a e assessments' qualifying earnings
	QualifyingEarnings *float64 `json:"QualifyingEarnings,omitempty"`
	// The a e assessments' reenrolment date
	ReenrolmentDate *types.Date `json:"ReenrolmentDate,omitempty"`
	// The a e assessments' state pension age
	StatePensionAge *int `json:"StatePensionAge,omitempty"`
	// The a e assessments' state pension date
	StatePensionDate *types.Date `json:"StatePensionDate,omitempty"`
	// The a e assessments' tax period
	TaxPeriod *int `json:"TaxPeriod,omitempty"`
	// The a e assessments' tax year
	TaxYear *int `json:"TaxYear,omitempty"`
}

// AEAssessment - The a e assessment object.
type AEAssessment struct {
	AEAssessment *AEAssessmentAEAssessment `json:"AEAssessment,omitempty"`
}
