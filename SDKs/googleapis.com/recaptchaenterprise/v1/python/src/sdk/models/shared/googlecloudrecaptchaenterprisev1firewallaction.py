"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import googlecloudrecaptchaenterprisev1firewallactionsetheaderaction as shared_googlecloudrecaptchaenterprisev1firewallactionsetheaderaction
from ..shared import googlecloudrecaptchaenterprisev1firewallactionsubstituteaction as shared_googlecloudrecaptchaenterprisev1firewallactionsubstituteaction
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Any, Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GoogleCloudRecaptchaenterpriseV1FirewallAction:
    r"""An individual action. Each action represents what to do if a policy matches."""
    
    allow: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('allow'), 'exclude': lambda f: f is None }})
    r"""An allow action continues processing a request unimpeded."""  
    block: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('block'), 'exclude': lambda f: f is None }})
    r"""A block action serves an HTTP error code a prevents the request from hitting the backend."""  
    redirect: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('redirect'), 'exclude': lambda f: f is None }})
    r"""A redirect action returns a 307 (temporary redirect) response, pointing the user to a ReCaptcha interstitial page to attach a token."""  
    set_header: Optional[shared_googlecloudrecaptchaenterprisev1firewallactionsetheaderaction.GoogleCloudRecaptchaenterpriseV1FirewallActionSetHeaderAction] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('setHeader'), 'exclude': lambda f: f is None }})
    r"""A set header action sets a header and forwards the request to the backend. This can be used to trigger custom protection implemented on the backend."""  
    substitute: Optional[shared_googlecloudrecaptchaenterprisev1firewallactionsubstituteaction.GoogleCloudRecaptchaenterpriseV1FirewallActionSubstituteAction] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('substitute'), 'exclude': lambda f: f is None }})
    r"""A substitute action transparently serves a different page than the one requested."""  
    