/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

/**
 * HotelFullDetail - Full details on a hotel, including its room types and available rates
 */
public class HotelFullDetail {
    /**
     * Physical address
     */
    @JsonProperty("address")
    public Address address;
    public HotelFullDetail withAddress(Address address) {
        this.address = address;
        return this;
    }
    
    @JsonProperty("amenities")
    public Amenity[] amenities;
    public HotelFullDetail withAmenities(Amenity[] amenities) {
        this.amenities = amenities;
        return this;
    }
    
    /**
     * A time range. Open-ended time ranges are indicated by omitting either `start` or `end` in the object.
     */
    @JsonProperty("checkIn")
    public TimeRange checkIn;
    public HotelFullDetail withCheckIn(TimeRange checkIn) {
        this.checkIn = checkIn;
        return this;
    }
    
    /**
     * A time range. Open-ended time ranges are indicated by omitting either `start` or `end` in the object.
     */
    @JsonProperty("checkOut")
    public TimeRange checkOut;
    public HotelFullDetail withCheckOut(TimeRange checkOut) {
        this.checkOut = checkOut;
        return this;
    }
    
    /**
     * This determines if you can negotiate directly with the hotel. 
     */
    @JsonProperty("contractable")
    public Boolean contractable;
    public HotelFullDetail withContractable(Boolean contractable) {
        this.contractable = contractable;
        return this;
    }
    
    /**
     * Date and time (in UTC and ISO 8601 format) when the hotel's stable content (i.e. all the details of the hotel excluding its rates) was created.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("createdAt")
    public OffsetDateTime createdAt;
    public HotelFullDetail withCreatedAt(OffsetDateTime createdAt) {
        this.createdAt = createdAt;
        return this;
    }
    
    /**
     * The standard currency code used by the hotel.
     */
    @JsonProperty("currency")
    public String currency;
    public HotelFullDetail withCurrency(String currency) {
        this.currency = currency;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    public HotelFullDetailDescription description;
    public HotelFullDetail withDescription(HotelFullDetailDescription description) {
        this.description = description;
        return this;
    }
    
    @JsonProperty("emails")
    public String[] emails;
    public HotelFullDetail withEmails(String[] emails) {
        this.emails = emails;
        return this;
    }
    
    @JsonProperty("externalUrls")
    public ExternalUrl[] externalUrls;
    public HotelFullDetail withExternalUrls(ExternalUrl[] externalUrls) {
        this.externalUrls = externalUrls;
        return this;
    }
    
    /**
     * Unique identifier for this hotel within the Impala platform.
     */
    @JsonProperty("hotelId")
    public String hotelId;
    public HotelFullDetail withHotelId(String hotelId) {
        this.hotelId = hotelId;
        return this;
    }
    
    /**
     * Photos of the hotel, sorted in the recommended display order (e.g. for photo galleries) starting with the recommended hero image.
     */
    @JsonProperty("images")
    public Image[] images;
    public HotelFullDetail withImages(Image[] images) {
        this.images = images;
        return this;
    }
    
    /**
     * Precise location on a map (using WGS 84 longitude and latitude notation)
     */
    @JsonProperty("location")
    public Location location;
    public HotelFullDetail withLocation(Location location) {
        this.location = location;
        return this;
    }
    
    /**
     * Name of the hotel.
     */
    @JsonProperty("name")
    public String name;
    public HotelFullDetail withName(String name) {
        this.name = name;
        return this;
    }
    
    /**
     * The hotel's phone number(s)
     */
    @JsonProperty("phoneNumbers")
    public String[] phoneNumbers;
    public HotelFullDetail withPhoneNumbers(String[] phoneNumbers) {
        this.phoneNumbers = phoneNumbers;
        return this;
    }
    
    /**
     * The number of rooms at the hotel.
     */
    @JsonProperty("roomCount")
    public Double roomCount;
    public HotelFullDetail withRoomCount(Double roomCount) {
        this.roomCount = roomCount;
        return this;
    }
    
    /**
     * List of room types available at this hotel.
     */
    @JsonProperty("roomTypes")
    public RoomType[] roomTypes;
    public HotelFullDetail withRoomTypes(RoomType[] roomTypes) {
        this.roomTypes = roomTypes;
        return this;
    }
    
    /**
     * The star rating (or star-equivalent rating)
     */
    @JsonProperty("starRating")
    public Double starRating;
    public HotelFullDetail withStarRating(Double starRating) {
        this.starRating = starRating;
        return this;
    }
    
    /**
     * Rules and terms that apply to this hotel and have to be shown to your guest before the make their booking.
     */
    @JsonProperty("termsAndConditions")
    public String termsAndConditions;
    public HotelFullDetail withTermsAndConditions(String termsAndConditions) {
        this.termsAndConditions = termsAndConditions;
        return this;
    }
    
    /**
     * The timezone the hotel is in - e.g AST
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("timezone")
    public String timezone;
    public HotelFullDetail withTimezone(String timezone) {
        this.timezone = timezone;
        return this;
    }
    
    /**
     * Date and time (in UTC and ISO 8601 format) when the hotel's stable content (i.e. all the details of the hotel excluding its rates)  was last updated.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("updatedAt")
    public OffsetDateTime updatedAt;
    public HotelFullDetail withUpdatedAt(OffsetDateTime updatedAt) {
        this.updatedAt = updatedAt;
        return this;
    }
    
    /**
     * The URL to the hotel's website.
     */
    @JsonProperty("websiteUrl")
    public String websiteUrl;
    public HotelFullDetail withWebsiteUrl(String websiteUrl) {
        this.websiteUrl = websiteUrl;
        return this;
    }
    
}
