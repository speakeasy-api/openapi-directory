// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type AggregationTypeEnum string

const (
	AggregationTypeEnumFindingType       AggregationTypeEnum = "FINDING_TYPE"
	AggregationTypeEnumPackage           AggregationTypeEnum = "PACKAGE"
	AggregationTypeEnumTitle             AggregationTypeEnum = "TITLE"
	AggregationTypeEnumRepository        AggregationTypeEnum = "REPOSITORY"
	AggregationTypeEnumAmi               AggregationTypeEnum = "AMI"
	AggregationTypeEnumAwsEc2Instance    AggregationTypeEnum = "AWS_EC2_INSTANCE"
	AggregationTypeEnumAwsEcrContainer   AggregationTypeEnum = "AWS_ECR_CONTAINER"
	AggregationTypeEnumImageLayer        AggregationTypeEnum = "IMAGE_LAYER"
	AggregationTypeEnumAccount           AggregationTypeEnum = "ACCOUNT"
	AggregationTypeEnumAwsLambdaFunction AggregationTypeEnum = "AWS_LAMBDA_FUNCTION"
	AggregationTypeEnumLambdaLayer       AggregationTypeEnum = "LAMBDA_LAYER"
)

func (e AggregationTypeEnum) ToPointer() *AggregationTypeEnum {
	return &e
}

func (e *AggregationTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "FINDING_TYPE":
		fallthrough
	case "PACKAGE":
		fallthrough
	case "TITLE":
		fallthrough
	case "REPOSITORY":
		fallthrough
	case "AMI":
		fallthrough
	case "AWS_EC2_INSTANCE":
		fallthrough
	case "AWS_ECR_CONTAINER":
		fallthrough
	case "IMAGE_LAYER":
		fallthrough
	case "ACCOUNT":
		fallthrough
	case "AWS_LAMBDA_FUNCTION":
		fallthrough
	case "LAMBDA_LAYER":
		*e = AggregationTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AggregationTypeEnum: %v", v)
	}
}
