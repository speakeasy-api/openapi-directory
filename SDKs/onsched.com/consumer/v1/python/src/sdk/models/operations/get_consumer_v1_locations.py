"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import locationlistviewmodel as shared_locationlistviewmodel
from typing import Optional


@dataclasses.dataclass
class GetConsumerV1LocationsRequest:
    
    friendly_id: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'friendlyId', 'style': 'form', 'explode': True }})
    r"""Frienldy Id of location"""  
    ignore_primary: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'ignorePrimary', 'style': 'form', 'explode': True }})
    r"""Don't include the Primary Location"""  
    limit: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'limit', 'style': 'form', 'explode': True }})
    r"""Page limit, default 20, max 100"""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'name', 'style': 'form', 'explode': True }})
    r"""Location name (full or partial)"""  
    nearest_to: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'nearestTo', 'style': 'form', 'explode': True }})
    r"""Search by distance nearest Geocoords, City, Postal/Zip Code"""  
    offset: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'offset', 'style': 'form', 'explode': True }})
    r"""Starting row of page, default 0"""  
    proximity: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'proximity', 'style': 'form', 'explode': True }})
    r"""Maximum distance to display"""  
    region_id: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'regionId', 'style': 'form', 'explode': True }})
    r"""Locations within a specific region"""  
    service_id: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'serviceId', 'style': 'form', 'explode': True }})
    r"""Locations that offer this service"""  
    units: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'units', 'style': 'form', 'explode': True }})
    r"""Distance either imperial(miles), metric(kilometers)"""  
    

@dataclasses.dataclass
class GetConsumerV1LocationsResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    location_list_view_model: Optional[shared_locationlistviewmodel.LocationListViewModel] = dataclasses.field(default=None)
    r"""Success"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    