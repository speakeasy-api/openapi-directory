"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Retargeting:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def retargeting_count(self) -> operations.RetargetingCountResponse:
        r"""Retrieve count of retargeting scripts"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/retargeting/count'
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.RetargetingCountResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APICoreResponsesCountResponce])
                res.api_core_responses_count_responce = out
            if utils.match_content_type(content_type, 'text/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APICoreResponsesCountResponce])
                res.api_core_responses_count_responce = out
            if utils.match_content_type(content_type, 'application/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content
        elif http_res.status_code in [401, 500]:
            pass

        return res

    def retargeting_delete(self, request: operations.RetargetingDeleteRequest) -> operations.RetargetingDeleteResponse:
        r"""Deletes a retargeting script (and remove associations)"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.RetargetingDeleteRequest, base_url, '/retargeting/{id}', request)
        
        
        client = self._security_client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.RetargetingDeleteResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APICoreResponsesEntityURISystemInt64])
                res.api_core_responses_entity_uri_system_int64 = out
            if utils.match_content_type(content_type, 'text/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APICoreResponsesEntityURISystemInt64])
                res.api_core_responses_entity_uri_system_int64 = out
            if utils.match_content_type(content_type, 'application/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content
        elif http_res.status_code in [401, 404, 500]:
            pass

        return res

    def retargeting_get(self, request: operations.RetargetingGetRequest) -> operations.RetargetingGetResponse:
        r"""List of all the retargeting scripts associated to the user"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/retargeting'
        
        query_params = utils.get_query_params(operations.RetargetingGetRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.RetargetingGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APICoreResponsesEntitiesResponseAPICoreResponsesEntityURISystemInt64])
                res.api_core_responses_entities_response_api_core_responses_entity_uri_system_int64 = out
            if utils.match_content_type(content_type, 'text/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APICoreResponsesEntitiesResponseAPICoreResponsesEntityURISystemInt64])
                res.api_core_responses_entities_response_api_core_responses_entity_uri_system_int64 = out
        elif http_res.status_code in [401, 404, 500]:
            pass

        return res

    def retargeting_get_datapoints(self, request: operations.RetargetingGetDatapointsRequest) -> operations.RetargetingGetDatapointsResponse:
        r"""List of all the datapoints associated to the retargeting script."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.RetargetingGetDatapointsRequest, base_url, '/retargeting/{id}/datapoints', request)
        
        query_params = utils.get_query_params(operations.RetargetingGetDatapointsRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.RetargetingGetDatapointsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APICoreResponsesEntitiesResponseAPICoreResponsesEntityURISystemInt64])
                res.api_core_responses_entities_response_api_core_responses_entity_uri_system_int64 = out
            if utils.match_content_type(content_type, 'text/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APICoreResponsesEntitiesResponseAPICoreResponsesEntityURISystemInt64])
                res.api_core_responses_entities_response_api_core_responses_entity_uri_system_int64 = out
        elif http_res.status_code in [401, 404, 500]:
            pass

        return res

    def retargeting_get_datapoints_count(self, request: operations.RetargetingGetDatapointsCountRequest) -> operations.RetargetingGetDatapointsCountResponse:
        r"""Count the datapoints associated to the retargeting script."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.RetargetingGetDatapointsCountRequest, base_url, '/retargeting/{id}/datapoints/count', request)
        
        query_params = utils.get_query_params(operations.RetargetingGetDatapointsCountRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.RetargetingGetDatapointsCountResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APICoreResponsesCountResponce])
                res.api_core_responses_count_responce = out
            if utils.match_content_type(content_type, 'text/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APICoreResponsesCountResponce])
                res.api_core_responses_count_responce = out
            if utils.match_content_type(content_type, 'application/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content
        elif http_res.status_code in [401, 404, 500]:
            pass

        return res

    def retargeting_post_form(self, request: operations.RetargetingPostFormRequest) -> operations.RetargetingPostFormResponse:
        r"""Updates a retargeting script"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.RetargetingPostFormRequest, base_url, '/retargeting/{id}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "api_core_dto_retargeting_retargeting_script", 'form')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.RetargetingPostFormResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APICoreResponsesEntityURISystemInt64])
                res.api_core_responses_entity_uri_system_int64 = out
            if utils.match_content_type(content_type, 'text/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APICoreResponsesEntityURISystemInt64])
                res.api_core_responses_entity_uri_system_int64 = out
            if utils.match_content_type(content_type, 'application/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content
        elif http_res.status_code in [401, 404, 500]:
            pass

        return res

    def retargeting_post_json(self, request: operations.RetargetingPostJSONRequest) -> operations.RetargetingPostJSONResponse:
        r"""Updates a retargeting script"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.RetargetingPostJSONRequest, base_url, '/retargeting/{id}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "api_core_dto_retargeting_retargeting_script", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.RetargetingPostJSONResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APICoreResponsesEntityURISystemInt64])
                res.api_core_responses_entity_uri_system_int64 = out
            if utils.match_content_type(content_type, 'text/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APICoreResponsesEntityURISystemInt64])
                res.api_core_responses_entity_uri_system_int64 = out
            if utils.match_content_type(content_type, 'application/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content
        elif http_res.status_code in [401, 404, 500]:
            pass

        return res

    def retargeting_post_raw(self, request: operations.RetargetingPostRawRequest) -> operations.RetargetingPostRawResponse:
        r"""Updates a retargeting script"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.RetargetingPostRawRequest, base_url, '/retargeting/{id}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'raw')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.RetargetingPostRawResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APICoreResponsesEntityURISystemInt64])
                res.api_core_responses_entity_uri_system_int64 = out
            if utils.match_content_type(content_type, 'text/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APICoreResponsesEntityURISystemInt64])
                res.api_core_responses_entity_uri_system_int64 = out
            if utils.match_content_type(content_type, 'application/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content
        elif http_res.status_code in [401, 404, 500]:
            pass

        return res

    def retargeting_put_form(self, request: shared.APICoreDtoRetargetingRetargetingScript) -> operations.RetargetingPutFormResponse:
        r"""Creates a retargeting script"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/retargeting'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'form')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.RetargetingPutFormResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APICoreResponsesEntityURISystemInt64])
                res.api_core_responses_entity_uri_system_int64 = out
            if utils.match_content_type(content_type, 'text/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APICoreResponsesEntityURISystemInt64])
                res.api_core_responses_entity_uri_system_int64 = out
            if utils.match_content_type(content_type, 'application/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content
        elif http_res.status_code in [401, 404, 500]:
            pass

        return res

    def retargeting_put_json(self, request: shared.APICoreDtoRetargetingRetargetingScript) -> operations.RetargetingPutJSONResponse:
        r"""Creates a retargeting script"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/retargeting'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.RetargetingPutJSONResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APICoreResponsesEntityURISystemInt64])
                res.api_core_responses_entity_uri_system_int64 = out
            if utils.match_content_type(content_type, 'text/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APICoreResponsesEntityURISystemInt64])
                res.api_core_responses_entity_uri_system_int64 = out
            if utils.match_content_type(content_type, 'application/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content
        elif http_res.status_code in [401, 404, 500]:
            pass

        return res

    def retargeting_put_raw(self, request: bytes) -> operations.RetargetingPutRawResponse:
        r"""Creates a retargeting script"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/retargeting'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'raw')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.RetargetingPutRawResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APICoreResponsesEntityURISystemInt64])
                res.api_core_responses_entity_uri_system_int64 = out
            if utils.match_content_type(content_type, 'text/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APICoreResponsesEntityURISystemInt64])
                res.api_core_responses_entity_uri_system_int64 = out
            if utils.match_content_type(content_type, 'application/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content
        elif http_res.status_code in [401, 404, 500]:
            pass

        return res

    def get_retargeting_id_(self, request: operations.GetRetargetingIDRequest) -> operations.GetRetargetingIDResponse:
        r"""Get a retargeting script object"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetRetargetingIDRequest, base_url, '/retargeting/{id}', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetRetargetingIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APICoreDtoRetargetingRetargetingScript])
                res.api_core_dto_retargeting_retargeting_script = out
            if utils.match_content_type(content_type, 'text/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APICoreDtoRetargetingRetargetingScript])
                res.api_core_dto_retargeting_retargeting_script = out
            if utils.match_content_type(content_type, 'application/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content
        elif http_res.status_code in [401, 404, 500]:
            pass

        return res

    