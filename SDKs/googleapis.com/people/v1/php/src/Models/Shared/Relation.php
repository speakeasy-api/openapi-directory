<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Shared;


/**
 * Relation - A person's relation to another person.
 * 
 * @package OpenAPI\OpenAPI\Models\Shared
 * @access public
 */
class Relation
{
    /**
     * Output only. The type of the relation translated and formatted in the viewer's account locale or the locale specified in the Accept-Language HTTP header.
     * 
     * @var ?string $formattedType
     */
	#[\JMS\Serializer\Annotation\SerializedName('formattedType')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $formattedType = null;
    
    /**
     * Metadata about a field.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\FieldMetadata $metadata
     */
	#[\JMS\Serializer\Annotation\SerializedName('metadata')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\FieldMetadata')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?FieldMetadata $metadata = null;
    
    /**
     * The name of the other person this relation refers to.
     * 
     * @var ?string $person
     */
	#[\JMS\Serializer\Annotation\SerializedName('person')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $person = null;
    
    /**
     * The person's relation to the other person. The type can be custom or one of these predefined values: * `spouse` * `child` * `mother` * `father` * `parent` * `brother` * `sister` * `friend` * `relative` * `domesticPartner` * `manager` * `assistant` * `referredBy` * `partner`
     * 
     * @var ?string $type
     */
	#[\JMS\Serializer\Annotation\SerializedName('type')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $type = null;
    
	public function __construct()
	{
		$this->formattedType = null;
		$this->metadata = null;
		$this->person = null;
		$this->type = null;
	}
}
