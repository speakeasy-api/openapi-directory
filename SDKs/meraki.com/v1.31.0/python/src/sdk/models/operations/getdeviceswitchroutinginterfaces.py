"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclasses.dataclass
class GetDeviceSwitchRoutingInterfacesRequest:
    
    serial: str = dataclasses.field(metadata={'path_param': { 'field_name': 'serial', 'style': 'simple', 'explode': False }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetDeviceSwitchRoutingInterfaces200ApplicationJSONIpv6:
    r"""IPv6 addressing"""
    
    address: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('address'), 'exclude': lambda f: f is None }})
    r"""IPv6 address"""  
    assignment_mode: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('assignmentMode'), 'exclude': lambda f: f is None }})
    r"""Assignment mode"""  
    gateway: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('gateway'), 'exclude': lambda f: f is None }})
    r"""IPv6 gateway"""  
    prefix: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('prefix'), 'exclude': lambda f: f is None }})
    r"""IPv6 subnet"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetDeviceSwitchRoutingInterfaces200ApplicationJSONOspfSettings:
    r"""IPv4 OSPF Settings"""
    
    area: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('area'), 'exclude': lambda f: f is None }})
    r"""Area id"""  
    cost: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cost'), 'exclude': lambda f: f is None }})
    r"""OSPF Cost"""  
    is_passive_enabled: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('isPassiveEnabled'), 'exclude': lambda f: f is None }})
    r"""Disable sending Hello packets on this interface's IPv4 area"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetDeviceSwitchRoutingInterfaces200ApplicationJSONOspfV3:
    r"""IPv6 OSPF Settings"""
    
    area: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('area'), 'exclude': lambda f: f is None }})
    r"""Area id"""  
    cost: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cost'), 'exclude': lambda f: f is None }})
    r"""OSPF Cost"""  
    is_passive_enabled: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('isPassiveEnabled'), 'exclude': lambda f: f is None }})
    r"""Disable sending Hello packets on this interface's IPv6 area"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetDeviceSwitchRoutingInterfaces200ApplicationJSON:
    
    default_gateway: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('defaultGateway'), 'exclude': lambda f: f is None }})
    r"""IPv4 default gateway"""  
    interface_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('interfaceId'), 'exclude': lambda f: f is None }})
    r"""The id"""  
    interface_ip: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('interfaceIp'), 'exclude': lambda f: f is None }})
    r"""IPv4 address"""  
    ipv6: Optional[GetDeviceSwitchRoutingInterfaces200ApplicationJSONIpv6] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ipv6'), 'exclude': lambda f: f is None }})
    r"""IPv6 addressing"""  
    multicast_routing: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('multicastRouting'), 'exclude': lambda f: f is None }})
    r"""Multicast routing status"""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""The name"""  
    ospf_settings: Optional[GetDeviceSwitchRoutingInterfaces200ApplicationJSONOspfSettings] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ospfSettings'), 'exclude': lambda f: f is None }})
    r"""IPv4 OSPF Settings"""  
    ospf_v3: Optional[GetDeviceSwitchRoutingInterfaces200ApplicationJSONOspfV3] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ospfV3'), 'exclude': lambda f: f is None }})
    r"""IPv6 OSPF Settings"""  
    subnet: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('subnet'), 'exclude': lambda f: f is None }})
    r"""IPv4 subnet"""  
    vlan_id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('vlanId'), 'exclude': lambda f: f is None }})
    r"""VLAN id"""  
    

@dataclasses.dataclass
class GetDeviceSwitchRoutingInterfacesResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    get_device_switch_routing_interfaces_200_application_json_objects: Optional[list[GetDeviceSwitchRoutingInterfaces200ApplicationJSON]] = dataclasses.field(default=None)
    r"""Successful operation"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    