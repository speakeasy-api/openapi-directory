<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class RoomsLocation 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Add a location
     * 
     * Add a location to the [location hierarchial structure(s)](https://support.zoom.us/hc/en-us/articles/115000342983-Zoom-Rooms-Location-Hierarchy) of Zoom Rooms in an account.
     * 
     * **Prerequisites:**
     * * Account owner or admin permissions.
     * * Zoom Rooms Version 4.0 or higher<br><br>
     * **Scopes:** `room:write:admin`<br> 
     * 
     *  
     *  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AddAZRLocationApplicationJSON $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AddAZRLocationSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AddAZRLocationResponse
     */
	public function addAZRLocation(
        \OpenAPI\OpenAPI\Models\Operations\AddAZRLocationApplicationJSON $request,
        \OpenAPI\OpenAPI\Models\Operations\AddAZRLocationSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AddAZRLocationResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/rooms/locations');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AddAZRLocationResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->addAZRLocation200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\AddAZRLocation200ApplicationJSON', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'application/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * Change the assigned parent location
     * 
     * An account owner of a Zoom account can establish a [Zoom Rooms Location Hierarchy](https://support.zoom.us/hc/en-us/articles/115000342983-Zoom-Rooms-Location-Hierarchy) to better organize Zoom Rooms spread accross various location. The location can be structured in a hierarchy with Country being the top-level location, followed by city, campus, building, and floor. The location in the lower level in the hierarchy is considered as a child of the location that is a level above in the hierarchy. Use this API to change the parent location of a child location. <br><br> For instance, if the location hierarchy is structured in a way where there are two campuses (Campus 1, and Campus 2) in a City and Campus 1 consists of a building named Building 1 with a floor where Zoom Rooms are located, and you would like to rearrange the structure so that Building 1 along with its child locations (floor and Zoom Rooms) are relocated directly under Campus 2 instead of Campus 1, you must provide the location ID of Building 1 in the path parameter of this request and the location ID of Campus 2 as the value of `parent_location_id` in the  request body.<br><br>
     * **Prerequisite:**<br>
     * * Account owner or admin permission
     * * Zoom Rooms version 4.0 or higher<br>
     * **Scopes:** `room:write:admin`<br><br> 
     *  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ChangeParentLocationRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ChangeParentLocationSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ChangeParentLocationResponse
     */
	public function changeParentLocation(
        \OpenAPI\OpenAPI\Models\Operations\ChangeParentLocationRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ChangeParentLocationSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ChangeParentLocationResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/rooms/locations/{locationId}/location', \OpenAPI\OpenAPI\Models\Operations\ChangeParentLocationRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ChangeParentLocationResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->changeParentLocation204ApplicationJSONAny = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'application/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * Get Zoom Room location profile
     * 
     * Each location type of the [Zoom Rooms location hierarchy](https://support.zoom.us/hc/en-us/articles/115000342983-Zoom-Rooms-Location-Hierarchy) has a profile page that includes information such as name of the location, address, support email, etc. Use this API to retrieve information about a specific Zoom Rooms location type such as information about the city where the Zoom Rooms is located.
     * 
     * **Prerequisite:**<br>
     * * Account owner or admin permission
     * * Zoom Rooms version 4.0 or higher<br>
     * **Scopes:** `room:read:admin`<br> 
     *  
     *  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetZRLocationProfileRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetZRLocationProfileSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetZRLocationProfileResponse
     */
	public function getZRLocationProfile(
        \OpenAPI\OpenAPI\Models\Operations\GetZRLocationProfileRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetZRLocationProfileSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetZRLocationProfileResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/rooms/locations/{locationId}', \OpenAPI\OpenAPI\Models\Operations\GetZRLocationProfileRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetZRLocationProfileResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getZRLocationProfile200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetZRLocationProfile200ApplicationJSON', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'application/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * Get location settings
     * 
     * Get information on meeting or alert settings applied to Zoom Rooms located in a specific location. By default, only **Meeting Settings** are returned. To view only **Alert Settings**, specify `alert` as the value of the `setting_type` query parameter.<br><br>
     * **Prerequisites:**<br>
     * * Zoom Room licenses
     * * Owner or Admin privileges on the Zoom Account.<br>
     * **Scopes:** `room:read:admin`<br> 
     *  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetZRLocationSettingsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetZRLocationSettingsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetZRLocationSettingsResponse
     */
	public function getZRLocationSettings(
        \OpenAPI\OpenAPI\Models\Operations\GetZRLocationSettingsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetZRLocationSettingsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetZRLocationSettingsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/rooms/locations/{locationId}/settings', \OpenAPI\OpenAPI\Models\Operations\GetZRLocationSettingsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetZRLocationSettingsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetZRLocationSettingsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getZRLocationSettings200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'application/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * Get Zoom Room location structure
     * 
     * Get the [location hierarchial structure(s)](https://support.zoom.us/hc/en-us/articles/115000342983-Zoom-Rooms-Location-Hierarchy) applied on the Zoom Rooms in an account.<br><br>
     * **Prerequisites:**<br>
     * * Zoom Rooms version 4.0 or higher
     * * Account owner or admin permissions<br>
     * **Scopes:** `room:read:admin`<br> 
     *  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\GetZRLocationStructureResponse
     */
	public function getZRLocationStructure(
    ): \OpenAPI\OpenAPI\Models\Operations\GetZRLocationStructureResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/rooms/locations/structure');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetZRLocationStructureResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getZRLocationStructure200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetZRLocationStructure200ApplicationJSON', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'application/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
	
    /**
     * List Zoom Room locations
     * 
     * A Zoom account owner or a Zoom Room administrator can establish a [location hierarchy](https://support.zoom.us/hc/en-us/articles/115000342983-Zoom-Rooms-Location-Hierarchy) to help manage Zoom Rooms that are spread among a variety of locations. Use this API to list the different location types used for Zoom Rooms in an account.<br><br>
     * **Prerequisites:**
     * * Account owner or admin permissions.
     * * Zoom Rooms Version 4.0 or higher<br><br>
     * **Scopes:** `room:read:admin`<br> 
     *  
     *  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListZRLocationsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListZRLocationsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ListZRLocationsResponse
     */
	public function listZRLocations(
        \OpenAPI\OpenAPI\Models\Operations\ListZRLocationsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListZRLocationsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ListZRLocationsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/rooms/locations');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListZRLocationsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListZRLocationsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listZRLocations200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ListZRLocations200ApplicationJSON', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'application/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * Update Zoom Room location profile
     * 
     * Each location type of the [Zoom Rooms location hierarchy](https://support.zoom.us/hc/en-us/articles/115000342983-Zoom-Rooms-Location-Hierarchy) has a profile page that includes information such as name of the location, address, support email, etc. Use this API to update information about a specific Zoom Rooms location type such as information about the city where the Zoom Rooms is located.
     * 
     * **Prerequisite:**<br>
     * * Account owner or admin permission
     * * Zoom Rooms version 4.0 or higher<br>
     * **Scopes:** `room:write:admin`<br> 
     * 
     *  
     *  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateZRLocationProfileRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateZRLocationProfileSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateZRLocationProfileResponse
     */
	public function updateZRLocationProfile(
        \OpenAPI\OpenAPI\Models\Operations\UpdateZRLocationProfileRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\UpdateZRLocationProfileSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateZRLocationProfileResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/rooms/locations/{locationId}', \OpenAPI\OpenAPI\Models\Operations\UpdateZRLocationProfileRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateZRLocationProfileResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateZRLocationProfile200ApplicationJSONAny = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'application/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Update location settings
     * 
     * Update information on either meeting or alert settings applied to Zoom Rooms located in a specific location. To update **Alert Settings**, specify `alert` as the value of the `setting_type` query parameter. Similarly, to update **Meeting Settings**, specify `meeting` as the value of the `setting_type` query parameter.<br><br>
     * **Prerequisites:**<br>
     * * Zoom Room licenses
     * * Owner or Admin privileges on the Zoom Account.<br>
     * **Scopes:** `room:write:admin`<br> 
     *  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateZRLocationSettingsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateZRLocationSettingsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateZRLocationSettingsResponse
     */
	public function updateZRLocationSettings(
        \OpenAPI\OpenAPI\Models\Operations\UpdateZRLocationSettingsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\UpdateZRLocationSettingsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateZRLocationSettingsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/rooms/locations/{locationId}/settings', \OpenAPI\OpenAPI\Models\Operations\UpdateZRLocationSettingsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\UpdateZRLocationSettingsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateZRLocationSettingsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateZRLocationSettings204ApplicationJSONAny = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'application/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * Update Zoom Rooms location structure
     * 
     * Update the [location hierarchial structure(s)](https://support.zoom.us/hc/en-us/articles/115000342983-Zoom-Rooms-Location-Hierarchy) applied on the Zoom Rooms in an account.<br><br>
     * **Prerequisites:**<br>
     * * Zoom Rooms version 4.0 or higher
     * * Account owner or admin permissions<br>
     * **Scopes:** `room:write:admin`<br> 
     *  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateZoomRoomsLocationStructureApplicationJSON $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateZoomRoomsLocationStructureSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateZoomRoomsLocationStructureResponse
     */
	public function updateZoomRoomsLocationStructure(
        \OpenAPI\OpenAPI\Models\Operations\UpdateZoomRoomsLocationStructureApplicationJSON $request,
        \OpenAPI\OpenAPI\Models\Operations\UpdateZoomRoomsLocationStructureSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateZoomRoomsLocationStructureResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/rooms/locations/structure');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateZoomRoomsLocationStructureResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateZoomRoomsLocationStructure204ApplicationJSONAny = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'application/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
}