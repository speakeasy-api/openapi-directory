"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import listpublickeysrequest as shared_listpublickeysrequest
from ..shared import listpublickeysresponse as shared_listpublickeysresponse
from enum import Enum
from typing import Any, Optional

class ListPublicKeysXAmzTargetEnum(str, Enum):
    COM_AMAZONAWS_CLOUDTRAIL_V20131101_CLOUD_TRAIL_20131101_LIST_PUBLIC_KEYS = 'com.amazonaws.cloudtrail.v20131101.CloudTrail_20131101.ListPublicKeys'


@dataclasses.dataclass
class ListPublicKeysRequest:
    
    list_public_keys_request: shared_listpublickeysrequest.ListPublicKeysRequest = dataclasses.field(metadata={'request': { 'media_type': 'application/json' }})  
    x_amz_target: ListPublicKeysXAmzTargetEnum = dataclasses.field(metadata={'header': { 'field_name': 'X-Amz-Target', 'style': 'simple', 'explode': False }})  
    next_token: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'NextToken', 'style': 'form', 'explode': True }})
    r"""Pagination token"""  
    x_amz_algorithm: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Algorithm', 'style': 'simple', 'explode': False }})  
    x_amz_content_sha256: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Content-Sha256', 'style': 'simple', 'explode': False }})  
    x_amz_credential: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Credential', 'style': 'simple', 'explode': False }})  
    x_amz_date: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Date', 'style': 'simple', 'explode': False }})  
    x_amz_security_token: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Security-Token', 'style': 'simple', 'explode': False }})  
    x_amz_signature: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Signature', 'style': 'simple', 'explode': False }})  
    x_amz_signed_headers: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-SignedHeaders', 'style': 'simple', 'explode': False }})  
    

@dataclasses.dataclass
class ListPublicKeysResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    invalid_time_range_exception: Optional[Any] = dataclasses.field(default=None)
    r"""InvalidTimeRangeException"""  
    invalid_token_exception: Optional[Any] = dataclasses.field(default=None)
    r"""InvalidTokenException"""  
    list_public_keys_response: Optional[shared_listpublickeysresponse.ListPublicKeysResponse] = dataclasses.field(default=None)
    r"""Success"""  
    operation_not_permitted_exception: Optional[Any] = dataclasses.field(default=None)
    r"""OperationNotPermittedException"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    unsupported_operation_exception: Optional[Any] = dataclasses.field(default=None)
    r"""UnsupportedOperationException"""  
    