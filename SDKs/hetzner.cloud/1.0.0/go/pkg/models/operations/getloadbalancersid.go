// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

type GetLoadBalancersIDPathParams struct {
	// ID of the Load Balancer
	ID int64 `pathParam:"style=simple,explode=false,name=id"`
}

type GetLoadBalancersIDRequest struct {
	PathParams GetLoadBalancersIDPathParams
}

// GetLoadBalancersID200ApplicationJSONLoadBalancerAlgorithmTypeEnum - Type of the algorithm
type GetLoadBalancersID200ApplicationJSONLoadBalancerAlgorithmTypeEnum string

const (
	GetLoadBalancersID200ApplicationJSONLoadBalancerAlgorithmTypeEnumRoundRobin       GetLoadBalancersID200ApplicationJSONLoadBalancerAlgorithmTypeEnum = "round_robin"
	GetLoadBalancersID200ApplicationJSONLoadBalancerAlgorithmTypeEnumLeastConnections GetLoadBalancersID200ApplicationJSONLoadBalancerAlgorithmTypeEnum = "least_connections"
)

func (e *GetLoadBalancersID200ApplicationJSONLoadBalancerAlgorithmTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "round_robin":
		fallthrough
	case "least_connections":
		*e = GetLoadBalancersID200ApplicationJSONLoadBalancerAlgorithmTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetLoadBalancersID200ApplicationJSONLoadBalancerAlgorithmTypeEnum: %s", s)
	}
}

// GetLoadBalancersID200ApplicationJSONLoadBalancerAlgorithm - Algorithm of the Load Balancer
type GetLoadBalancersID200ApplicationJSONLoadBalancerAlgorithm struct {
	// Type of the algorithm
	Type GetLoadBalancersID200ApplicationJSONLoadBalancerAlgorithmTypeEnum `json:"type"`
}

// GetLoadBalancersID200ApplicationJSONLoadBalancerLoadBalancerTypePricesPriceHourly - Hourly costs for a Resource in this Location
type GetLoadBalancersID200ApplicationJSONLoadBalancerLoadBalancerTypePricesPriceHourly struct {
	// Price with VAT added
	Gross string `json:"gross"`
	// Price without VAT
	Net string `json:"net"`
}

// GetLoadBalancersID200ApplicationJSONLoadBalancerLoadBalancerTypePricesPriceMonthly - Monthly costs for a Resource in this Location
type GetLoadBalancersID200ApplicationJSONLoadBalancerLoadBalancerTypePricesPriceMonthly struct {
	// Price with VAT added
	Gross string `json:"gross"`
	// Price without VAT
	Net string `json:"net"`
}

type GetLoadBalancersID200ApplicationJSONLoadBalancerLoadBalancerTypePrices struct {
	// Name of the Location the price is for
	Location string `json:"location"`
	// Hourly costs for a Resource in this Location
	PriceHourly GetLoadBalancersID200ApplicationJSONLoadBalancerLoadBalancerTypePricesPriceHourly `json:"price_hourly"`
	// Monthly costs for a Resource in this Location
	PriceMonthly GetLoadBalancersID200ApplicationJSONLoadBalancerLoadBalancerTypePricesPriceMonthly `json:"price_monthly"`
}

type GetLoadBalancersID200ApplicationJSONLoadBalancerLoadBalancerType struct {
	// Point in time when the Load Balancer type is deprecated (in ISO-8601 format)
	Deprecated string `json:"deprecated"`
	// Description of the Load Balancer type
	Description string `json:"description"`
	// ID of the Load Balancer type
	ID float64 `json:"id"`
	// Number of SSL Certificates that can be assigned to a single Load Balancer
	MaxAssignedCertificates float64 `json:"max_assigned_certificates"`
	// Number of maximum simultaneous open connections
	MaxConnections float64 `json:"max_connections"`
	// Number of services a Load Balancer of this type can have
	MaxServices float64 `json:"max_services"`
	// Number of targets a single Load Balancer can have
	MaxTargets float64 `json:"max_targets"`
	// Unique identifier of the Load Balancer type
	Name string `json:"name"`
	// Prices in different network zones
	Prices []GetLoadBalancersID200ApplicationJSONLoadBalancerLoadBalancerTypePrices `json:"prices"`
}

type GetLoadBalancersID200ApplicationJSONLoadBalancerLocation struct {
	// City the Location is closest to
	City string `json:"city"`
	// ISO 3166-1 alpha-2 code of the country the Location resides in
	Country string `json:"country"`
	// Description of the Location
	Description string `json:"description"`
	// ID of the Location
	ID float64 `json:"id"`
	// Latitude of the city closest to the Location
	Latitude float64 `json:"latitude"`
	// Longitude of the city closest to the Location
	Longitude float64 `json:"longitude"`
	// Unique identifier of the Location
	Name string `json:"name"`
	// Name of network zone this Location resides in
	NetworkZone string `json:"network_zone"`
}

type GetLoadBalancersID200ApplicationJSONLoadBalancerPrivateNet struct {
	IP      *string `json:"ip,omitempty"`
	Network *int64  `json:"network,omitempty"`
}

// GetLoadBalancersID200ApplicationJSONLoadBalancerProtection - Protection configuration for the Resource
type GetLoadBalancersID200ApplicationJSONLoadBalancerProtection struct {
	// If true, prevents the Resource from being deleted
	Delete bool `json:"delete"`
}

// GetLoadBalancersID200ApplicationJSONLoadBalancerPublicNetIpv4 - IP address (v4)
type GetLoadBalancersID200ApplicationJSONLoadBalancerPublicNetIpv4 struct {
	// Reverse DNS PTR entry for the IPv4 address of this Load Balancer
	DNSPtr *string `json:"dns_ptr,omitempty"`
	// IP address (v4) of this Load Balancer
	IP *string `json:"ip,omitempty"`
}

// GetLoadBalancersID200ApplicationJSONLoadBalancerPublicNetIpv6 - IP address (v6)
type GetLoadBalancersID200ApplicationJSONLoadBalancerPublicNetIpv6 struct {
	// Reverse DNS PTR entry for the IPv6 address of this Load Balancer
	DNSPtr *string `json:"dns_ptr,omitempty"`
	// IP address (v6) of this Load Balancer
	IP *string `json:"ip,omitempty"`
}

// GetLoadBalancersID200ApplicationJSONLoadBalancerPublicNet - Public network information
type GetLoadBalancersID200ApplicationJSONLoadBalancerPublicNet struct {
	// Public Interface enabled or not
	Enabled bool `json:"enabled"`
	// IP address (v4)
	Ipv4 GetLoadBalancersID200ApplicationJSONLoadBalancerPublicNetIpv4 `json:"ipv4"`
	// IP address (v6)
	Ipv6 GetLoadBalancersID200ApplicationJSONLoadBalancerPublicNetIpv6 `json:"ipv6"`
}

// GetLoadBalancersID200ApplicationJSONLoadBalancerLoadBalancerServiceLoadBalancerServiceHealthCheckHTTP - Additional configuration for protocol http
type GetLoadBalancersID200ApplicationJSONLoadBalancerLoadBalancerServiceLoadBalancerServiceHealthCheckHTTP struct {
	// Host header to send in the HTTP request. May not contain spaces, percent or backslash symbols. Can be null, in that case no host header is sent.
	Domain string `json:"domain"`
	// HTTP path to use for health checks
	Path string `json:"path"`
	// String that must be contained in HTTP response in order to pass the health check
	Response *string `json:"response,omitempty"`
	// List of returned HTTP status codes in order to pass the health check. Supports the wildcards `?` for exactly one character and `*` for multiple ones. The default is to pass the health check for any status code between 2?? and 3??.
	StatusCodes []string `json:"status_codes,omitempty"`
	// Use HTTPS for health check
	TLS *bool `json:"tls,omitempty"`
}

// GetLoadBalancersID200ApplicationJSONLoadBalancerLoadBalancerServiceLoadBalancerServiceHealthCheckProtocolEnum - Type of the health check
type GetLoadBalancersID200ApplicationJSONLoadBalancerLoadBalancerServiceLoadBalancerServiceHealthCheckProtocolEnum string

const (
	GetLoadBalancersID200ApplicationJSONLoadBalancerLoadBalancerServiceLoadBalancerServiceHealthCheckProtocolEnumTCP  GetLoadBalancersID200ApplicationJSONLoadBalancerLoadBalancerServiceLoadBalancerServiceHealthCheckProtocolEnum = "tcp"
	GetLoadBalancersID200ApplicationJSONLoadBalancerLoadBalancerServiceLoadBalancerServiceHealthCheckProtocolEnumHTTP GetLoadBalancersID200ApplicationJSONLoadBalancerLoadBalancerServiceLoadBalancerServiceHealthCheckProtocolEnum = "http"
)

func (e *GetLoadBalancersID200ApplicationJSONLoadBalancerLoadBalancerServiceLoadBalancerServiceHealthCheckProtocolEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "tcp":
		fallthrough
	case "http":
		*e = GetLoadBalancersID200ApplicationJSONLoadBalancerLoadBalancerServiceLoadBalancerServiceHealthCheckProtocolEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetLoadBalancersID200ApplicationJSONLoadBalancerLoadBalancerServiceLoadBalancerServiceHealthCheckProtocolEnum: %s", s)
	}
}

// GetLoadBalancersID200ApplicationJSONLoadBalancerLoadBalancerServiceLoadBalancerServiceHealthCheck - Service health check
type GetLoadBalancersID200ApplicationJSONLoadBalancerLoadBalancerServiceLoadBalancerServiceHealthCheck struct {
	// Additional configuration for protocol http
	HTTP *GetLoadBalancersID200ApplicationJSONLoadBalancerLoadBalancerServiceLoadBalancerServiceHealthCheckHTTP `json:"http,omitempty"`
	// Time interval in seconds health checks are performed
	Interval int64 `json:"interval"`
	// Port the health check will be performed on
	Port int64 `json:"port"`
	// Type of the health check
	Protocol GetLoadBalancersID200ApplicationJSONLoadBalancerLoadBalancerServiceLoadBalancerServiceHealthCheckProtocolEnum `json:"protocol"`
	// Unsuccessful retries needed until a target is considered unhealthy; an unhealthy target needs the same number of successful retries to become healthy again
	Retries int64 `json:"retries"`
	// Time in seconds after an attempt is considered a timeout
	Timeout int64 `json:"timeout"`
}

// GetLoadBalancersID200ApplicationJSONLoadBalancerLoadBalancerServiceHTTP - Configuration option for protocols http and https
type GetLoadBalancersID200ApplicationJSONLoadBalancerLoadBalancerServiceHTTP struct {
	// IDs of the Certificates to use for TLS/SSL termination by the Load Balancer; empty for TLS/SSL passthrough or if `protocol` is "http"
	Certificates []int64 `json:"certificates,omitempty"`
	// Lifetime of the cookie used for sticky sessions
	CookieLifetime int64 `json:"cookie_lifetime"`
	// Name of the cookie used for sticky sessions
	CookieName string `json:"cookie_name"`
	// Redirect HTTP requests to HTTPS. Only available if protocol is "https". Default `false`
	RedirectHTTP *bool `json:"redirect_http,omitempty"`
	// Use sticky sessions. Only available if protocol is "http" or "https". Default `false`
	StickySessions *bool `json:"sticky_sessions,omitempty"`
}

// GetLoadBalancersID200ApplicationJSONLoadBalancerLoadBalancerServiceProtocolEnum - Protocol of the Load Balancer
type GetLoadBalancersID200ApplicationJSONLoadBalancerLoadBalancerServiceProtocolEnum string

const (
	GetLoadBalancersID200ApplicationJSONLoadBalancerLoadBalancerServiceProtocolEnumTCP   GetLoadBalancersID200ApplicationJSONLoadBalancerLoadBalancerServiceProtocolEnum = "tcp"
	GetLoadBalancersID200ApplicationJSONLoadBalancerLoadBalancerServiceProtocolEnumHTTP  GetLoadBalancersID200ApplicationJSONLoadBalancerLoadBalancerServiceProtocolEnum = "http"
	GetLoadBalancersID200ApplicationJSONLoadBalancerLoadBalancerServiceProtocolEnumHTTPS GetLoadBalancersID200ApplicationJSONLoadBalancerLoadBalancerServiceProtocolEnum = "https"
)

func (e *GetLoadBalancersID200ApplicationJSONLoadBalancerLoadBalancerServiceProtocolEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "tcp":
		fallthrough
	case "http":
		fallthrough
	case "https":
		*e = GetLoadBalancersID200ApplicationJSONLoadBalancerLoadBalancerServiceProtocolEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetLoadBalancersID200ApplicationJSONLoadBalancerLoadBalancerServiceProtocolEnum: %s", s)
	}
}

type GetLoadBalancersID200ApplicationJSONLoadBalancerLoadBalancerService struct {
	// Port the Load Balancer will balance to
	DestinationPort int64 `json:"destination_port"`
	// Service health check
	HealthCheck GetLoadBalancersID200ApplicationJSONLoadBalancerLoadBalancerServiceLoadBalancerServiceHealthCheck `json:"health_check"`
	// Configuration option for protocols http and https
	HTTP *GetLoadBalancersID200ApplicationJSONLoadBalancerLoadBalancerServiceHTTP `json:"http,omitempty"`
	// Port the Load Balancer listens on
	ListenPort int64 `json:"listen_port"`
	// Protocol of the Load Balancer
	Protocol GetLoadBalancersID200ApplicationJSONLoadBalancerLoadBalancerServiceProtocolEnum `json:"protocol"`
	// Is Proxyprotocol enabled or not
	Proxyprotocol bool `json:"proxyprotocol"`
}

type GetLoadBalancersID200ApplicationJSONLoadBalancerLoadBalancerTargetHealthStatus struct {
	ListenPort *int64  `json:"listen_port,omitempty"`
	Status     *string `json:"status,omitempty"`
}

// GetLoadBalancersID200ApplicationJSONLoadBalancerLoadBalancerTargetIP - IP targets where the traffic should be routed through. It is only possible to use the (Public or vSwitch) IPs of Hetzner Online Root Servers belonging to the project owner. IPs belonging to other users are blocked. Additionally IPs belonging to services provided by Hetzner Cloud (Servers, Load Balancers, ...) are blocked as well.
type GetLoadBalancersID200ApplicationJSONLoadBalancerLoadBalancerTargetIP struct {
	// IP of a server that belongs to the same customer (public IPv4/IPv6) or private IP in a Subnetwork type vswitch.
	IP string `json:"ip"`
}

// GetLoadBalancersID200ApplicationJSONLoadBalancerLoadBalancerTargetLabelSelector - Label selector and a list of selected targets
type GetLoadBalancersID200ApplicationJSONLoadBalancerLoadBalancerTargetLabelSelector struct {
	// Label selector
	Selector string `json:"selector"`
}

// GetLoadBalancersID200ApplicationJSONLoadBalancerLoadBalancerTargetLoadBalancerTargetServer - Server where the traffic should be routed through
type GetLoadBalancersID200ApplicationJSONLoadBalancerLoadBalancerTargetLoadBalancerTargetServer struct {
	// ID of the Server
	ID int64 `json:"id"`
}

type GetLoadBalancersID200ApplicationJSONLoadBalancerLoadBalancerTargetTargetsHealthStatus struct {
	ListenPort *int64  `json:"listen_port,omitempty"`
	Status     *string `json:"status,omitempty"`
}

type GetLoadBalancersID200ApplicationJSONLoadBalancerLoadBalancerTargetTargetsServer struct {
	// ID of the Server
	ID int64 `json:"id"`
}

type GetLoadBalancersID200ApplicationJSONLoadBalancerLoadBalancerTargetTargets struct {
	HealthStatus []GetLoadBalancersID200ApplicationJSONLoadBalancerLoadBalancerTargetTargetsHealthStatus `json:"health_status,omitempty"`
	Server       *GetLoadBalancersID200ApplicationJSONLoadBalancerLoadBalancerTargetTargetsServer        `json:"server,omitempty"`
	Type         *string                                                                                 `json:"type,omitempty"`
	UsePrivateIP *bool                                                                                   `json:"use_private_ip,omitempty"`
}

// GetLoadBalancersID200ApplicationJSONLoadBalancerLoadBalancerTargetTypeEnum - Type of the resource
type GetLoadBalancersID200ApplicationJSONLoadBalancerLoadBalancerTargetTypeEnum string

const (
	GetLoadBalancersID200ApplicationJSONLoadBalancerLoadBalancerTargetTypeEnumServer        GetLoadBalancersID200ApplicationJSONLoadBalancerLoadBalancerTargetTypeEnum = "server"
	GetLoadBalancersID200ApplicationJSONLoadBalancerLoadBalancerTargetTypeEnumLabelSelector GetLoadBalancersID200ApplicationJSONLoadBalancerLoadBalancerTargetTypeEnum = "label_selector"
	GetLoadBalancersID200ApplicationJSONLoadBalancerLoadBalancerTargetTypeEnumIP            GetLoadBalancersID200ApplicationJSONLoadBalancerLoadBalancerTargetTypeEnum = "ip"
)

func (e *GetLoadBalancersID200ApplicationJSONLoadBalancerLoadBalancerTargetTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "server":
		fallthrough
	case "label_selector":
		fallthrough
	case "ip":
		*e = GetLoadBalancersID200ApplicationJSONLoadBalancerLoadBalancerTargetTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetLoadBalancersID200ApplicationJSONLoadBalancerLoadBalancerTargetTypeEnum: %s", s)
	}
}

type GetLoadBalancersID200ApplicationJSONLoadBalancerLoadBalancerTarget struct {
	// List of health statuses of the services on this target
	HealthStatus []GetLoadBalancersID200ApplicationJSONLoadBalancerLoadBalancerTargetHealthStatus `json:"health_status,omitempty"`
	// IP targets where the traffic should be routed through. It is only possible to use the (Public or vSwitch) IPs of Hetzner Online Root Servers belonging to the project owner. IPs belonging to other users are blocked. Additionally IPs belonging to services provided by Hetzner Cloud (Servers, Load Balancers, ...) are blocked as well.
	IP *GetLoadBalancersID200ApplicationJSONLoadBalancerLoadBalancerTargetIP `json:"ip,omitempty"`
	// Label selector and a list of selected targets
	LabelSelector *GetLoadBalancersID200ApplicationJSONLoadBalancerLoadBalancerTargetLabelSelector `json:"label_selector,omitempty"`
	// Server where the traffic should be routed through
	Server *GetLoadBalancersID200ApplicationJSONLoadBalancerLoadBalancerTargetLoadBalancerTargetServer `json:"server,omitempty"`
	// List of selected targets
	Targets []GetLoadBalancersID200ApplicationJSONLoadBalancerLoadBalancerTargetTargets `json:"targets,omitempty"`
	// Type of the resource
	Type GetLoadBalancersID200ApplicationJSONLoadBalancerLoadBalancerTargetTypeEnum `json:"type"`
	// Use the private network IP instead of the public IP. Default value is false.
	UsePrivateIP *bool `json:"use_private_ip,omitempty"`
}

type GetLoadBalancersID200ApplicationJSONLoadBalancer struct {
	// Algorithm of the Load Balancer
	Algorithm GetLoadBalancersID200ApplicationJSONLoadBalancerAlgorithm `json:"algorithm"`
	// Point in time when the Resource was created (in ISO-8601 format)
	Created string `json:"created"`
	// ID of the Resource
	ID int64 `json:"id"`
	// Free Traffic for the current billing period in bytes
	IncludedTraffic int64 `json:"included_traffic"`
	// Inbound Traffic for the current billing period in bytes
	IngoingTraffic int64 `json:"ingoing_traffic"`
	// User-defined labels (key-value pairs)
	Labels           map[string]string                                                `json:"labels"`
	LoadBalancerType GetLoadBalancersID200ApplicationJSONLoadBalancerLoadBalancerType `json:"load_balancer_type"`
	Location         GetLoadBalancersID200ApplicationJSONLoadBalancerLocation         `json:"location"`
	// Name of the Resource. Must be unique per Project.
	Name string `json:"name"`
	// Outbound Traffic for the current billing period in bytes
	OutgoingTraffic int64 `json:"outgoing_traffic"`
	// Private networks information
	PrivateNet []GetLoadBalancersID200ApplicationJSONLoadBalancerPrivateNet `json:"private_net"`
	// Protection configuration for the Resource
	Protection GetLoadBalancersID200ApplicationJSONLoadBalancerProtection `json:"protection"`
	// Public network information
	PublicNet GetLoadBalancersID200ApplicationJSONLoadBalancerPublicNet `json:"public_net"`
	// List of services that belong to this Load Balancer
	Services []GetLoadBalancersID200ApplicationJSONLoadBalancerLoadBalancerService `json:"services"`
	// List of targets that belong to this Load Balancer
	Targets []GetLoadBalancersID200ApplicationJSONLoadBalancerLoadBalancerTarget `json:"targets"`
}

// GetLoadBalancersID200ApplicationJSON - The `load_balancer` key contains the Load Balancer
type GetLoadBalancersID200ApplicationJSON struct {
	LoadBalancer GetLoadBalancersID200ApplicationJSONLoadBalancer `json:"load_balancer"`
}

type GetLoadBalancersIDResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// The `load_balancer` key contains the Load Balancer
	GetLoadBalancersID200ApplicationJSONObject *GetLoadBalancersID200ApplicationJSON
}
