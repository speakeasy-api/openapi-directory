/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.LocalDate;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

/**
 * GETTaxationItemTypewithSuccess - Container for custom fields of a Taxation Item object.
 * 
 */
public class GETTaxationItemTypewithSuccess {
    /**
     * The ID of the Zuora user who created the taxation item.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("createdById")
    public String createdById;
    public GETTaxationItemTypewithSuccess withCreatedById(String createdById) {
        this.createdById = createdById;
        return this;
    }
    
    /**
     * The date and time when the taxation item was created in the Zuora system, in `yyyy-mm-dd hh:mm:ss` format.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("createdDate")
    public OffsetDateTime createdDate;
    public GETTaxationItemTypewithSuccess withCreatedDate(OffsetDateTime createdDate) {
        this.createdDate = createdDate;
        return this;
    }
    
    /**
     * The amount of taxes or VAT for which the customer has an exemption.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("exemptAmount")
    public Double exemptAmount;
    public GETTaxationItemTypewithSuccess withExemptAmount(Double exemptAmount) {
        this.exemptAmount = exemptAmount;
        return this;
    }
    
    /**
     * Container for the finance information related to the taxation item.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("financeInformation")
    public GETTaxationItemTypewithSuccessFinanceInformation financeInformation;
    public GETTaxationItemTypewithSuccess withFinanceInformation(GETTaxationItemTypewithSuccessFinanceInformation financeInformation) {
        this.financeInformation = financeInformation;
        return this;
    }
    
    /**
     * The ID of the taxation item.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    public String id;
    public GETTaxationItemTypewithSuccess withId(String id) {
        this.id = id;
        return this;
    }
    
    /**
     * The jurisdiction that applies the tax or VAT. This value is typically a state, province, county, or city.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("jurisdiction")
    public String jurisdiction;
    public GETTaxationItemTypewithSuccess withJurisdiction(String jurisdiction) {
        this.jurisdiction = jurisdiction;
        return this;
    }
    
    /**
     * The identifier for the location based on the value of the `taxCode` field.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("locationCode")
    public String locationCode;
    public GETTaxationItemTypewithSuccess withLocationCode(String locationCode) {
        this.locationCode = locationCode;
        return this;
    }
    
    /**
     * The ID of the credit or debit memo associated with the taxation item.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("memoItemId")
    public String memoItemId;
    public GETTaxationItemTypewithSuccess withMemoItemId(String memoItemId) {
        this.memoItemId = memoItemId;
        return this;
    }
    
    /**
     * The name of the taxation item.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    public String name;
    public GETTaxationItemTypewithSuccess withName(String name) {
        this.name = name;
        return this;
    }
    
    /**
     * The ID of the taxation item of the invoice, which the credit or debit memo is created from.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sourceTaxItemId")
    public String sourceTaxItemId;
    public GETTaxationItemTypewithSuccess withSourceTaxItemId(String sourceTaxItemId) {
        this.sourceTaxItemId = sourceTaxItemId;
        return this;
    }
    
    /**
     * The amount of the tax applied to the credit or debit memo.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("taxAmount")
    public Double taxAmount;
    public GETTaxationItemTypewithSuccess withTaxAmount(Double taxAmount) {
        this.taxAmount = taxAmount;
        return this;
    }
    
    /**
     * The tax code identifies which tax rules and tax rates to apply to a specific credit or debit memo.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("taxCode")
    public String taxCode;
    public GETTaxationItemTypewithSuccess withTaxCode(String taxCode) {
        this.taxCode = taxCode;
        return this;
    }
    
    /**
     * The description of the tax code.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("taxCodeDescription")
    public String taxCodeDescription;
    public GETTaxationItemTypewithSuccess withTaxCodeDescription(String taxCodeDescription) {
        this.taxCodeDescription = taxCodeDescription;
        return this;
    }
    
    /**
     * The date when the tax is applied to the credit or debit memo.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd")
    @JsonProperty("taxDate")
    public LocalDate taxDate;
    public GETTaxationItemTypewithSuccess withTaxDate(LocalDate taxDate) {
        this.taxDate = taxDate;
        return this;
    }
    
    /**
     * The tax rate applied to the credit or debit memo.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("taxRate")
    public Double taxRate;
    public GETTaxationItemTypewithSuccess withTaxRate(Double taxRate) {
        this.taxRate = taxRate;
        return this;
    }
    
    /**
     * The description of the tax rate.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("taxRateDescription")
    public String taxRateDescription;
    public GETTaxationItemTypewithSuccess withTaxRateDescription(String taxRateDescription) {
        this.taxRateDescription = taxRateDescription;
        return this;
    }
    
    /**
     * The type of the tax rate applied to the credit or debit memo.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("taxRateType")
    public GETTaxationItemTypewithSuccessTaxRateTypeEnum taxRateType;
    public GETTaxationItemTypewithSuccess withTaxRateType(GETTaxationItemTypewithSuccessTaxRateTypeEnum taxRateType) {
        this.taxRateType = taxRateType;
        return this;
    }
    
    /**
     * The ID of the Zuora user who last updated the taxation item.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("updatedById")
    public String updatedById;
    public GETTaxationItemTypewithSuccess withUpdatedById(String updatedById) {
        this.updatedById = updatedById;
        return this;
    }
    
    /**
     * The date and time when the taxation item was last updated, in `yyyy-mm-dd hh:mm:ss` format.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("updatedDate")
    public OffsetDateTime updatedDate;
    public GETTaxationItemTypewithSuccess withUpdatedDate(OffsetDateTime updatedDate) {
        this.updatedDate = updatedDate;
        return this;
    }
    
}
