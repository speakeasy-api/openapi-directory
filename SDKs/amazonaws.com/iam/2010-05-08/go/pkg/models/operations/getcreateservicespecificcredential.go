// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// GETCreateServiceSpecificCredentialActionEnum
type GETCreateServiceSpecificCredentialActionEnum string

const (
	GETCreateServiceSpecificCredentialActionEnumCreateServiceSpecificCredential GETCreateServiceSpecificCredentialActionEnum = "CreateServiceSpecificCredential"
)

func (e *GETCreateServiceSpecificCredentialActionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "CreateServiceSpecificCredential":
		*e = GETCreateServiceSpecificCredentialActionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GETCreateServiceSpecificCredentialActionEnum: %s", s)
	}
}

// GETCreateServiceSpecificCredentialVersionEnum
type GETCreateServiceSpecificCredentialVersionEnum string

const (
	GETCreateServiceSpecificCredentialVersionEnumTwoThousandAndTen0508 GETCreateServiceSpecificCredentialVersionEnum = "2010-05-08"
)

func (e *GETCreateServiceSpecificCredentialVersionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "2010-05-08":
		*e = GETCreateServiceSpecificCredentialVersionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GETCreateServiceSpecificCredentialVersionEnum: %s", s)
	}
}

type GETCreateServiceSpecificCredentialQueryParams struct {
	Action GETCreateServiceSpecificCredentialActionEnum `queryParam:"style=form,explode=true,name=Action"`
	// The name of the Amazon Web Services service that is to be associated with the credentials. The service you specify here is the only service that can be accessed using these credentials.
	ServiceName string `queryParam:"style=form,explode=true,name=ServiceName"`
	// <p>The name of the IAM user that is to be associated with the credentials. The new service-specific credentials have the same permissions as the associated user except that they can be used only to access the specified service.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
	UserName string                                        `queryParam:"style=form,explode=true,name=UserName"`
	Version  GETCreateServiceSpecificCredentialVersionEnum `queryParam:"style=form,explode=true,name=Version"`
}

type GETCreateServiceSpecificCredentialHeaders struct {
	XAmzAlgorithm     *string `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
}

type GETCreateServiceSpecificCredentialRequest struct {
	QueryParams GETCreateServiceSpecificCredentialQueryParams
	Headers     GETCreateServiceSpecificCredentialHeaders
}

type GETCreateServiceSpecificCredentialResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
