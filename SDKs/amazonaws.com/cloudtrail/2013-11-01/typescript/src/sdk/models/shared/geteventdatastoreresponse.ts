/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { AdvancedEventSelector } from "./advancedeventselector";
import { EventDataStoreStatusEnum } from "./eventdatastorestatusenum";
import { Expose, Transform, Type } from "class-transformer";

/**
 * Success
 */
export class GetEventDataStoreResponse extends SpeakeasyBase {
  @SpeakeasyMetadata({ elemType: AdvancedEventSelector })
  @Expose({ name: "AdvancedEventSelectors" })
  @Type(() => AdvancedEventSelector)
  advancedEventSelectors?: AdvancedEventSelector[];

  @SpeakeasyMetadata()
  @Expose({ name: "CreatedTimestamp" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  createdTimestamp?: Date;

  @SpeakeasyMetadata()
  @Expose({ name: "EventDataStoreArn" })
  eventDataStoreArn?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "KmsKeyId" })
  kmsKeyId?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "MultiRegionEnabled" })
  multiRegionEnabled?: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "Name" })
  name?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "OrganizationEnabled" })
  organizationEnabled?: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "RetentionPeriod" })
  retentionPeriod?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "Status" })
  status?: EventDataStoreStatusEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "TerminationProtectionEnabled" })
  terminationProtectionEnabled?: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "UpdatedTimestamp" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  updatedTimestamp?: Date;
}
