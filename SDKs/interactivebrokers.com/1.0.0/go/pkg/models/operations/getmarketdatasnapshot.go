// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

type GetMarketdataSnapshotRequestBody struct {
	// The internal IB identifier for the trading product specified as an integer.
	Conid *float64 `json:"conid,omitempty"`
	// The currency in which the given pair trades.
	Currency *string `json:"currency,omitempty"`
	// The exchange on which the trading product is listed (required for type=STK).
	Exchange *string `json:"exchange,omitempty"`
	// The symbol that identifies the trading product.
	Symbol *string `json:"symbol,omitempty"`
	// The instrument type of the contract (CASH).
	Type *string `json:"type,omitempty"`
}

type GetMarketdataSnapshotRequest struct {
	// Contract. Allowed combinations are [type and symbol and currency], or [type, symbol, exchange, and currency], or [conid].
	Request []GetMarketdataSnapshotRequestBody `request:"mediaType=application/json"`
}

type GetMarketdataSnapshot200ApplicationJSONBid struct {
	Market *float64 `json:"market,omitempty"`
	Price  *float64 `json:"price,omitempty"`
	Size   *float64 `json:"size,omitempty"`
}

type GetMarketdataSnapshot200ApplicationJSONClosing struct {
	Price *float64 `json:"price,omitempty"`
}

type GetMarketdataSnapshot200ApplicationJSONOffer struct {
	Market *float64 `json:"market,omitempty"`
	Price  *float64 `json:"price,omitempty"`
	Size   *float64 `json:"size,omitempty"`
}

// GetMarketdataSnapshot200ApplicationJSONTemporalityEnum - 0 = Real time data
// 1 = Delayed data
type GetMarketdataSnapshot200ApplicationJSONTemporalityEnum string

const (
	GetMarketdataSnapshot200ApplicationJSONTemporalityEnumZero GetMarketdataSnapshot200ApplicationJSONTemporalityEnum = "0"
	GetMarketdataSnapshot200ApplicationJSONTemporalityEnumOne  GetMarketdataSnapshot200ApplicationJSONTemporalityEnum = "1"
)

func (e *GetMarketdataSnapshot200ApplicationJSONTemporalityEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "0":
		fallthrough
	case "1":
		*e = GetMarketdataSnapshot200ApplicationJSONTemporalityEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetMarketdataSnapshot200ApplicationJSONTemporalityEnum: %s", s)
	}
}

type GetMarketdataSnapshot200ApplicationJSONTrade struct {
	Market *float64 `json:"market,omitempty"`
	Price  *float64 `json:"price,omitempty"`
	Size   *float64 `json:"size,omitempty"`
	Time   *float64 `json:"time,omitempty"`
}

type GetMarketdataSnapshot200ApplicationJSON struct {
	Bid      *GetMarketdataSnapshot200ApplicationJSONBid     `json:"Bid,omitempty"`
	Closing  *GetMarketdataSnapshot200ApplicationJSONClosing `json:"Closing,omitempty"`
	Complete *bool                                           `json:"Complete,omitempty"`
	Conid    *string                                         `json:"Conid,omitempty"`
	Offer    *GetMarketdataSnapshot200ApplicationJSONOffer   `json:"Offer,omitempty"`
	// 0 = Real time data
	// 1 = Delayed data
	//
	Temporality *GetMarketdataSnapshot200ApplicationJSONTemporalityEnum `json:"Temporality,omitempty"`
	Trade       *GetMarketdataSnapshot200ApplicationJSONTrade           `json:"Trade,omitempty"`
}

type GetMarketdataSnapshotResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Financial Instrument Definition
	GetMarketdataSnapshot200ApplicationJSONObjects []GetMarketdataSnapshot200ApplicationJSON
}
