// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// CreateBatchInferenceJobXAmzTargetEnum
type CreateBatchInferenceJobXAmzTargetEnum string

const (
	CreateBatchInferenceJobXAmzTargetEnumAmazonPersonalizeCreateBatchInferenceJob CreateBatchInferenceJobXAmzTargetEnum = "AmazonPersonalize.CreateBatchInferenceJob"
)

func (e *CreateBatchInferenceJobXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "AmazonPersonalize.CreateBatchInferenceJob":
		*e = CreateBatchInferenceJobXAmzTargetEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateBatchInferenceJobXAmzTargetEnum: %s", s)
	}
}

type CreateBatchInferenceJobRequest struct {
	CreateBatchInferenceJobRequest shared.CreateBatchInferenceJobRequest `request:"mediaType=application/json"`
	XAmzAlgorithm                  *string                               `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256              *string                               `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential                 *string                               `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate                       *string                               `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken              *string                               `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature                  *string                               `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders              *string                               `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget                     CreateBatchInferenceJobXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type CreateBatchInferenceJobResponse struct {
	ContentType string
	// Success
	CreateBatchInferenceJobResponse *shared.CreateBatchInferenceJobResponse
	// InvalidInputException
	InvalidInputException interface{}
	// LimitExceededException
	LimitExceededException interface{}
	// ResourceInUseException
	ResourceInUseException interface{}
	StatusCode             int
	RawResponse            *http.Response
	// ResourceAlreadyExistsException
	ResourceAlreadyExistsException interface{}
	// ResourceNotFoundException
	ResourceNotFoundException interface{}
	// TooManyTagsException
	TooManyTagsException interface{}
}
