"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import awsec2securitygroupiprange as shared_awsec2securitygroupiprange
from ..shared import awsec2securitygroupipv6range as shared_awsec2securitygroupipv6range
from ..shared import awsec2securitygroupprefixlistid as shared_awsec2securitygroupprefixlistid
from ..shared import awsec2securitygroupuseridgrouppair as shared_awsec2securitygroupuseridgrouppair
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class AwsEc2SecurityGroupIPPermission:
    r"""An IP permission for an EC2 security group."""
    
    from_port: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('FromPort'), 'exclude': lambda f: f is None }})  
    ip_protocol: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('IpProtocol'), 'exclude': lambda f: f is None }})  
    ip_ranges: Optional[list[shared_awsec2securitygroupiprange.AwsEc2SecurityGroupIPRange]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('IpRanges'), 'exclude': lambda f: f is None }})  
    ipv6_ranges: Optional[list[shared_awsec2securitygroupipv6range.AwsEc2SecurityGroupIpv6Range]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Ipv6Ranges'), 'exclude': lambda f: f is None }})  
    prefix_list_ids: Optional[list[shared_awsec2securitygroupprefixlistid.AwsEc2SecurityGroupPrefixListID]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PrefixListIds'), 'exclude': lambda f: f is None }})  
    to_port: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ToPort'), 'exclude': lambda f: f is None }})  
    user_id_group_pairs: Optional[list[shared_awsec2securitygroupuseridgrouppair.AwsEc2SecurityGroupUserIDGroupPair]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('UserIdGroupPairs'), 'exclude': lambda f: f is None }})  
    