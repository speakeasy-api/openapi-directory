/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

public class ProxyGetPaymentTransactionLog {
    /**
     * The response code returned by the payment gateway referring to the AVS international response of the payment transaction.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("AVSResponseCode")
    public String avsResponseCode;
    public ProxyGetPaymentTransactionLog withAVSResponseCode(String avsResponseCode) {
        this.avsResponseCode = avsResponseCode;
        return this;
    }
    
    /**
     * The ID of the batch used to send the transaction if the request was sent in a batch.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("BatchId")
    public String batchId;
    public ProxyGetPaymentTransactionLog withBatchId(String batchId) {
        this.batchId = batchId;
        return this;
    }
    
    /**
     * The response code returned by the payment gateway referring to the CVV international response of the payment transaction.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("CVVResponseCode")
    public String cvvResponseCode;
    public ProxyGetPaymentTransactionLog withCVVResponseCode(String cvvResponseCode) {
        this.cvvResponseCode = cvvResponseCode;
        return this;
    }
    
    /**
     * The name of the payment gateway used to transact the current payment transaction log.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Gateway")
    public String gateway;
    public ProxyGetPaymentTransactionLog withGateway(String gateway) {
        this.gateway = gateway;
        return this;
    }
    
    /**
     * The code returned by the payment gateway for the payment. This code is gateway-dependent.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("GatewayReasonCode")
    public String gatewayReasonCode;
    public ProxyGetPaymentTransactionLog withGatewayReasonCode(String gatewayReasonCode) {
        this.gatewayReasonCode = gatewayReasonCode;
        return this;
    }
    
    /**
     * The message returned by the payment gateway for the payment. This message is gateway-dependent. 
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("GatewayReasonCodeDescription")
    public String gatewayReasonCodeDescription;
    public ProxyGetPaymentTransactionLog withGatewayReasonCodeDescription(String gatewayReasonCodeDescription) {
        this.gatewayReasonCodeDescription = gatewayReasonCodeDescription;
        return this;
    }
    
    /**
     * The state of the transaction at the payment gateway.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("GatewayState")
    public ProxyGetPaymentTransactionLogGatewayStateEnum gatewayState;
    public ProxyGetPaymentTransactionLog withGatewayState(ProxyGetPaymentTransactionLogGatewayStateEnum gatewayState) {
        this.gatewayState = gatewayState;
        return this;
    }
    
    /**
     * The type of the transaction, either making a payment, or canceling a payment. 
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("GatewayTransactionType")
    public ProxyGetPaymentTransactionLogGatewayTransactionTypeEnum gatewayTransactionType;
    public ProxyGetPaymentTransactionLog withGatewayTransactionType(ProxyGetPaymentTransactionLogGatewayTransactionTypeEnum gatewayTransactionType) {
        this.gatewayTransactionType = gatewayTransactionType;
        return this;
    }
    
    /**
     * The ID of the payment transaction log.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Id")
    public String id;
    public ProxyGetPaymentTransactionLog withId(String id) {
        this.id = id;
        return this;
    }
    
    /**
     * The ID of the payment wherein the payment transaction log was recorded. 
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("PaymentId")
    public String paymentId;
    public ProxyGetPaymentTransactionLog withPaymentId(String paymentId) {
        this.paymentId = paymentId;
        return this;
    }
    
    /**
     * The payment transaction request string sent to the payment gateway. 
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("RequestString")
    public String requestString;
    public ProxyGetPaymentTransactionLog withRequestString(String requestString) {
        this.requestString = requestString;
        return this;
    }
    
    /**
     * The payment transaction response string returned by the payment gateway. 
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ResponseString")
    public String responseString;
    public ProxyGetPaymentTransactionLog withResponseString(String responseString) {
        this.responseString = responseString;
        return this;
    }
    
    /**
     * The transaction date when the payment was performed. 
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("TransactionDate")
    public OffsetDateTime transactionDate;
    public ProxyGetPaymentTransactionLog withTransactionDate(OffsetDateTime transactionDate) {
        this.transactionDate = transactionDate;
        return this;
    }
    
    /**
     * The transaction ID returned by the payment gateway. This field is used to reconcile payment transactions between the payment gateway and records in Zuora.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("TransactionId")
    public String transactionId;
    public ProxyGetPaymentTransactionLog withTransactionId(String transactionId) {
        this.transactionId = transactionId;
        return this;
    }
    
}
