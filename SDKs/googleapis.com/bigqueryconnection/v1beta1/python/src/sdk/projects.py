"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Any, Optional

class Projects:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def bigqueryconnection_projects_locations_connections_create(self, request: operations.BigqueryconnectionProjectsLocationsConnectionsCreateRequest, security: operations.BigqueryconnectionProjectsLocationsConnectionsCreateSecurity) -> operations.BigqueryconnectionProjectsLocationsConnectionsCreateResponse:
        r"""Creates a new connection."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.BigqueryconnectionProjectsLocationsConnectionsCreateRequest, base_url, '/v1beta1/{parent}/connections', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "connection_input", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.BigqueryconnectionProjectsLocationsConnectionsCreateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.BigqueryconnectionProjectsLocationsConnectionsCreateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Connection])
                res.connection = out

        return res

    def bigqueryconnection_projects_locations_connections_delete(self, request: operations.BigqueryconnectionProjectsLocationsConnectionsDeleteRequest, security: operations.BigqueryconnectionProjectsLocationsConnectionsDeleteSecurity) -> operations.BigqueryconnectionProjectsLocationsConnectionsDeleteResponse:
        r"""Deletes connection and associated credential."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.BigqueryconnectionProjectsLocationsConnectionsDeleteRequest, base_url, '/v1beta1/{name}', request)
        
        query_params = utils.get_query_params(operations.BigqueryconnectionProjectsLocationsConnectionsDeleteRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.BigqueryconnectionProjectsLocationsConnectionsDeleteResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.empty = out

        return res

    def bigqueryconnection_projects_locations_connections_get(self, request: operations.BigqueryconnectionProjectsLocationsConnectionsGetRequest, security: operations.BigqueryconnectionProjectsLocationsConnectionsGetSecurity) -> operations.BigqueryconnectionProjectsLocationsConnectionsGetResponse:
        r"""Returns specified connection."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.BigqueryconnectionProjectsLocationsConnectionsGetRequest, base_url, '/v1beta1/{name}', request)
        
        query_params = utils.get_query_params(operations.BigqueryconnectionProjectsLocationsConnectionsGetRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.BigqueryconnectionProjectsLocationsConnectionsGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Connection])
                res.connection = out

        return res

    def bigqueryconnection_projects_locations_connections_get_iam_policy(self, request: operations.BigqueryconnectionProjectsLocationsConnectionsGetIamPolicyRequest, security: operations.BigqueryconnectionProjectsLocationsConnectionsGetIamPolicySecurity) -> operations.BigqueryconnectionProjectsLocationsConnectionsGetIamPolicyResponse:
        r"""Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.BigqueryconnectionProjectsLocationsConnectionsGetIamPolicyRequest, base_url, '/v1beta1/{resource}:getIamPolicy', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "get_iam_policy_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.BigqueryconnectionProjectsLocationsConnectionsGetIamPolicyRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.BigqueryconnectionProjectsLocationsConnectionsGetIamPolicyResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Policy])
                res.policy = out

        return res

    def bigqueryconnection_projects_locations_connections_list(self, request: operations.BigqueryconnectionProjectsLocationsConnectionsListRequest, security: operations.BigqueryconnectionProjectsLocationsConnectionsListSecurity) -> operations.BigqueryconnectionProjectsLocationsConnectionsListResponse:
        r"""Returns a list of connections in the given project."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.BigqueryconnectionProjectsLocationsConnectionsListRequest, base_url, '/v1beta1/{parent}/connections', request)
        
        query_params = utils.get_query_params(operations.BigqueryconnectionProjectsLocationsConnectionsListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.BigqueryconnectionProjectsLocationsConnectionsListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ListConnectionsResponse])
                res.list_connections_response = out

        return res

    def bigqueryconnection_projects_locations_connections_set_iam_policy(self, request: operations.BigqueryconnectionProjectsLocationsConnectionsSetIamPolicyRequest, security: operations.BigqueryconnectionProjectsLocationsConnectionsSetIamPolicySecurity) -> operations.BigqueryconnectionProjectsLocationsConnectionsSetIamPolicyResponse:
        r"""Sets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.BigqueryconnectionProjectsLocationsConnectionsSetIamPolicyRequest, base_url, '/v1beta1/{resource}:setIamPolicy', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "set_iam_policy_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.BigqueryconnectionProjectsLocationsConnectionsSetIamPolicyRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.BigqueryconnectionProjectsLocationsConnectionsSetIamPolicyResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Policy])
                res.policy = out

        return res

    def bigqueryconnection_projects_locations_connections_test_iam_permissions(self, request: operations.BigqueryconnectionProjectsLocationsConnectionsTestIamPermissionsRequest, security: operations.BigqueryconnectionProjectsLocationsConnectionsTestIamPermissionsSecurity) -> operations.BigqueryconnectionProjectsLocationsConnectionsTestIamPermissionsResponse:
        r"""Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may \\"fail open\\" without warning."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.BigqueryconnectionProjectsLocationsConnectionsTestIamPermissionsRequest, base_url, '/v1beta1/{resource}:testIamPermissions', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "test_iam_permissions_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.BigqueryconnectionProjectsLocationsConnectionsTestIamPermissionsRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.BigqueryconnectionProjectsLocationsConnectionsTestIamPermissionsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.TestIamPermissionsResponse])
                res.test_iam_permissions_response = out

        return res

    def bigqueryconnection_projects_locations_connections_update_credential(self, request: operations.BigqueryconnectionProjectsLocationsConnectionsUpdateCredentialRequest, security: operations.BigqueryconnectionProjectsLocationsConnectionsUpdateCredentialSecurity) -> operations.BigqueryconnectionProjectsLocationsConnectionsUpdateCredentialResponse:
        r"""Sets the credential for the specified connection."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.BigqueryconnectionProjectsLocationsConnectionsUpdateCredentialRequest, base_url, '/v1beta1/{name}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "connection_credential", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.BigqueryconnectionProjectsLocationsConnectionsUpdateCredentialRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PATCH', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.BigqueryconnectionProjectsLocationsConnectionsUpdateCredentialResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.empty = out

        return res

    