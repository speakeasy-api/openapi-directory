// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type IsoalSecurity struct {
	APIKey   shared.SchemeAPIKey   `security:"scheme,type=apiKey,subtype=header"`
	ClientID shared.SchemeClientID `security:"scheme,type=apiKey,subtype=header"`
}

type IsoalRequestBodyCertificateParameters struct {
	// Reference No.
	RefNo string `json:"RefNo"`
	// Token No.
	TokenNo string `json:"TokenNo"`
}

// IsoalRequestBodyFormatEnum - The format of the certificate in response.
type IsoalRequestBodyFormatEnum string

const (
	IsoalRequestBodyFormatEnumPdf IsoalRequestBodyFormatEnum = "pdf"
)

func (e *IsoalRequestBodyFormatEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "pdf":
		*e = IsoalRequestBodyFormatEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for IsoalRequestBodyFormatEnum: %s", s)
	}
}

// IsoalRequestBody - Request format
type IsoalRequestBody struct {
	CertificateParameters *IsoalRequestBodyCertificateParameters `json:"certificateParameters,omitempty"`
	ConsentArtifact       *shared.ConsentArtifactSchema          `json:"consentArtifact,omitempty"`
	// The format of the certificate in response.
	Format IsoalRequestBodyFormatEnum `json:"format"`
	// A unique transaction id for this request in UUID format. It is used for tracking the request.
	TxnID string `json:"txnId"`
}

type IsoalRequest struct {
	// Request format
	Request  *IsoalRequestBody `request:"mediaType=application/json"`
	Security IsoalSecurity
}

type Isoal504ApplicationJSONErrorEnum string

const (
	Isoal504ApplicationJSONErrorEnumGatewayTimeout Isoal504ApplicationJSONErrorEnum = "gateway_timeout"
)

func (e *Isoal504ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "gateway_timeout":
		*e = Isoal504ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Isoal504ApplicationJSONErrorEnum: %s", s)
	}
}

type Isoal504ApplicationJSONErrorDescriptionEnum string

const (
	Isoal504ApplicationJSONErrorDescriptionEnumPublisherServiceDidNotRespondInTime Isoal504ApplicationJSONErrorDescriptionEnum = "Publisher service did not respond in time"
)

func (e *Isoal504ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Publisher service did not respond in time":
		*e = Isoal504ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Isoal504ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Isoal504ApplicationJSON - Gateway timeout
type Isoal504ApplicationJSON struct {
	Error            *Isoal504ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Isoal504ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Isoal503ApplicationJSONErrorEnum string

const (
	Isoal503ApplicationJSONErrorEnumServiceUnavailable Isoal503ApplicationJSONErrorEnum = "service_unavailable"
)

func (e *Isoal503ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "service_unavailable":
		*e = Isoal503ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Isoal503ApplicationJSONErrorEnum: %s", s)
	}
}

type Isoal503ApplicationJSONErrorDescriptionEnum string

const (
	Isoal503ApplicationJSONErrorDescriptionEnumPublisherServiceIsTemporarilyUnavailable Isoal503ApplicationJSONErrorDescriptionEnum = "Publisher service is temporarily unavailable"
)

func (e *Isoal503ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Publisher service is temporarily unavailable":
		*e = Isoal503ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Isoal503ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Isoal503ApplicationJSON - Service unavailable
type Isoal503ApplicationJSON struct {
	Error            *Isoal503ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Isoal503ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Isoal502ApplicationJSONErrorEnum string

const (
	Isoal502ApplicationJSONErrorEnumBadGatewy Isoal502ApplicationJSONErrorEnum = "bad_gatewy"
)

func (e *Isoal502ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "bad_gatewy":
		*e = Isoal502ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Isoal502ApplicationJSONErrorEnum: %s", s)
	}
}

type Isoal502ApplicationJSONErrorDescriptionEnum string

const (
	Isoal502ApplicationJSONErrorDescriptionEnumPublisherServiceReturnedAnInvalidResponse Isoal502ApplicationJSONErrorDescriptionEnum = "Publisher service returned an invalid response"
)

func (e *Isoal502ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Publisher service returned an invalid response":
		*e = Isoal502ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Isoal502ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Isoal502ApplicationJSON - Bad gateway
type Isoal502ApplicationJSON struct {
	Error            *Isoal502ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Isoal502ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Isoal500ApplicationJSONErrorEnum string

const (
	Isoal500ApplicationJSONErrorEnumInternalServerError Isoal500ApplicationJSONErrorEnum = "internal_server_error"
)

func (e *Isoal500ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "internal_server_error":
		*e = Isoal500ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Isoal500ApplicationJSONErrorEnum: %s", s)
	}
}

type Isoal500ApplicationJSONErrorDescriptionEnum string

const (
	Isoal500ApplicationJSONErrorDescriptionEnumInternalServerError Isoal500ApplicationJSONErrorDescriptionEnum = "Internal server error"
)

func (e *Isoal500ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Internal server error":
		*e = Isoal500ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Isoal500ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Isoal500ApplicationJSON - Internal server error
type Isoal500ApplicationJSON struct {
	Error            *Isoal500ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Isoal500ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Isoal404ApplicationJSONErrorEnum string

const (
	Isoal404ApplicationJSONErrorEnumRecordNotFound Isoal404ApplicationJSONErrorEnum = "record_not_found"
	Isoal404ApplicationJSONErrorEnumURLNotFound    Isoal404ApplicationJSONErrorEnum = "url_not_found"
)

func (e *Isoal404ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "record_not_found":
		fallthrough
	case "url_not_found":
		*e = Isoal404ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Isoal404ApplicationJSONErrorEnum: %s", s)
	}
}

type Isoal404ApplicationJSONErrorDescriptionEnum string

const (
	Isoal404ApplicationJSONErrorDescriptionEnumNoRecordFound               Isoal404ApplicationJSONErrorDescriptionEnum = "No record found"
	Isoal404ApplicationJSONErrorDescriptionEnumYourAPIURLOrPathIsIncorrect Isoal404ApplicationJSONErrorDescriptionEnum = "Your API url or path is incorrect"
)

func (e *Isoal404ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "No record found":
		fallthrough
	case "Your API url or path is incorrect":
		*e = Isoal404ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Isoal404ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Isoal404ApplicationJSON - No record found
type Isoal404ApplicationJSON struct {
	Error            *Isoal404ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Isoal404ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Isoal401ApplicationJSONErrorEnum string

const (
	Isoal401ApplicationJSONErrorEnumInvalidAuthentication Isoal401ApplicationJSONErrorEnum = "invalid_authentication"
	Isoal401ApplicationJSONErrorEnumInvalidAuthorization  Isoal401ApplicationJSONErrorEnum = "invalid_authorization"
)

func (e *Isoal401ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "invalid_authentication":
		fallthrough
	case "invalid_authorization":
		*e = Isoal401ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Isoal401ApplicationJSONErrorEnum: %s", s)
	}
}

type Isoal401ApplicationJSONErrorDescriptionEnum string

const (
	Isoal401ApplicationJSONErrorDescriptionEnumAuthenticationFailed            Isoal401ApplicationJSONErrorDescriptionEnum = "Authentication failed"
	Isoal401ApplicationJSONErrorDescriptionEnumYouAreNotAuthorizedToUseThisAPI Isoal401ApplicationJSONErrorDescriptionEnum = "You are not authorized to use this API"
)

func (e *Isoal401ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Authentication failed":
		fallthrough
	case "You are not authorized to use this API":
		*e = Isoal401ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Isoal401ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Isoal401ApplicationJSON - Unauthorized access
type Isoal401ApplicationJSON struct {
	Error            *Isoal401ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Isoal401ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Isoal400ApplicationJSONErrorEnum string

const (
	Isoal400ApplicationJSONErrorEnumMissingParameter Isoal400ApplicationJSONErrorEnum = "missing_parameter"
	Isoal400ApplicationJSONErrorEnumInvalidParameter Isoal400ApplicationJSONErrorEnum = "invalid_parameter"
	Isoal400ApplicationJSONErrorEnumInvalidFormat    Isoal400ApplicationJSONErrorEnum = "invalid_format"
	Isoal400ApplicationJSONErrorEnumInvalidTxnid     Isoal400ApplicationJSONErrorEnum = "invalid_txnid"
	Isoal400ApplicationJSONErrorEnumInvalidConsentid Isoal400ApplicationJSONErrorEnum = "invalid_consentid"
)

func (e *Isoal400ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "missing_parameter":
		fallthrough
	case "invalid_parameter":
		fallthrough
	case "invalid_format":
		fallthrough
	case "invalid_txnid":
		fallthrough
	case "invalid_consentid":
		*e = Isoal400ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Isoal400ApplicationJSONErrorEnum: %s", s)
	}
}

type Isoal400ApplicationJSONErrorDescriptionEnum string

const (
	Isoal400ApplicationJSONErrorDescriptionEnumPleaseProvideAllMandatoryParameters     Isoal400ApplicationJSONErrorDescriptionEnum = "Please provide all mandatory parameters"
	Isoal400ApplicationJSONErrorDescriptionEnumBadRequest                              Isoal400ApplicationJSONErrorDescriptionEnum = "Bad request"
	Isoal400ApplicationJSONErrorDescriptionEnumTheFormatParameterIsInvalid             Isoal400ApplicationJSONErrorDescriptionEnum = "The format parameter is invalid"
	Isoal400ApplicationJSONErrorDescriptionEnumTheTxnIDParameterMustBeInUUIDFormat     Isoal400ApplicationJSONErrorDescriptionEnum = "The txnId parameter must be in UUID format"
	Isoal400ApplicationJSONErrorDescriptionEnumTheConsentIDParameterMustBeInUUIDFormat Isoal400ApplicationJSONErrorDescriptionEnum = "The consentId parameter must be in UUID format"
)

func (e *Isoal400ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Please provide all mandatory parameters":
		fallthrough
	case "Bad request":
		fallthrough
	case "The format parameter is invalid":
		fallthrough
	case "The txnId parameter must be in UUID format":
		fallthrough
	case "The consentId parameter must be in UUID format":
		*e = Isoal400ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Isoal400ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Isoal400ApplicationJSON - Bad request
type Isoal400ApplicationJSON struct {
	Error            *Isoal400ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Isoal400ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type IsoalResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Bad request
	Isoal400ApplicationJSONObject *Isoal400ApplicationJSON
	// Unauthorized access
	Isoal401ApplicationJSONObject *Isoal401ApplicationJSON
	// No record found
	Isoal404ApplicationJSONObject *Isoal404ApplicationJSON
	// Internal server error
	Isoal500ApplicationJSONObject *Isoal500ApplicationJSON
	// Bad gateway
	Isoal502ApplicationJSONObject *Isoal502ApplicationJSON
	// Service unavailable
	Isoal503ApplicationJSONObject *Isoal503ApplicationJSON
	// Gateway timeout
	Isoal504ApplicationJSONObject *Isoal504ApplicationJSON
}
