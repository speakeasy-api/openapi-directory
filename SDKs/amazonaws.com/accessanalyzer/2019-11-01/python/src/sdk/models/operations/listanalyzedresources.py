"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import listanalyzedresourcesresponse as shared_listanalyzedresourcesresponse
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Any, Optional

class ListAnalyzedResourcesRequestBodyResourceTypeEnum(str, Enum):
    r"""The type of resource."""
    AWS_S3_BUCKET = 'AWS::S3::Bucket'
    AWS_IAM_ROLE = 'AWS::IAM::Role'
    AWS_SQS_QUEUE = 'AWS::SQS::Queue'
    AWS_LAMBDA_FUNCTION = 'AWS::Lambda::Function'
    AWS_LAMBDA_LAYER_VERSION = 'AWS::Lambda::LayerVersion'
    AWS_KMS_KEY = 'AWS::KMS::Key'
    AWS_SECRETS_MANAGER_SECRET = 'AWS::SecretsManager::Secret'
    AWS_EFS_FILE_SYSTEM = 'AWS::EFS::FileSystem'
    AWS_EC2_SNAPSHOT = 'AWS::EC2::Snapshot'
    AWS_ECR_REPOSITORY = 'AWS::ECR::Repository'
    AWS_RDS_DB_SNAPSHOT = 'AWS::RDS::DBSnapshot'
    AWS_RDS_DB_CLUSTER_SNAPSHOT = 'AWS::RDS::DBClusterSnapshot'
    AWS_SNS_TOPIC = 'AWS::SNS::Topic'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ListAnalyzedResourcesRequestBody:
    
    analyzer_arn: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('analyzerArn') }})
    r"""The <a href=\\"https://docs.aws.amazon.com/IAM/latest/UserGuide/access-analyzer-getting-started.html#permission-resources\\">ARN of the analyzer</a> to retrieve a list of analyzed resources from."""  
    max_results: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('maxResults'), 'exclude': lambda f: f is None }})
    r"""The maximum number of results to return in the response."""  
    next_token: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('nextToken'), 'exclude': lambda f: f is None }})
    r"""A token used for pagination of results returned."""  
    resource_type: Optional[ListAnalyzedResourcesRequestBodyResourceTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('resourceType'), 'exclude': lambda f: f is None }})
    r"""The type of resource."""  
    

@dataclasses.dataclass
class ListAnalyzedResourcesRequest:
    
    request_body: ListAnalyzedResourcesRequestBody = dataclasses.field(metadata={'request': { 'media_type': 'application/json' }})  
    max_results: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'maxResults', 'style': 'form', 'explode': True }})
    r"""Pagination limit"""  
    next_token: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'nextToken', 'style': 'form', 'explode': True }})
    r"""Pagination token"""  
    x_amz_algorithm: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Algorithm', 'style': 'simple', 'explode': False }})  
    x_amz_content_sha256: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Content-Sha256', 'style': 'simple', 'explode': False }})  
    x_amz_credential: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Credential', 'style': 'simple', 'explode': False }})  
    x_amz_date: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Date', 'style': 'simple', 'explode': False }})  
    x_amz_security_token: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Security-Token', 'style': 'simple', 'explode': False }})  
    x_amz_signature: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Signature', 'style': 'simple', 'explode': False }})  
    x_amz_signed_headers: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-SignedHeaders', 'style': 'simple', 'explode': False }})  
    

@dataclasses.dataclass
class ListAnalyzedResourcesResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    access_denied_exception: Optional[Any] = dataclasses.field(default=None)
    r"""AccessDeniedException"""  
    internal_server_exception: Optional[Any] = dataclasses.field(default=None)
    r"""InternalServerException"""  
    list_analyzed_resources_response: Optional[shared_listanalyzedresourcesresponse.ListAnalyzedResourcesResponse] = dataclasses.field(default=None)
    r"""Success"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    resource_not_found_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ResourceNotFoundException"""  
    throttling_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ThrottlingException"""  
    validation_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ValidationException"""  
    