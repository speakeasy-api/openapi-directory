// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"bytes"
	"encoding/json"
	"errors"
	"fmt"
)

type AddressResponseCodeEnum string

const (
	AddressResponseCodeEnumTwoThousand AddressResponseCodeEnum = "2000"
)

func (e *AddressResponseCodeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "2000":
		*e = AddressResponseCodeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for AddressResponseCodeEnum: %s", s)
	}
}

type AddressResponseMessageEnum string

const (
	AddressResponseMessageEnumSuccess AddressResponseMessageEnum = "Success"
)

func (e *AddressResponseMessageEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Success":
		*e = AddressResponseMessageEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for AddressResponseMessageEnum: %s", s)
	}
}

type AddressResponseResultHitsType string

const (
	AddressResponseResultHitsTypePafAddress      AddressResponseResultHitsType = "PafAddress"
	AddressResponseResultHitsTypeMrAddress       AddressResponseResultHitsType = "MrAddress"
	AddressResponseResultHitsTypeNybAddress      AddressResponseResultHitsType = "NybAddress"
	AddressResponseResultHitsTypeWelshPafAddress AddressResponseResultHitsType = "WelshPafAddress"
	AddressResponseResultHitsTypePafAliasAddress AddressResponseResultHitsType = "PafAliasAddress"
)

type AddressResponseResultHits struct {
	PafAddress      *PafAddress
	MrAddress       *MrAddress
	NybAddress      *NybAddress
	WelshPafAddress *WelshPafAddress
	PafAliasAddress *PafAliasAddress

	Type AddressResponseResultHitsType
}

func CreateAddressResponseResultHitsPafAddress(pafAddress PafAddress) AddressResponseResultHits {
	typ := AddressResponseResultHitsTypePafAddress

	return AddressResponseResultHits{
		PafAddress: &pafAddress,
		Type:       typ,
	}
}

func CreateAddressResponseResultHitsMrAddress(mrAddress MrAddress) AddressResponseResultHits {
	typ := AddressResponseResultHitsTypeMrAddress

	return AddressResponseResultHits{
		MrAddress: &mrAddress,
		Type:      typ,
	}
}

func CreateAddressResponseResultHitsNybAddress(nybAddress NybAddress) AddressResponseResultHits {
	typ := AddressResponseResultHitsTypeNybAddress

	return AddressResponseResultHits{
		NybAddress: &nybAddress,
		Type:       typ,
	}
}

func CreateAddressResponseResultHitsWelshPafAddress(welshPafAddress WelshPafAddress) AddressResponseResultHits {
	typ := AddressResponseResultHitsTypeWelshPafAddress

	return AddressResponseResultHits{
		WelshPafAddress: &welshPafAddress,
		Type:            typ,
	}
}

func CreateAddressResponseResultHitsPafAliasAddress(pafAliasAddress PafAliasAddress) AddressResponseResultHits {
	typ := AddressResponseResultHitsTypePafAliasAddress

	return AddressResponseResultHits{
		PafAliasAddress: &pafAliasAddress,
		Type:            typ,
	}
}

func (u *AddressResponseResultHits) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	pafAddress := new(PafAddress)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&pafAddress); err == nil {
		u.PafAddress = pafAddress
		u.Type = AddressResponseResultHitsTypePafAddress
		return nil
	}

	mrAddress := new(MrAddress)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&mrAddress); err == nil {
		u.MrAddress = mrAddress
		u.Type = AddressResponseResultHitsTypeMrAddress
		return nil
	}

	nybAddress := new(NybAddress)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&nybAddress); err == nil {
		u.NybAddress = nybAddress
		u.Type = AddressResponseResultHitsTypeNybAddress
		return nil
	}

	welshPafAddress := new(WelshPafAddress)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&welshPafAddress); err == nil {
		u.WelshPafAddress = welshPafAddress
		u.Type = AddressResponseResultHitsTypeWelshPafAddress
		return nil
	}

	pafAliasAddress := new(PafAliasAddress)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&pafAliasAddress); err == nil {
		u.PafAliasAddress = pafAliasAddress
		u.Type = AddressResponseResultHitsTypePafAliasAddress
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u AddressResponseResultHits) MarshalJSON() ([]byte, error) {
	if u.PafAddress != nil {
		return json.Marshal(u.PafAddress)
	}

	if u.MrAddress != nil {
		return json.Marshal(u.MrAddress)
	}

	if u.NybAddress != nil {
		return json.Marshal(u.NybAddress)
	}

	if u.WelshPafAddress != nil {
		return json.Marshal(u.WelshPafAddress)
	}

	if u.PafAliasAddress != nil {
		return json.Marshal(u.PafAliasAddress)
	}

	return nil, nil
}

type AddressResponseResult struct {
	// List of matching addresses
	//
	Hits  []AddressResponseResultHits `json:"hits"`
	Limit int                         `json:"limit"`
	Page  int                         `json:"page"`
	Total int                         `json:"total"`
}

// AddressResponse - Success
type AddressResponse struct {
	Code    AddressResponseCodeEnum    `json:"code"`
	Message AddressResponseMessageEnum `json:"message"`
	Result  AddressResponseResult      `json:"result"`
}
