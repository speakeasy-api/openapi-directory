// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"time"
)

type MeetingsSecurity struct {
	OAuth string `security:"scheme,type=oauth2,name=Authorization"`
}

// MeetingsTypeEnum - The meeting types: <br>`scheduled` - This includes all valid past meetings (unexpired), live meetings and upcoming scheduled meetings. It is equivalent to the combined list of "Previous Meetings" and "Upcoming Meetings" displayed in the user's [Meetings page](https://zoom.us/meeting) on the Zoom Web Portal.<br>`live` - All the ongoing meetings.<br>`upcoming` - All upcoming meetings including live meetings.
type MeetingsTypeEnum string

const (
	MeetingsTypeEnumScheduled MeetingsTypeEnum = "scheduled"
	MeetingsTypeEnumLive      MeetingsTypeEnum = "live"
	MeetingsTypeEnumUpcoming  MeetingsTypeEnum = "upcoming"
)

func (e *MeetingsTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "scheduled":
		fallthrough
	case "live":
		fallthrough
	case "upcoming":
		*e = MeetingsTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for MeetingsTypeEnum: %s", s)
	}
}

type MeetingsRequest struct {
	// The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes.
	NextPageToken *string `queryParam:"style=form,explode=true,name=next_page_token"`
	// The page number of the current page in the returned records.
	PageNumber *string `queryParam:"style=form,explode=true,name=page_number"`
	// The number of records returned within a single API call.
	PageSize *int64 `queryParam:"style=form,explode=true,name=page_size"`
	// The meeting types: <br>`scheduled` - This includes all valid past meetings (unexpired), live meetings and upcoming scheduled meetings. It is equivalent to the combined list of "Previous Meetings" and "Upcoming Meetings" displayed in the user's [Meetings page](https://zoom.us/meeting) on the Zoom Web Portal.<br>`live` - All the ongoing meetings.<br>`upcoming` - All upcoming meetings including live meetings.
	Type *MeetingsTypeEnum `queryParam:"style=form,explode=true,name=type"`
	// The user ID or email address of the user. For user-level apps, pass `me` as the value for userId.
	UserID string `pathParam:"style=simple,explode=false,name=userId"`
}

// MeetingsGroupListMeetingsTypeEnum - Meeting Types:<br>`1` - Instant meeting.<br>`2` - Scheduled meeting.<br>`3` - Recurring meeting with no fixed time.<br>`8` - Recurring meeting with fixed time.
type MeetingsGroupListMeetingsTypeEnum string

const (
	MeetingsGroupListMeetingsTypeEnumOne   MeetingsGroupListMeetingsTypeEnum = "1"
	MeetingsGroupListMeetingsTypeEnumTwo   MeetingsGroupListMeetingsTypeEnum = "2"
	MeetingsGroupListMeetingsTypeEnumThree MeetingsGroupListMeetingsTypeEnum = "3"
	MeetingsGroupListMeetingsTypeEnumEight MeetingsGroupListMeetingsTypeEnum = "8"
)

func (e *MeetingsGroupListMeetingsTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "1":
		fallthrough
	case "2":
		fallthrough
	case "3":
		fallthrough
	case "8":
		*e = MeetingsGroupListMeetingsTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for MeetingsGroupListMeetingsTypeEnum: %s", s)
	}
}

type MeetingsGroupListMeetings struct {
	// Meeting description. The length of agenda gets truncated to 250 characters when you list all meetings for a user. To view the complete agenda of a meeting, retrieve details for a single meeting [here](https://marketplace.zoom.us/docs/api-reference/zoom-api/meetings/meeting).
	Agenda *string `json:"agenda,omitempty"`
	// Time of creation.
	CreatedAt *time.Time `json:"created_at,omitempty"`
	// Meeting duration.
	Duration *int64 `json:"duration,omitempty"`
	// ID of the user who is set as the host of the meeting.
	HostID *string `json:"host_id,omitempty"`
	// Meeting ID - also known as the meeting number in long (int64) format.
	ID *int64 `json:"id,omitempty"`
	// URL using which participants can join a meeting.
	JoinURL *string `json:"join_url,omitempty"`
	// [Personal meeting ID](https://support.zoom.us/hc/en-us/articles/201362843-What-is-Personal-Meeting-ID-PMI-and-Personal-Link-). This field is only returned if PMI was used to schedule the meeting.
	Pmi *string `json:"pmi,omitempty"`
	// Meeting start time.
	StartTime *time.Time `json:"start_time,omitempty"`
	// Timezone to format the meeting start time.
	Timezone *string `json:"timezone,omitempty"`
	// Meeting topic.
	Topic *string `json:"topic,omitempty"`
	// Meeting Types:<br>`1` - Instant meeting.<br>`2` - Scheduled meeting.<br>`3` - Recurring meeting with no fixed time.<br>`8` - Recurring meeting with fixed time.
	Type *MeetingsGroupListMeetingsTypeEnum `json:"type,omitempty"`
	// Unique Meeting ID. Each meeting instance will generate its own Meeting UUID.
	UUID *string `json:"uuid,omitempty"`
}

// MeetingsGroupList - Pagination Object.
type MeetingsGroupList struct {
	// List of Meeting objects.
	Meetings []MeetingsGroupListMeetings `json:"meetings,omitempty"`
	// The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes.
	NextPageToken *string `json:"next_page_token,omitempty"`
	// The number of pages returned for the request made.
	PageCount *int64 `json:"page_count,omitempty"`
	// The page number of the current results.
	PageNumber *int64 `json:"page_number,omitempty"`
	// The number of records returned with a single API call.
	PageSize *int64 `json:"page_size,omitempty"`
	// The total number of all the records available across pages.
	TotalRecords *int64 `json:"total_records,omitempty"`
}

type MeetingsResponse struct {
	Body        []byte
	ContentType string
	// **HTTP Status Code:** `200`<br>
	// List of meeting objects returned.
	GroupList   *MeetingsGroupList
	StatusCode  int
	RawResponse *http.Response
}
