"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional


@dataclasses.dataclass
class GetDeviceApplianceUplinksSettingsRequest:
    
    serial: str = dataclasses.field(metadata={'path_param': { 'field_name': 'serial', 'style': 'simple', 'explode': False }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetDeviceApplianceUplinksSettings200ApplicationJSONInterfacesWan1PppoeAuthentication:
    r"""Settings for PPPoE Authentication."""
    
    enabled: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('enabled'), 'exclude': lambda f: f is None }})
    r"""Whether PPPoE authentication is enabled."""  
    username: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('username'), 'exclude': lambda f: f is None }})
    r"""Username for PPPoE authentication."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetDeviceApplianceUplinksSettings200ApplicationJSONInterfacesWan1Pppoe:
    r"""Configuration options for PPPoE."""
    
    authentication: Optional[GetDeviceApplianceUplinksSettings200ApplicationJSONInterfacesWan1PppoeAuthentication] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('authentication'), 'exclude': lambda f: f is None }})
    r"""Settings for PPPoE Authentication."""  
    enabled: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('enabled'), 'exclude': lambda f: f is None }})
    r"""Whether PPPoE is enabled."""  
    
class GetDeviceApplianceUplinksSettings200ApplicationJSONInterfacesWan1SvisIpv4AssignmentModeEnum(str, Enum):
    r"""The assignment mode for this SVI. Applies only when PPPoE is disabled."""
    DYNAMIC = 'dynamic'
    STATIC = 'static'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetDeviceApplianceUplinksSettings200ApplicationJSONInterfacesWan1SvisIpv4Nameservers:
    r"""The nameserver settings for this SVI."""
    
    addresses: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('addresses'), 'exclude': lambda f: f is None }})
    r"""Up to 2 nameserver addresses to use, ordered in priority from highest to lowest priority."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetDeviceApplianceUplinksSettings200ApplicationJSONInterfacesWan1SvisIpv4:
    r"""IPv4 settings for static/dynamic mode."""
    
    address: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('address'), 'exclude': lambda f: f is None }})
    r"""IP address and subnet mask when in static mode."""  
    assignment_mode: Optional[GetDeviceApplianceUplinksSettings200ApplicationJSONInterfacesWan1SvisIpv4AssignmentModeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('assignmentMode'), 'exclude': lambda f: f is None }})
    r"""The assignment mode for this SVI. Applies only when PPPoE is disabled."""  
    gateway: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('gateway'), 'exclude': lambda f: f is None }})
    r"""Gateway IP address when in static mode."""  
    nameservers: Optional[GetDeviceApplianceUplinksSettings200ApplicationJSONInterfacesWan1SvisIpv4Nameservers] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('nameservers'), 'exclude': lambda f: f is None }})
    r"""The nameserver settings for this SVI."""  
    
class GetDeviceApplianceUplinksSettings200ApplicationJSONInterfacesWan1SvisIpv6AssignmentModeEnum(str, Enum):
    r"""The assignment mode for this SVI. Applies only when PPPoE is disabled."""
    DYNAMIC = 'dynamic'
    STATIC = 'static'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetDeviceApplianceUplinksSettings200ApplicationJSONInterfacesWan1SvisIpv6Nameservers:
    r"""The nameserver settings for this SVI."""
    
    addresses: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('addresses'), 'exclude': lambda f: f is None }})
    r"""Up to 2 nameserver addresses to use, ordered in priority from highest to lowest priority."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetDeviceApplianceUplinksSettings200ApplicationJSONInterfacesWan1SvisIpv6:
    r"""IPv6 settings for static/dynamic mode."""
    
    address: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('address'), 'exclude': lambda f: f is None }})
    r"""Static address that will override the one(s) received by SLAAC."""  
    assignment_mode: Optional[GetDeviceApplianceUplinksSettings200ApplicationJSONInterfacesWan1SvisIpv6AssignmentModeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('assignmentMode'), 'exclude': lambda f: f is None }})
    r"""The assignment mode for this SVI. Applies only when PPPoE is disabled."""  
    gateway: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('gateway'), 'exclude': lambda f: f is None }})
    r"""Static gateway that will override the one received by autoconf."""  
    nameservers: Optional[GetDeviceApplianceUplinksSettings200ApplicationJSONInterfacesWan1SvisIpv6Nameservers] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('nameservers'), 'exclude': lambda f: f is None }})
    r"""The nameserver settings for this SVI."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetDeviceApplianceUplinksSettings200ApplicationJSONInterfacesWan1Svis:
    r"""SVI settings by protocol."""
    
    ipv4: Optional[GetDeviceApplianceUplinksSettings200ApplicationJSONInterfacesWan1SvisIpv4] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ipv4'), 'exclude': lambda f: f is None }})
    r"""IPv4 settings for static/dynamic mode."""  
    ipv6: Optional[GetDeviceApplianceUplinksSettings200ApplicationJSONInterfacesWan1SvisIpv6] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ipv6'), 'exclude': lambda f: f is None }})
    r"""IPv6 settings for static/dynamic mode."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetDeviceApplianceUplinksSettings200ApplicationJSONInterfacesWan1VlanTagging:
    r"""VLAN tagging settings."""
    
    enabled: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('enabled'), 'exclude': lambda f: f is None }})
    r"""Whether VLAN tagging is enabled."""  
    vlan_id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('vlanId'), 'exclude': lambda f: f is None }})
    r"""The ID of the VLAN to use for VLAN tagging."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetDeviceApplianceUplinksSettings200ApplicationJSONInterfacesWan1:
    r"""WAN 1 settings."""
    
    enabled: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('enabled'), 'exclude': lambda f: f is None }})
    r"""Enable or disable the interface."""  
    pppoe: Optional[GetDeviceApplianceUplinksSettings200ApplicationJSONInterfacesWan1Pppoe] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('pppoe'), 'exclude': lambda f: f is None }})
    r"""Configuration options for PPPoE."""  
    svis: Optional[GetDeviceApplianceUplinksSettings200ApplicationJSONInterfacesWan1Svis] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('svis'), 'exclude': lambda f: f is None }})
    r"""SVI settings by protocol."""  
    vlan_tagging: Optional[GetDeviceApplianceUplinksSettings200ApplicationJSONInterfacesWan1VlanTagging] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('vlanTagging'), 'exclude': lambda f: f is None }})
    r"""VLAN tagging settings."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetDeviceApplianceUplinksSettings200ApplicationJSONInterfacesWan2PppoeAuthentication:
    r"""Settings for PPPoE Authentication."""
    
    enabled: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('enabled'), 'exclude': lambda f: f is None }})
    r"""Whether PPPoE authentication is enabled."""  
    username: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('username'), 'exclude': lambda f: f is None }})
    r"""Username for PPPoE authentication."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetDeviceApplianceUplinksSettings200ApplicationJSONInterfacesWan2Pppoe:
    r"""Configuration options for PPPoE."""
    
    authentication: Optional[GetDeviceApplianceUplinksSettings200ApplicationJSONInterfacesWan2PppoeAuthentication] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('authentication'), 'exclude': lambda f: f is None }})
    r"""Settings for PPPoE Authentication."""  
    enabled: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('enabled'), 'exclude': lambda f: f is None }})
    r"""Whether PPPoE is enabled."""  
    
class GetDeviceApplianceUplinksSettings200ApplicationJSONInterfacesWan2SvisIpv4AssignmentModeEnum(str, Enum):
    r"""The assignment mode for this SVI. Applies only when PPPoE is disabled."""
    DYNAMIC = 'dynamic'
    STATIC = 'static'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetDeviceApplianceUplinksSettings200ApplicationJSONInterfacesWan2SvisIpv4Nameservers:
    r"""The nameserver settings for this SVI."""
    
    addresses: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('addresses'), 'exclude': lambda f: f is None }})
    r"""Up to 2 nameserver addresses to use, ordered in priority from highest to lowest priority."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetDeviceApplianceUplinksSettings200ApplicationJSONInterfacesWan2SvisIpv4:
    r"""IPv4 settings for static/dynamic mode."""
    
    address: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('address'), 'exclude': lambda f: f is None }})
    r"""IP address and subnet mask when in static mode."""  
    assignment_mode: Optional[GetDeviceApplianceUplinksSettings200ApplicationJSONInterfacesWan2SvisIpv4AssignmentModeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('assignmentMode'), 'exclude': lambda f: f is None }})
    r"""The assignment mode for this SVI. Applies only when PPPoE is disabled."""  
    gateway: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('gateway'), 'exclude': lambda f: f is None }})
    r"""Gateway IP address when in static mode."""  
    nameservers: Optional[GetDeviceApplianceUplinksSettings200ApplicationJSONInterfacesWan2SvisIpv4Nameservers] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('nameservers'), 'exclude': lambda f: f is None }})
    r"""The nameserver settings for this SVI."""  
    
class GetDeviceApplianceUplinksSettings200ApplicationJSONInterfacesWan2SvisIpv6AssignmentModeEnum(str, Enum):
    r"""The assignment mode for this SVI. Applies only when PPPoE is disabled."""
    DYNAMIC = 'dynamic'
    STATIC = 'static'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetDeviceApplianceUplinksSettings200ApplicationJSONInterfacesWan2SvisIpv6Nameservers:
    r"""The nameserver settings for this SVI."""
    
    addresses: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('addresses'), 'exclude': lambda f: f is None }})
    r"""Up to 2 nameserver addresses to use, ordered in priority from highest to lowest priority."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetDeviceApplianceUplinksSettings200ApplicationJSONInterfacesWan2SvisIpv6:
    r"""IPv6 settings for static/dynamic mode."""
    
    address: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('address'), 'exclude': lambda f: f is None }})
    r"""Static address that will override the one(s) received by SLAAC."""  
    assignment_mode: Optional[GetDeviceApplianceUplinksSettings200ApplicationJSONInterfacesWan2SvisIpv6AssignmentModeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('assignmentMode'), 'exclude': lambda f: f is None }})
    r"""The assignment mode for this SVI. Applies only when PPPoE is disabled."""  
    gateway: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('gateway'), 'exclude': lambda f: f is None }})
    r"""Static gateway that will override the one received by autoconf."""  
    nameservers: Optional[GetDeviceApplianceUplinksSettings200ApplicationJSONInterfacesWan2SvisIpv6Nameservers] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('nameservers'), 'exclude': lambda f: f is None }})
    r"""The nameserver settings for this SVI."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetDeviceApplianceUplinksSettings200ApplicationJSONInterfacesWan2Svis:
    r"""SVI settings by protocol."""
    
    ipv4: Optional[GetDeviceApplianceUplinksSettings200ApplicationJSONInterfacesWan2SvisIpv4] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ipv4'), 'exclude': lambda f: f is None }})
    r"""IPv4 settings for static/dynamic mode."""  
    ipv6: Optional[GetDeviceApplianceUplinksSettings200ApplicationJSONInterfacesWan2SvisIpv6] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ipv6'), 'exclude': lambda f: f is None }})
    r"""IPv6 settings for static/dynamic mode."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetDeviceApplianceUplinksSettings200ApplicationJSONInterfacesWan2VlanTagging:
    r"""VLAN tagging settings."""
    
    enabled: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('enabled'), 'exclude': lambda f: f is None }})
    r"""Whether VLAN tagging is enabled."""  
    vlan_id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('vlanId'), 'exclude': lambda f: f is None }})
    r"""The ID of the VLAN to use for VLAN tagging."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetDeviceApplianceUplinksSettings200ApplicationJSONInterfacesWan2:
    r"""WAN 2 settings."""
    
    enabled: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('enabled'), 'exclude': lambda f: f is None }})
    r"""Enable or disable the interface."""  
    pppoe: Optional[GetDeviceApplianceUplinksSettings200ApplicationJSONInterfacesWan2Pppoe] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('pppoe'), 'exclude': lambda f: f is None }})
    r"""Configuration options for PPPoE."""  
    svis: Optional[GetDeviceApplianceUplinksSettings200ApplicationJSONInterfacesWan2Svis] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('svis'), 'exclude': lambda f: f is None }})
    r"""SVI settings by protocol."""  
    vlan_tagging: Optional[GetDeviceApplianceUplinksSettings200ApplicationJSONInterfacesWan2VlanTagging] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('vlanTagging'), 'exclude': lambda f: f is None }})
    r"""VLAN tagging settings."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetDeviceApplianceUplinksSettings200ApplicationJSONInterfaces:
    r"""Interface settings."""
    
    wan1: Optional[GetDeviceApplianceUplinksSettings200ApplicationJSONInterfacesWan1] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('wan1'), 'exclude': lambda f: f is None }})
    r"""WAN 1 settings."""  
    wan2: Optional[GetDeviceApplianceUplinksSettings200ApplicationJSONInterfacesWan2] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('wan2'), 'exclude': lambda f: f is None }})
    r"""WAN 2 settings."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetDeviceApplianceUplinksSettings200ApplicationJSON:
    r"""Successful operation"""
    
    interfaces: Optional[GetDeviceApplianceUplinksSettings200ApplicationJSONInterfaces] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('interfaces'), 'exclude': lambda f: f is None }})
    r"""Interface settings."""  
    

@dataclasses.dataclass
class GetDeviceApplianceUplinksSettingsResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    get_device_appliance_uplinks_settings_200_application_json_object: Optional[GetDeviceApplianceUplinksSettings200ApplicationJSON] = dataclasses.field(default=None)
    r"""Successful operation"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    