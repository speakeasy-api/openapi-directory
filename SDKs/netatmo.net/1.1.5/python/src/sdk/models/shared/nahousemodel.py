"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import nadate as shared_nadate
from ..shared import nahousemodelca as shared_nahousemodelca
from ..shared import nalinkstation as shared_nalinkstation
from ..shared import napidalgo as shared_napidalgo
from ..shared import nasimplealgo as shared_nasimplealgo
from ..shared import nastation as shared_nastation
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class NAHouseModel:
    
    algo_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('algo_type'), 'exclude': lambda f: f is None }})  
    ca: Optional[shared_nahousemodelca.NAHouseModelCa] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ca'), 'exclude': lambda f: f is None }})  
    ext_temps: Optional[dict[str, int]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ext_temps'), 'exclude': lambda f: f is None }})  
    first_anticipate_avail: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('first_anticipate_avail'), 'exclude': lambda f: f is None }})  
    first_pid_avail: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('first_pid_avail'), 'exclude': lambda f: f is None }})  
    gefs: Optional[shared_nastation.NAStation] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('gefs'), 'exclude': lambda f: f is None }})  
    in_use: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('in_use'), 'exclude': lambda f: f is None }})  
    last_compute_try: Optional[shared_nadate.NADate] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('last_compute_try'), 'exclude': lambda f: f is None }})  
    link_station: Optional[shared_nalinkstation.NALinkStation] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('link_station'), 'exclude': lambda f: f is None }})  
    pid_algo: Optional[shared_napidalgo.NAPidAlgo] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('pid_algo'), 'exclude': lambda f: f is None }})  
    prefered_algo_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('prefered_algo_type'), 'exclude': lambda f: f is None }})  
    simple_algo: Optional[shared_nasimplealgo.NASimpleAlgo] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('simple_algo'), 'exclude': lambda f: f is None }})  
    station: Optional[shared_nastation.NAStation] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('station'), 'exclude': lambda f: f is None }})  
    station_firsttime_anticipate: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('station_firsttime_anticipate'), 'exclude': lambda f: f is None }})  
    time: Optional[shared_nadate.NADate] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('time'), 'exclude': lambda f: f is None }})  
    time_algo_changed: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('time_algo_changed'), 'exclude': lambda f: f is None }})  
    time_pid_computed: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('time_pid_computed'), 'exclude': lambda f: f is None }})  
    