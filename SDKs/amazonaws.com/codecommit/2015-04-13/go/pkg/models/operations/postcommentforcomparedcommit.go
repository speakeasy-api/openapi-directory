// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// PostCommentForComparedCommitXAmzTargetEnum
type PostCommentForComparedCommitXAmzTargetEnum string

const (
	PostCommentForComparedCommitXAmzTargetEnumCodeCommit20150413PostCommentForComparedCommit PostCommentForComparedCommitXAmzTargetEnum = "CodeCommit_20150413.PostCommentForComparedCommit"
)

func (e *PostCommentForComparedCommitXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "CodeCommit_20150413.PostCommentForComparedCommit":
		*e = PostCommentForComparedCommitXAmzTargetEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PostCommentForComparedCommitXAmzTargetEnum: %s", s)
	}
}

type PostCommentForComparedCommitHeaders struct {
	XAmzAlgorithm     *string                                    `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string                                    `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string                                    `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string                                    `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string                                    `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string                                    `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string                                    `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget        PostCommentForComparedCommitXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type PostCommentForComparedCommitRequest struct {
	Headers PostCommentForComparedCommitHeaders
	Request shared.PostCommentForComparedCommitInput `request:"mediaType=application/json"`
}

type PostCommentForComparedCommitResponse struct {
	// BeforeCommitIdAndAfterCommitIdAreSameException
	BeforeCommitIDAndAfterCommitIDAreSameException interface{}
	// ClientRequestTokenRequiredException
	ClientRequestTokenRequiredException interface{}
	// CommentContentRequiredException
	CommentContentRequiredException interface{}
	// CommentContentSizeLimitExceededException
	CommentContentSizeLimitExceededException interface{}
	// CommitDoesNotExistException
	CommitDoesNotExistException interface{}
	// CommitIdRequiredException
	CommitIDRequiredException interface{}
	ContentType               string
	// EncryptionIntegrityChecksFailedException
	EncryptionIntegrityChecksFailedException interface{}
	// EncryptionKeyAccessDeniedException
	EncryptionKeyAccessDeniedException interface{}
	// EncryptionKeyDisabledException
	EncryptionKeyDisabledException interface{}
	// EncryptionKeyNotFoundException
	EncryptionKeyNotFoundException interface{}
	// EncryptionKeyUnavailableException
	EncryptionKeyUnavailableException interface{}
	// IdempotencyParameterMismatchException
	IdempotencyParameterMismatchException interface{}
	// InvalidClientRequestTokenException
	InvalidClientRequestTokenException interface{}
	// InvalidCommitIdException
	InvalidCommitIDException interface{}
	// InvalidFileLocationException
	InvalidFileLocationException interface{}
	// InvalidFilePositionException
	InvalidFilePositionException interface{}
	// InvalidPathException
	InvalidPathException interface{}
	// InvalidRelativeFileVersionEnumException
	InvalidRelativeFileVersionEnumException interface{}
	// InvalidRepositoryNameException
	InvalidRepositoryNameException interface{}
	// PathDoesNotExistException
	PathDoesNotExistException interface{}
	// PathRequiredException
	PathRequiredException interface{}
	// Success
	PostCommentForComparedCommitOutput *shared.PostCommentForComparedCommitOutput
	// RepositoryDoesNotExistException
	RepositoryDoesNotExistException interface{}
	// RepositoryNameRequiredException
	RepositoryNameRequiredException interface{}
	StatusCode                      int
	RawResponse                     *http.Response
}
