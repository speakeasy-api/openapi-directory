"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import googleclouddatacatalogv1beta1systemtimestamps as shared_googleclouddatacatalogv1beta1systemtimestamps
from ..shared import googleclouddatacatalogv1beta1taxonomyservice as shared_googleclouddatacatalogv1beta1taxonomyservice
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class GoogleCloudDatacatalogV1beta1TaxonomyActivatedPolicyTypesEnum(str, Enum):
    POLICY_TYPE_UNSPECIFIED = 'POLICY_TYPE_UNSPECIFIED'
    FINE_GRAINED_ACCESS_CONTROL = 'FINE_GRAINED_ACCESS_CONTROL'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GoogleCloudDatacatalogV1beta1Taxonomy:
    r"""A taxonomy is a collection of policy tags that classify data along a common axis. For instance a data *sensitivity* taxonomy could contain policy tags denoting PII such as age, zipcode, and SSN. A data *origin* taxonomy could contain policy tags to distinguish user data, employee data, partner data, public data."""
    
    activated_policy_types: Optional[list[GoogleCloudDatacatalogV1beta1TaxonomyActivatedPolicyTypesEnum]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('activatedPolicyTypes'), 'exclude': lambda f: f is None }})
    r"""Optional. A list of policy types that are activated for this taxonomy. If not set, defaults to an empty list."""  
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description'), 'exclude': lambda f: f is None }})
    r"""Optional. Description of this taxonomy. It must: contain only unicode characters, tabs, newlines, carriage returns and page breaks; and be at most 2000 bytes long when encoded in UTF-8. If not set, defaults to an empty description."""  
    display_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('displayName'), 'exclude': lambda f: f is None }})
    r"""Required. User defined name of this taxonomy. It must: contain only unicode letters, numbers, underscores, dashes and spaces; not start or end with spaces; and be at most 200 bytes long when encoded in UTF-8. The taxonomy display name must be unique within an organization."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""Output only. Resource name of this taxonomy, whose format is: \\"projects/{project_number}/locations/{location_id}/taxonomies/{id}\\"."""  
    policy_tag_count: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('policyTagCount'), 'exclude': lambda f: f is None }})
    r"""Output only. Number of policy tags contained in this taxonomy."""  
    service: Optional[shared_googleclouddatacatalogv1beta1taxonomyservice.GoogleCloudDatacatalogV1beta1TaxonomyService] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('service'), 'exclude': lambda f: f is None }})
    r"""The source system of the Taxonomy."""  
    taxonomy_timestamps: Optional[shared_googleclouddatacatalogv1beta1systemtimestamps.GoogleCloudDatacatalogV1beta1SystemTimestamps] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('taxonomyTimestamps'), 'exclude': lambda f: f is None }})
    r"""Timestamps about this resource according to a particular system."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GoogleCloudDatacatalogV1beta1TaxonomyInput:
    r"""A taxonomy is a collection of policy tags that classify data along a common axis. For instance a data *sensitivity* taxonomy could contain policy tags denoting PII such as age, zipcode, and SSN. A data *origin* taxonomy could contain policy tags to distinguish user data, employee data, partner data, public data."""
    
    activated_policy_types: Optional[list[GoogleCloudDatacatalogV1beta1TaxonomyActivatedPolicyTypesEnum]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('activatedPolicyTypes'), 'exclude': lambda f: f is None }})
    r"""Optional. A list of policy types that are activated for this taxonomy. If not set, defaults to an empty list."""  
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description'), 'exclude': lambda f: f is None }})
    r"""Optional. Description of this taxonomy. It must: contain only unicode characters, tabs, newlines, carriage returns and page breaks; and be at most 2000 bytes long when encoded in UTF-8. If not set, defaults to an empty description."""  
    display_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('displayName'), 'exclude': lambda f: f is None }})
    r"""Required. User defined name of this taxonomy. It must: contain only unicode letters, numbers, underscores, dashes and spaces; not start or end with spaces; and be at most 200 bytes long when encoded in UTF-8. The taxonomy display name must be unique within an organization."""  
    service: Optional[shared_googleclouddatacatalogv1beta1taxonomyservice.GoogleCloudDatacatalogV1beta1TaxonomyService] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('service'), 'exclude': lambda f: f is None }})
    r"""The source system of the Taxonomy."""  
    taxonomy_timestamps: Optional[shared_googleclouddatacatalogv1beta1systemtimestamps.GoogleCloudDatacatalogV1beta1SystemTimestampsInput] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('taxonomyTimestamps'), 'exclude': lambda f: f is None }})
    r"""Timestamps about this resource according to a particular system."""  
    