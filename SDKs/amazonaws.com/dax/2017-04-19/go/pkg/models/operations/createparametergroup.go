// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// CreateParameterGroupXAmzTargetEnum
type CreateParameterGroupXAmzTargetEnum string

const (
	CreateParameterGroupXAmzTargetEnumAmazonDaxv3CreateParameterGroup CreateParameterGroupXAmzTargetEnum = "AmazonDAXV3.CreateParameterGroup"
)

func (e *CreateParameterGroupXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "AmazonDAXV3.CreateParameterGroup":
		*e = CreateParameterGroupXAmzTargetEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateParameterGroupXAmzTargetEnum: %s", s)
	}
}

type CreateParameterGroupRequest struct {
	CreateParameterGroupRequest shared.CreateParameterGroupRequest `request:"mediaType=application/json"`
	XAmzAlgorithm               *string                            `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256           *string                            `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential              *string                            `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate                    *string                            `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken           *string                            `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature               *string                            `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders           *string                            `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget                  CreateParameterGroupXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type CreateParameterGroupResponse struct {
	ContentType string
	// Success
	CreateParameterGroupResponse *shared.CreateParameterGroupResponse
	// InvalidParameterCombinationException
	InvalidParameterCombinationException interface{}
	// InvalidParameterGroupStateFault
	InvalidParameterGroupStateFault interface{}
	// InvalidParameterValueException
	InvalidParameterValueException interface{}
	// ParameterGroupAlreadyExistsFault
	ParameterGroupAlreadyExistsFault interface{}
	// ParameterGroupQuotaExceededFault
	ParameterGroupQuotaExceededFault interface{}
	// ServiceLinkedRoleNotFoundFault
	ServiceLinkedRoleNotFoundFault interface{}
	StatusCode                     int
	RawResponse                    *http.Response
}
