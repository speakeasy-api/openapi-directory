// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// SmartMeDeviceConfigurationContainerDNSUpdateStateEnum - Configuration of the dynamic DNS service. More information: http://wiki.smart-me.com/index.php/Dynamisches_DNS
type SmartMeDeviceConfigurationContainerDNSUpdateStateEnum string

const (
	SmartMeDeviceConfigurationContainerDNSUpdateStateEnumNoUpdate            SmartMeDeviceConfigurationContainerDNSUpdateStateEnum = "NoUpdate"
	SmartMeDeviceConfigurationContainerDNSUpdateStateEnumDNSUpdatePublicIP   SmartMeDeviceConfigurationContainerDNSUpdateStateEnum = "DnsUpdatePublicIp"
	SmartMeDeviceConfigurationContainerDNSUpdateStateEnumDNSUpdateInternalIP SmartMeDeviceConfigurationContainerDNSUpdateStateEnum = "DnsUpdateInternalIp"
)

func (e SmartMeDeviceConfigurationContainerDNSUpdateStateEnum) ToPointer() *SmartMeDeviceConfigurationContainerDNSUpdateStateEnum {
	return &e
}

func (e *SmartMeDeviceConfigurationContainerDNSUpdateStateEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "NoUpdate":
		fallthrough
	case "DnsUpdatePublicIp":
		fallthrough
	case "DnsUpdateInternalIp":
		*e = SmartMeDeviceConfigurationContainerDNSUpdateStateEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SmartMeDeviceConfigurationContainerDNSUpdateStateEnum: %v", v)
	}
}

// SmartMeDeviceConfigurationContainerUploadIntervalEnum - Number of seconds the device will upload the data. For smaller values maybe a professional license is needed.
type SmartMeDeviceConfigurationContainerUploadIntervalEnum string

const (
	SmartMeDeviceConfigurationContainerUploadIntervalEnumUploadInterval1s    SmartMeDeviceConfigurationContainerUploadIntervalEnum = "UploadInterval_1s"
	SmartMeDeviceConfigurationContainerUploadIntervalEnumUploadInterval5s    SmartMeDeviceConfigurationContainerUploadIntervalEnum = "UploadInterval_5s"
	SmartMeDeviceConfigurationContainerUploadIntervalEnumUploadInterval10s   SmartMeDeviceConfigurationContainerUploadIntervalEnum = "UploadInterval_10s"
	SmartMeDeviceConfigurationContainerUploadIntervalEnumUploadInterval30s   SmartMeDeviceConfigurationContainerUploadIntervalEnum = "UploadInterval_30s"
	SmartMeDeviceConfigurationContainerUploadIntervalEnumUploadInterval60s   SmartMeDeviceConfigurationContainerUploadIntervalEnum = "UploadInterval_60s"
	SmartMeDeviceConfigurationContainerUploadIntervalEnumUploadInterval5min  SmartMeDeviceConfigurationContainerUploadIntervalEnum = "UploadInterval_5min"
	SmartMeDeviceConfigurationContainerUploadIntervalEnumUploadInterval15min SmartMeDeviceConfigurationContainerUploadIntervalEnum = "UploadInterval_15min"
	SmartMeDeviceConfigurationContainerUploadIntervalEnumUploadInterval30min SmartMeDeviceConfigurationContainerUploadIntervalEnum = "UploadInterval_30min"
	SmartMeDeviceConfigurationContainerUploadIntervalEnumUploadInterval60min SmartMeDeviceConfigurationContainerUploadIntervalEnum = "UploadInterval_60min"
	SmartMeDeviceConfigurationContainerUploadIntervalEnumUploadInterval6h    SmartMeDeviceConfigurationContainerUploadIntervalEnum = "UploadInterval_6h"
	SmartMeDeviceConfigurationContainerUploadIntervalEnumUploadInterval12h   SmartMeDeviceConfigurationContainerUploadIntervalEnum = "UploadInterval_12h"
	SmartMeDeviceConfigurationContainerUploadIntervalEnumUploadInterval24h   SmartMeDeviceConfigurationContainerUploadIntervalEnum = "UploadInterval_24h"
)

func (e SmartMeDeviceConfigurationContainerUploadIntervalEnum) ToPointer() *SmartMeDeviceConfigurationContainerUploadIntervalEnum {
	return &e
}

func (e *SmartMeDeviceConfigurationContainerUploadIntervalEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "UploadInterval_1s":
		fallthrough
	case "UploadInterval_5s":
		fallthrough
	case "UploadInterval_10s":
		fallthrough
	case "UploadInterval_30s":
		fallthrough
	case "UploadInterval_60s":
		fallthrough
	case "UploadInterval_5min":
		fallthrough
	case "UploadInterval_15min":
		fallthrough
	case "UploadInterval_30min":
		fallthrough
	case "UploadInterval_60min":
		fallthrough
	case "UploadInterval_6h":
		fallthrough
	case "UploadInterval_12h":
		fallthrough
	case "UploadInterval_24h":
		*e = SmartMeDeviceConfigurationContainerUploadIntervalEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SmartMeDeviceConfigurationContainerUploadIntervalEnum: %v", v)
	}
}

// SmartMeDeviceConfigurationContainer - API Container class for the meter configuration
type SmartMeDeviceConfigurationContainer struct {
	// The encryption key used to decrypt messages received from an external meter (used only for the smart-me modules)
	DeviceEncryptionKey *string `json:"DeviceEncryptionKey,omitempty" form:"name=DeviceEncryptionKey"`
	// PIN code to enter on a external meter (e.g. for the FNN meters)
	DevicePinCode *string `json:"DevicePinCode,omitempty" form:"name=DevicePinCode"`
	// Configuration of the dynamic DNS service. More information: http://wiki.smart-me.com/index.php/Dynamisches_DNS
	DNSUpdateState *SmartMeDeviceConfigurationContainerDNSUpdateStateEnum `json:"DnsUpdateState,omitempty" form:"name=DnsUpdateState"`
	// Enables or disables Modbus TCP (if the meter supports it).
	EnableModbusTCP *bool `json:"EnableModbusTcp,omitempty" form:"name=EnableModbusTcp"`
	// The ID of the device
	ID *string `json:"Id,omitempty" form:"name=Id"`
	// The configuration for the intput outputs
	InputConfiguration []InputConfigurationContainer `json:"InputConfiguration,omitempty" form:"name=InputConfiguration,json"`
	// The configuration for the external outputs
	OutputConfiguration []OutputConfigurationContainer `json:"OutputConfiguration,omitempty" form:"name=OutputConfiguration,json"`
	// Shows the reactive energy values (if the meter supports it).
	ShowReactiveEnergy *bool `json:"ShowReactiveEnergy,omitempty" form:"name=ShowReactiveEnergy"`
	// The configuration for the phase switches
	SwitchConfiguration []SwitchConfigurationContainer `json:"SwitchConfiguration,omitempty" form:"name=SwitchConfiguration,json"`
	// Number of seconds the device will upload the data. For smaller values maybe a professional license is needed.
	UploadInterval *SmartMeDeviceConfigurationContainerUploadIntervalEnum `json:"UploadInterval,omitempty" form:"name=UploadInterval"`
}
