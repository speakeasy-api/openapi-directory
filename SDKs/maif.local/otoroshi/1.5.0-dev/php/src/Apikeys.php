<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Apikeys 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Get all api keys
     * 
     * Get all api keys
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AllApiKeysSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AllApiKeysResponse
     */
	public function allApiKeys(
        \OpenAPI\OpenAPI\Models\Operations\AllApiKeysSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AllApiKeysResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/apikeys');
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AllApiKeysResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiKeys = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\ApiKey>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * Get an api key
     * 
     * Get an api key for a specified service descriptor
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ApiKeyRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ApiKeySecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ApiKeyResponse
     */
	public function apiKey(
        \OpenAPI\OpenAPI\Models\Operations\ApiKeyRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ApiKeySecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ApiKeyResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/services/{serviceId}/apikeys/{clientId}', \OpenAPI\OpenAPI\Models\Operations\ApiKeyRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ApiKeyResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiKey = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApiKey', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * Get an api key
     * 
     * Get an api key for a specified service group
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ApiKeyFromGroupRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ApiKeyFromGroupSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ApiKeyFromGroupResponse
     */
	public function apiKeyFromGroup(
        \OpenAPI\OpenAPI\Models\Operations\ApiKeyFromGroupRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ApiKeyFromGroupSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ApiKeyFromGroupResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/groups/{groupId}/apikeys/{clientId}', \OpenAPI\OpenAPI\Models\Operations\ApiKeyFromGroupRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ApiKeyFromGroupResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiKey = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApiKey', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * Get the quota state of an api key
     * 
     * Get the quota state of an api key
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ApiKeyFromGroupQuotasRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ApiKeyFromGroupQuotasSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ApiKeyFromGroupQuotasResponse
     */
	public function apiKeyFromGroupQuotas(
        \OpenAPI\OpenAPI\Models\Operations\ApiKeyFromGroupQuotasRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ApiKeyFromGroupQuotasSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ApiKeyFromGroupQuotasResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/groups/{groupId}/apikeys/{clientId}/quotas', \OpenAPI\OpenAPI\Models\Operations\ApiKeyFromGroupQuotasRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ApiKeyFromGroupQuotasResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->quotas = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Quotas', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * Get the group of an api key
     * 
     * Get the group of an api key
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ApiKeyGroupRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ApiKeyGroupSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ApiKeyGroupResponse
     */
	public function apiKeyGroup(
        \OpenAPI\OpenAPI\Models\Operations\ApiKeyGroupRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ApiKeyGroupSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ApiKeyGroupResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/services/{serviceId}/apikeys/{clientId}/group', \OpenAPI\OpenAPI\Models\Operations\ApiKeyGroupRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ApiKeyGroupResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->group = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Group', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * Get the quota state of an api key
     * 
     * Get the quota state of an api key
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ApiKeyQuotasRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ApiKeyQuotasSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ApiKeyQuotasResponse
     */
	public function apiKeyQuotas(
        \OpenAPI\OpenAPI\Models\Operations\ApiKeyQuotasRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ApiKeyQuotasSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ApiKeyQuotasResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/services/{serviceId}/apikeys/{clientId}/quotas', \OpenAPI\OpenAPI\Models\Operations\ApiKeyQuotasRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ApiKeyQuotasResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->quotas = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Quotas', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * Get all api keys for the group of a service
     * 
     * Get all api keys for the group of a service
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ApiKeysRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ApiKeysSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ApiKeysResponse
     */
	public function apiKeys(
        \OpenAPI\OpenAPI\Models\Operations\ApiKeysRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ApiKeysSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ApiKeysResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/services/{serviceId}/apikeys', \OpenAPI\OpenAPI\Models\Operations\ApiKeysRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ApiKeysResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiKeys = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\ApiKey>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * Get all api keys for the group of a service
     * 
     * Get all api keys for the group of a service
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ApiKeysFromGroupRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ApiKeysFromGroupSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ApiKeysFromGroupResponse
     */
	public function apiKeysFromGroup(
        \OpenAPI\OpenAPI\Models\Operations\ApiKeysFromGroupRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ApiKeysFromGroupSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ApiKeysFromGroupResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/groups/{groupId}/apikeys', \OpenAPI\OpenAPI\Models\Operations\ApiKeysFromGroupRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ApiKeysFromGroupResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiKeys = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\ApiKey>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * Create a new api key for a service
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateApiKeyRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateApiKeySecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateApiKeyResponse
     */
	public function createApiKey(
        \OpenAPI\OpenAPI\Models\Operations\CreateApiKeyRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CreateApiKeySecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateApiKeyResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/services/{serviceId}/apikeys', \OpenAPI\OpenAPI\Models\Operations\CreateApiKeyRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "apiKey", "json");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateApiKeyResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiKey = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApiKey', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * Create a new api key for a group
     * 
     * Create a new api key for a group
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateApiKeyFromGroupRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateApiKeyFromGroupSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateApiKeyFromGroupResponse
     */
	public function createApiKeyFromGroup(
        \OpenAPI\OpenAPI\Models\Operations\CreateApiKeyFromGroupRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CreateApiKeyFromGroupSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateApiKeyFromGroupResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/groups/{groupId}/apikeys', \OpenAPI\OpenAPI\Models\Operations\CreateApiKeyFromGroupRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "apiKey", "json");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateApiKeyFromGroupResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiKey = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApiKey', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * Delete an api key
     * 
     * Delete an api key for a specified service descriptor
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteApiKeyRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteApiKeySecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteApiKeyResponse
     */
	public function deleteApiKey(
        \OpenAPI\OpenAPI\Models\Operations\DeleteApiKeyRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeleteApiKeySecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteApiKeyResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/services/{serviceId}/apikeys/{clientId}', \OpenAPI\OpenAPI\Models\Operations\DeleteApiKeyRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteApiKeyResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->deleted = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Deleted', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * Delete an api key
     * 
     * Delete an api key for a specified service group
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteApiKeyFromGroupRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteApiKeyFromGroupSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteApiKeyFromGroupResponse
     */
	public function deleteApiKeyFromGroup(
        \OpenAPI\OpenAPI\Models\Operations\DeleteApiKeyFromGroupRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeleteApiKeyFromGroupSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteApiKeyFromGroupResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/groups/{groupId}/apikeys/{clientId}', \OpenAPI\OpenAPI\Models\Operations\DeleteApiKeyFromGroupRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteApiKeyFromGroupResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->deleted = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Deleted', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * Update an api key with a diff
     * 
     * Update an api key for a specified service descriptor with a diff
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PatchApiKeyRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PatchApiKeySecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PatchApiKeyResponse
     */
	public function patchApiKey(
        \OpenAPI\OpenAPI\Models\Operations\PatchApiKeyRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PatchApiKeySecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PatchApiKeyResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/services/{serviceId}/apikeys/{clientId}', \OpenAPI\OpenAPI\Models\Operations\PatchApiKeyRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PatchApiKeyResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiKey = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApiKey', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * Update an api key with a diff
     * 
     * Update an api key for a specified service descriptor with a diff
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PatchApiKeyFromGroupRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PatchApiKeyFromGroupSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PatchApiKeyFromGroupResponse
     */
	public function patchApiKeyFromGroup(
        \OpenAPI\OpenAPI\Models\Operations\PatchApiKeyFromGroupRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PatchApiKeyFromGroupSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PatchApiKeyFromGroupResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/groups/{groupId}/apikeys/{clientId}', \OpenAPI\OpenAPI\Models\Operations\PatchApiKeyFromGroupRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PatchApiKeyFromGroupResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiKey = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApiKey', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * Reset the quota state of an api key
     * 
     * Reset the quota state of an api key
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ResetApiKeyFromGroupQuotasRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ResetApiKeyFromGroupQuotasSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ResetApiKeyFromGroupQuotasResponse
     */
	public function resetApiKeyFromGroupQuotas(
        \OpenAPI\OpenAPI\Models\Operations\ResetApiKeyFromGroupQuotasRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ResetApiKeyFromGroupQuotasSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ResetApiKeyFromGroupQuotasResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/groups/{groupId}/apikeys/{clientId}/quotas', \OpenAPI\OpenAPI\Models\Operations\ResetApiKeyFromGroupQuotasRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ResetApiKeyFromGroupQuotasResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->quotas = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Quotas', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * Reset the quota state of an api key
     * 
     * Reset the quota state of an api key
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ResetApiKeyQuotasRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ResetApiKeyQuotasSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ResetApiKeyQuotasResponse
     */
	public function resetApiKeyQuotas(
        \OpenAPI\OpenAPI\Models\Operations\ResetApiKeyQuotasRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ResetApiKeyQuotasSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ResetApiKeyQuotasResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/services/{serviceId}/apikeys/{clientId}/quotas', \OpenAPI\OpenAPI\Models\Operations\ResetApiKeyQuotasRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ResetApiKeyQuotasResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->quotas = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Quotas', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * Update an api key
     * 
     * Update an api key for a specified service descriptor
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateApiKeyRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateApiKeySecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateApiKeyResponse
     */
	public function updateApiKey(
        \OpenAPI\OpenAPI\Models\Operations\UpdateApiKeyRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\UpdateApiKeySecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateApiKeyResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/services/{serviceId}/apikeys/{clientId}', \OpenAPI\OpenAPI\Models\Operations\UpdateApiKeyRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "apiKey", "json");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateApiKeyResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiKey = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApiKey', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * Update an api key
     * 
     * Update an api key for a specified service group
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateApiKeyFromGroupRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateApiKeyFromGroupSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateApiKeyFromGroupResponse
     */
	public function updateApiKeyFromGroup(
        \OpenAPI\OpenAPI\Models\Operations\UpdateApiKeyFromGroupRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\UpdateApiKeyFromGroupSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateApiKeyFromGroupResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/groups/{groupId}/apikeys/{clientId}', \OpenAPI\OpenAPI\Models\Operations\UpdateApiKeyFromGroupRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "apiKey", "json");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateApiKeyFromGroupResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiKey = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApiKey', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
}