/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import org.openapis.openapi.utils.SpeakeasyMetadata;

public class PostGeomarksNewRequestBody {
    /**
     * When multiple=true select this option to allow overlapping geometries
     */
    @SpeakeasyMetadata("form:name=allowOverlap")
    public PostGeomarksNewRequestBodyAllowOverlapEnum allowOverlap;
    public PostGeomarksNewRequestBody withAllowOverlap(PostGeomarksNewRequestBodyAllowOverlapEnum allowOverlap) {
        this.allowOverlap = allowOverlap;
        return this;
    }
    
    /**
     * The binary or character content representing the geometry or geometries
     */
    @SpeakeasyMetadata("form:name=body")
    public String body;
    public PostGeomarksNewRequestBody withBody(String body) {
        this.body = body;
        return this;
    }
    
    /**
     * If bufferMetres is specified, The style of buffer to use at the ends of a buffered line.
     */
    @SpeakeasyMetadata("form:name=bufferCap")
    public PostGeomarksNewRequestBodyBufferCapEnum bufferCap;
    public PostGeomarksNewRequestBody withBufferCap(PostGeomarksNewRequestBodyBufferCapEnum bufferCap) {
        this.bufferCap = bufferCap;
        return this;
    }
    
    /**
     * If bufferMetres is specified, The style of buffer to use for joins between the line segments for lines and polygons.
     */
    @SpeakeasyMetadata("form:name=bufferJoin")
    public PostGeomarksNewRequestBodyBufferJoinEnum bufferJoin;
    public PostGeomarksNewRequestBody withBufferJoin(PostGeomarksNewRequestBodyBufferJoinEnum bufferJoin) {
        this.bufferJoin = bufferJoin;
        return this;
    }
    
    /**
     * The amount to buffer the geometry in metres, must only contain numerical digits (e.g 10). Leave blank and no buffer will be added to input geometries. If blank then any Point, LineString, MultiPoint and MultiLineString geometries will be ignored.
     */
    @SpeakeasyMetadata("form:name=bufferMetres")
    public Long bufferMetres;
    public PostGeomarksNewRequestBody withBufferMetres(Long bufferMetres) {
        this.bufferMetres = bufferMetres;
        return this;
    }
    
    /**
     * If bufferMetres is specified, the maximum ratio of distance from the original geometry to a mitre buffer point and the buffer amount. If the ratio is greater than this a bevel will be used instead. This prevents infinite distances when the angle between the two lines at a join is small. Must be &gt; 0.
     */
    @SpeakeasyMetadata("form:name=bufferMitreLimit")
    public Long bufferMitreLimit;
    public PostGeomarksNewRequestBody withBufferMitreLimit(Long bufferMitreLimit) {
        this.bufferMitreLimit = bufferMitreLimit;
        return this;
    }
    
    /**
     * If bufferMetres is specified, the number of line segments used in each quadrant to approximate the curve for round end-cap and join styles. Must be &gt; 0.
     */
    @SpeakeasyMetadata("form:name=bufferSegments")
    public Long bufferSegments;
    public PostGeomarksNewRequestBody withBufferSegments(Long bufferSegments) {
        this.bufferSegments = bufferSegments;
        return this;
    }
    
    /**
     * The callback function a JSON result format would be wrapped in to support Ajax requests.
     */
    @SpeakeasyMetadata("form:name=callback")
    public String callback;
    public PostGeomarksNewRequestBody withCallback(String callback) {
        this.callback = callback;
        return this;
    }
    
    /**
     * The url to redirect if the geomark could not be created. The URL will include a &lt;fieldName&gt;_Error parameter with the error message for the field that caused the error.
     */
    @SpeakeasyMetadata("form:name=failureRedirectUrl")
    public String failureRedirectUrl;
    public PostGeomarksNewRequestBody withFailureRedirectUrl(String failureRedirectUrl) {
        this.failureRedirectUrl = failureRedirectUrl;
        return this;
    }
    
    /**
     * The file format name extension of the input geometry.
     */
    @SpeakeasyMetadata("form:name=format")
    public PostGeomarksNewRequestBodyFormatEnum format;
    public PostGeomarksNewRequestBody withFormat(PostGeomarksNewRequestBodyFormatEnum format) {
        this.format = format;
        return this;
    }
    
    /**
     * Boolean flag indicating if multiple geometries are to be used for the geomark (true) or only a single geometry from the first geometry (false).
     */
    @SpeakeasyMetadata("form:name=multiple")
    public PostGeomarksNewRequestBodyMultipleEnum multiple;
    public PostGeomarksNewRequestBody withMultiple(PostGeomarksNewRequestBodyMultipleEnum multiple) {
        this.multiple = multiple;
        return this;
    }
    
    /**
     * The optional external URL to redirect the user to when the geomark is created rather than showing the geomark info page. The geomarkId and geomarkUrl query string parameters will be added to the redirectUrl so that the target application gets a reference to the geomark.
     */
    @SpeakeasyMetadata("form:name=redirectUrl")
    public String redirectUrl;
    public PostGeomarksNewRequestBody withRedirectUrl(String redirectUrl) {
        this.redirectUrl = redirectUrl;
        return this;
    }
    
    /**
     * The file format the geomark info resource should be returned using.
     */
    @SpeakeasyMetadata("form:name=resultFormat")
    public PostGeomarksNewRequestBodyResultFormatEnum resultFormat;
    public PostGeomarksNewRequestBody withResultFormat(PostGeomarksNewRequestBodyResultFormatEnum resultFormat) {
        this.resultFormat = resultFormat;
        return this;
    }
    
    /**
     * The srid of the coordinate system the input geometries are in. If the file includes a coordinate system definition that will be used.
     */
    @SpeakeasyMetadata("form:name=srid")
    public PostGeomarksNewRequestBodySridEnum srid;
    public PostGeomarksNewRequestBody withSrid(PostGeomarksNewRequestBodySridEnum srid) {
        this.srid = srid;
        return this;
    }
    
}
