<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Changes 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Deprecated - Use changes.getStartPageToken and changes.list to retrieve recent changes.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DriveChangesGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DriveChangesGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DriveChangesGetResponse
     */
	public function driveChangesGet(
        \OpenAPI\OpenAPI\Models\Operations\DriveChangesGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DriveChangesGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DriveChangesGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/changes/{changeId}', \OpenAPI\OpenAPI\Models\Operations\DriveChangesGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DriveChangesGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DriveChangesGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->change = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Change', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets the starting pageToken for listing future changes.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DriveChangesGetStartPageTokenRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DriveChangesGetStartPageTokenSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DriveChangesGetStartPageTokenResponse
     */
	public function driveChangesGetStartPageToken(
        \OpenAPI\OpenAPI\Models\Operations\DriveChangesGetStartPageTokenRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DriveChangesGetStartPageTokenSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DriveChangesGetStartPageTokenResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/changes/startPageToken');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DriveChangesGetStartPageTokenRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DriveChangesGetStartPageTokenResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->startPageToken = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\StartPageToken', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists the changes for a user or shared drive.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DriveChangesListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DriveChangesListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DriveChangesListResponse
     */
	public function driveChangesList(
        \OpenAPI\OpenAPI\Models\Operations\DriveChangesListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DriveChangesListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DriveChangesListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/changes');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DriveChangesListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DriveChangesListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->changeList = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ChangeList', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Subscribe to changes for a user.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DriveChangesWatchRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DriveChangesWatchSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DriveChangesWatchResponse
     */
	public function driveChangesWatch(
        \OpenAPI\OpenAPI\Models\Operations\DriveChangesWatchRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DriveChangesWatchSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DriveChangesWatchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/changes/watch');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "channel", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DriveChangesWatchRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DriveChangesWatchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->channel = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Channel', 'json');
            }
        }

        return $response;
    }
}