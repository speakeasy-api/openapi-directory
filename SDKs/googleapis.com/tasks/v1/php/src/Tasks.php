<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Tasks 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Clears all completed tasks from the specified task list. The affected tasks will be marked as 'hidden' and no longer be returned by default when retrieving all tasks for a task list.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\TasksTasksClearRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\TasksTasksClearSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\TasksTasksClearResponse
     */
	public function tasksTasksClear(
        \OpenAPI\OpenAPI\Models\Operations\TasksTasksClearRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\TasksTasksClearSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\TasksTasksClearResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/tasks/v1/lists/{tasklist}/clear', \OpenAPI\OpenAPI\Models\Operations\TasksTasksClearRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\TasksTasksClearRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\TasksTasksClearResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Deletes the specified task from the task list.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\TasksTasksDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\TasksTasksDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\TasksTasksDeleteResponse
     */
	public function tasksTasksDelete(
        \OpenAPI\OpenAPI\Models\Operations\TasksTasksDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\TasksTasksDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\TasksTasksDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/tasks/v1/lists/{tasklist}/tasks/{task}', \OpenAPI\OpenAPI\Models\Operations\TasksTasksDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\TasksTasksDeleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\TasksTasksDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Returns the specified task.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\TasksTasksGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\TasksTasksGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\TasksTasksGetResponse
     */
	public function tasksTasksGet(
        \OpenAPI\OpenAPI\Models\Operations\TasksTasksGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\TasksTasksGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\TasksTasksGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/tasks/v1/lists/{tasklist}/tasks/{task}', \OpenAPI\OpenAPI\Models\Operations\TasksTasksGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\TasksTasksGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\TasksTasksGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->task = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Task', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a new task on the specified task list.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\TasksTasksInsertRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\TasksTasksInsertSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\TasksTasksInsertResponse
     */
	public function tasksTasksInsert(
        \OpenAPI\OpenAPI\Models\Operations\TasksTasksInsertRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\TasksTasksInsertSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\TasksTasksInsertResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/tasks/v1/lists/{tasklist}/tasks', \OpenAPI\OpenAPI\Models\Operations\TasksTasksInsertRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "task", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\TasksTasksInsertRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\TasksTasksInsertResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->task = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Task', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns all tasks in the specified task list.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\TasksTasksListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\TasksTasksListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\TasksTasksListResponse
     */
	public function tasksTasksList(
        \OpenAPI\OpenAPI\Models\Operations\TasksTasksListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\TasksTasksListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\TasksTasksListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/tasks/v1/lists/{tasklist}/tasks', \OpenAPI\OpenAPI\Models\Operations\TasksTasksListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\TasksTasksListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\TasksTasksListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->tasks = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Tasks', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Moves the specified task to another position in the task list. This can include putting it as a child task under a new parent and/or move it to a different position among its sibling tasks.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\TasksTasksMoveRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\TasksTasksMoveSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\TasksTasksMoveResponse
     */
	public function tasksTasksMove(
        \OpenAPI\OpenAPI\Models\Operations\TasksTasksMoveRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\TasksTasksMoveSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\TasksTasksMoveResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/tasks/v1/lists/{tasklist}/tasks/{task}/move', \OpenAPI\OpenAPI\Models\Operations\TasksTasksMoveRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\TasksTasksMoveRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\TasksTasksMoveResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->task = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Task', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates the specified task. This method supports patch semantics.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\TasksTasksPatchRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\TasksTasksPatchSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\TasksTasksPatchResponse
     */
	public function tasksTasksPatch(
        \OpenAPI\OpenAPI\Models\Operations\TasksTasksPatchRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\TasksTasksPatchSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\TasksTasksPatchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/tasks/v1/lists/{tasklist}/tasks/{task}', \OpenAPI\OpenAPI\Models\Operations\TasksTasksPatchRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "task1", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\TasksTasksPatchRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\TasksTasksPatchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->task = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Task', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates the specified task.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\TasksTasksUpdateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\TasksTasksUpdateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\TasksTasksUpdateResponse
     */
	public function tasksTasksUpdate(
        \OpenAPI\OpenAPI\Models\Operations\TasksTasksUpdateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\TasksTasksUpdateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\TasksTasksUpdateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/tasks/v1/lists/{tasklist}/tasks/{task}', \OpenAPI\OpenAPI\Models\Operations\TasksTasksUpdateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "task1", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\TasksTasksUpdateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\TasksTasksUpdateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->task = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Task', 'json');
            }
        }

        return $response;
    }
}