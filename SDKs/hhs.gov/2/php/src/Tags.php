<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Tags 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Get Tags
     * 
     * List of Tags
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetResourcesTagsFormatRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetResourcesTagsFormatResponse
     */
	public function getResourcesTagsFormat(
        \OpenAPI\OpenAPI\Models\Operations\GetResourcesTagsFormatRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetResourcesTagsFormatResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/resources/tags.{format}', \OpenAPI\OpenAPI\Models\Operations\GetResourcesTagsFormatRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetResourcesTagsFormatRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetResourcesTagsFormatResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->tagMarshallerWrappeds = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\TagMarshallerWrapped>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Get TagLanguages
     * 
     * List of Tag Languages
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetResourcesTagsTagLanguagesFormatRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetResourcesTagsTagLanguagesFormatResponse
     */
	public function getResourcesTagsTagLanguagesFormat(
        \OpenAPI\OpenAPI\Models\Operations\GetResourcesTagsTagLanguagesFormatRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetResourcesTagsTagLanguagesFormatResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/resources/tags/tagLanguages.{format}', \OpenAPI\OpenAPI\Models\Operations\GetResourcesTagsTagLanguagesFormatRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetResourcesTagsTagLanguagesFormatResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->tagLanguageMarshallerWrappeds = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\TagLanguageMarshallerWrapped>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Get MediaItems for Tag
     * 
     * List of Types
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetResourcesTagsTagTypesFormatRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetResourcesTagsTagTypesFormatResponse
     */
	public function getResourcesTagsTagTypesFormat(
        \OpenAPI\OpenAPI\Models\Operations\GetResourcesTagsTagTypesFormatRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetResourcesTagsTagTypesFormatResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/resources/tags/tagTypes.{format}', \OpenAPI\OpenAPI\Models\Operations\GetResourcesTagsTagTypesFormatRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetResourcesTagsTagTypesFormatResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->tagTypeMarshallerWrappeds = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\TagTypeMarshallerWrapped>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Get Tag by ID
     * 
     * Information about a specific tag
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetResourcesTagsIdFormatRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetResourcesTagsIdFormatResponse
     */
	public function getResourcesTagsIdFormat(
        \OpenAPI\OpenAPI\Models\Operations\GetResourcesTagsIdFormatRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetResourcesTagsIdFormatResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/resources/tags/{id}.{format}', \OpenAPI\OpenAPI\Models\Operations\GetResourcesTagsIdFormatRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetResourcesTagsIdFormatResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->tagMarshallerWrappeds = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\TagMarshallerWrapped>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Get MediaItems for Tag
     * 
     * MediaItem
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetResourcesTagsIdMediaFormatRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetResourcesTagsIdMediaFormatResponse
     */
	public function getResourcesTagsIdMediaFormat(
        \OpenAPI\OpenAPI\Models\Operations\GetResourcesTagsIdMediaFormatRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetResourcesTagsIdMediaFormatResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/resources/tags/{id}/media.{format}', \OpenAPI\OpenAPI\Models\Operations\GetResourcesTagsIdMediaFormatRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetResourcesTagsIdMediaFormatRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetResourcesTagsIdMediaFormatResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->mediaItemWrappeds = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\MediaItemWrapped>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Get related Tags by ID
     * 
     * Information about related tags to a specific tag
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetResourcesTagsIdRelatedFormatRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetResourcesTagsIdRelatedFormatResponse
     */
	public function getResourcesTagsIdRelatedFormat(
        \OpenAPI\OpenAPI\Models\Operations\GetResourcesTagsIdRelatedFormatRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetResourcesTagsIdRelatedFormatResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/resources/tags/{id}/related.{format}', \OpenAPI\OpenAPI\Models\Operations\GetResourcesTagsIdRelatedFormatRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetResourcesTagsIdRelatedFormatRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetResourcesTagsIdRelatedFormatResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->tagMarshallerWrappeds = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\TagMarshallerWrapped>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Get MediaItems for Tag
     * 
     * MediaItem
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetResourcesTagsIdSyndicateFormatRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetResourcesTagsIdSyndicateFormatResponse
     */
	public function getResourcesTagsIdSyndicateFormat(
        \OpenAPI\OpenAPI\Models\Operations\GetResourcesTagsIdSyndicateFormatRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetResourcesTagsIdSyndicateFormatResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/resources/tags/{id}/syndicate.{format}', \OpenAPI\OpenAPI\Models\Operations\GetResourcesTagsIdSyndicateFormatRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetResourcesTagsIdSyndicateFormatRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetResourcesTagsIdSyndicateFormatResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $response->getResourcesTagsIdSyndicateFormat200ApplicationJSONString = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
}