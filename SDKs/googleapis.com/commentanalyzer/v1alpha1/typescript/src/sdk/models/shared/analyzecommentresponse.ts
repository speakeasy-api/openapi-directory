/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import {
  objectToClass,
  SpeakeasyBase,
  SpeakeasyMetadata,
} from "../../../internal/utils";
import { AttributeScores } from "./attributescores";
import { Expose, Transform } from "class-transformer";

/**
 * The comment analysis response message.
 */
export class AnalyzeCommentResponse extends SpeakeasyBase {
  /**
   * Scores for the requested attributes. The map keys are attribute names (same as the requested_attribute field in AnalyzeCommentRequest, for example "ATTACK_ON_AUTHOR", "INFLAMMATORY", etc).
   */
  @SpeakeasyMetadata({ elemType: AttributeScores })
  @Expose({ name: "attributeScores" })
  @Transform(
    ({ value }) => {
      const obj: Record<string, AttributeScores> = {};
      for (const key in value) {
        obj[key] = objectToClass(value[key], AttributeScores);
      }
      return obj;
    },
    { toClassOnly: true }
  )
  attributeScores?: Record<string, AttributeScores>;

  /**
   * Same token from the original AnalyzeCommentRequest.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "clientToken" })
  clientToken?: string;

  /**
   * Contains the languages detected from the text content, sorted in order of likelihood.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "detectedLanguages" })
  detectedLanguages?: string[];

  /**
   * The language(s) used by CommentAnalyzer service to choose which Model to use when analyzing the comment. Might better be called "effective_languages". The logic used to make the choice is as follows: if !Request.languages.empty() effective_languages = Request.languages else effective_languages = detected_languages[0]
   */
  @SpeakeasyMetadata()
  @Expose({ name: "languages" })
  languages?: string[];
}
