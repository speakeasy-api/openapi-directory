"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import apikeyentity as shared_apikeyentity
from datetime import datetime
from enum import Enum
from typing import Optional

class PostUsersUserIDAPIKeysRequestBodyPermissionSetEnum(str, Enum):
    r"""Permissions for this API Key.  Keys with the `desktop_app` permission set only have the ability to do the functions provided in our Desktop App (File and Share Link operations).  Additional permission sets may become available in the future, such as for a Site Admin to give a key with no administrator privileges.  If you have ideas for permission sets, please let us know."""
    NONE = 'none'
    FULL = 'full'
    DESKTOP_APP = 'desktop_app'
    SYNC_APP = 'sync_app'
    OFFICE_INTEGRATION = 'office_integration'
    MOBILE_APP = 'mobile_app'


@dataclasses.dataclass
class PostUsersUserIDAPIKeysRequestBody:
    
    description: Optional[str] = dataclasses.field(default=None, metadata={'multipart_form': { 'field_name': 'description' }})
    r"""User-supplied description of API key."""  
    expires_at: Optional[datetime] = dataclasses.field(default=None, metadata={'multipart_form': { 'field_name': 'expires_at' }})
    r"""API Key expiration date"""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'multipart_form': { 'field_name': 'name' }})
    r"""Internal name for the API Key.  For your use."""  
    path: Optional[str] = dataclasses.field(default=None, metadata={'multipart_form': { 'field_name': 'path' }})
    r"""Folder path restriction for this api key."""  
    permission_set: Optional[PostUsersUserIDAPIKeysRequestBodyPermissionSetEnum] = dataclasses.field(default=None, metadata={'multipart_form': { 'field_name': 'permission_set' }})
    r"""Permissions for this API Key.  Keys with the `desktop_app` permission set only have the ability to do the functions provided in our Desktop App (File and Share Link operations).  Additional permission sets may become available in the future, such as for a Site Admin to give a key with no administrator privileges.  If you have ideas for permission sets, please let us know."""  
    

@dataclasses.dataclass
class PostUsersUserIDAPIKeysRequest:
    
    user_id: int = dataclasses.field(metadata={'path_param': { 'field_name': 'user_id', 'style': 'simple', 'explode': False }})
    r"""User ID.  Provide a value of `0` to operate the current session's user."""  
    request_body: Optional[PostUsersUserIDAPIKeysRequestBody] = dataclasses.field(default=None, metadata={'request': { 'media_type': 'multipart/form-data' }})  
    

@dataclasses.dataclass
class PostUsersUserIDAPIKeysResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    api_key_entity: Optional[shared_apikeyentity.APIKeyEntity] = dataclasses.field(default=None)
    r"""The ApiKeys object."""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    