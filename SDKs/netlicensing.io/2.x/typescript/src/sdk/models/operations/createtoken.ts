/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";

export class CreateTokenSecurity extends SpeakeasyBase {
  @SpeakeasyMetadata({
    data: "security, scheme=true;type=http;subtype=basic;name=password",
  })
  password: string;

  @SpeakeasyMetadata({
    data: "security, scheme=true;type=http;subtype=basic;name=username",
  })
  username: string;
}

/**
 * For <i>type=ACTION</i> only; defines token action to be perfromed
 */
export enum CreateTokenRequestBodyActionEnum {
  LicenseeLogin = "licenseeLogin",
}

/**
 * For <i>tokenType=APIKEY</i> only (default: ROLE_APIKEY_LICENSEE); defines token RoleID
 */
export enum CreateTokenRequestBodyApiKeyRoleEnum {
  RoleApikeyLicensee = "ROLE_APIKEY_LICENSEE",
  RoleApikeyAnalytics = "ROLE_APIKEY_ANALYTICS",
  RoleApikeyOperation = "ROLE_APIKEY_OPERATION",
  RoleApikeyMaintenance = "ROLE_APIKEY_MAINTENANCE",
  RoleApikeyAdmin = "ROLE_APIKEY_ADMIN",
}

/**
 * Token type to be generated
 */
export enum CreateTokenRequestBodyTokenTypeEnum {
  Default = "DEFAULT",
  Shop = "SHOP",
  Apikey = "APIKEY",
}

/**
 * For <i>tokenType=DEFAULT</i> only; action type to be set
 */
export enum CreateTokenRequestBodyTypeEnum {
  Action = "ACTION",
}

export class CreateTokenRequestBody extends SpeakeasyBase {
  /**
   * For <i>type=ACTION</i> only; defines token action to be perfromed
   */
  @SpeakeasyMetadata({ data: "form, name=action" })
  action?: CreateTokenRequestBodyActionEnum;

  /**
   * For <i>tokenType=APIKEY</i> only (default: ROLE_APIKEY_LICENSEE); defines token RoleID
   */
  @SpeakeasyMetadata({ data: "form, name=apiKeyRole" })
  apiKeyRole?: CreateTokenRequestBodyApiKeyRoleEnum;

  /**
   * For <i>tokenType=SHOP</i> only; take customers to this URL when they cancel their checkout
   */
  @SpeakeasyMetadata({ data: "form, name=cancelURL" })
  cancelURL?: string;

  /**
   * For <i>tokenType=SHOP</i> only; shop link title for cancel checkout process
   */
  @SpeakeasyMetadata({ data: "form, name=cancelURLTitle" })
  cancelURLTitle?: string;

  /**
   * For <i>tokenType=SHOP</i> only; identifies LicenseTemplate that will be assigned to the shop token
   */
  @SpeakeasyMetadata({ data: "form, name=licenseTemplateNumber" })
  licenseTemplateNumber?: string;

  /**
   * For <i>tokenType=SHOP</i> or <i>type=ACTION</i> only (mandatory); identifies Licensee that will be assigned to the shop token
   */
  @SpeakeasyMetadata({ data: "form, name=licenseeNumber" })
  licenseeNumber?: string;

  /**
   * For <i>tokenType=SHOP</i> only; identifies Shopping Item name that will be shown to the customer
   */
  @SpeakeasyMetadata({ data: "form, name=predefinedShoppingItem" })
  predefinedShoppingItem?: string;

  /**
   * For <i>tokenType=APIKEY</i> only (optional); defines PrivateKey to be used with the validate method<br/><strong>Please Note:</strong> PrivateKey need to be provided as one line without spaces
   */
  @SpeakeasyMetadata({ data: "form, name=privateKey" })
  privateKey?: string;

  /**
   * For <i>tokenType=SHOP</i> only (mandatory); identifies Product that will be assigned to the shop token
   */
  @SpeakeasyMetadata({ data: "form, name=productNumber" })
  productNumber?: string;

  /**
   * For <i>tokenType=SHOP</i> only; take customers to this URL when they finish checkout
   */
  @SpeakeasyMetadata({ data: "form, name=successURL" })
  successURL?: string;

  /**
   * For <i>tokenType=SHOP</i> only; shop link title for successful checkout process
   */
  @SpeakeasyMetadata({ data: "form, name=successURLTitle" })
  successURLTitle?: string;

  /**
   * Token type to be generated
   */
  @SpeakeasyMetadata({ data: "form, name=tokenType" })
  tokenType: CreateTokenRequestBodyTokenTypeEnum;

  /**
   * For <i>tokenType=DEFAULT</i> only; action type to be set
   */
  @SpeakeasyMetadata({ data: "form, name=type" })
  type?: CreateTokenRequestBodyTypeEnum;
}

export class CreateTokenResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  body?: Uint8Array;

  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * Successful request
   */
  @SpeakeasyMetadata()
  netlicensing?: shared.Netlicensing;
}
