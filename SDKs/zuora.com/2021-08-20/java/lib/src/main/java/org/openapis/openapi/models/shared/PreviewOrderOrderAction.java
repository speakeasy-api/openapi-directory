/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

public class PreviewOrderOrderAction {
    /**
     * Rate plan associated with a subscription.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("addProduct")
    public PreviewOrderRatePlanOverride addProduct;
    public PreviewOrderOrderAction withAddProduct(PreviewOrderRatePlanOverride addProduct) {
        this.addProduct = addProduct;
        return this;
    }
    
    /**
     * Information about an order action of type `CancelSubscription`.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("cancelSubscription")
    public CancelSubscription cancelSubscription;
    public PreviewOrderOrderAction withCancelSubscription(CancelSubscription cancelSubscription) {
        this.cancelSubscription = cancelSubscription;
        return this;
    }
    
    /**
     * Information about an order action of type `CreateSubscription`.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("createSubscription")
    public PreviewOrderCreateSubscription createSubscription;
    public PreviewOrderOrderAction withCreateSubscription(PreviewOrderCreateSubscription createSubscription) {
        this.createSubscription = createSubscription;
        return this;
    }
    
    /**
     * Container for custom fields of an Order Action object.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("customFields")
    public java.util.Map<String, Object> customFields;
    public PreviewOrderOrderAction withCustomFields(java.util.Map<String, Object> customFields) {
        this.customFields = customFields;
        return this;
    }
    
    /**
     * Information about an order action of type `OwnerTransfer`.
     * 
     * **Note:** The Owner Transfer feature is in **Limited Availability**. If you wish to have access to the feature, submit a request at [Zuora Global Support](http://support.zuora.com/).
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ownerTransfer")
    public OwnerTransfer ownerTransfer;
    public PreviewOrderOrderAction withOwnerTransfer(OwnerTransfer ownerTransfer) {
        this.ownerTransfer = ownerTransfer;
        return this;
    }
    
    /**
     * Information about an order action of type `RemoveProduct`.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("removeProduct")
    public RemoveProduct removeProduct;
    public PreviewOrderOrderAction withRemoveProduct(RemoveProduct removeProduct) {
        this.removeProduct = removeProduct;
        return this;
    }
    
    /**
     * Information about an order action of type `Resume`.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("resume")
    public CreateOrderResume resume;
    public PreviewOrderOrderAction withResume(CreateOrderResume resume) {
        this.resume = resume;
        return this;
    }
    
    /**
     * Information about an order action of type `Suspend`.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("suspend")
    public CreateOrderSuspend suspend;
    public PreviewOrderOrderAction withSuspend(CreateOrderSuspend suspend) {
        this.suspend = suspend;
        return this;
    }
    
    /**
     * Information about an order action of type `TermsAndConditions`.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("termsAndConditions")
    public CreateOrderTermsAndConditions termsAndConditions;
    public PreviewOrderOrderAction withTermsAndConditions(CreateOrderTermsAndConditions termsAndConditions) {
        this.termsAndConditions = termsAndConditions;
        return this;
    }
    
    /**
     * Container for the contract effective, service activation, and customer acceptance dates of the order action. 
     * 
     * If the service activation date is set as a required field in Default Subscription Settings, skipping this field in a `CreateSubscription` order action of your JSON request will result in a `Pending` order and a `Pending Activation` subscription.
     * 
     * If the customer acceptance date is set as a required field in Default Subscription Settings, skipping this field in a `CreateSubscription` order action of your JSON request will result in a `Pending` order and a `Pending Acceptance` subscription. If the service activation date field is at the same time required and skipped (or set as null), it will be a `Pending Activation` subscription.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("triggerDates")
    public TriggerDate[] triggerDates;
    public PreviewOrderOrderAction withTriggerDates(TriggerDate[] triggerDates) {
        this.triggerDates = triggerDates;
        return this;
    }
    
    /**
     * Type of order action.
     * 
     * Unless the type of order action is `RenewSubscription`, you must use the corresponding field to provide information about the order action. For example, if the type of order action is `AddProduct`, you must set the `addProduct` field.
     * 
     * Zuora returns an error if you set a field that corresponds to a different type of order action. For example, if the type of order action is `AddProduct`, Zuora returns an error if you set the `updateProduct` field.
     * 
     */
    @JsonProperty("type")
    public PreviewOrderOrderActionTypeEnum type;
    public PreviewOrderOrderAction withType(PreviewOrderOrderActionTypeEnum type) {
        this.type = type;
        return this;
    }
    
    /**
     * Information about an order action of type `UpdateProduct`.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("updateProduct")
    public PreviewOrderRatePlanUpdate updateProduct;
    public PreviewOrderOrderAction withUpdateProduct(PreviewOrderRatePlanUpdate updateProduct) {
        this.updateProduct = updateProduct;
        return this;
    }
    
}
