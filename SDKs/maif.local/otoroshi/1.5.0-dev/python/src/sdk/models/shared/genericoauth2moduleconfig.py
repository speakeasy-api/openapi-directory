"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Any, Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GenericOauth2ModuleConfig:
    r"""Settings to authenticate users using a generic OAuth2 provider"""
    
    access_token_field: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('accessTokenField') }})
    r"""Field name to get access token"""  
    authorize_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('authorizeUrl') }})
    r"""OAuth authorize URL"""  
    callback_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('callbackUrl') }})
    r"""Otoroshi callback URL"""  
    client_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('clientId') }})
    r"""OAuth Client id"""  
    client_secret: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('clientSecret') }})
    r"""OAuth Client secret"""  
    desc: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('desc') }})
    r"""Description of the config"""  
    email_field: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('emailField') }})
    r"""Field name to get email from user profile"""  
    id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id') }})
    r"""Unique id of the config"""  
    login_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('loginUrl') }})
    r"""OAuth login URL"""  
    logout_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('logoutUrl') }})
    r"""OAuth logout URL"""  
    name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name') }})
    r"""Name of the config"""  
    name_field: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('nameField') }})
    r"""Field name to get name from user profile"""  
    otoroshi_data_field: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('otoroshiDataField') }})
    r"""Field name to get otoroshi metadata from. You can specify sub fields using | as separator"""  
    session_max_age: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sessionMaxAge') }})
    r"""Max age of the session"""  
    token_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tokenUrl') }})
    r"""OAuth token URL"""  
    type: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type') }})
    r"""Type of settings. value is oauth2"""  
    user_info_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('userInfoUrl') }})
    r"""OAuth userinfo to get user profile"""  
    claims: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('claims'), 'exclude': lambda f: f is None }})
    r"""The claims of the token"""  
    jwt_verifier: Optional[Any] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('jwtVerifier'), 'exclude': lambda f: f is None }})
    r"""Algo. settings to verify JWT token"""  
    oid_config: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('oidConfig'), 'exclude': lambda f: f is None }})
    r"""URL of the OIDC config. file"""  
    read_profile_from_token: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('readProfileFromToken'), 'exclude': lambda f: f is None }})
    r"""The user profile will be read from the JWT token in id_token"""  
    scope: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('scope'), 'exclude': lambda f: f is None }})
    r"""The scope of the token"""  
    use_cookies: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('useCookies'), 'exclude': lambda f: f is None }})
    r"""Use for redirection to actual service"""  
    use_json: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('useJson'), 'exclude': lambda f: f is None }})
    r"""Use JSON or URL Form Encoded as payload with the OAuth provider"""  
    