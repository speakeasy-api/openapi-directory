<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class VariationSet 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Deletes variant set
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteVariantSetItemRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteVariantSetItemResponse
     */
	public function deleteVariantSetItem(
        \OpenAPI\OpenAPI\Models\Operations\DeleteVariantSetItemRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteVariantSetItemResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/variation/set/{id}', \OpenAPI\OpenAPI\Models\Operations\DeleteVariantSetItemRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteVariantSetItemResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * Returns list of matches
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetVariantAnalyzeRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetVariantAnalyzeResponse
     */
	public function getVariantAnalyze(
        \OpenAPI\OpenAPI\Models\Operations\GetVariantAnalyzeRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetVariantAnalyzeResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/variation/set/analyze/{id}', \OpenAPI\OpenAPI\Models\Operations\GetVariantAnalyzeRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetVariantAnalyzeResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->associations = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Association>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns a variant set
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetVariantSetItemRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetVariantSetItemResponse
     */
	public function getVariantSetItem(
        \OpenAPI\OpenAPI\Models\Operations\GetVariantSetItemRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetVariantSetItemResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/variation/set/{id}', \OpenAPI\OpenAPI\Models\Operations\GetVariantSetItemRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetVariantSetItemResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->variantSet = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\VariantSet', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * Returns list of variant sets from a specified time period
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetVariantSetsArchiveCollectionRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetVariantSetsArchiveCollectionResponse
     */
	public function getVariantSetsArchiveCollection(
        \OpenAPI\OpenAPI\Models\Operations\GetVariantSetsArchiveCollectionRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetVariantSetsArchiveCollectionResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/variation/set/archive/{year}/{month}/{day}', \OpenAPI\OpenAPI\Models\Operations\GetVariantSetsArchiveCollectionRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetVariantSetsArchiveCollectionRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetVariantSetsArchiveCollectionResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->pageOfVariantSets = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PageOfVariantSets', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns list of variant sets
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetVariantSetsCollectionRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetVariantSetsCollectionResponse
     */
	public function getVariantSetsCollection(
        \OpenAPI\OpenAPI\Models\Operations\GetVariantSetsCollectionRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetVariantSetsCollectionResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/variation/set/');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetVariantSetsCollectionRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetVariantSetsCollectionResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->pageOfVariantSets = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PageOfVariantSets', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a new variant set
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\VariantSet $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostVariantSetsCollectionResponse
     */
	public function postVariantSetsCollection(
        \OpenAPI\OpenAPI\Models\Shared\VariantSet $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostVariantSetsCollectionResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/variation/set/');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostVariantSetsCollectionResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Updates a variant set
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PutVariantSetItemRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PutVariantSetItemResponse
     */
	public function putVariantSetItem(
        \OpenAPI\OpenAPI\Models\Operations\PutVariantSetItemRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PutVariantSetItemResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/variation/set/{id}', \OpenAPI\OpenAPI\Models\Operations\PutVariantSetItemRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "variantSet", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PutVariantSetItemResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
}