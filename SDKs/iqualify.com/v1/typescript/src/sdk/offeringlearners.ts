/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class OfferingLearners {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Remove learners from coach's marking list
   *
   * @remarks
   * Removes an array of learners from coach's marking list.
   */
  deleteOfferingsOfferingIdUsersMarkerEmailMarks(
    req: operations.DeleteOfferingsOfferingIdUsersMarkerEmailMarksRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.DeleteOfferingsOfferingIdUsersMarkerEmailMarksResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.DeleteOfferingsOfferingIdUsersMarkerEmailMarksRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/offerings/{offeringId}/users/{markerEmail}/marks",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "delete",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DeleteOfferingsOfferingIdUsersMarkerEmailMarksResponse =
        new operations.DeleteOfferingsOfferingIdUsersMarkerEmailMarksResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.offeringUsers = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.offeringUsers = utils.objectToClass(
              httpRes?.data,
              shared.OfferingUser,
              resFieldDepth
            );
          }
          break;
        case [400, 401, 403, 404].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.error = utils.objectToClass(httpRes?.data, shared.ErrorT);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Removes user from the offering
   *
   * @remarks
   * Removes a user from the offering.
   */
  deleteOfferingsOfferingIdUsersUserEmail(
    req: operations.DeleteOfferingsOfferingIdUsersUserEmailRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.DeleteOfferingsOfferingIdUsersUserEmailResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DeleteOfferingsOfferingIdUsersUserEmailRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/offerings/{offeringId}/users/{userEmail}",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DeleteOfferingsOfferingIdUsersUserEmailResponse =
        new operations.DeleteOfferingsOfferingIdUsersUserEmailResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 204:
          break;
        case [400, 401, 403, 404].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.error = utils.objectToClass(httpRes?.data, shared.ErrorT);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Find offering's users
   *
   * @remarks
   * Responds with a list of users in the offering (facilitators, learners and markers.).
   */
  getOfferingsOfferingIdUsers(
    req: operations.GetOfferingsOfferingIdUsersRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetOfferingsOfferingIdUsersResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetOfferingsOfferingIdUsersRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/offerings/{offeringId}/users",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetOfferingsOfferingIdUsersResponse =
        new operations.GetOfferingsOfferingIdUsersResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.offeringUserResponses = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.offeringUserResponses = utils.objectToClass(
              httpRes?.data,
              shared.OfferingUserResponse,
              resFieldDepth
            );
          }
          break;
        case [400, 401, 403, 404].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.error = utils.objectToClass(httpRes?.data, shared.ErrorT);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Find Learners marked by a coach
   *
   * @remarks
   * Responds with all learners marked by the specified coach.
   */
  getOfferingsOfferingIdUsersMarkerEmailMarks(
    req: operations.GetOfferingsOfferingIdUsersMarkerEmailMarksRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetOfferingsOfferingIdUsersMarkerEmailMarksResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetOfferingsOfferingIdUsersMarkerEmailMarksRequest(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/offerings/{offeringId}/users/{markerEmail}/marks",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetOfferingsOfferingIdUsersMarkerEmailMarksResponse =
        new operations.GetOfferingsOfferingIdUsersMarkerEmailMarksResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.offeringUsers = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.offeringUsers = utils.objectToClass(
              httpRes?.data,
              shared.OfferingUser,
              resFieldDepth
            );
          }
          break;
        case [401, 403, 404].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.error = utils.objectToClass(httpRes?.data, shared.ErrorT);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Transfer a user between offerings
   *
   * @remarks
   * Moves the user's access and progress from one offering to another.
   */
  patchUsersUserEmailTransfer(
    req: operations.PatchUsersUserEmailTransferRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.PatchUsersUserEmailTransferResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PatchUsersUserEmailTransferRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/users/{userEmail}/transfer",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "transferRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "patch",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PatchUsersUserEmailTransferResponse =
        new operations.PatchUsersUserEmailTransferResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          break;
        case [400, 401, 403, 404].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.error = utils.objectToClass(httpRes?.data, shared.ErrorT);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Adds user to the offering
   *
   * @remarks
   * Adds one or more users to the offering.
   */
  postOfferingsOfferingIdUsers(
    req: operations.PostOfferingsOfferingIdUsersRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.PostOfferingsOfferingIdUsersResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PostOfferingsOfferingIdUsersRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/offerings/{offeringId}/users",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PostOfferingsOfferingIdUsersResponse =
        new operations.PostOfferingsOfferingIdUsersResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 201:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.offeringUserAddResponses = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.offeringUserAddResponses = utils.objectToClass(
              httpRes?.data,
              shared.OfferingUserAddResponse,
              resFieldDepth
            );
          }
          break;
        case httpRes?.status == 207:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.postOfferingsOfferingIdUsers207ApplicationJSONOneoves =
              utils.objectToClass(httpRes?.data);
          }
          break;
        case [400, 401, 403, 404].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.error = utils.objectToClass(httpRes?.data, shared.ErrorT);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Add learners to be marked by a coach
   *
   * @remarks
   * Adds an array of learners to be marked by the specified coach.
   */
  postOfferingsOfferingIdUsersMarkerEmailMarks(
    req: operations.PostOfferingsOfferingIdUsersMarkerEmailMarksRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.PostOfferingsOfferingIdUsersMarkerEmailMarksResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PostOfferingsOfferingIdUsersMarkerEmailMarksRequest(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/offerings/{offeringId}/users/{markerEmail}/marks",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PostOfferingsOfferingIdUsersMarkerEmailMarksResponse =
        new operations.PostOfferingsOfferingIdUsersMarkerEmailMarksResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.offeringUsers = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.offeringUsers = utils.objectToClass(
              httpRes?.data,
              shared.OfferingUser,
              resFieldDepth
            );
          }
          break;
        case [400, 401, 403, 404].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.error = utils.objectToClass(httpRes?.data, shared.ErrorT);
          }
          break;
      }

      return res;
    });
  }
}
