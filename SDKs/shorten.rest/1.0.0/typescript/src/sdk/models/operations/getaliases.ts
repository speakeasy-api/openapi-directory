/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";

export class GetAliasesSecurity extends SpeakeasyBase {
  @SpeakeasyMetadata({
    data: "security, scheme=true;type=apiKey;subtype=header;name=x-api-key",
  })
  apiKeyAuth: string;
}

export class GetAliasesRequest extends SpeakeasyBase {
  /**
   * An ID returned by a previous query to continue aliases retrieval (see lastId in response)
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=continueFrom",
  })
  continueFrom?: string;

  /**
   * The domain name to get the aliases for (string without `http/https` or `/`)
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=domainName",
  })
  domainName?: string;

  /**
   * Number of results to return per request
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=limit" })
  limit?: number;
}

export class GetAliasesResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  /**
   * returns Array of aliases with lastId
   */
  @SpeakeasyMetadata()
  getAliasesModel?: shared.GetAliasesModel;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;
}
