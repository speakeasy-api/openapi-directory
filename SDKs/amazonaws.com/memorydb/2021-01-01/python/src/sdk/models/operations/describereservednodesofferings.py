"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import describereservednodesofferingsrequest as shared_describereservednodesofferingsrequest
from ..shared import describereservednodesofferingsresponse as shared_describereservednodesofferingsresponse
from enum import Enum
from typing import Any, Optional

class DescribeReservedNodesOfferingsXAmzTargetEnum(str, Enum):
    AMAZON_MEMORY_DB_DESCRIBE_RESERVED_NODES_OFFERINGS = 'AmazonMemoryDB.DescribeReservedNodesOfferings'


@dataclasses.dataclass
class DescribeReservedNodesOfferingsRequest:
    
    describe_reserved_nodes_offerings_request: shared_describereservednodesofferingsrequest.DescribeReservedNodesOfferingsRequest = dataclasses.field(metadata={'request': { 'media_type': 'application/json' }})  
    x_amz_target: DescribeReservedNodesOfferingsXAmzTargetEnum = dataclasses.field(metadata={'header': { 'field_name': 'X-Amz-Target', 'style': 'simple', 'explode': False }})  
    max_results: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'MaxResults', 'style': 'form', 'explode': True }})
    r"""Pagination limit"""  
    next_token: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'NextToken', 'style': 'form', 'explode': True }})
    r"""Pagination token"""  
    x_amz_algorithm: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Algorithm', 'style': 'simple', 'explode': False }})  
    x_amz_content_sha256: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Content-Sha256', 'style': 'simple', 'explode': False }})  
    x_amz_credential: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Credential', 'style': 'simple', 'explode': False }})  
    x_amz_date: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Date', 'style': 'simple', 'explode': False }})  
    x_amz_security_token: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Security-Token', 'style': 'simple', 'explode': False }})  
    x_amz_signature: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Signature', 'style': 'simple', 'explode': False }})  
    x_amz_signed_headers: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-SignedHeaders', 'style': 'simple', 'explode': False }})  
    

@dataclasses.dataclass
class DescribeReservedNodesOfferingsResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    describe_reserved_nodes_offerings_response: Optional[shared_describereservednodesofferingsresponse.DescribeReservedNodesOfferingsResponse] = dataclasses.field(default=None)
    r"""Success"""  
    invalid_parameter_combination_exception: Optional[Any] = dataclasses.field(default=None)
    r"""InvalidParameterCombinationException"""  
    invalid_parameter_value_exception: Optional[Any] = dataclasses.field(default=None)
    r"""InvalidParameterValueException"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    reserved_nodes_offering_not_found_fault: Optional[Any] = dataclasses.field(default=None)
    r"""ReservedNodesOfferingNotFoundFault"""  
    service_linked_role_not_found_fault: Optional[Any] = dataclasses.field(default=None)
    r"""ServiceLinkedRoleNotFoundFault"""  
    