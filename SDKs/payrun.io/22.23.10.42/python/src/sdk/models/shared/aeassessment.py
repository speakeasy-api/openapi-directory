"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from datetime import date
from enum import Enum
from marshmallow import fields
from sdk import utils
from typing import Optional

class AEAssessmentAEAssessmentAssessmentCodeEnum(str, Enum):
    r"""The a e assessments' assessment code"""
    EXCLUDED = 'Excluded'
    ELIGIBLE_JOB_HOLDER = 'EligibleJobHolder'
    NON_ELIGIBLE_JOB_HOLDER = 'NonEligibleJobHolder'
    ENTITLED_WORKER = 'EntitledWorker'

class AEAssessmentAEAssessmentAssessmentEventEnum(str, Enum):
    r"""The a e assessments' assessment event"""
    NON_ENROLMENT_EVENT = 'NonEnrolmentEvent'
    AUTOMATIC_ENROLMENT = 'AutomaticEnrolment'
    OPT_IN = 'OptIn'
    VOLUNTARY_JOINER = 'VoluntaryJoiner'
    CONTRACTUAL_ENROLMENT = 'ContractualEnrolment'

class AEAssessmentAEAssessmentAssessmentOverrideEnum(str, Enum):
    r"""The a e assessments' assessment override"""
    NONE = 'None'
    OPT_OUT = 'OptOut'
    OPT_IN = 'OptIn'
    VOLUNTARY_JOINER = 'VoluntaryJoiner'
    CONTRACTUAL_PENSION = 'ContractualPension'
    CEASED_MEMBERSHIP = 'CeasedMembership'
    LEAVER = 'Leaver'
    EXCLUDED = 'Excluded'

class AEAssessmentAEAssessmentAssessmentResultEnum(str, Enum):
    r"""The a e assessments' assessment result"""
    INCONCLUSIVE = 'Inconclusive'
    NO_CHANGE = 'NoChange'
    ENROL = 'Enrol'
    EXIT = 'Exit'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class AEAssessmentAEAssessment:
    
    age: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Age'), 'exclude': lambda f: f is None }})
    r"""The a e assessments' age"""  
    assessment_code: Optional[AEAssessmentAEAssessmentAssessmentCodeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AssessmentCode'), 'exclude': lambda f: f is None }})
    r"""The a e assessments' assessment code"""  
    assessment_date: Optional[date] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AssessmentDate'), 'encoder': utils.dateisoformat(True), 'decoder': utils.datefromisoformat, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""The a e assessments' assessment date"""  
    assessment_event: Optional[AEAssessmentAEAssessmentAssessmentEventEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AssessmentEvent'), 'exclude': lambda f: f is None }})
    r"""The a e assessments' assessment event"""  
    assessment_override: Optional[AEAssessmentAEAssessmentAssessmentOverrideEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AssessmentOverride'), 'exclude': lambda f: f is None }})
    r"""The a e assessments' assessment override"""  
    assessment_result: Optional[AEAssessmentAEAssessmentAssessmentResultEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AssessmentResult'), 'exclude': lambda f: f is None }})
    r"""The a e assessments' assessment result"""  
    is_member_of_alternative_pension_scheme: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('IsMemberOfAlternativePensionScheme'), 'exclude': lambda f: f is None }})
    r"""The a e assessments' is member of alternative pension scheme"""  
    opt_out_window_end_date: Optional[date] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('OptOutWindowEndDate'), 'encoder': utils.dateisoformat(True), 'decoder': utils.datefromisoformat, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""The a e assessments' opt out window end date"""  
    qualifying_earnings: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('QualifyingEarnings'), 'exclude': lambda f: f is None }})
    r"""The a e assessments' qualifying earnings"""  
    reenrolment_date: Optional[date] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ReenrolmentDate'), 'encoder': utils.dateisoformat(True), 'decoder': utils.datefromisoformat, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""The a e assessments' reenrolment date"""  
    state_pension_age: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('StatePensionAge'), 'exclude': lambda f: f is None }})
    r"""The a e assessments' state pension age"""  
    state_pension_date: Optional[date] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('StatePensionDate'), 'encoder': utils.dateisoformat(True), 'decoder': utils.datefromisoformat, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""The a e assessments' state pension date"""  
    tax_period: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TaxPeriod'), 'exclude': lambda f: f is None }})
    r"""The a e assessments' tax period"""  
    tax_year: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TaxYear'), 'exclude': lambda f: f is None }})
    r"""The a e assessments' tax year"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class AEAssessment:
    r"""The a e assessment object."""
    
    ae_assessment: Optional[AEAssessmentAEAssessment] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AEAssessment'), 'exclude': lambda f: f is None }})  
    