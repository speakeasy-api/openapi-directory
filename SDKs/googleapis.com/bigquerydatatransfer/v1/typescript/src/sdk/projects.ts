/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class Projects {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Returns true if valid credentials exist for the given data source and requesting user.
   */
  bigquerydatatransferProjectsLocationsDataSourcesCheckValidCreds(
    req: operations.BigquerydatatransferProjectsLocationsDataSourcesCheckValidCredsRequest,
    security: operations.BigquerydatatransferProjectsLocationsDataSourcesCheckValidCredsSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.BigquerydatatransferProjectsLocationsDataSourcesCheckValidCredsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.BigquerydatatransferProjectsLocationsDataSourcesCheckValidCredsRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/{name}:checkValidCreds",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.BigquerydatatransferProjectsLocationsDataSourcesCheckValidCredsSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.BigquerydatatransferProjectsLocationsDataSourcesCheckValidCredsResponse =
        new operations.BigquerydatatransferProjectsLocationsDataSourcesCheckValidCredsResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.checkValidCredsResponse = utils.objectToClass(
              httpRes?.data,
              shared.CheckValidCredsResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Lists supported data sources and returns their settings.
   */
  bigquerydatatransferProjectsLocationsDataSourcesList(
    req: operations.BigquerydatatransferProjectsLocationsDataSourcesListRequest,
    security: operations.BigquerydatatransferProjectsLocationsDataSourcesListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.BigquerydatatransferProjectsLocationsDataSourcesListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.BigquerydatatransferProjectsLocationsDataSourcesListRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/{parent}/dataSources",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.BigquerydatatransferProjectsLocationsDataSourcesListSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.BigquerydatatransferProjectsLocationsDataSourcesListResponse =
        new operations.BigquerydatatransferProjectsLocationsDataSourcesListResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listDataSourcesResponse = utils.objectToClass(
              httpRes?.data,
              shared.ListDataSourcesResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Enroll data sources in a user project. This allows users to create transfer configurations for these data sources. They will also appear in the ListDataSources RPC and as such, will appear in the [BigQuery UI](https://console.cloud.google.com/bigquery), and the documents can be found in the public guide for [BigQuery Web UI](https://cloud.google.com/bigquery/bigquery-web-ui) and [Data Transfer Service](https://cloud.google.com/bigquery/docs/working-with-transfers).
   */
  bigquerydatatransferProjectsLocationsEnrollDataSources(
    req: operations.BigquerydatatransferProjectsLocationsEnrollDataSourcesRequest,
    security: operations.BigquerydatatransferProjectsLocationsEnrollDataSourcesSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.BigquerydatatransferProjectsLocationsEnrollDataSourcesResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.BigquerydatatransferProjectsLocationsEnrollDataSourcesRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/{name}:enrollDataSources",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "enrollDataSourcesRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.BigquerydatatransferProjectsLocationsEnrollDataSourcesSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.BigquerydatatransferProjectsLocationsEnrollDataSourcesResponse =
        new operations.BigquerydatatransferProjectsLocationsEnrollDataSourcesResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.empty = utils.objectToClass(httpRes?.data);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Lists information about the supported locations for this service.
   */
  bigquerydatatransferProjectsLocationsList(
    req: operations.BigquerydatatransferProjectsLocationsListRequest,
    security: operations.BigquerydatatransferProjectsLocationsListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.BigquerydatatransferProjectsLocationsListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.BigquerydatatransferProjectsLocationsListRequest(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/v1/{name}/locations", req);
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.BigquerydatatransferProjectsLocationsListSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.BigquerydatatransferProjectsLocationsListResponse =
        new operations.BigquerydatatransferProjectsLocationsListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listLocationsResponse = utils.objectToClass(
              httpRes?.data,
              shared.ListLocationsResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Creates a new data transfer configuration.
   */
  bigquerydatatransferProjectsTransferConfigsCreate(
    req: operations.BigquerydatatransferProjectsTransferConfigsCreateRequest,
    security: operations.BigquerydatatransferProjectsTransferConfigsCreateSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.BigquerydatatransferProjectsTransferConfigsCreateResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.BigquerydatatransferProjectsTransferConfigsCreateRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/{parent}/transferConfigs",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "transferConfigInput",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.BigquerydatatransferProjectsTransferConfigsCreateSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.BigquerydatatransferProjectsTransferConfigsCreateResponse =
        new operations.BigquerydatatransferProjectsTransferConfigsCreateResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.transferConfig = utils.objectToClass(
              httpRes?.data,
              shared.TransferConfig
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Returns information about all transfer configs owned by a project in the specified location.
   */
  bigquerydatatransferProjectsTransferConfigsList(
    req: operations.BigquerydatatransferProjectsTransferConfigsListRequest,
    security: operations.BigquerydatatransferProjectsTransferConfigsListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.BigquerydatatransferProjectsTransferConfigsListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.BigquerydatatransferProjectsTransferConfigsListRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/{parent}/transferConfigs",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.BigquerydatatransferProjectsTransferConfigsListSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.BigquerydatatransferProjectsTransferConfigsListResponse =
        new operations.BigquerydatatransferProjectsTransferConfigsListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listTransferConfigsResponse = utils.objectToClass(
              httpRes?.data,
              shared.ListTransferConfigsResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Updates a data transfer configuration. All fields must be set, even if they are not updated.
   */
  bigquerydatatransferProjectsTransferConfigsPatch(
    req: operations.BigquerydatatransferProjectsTransferConfigsPatchRequest,
    security: operations.BigquerydatatransferProjectsTransferConfigsPatchSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.BigquerydatatransferProjectsTransferConfigsPatchResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.BigquerydatatransferProjectsTransferConfigsPatchRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/v1/{name}", req);

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "transferConfigInput",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.BigquerydatatransferProjectsTransferConfigsPatchSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "patch",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.BigquerydatatransferProjectsTransferConfigsPatchResponse =
        new operations.BigquerydatatransferProjectsTransferConfigsPatchResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.transferConfig = utils.objectToClass(
              httpRes?.data,
              shared.TransferConfig
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Deletes the specified transfer run.
   */
  bigquerydatatransferProjectsTransferConfigsRunsDelete(
    req: operations.BigquerydatatransferProjectsTransferConfigsRunsDeleteRequest,
    security: operations.BigquerydatatransferProjectsTransferConfigsRunsDeleteSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.BigquerydatatransferProjectsTransferConfigsRunsDeleteResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.BigquerydatatransferProjectsTransferConfigsRunsDeleteRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/v1/{name}", req);
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.BigquerydatatransferProjectsTransferConfigsRunsDeleteSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.BigquerydatatransferProjectsTransferConfigsRunsDeleteResponse =
        new operations.BigquerydatatransferProjectsTransferConfigsRunsDeleteResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.empty = utils.objectToClass(httpRes?.data);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Returns information about the particular transfer run.
   */
  bigquerydatatransferProjectsTransferConfigsRunsGet(
    req: operations.BigquerydatatransferProjectsTransferConfigsRunsGetRequest,
    security: operations.BigquerydatatransferProjectsTransferConfigsRunsGetSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.BigquerydatatransferProjectsTransferConfigsRunsGetResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.BigquerydatatransferProjectsTransferConfigsRunsGetRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/v1/{name}", req);
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.BigquerydatatransferProjectsTransferConfigsRunsGetSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.BigquerydatatransferProjectsTransferConfigsRunsGetResponse =
        new operations.BigquerydatatransferProjectsTransferConfigsRunsGetResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.transferRun = utils.objectToClass(
              httpRes?.data,
              shared.TransferRun
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Returns information about running and completed transfer runs.
   */
  bigquerydatatransferProjectsTransferConfigsRunsList(
    req: operations.BigquerydatatransferProjectsTransferConfigsRunsListRequest,
    security: operations.BigquerydatatransferProjectsTransferConfigsRunsListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.BigquerydatatransferProjectsTransferConfigsRunsListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.BigquerydatatransferProjectsTransferConfigsRunsListRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/v1/{parent}/runs", req);
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.BigquerydatatransferProjectsTransferConfigsRunsListSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.BigquerydatatransferProjectsTransferConfigsRunsListResponse =
        new operations.BigquerydatatransferProjectsTransferConfigsRunsListResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listTransferRunsResponse = utils.objectToClass(
              httpRes?.data,
              shared.ListTransferRunsResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Returns log messages for the transfer run.
   */
  bigquerydatatransferProjectsTransferConfigsRunsTransferLogsList(
    req: operations.BigquerydatatransferProjectsTransferConfigsRunsTransferLogsListRequest,
    security: operations.BigquerydatatransferProjectsTransferConfigsRunsTransferLogsListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.BigquerydatatransferProjectsTransferConfigsRunsTransferLogsListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.BigquerydatatransferProjectsTransferConfigsRunsTransferLogsListRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/{parent}/transferLogs",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.BigquerydatatransferProjectsTransferConfigsRunsTransferLogsListSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.BigquerydatatransferProjectsTransferConfigsRunsTransferLogsListResponse =
        new operations.BigquerydatatransferProjectsTransferConfigsRunsTransferLogsListResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listTransferLogsResponse = utils.objectToClass(
              httpRes?.data,
              shared.ListTransferLogsResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Creates transfer runs for a time range [start_time, end_time]. For each date - or whatever granularity the data source supports - in the range, one transfer run is created. Note that runs are created per UTC time in the time range. DEPRECATED: use StartManualTransferRuns instead.
   */
  bigquerydatatransferProjectsTransferConfigsScheduleRuns(
    req: operations.BigquerydatatransferProjectsTransferConfigsScheduleRunsRequest,
    security: operations.BigquerydatatransferProjectsTransferConfigsScheduleRunsSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.BigquerydatatransferProjectsTransferConfigsScheduleRunsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.BigquerydatatransferProjectsTransferConfigsScheduleRunsRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/{parent}:scheduleRuns",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "scheduleTransferRunsRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.BigquerydatatransferProjectsTransferConfigsScheduleRunsSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.BigquerydatatransferProjectsTransferConfigsScheduleRunsResponse =
        new operations.BigquerydatatransferProjectsTransferConfigsScheduleRunsResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.scheduleTransferRunsResponse = utils.objectToClass(
              httpRes?.data,
              shared.ScheduleTransferRunsResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Start manual transfer runs to be executed now with schedule_time equal to current time. The transfer runs can be created for a time range where the run_time is between start_time (inclusive) and end_time (exclusive), or for a specific run_time.
   */
  bigquerydatatransferProjectsTransferConfigsStartManualRuns(
    req: operations.BigquerydatatransferProjectsTransferConfigsStartManualRunsRequest,
    security: operations.BigquerydatatransferProjectsTransferConfigsStartManualRunsSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.BigquerydatatransferProjectsTransferConfigsStartManualRunsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.BigquerydatatransferProjectsTransferConfigsStartManualRunsRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/{parent}:startManualRuns",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "startManualTransferRunsRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.BigquerydatatransferProjectsTransferConfigsStartManualRunsSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.BigquerydatatransferProjectsTransferConfigsStartManualRunsResponse =
        new operations.BigquerydatatransferProjectsTransferConfigsStartManualRunsResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.startManualTransferRunsResponse = utils.objectToClass(
              httpRes?.data,
              shared.StartManualTransferRunsResponse
            );
          }
          break;
      }

      return res;
    });
  }
}
