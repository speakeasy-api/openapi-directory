"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import availabilityviewmodel as shared_availabilityviewmodel
from datetime import datetime
from typing import Optional


@dataclasses.dataclass
class GetConsumerV1AvailabilityServiceIDStartDateEndDateRequest:
    
    end_date: datetime = dataclasses.field(metadata={'path_param': { 'field_name': 'endDate', 'style': 'simple', 'explode': False }})
    r"""Format YYYY-MM-DD: End Date for availability search"""  
    service_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'serviceId', 'style': 'simple', 'explode': False }})
    r"""Service Id for availability search"""  
    start_date: datetime = dataclasses.field(metadata={'path_param': { 'field_name': 'startDate', 'style': 'simple', 'explode': False }})
    r"""Format YYYY-MM-DD: Start Date for availability search"""  
    day_availability: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'dayAvailability', 'style': 'form', 'explode': True }})
    r"""Number of days of day availability to return"""  
    day_availability_start_date: Optional[datetime] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'dayAvailabilityStartDate', 'style': 'form', 'explode': True }})
    r"""Format YYYY-DD-YY: Start date for day availability, defaults to startDate"""  
    destination: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'destination', 'style': 'form', 'explode': True }})
    r"""For calculating travel based availability, requires distance scope"""  
    duration: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'duration', 'style': 'form', 'explode': True }})
    r"""Duration of the service if different from default"""  
    end_time: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'endTime', 'style': 'form', 'explode': True }})
    r"""Format Military Time. End Time for availability search. Defaults to Business Hours End"""  
    first_day_available: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'firstDayAvailable', 'style': 'form', 'explode': True }})
    r"""Return available times for the first available day"""  
    interval: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'interval', 'style': 'form', 'explode': True }})
    r"""Booking Interval if different than the default"""  
    location_id: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'locationId', 'style': 'form', 'explode': True }})
    r"""Id of business location, defaults to primary business location"""  
    resource_group_id: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'resourceGroupId', 'style': 'form', 'explode': True }})
    r"""Resource Group Id for availability search"""  
    resource_id: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'resourceId', 'style': 'form', 'explode': True }})
    r"""Resource Id for availability search"""  
    resource_ids: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'resourceIds', 'style': 'form', 'explode': True }})
    r"""Comma separated Resource Id's for availability search"""  
    round_robin: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'roundRobin', 'style': 'form', 'explode': True }})
    r"""Round robin choice 0=none, 1=random, 2=balanced"""  
    start_time: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'startTime', 'style': 'form', 'explode': True }})
    r"""Format Military Time Start Time for availability search. Defaults to Business Hours Start"""  
    timezone_name: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'timezoneName', 'style': 'form', 'explode': True }})
    r"""Requested IANA timezone Id to view availability"""  
    tz_offset: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'tzOffset', 'style': 'form', 'explode': True }})
    r"""Request timezone offset to view availability"""  
    

@dataclasses.dataclass
class GetConsumerV1AvailabilityServiceIDStartDateEndDateResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    availability_view_model: Optional[shared_availabilityviewmodel.AvailabilityViewModel] = dataclasses.field(default=None)
    r"""Success"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    