/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { Expose, Transform, Type } from "class-transformer";

/**
 * Identifying information for the git-user
 */
export class TimelineCommittedEventAuthor extends SpeakeasyBase {
  /**
   * Timestamp of the commit
   */
  @SpeakeasyMetadata()
  @Expose({ name: "date" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  date: Date;

  /**
   * Git email address of the user
   */
  @SpeakeasyMetadata()
  @Expose({ name: "email" })
  email: string;

  /**
   * Name of the git user
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name: string;
}

/**
 * Identifying information for the git-user
 */
export class TimelineCommittedEventCommitter extends SpeakeasyBase {
  /**
   * Timestamp of the commit
   */
  @SpeakeasyMetadata()
  @Expose({ name: "date" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  date: Date;

  /**
   * Git email address of the user
   */
  @SpeakeasyMetadata()
  @Expose({ name: "email" })
  email: string;

  /**
   * Name of the git user
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name: string;
}

export class TimelineCommittedEventParents extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "html_url" })
  htmlUrl: string;

  /**
   * SHA for the commit
   */
  @SpeakeasyMetadata()
  @Expose({ name: "sha" })
  sha: string;

  @SpeakeasyMetadata()
  @Expose({ name: "url" })
  url: string;
}

export class TimelineCommittedEventTree extends SpeakeasyBase {
  /**
   * SHA for the commit
   */
  @SpeakeasyMetadata()
  @Expose({ name: "sha" })
  sha: string;

  @SpeakeasyMetadata()
  @Expose({ name: "url" })
  url: string;
}

export class TimelineCommittedEventVerification extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "payload" })
  payload: string;

  @SpeakeasyMetadata()
  @Expose({ name: "reason" })
  reason: string;

  @SpeakeasyMetadata()
  @Expose({ name: "signature" })
  signature: string;

  @SpeakeasyMetadata()
  @Expose({ name: "verified" })
  verified: boolean;
}

/**
 * Timeline Committed Event
 */
export class TimelineCommittedEvent extends SpeakeasyBase {
  /**
   * Identifying information for the git-user
   */
  @SpeakeasyMetadata()
  @Expose({ name: "author" })
  @Type(() => TimelineCommittedEventAuthor)
  author: TimelineCommittedEventAuthor;

  /**
   * Identifying information for the git-user
   */
  @SpeakeasyMetadata()
  @Expose({ name: "committer" })
  @Type(() => TimelineCommittedEventCommitter)
  committer: TimelineCommittedEventCommitter;

  @SpeakeasyMetadata()
  @Expose({ name: "event" })
  event?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "html_url" })
  htmlUrl: string;

  /**
   * Message describing the purpose of the commit
   */
  @SpeakeasyMetadata()
  @Expose({ name: "message" })
  message: string;

  @SpeakeasyMetadata()
  @Expose({ name: "node_id" })
  nodeId: string;

  @SpeakeasyMetadata({ elemType: TimelineCommittedEventParents })
  @Expose({ name: "parents" })
  @Type(() => TimelineCommittedEventParents)
  parents: TimelineCommittedEventParents[];

  /**
   * SHA for the commit
   */
  @SpeakeasyMetadata()
  @Expose({ name: "sha" })
  sha: string;

  @SpeakeasyMetadata()
  @Expose({ name: "tree" })
  @Type(() => TimelineCommittedEventTree)
  tree: TimelineCommittedEventTree;

  @SpeakeasyMetadata()
  @Expose({ name: "url" })
  url: string;

  @SpeakeasyMetadata()
  @Expose({ name: "verification" })
  @Type(() => TimelineCommittedEventVerification)
  verification: TimelineCommittedEventVerification;
}
