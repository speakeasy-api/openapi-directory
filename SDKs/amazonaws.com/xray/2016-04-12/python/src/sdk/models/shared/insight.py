"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from ..shared import anomalousservice as shared_anomalousservice
from ..shared import insightcategory_enum as shared_insightcategory_enum
from ..shared import insightstate_enum as shared_insightstate_enum
from ..shared import requestimpactstatistics as shared_requestimpactstatistics
from ..shared import serviceid as shared_serviceid
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from marshmallow import fields
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Insight:
    r"""When fault rates go outside of the expected range, X-Ray creates an insight. Insights tracks emergent issues within your applications."""
    
    categories: Optional[list[shared_insightcategory_enum.InsightCategoryEnum]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Categories'), 'exclude': lambda f: f is None }})  
    client_request_impact_statistics: Optional[shared_requestimpactstatistics.RequestImpactStatistics] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ClientRequestImpactStatistics'), 'exclude': lambda f: f is None }})  
    end_time: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('EndTime'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})  
    group_arn: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('GroupARN'), 'exclude': lambda f: f is None }})  
    group_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('GroupName'), 'exclude': lambda f: f is None }})  
    insight_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('InsightId'), 'exclude': lambda f: f is None }})  
    root_cause_service_id: Optional[shared_serviceid.ServiceID] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('RootCauseServiceId'), 'exclude': lambda f: f is None }})
    r"""<p/>"""  
    root_cause_service_request_impact_statistics: Optional[shared_requestimpactstatistics.RequestImpactStatistics] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('RootCauseServiceRequestImpactStatistics'), 'exclude': lambda f: f is None }})  
    start_time: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('StartTime'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})  
    state: Optional[shared_insightstate_enum.InsightStateEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('State'), 'exclude': lambda f: f is None }})  
    summary: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Summary'), 'exclude': lambda f: f is None }})  
    top_anomalous_services: Optional[list[shared_anomalousservice.AnomalousService]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TopAnomalousServices'), 'exclude': lambda f: f is None }})  
    