/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

/**
 * RecordingsListRecordingListRecordingFileList - List of recording file.
 */
public class RecordingsListRecordingListRecordingFileList {
    /**
     * Unique Identifier of the user account.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("account_id")
    public String accountId;
    public RecordingsListRecordingListRecordingFileList withAccountId(String accountId) {
        this.accountId = accountId;
        return this;
    }
    
    /**
     * Meeting duration.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("duration")
    public Long duration;
    public RecordingsListRecordingListRecordingFileList withDuration(Long duration) {
        this.duration = duration;
        return this;
    }
    
    /**
     * ID of the user set as host of meeting.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("host_id")
    public String hostId;
    public RecordingsListRecordingListRecordingFileList withHostId(String hostId) {
        this.hostId = hostId;
        return this;
    }
    
    /**
     * Meeting ID - also known as the meeting number.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    public String id;
    public RecordingsListRecordingListRecordingFileList withId(String id) {
        this.id = id;
        return this;
    }
    
    /**
     * Number of recording files returned in the response of this API call.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("recording_count")
    public String recordingCount;
    public RecordingsListRecordingListRecordingFileList withRecordingCount(String recordingCount) {
        this.recordingCount = recordingCount;
        return this;
    }
    
    /**
     * List of recording file.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("recording_files")
    public RecordingsListRecordingListRecordingFileListRecordingFiles[] recordingFiles;
    public RecordingsListRecordingListRecordingFileList withRecordingFiles(RecordingsListRecordingListRecordingFileListRecordingFiles[] recordingFiles) {
        this.recordingFiles = recordingFiles;
        return this;
    }
    
    /**
     * The time at which the meeting started.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("start_time")
    public OffsetDateTime startTime;
    public RecordingsListRecordingListRecordingFileList withStartTime(OffsetDateTime startTime) {
        this.startTime = startTime;
        return this;
    }
    
    /**
     * Meeting topic.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("topic")
    public String topic;
    public RecordingsListRecordingListRecordingFileList withTopic(String topic) {
        this.topic = topic;
        return this;
    }
    
    /**
     * Total size of the recording.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("total_size")
    public String totalSize;
    public RecordingsListRecordingListRecordingFileList withTotalSize(String totalSize) {
        this.totalSize = totalSize;
        return this;
    }
    
    /**
     * Type of the meeting that was recorded.
     * 
     * Meeting Types:&lt;br&gt;`1` - Instant meeting.&lt;br&gt;`2` - Scheduled meeting.&lt;br&gt;`3` - Recurring meeting with no fixed time.&lt;br&gt;`8` - Recurring meeting with fixed time.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("type")
    public String type;
    public RecordingsListRecordingListRecordingFileList withType(String type) {
        this.type = type;
        return this;
    }
    
    /**
     * Unique Meeting Identifier. Each instance of the meeting will have its own UUID.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("uuid")
    public String uuid;
    public RecordingsListRecordingListRecordingFileList withUuid(String uuid) {
        this.uuid = uuid;
        return this;
    }
    
}
