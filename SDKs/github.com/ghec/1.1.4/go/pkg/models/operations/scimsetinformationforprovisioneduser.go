// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"net/http"
	"openapi/pkg/models/shared"
)

type ScimSetInformationForProvisionedUserPathParams struct {
	// The organization name. The name is not case sensitive.
	Org string `pathParam:"style=simple,explode=false,name=org"`
	// The unique identifier of the SCIM user.
	ScimUserID string `pathParam:"style=simple,explode=false,name=scim_user_id"`
}

type ScimSetInformationForProvisionedUserRequestBodyEmails struct {
	Primary *bool   `json:"primary,omitempty"`
	Type    *string `json:"type,omitempty"`
	Value   string  `json:"value"`
}

type ScimSetInformationForProvisionedUserRequestBodyName struct {
	FamilyName string  `json:"familyName"`
	Formatted  *string `json:"formatted,omitempty"`
	GivenName  string  `json:"givenName"`
}

type ScimSetInformationForProvisionedUserRequestBody struct {
	Active *bool `json:"active,omitempty"`
	// The name of the user, suitable for display to end-users
	DisplayName *string `json:"displayName,omitempty"`
	// user emails
	Emails     []ScimSetInformationForProvisionedUserRequestBodyEmails `json:"emails"`
	ExternalID *string                                                 `json:"externalId,omitempty"`
	Groups     []string                                                `json:"groups,omitempty"`
	Name       ScimSetInformationForProvisionedUserRequestBodyName     `json:"name"`
	Schemas    []string                                                `json:"schemas,omitempty"`
	// Configured by the admin. Could be an email, login, or username
	UserName string `json:"userName"`
}

type ScimSetInformationForProvisionedUserRequest struct {
	PathParams ScimSetInformationForProvisionedUserPathParams
	Request    ScimSetInformationForProvisionedUserRequestBody `request:"mediaType=application/json"`
}

type ScimSetInformationForProvisionedUserResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Forbidden
	ScimError *shared.ScimError
	// Response
	ScimUser *shared.ScimUser
}
