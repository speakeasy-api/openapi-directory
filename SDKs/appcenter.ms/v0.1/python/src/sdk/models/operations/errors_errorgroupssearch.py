"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from enum import Enum
from marshmallow import fields
from sdk import utils
from typing import Optional


@dataclasses.dataclass
class ErrorsErrorGroupsSearchSecurity:
    
    api_token: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'apiKey', 'sub_type': 'header', 'field_name': 'X-API-Token' }})  
    
class ErrorsErrorGroupsSearchOrderEnum(str, Enum):
    r"""It controls the order of sorting"""
    DESC = 'desc'
    ASC = 'asc'

class ErrorsErrorGroupsSearchSortEnum(str, Enum):
    r"""It controls the sort based on specified field"""
    MATCHING_REPORTS_COUNT = 'matchingReportsCount'
    EXCEPTION_CLASS_NAME = 'exceptionClassName'
    EXCEPTION_MESSAGE = 'exceptionMessage'
    EXCEPTION_METHOD = 'exceptionMethod'
    LAST_OCCURRENCE = 'lastOccurrence'


@dataclasses.dataclass
class ErrorsErrorGroupsSearchRequest:
    
    app_name: str = dataclasses.field(metadata={'path_param': { 'field_name': 'app_name', 'style': 'simple', 'explode': False }})
    r"""The name of the application"""  
    owner_name: str = dataclasses.field(metadata={'path_param': { 'field_name': 'owner_name', 'style': 'simple', 'explode': False }})
    r"""The name of the owner"""  
    dollar_skip: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': '$skip', 'style': 'form', 'explode': True }})
    r"""The offset (starting at 0) of the first result to return. This parameter along with limit is used to perform pagination."""  
    dollar_top: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': '$top', 'style': 'form', 'explode': True }})
    r"""The maximum number of results to return"""  
    filter: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'filter', 'style': 'form', 'explode': True }})
    r"""A filter as specified in OData notation"""  
    order: Optional[ErrorsErrorGroupsSearchOrderEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'order', 'style': 'form', 'explode': True }})
    r"""It controls the order of sorting"""  
    q: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'q', 'style': 'form', 'explode': True }})
    r"""A query string"""  
    sort: Optional[ErrorsErrorGroupsSearchSortEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'sort', 'style': 'form', 'explode': True }})
    r"""It controls the sort based on specified field"""  
    
class ErrorsErrorGroupsSearchDefaultApplicationJSONErrorCodeEnum(str, Enum):
    BAD_REQUEST = 'BadRequest'
    CONFLICT = 'Conflict'
    NOT_ACCEPTABLE = 'NotAcceptable'
    NOT_FOUND = 'NotFound'
    INTERNAL_SERVER_ERROR = 'InternalServerError'
    UNAUTHORIZED = 'Unauthorized'
    TOO_MANY_REQUESTS = 'TooManyRequests'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ErrorsErrorGroupsSearchDefaultApplicationJSONError:
    
    code: ErrorsErrorGroupsSearchDefaultApplicationJSONErrorCodeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('code') }})  
    message: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('message') }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ErrorsErrorGroupsSearchDefaultApplicationJSON:
    r"""Error code with reason"""
    
    error: ErrorsErrorGroupsSearchDefaultApplicationJSONError = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('error') }})  
    
class ErrorsErrorGroupsSearch200ApplicationJSONErrorGroupsReasonFramesLanguageEnum(str, Enum):
    r"""programming language of the frame"""
    JAVA_SCRIPT = 'JavaScript'
    C_SHARP = 'CSharp'
    OBJECTIVE_C = 'Objective-C'
    OBJECTIVE_CPP = 'Objective-Cpp'
    CPP = 'Cpp'
    C = 'C'
    SWIFT = 'Swift'
    JAVA = 'Java'
    UNKNOWN = 'Unknown'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ErrorsErrorGroupsSearch200ApplicationJSONErrorGroupsReasonFrames:
    
    app_code: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('appCode'), 'exclude': lambda f: f is None }})
    r"""this line isn't from any framework"""  
    class_method: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('classMethod'), 'exclude': lambda f: f is None }})
    r"""is a class method"""  
    class_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('className'), 'exclude': lambda f: f is None }})
    r"""name of the class"""  
    code_formatted: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('codeFormatted'), 'exclude': lambda f: f is None }})
    r"""Formatted frame string"""  
    code_raw: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('codeRaw'), 'exclude': lambda f: f is None }})
    r"""Unformatted Frame string"""  
    exception_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('exceptionType'), 'exclude': lambda f: f is None }})
    r"""Exception type."""  
    file: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('file'), 'exclude': lambda f: f is None }})
    r"""name of the file"""  
    framework_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('frameworkName'), 'exclude': lambda f: f is None }})
    r"""Name of the framework"""  
    language: Optional[ErrorsErrorGroupsSearch200ApplicationJSONErrorGroupsReasonFramesLanguageEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('language'), 'exclude': lambda f: f is None }})
    r"""programming language of the frame"""  
    line: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('line'), 'exclude': lambda f: f is None }})
    r"""line number"""  
    method: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('method'), 'exclude': lambda f: f is None }})
    r"""name of the method"""  
    method_params: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('methodParams'), 'exclude': lambda f: f is None }})
    r"""parameters of the frames method"""  
    os_exception_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('osExceptionType'), 'exclude': lambda f: f is None }})
    r"""OS exception type. (aka. SIGNAL)"""  
    
class ErrorsErrorGroupsSearch200ApplicationJSONErrorGroupsStateEnum(str, Enum):
    OPEN = 'open'
    CLOSED = 'closed'
    IGNORED = 'ignored'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ErrorsErrorGroupsSearch200ApplicationJSONErrorGroups:
    
    app_version: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('appVersion') }})  
    count: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('count') }})  
    device_count: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('deviceCount') }})  
    error_group_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('errorGroupId') }})  
    first_occurrence: datetime = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('firstOccurrence'), 'encoder': utils.datetimeisoformat(False), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso') }})  
    last_occurrence: datetime = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lastOccurrence'), 'encoder': utils.datetimeisoformat(False), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso') }})  
    state: ErrorsErrorGroupsSearch200ApplicationJSONErrorGroupsStateEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('state') }})  
    annotation: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('annotation'), 'exclude': lambda f: f is None }})  
    app_build: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('appBuild'), 'exclude': lambda f: f is None }})  
    code_raw: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('codeRaw'), 'exclude': lambda f: f is None }})  
    exception_app_code: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('exceptionAppCode'), 'exclude': lambda f: f is None }})  
    exception_class_method: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('exceptionClassMethod'), 'exclude': lambda f: f is None }})  
    exception_class_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('exceptionClassName'), 'exclude': lambda f: f is None }})  
    exception_file: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('exceptionFile'), 'exclude': lambda f: f is None }})  
    exception_line: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('exceptionLine'), 'exclude': lambda f: f is None }})  
    exception_message: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('exceptionMessage'), 'exclude': lambda f: f is None }})  
    exception_method: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('exceptionMethod'), 'exclude': lambda f: f is None }})  
    exception_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('exceptionType'), 'exclude': lambda f: f is None }})  
    hidden: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('hidden'), 'exclude': lambda f: f is None }})  
    reason_frames: Optional[list[ErrorsErrorGroupsSearch200ApplicationJSONErrorGroupsReasonFrames]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('reasonFrames'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ErrorsErrorGroupsSearch200ApplicationJSON:
    r"""List of error groups"""
    
    error_groups: Optional[list[ErrorsErrorGroupsSearch200ApplicationJSONErrorGroups]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('errorGroups'), 'exclude': lambda f: f is None }})  
    has_more_results: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('hasMoreResults'), 'exclude': lambda f: f is None }})  
    

@dataclasses.dataclass
class ErrorsErrorGroupsSearchResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    errors_error_groups_search_200_application_json_object: Optional[ErrorsErrorGroupsSearch200ApplicationJSON] = dataclasses.field(default=None)
    r"""List of error groups"""  
    errors_error_groups_search_default_application_json_object: Optional[ErrorsErrorGroupsSearchDefaultApplicationJSON] = dataclasses.field(default=None)
    r"""Error code with reason"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    