/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * WorkerPool - Describes one particular pool of Cloud Dataflow workers to be instantiated by the Cloud Dataflow service in order to perform the computations required by a job. Note that a workflow job may use multiple pools, in order to match the various computational requirements of the various stages of the job.
 */
public class WorkerPool {
    /**
     * Settings for WorkerPool autoscaling.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("autoscalingSettings")
    public AutoscalingSettings autoscalingSettings;

    public WorkerPool withAutoscalingSettings(AutoscalingSettings autoscalingSettings) {
        this.autoscalingSettings = autoscalingSettings;
        return this;
    }
    
    /**
     * Data disks that are used by a VM in this workflow.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("dataDisks")
    public Disk[] dataDisks;

    public WorkerPool withDataDisks(Disk[] dataDisks) {
        this.dataDisks = dataDisks;
        return this;
    }
    
    /**
     * The default package set to install. This allows the service to select a default set of packages which are useful to worker harnesses written in a particular language.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("defaultPackageSet")
    public WorkerPoolDefaultPackageSetEnum defaultPackageSet;

    public WorkerPool withDefaultPackageSet(WorkerPoolDefaultPackageSetEnum defaultPackageSet) {
        this.defaultPackageSet = defaultPackageSet;
        return this;
    }
    
    /**
     * Size of root disk for VMs, in GB. If zero or unspecified, the service will attempt to choose a reasonable default.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("diskSizeGb")
    public Integer diskSizeGb;

    public WorkerPool withDiskSizeGb(Integer diskSizeGb) {
        this.diskSizeGb = diskSizeGb;
        return this;
    }
    
    /**
     * Fully qualified source image for disks.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("diskSourceImage")
    public String diskSourceImage;

    public WorkerPool withDiskSourceImage(String diskSourceImage) {
        this.diskSourceImage = diskSourceImage;
        return this;
    }
    
    /**
     * Type of root disk for VMs. If empty or unspecified, the service will attempt to choose a reasonable default.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("diskType")
    public String diskType;

    public WorkerPool withDiskType(String diskType) {
        this.diskType = diskType;
        return this;
    }
    
    /**
     * Configuration for VM IPs.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ipConfiguration")
    public WorkerPoolIpConfigurationEnum ipConfiguration;

    public WorkerPool withIpConfiguration(WorkerPoolIpConfigurationEnum ipConfiguration) {
        this.ipConfiguration = ipConfiguration;
        return this;
    }
    
    /**
     * The kind of the worker pool; currently only `harness` and `shuffle` are supported.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("kind")
    public String kind;

    public WorkerPool withKind(String kind) {
        this.kind = kind;
        return this;
    }
    
    /**
     * Machine type (e.g. "n1-standard-1"). If empty or unspecified, the service will attempt to choose a reasonable default.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("machineType")
    public String machineType;

    public WorkerPool withMachineType(String machineType) {
        this.machineType = machineType;
        return this;
    }
    
    /**
     * Metadata to set on the Google Compute Engine VMs.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("metadata")
    public java.util.Map<String, String> metadata;

    public WorkerPool withMetadata(java.util.Map<String, String> metadata) {
        this.metadata = metadata;
        return this;
    }
    
    /**
     * Network to which VMs will be assigned. If empty or unspecified, the service will use the network "default".
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("network")
    public String network;

    public WorkerPool withNetwork(String network) {
        this.network = network;
        return this;
    }
    
    /**
     * The number of threads per worker harness. If empty or unspecified, the service will choose a number of threads (according to the number of cores on the selected machine type for batch, or 1 by convention for streaming).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("numThreadsPerWorker")
    public Integer numThreadsPerWorker;

    public WorkerPool withNumThreadsPerWorker(Integer numThreadsPerWorker) {
        this.numThreadsPerWorker = numThreadsPerWorker;
        return this;
    }
    
    /**
     * Number of Google Compute Engine workers in this pool needed to execute the job. If zero or unspecified, the service will attempt to choose a reasonable default.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("numWorkers")
    public Integer numWorkers;

    public WorkerPool withNumWorkers(Integer numWorkers) {
        this.numWorkers = numWorkers;
        return this;
    }
    
    /**
     * The action to take on host maintenance, as defined by the Google Compute Engine API.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("onHostMaintenance")
    public String onHostMaintenance;

    public WorkerPool withOnHostMaintenance(String onHostMaintenance) {
        this.onHostMaintenance = onHostMaintenance;
        return this;
    }
    
    /**
     * Packages to be installed on workers.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("packages")
    public Package[] packages;

    public WorkerPool withPackages(Package[] packages) {
        this.packages = packages;
        return this;
    }
    
    /**
     * Extra arguments for this worker pool.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("poolArgs")
    public java.util.Map<String, Object> poolArgs;

    public WorkerPool withPoolArgs(java.util.Map<String, Object> poolArgs) {
        this.poolArgs = poolArgs;
        return this;
    }
    
    /**
     * Set of SDK harness containers needed to execute this pipeline. This will only be set in the Fn API path. For non-cross-language pipelines this should have only one entry. Cross-language pipelines will have two or more entries.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sdkHarnessContainerImages")
    public SDKHarnessContainerImage[] sdkHarnessContainerImages;

    public WorkerPool withSDKHarnessContainerImages(SDKHarnessContainerImage[] sdkHarnessContainerImages) {
        this.sdkHarnessContainerImages = sdkHarnessContainerImages;
        return this;
    }
    
    /**
     * Subnetwork to which VMs will be assigned, if desired. Expected to be of the form "regions/REGION/subnetworks/SUBNETWORK".
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("subnetwork")
    public String subnetwork;

    public WorkerPool withSubnetwork(String subnetwork) {
        this.subnetwork = subnetwork;
        return this;
    }
    
    /**
     * Taskrunner configuration settings.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("taskrunnerSettings")
    public TaskRunnerSettings taskrunnerSettings;

    public WorkerPool withTaskrunnerSettings(TaskRunnerSettings taskrunnerSettings) {
        this.taskrunnerSettings = taskrunnerSettings;
        return this;
    }
    
    /**
     * Sets the policy for determining when to turndown worker pool. Allowed values are: `TEARDOWN_ALWAYS`, `TEARDOWN_ON_SUCCESS`, and `TEARDOWN_NEVER`. `TEARDOWN_ALWAYS` means workers are always torn down regardless of whether the job succeeds. `TEARDOWN_ON_SUCCESS` means workers are torn down if the job succeeds. `TEARDOWN_NEVER` means the workers are never torn down. If the workers are not torn down by the service, they will continue to run and use Google Compute Engine VM resources in the user's project until they are explicitly terminated by the user. Because of this, Google recommends using the `TEARDOWN_ALWAYS` policy except for small, manually supervised test jobs. If unknown or unspecified, the service will attempt to choose a reasonable default.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("teardownPolicy")
    public WorkerPoolTeardownPolicyEnum teardownPolicy;

    public WorkerPool withTeardownPolicy(WorkerPoolTeardownPolicyEnum teardownPolicy) {
        this.teardownPolicy = teardownPolicy;
        return this;
    }
    
    /**
     * Required. Docker container image that executes the Cloud Dataflow worker harness, residing in Google Container Registry. Deprecated for the Fn API path. Use sdk_harness_container_images instead.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("workerHarnessContainerImage")
    public String workerHarnessContainerImage;

    public WorkerPool withWorkerHarnessContainerImage(String workerHarnessContainerImage) {
        this.workerHarnessContainerImage = workerHarnessContainerImage;
        return this;
    }
    
    /**
     * Zone to run the worker pools in. If empty or unspecified, the service will attempt to choose a reasonable default.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("zone")
    public String zone;

    public WorkerPool withZone(String zone) {
        this.zone = zone;
        return this;
    }
    
    public WorkerPool(){}
}
