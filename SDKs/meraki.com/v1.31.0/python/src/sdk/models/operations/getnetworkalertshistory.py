"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Any, Optional


@dataclasses.dataclass
class GetNetworkAlertsHistoryRequest:
    
    network_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'networkId', 'style': 'simple', 'explode': False }})  
    ending_before: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'endingBefore', 'style': 'form', 'explode': True }})
    r"""A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it."""  
    per_page: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'perPage', 'style': 'form', 'explode': True }})
    r"""The number of entries per page returned. Acceptable range is 3 - 1000. Default is 100."""  
    starting_after: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'startingAfter', 'style': 'form', 'explode': True }})
    r"""A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetNetworkAlertsHistory200ApplicationJSONDestinationsEmail:
    r"""email destinations for this alert"""
    
    sent_at: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sentAt'), 'exclude': lambda f: f is None }})
    r"""time when the alert was sent to the user(s) for this channel"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetNetworkAlertsHistory200ApplicationJSONDestinationsPush:
    r"""push destinations for this alert"""
    
    sent_at: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sentAt'), 'exclude': lambda f: f is None }})
    r"""time when the alert was sent to the user(s) for this channel"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetNetworkAlertsHistory200ApplicationJSONDestinationsSms:
    r"""sms destinations for this alert"""
    
    sent_at: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sentAt'), 'exclude': lambda f: f is None }})
    r"""time when the alert was sent to the user(s) for this channel"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetNetworkAlertsHistory200ApplicationJSONDestinationsWebhook:
    r"""webhook destinations for this alert"""
    
    sent_at: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sentAt'), 'exclude': lambda f: f is None }})
    r"""time when the alert was sent to the user(s) for this channel"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetNetworkAlertsHistory200ApplicationJSONDestinations:
    r"""the destinations this alert is configured to be delivered to"""
    
    email: Optional[GetNetworkAlertsHistory200ApplicationJSONDestinationsEmail] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('email'), 'exclude': lambda f: f is None }})
    r"""email destinations for this alert"""  
    push: Optional[GetNetworkAlertsHistory200ApplicationJSONDestinationsPush] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('push'), 'exclude': lambda f: f is None }})
    r"""push destinations for this alert"""  
    sms: Optional[GetNetworkAlertsHistory200ApplicationJSONDestinationsSms] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sms'), 'exclude': lambda f: f is None }})
    r"""sms destinations for this alert"""  
    webhook: Optional[GetNetworkAlertsHistory200ApplicationJSONDestinationsWebhook] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('webhook'), 'exclude': lambda f: f is None }})
    r"""webhook destinations for this alert"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetNetworkAlertsHistory200ApplicationJSONDevice:
    r"""info related to the device that caused the alert"""
    
    serial: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('serial'), 'exclude': lambda f: f is None }})
    r"""device serial"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetNetworkAlertsHistory200ApplicationJSON:
    
    alert_data: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('alertData'), 'exclude': lambda f: f is None }})
    r"""relevant data about the event that caused the alert"""  
    alert_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('alertType'), 'exclude': lambda f: f is None }})
    r"""user friendly alert type"""  
    alert_type_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('alertTypeId'), 'exclude': lambda f: f is None }})
    r"""type of alert"""  
    destinations: Optional[GetNetworkAlertsHistory200ApplicationJSONDestinations] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('destinations'), 'exclude': lambda f: f is None }})
    r"""the destinations this alert is configured to be delivered to"""  
    device: Optional[GetNetworkAlertsHistory200ApplicationJSONDevice] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('device'), 'exclude': lambda f: f is None }})
    r"""info related to the device that caused the alert"""  
    occurred_at: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('occurredAt'), 'exclude': lambda f: f is None }})
    r"""time when the event occurred"""  
    

@dataclasses.dataclass
class GetNetworkAlertsHistoryResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    get_network_alerts_history_200_application_json_objects: Optional[list[GetNetworkAlertsHistory200ApplicationJSON]] = dataclasses.field(default=None)
    r"""Successful operation"""  
    headers: Optional[dict[str, list[str]]] = dataclasses.field(default=None)  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    