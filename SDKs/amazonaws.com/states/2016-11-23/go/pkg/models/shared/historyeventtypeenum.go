// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type HistoryEventTypeEnum string

const (
	HistoryEventTypeEnumActivityFailed               HistoryEventTypeEnum = "ActivityFailed"
	HistoryEventTypeEnumActivityScheduled            HistoryEventTypeEnum = "ActivityScheduled"
	HistoryEventTypeEnumActivityScheduleFailed       HistoryEventTypeEnum = "ActivityScheduleFailed"
	HistoryEventTypeEnumActivityStarted              HistoryEventTypeEnum = "ActivityStarted"
	HistoryEventTypeEnumActivitySucceeded            HistoryEventTypeEnum = "ActivitySucceeded"
	HistoryEventTypeEnumActivityTimedOut             HistoryEventTypeEnum = "ActivityTimedOut"
	HistoryEventTypeEnumChoiceStateEntered           HistoryEventTypeEnum = "ChoiceStateEntered"
	HistoryEventTypeEnumChoiceStateExited            HistoryEventTypeEnum = "ChoiceStateExited"
	HistoryEventTypeEnumExecutionAborted             HistoryEventTypeEnum = "ExecutionAborted"
	HistoryEventTypeEnumExecutionFailed              HistoryEventTypeEnum = "ExecutionFailed"
	HistoryEventTypeEnumExecutionStarted             HistoryEventTypeEnum = "ExecutionStarted"
	HistoryEventTypeEnumExecutionSucceeded           HistoryEventTypeEnum = "ExecutionSucceeded"
	HistoryEventTypeEnumExecutionTimedOut            HistoryEventTypeEnum = "ExecutionTimedOut"
	HistoryEventTypeEnumFailStateEntered             HistoryEventTypeEnum = "FailStateEntered"
	HistoryEventTypeEnumLambdaFunctionFailed         HistoryEventTypeEnum = "LambdaFunctionFailed"
	HistoryEventTypeEnumLambdaFunctionScheduled      HistoryEventTypeEnum = "LambdaFunctionScheduled"
	HistoryEventTypeEnumLambdaFunctionScheduleFailed HistoryEventTypeEnum = "LambdaFunctionScheduleFailed"
	HistoryEventTypeEnumLambdaFunctionStarted        HistoryEventTypeEnum = "LambdaFunctionStarted"
	HistoryEventTypeEnumLambdaFunctionStartFailed    HistoryEventTypeEnum = "LambdaFunctionStartFailed"
	HistoryEventTypeEnumLambdaFunctionSucceeded      HistoryEventTypeEnum = "LambdaFunctionSucceeded"
	HistoryEventTypeEnumLambdaFunctionTimedOut       HistoryEventTypeEnum = "LambdaFunctionTimedOut"
	HistoryEventTypeEnumMapIterationAborted          HistoryEventTypeEnum = "MapIterationAborted"
	HistoryEventTypeEnumMapIterationFailed           HistoryEventTypeEnum = "MapIterationFailed"
	HistoryEventTypeEnumMapIterationStarted          HistoryEventTypeEnum = "MapIterationStarted"
	HistoryEventTypeEnumMapIterationSucceeded        HistoryEventTypeEnum = "MapIterationSucceeded"
	HistoryEventTypeEnumMapStateAborted              HistoryEventTypeEnum = "MapStateAborted"
	HistoryEventTypeEnumMapStateEntered              HistoryEventTypeEnum = "MapStateEntered"
	HistoryEventTypeEnumMapStateExited               HistoryEventTypeEnum = "MapStateExited"
	HistoryEventTypeEnumMapStateFailed               HistoryEventTypeEnum = "MapStateFailed"
	HistoryEventTypeEnumMapStateStarted              HistoryEventTypeEnum = "MapStateStarted"
	HistoryEventTypeEnumMapStateSucceeded            HistoryEventTypeEnum = "MapStateSucceeded"
	HistoryEventTypeEnumParallelStateAborted         HistoryEventTypeEnum = "ParallelStateAborted"
	HistoryEventTypeEnumParallelStateEntered         HistoryEventTypeEnum = "ParallelStateEntered"
	HistoryEventTypeEnumParallelStateExited          HistoryEventTypeEnum = "ParallelStateExited"
	HistoryEventTypeEnumParallelStateFailed          HistoryEventTypeEnum = "ParallelStateFailed"
	HistoryEventTypeEnumParallelStateStarted         HistoryEventTypeEnum = "ParallelStateStarted"
	HistoryEventTypeEnumParallelStateSucceeded       HistoryEventTypeEnum = "ParallelStateSucceeded"
	HistoryEventTypeEnumPassStateEntered             HistoryEventTypeEnum = "PassStateEntered"
	HistoryEventTypeEnumPassStateExited              HistoryEventTypeEnum = "PassStateExited"
	HistoryEventTypeEnumSucceedStateEntered          HistoryEventTypeEnum = "SucceedStateEntered"
	HistoryEventTypeEnumSucceedStateExited           HistoryEventTypeEnum = "SucceedStateExited"
	HistoryEventTypeEnumTaskFailed                   HistoryEventTypeEnum = "TaskFailed"
	HistoryEventTypeEnumTaskScheduled                HistoryEventTypeEnum = "TaskScheduled"
	HistoryEventTypeEnumTaskStarted                  HistoryEventTypeEnum = "TaskStarted"
	HistoryEventTypeEnumTaskStartFailed              HistoryEventTypeEnum = "TaskStartFailed"
	HistoryEventTypeEnumTaskStateAborted             HistoryEventTypeEnum = "TaskStateAborted"
	HistoryEventTypeEnumTaskStateEntered             HistoryEventTypeEnum = "TaskStateEntered"
	HistoryEventTypeEnumTaskStateExited              HistoryEventTypeEnum = "TaskStateExited"
	HistoryEventTypeEnumTaskSubmitFailed             HistoryEventTypeEnum = "TaskSubmitFailed"
	HistoryEventTypeEnumTaskSubmitted                HistoryEventTypeEnum = "TaskSubmitted"
	HistoryEventTypeEnumTaskSucceeded                HistoryEventTypeEnum = "TaskSucceeded"
	HistoryEventTypeEnumTaskTimedOut                 HistoryEventTypeEnum = "TaskTimedOut"
	HistoryEventTypeEnumWaitStateAborted             HistoryEventTypeEnum = "WaitStateAborted"
	HistoryEventTypeEnumWaitStateEntered             HistoryEventTypeEnum = "WaitStateEntered"
	HistoryEventTypeEnumWaitStateExited              HistoryEventTypeEnum = "WaitStateExited"
	HistoryEventTypeEnumMapRunAborted                HistoryEventTypeEnum = "MapRunAborted"
	HistoryEventTypeEnumMapRunFailed                 HistoryEventTypeEnum = "MapRunFailed"
	HistoryEventTypeEnumMapRunStarted                HistoryEventTypeEnum = "MapRunStarted"
	HistoryEventTypeEnumMapRunSucceeded              HistoryEventTypeEnum = "MapRunSucceeded"
)

func (e *HistoryEventTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "ActivityFailed":
		fallthrough
	case "ActivityScheduled":
		fallthrough
	case "ActivityScheduleFailed":
		fallthrough
	case "ActivityStarted":
		fallthrough
	case "ActivitySucceeded":
		fallthrough
	case "ActivityTimedOut":
		fallthrough
	case "ChoiceStateEntered":
		fallthrough
	case "ChoiceStateExited":
		fallthrough
	case "ExecutionAborted":
		fallthrough
	case "ExecutionFailed":
		fallthrough
	case "ExecutionStarted":
		fallthrough
	case "ExecutionSucceeded":
		fallthrough
	case "ExecutionTimedOut":
		fallthrough
	case "FailStateEntered":
		fallthrough
	case "LambdaFunctionFailed":
		fallthrough
	case "LambdaFunctionScheduled":
		fallthrough
	case "LambdaFunctionScheduleFailed":
		fallthrough
	case "LambdaFunctionStarted":
		fallthrough
	case "LambdaFunctionStartFailed":
		fallthrough
	case "LambdaFunctionSucceeded":
		fallthrough
	case "LambdaFunctionTimedOut":
		fallthrough
	case "MapIterationAborted":
		fallthrough
	case "MapIterationFailed":
		fallthrough
	case "MapIterationStarted":
		fallthrough
	case "MapIterationSucceeded":
		fallthrough
	case "MapStateAborted":
		fallthrough
	case "MapStateEntered":
		fallthrough
	case "MapStateExited":
		fallthrough
	case "MapStateFailed":
		fallthrough
	case "MapStateStarted":
		fallthrough
	case "MapStateSucceeded":
		fallthrough
	case "ParallelStateAborted":
		fallthrough
	case "ParallelStateEntered":
		fallthrough
	case "ParallelStateExited":
		fallthrough
	case "ParallelStateFailed":
		fallthrough
	case "ParallelStateStarted":
		fallthrough
	case "ParallelStateSucceeded":
		fallthrough
	case "PassStateEntered":
		fallthrough
	case "PassStateExited":
		fallthrough
	case "SucceedStateEntered":
		fallthrough
	case "SucceedStateExited":
		fallthrough
	case "TaskFailed":
		fallthrough
	case "TaskScheduled":
		fallthrough
	case "TaskStarted":
		fallthrough
	case "TaskStartFailed":
		fallthrough
	case "TaskStateAborted":
		fallthrough
	case "TaskStateEntered":
		fallthrough
	case "TaskStateExited":
		fallthrough
	case "TaskSubmitFailed":
		fallthrough
	case "TaskSubmitted":
		fallthrough
	case "TaskSucceeded":
		fallthrough
	case "TaskTimedOut":
		fallthrough
	case "WaitStateAborted":
		fallthrough
	case "WaitStateEntered":
		fallthrough
	case "WaitStateExited":
		fallthrough
	case "MapRunAborted":
		fallthrough
	case "MapRunFailed":
		fallthrough
	case "MapRunStarted":
		fallthrough
	case "MapRunSucceeded":
		*e = HistoryEventTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for HistoryEventTypeEnum: %s", s)
	}
}
