"use strict";
/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Component = exports.ComponentTypeEnum = exports.ComponentScale = exports.ComponentRotate = exports.ComponentPositionEnum = exports.ComponentPanEnum = exports.ComponentCrop = exports.ComponentChromaKey = void 0;
var utils_1 = require("../../../internal/utils");
var class_transformer_1 = require("class-transformer");
/**
 * Allows to define a color (or a range of colors) that will be converted to transparent
 */
var ComponentChromaKey = /** @class */ (function (_super) {
    __extends(ComponentChromaKey, _super);
    function ComponentChromaKey() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "color" }),
        __metadata("design:type", String)
    ], ComponentChromaKey.prototype, "color", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "tolerance" }),
        __metadata("design:type", Number)
    ], ComponentChromaKey.prototype, "tolerance", void 0);
    return ComponentChromaKey;
}(utils_1.SpeakeasyBase));
exports.ComponentChromaKey = ComponentChromaKey;
/**
 * Crops the element
 */
var ComponentCrop = /** @class */ (function (_super) {
    __extends(ComponentCrop, _super);
    function ComponentCrop() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "height" }),
        __metadata("design:type", Number)
    ], ComponentCrop.prototype, "height", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "width" }),
        __metadata("design:type", Number)
    ], ComponentCrop.prototype, "width", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "x" }),
        __metadata("design:type", Number)
    ], ComponentCrop.prototype, "x", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "y" }),
        __metadata("design:type", Number)
    ], ComponentCrop.prototype, "y", void 0);
    return ComponentCrop;
}(utils_1.SpeakeasyBase));
exports.ComponentCrop = ComponentCrop;
/**
 * Pans the element to the specified direction. If <code>zoom</code> property is not specified, the effect is a non-zooming pan
 */
var ComponentPanEnum;
(function (ComponentPanEnum) {
    ComponentPanEnum["Left"] = "left";
    ComponentPanEnum["Top"] = "top";
    ComponentPanEnum["Right"] = "right";
    ComponentPanEnum["Bottom"] = "bottom";
    ComponentPanEnum["TopLeft"] = "top-left";
    ComponentPanEnum["TopRight"] = "top-right";
    ComponentPanEnum["BottomLeft"] = "bottom-left";
    ComponentPanEnum["BottomRight"] = "bottom-right";
})(ComponentPanEnum = exports.ComponentPanEnum || (exports.ComponentPanEnum = {}));
/**
 * Sets the element position in the scene. A value of 'custom' sets a custom position based on the provided 'x' and 'y' properties
 */
var ComponentPositionEnum;
(function (ComponentPositionEnum) {
    ComponentPositionEnum["TopLeft"] = "top-left";
    ComponentPositionEnum["TopRight"] = "top-right";
    ComponentPositionEnum["BottomRight"] = "bottom-right";
    ComponentPositionEnum["BottomLeft"] = "bottom-left";
    ComponentPositionEnum["CenterCenter"] = "center-center";
    ComponentPositionEnum["Custom"] = "custom";
})(ComponentPositionEnum = exports.ComponentPositionEnum || (exports.ComponentPositionEnum = {}));
var ComponentRotate = /** @class */ (function (_super) {
    __extends(ComponentRotate, _super);
    function ComponentRotate() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "angle" }),
        __metadata("design:type", Number)
    ], ComponentRotate.prototype, "angle", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "speed" }),
        __metadata("design:type", Number)
    ], ComponentRotate.prototype, "speed", void 0);
    return ComponentRotate;
}(utils_1.SpeakeasyBase));
exports.ComponentRotate = ComponentRotate;
var ComponentScale = /** @class */ (function (_super) {
    __extends(ComponentScale, _super);
    function ComponentScale() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "height" }),
        __metadata("design:type", Number)
    ], ComponentScale.prototype, "height", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "width" }),
        __metadata("design:type", Number)
    ], ComponentScale.prototype, "width", void 0);
    return ComponentScale;
}(utils_1.SpeakeasyBase));
exports.ComponentScale = ComponentScale;
var ComponentTypeEnum;
(function (ComponentTypeEnum) {
    ComponentTypeEnum["Component"] = "component";
})(ComponentTypeEnum = exports.ComponentTypeEnum || (exports.ComponentTypeEnum = {}));
/**
 * Creates an element based on the specified feature
 */
var Component = /** @class */ (function (_super) {
    __extends(Component, _super);
    function Component() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "cache" }),
        __metadata("design:type", Boolean)
    ], Component.prototype, "cache", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "chroma-key" }),
        (0, class_transformer_1.Type)(function () { return ComponentChromaKey; }),
        __metadata("design:type", ComponentChromaKey)
    ], Component.prototype, "chromaKey", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "comment" }),
        __metadata("design:type", String)
    ], Component.prototype, "comment", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "component" }),
        __metadata("design:type", String)
    ], Component.prototype, "component", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "crop" }),
        (0, class_transformer_1.Type)(function () { return ComponentCrop; }),
        __metadata("design:type", ComponentCrop)
    ], Component.prototype, "crop", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "duration" }),
        __metadata("design:type", Number)
    ], Component.prototype, "duration", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "extra-time" }),
        __metadata("design:type", Number)
    ], Component.prototype, "extraTime", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "fade-in" }),
        __metadata("design:type", Number)
    ], Component.prototype, "fadeIn", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "fade-out" }),
        __metadata("design:type", Number)
    ], Component.prototype, "fadeOut", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "height" }),
        __metadata("design:type", Number)
    ], Component.prototype, "height", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "pan" }),
        __metadata("design:type", String)
    ], Component.prototype, "pan", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "position" }),
        __metadata("design:type", String)
    ], Component.prototype, "position", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "rotate" }),
        (0, class_transformer_1.Type)(function () { return ComponentRotate; }),
        __metadata("design:type", ComponentRotate)
    ], Component.prototype, "rotate", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "scale" }),
        (0, class_transformer_1.Type)(function () { return ComponentScale; }),
        __metadata("design:type", ComponentScale)
    ], Component.prototype, "scale", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "settings" }),
        __metadata("design:type", Object)
    ], Component.prototype, "settings", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "start" }),
        __metadata("design:type", Number)
    ], Component.prototype, "start", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "type" }),
        __metadata("design:type", String)
    ], Component.prototype, "type", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "width" }),
        __metadata("design:type", Number)
    ], Component.prototype, "width", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "x" }),
        __metadata("design:type", Number)
    ], Component.prototype, "x", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "y" }),
        __metadata("design:type", Number)
    ], Component.prototype, "y", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "z-index" }),
        __metadata("design:type", Number)
    ], Component.prototype, "zIndex", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "zoom" }),
        __metadata("design:type", Number)
    ], Component.prototype, "zoom", void 0);
    return Component;
}(utils_1.SpeakeasyBase));
exports.Component = Component;
