"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import playerhole as shared_playerhole
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PlayerRound:
    
    back_nine_start: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('BackNineStart'), 'exclude': lambda f: f is None }})  
    birdies: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Birdies'), 'exclude': lambda f: f is None }})  
    bogey_free: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('BogeyFree'), 'exclude': lambda f: f is None }})  
    bogeys: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Bogeys'), 'exclude': lambda f: f is None }})  
    bounce_back_count: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('BounceBackCount'), 'exclude': lambda f: f is None }})  
    consecutive_birdie_or_better_count: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ConsecutiveBirdieOrBetterCount'), 'exclude': lambda f: f is None }})  
    day: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Day'), 'exclude': lambda f: f is None }})  
    double_bogeys: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DoubleBogeys'), 'exclude': lambda f: f is None }})  
    double_eagles: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DoubleEagles'), 'exclude': lambda f: f is None }})  
    eagles: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Eagles'), 'exclude': lambda f: f is None }})  
    hole_in_ones: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('HoleInOnes'), 'exclude': lambda f: f is None }})  
    holes: Optional[list[shared_playerhole.PlayerHole]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Holes'), 'exclude': lambda f: f is None }})  
    includes_five_or_more_birdies_or_better: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('IncludesFiveOrMoreBirdiesOrBetter'), 'exclude': lambda f: f is None }})  
    includes_streak_of_five_birdies_or_better: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('IncludesStreakOfFiveBirdiesOrBetter'), 'exclude': lambda f: f is None }})  
    includes_streak_of_four_birdies_or_better: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('IncludesStreakOfFourBirdiesOrBetter'), 'exclude': lambda f: f is None }})  
    includes_streak_of_six_birdies_or_better: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('IncludesStreakOfSixBirdiesOrBetter'), 'exclude': lambda f: f is None }})  
    includes_streak_of_three_birdies_or_better: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('IncludesStreakOfThreeBirdiesOrBetter'), 'exclude': lambda f: f is None }})  
    longest_birdie_or_better_streak: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('LongestBirdieOrBetterStreak'), 'exclude': lambda f: f is None }})  
    number: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Number'), 'exclude': lambda f: f is None }})  
    par: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Par'), 'exclude': lambda f: f is None }})  
    pars: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Pars'), 'exclude': lambda f: f is None }})  
    player_round_id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PlayerRoundID'), 'exclude': lambda f: f is None }})  
    player_tournament_id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PlayerTournamentID'), 'exclude': lambda f: f is None }})  
    score: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Score'), 'exclude': lambda f: f is None }})  
    tee_time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TeeTime'), 'exclude': lambda f: f is None }})  
    triple_bogeys: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TripleBogeys'), 'exclude': lambda f: f is None }})  
    worse_than_double_bogey: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('WorseThanDoubleBogey'), 'exclude': lambda f: f is None }})  
    worse_than_triple_bogey: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('WorseThanTripleBogey'), 'exclude': lambda f: f is None }})  
    