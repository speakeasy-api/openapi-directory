"use strict";
/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AutoMLCandidate = void 0;
var utils_1 = require("../../../internal/utils");
var automlcandidatestep_1 = require("./automlcandidatestep");
var automlcontainerdefinition_1 = require("./automlcontainerdefinition");
var candidateproperties_1 = require("./candidateproperties");
var candidatestatusenum_1 = require("./candidatestatusenum");
var finalautomljobobjectivemetric_1 = require("./finalautomljobobjectivemetric");
var objectivestatusenum_1 = require("./objectivestatusenum");
var class_transformer_1 = require("class-transformer");
/**
 * Information about a candidate produced by an AutoML training job, including its status, steps, and other properties.
 */
var AutoMLCandidate = /** @class */ (function (_super) {
    __extends(AutoMLCandidate, _super);
    function AutoMLCandidate() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "CandidateName" }),
        __metadata("design:type", String)
    ], AutoMLCandidate.prototype, "candidateName", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "CandidateProperties" }),
        (0, class_transformer_1.Type)(function () { return candidateproperties_1.CandidateProperties; }),
        __metadata("design:type", candidateproperties_1.CandidateProperties)
    ], AutoMLCandidate.prototype, "candidateProperties", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "CandidateStatus" }),
        __metadata("design:type", String)
    ], AutoMLCandidate.prototype, "candidateStatus", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({ elemType: automlcandidatestep_1.AutoMLCandidateStep }),
        (0, class_transformer_1.Expose)({ name: "CandidateSteps" }),
        (0, class_transformer_1.Type)(function () { return automlcandidatestep_1.AutoMLCandidateStep; }),
        __metadata("design:type", Array)
    ], AutoMLCandidate.prototype, "candidateSteps", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "CreationTime" }),
        (0, class_transformer_1.Transform)(function (_a) {
            var value = _a.value;
            return new Date(value);
        }, { toClassOnly: true }),
        __metadata("design:type", Date)
    ], AutoMLCandidate.prototype, "creationTime", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "EndTime" }),
        (0, class_transformer_1.Transform)(function (_a) {
            var value = _a.value;
            return new Date(value);
        }, { toClassOnly: true }),
        __metadata("design:type", Date)
    ], AutoMLCandidate.prototype, "endTime", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "FailureReason" }),
        __metadata("design:type", String)
    ], AutoMLCandidate.prototype, "failureReason", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "FinalAutoMLJobObjectiveMetric" }),
        (0, class_transformer_1.Type)(function () { return finalautomljobobjectivemetric_1.FinalAutoMLJobObjectiveMetric; }),
        __metadata("design:type", finalautomljobobjectivemetric_1.FinalAutoMLJobObjectiveMetric)
    ], AutoMLCandidate.prototype, "finalAutoMLJobObjectiveMetric", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({ elemType: automlcontainerdefinition_1.AutoMLContainerDefinition, elemDepth: 2 }),
        (0, class_transformer_1.Expose)({ name: "InferenceContainerDefinitions" }),
        (0, class_transformer_1.Transform)(function (_a) {
            var value = _a.value;
            var obj = {};
            for (var key in value) {
                obj[key] = (0, utils_1.objectToClass)(value[key], automlcontainerdefinition_1.AutoMLContainerDefinition);
            }
            return obj;
        }, { toClassOnly: true }),
        __metadata("design:type", Object)
    ], AutoMLCandidate.prototype, "inferenceContainerDefinitions", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({ elemType: automlcontainerdefinition_1.AutoMLContainerDefinition }),
        (0, class_transformer_1.Expose)({ name: "InferenceContainers" }),
        (0, class_transformer_1.Type)(function () { return automlcontainerdefinition_1.AutoMLContainerDefinition; }),
        __metadata("design:type", Array)
    ], AutoMLCandidate.prototype, "inferenceContainers", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "LastModifiedTime" }),
        (0, class_transformer_1.Transform)(function (_a) {
            var value = _a.value;
            return new Date(value);
        }, { toClassOnly: true }),
        __metadata("design:type", Date)
    ], AutoMLCandidate.prototype, "lastModifiedTime", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "ObjectiveStatus" }),
        __metadata("design:type", String)
    ], AutoMLCandidate.prototype, "objectiveStatus", void 0);
    return AutoMLCandidate;
}(utils_1.SpeakeasyBase));
exports.AutoMLCandidate = AutoMLCandidate;
