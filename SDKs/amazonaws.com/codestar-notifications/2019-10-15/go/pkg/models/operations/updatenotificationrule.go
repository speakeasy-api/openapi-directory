// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// UpdateNotificationRuleRequestBodyDetailTypeEnum - The level of detail to include in the notifications for this resource. BASIC will include only the contents of the event as it would appear in Amazon CloudWatch. FULL will include any supplemental information provided by AWS CodeStar Notifications and/or the service for the resource for which the notification is created.
type UpdateNotificationRuleRequestBodyDetailTypeEnum string

const (
	UpdateNotificationRuleRequestBodyDetailTypeEnumBasic UpdateNotificationRuleRequestBodyDetailTypeEnum = "BASIC"
	UpdateNotificationRuleRequestBodyDetailTypeEnumFull  UpdateNotificationRuleRequestBodyDetailTypeEnum = "FULL"
)

func (e UpdateNotificationRuleRequestBodyDetailTypeEnum) ToPointer() *UpdateNotificationRuleRequestBodyDetailTypeEnum {
	return &e
}

func (e *UpdateNotificationRuleRequestBodyDetailTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "BASIC":
		fallthrough
	case "FULL":
		*e = UpdateNotificationRuleRequestBodyDetailTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateNotificationRuleRequestBodyDetailTypeEnum: %v", v)
	}
}

// UpdateNotificationRuleRequestBodyStatusEnum - The status of the notification rule. Valid statuses include enabled (sending notifications) or disabled (not sending notifications).
type UpdateNotificationRuleRequestBodyStatusEnum string

const (
	UpdateNotificationRuleRequestBodyStatusEnumEnabled  UpdateNotificationRuleRequestBodyStatusEnum = "ENABLED"
	UpdateNotificationRuleRequestBodyStatusEnumDisabled UpdateNotificationRuleRequestBodyStatusEnum = "DISABLED"
)

func (e UpdateNotificationRuleRequestBodyStatusEnum) ToPointer() *UpdateNotificationRuleRequestBodyStatusEnum {
	return &e
}

func (e *UpdateNotificationRuleRequestBodyStatusEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ENABLED":
		fallthrough
	case "DISABLED":
		*e = UpdateNotificationRuleRequestBodyStatusEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateNotificationRuleRequestBodyStatusEnum: %v", v)
	}
}

type UpdateNotificationRuleRequestBody struct {
	// The Amazon Resource Name (ARN) of the notification rule.
	Arn string `json:"Arn"`
	// The level of detail to include in the notifications for this resource. BASIC will include only the contents of the event as it would appear in Amazon CloudWatch. FULL will include any supplemental information provided by AWS CodeStar Notifications and/or the service for the resource for which the notification is created.
	DetailType *UpdateNotificationRuleRequestBodyDetailTypeEnum `json:"DetailType,omitempty"`
	// A list of event types associated with this notification rule. For a complete list of event types and IDs, see <a href="https://docs.aws.amazon.com/codestar-notifications/latest/userguide/concepts.html#concepts-api">Notification concepts</a> in the <i>Developer Tools Console User Guide</i>.
	EventTypeIds []string `json:"EventTypeIds,omitempty"`
	// The name of the notification rule.
	Name *string `json:"Name,omitempty"`
	// The status of the notification rule. Valid statuses include enabled (sending notifications) or disabled (not sending notifications).
	Status *UpdateNotificationRuleRequestBodyStatusEnum `json:"Status,omitempty"`
	// The address and type of the targets to receive notifications from this notification rule.
	Targets []shared.Target `json:"Targets,omitempty"`
}

type UpdateNotificationRuleRequest struct {
	RequestBody       UpdateNotificationRuleRequestBody `request:"mediaType=application/json"`
	XAmzAlgorithm     *string                           `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string                           `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string                           `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string                           `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string                           `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string                           `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string                           `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
}

type UpdateNotificationRuleResponse struct {
	// ConfigurationException
	ConfigurationException interface{}
	ContentType            string
	StatusCode             int
	RawResponse            *http.Response
	// ResourceNotFoundException
	ResourceNotFoundException interface{}
	// Success
	UpdateNotificationRuleResult map[string]interface{}
	// ValidationException
	ValidationException interface{}
}
