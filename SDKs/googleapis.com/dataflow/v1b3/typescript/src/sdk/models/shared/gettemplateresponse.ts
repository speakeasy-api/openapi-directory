/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { RuntimeMetadata } from "./runtimemetadata";
import { Status } from "./status";
import { TemplateMetadata } from "./templatemetadata";
import { Expose, Type } from "class-transformer";

/**
 * Template Type.
 */
export enum GetTemplateResponseTemplateTypeEnum {
  Unknown = "UNKNOWN",
  Legacy = "LEGACY",
  Flex = "FLEX",
}

/**
 * The response to a GetTemplate request.
 */
export class GetTemplateResponse extends SpeakeasyBase {
  /**
   * Metadata describing a template.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "metadata" })
  @Type(() => TemplateMetadata)
  metadata?: TemplateMetadata;

  /**
   * RuntimeMetadata describing a runtime environment.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "runtimeMetadata" })
  @Type(() => RuntimeMetadata)
  runtimeMetadata?: RuntimeMetadata;

  /**
   * The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).
   */
  @SpeakeasyMetadata()
  @Expose({ name: "status" })
  @Type(() => Status)
  status?: Status;

  /**
   * Template Type.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "templateType" })
  templateType?: GetTemplateResponseTemplateTypeEnum;
}
