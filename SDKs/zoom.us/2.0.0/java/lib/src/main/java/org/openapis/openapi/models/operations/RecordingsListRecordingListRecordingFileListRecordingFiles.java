/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * RecordingsListRecordingListRecordingFileListRecordingFiles - Recording file object.
 */
public class RecordingsListRecordingListRecordingFileListRecordingFiles {
    /**
     * The time at which recording was deleted. Returned in the response only for trash query.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("deleted_time")
    public String deletedTime;
    public RecordingsListRecordingListRecordingFileListRecordingFiles withDeletedTime(String deletedTime) {
        this.deletedTime = deletedTime;
        return this;
    }
    
    /**
     * The URL using which the recording file can be downloaded. **To access a private or password protected cloud recording of a user in your account, you can use a [Zoom JWT App Type](https://marketplace.zoom.us/docs/guides/getting-started/app-types/create-jwt-app). Use the generated JWT token as the value of the `access_token` query parameter and include this query parameter at the end of the URL as shown in the example.**  
     * &lt;br&gt;
     * Example: `https://api.zoom.us/recording/download/{{ Download Path }}?access_token={{ JWT Token }}`
     * 
     * **Similarly, if the user has installed your OAuth app that contains recording scope(s), you can also use the user's [OAuth access token](https://marketplace.zoom.us/docs/guides/auth/oauth) to download the Cloud Recording.**&lt;br&gt;
     * 
     * Example: `https://api.zoom.us/recording/download/{{ Download Path }}?access_token={{ OAuth Access Token }}`
     * 
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("download_url")
    public String downloadUrl;
    public RecordingsListRecordingListRecordingFileListRecordingFiles withDownloadUrl(String downloadUrl) {
        this.downloadUrl = downloadUrl;
        return this;
    }
    
    /**
     * The recording file size.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("file_size")
    public Double fileSize;
    public RecordingsListRecordingListRecordingFileListRecordingFiles withFileSize(Double fileSize) {
        this.fileSize = fileSize;
        return this;
    }
    
    /**
     * The recording file type. The value of this field could be one of the following:&lt;br&gt;
     * `MP4`: Video file of the recording.&lt;br&gt;`M4A` Audio-only file of the recording.&lt;br&gt;`TIMELINE`: Timestamp file of the recording in JSON file format. To get a timeline file, the "Add a timestamp to the recording" setting must be enabled in the [recording settings](https://support.zoom.us/hc/en-us/articles/203741855-Cloud-recording#h_3f14c3a4-d16b-4a3c-bbe5-ef7d24500048). The time will display in the host's timezone, set on their Zoom profile.
     * &lt;br&gt; `TRANSCRIPT`: Transcription file of the recording in VTT format.&lt;br&gt; `CHAT`: A TXT file containing in-meeting chat messages that were sent during the meeting.&lt;br&gt;`CC`: File containing closed captions of the recording in VTT file format.&lt;br&gt;`CSV`: File containing polling data in csv format.
     * 
     * &lt;br&gt;
     * 
     * A recording file object with file type of either `CC` or `TIMELINE` **does not have** the following properties:&lt;br&gt;
     * 	`id`, `status`, `file_size`, `recording_type`, and `play_url`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("file_type")
    public String fileType;
    public RecordingsListRecordingListRecordingFileListRecordingFiles withFileType(String fileType) {
        this.fileType = fileType;
        return this;
    }
    
    /**
     * The recording file ID. Included in the response of general query.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    public String id;
    public RecordingsListRecordingListRecordingFileListRecordingFiles withId(String id) {
        this.id = id;
        return this;
    }
    
    /**
     * The meeting ID. 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("meeting_id")
    public String meetingId;
    public RecordingsListRecordingListRecordingFileListRecordingFiles withMeetingId(String meetingId) {
        this.meetingId = meetingId;
        return this;
    }
    
    /**
     * The URL using which a recording file can be played.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("play_url")
    public String playUrl;
    public RecordingsListRecordingListRecordingFileListRecordingFiles withPlayUrl(String playUrl) {
        this.playUrl = playUrl;
        return this;
    }
    
    /**
     * The recording end time. Response in general query.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("recording_end")
    public String recordingEnd;
    public RecordingsListRecordingListRecordingFileListRecordingFiles withRecordingEnd(String recordingEnd) {
        this.recordingEnd = recordingEnd;
        return this;
    }
    
    /**
     * The recording start time.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("recording_start")
    public String recordingStart;
    public RecordingsListRecordingListRecordingFileListRecordingFiles withRecordingStart(String recordingStart) {
        this.recordingStart = recordingStart;
        return this;
    }
    
    /**
     * The recording type. The value of this field can be one of the following:&lt;br&gt;`shared_screen_with_speaker_view(CC)`&lt;br&gt;`shared_screen_with_speaker_view`&lt;br&gt;`shared_screen_with_gallery_view`&lt;br&gt;`speaker_view`&lt;br&gt;`gallery_view`&lt;br&gt;`shared_screen`&lt;br&gt;`audio_only`&lt;br&gt;`audio_transcript`&lt;br&gt;`chat_file`&lt;br&gt;`active_speaker`&lt;br&gt;`poll`
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("recording_type")
    public String recordingType;
    public RecordingsListRecordingListRecordingFileListRecordingFiles withRecordingType(String recordingType) {
        this.recordingType = recordingType;
        return this;
    }
    
    /**
     * The recording status.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("status")
    public RecordingsListRecordingListRecordingFileListRecordingFilesStatusEnum status;
    public RecordingsListRecordingListRecordingFileListRecordingFiles withStatus(RecordingsListRecordingListRecordingFileListRecordingFilesStatusEnum status) {
        this.status = status;
        return this;
    }
    
}
