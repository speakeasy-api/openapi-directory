// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type UploadVideoAlt1RequestBodyEmbedButtons struct {
	// Show or hide the Embed button.
	Embed *bool `json:"embed,omitempty"`
	// Show or hide the Fullscreen button.
	Fullscreen *bool `json:"fullscreen,omitempty"`
	// Show or hide the HD button.
	Hd *bool `json:"hd,omitempty"`
	// Show or hide the Like button.
	Like *bool `json:"like,omitempty"`
	// Show or hide the Scaling button (shown only in Fullscreen mode).
	Scaling *bool `json:"scaling,omitempty"`
	// Show or hide the Share button.
	Share *bool `json:"share,omitempty"`
	// Show or hide the Watch Later button.
	Watchlater *bool `json:"watchlater,omitempty"`
}

type UploadVideoAlt1RequestBodyEmbedLogosCustom struct {
	// Show or hide your custom logo.
	Active *bool `json:"active,omitempty"`
	// The URL that loads when the user clicks your custom logo.
	Link *string `json:"link,omitempty"`
	// Whether always to show the custom logo or to hide it after time with the rest of the UI.
	Sticky *bool `json:"sticky,omitempty"`
}

type UploadVideoAlt1RequestBodyEmbedLogos struct {
	Custom *UploadVideoAlt1RequestBodyEmbedLogosCustom `json:"custom,omitempty"`
	// Show or hide the Vimeo logo.
	Vimeo *bool `json:"vimeo,omitempty"`
}

// UploadVideoAlt1RequestBodyEmbedTitleNameEnum - Show or hide the video title, or enable the user to determine whether the video title appears.
type UploadVideoAlt1RequestBodyEmbedTitleNameEnum string

const (
	UploadVideoAlt1RequestBodyEmbedTitleNameEnumHide UploadVideoAlt1RequestBodyEmbedTitleNameEnum = "hide"
	UploadVideoAlt1RequestBodyEmbedTitleNameEnumShow UploadVideoAlt1RequestBodyEmbedTitleNameEnum = "show"
	UploadVideoAlt1RequestBodyEmbedTitleNameEnumUser UploadVideoAlt1RequestBodyEmbedTitleNameEnum = "user"
)

func (e *UploadVideoAlt1RequestBodyEmbedTitleNameEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "hide":
		fallthrough
	case "show":
		fallthrough
	case "user":
		*e = UploadVideoAlt1RequestBodyEmbedTitleNameEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UploadVideoAlt1RequestBodyEmbedTitleNameEnum: %s", s)
	}
}

// UploadVideoAlt1RequestBodyEmbedTitleOwnerEnum - Show or hide the owner information, or enable the user to determine whether the owner information appears.
type UploadVideoAlt1RequestBodyEmbedTitleOwnerEnum string

const (
	UploadVideoAlt1RequestBodyEmbedTitleOwnerEnumHide UploadVideoAlt1RequestBodyEmbedTitleOwnerEnum = "hide"
	UploadVideoAlt1RequestBodyEmbedTitleOwnerEnumShow UploadVideoAlt1RequestBodyEmbedTitleOwnerEnum = "show"
	UploadVideoAlt1RequestBodyEmbedTitleOwnerEnumUser UploadVideoAlt1RequestBodyEmbedTitleOwnerEnum = "user"
)

func (e *UploadVideoAlt1RequestBodyEmbedTitleOwnerEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "hide":
		fallthrough
	case "show":
		fallthrough
	case "user":
		*e = UploadVideoAlt1RequestBodyEmbedTitleOwnerEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UploadVideoAlt1RequestBodyEmbedTitleOwnerEnum: %s", s)
	}
}

// UploadVideoAlt1RequestBodyEmbedTitlePortraitEnum - Show or hide the owner portrait, or enable the user to determine whether the owner portrait appears.
type UploadVideoAlt1RequestBodyEmbedTitlePortraitEnum string

const (
	UploadVideoAlt1RequestBodyEmbedTitlePortraitEnumHide UploadVideoAlt1RequestBodyEmbedTitlePortraitEnum = "hide"
	UploadVideoAlt1RequestBodyEmbedTitlePortraitEnumShow UploadVideoAlt1RequestBodyEmbedTitlePortraitEnum = "show"
	UploadVideoAlt1RequestBodyEmbedTitlePortraitEnumUser UploadVideoAlt1RequestBodyEmbedTitlePortraitEnum = "user"
)

func (e *UploadVideoAlt1RequestBodyEmbedTitlePortraitEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "hide":
		fallthrough
	case "show":
		fallthrough
	case "user":
		*e = UploadVideoAlt1RequestBodyEmbedTitlePortraitEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UploadVideoAlt1RequestBodyEmbedTitlePortraitEnum: %s", s)
	}
}

type UploadVideoAlt1RequestBodyEmbedTitle struct {
	// Show or hide the video title, or enable the user to determine whether the video title appears.
	Name *UploadVideoAlt1RequestBodyEmbedTitleNameEnum `json:"name,omitempty"`
	// Show or hide the owner information, or enable the user to determine whether the owner information appears.
	Owner *UploadVideoAlt1RequestBodyEmbedTitleOwnerEnum `json:"owner,omitempty"`
	// Show or hide the owner portrait, or enable the user to determine whether the owner portrait appears.
	Portrait *UploadVideoAlt1RequestBodyEmbedTitlePortraitEnum `json:"portrait,omitempty"`
}

type UploadVideoAlt1RequestBodyEmbed struct {
	Buttons *UploadVideoAlt1RequestBodyEmbedButtons `json:"buttons,omitempty"`
	// The main color of the embed player.
	Color *string                               `json:"color,omitempty"`
	Logos *UploadVideoAlt1RequestBodyEmbedLogos `json:"logos,omitempty"`
	// Show or hide the playbar.
	Playbar *bool                                 `json:"playbar,omitempty"`
	Title   *UploadVideoAlt1RequestBodyEmbedTitle `json:"title,omitempty"`
	// Show or hide the volume selector.
	Volume *bool `json:"volume,omitempty"`
}

// UploadVideoAlt1RequestBodyLicenseEnum - The Creative Commons license.
type UploadVideoAlt1RequestBodyLicenseEnum string

const (
	UploadVideoAlt1RequestBodyLicenseEnumBy     UploadVideoAlt1RequestBodyLicenseEnum = "by"
	UploadVideoAlt1RequestBodyLicenseEnumByNc   UploadVideoAlt1RequestBodyLicenseEnum = "by-nc"
	UploadVideoAlt1RequestBodyLicenseEnumByNcNd UploadVideoAlt1RequestBodyLicenseEnum = "by-nc-nd"
	UploadVideoAlt1RequestBodyLicenseEnumByNcSa UploadVideoAlt1RequestBodyLicenseEnum = "by-nc-sa"
	UploadVideoAlt1RequestBodyLicenseEnumByNd   UploadVideoAlt1RequestBodyLicenseEnum = "by-nd"
	UploadVideoAlt1RequestBodyLicenseEnumBySa   UploadVideoAlt1RequestBodyLicenseEnum = "by-sa"
	UploadVideoAlt1RequestBodyLicenseEnumCc0    UploadVideoAlt1RequestBodyLicenseEnum = "cc0"
)

func (e *UploadVideoAlt1RequestBodyLicenseEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "by":
		fallthrough
	case "by-nc":
		fallthrough
	case "by-nc-nd":
		fallthrough
	case "by-nc-sa":
		fallthrough
	case "by-nd":
		fallthrough
	case "by-sa":
		fallthrough
	case "cc0":
		*e = UploadVideoAlt1RequestBodyLicenseEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UploadVideoAlt1RequestBodyLicenseEnum: %s", s)
	}
}

// UploadVideoAlt1RequestBodyPrivacyCommentsEnum - The privacy level required to comment on the video.
type UploadVideoAlt1RequestBodyPrivacyCommentsEnum string

const (
	UploadVideoAlt1RequestBodyPrivacyCommentsEnumAnybody  UploadVideoAlt1RequestBodyPrivacyCommentsEnum = "anybody"
	UploadVideoAlt1RequestBodyPrivacyCommentsEnumContacts UploadVideoAlt1RequestBodyPrivacyCommentsEnum = "contacts"
	UploadVideoAlt1RequestBodyPrivacyCommentsEnumNobody   UploadVideoAlt1RequestBodyPrivacyCommentsEnum = "nobody"
)

func (e *UploadVideoAlt1RequestBodyPrivacyCommentsEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "anybody":
		fallthrough
	case "contacts":
		fallthrough
	case "nobody":
		*e = UploadVideoAlt1RequestBodyPrivacyCommentsEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UploadVideoAlt1RequestBodyPrivacyCommentsEnum: %s", s)
	}
}

// UploadVideoAlt1RequestBodyPrivacyEmbedEnum - The video's embed settings. The `whitelist` value enables you to define all valid embed domains. See our [documentation](https://developer.vimeo.com/api/endpoints/videos#/{video_id}/privacy/domains) for details on adding and removing domains.
type UploadVideoAlt1RequestBodyPrivacyEmbedEnum string

const (
	UploadVideoAlt1RequestBodyPrivacyEmbedEnumPrivate   UploadVideoAlt1RequestBodyPrivacyEmbedEnum = "private"
	UploadVideoAlt1RequestBodyPrivacyEmbedEnumPublic    UploadVideoAlt1RequestBodyPrivacyEmbedEnum = "public"
	UploadVideoAlt1RequestBodyPrivacyEmbedEnumWhitelist UploadVideoAlt1RequestBodyPrivacyEmbedEnum = "whitelist"
)

func (e *UploadVideoAlt1RequestBodyPrivacyEmbedEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "private":
		fallthrough
	case "public":
		fallthrough
	case "whitelist":
		*e = UploadVideoAlt1RequestBodyPrivacyEmbedEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UploadVideoAlt1RequestBodyPrivacyEmbedEnum: %s", s)
	}
}

// UploadVideoAlt1RequestBodyPrivacyViewEnum - The video's privacy setting. When privacy is `users`, `application/json` is the only valid content type. Basic users can't set privacy to `unlisted`.
type UploadVideoAlt1RequestBodyPrivacyViewEnum string

const (
	UploadVideoAlt1RequestBodyPrivacyViewEnumAnybody  UploadVideoAlt1RequestBodyPrivacyViewEnum = "anybody"
	UploadVideoAlt1RequestBodyPrivacyViewEnumContacts UploadVideoAlt1RequestBodyPrivacyViewEnum = "contacts"
	UploadVideoAlt1RequestBodyPrivacyViewEnumDisable  UploadVideoAlt1RequestBodyPrivacyViewEnum = "disable"
	UploadVideoAlt1RequestBodyPrivacyViewEnumNobody   UploadVideoAlt1RequestBodyPrivacyViewEnum = "nobody"
	UploadVideoAlt1RequestBodyPrivacyViewEnumPassword UploadVideoAlt1RequestBodyPrivacyViewEnum = "password"
	UploadVideoAlt1RequestBodyPrivacyViewEnumUnlisted UploadVideoAlt1RequestBodyPrivacyViewEnum = "unlisted"
	UploadVideoAlt1RequestBodyPrivacyViewEnumUsers    UploadVideoAlt1RequestBodyPrivacyViewEnum = "users"
)

func (e *UploadVideoAlt1RequestBodyPrivacyViewEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "anybody":
		fallthrough
	case "contacts":
		fallthrough
	case "disable":
		fallthrough
	case "nobody":
		fallthrough
	case "password":
		fallthrough
	case "unlisted":
		fallthrough
	case "users":
		*e = UploadVideoAlt1RequestBodyPrivacyViewEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UploadVideoAlt1RequestBodyPrivacyViewEnum: %s", s)
	}
}

type UploadVideoAlt1RequestBodyPrivacy struct {
	// Whether a user can add the video to an album, channel, or group.
	Add *bool `json:"add,omitempty"`
	// The privacy level required to comment on the video.
	Comments *UploadVideoAlt1RequestBodyPrivacyCommentsEnum `json:"comments,omitempty"`
	// Whether a user can download the video. Not available to users with a Basic membership
	Download *bool `json:"download,omitempty"`
	// The video's embed settings. The `whitelist` value enables you to define all valid embed domains. See our [documentation](https://developer.vimeo.com/api/endpoints/videos#/{video_id}/privacy/domains) for details on adding and removing domains.
	Embed *UploadVideoAlt1RequestBodyPrivacyEmbedEnum `json:"embed,omitempty"`
	// The video's privacy setting. When privacy is `users`, `application/json` is the only valid content type. Basic users can't set privacy to `unlisted`.
	View *UploadVideoAlt1RequestBodyPrivacyViewEnum `json:"view,omitempty"`
}

// UploadVideoAlt1RequestBodyRatingsMpaaReasonEnum - The reason for the video's MPAA rating.
//
// Option descriptions:
//   - `at` - Adult themes
//   - `bn` - Brief nudity
//   - `n` - Nudity
//   - `sl` - Strong language
//   - `ss` - Sexual situations
//   - `v` - Violence
type UploadVideoAlt1RequestBodyRatingsMpaaReasonEnum string

const (
	UploadVideoAlt1RequestBodyRatingsMpaaReasonEnumAt UploadVideoAlt1RequestBodyRatingsMpaaReasonEnum = "at"
	UploadVideoAlt1RequestBodyRatingsMpaaReasonEnumBn UploadVideoAlt1RequestBodyRatingsMpaaReasonEnum = "bn"
	UploadVideoAlt1RequestBodyRatingsMpaaReasonEnumN  UploadVideoAlt1RequestBodyRatingsMpaaReasonEnum = "n"
	UploadVideoAlt1RequestBodyRatingsMpaaReasonEnumSl UploadVideoAlt1RequestBodyRatingsMpaaReasonEnum = "sl"
	UploadVideoAlt1RequestBodyRatingsMpaaReasonEnumSs UploadVideoAlt1RequestBodyRatingsMpaaReasonEnum = "ss"
	UploadVideoAlt1RequestBodyRatingsMpaaReasonEnumV  UploadVideoAlt1RequestBodyRatingsMpaaReasonEnum = "v"
)

func (e *UploadVideoAlt1RequestBodyRatingsMpaaReasonEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "at":
		fallthrough
	case "bn":
		fallthrough
	case "n":
		fallthrough
	case "sl":
		fallthrough
	case "ss":
		fallthrough
	case "v":
		*e = UploadVideoAlt1RequestBodyRatingsMpaaReasonEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UploadVideoAlt1RequestBodyRatingsMpaaReasonEnum: %s", s)
	}
}

type UploadVideoAlt1RequestBodyRatingsMpaa struct {
	// The reason for the video's MPAA rating.
	//
	// Option descriptions:
	//  * `at` - Adult themes
	//  * `bn` - Brief nudity
	//  * `n` - Nudity
	//  * `sl` - Strong language
	//  * `ss` - Sexual situations
	//  * `v` - Violence
	//
	Reason *UploadVideoAlt1RequestBodyRatingsMpaaReasonEnum `json:"reason,omitempty"`
}

// UploadVideoAlt1RequestBodyRatingsTvReasonEnum - The reason for the video's TV rating.
//
// Option descriptions:
//   - `d` - Suggestive dialogue
//   - `fv` - Fantasy violence
//   - `l` - Language
//   - `ss` - Sexual situations
//   - `v` - Violence
type UploadVideoAlt1RequestBodyRatingsTvReasonEnum string

const (
	UploadVideoAlt1RequestBodyRatingsTvReasonEnumD  UploadVideoAlt1RequestBodyRatingsTvReasonEnum = "d"
	UploadVideoAlt1RequestBodyRatingsTvReasonEnumFv UploadVideoAlt1RequestBodyRatingsTvReasonEnum = "fv"
	UploadVideoAlt1RequestBodyRatingsTvReasonEnumL  UploadVideoAlt1RequestBodyRatingsTvReasonEnum = "l"
	UploadVideoAlt1RequestBodyRatingsTvReasonEnumSs UploadVideoAlt1RequestBodyRatingsTvReasonEnum = "ss"
	UploadVideoAlt1RequestBodyRatingsTvReasonEnumV  UploadVideoAlt1RequestBodyRatingsTvReasonEnum = "v"
)

func (e *UploadVideoAlt1RequestBodyRatingsTvReasonEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "d":
		fallthrough
	case "fv":
		fallthrough
	case "l":
		fallthrough
	case "ss":
		fallthrough
	case "v":
		*e = UploadVideoAlt1RequestBodyRatingsTvReasonEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UploadVideoAlt1RequestBodyRatingsTvReasonEnum: %s", s)
	}
}

type UploadVideoAlt1RequestBodyRatingsTv struct {
	// The reason for the video's TV rating.
	//
	// Option descriptions:
	//  * `d` - Suggestive dialogue
	//  * `fv` - Fantasy violence
	//  * `l` - Language
	//  * `ss` - Sexual situations
	//  * `v` - Violence
	//
	Reason *UploadVideoAlt1RequestBodyRatingsTvReasonEnum `json:"reason,omitempty"`
}

type UploadVideoAlt1RequestBodyRatings struct {
	Mpaa *UploadVideoAlt1RequestBodyRatingsMpaa `json:"mpaa,omitempty"`
	Tv   *UploadVideoAlt1RequestBodyRatingsTv   `json:"tv,omitempty"`
}

type UploadVideoAlt1RequestBodyReviewPage struct {
	// Enable or disable video review.
	Active *bool `json:"active,omitempty"`
}

type UploadVideoAlt1RequestBodySpatialDirectorTimeline struct {
	// The timeline pitch. This value must be between -90 and 90.
	Pitch float64 `json:"pitch"`
	// The timeline roll.
	Roll *float64 `json:"roll,omitempty"`
	// The 360 director timeline time code.
	TimeCode float64 `json:"time_code"`
	// The timeline yaw. This value must be between 0 and 360.
	Yaw float64 `json:"yaw"`
}

// UploadVideoAlt1RequestBodySpatialProjectionEnum - The 360 spatial projection.
type UploadVideoAlt1RequestBodySpatialProjectionEnum string

const (
	UploadVideoAlt1RequestBodySpatialProjectionEnumCubical         UploadVideoAlt1RequestBodySpatialProjectionEnum = "cubical"
	UploadVideoAlt1RequestBodySpatialProjectionEnumCylindrical     UploadVideoAlt1RequestBodySpatialProjectionEnum = "cylindrical"
	UploadVideoAlt1RequestBodySpatialProjectionEnumDome            UploadVideoAlt1RequestBodySpatialProjectionEnum = "dome"
	UploadVideoAlt1RequestBodySpatialProjectionEnumEquirectangular UploadVideoAlt1RequestBodySpatialProjectionEnum = "equirectangular"
	UploadVideoAlt1RequestBodySpatialProjectionEnumPyramid         UploadVideoAlt1RequestBodySpatialProjectionEnum = "pyramid"
)

func (e *UploadVideoAlt1RequestBodySpatialProjectionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "cubical":
		fallthrough
	case "cylindrical":
		fallthrough
	case "dome":
		fallthrough
	case "equirectangular":
		fallthrough
	case "pyramid":
		*e = UploadVideoAlt1RequestBodySpatialProjectionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UploadVideoAlt1RequestBodySpatialProjectionEnum: %s", s)
	}
}

// UploadVideoAlt1RequestBodySpatialStereoFormatEnum - The 360 spatial stereo format.
type UploadVideoAlt1RequestBodySpatialStereoFormatEnum string

const (
	UploadVideoAlt1RequestBodySpatialStereoFormatEnumLeftRight UploadVideoAlt1RequestBodySpatialStereoFormatEnum = "left-right"
	UploadVideoAlt1RequestBodySpatialStereoFormatEnumMono      UploadVideoAlt1RequestBodySpatialStereoFormatEnum = "mono"
	UploadVideoAlt1RequestBodySpatialStereoFormatEnumTopBottom UploadVideoAlt1RequestBodySpatialStereoFormatEnum = "top-bottom"
)

func (e *UploadVideoAlt1RequestBodySpatialStereoFormatEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "left-right":
		fallthrough
	case "mono":
		fallthrough
	case "top-bottom":
		*e = UploadVideoAlt1RequestBodySpatialStereoFormatEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UploadVideoAlt1RequestBodySpatialStereoFormatEnum: %s", s)
	}
}

type UploadVideoAlt1RequestBodySpatial struct {
	// The 360 director timeline.
	DirectorTimeline []UploadVideoAlt1RequestBodySpatialDirectorTimeline `json:"director_timeline,omitempty"`
	// The 360 field of view: default 50, minimum 30, maximum 90.
	FieldOfView *float64 `json:"field_of_view,omitempty"`
	// The 360 spatial projection.
	Projection *UploadVideoAlt1RequestBodySpatialProjectionEnum `json:"projection,omitempty"`
	// The 360 spatial stereo format.
	StereoFormat *UploadVideoAlt1RequestBodySpatialStereoFormatEnum `json:"stereo_format,omitempty"`
}

// UploadVideoAlt1RequestBodyUploadApproachEnum - The upload approach.
type UploadVideoAlt1RequestBodyUploadApproachEnum string

const (
	UploadVideoAlt1RequestBodyUploadApproachEnumPost      UploadVideoAlt1RequestBodyUploadApproachEnum = "post"
	UploadVideoAlt1RequestBodyUploadApproachEnumPull      UploadVideoAlt1RequestBodyUploadApproachEnum = "pull"
	UploadVideoAlt1RequestBodyUploadApproachEnumStreaming UploadVideoAlt1RequestBodyUploadApproachEnum = "streaming"
	UploadVideoAlt1RequestBodyUploadApproachEnumTus       UploadVideoAlt1RequestBodyUploadApproachEnum = "tus"
)

func (e *UploadVideoAlt1RequestBodyUploadApproachEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "post":
		fallthrough
	case "pull":
		fallthrough
	case "streaming":
		fallthrough
	case "tus":
		*e = UploadVideoAlt1RequestBodyUploadApproachEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UploadVideoAlt1RequestBodyUploadApproachEnum: %s", s)
	}
}

type UploadVideoAlt1RequestBodyUpload struct {
	// The upload approach.
	Approach UploadVideoAlt1RequestBodyUploadApproachEnum `json:"approach"`
	// The public URL at which the video is hosted. The URL must be valid for at least 24 hours. Use this parameter when `approach` is `pull`.
	Link *string `json:"link,omitempty"`
	// The app's redirect URL. Use this parameter when `approach` is `post`.
	RedirectURL *string `json:"redirect_url,omitempty"`
	// The size in bytes of the video to upload.
	Size *string `json:"size,omitempty"`
}

type UploadVideoAlt1RequestBody struct {
	// A list of values describing the content in this video. Find the full list in the [/contentratings](https://developer.vimeo.com/api/endpoints/videos#GET/contentratings) endpoint.
	ContentRating []string `json:"content_rating,omitempty"`
	// The description of the video.
	Description *string                          `json:"description,omitempty"`
	Embed       *UploadVideoAlt1RequestBodyEmbed `json:"embed,omitempty"`
	// The Creative Commons license.
	License *UploadVideoAlt1RequestBodyLicenseEnum `json:"license,omitempty"`
	// The video's default language. For a full list of valid languages, use the [/languages?filter=texttracks](https://developer.vimeo.com/api/endpoints/videos#GET/languages) endpoint.
	Locale *string `json:"locale,omitempty"`
	// The title of the video.
	Name *string `json:"name,omitempty"`
	// The password. When you set `privacy.view` to `password`, you must provide the password as an additional parameter.
	Password   *string                               `json:"password,omitempty"`
	Privacy    *UploadVideoAlt1RequestBodyPrivacy    `json:"privacy,omitempty"`
	Ratings    *UploadVideoAlt1RequestBodyRatings    `json:"ratings,omitempty"`
	ReviewPage *UploadVideoAlt1RequestBodyReviewPage `json:"review_page,omitempty"`
	Spatial    *UploadVideoAlt1RequestBodySpatial    `json:"spatial,omitempty"`
	Upload     UploadVideoAlt1RequestBodyUpload      `json:"upload"`
}

type UploadVideoAlt1Request struct {
	Request UploadVideoAlt1RequestBody `request:"mediaType=application/vnd.vimeo.video+json"`
}

type UploadVideoAlt1Response struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// * Error code 2205: The body of the request isn't formatted properly.
	// * Error code 2204: The request contains invalid parameters.
	// * Error code 2204: The request contains invalid body parameters.
	// * Error code 2230: The upload type is invalid.
	// * Error code 3116: If a `type` payload parameter was supplied instead of `upload.approach`.
	Error *shared.Error
	// The upload procedure has begun.
	Video *shared.Video
}
