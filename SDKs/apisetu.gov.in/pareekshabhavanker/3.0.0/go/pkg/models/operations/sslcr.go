// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type SslcrSecurity struct {
	APIKey   string `security:"scheme,type=apiKey,subtype=header,name=X-APISETU-APIKEY"`
	ClientID string `security:"scheme,type=apiKey,subtype=header,name=X-APISETU-CLIENTID"`
}

type SslcrRequestBodyCertificateParameters struct {
	// Date of birth in DD-MM-YYYY format
	Dob string `json:"DOB"`
	// Full name
	FullName string `json:"FullName"`
	// Aadhaar number
	UID string `json:"UID"`
	// Register Number
	Regno string `json:"regno"`
	// Year
	Year string `json:"year"`
}

// SslcrRequestBodyFormatEnum - The format of the certificate in response.
type SslcrRequestBodyFormatEnum string

const (
	SslcrRequestBodyFormatEnumPdf SslcrRequestBodyFormatEnum = "pdf"
)

func (e *SslcrRequestBodyFormatEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "pdf":
		*e = SslcrRequestBodyFormatEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for SslcrRequestBodyFormatEnum: %s", s)
	}
}

// SslcrRequestBody - Request format
type SslcrRequestBody struct {
	CertificateParameters *SslcrRequestBodyCertificateParameters `json:"certificateParameters,omitempty"`
	ConsentArtifact       *shared.ConsentArtifactSchema          `json:"consentArtifact,omitempty"`
	// The format of the certificate in response.
	Format SslcrRequestBodyFormatEnum `json:"format"`
	// A unique transaction id for this request in UUID format. It is used for tracking the request.
	TxnID string `json:"txnId"`
}

type Sslcr504ApplicationJSONErrorEnum string

const (
	Sslcr504ApplicationJSONErrorEnumGatewayTimeout Sslcr504ApplicationJSONErrorEnum = "gateway_timeout"
)

func (e *Sslcr504ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "gateway_timeout":
		*e = Sslcr504ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Sslcr504ApplicationJSONErrorEnum: %s", s)
	}
}

type Sslcr504ApplicationJSONErrorDescriptionEnum string

const (
	Sslcr504ApplicationJSONErrorDescriptionEnumPublisherServiceDidNotRespondInTime Sslcr504ApplicationJSONErrorDescriptionEnum = "Publisher service did not respond in time"
)

func (e *Sslcr504ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Publisher service did not respond in time":
		*e = Sslcr504ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Sslcr504ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Sslcr504ApplicationJSON - Gateway timeout
type Sslcr504ApplicationJSON struct {
	Error            *Sslcr504ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Sslcr504ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Sslcr503ApplicationJSONErrorEnum string

const (
	Sslcr503ApplicationJSONErrorEnumServiceUnavailable Sslcr503ApplicationJSONErrorEnum = "service_unavailable"
)

func (e *Sslcr503ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "service_unavailable":
		*e = Sslcr503ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Sslcr503ApplicationJSONErrorEnum: %s", s)
	}
}

type Sslcr503ApplicationJSONErrorDescriptionEnum string

const (
	Sslcr503ApplicationJSONErrorDescriptionEnumPublisherServiceIsTemporarilyUnavailable Sslcr503ApplicationJSONErrorDescriptionEnum = "Publisher service is temporarily unavailable"
)

func (e *Sslcr503ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Publisher service is temporarily unavailable":
		*e = Sslcr503ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Sslcr503ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Sslcr503ApplicationJSON - Service unavailable
type Sslcr503ApplicationJSON struct {
	Error            *Sslcr503ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Sslcr503ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Sslcr502ApplicationJSONErrorEnum string

const (
	Sslcr502ApplicationJSONErrorEnumBadGatewy Sslcr502ApplicationJSONErrorEnum = "bad_gatewy"
)

func (e *Sslcr502ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "bad_gatewy":
		*e = Sslcr502ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Sslcr502ApplicationJSONErrorEnum: %s", s)
	}
}

type Sslcr502ApplicationJSONErrorDescriptionEnum string

const (
	Sslcr502ApplicationJSONErrorDescriptionEnumPublisherServiceReturnedAnInvalidResponse Sslcr502ApplicationJSONErrorDescriptionEnum = "Publisher service returned an invalid response"
)

func (e *Sslcr502ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Publisher service returned an invalid response":
		*e = Sslcr502ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Sslcr502ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Sslcr502ApplicationJSON - Bad gateway
type Sslcr502ApplicationJSON struct {
	Error            *Sslcr502ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Sslcr502ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Sslcr500ApplicationJSONErrorEnum string

const (
	Sslcr500ApplicationJSONErrorEnumInternalServerError Sslcr500ApplicationJSONErrorEnum = "internal_server_error"
)

func (e *Sslcr500ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "internal_server_error":
		*e = Sslcr500ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Sslcr500ApplicationJSONErrorEnum: %s", s)
	}
}

type Sslcr500ApplicationJSONErrorDescriptionEnum string

const (
	Sslcr500ApplicationJSONErrorDescriptionEnumInternalServerError Sslcr500ApplicationJSONErrorDescriptionEnum = "Internal server error"
)

func (e *Sslcr500ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Internal server error":
		*e = Sslcr500ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Sslcr500ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Sslcr500ApplicationJSON - Internal server error
type Sslcr500ApplicationJSON struct {
	Error            *Sslcr500ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Sslcr500ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Sslcr404ApplicationJSONErrorEnum string

const (
	Sslcr404ApplicationJSONErrorEnumRecordNotFound Sslcr404ApplicationJSONErrorEnum = "record_not_found"
	Sslcr404ApplicationJSONErrorEnumURLNotFound    Sslcr404ApplicationJSONErrorEnum = "url_not_found"
)

func (e *Sslcr404ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "record_not_found":
		fallthrough
	case "url_not_found":
		*e = Sslcr404ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Sslcr404ApplicationJSONErrorEnum: %s", s)
	}
}

type Sslcr404ApplicationJSONErrorDescriptionEnum string

const (
	Sslcr404ApplicationJSONErrorDescriptionEnumNoRecordFound               Sslcr404ApplicationJSONErrorDescriptionEnum = "No record found"
	Sslcr404ApplicationJSONErrorDescriptionEnumYourAPIURLOrPathIsIncorrect Sslcr404ApplicationJSONErrorDescriptionEnum = "Your API url or path is incorrect"
)

func (e *Sslcr404ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "No record found":
		fallthrough
	case "Your API url or path is incorrect":
		*e = Sslcr404ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Sslcr404ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Sslcr404ApplicationJSON - No record found
type Sslcr404ApplicationJSON struct {
	Error            *Sslcr404ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Sslcr404ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Sslcr401ApplicationJSONErrorEnum string

const (
	Sslcr401ApplicationJSONErrorEnumInvalidAuthentication Sslcr401ApplicationJSONErrorEnum = "invalid_authentication"
	Sslcr401ApplicationJSONErrorEnumInvalidAuthorization  Sslcr401ApplicationJSONErrorEnum = "invalid_authorization"
)

func (e *Sslcr401ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "invalid_authentication":
		fallthrough
	case "invalid_authorization":
		*e = Sslcr401ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Sslcr401ApplicationJSONErrorEnum: %s", s)
	}
}

type Sslcr401ApplicationJSONErrorDescriptionEnum string

const (
	Sslcr401ApplicationJSONErrorDescriptionEnumAuthenticationFailed            Sslcr401ApplicationJSONErrorDescriptionEnum = "Authentication failed"
	Sslcr401ApplicationJSONErrorDescriptionEnumYouAreNotAuthorizedToUseThisAPI Sslcr401ApplicationJSONErrorDescriptionEnum = "You are not authorized to use this API"
)

func (e *Sslcr401ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Authentication failed":
		fallthrough
	case "You are not authorized to use this API":
		*e = Sslcr401ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Sslcr401ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Sslcr401ApplicationJSON - Unauthorized access
type Sslcr401ApplicationJSON struct {
	Error            *Sslcr401ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Sslcr401ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Sslcr400ApplicationJSONErrorEnum string

const (
	Sslcr400ApplicationJSONErrorEnumMissingParameter Sslcr400ApplicationJSONErrorEnum = "missing_parameter"
	Sslcr400ApplicationJSONErrorEnumInvalidParameter Sslcr400ApplicationJSONErrorEnum = "invalid_parameter"
	Sslcr400ApplicationJSONErrorEnumInvalidFormat    Sslcr400ApplicationJSONErrorEnum = "invalid_format"
	Sslcr400ApplicationJSONErrorEnumInvalidTxnid     Sslcr400ApplicationJSONErrorEnum = "invalid_txnid"
	Sslcr400ApplicationJSONErrorEnumInvalidConsentid Sslcr400ApplicationJSONErrorEnum = "invalid_consentid"
)

func (e *Sslcr400ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "missing_parameter":
		fallthrough
	case "invalid_parameter":
		fallthrough
	case "invalid_format":
		fallthrough
	case "invalid_txnid":
		fallthrough
	case "invalid_consentid":
		*e = Sslcr400ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Sslcr400ApplicationJSONErrorEnum: %s", s)
	}
}

type Sslcr400ApplicationJSONErrorDescriptionEnum string

const (
	Sslcr400ApplicationJSONErrorDescriptionEnumPleaseProvideAllMandatoryParameters     Sslcr400ApplicationJSONErrorDescriptionEnum = "Please provide all mandatory parameters"
	Sslcr400ApplicationJSONErrorDescriptionEnumBadRequest                              Sslcr400ApplicationJSONErrorDescriptionEnum = "Bad request"
	Sslcr400ApplicationJSONErrorDescriptionEnumTheFormatParameterIsInvalid             Sslcr400ApplicationJSONErrorDescriptionEnum = "The format parameter is invalid"
	Sslcr400ApplicationJSONErrorDescriptionEnumTheTxnIDParameterMustBeInUUIDFormat     Sslcr400ApplicationJSONErrorDescriptionEnum = "The txnId parameter must be in UUID format"
	Sslcr400ApplicationJSONErrorDescriptionEnumTheConsentIDParameterMustBeInUUIDFormat Sslcr400ApplicationJSONErrorDescriptionEnum = "The consentId parameter must be in UUID format"
)

func (e *Sslcr400ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Please provide all mandatory parameters":
		fallthrough
	case "Bad request":
		fallthrough
	case "The format parameter is invalid":
		fallthrough
	case "The txnId parameter must be in UUID format":
		fallthrough
	case "The consentId parameter must be in UUID format":
		*e = Sslcr400ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Sslcr400ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Sslcr400ApplicationJSON - Bad request
type Sslcr400ApplicationJSON struct {
	Error            *Sslcr400ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Sslcr400ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type SslcrResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Bad request
	Sslcr400ApplicationJSONObject *Sslcr400ApplicationJSON
	// Unauthorized access
	Sslcr401ApplicationJSONObject *Sslcr401ApplicationJSON
	// No record found
	Sslcr404ApplicationJSONObject *Sslcr404ApplicationJSON
	// Internal server error
	Sslcr500ApplicationJSONObject *Sslcr500ApplicationJSON
	// Bad gateway
	Sslcr502ApplicationJSONObject *Sslcr502ApplicationJSON
	// Service unavailable
	Sslcr503ApplicationJSONObject *Sslcr503ApplicationJSON
	// Gateway timeout
	Sslcr504ApplicationJSONObject *Sslcr504ApplicationJSON
}
