"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class GetOrganizationDevicesUplinksAddressesByDeviceTagsFilterTypeEnum(str, Enum):
    r"""An optional parameter of value 'withAnyTags' or 'withAllTags' to indicate whether to return devices which contain ANY or ALL of the included tags. If no type is included, 'withAnyTags' will be selected."""
    WITH_ALL_TAGS = 'withAllTags'
    WITH_ANY_TAGS = 'withAnyTags'


@dataclasses.dataclass
class GetOrganizationDevicesUplinksAddressesByDeviceRequest:
    
    organization_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'organizationId', 'style': 'simple', 'explode': False }})  
    ending_before: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'endingBefore', 'style': 'form', 'explode': True }})
    r"""A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it."""  
    network_ids: Optional[list[str]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'networkIds', 'style': 'form', 'explode': False }})
    r"""Optional parameter to filter device uplinks by network ID. This filter uses multiple exact matches."""  
    per_page: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'perPage', 'style': 'form', 'explode': True }})
    r"""The number of entries per page returned. Acceptable range is 3 - 1000. Default is 1000."""  
    product_types: Optional[list[str]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'productTypes', 'style': 'form', 'explode': False }})
    r"""Optional parameter to filter device uplinks by device product types. This filter uses multiple exact matches."""  
    serials: Optional[list[str]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'serials', 'style': 'form', 'explode': False }})
    r"""Optional parameter to filter device availabilities by device serial numbers. This filter uses multiple exact matches."""  
    starting_after: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'startingAfter', 'style': 'form', 'explode': True }})
    r"""A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it."""  
    tags: Optional[list[str]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'tags', 'style': 'form', 'explode': False }})
    r"""An optional parameter to filter devices by tags. The filtering is case-sensitive. If tags are included, 'tagsFilterType' should also be included (see below). This filter uses multiple exact matches."""  
    tags_filter_type: Optional[GetOrganizationDevicesUplinksAddressesByDeviceTagsFilterTypeEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'tagsFilterType', 'style': 'form', 'explode': True }})
    r"""An optional parameter of value 'withAnyTags' or 'withAllTags' to indicate whether to return devices which contain ANY or ALL of the included tags. If no type is included, 'withAnyTags' will be selected."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetOrganizationDevicesUplinksAddressesByDevice200ApplicationJSONNetwork:
    r"""Network info."""
    
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""ID for the network containing the device."""  
    
class GetOrganizationDevicesUplinksAddressesByDevice200ApplicationJSONProductTypeEnum(str, Enum):
    r"""Device product type."""
    APPLIANCE = 'appliance'
    CAMERA = 'camera'
    CELLULAR_GATEWAY = 'cellularGateway'
    SENSOR = 'sensor'
    SWITCH = 'switch'
    SYSTEMS_MANAGER = 'systemsManager'
    WIRELESS = 'wireless'

class GetOrganizationDevicesUplinksAddressesByDevice200ApplicationJSONUplinksAddressesAssignmentModeEnum(str, Enum):
    r"""Indicates how the device uplink address is assigned. Available options are: static, dynamic."""
    DYNAMIC = 'dynamic'
    STATIC = 'static'

class GetOrganizationDevicesUplinksAddressesByDevice200ApplicationJSONUplinksAddressesProtocolEnum(str, Enum):
    r"""Type of address for the device uplink. Available options are: ipv4, ipv6."""
    IPV4 = 'ipv4'
    IPV6 = 'ipv6'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetOrganizationDevicesUplinksAddressesByDevice200ApplicationJSONUplinksAddressesPublic:
    r"""Public interface information."""
    
    address: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('address'), 'exclude': lambda f: f is None }})
    r"""The device uplink public IP address."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetOrganizationDevicesUplinksAddressesByDevice200ApplicationJSONUplinksAddresses:
    
    address: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('address'), 'exclude': lambda f: f is None }})
    r"""Device uplink address."""  
    assignment_mode: Optional[GetOrganizationDevicesUplinksAddressesByDevice200ApplicationJSONUplinksAddressesAssignmentModeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('assignmentMode'), 'exclude': lambda f: f is None }})
    r"""Indicates how the device uplink address is assigned. Available options are: static, dynamic."""  
    gateway: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('gateway'), 'exclude': lambda f: f is None }})
    r"""Device uplink gateway address."""  
    protocol: Optional[GetOrganizationDevicesUplinksAddressesByDevice200ApplicationJSONUplinksAddressesProtocolEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('protocol'), 'exclude': lambda f: f is None }})
    r"""Type of address for the device uplink. Available options are: ipv4, ipv6."""  
    public: Optional[GetOrganizationDevicesUplinksAddressesByDevice200ApplicationJSONUplinksAddressesPublic] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('public'), 'exclude': lambda f: f is None }})
    r"""Public interface information."""  
    
class GetOrganizationDevicesUplinksAddressesByDevice200ApplicationJSONUplinksInterfaceEnum(str, Enum):
    r"""Interface for the device uplink. Available options are: cellular, man1, man2, wan1, wan2"""
    CELLULAR = 'cellular'
    MAN1 = 'man1'
    MAN2 = 'man2'
    WAN1 = 'wan1'
    WAN2 = 'wan2'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetOrganizationDevicesUplinksAddressesByDevice200ApplicationJSONUplinks:
    
    addresses: Optional[list[GetOrganizationDevicesUplinksAddressesByDevice200ApplicationJSONUplinksAddresses]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('addresses'), 'exclude': lambda f: f is None }})
    r"""Available addresses for the interface."""  
    interface: Optional[GetOrganizationDevicesUplinksAddressesByDevice200ApplicationJSONUplinksInterfaceEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('interface'), 'exclude': lambda f: f is None }})
    r"""Interface for the device uplink. Available options are: cellular, man1, man2, wan1, wan2"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetOrganizationDevicesUplinksAddressesByDevice200ApplicationJSON:
    
    mac: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('mac'), 'exclude': lambda f: f is None }})
    r"""The device MAC address."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""The device name."""  
    network: Optional[GetOrganizationDevicesUplinksAddressesByDevice200ApplicationJSONNetwork] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('network'), 'exclude': lambda f: f is None }})
    r"""Network info."""  
    product_type: Optional[GetOrganizationDevicesUplinksAddressesByDevice200ApplicationJSONProductTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('productType'), 'exclude': lambda f: f is None }})
    r"""Device product type."""  
    serial: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('serial'), 'exclude': lambda f: f is None }})
    r"""The device serial number."""  
    tags: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tags'), 'exclude': lambda f: f is None }})
    r"""List of custom tags for the device."""  
    uplinks: Optional[list[GetOrganizationDevicesUplinksAddressesByDevice200ApplicationJSONUplinks]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('uplinks'), 'exclude': lambda f: f is None }})
    r"""List of device uplink addresses information."""  
    

@dataclasses.dataclass
class GetOrganizationDevicesUplinksAddressesByDeviceResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    get_organization_devices_uplinks_addresses_by_device_200_application_json_objects: Optional[list[GetOrganizationDevicesUplinksAddressesByDevice200ApplicationJSON]] = dataclasses.field(default=None)
    r"""Successful operation"""  
    headers: Optional[dict[str, list[str]]] = dataclasses.field(default=None)  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    