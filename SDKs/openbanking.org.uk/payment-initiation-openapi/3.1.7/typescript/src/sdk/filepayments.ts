/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class FilePayments {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Create File Payment Consents
   */
  createFilePaymentConsentsConsentIdFileJson(
    req: operations.CreateFilePaymentConsentsConsentIdFileJsonRequest,
    security: operations.CreateFilePaymentConsentsConsentIdFileJsonSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.CreateFilePaymentConsentsConsentIdFileJsonResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.CreateFilePaymentConsentsConsentIdFileJsonRequest(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/file-payment-consents/{ConsentId}/file",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.CreateFilePaymentConsentsConsentIdFileJsonSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = {
      ...utils.getHeadersFromRequest(req),
      ...reqBodyHeaders,
      ...config?.headers,
    };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.CreateFilePaymentConsentsConsentIdFileJsonResponse =
        new operations.CreateFilePaymentConsentsConsentIdFileJsonResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
          headers: utils.getHeadersFromResponse(httpRes.headers),
        });
      switch (true) {
        case [200, 401, 404, 405, 406, 415].includes(httpRes?.status):
          break;
        case [400, 403, 500].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/jose+jwe`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          if (utils.matchContentType(contentType, `application/json`)) {
            res.obErrorResponse1 = utils.objectToClass(
              httpRes?.data,
              shared.OBErrorResponse1
            );
          }
          if (
            utils.matchContentType(
              contentType,
              `application/json; charset=utf-8`
            )
          ) {
            res.obErrorResponse1 = utils.objectToClass(
              httpRes?.data,
              shared.OBErrorResponse1
            );
          }
          break;
        case httpRes?.status == 429:
          break;
      }

      return res;
    });
  }

  /**
   * Create File Payment Consents
   */
  createFilePaymentConsentsConsentIdFileRaw(
    req: operations.CreateFilePaymentConsentsConsentIdFileRawRequest,
    security: operations.CreateFilePaymentConsentsConsentIdFileRawSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.CreateFilePaymentConsentsConsentIdFileRawResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.CreateFilePaymentConsentsConsentIdFileRawRequest(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/file-payment-consents/{ConsentId}/file",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "raw"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.CreateFilePaymentConsentsConsentIdFileRawSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = {
      ...utils.getHeadersFromRequest(req),
      ...reqBodyHeaders,
      ...config?.headers,
    };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.CreateFilePaymentConsentsConsentIdFileRawResponse =
        new operations.CreateFilePaymentConsentsConsentIdFileRawResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
          headers: utils.getHeadersFromResponse(httpRes.headers),
        });
      switch (true) {
        case [200, 401, 404, 405, 406, 415].includes(httpRes?.status):
          break;
        case [400, 403, 500].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/jose+jwe`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          if (utils.matchContentType(contentType, `application/json`)) {
            res.obErrorResponse1 = utils.objectToClass(
              httpRes?.data,
              shared.OBErrorResponse1
            );
          }
          if (
            utils.matchContentType(
              contentType,
              `application/json; charset=utf-8`
            )
          ) {
            res.obErrorResponse1 = utils.objectToClass(
              httpRes?.data,
              shared.OBErrorResponse1
            );
          }
          break;
        case httpRes?.status == 429:
          break;
      }

      return res;
    });
  }

  /**
   * Create File Payment Consents
   */
  createFilePaymentConsentsJson(
    req: operations.CreateFilePaymentConsentsJsonRequest,
    security: operations.CreateFilePaymentConsentsJsonSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.CreateFilePaymentConsentsJsonResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.CreateFilePaymentConsentsJsonRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/file-payment-consents";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "obWriteFileConsent3",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.CreateFilePaymentConsentsJsonSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = {
      ...utils.getHeadersFromRequest(req),
      ...reqBodyHeaders,
      ...config?.headers,
    };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.CreateFilePaymentConsentsJsonResponse =
        new operations.CreateFilePaymentConsentsJsonResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
          headers: utils.getHeadersFromResponse(httpRes.headers),
        });
      switch (true) {
        case httpRes?.status == 201:
          if (utils.matchContentType(contentType, `application/jose+jwe`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          if (utils.matchContentType(contentType, `application/json`)) {
            res.obWriteFileConsentResponse4 = utils.objectToClass(
              httpRes?.data,
              shared.OBWriteFileConsentResponse4
            );
          }
          if (
            utils.matchContentType(
              contentType,
              `application/json; charset=utf-8`
            )
          ) {
            res.obWriteFileConsentResponse4 = utils.objectToClass(
              httpRes?.data,
              shared.OBWriteFileConsentResponse4
            );
          }
          break;
        case [400, 403, 500].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/jose+jwe`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          if (utils.matchContentType(contentType, `application/json`)) {
            res.obErrorResponse1 = utils.objectToClass(
              httpRes?.data,
              shared.OBErrorResponse1
            );
          }
          if (
            utils.matchContentType(
              contentType,
              `application/json; charset=utf-8`
            )
          ) {
            res.obErrorResponse1 = utils.objectToClass(
              httpRes?.data,
              shared.OBErrorResponse1
            );
          }
          break;
        case [401, 404, 405, 406, 415].includes(httpRes?.status):
          break;
        case httpRes?.status == 429:
          break;
      }

      return res;
    });
  }

  /**
   * Create File Payment Consents
   */
  createFilePaymentConsentsRaw(
    req: operations.CreateFilePaymentConsentsRawRequest,
    security: operations.CreateFilePaymentConsentsRawSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.CreateFilePaymentConsentsRawResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.CreateFilePaymentConsentsRawRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/file-payment-consents";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "raw"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.CreateFilePaymentConsentsRawSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = {
      ...utils.getHeadersFromRequest(req),
      ...reqBodyHeaders,
      ...config?.headers,
    };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.CreateFilePaymentConsentsRawResponse =
        new operations.CreateFilePaymentConsentsRawResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
          headers: utils.getHeadersFromResponse(httpRes.headers),
        });
      switch (true) {
        case httpRes?.status == 201:
          if (utils.matchContentType(contentType, `application/jose+jwe`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          if (utils.matchContentType(contentType, `application/json`)) {
            res.obWriteFileConsentResponse4 = utils.objectToClass(
              httpRes?.data,
              shared.OBWriteFileConsentResponse4
            );
          }
          if (
            utils.matchContentType(
              contentType,
              `application/json; charset=utf-8`
            )
          ) {
            res.obWriteFileConsentResponse4 = utils.objectToClass(
              httpRes?.data,
              shared.OBWriteFileConsentResponse4
            );
          }
          break;
        case [400, 403, 500].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/jose+jwe`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          if (utils.matchContentType(contentType, `application/json`)) {
            res.obErrorResponse1 = utils.objectToClass(
              httpRes?.data,
              shared.OBErrorResponse1
            );
          }
          if (
            utils.matchContentType(
              contentType,
              `application/json; charset=utf-8`
            )
          ) {
            res.obErrorResponse1 = utils.objectToClass(
              httpRes?.data,
              shared.OBErrorResponse1
            );
          }
          break;
        case [401, 404, 405, 406, 415].includes(httpRes?.status):
          break;
        case httpRes?.status == 429:
          break;
      }

      return res;
    });
  }

  /**
   * Create File Payments
   */
  createFilePaymentsJson(
    req: operations.CreateFilePaymentsJsonRequest,
    security: operations.CreateFilePaymentsJsonSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.CreateFilePaymentsJsonResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.CreateFilePaymentsJsonRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/file-payments";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "obWriteFile2",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.CreateFilePaymentsJsonSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = {
      ...utils.getHeadersFromRequest(req),
      ...reqBodyHeaders,
      ...config?.headers,
    };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.CreateFilePaymentsJsonResponse =
        new operations.CreateFilePaymentsJsonResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
          headers: utils.getHeadersFromResponse(httpRes.headers),
        });
      switch (true) {
        case httpRes?.status == 201:
          if (utils.matchContentType(contentType, `application/jose+jwe`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          if (utils.matchContentType(contentType, `application/json`)) {
            res.obWriteFileResponse3 = utils.objectToClass(
              httpRes?.data,
              shared.OBWriteFileResponse3
            );
          }
          if (
            utils.matchContentType(
              contentType,
              `application/json; charset=utf-8`
            )
          ) {
            res.obWriteFileResponse3 = utils.objectToClass(
              httpRes?.data,
              shared.OBWriteFileResponse3
            );
          }
          break;
        case [400, 403, 500].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/jose+jwe`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          if (utils.matchContentType(contentType, `application/json`)) {
            res.obErrorResponse1 = utils.objectToClass(
              httpRes?.data,
              shared.OBErrorResponse1
            );
          }
          if (
            utils.matchContentType(
              contentType,
              `application/json; charset=utf-8`
            )
          ) {
            res.obErrorResponse1 = utils.objectToClass(
              httpRes?.data,
              shared.OBErrorResponse1
            );
          }
          break;
        case [401, 404, 405, 406, 415].includes(httpRes?.status):
          break;
        case httpRes?.status == 429:
          break;
      }

      return res;
    });
  }

  /**
   * Create File Payments
   */
  createFilePaymentsRaw(
    req: operations.CreateFilePaymentsRawRequest,
    security: operations.CreateFilePaymentsRawSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.CreateFilePaymentsRawResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.CreateFilePaymentsRawRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/file-payments";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "raw"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.CreateFilePaymentsRawSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = {
      ...utils.getHeadersFromRequest(req),
      ...reqBodyHeaders,
      ...config?.headers,
    };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.CreateFilePaymentsRawResponse =
        new operations.CreateFilePaymentsRawResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
          headers: utils.getHeadersFromResponse(httpRes.headers),
        });
      switch (true) {
        case httpRes?.status == 201:
          if (utils.matchContentType(contentType, `application/jose+jwe`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          if (utils.matchContentType(contentType, `application/json`)) {
            res.obWriteFileResponse3 = utils.objectToClass(
              httpRes?.data,
              shared.OBWriteFileResponse3
            );
          }
          if (
            utils.matchContentType(
              contentType,
              `application/json; charset=utf-8`
            )
          ) {
            res.obWriteFileResponse3 = utils.objectToClass(
              httpRes?.data,
              shared.OBWriteFileResponse3
            );
          }
          break;
        case [400, 403, 500].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/jose+jwe`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          if (utils.matchContentType(contentType, `application/json`)) {
            res.obErrorResponse1 = utils.objectToClass(
              httpRes?.data,
              shared.OBErrorResponse1
            );
          }
          if (
            utils.matchContentType(
              contentType,
              `application/json; charset=utf-8`
            )
          ) {
            res.obErrorResponse1 = utils.objectToClass(
              httpRes?.data,
              shared.OBErrorResponse1
            );
          }
          break;
        case [401, 404, 405, 406, 415].includes(httpRes?.status):
          break;
        case httpRes?.status == 429:
          break;
      }

      return res;
    });
  }

  /**
   * Get File Payment Consents
   */
  getFilePaymentConsentsConsentId(
    req: operations.GetFilePaymentConsentsConsentIdRequest,
    security: operations.GetFilePaymentConsentsConsentIdSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetFilePaymentConsentsConsentIdResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetFilePaymentConsentsConsentIdRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/file-payment-consents/{ConsentId}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GetFilePaymentConsentsConsentIdSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };

    const r = client.request({
      url: url,
      method: "get",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetFilePaymentConsentsConsentIdResponse =
        new operations.GetFilePaymentConsentsConsentIdResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
          headers: utils.getHeadersFromResponse(httpRes.headers),
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/jose+jwe`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          if (utils.matchContentType(contentType, `application/json`)) {
            res.obWriteFileConsentResponse4 = utils.objectToClass(
              httpRes?.data,
              shared.OBWriteFileConsentResponse4
            );
          }
          if (
            utils.matchContentType(
              contentType,
              `application/json; charset=utf-8`
            )
          ) {
            res.obWriteFileConsentResponse4 = utils.objectToClass(
              httpRes?.data,
              shared.OBWriteFileConsentResponse4
            );
          }
          break;
        case [400, 403, 500].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/jose+jwe`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          if (utils.matchContentType(contentType, `application/json`)) {
            res.obErrorResponse1 = utils.objectToClass(
              httpRes?.data,
              shared.OBErrorResponse1
            );
          }
          if (
            utils.matchContentType(
              contentType,
              `application/json; charset=utf-8`
            )
          ) {
            res.obErrorResponse1 = utils.objectToClass(
              httpRes?.data,
              shared.OBErrorResponse1
            );
          }
          break;
        case [401, 404, 405, 406].includes(httpRes?.status):
          break;
        case httpRes?.status == 429:
          break;
      }

      return res;
    });
  }

  /**
   * Get File Payment Consents
   */
  getFilePaymentConsentsConsentIdFile(
    req: operations.GetFilePaymentConsentsConsentIdFileRequest,
    security: operations.GetFilePaymentConsentsConsentIdFileSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetFilePaymentConsentsConsentIdFileResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetFilePaymentConsentsConsentIdFileRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/file-payment-consents/{ConsentId}/file",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GetFilePaymentConsentsConsentIdFileSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };

    const r = client.request({
      url: url,
      method: "get",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetFilePaymentConsentsConsentIdFileResponse =
        new operations.GetFilePaymentConsentsConsentIdFileResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
          headers: utils.getHeadersFromResponse(httpRes.headers),
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/jose+jwe`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          if (utils.matchContentType(contentType, `application/json`)) {
            res.file = utils.objectToClass(httpRes?.data);
          }
          if (
            utils.matchContentType(
              contentType,
              `application/json; charset=utf-8`
            )
          ) {
            res.file = utils.objectToClass(httpRes?.data);
          }
          break;
        case [400, 403, 500].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/jose+jwe`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          if (utils.matchContentType(contentType, `application/json`)) {
            res.obErrorResponse1 = utils.objectToClass(
              httpRes?.data,
              shared.OBErrorResponse1
            );
          }
          if (
            utils.matchContentType(
              contentType,
              `application/json; charset=utf-8`
            )
          ) {
            res.obErrorResponse1 = utils.objectToClass(
              httpRes?.data,
              shared.OBErrorResponse1
            );
          }
          break;
        case [401, 404, 405, 406].includes(httpRes?.status):
          break;
        case httpRes?.status == 429:
          break;
      }

      return res;
    });
  }

  /**
   * Get File Payments
   */
  getFilePaymentsFilePaymentId(
    req: operations.GetFilePaymentsFilePaymentIdRequest,
    security: operations.GetFilePaymentsFilePaymentIdSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetFilePaymentsFilePaymentIdResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetFilePaymentsFilePaymentIdRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/file-payments/{FilePaymentId}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GetFilePaymentsFilePaymentIdSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };

    const r = client.request({
      url: url,
      method: "get",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetFilePaymentsFilePaymentIdResponse =
        new operations.GetFilePaymentsFilePaymentIdResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
          headers: utils.getHeadersFromResponse(httpRes.headers),
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/jose+jwe`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          if (utils.matchContentType(contentType, `application/json`)) {
            res.obWriteFileResponse3 = utils.objectToClass(
              httpRes?.data,
              shared.OBWriteFileResponse3
            );
          }
          if (
            utils.matchContentType(
              contentType,
              `application/json; charset=utf-8`
            )
          ) {
            res.obWriteFileResponse3 = utils.objectToClass(
              httpRes?.data,
              shared.OBWriteFileResponse3
            );
          }
          break;
        case [400, 403, 500].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/jose+jwe`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          if (utils.matchContentType(contentType, `application/json`)) {
            res.obErrorResponse1 = utils.objectToClass(
              httpRes?.data,
              shared.OBErrorResponse1
            );
          }
          if (
            utils.matchContentType(
              contentType,
              `application/json; charset=utf-8`
            )
          ) {
            res.obErrorResponse1 = utils.objectToClass(
              httpRes?.data,
              shared.OBErrorResponse1
            );
          }
          break;
        case [401, 404, 405, 406].includes(httpRes?.status):
          break;
        case httpRes?.status == 429:
          break;
      }

      return res;
    });
  }

  /**
   * Get File Payments
   */
  getFilePaymentsFilePaymentIdReportFile(
    req: operations.GetFilePaymentsFilePaymentIdReportFileRequest,
    security: operations.GetFilePaymentsFilePaymentIdReportFileSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetFilePaymentsFilePaymentIdReportFileResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetFilePaymentsFilePaymentIdReportFileRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/file-payments/{FilePaymentId}/report-file",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GetFilePaymentsFilePaymentIdReportFileSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };

    const r = client.request({
      url: url,
      method: "get",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetFilePaymentsFilePaymentIdReportFileResponse =
        new operations.GetFilePaymentsFilePaymentIdReportFileResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
          headers: utils.getHeadersFromResponse(httpRes.headers),
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/jose+jwe`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          if (utils.matchContentType(contentType, `application/json`)) {
            res.file = utils.objectToClass(httpRes?.data);
          }
          if (
            utils.matchContentType(
              contentType,
              `application/json; charset=utf-8`
            )
          ) {
            res.file = utils.objectToClass(httpRes?.data);
          }
          break;
        case [400, 403, 500].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/jose+jwe`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          if (utils.matchContentType(contentType, `application/json`)) {
            res.obErrorResponse1 = utils.objectToClass(
              httpRes?.data,
              shared.OBErrorResponse1
            );
          }
          if (
            utils.matchContentType(
              contentType,
              `application/json; charset=utf-8`
            )
          ) {
            res.obErrorResponse1 = utils.objectToClass(
              httpRes?.data,
              shared.OBErrorResponse1
            );
          }
          break;
        case [401, 404, 405, 406].includes(httpRes?.status):
          break;
        case httpRes?.status == 429:
          break;
      }

      return res;
    });
  }
}
