"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class PaymentMethodsMerchantLevel:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def get_merchants_merchant_id_payment_method_settings(self, request: operations.GetMerchantsMerchantIDPaymentMethodSettingsRequest, security: operations.GetMerchantsMerchantIDPaymentMethodSettingsSecurity) -> operations.GetMerchantsMerchantIDPaymentMethodSettingsResponse:
        r"""Get all payment methods
        Returns details for all payment methods of the merchant account identified in the path.
        
        To make this request, your API credential must have the following [role](https://docs.adyen.com/development-resources/api-credentials#api-permissions):
        * Management API—Payment methods read
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetMerchantsMerchantIDPaymentMethodSettingsRequest, base_url, '/merchants/{merchantId}/paymentMethodSettings', request)
        
        query_params = utils.get_query_params(operations.GetMerchantsMerchantIDPaymentMethodSettingsRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetMerchantsMerchantIDPaymentMethodSettingsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.PaymentMethodResponse])
                res.payment_method_response = out
        elif http_res.status_code == 204:
            pass
        elif http_res.status_code in [400, 401, 403, 422, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.RestServiceError])
                res.rest_service_error = out

        return res

    def get_merchants_merchant_id_payment_method_settings_payment_method_id(self, request: operations.GetMerchantsMerchantIDPaymentMethodSettingsPaymentMethodIDRequest, security: operations.GetMerchantsMerchantIDPaymentMethodSettingsPaymentMethodIDSecurity) -> operations.GetMerchantsMerchantIDPaymentMethodSettingsPaymentMethodIDResponse:
        r"""Get payment method details
        Returns details for the merchant account and the payment method identified in the path.
        
        To make this request, your API credential must have the following [role](https://docs.adyen.com/development-resources/api-credentials#api-permissions):
        * Management API—Payment methods read
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetMerchantsMerchantIDPaymentMethodSettingsPaymentMethodIDRequest, base_url, '/merchants/{merchantId}/paymentMethodSettings/{paymentMethodId}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetMerchantsMerchantIDPaymentMethodSettingsPaymentMethodIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.PaymentMethod])
                res.payment_method = out
        elif http_res.status_code == 204:
            pass
        elif http_res.status_code in [400, 401, 403, 422, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.RestServiceError])
                res.rest_service_error = out

        return res

    def get_merchants_merchant_id_payment_method_settings_payment_method_id_get_apple_pay_domains(self, request: operations.GetMerchantsMerchantIDPaymentMethodSettingsPaymentMethodIDGetApplePayDomainsRequest, security: operations.GetMerchantsMerchantIDPaymentMethodSettingsPaymentMethodIDGetApplePayDomainsSecurity) -> operations.GetMerchantsMerchantIDPaymentMethodSettingsPaymentMethodIDGetApplePayDomainsResponse:
        r"""Get Apple Pay domains
        Returns all Apple Pay domains that are registered with the merchant account and the payment method identified in the path. For more information, see [Apple Pay documentation](https://docs.adyen.com/payment-methods/apple-pay/enable-apple-pay#register-merchant-domain).
        
        To make this request, your API credential must have the following [role](https://docs.adyen.com/development-resources/api-credentials#api-permissions):
        * Management API—Payment methods read
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetMerchantsMerchantIDPaymentMethodSettingsPaymentMethodIDGetApplePayDomainsRequest, base_url, '/merchants/{merchantId}/paymentMethodSettings/{paymentMethodId}/getApplePayDomains', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetMerchantsMerchantIDPaymentMethodSettingsPaymentMethodIDGetApplePayDomainsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ApplePayInfo])
                res.apple_pay_info = out
        elif http_res.status_code == 204:
            pass
        elif http_res.status_code in [400, 401, 403, 422, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.RestServiceError])
                res.rest_service_error = out

        return res

    def patch_merchants_merchant_id_payment_method_settings_payment_method_id(self, request: operations.PatchMerchantsMerchantIDPaymentMethodSettingsPaymentMethodIDRequest, security: operations.PatchMerchantsMerchantIDPaymentMethodSettingsPaymentMethodIDSecurity) -> operations.PatchMerchantsMerchantIDPaymentMethodSettingsPaymentMethodIDResponse:
        r"""Update a payment method
        Updates payment method details for the merchant account and the payment method identified in the path.
        
        To make this request, your API credential must have the following [role](https://docs.adyen.com/development-resources/api-credentials#api-permissions):
        * Management API—Payment methods read and write
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.PatchMerchantsMerchantIDPaymentMethodSettingsPaymentMethodIDRequest, base_url, '/merchants/{merchantId}/paymentMethodSettings/{paymentMethodId}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "update_payment_method_info", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PATCH', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PatchMerchantsMerchantIDPaymentMethodSettingsPaymentMethodIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.PaymentMethod])
                res.payment_method = out
        elif http_res.status_code == 204:
            pass
        elif http_res.status_code in [400, 401, 403, 422, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.RestServiceError])
                res.rest_service_error = out

        return res

    def post_merchants_merchant_id_payment_method_settings(self, request: operations.PostMerchantsMerchantIDPaymentMethodSettingsRequest, security: operations.PostMerchantsMerchantIDPaymentMethodSettingsSecurity) -> operations.PostMerchantsMerchantIDPaymentMethodSettingsResponse:
        r"""Request a payment method
        Sends a request to add a new payment method to the merchant account identified in the path.
        
        To make this request, your API credential must have the following [role](https://docs.adyen.com/development-resources/api-credentials#api-permissions):
        * Management API—Payment methods read and write
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.PostMerchantsMerchantIDPaymentMethodSettingsRequest, base_url, '/merchants/{merchantId}/paymentMethodSettings', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "payment_method_setup_info", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostMerchantsMerchantIDPaymentMethodSettingsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.PaymentMethod])
                res.payment_method = out
        elif http_res.status_code == 204:
            pass
        elif http_res.status_code in [400, 401, 403, 422, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.RestServiceError])
                res.rest_service_error = out

        return res

    def post_merchants_merchant_id_payment_method_settings_payment_method_id_add_apple_pay_domains(self, request: operations.PostMerchantsMerchantIDPaymentMethodSettingsPaymentMethodIDAddApplePayDomainsRequest, security: operations.PostMerchantsMerchantIDPaymentMethodSettingsPaymentMethodIDAddApplePayDomainsSecurity) -> operations.PostMerchantsMerchantIDPaymentMethodSettingsPaymentMethodIDAddApplePayDomainsResponse:
        r"""Add an Apple Pay domain
        Adds the new domain to the list of Apple Pay domains that are registered with the merchant account and the payment method identified in the path. For more information, see [Apple Pay documentation](https://docs.adyen.com/payment-methods/apple-pay/enable-apple-pay#register-merchant-domain).
        
        To make this request, your API credential must have the following [role](https://docs.adyen.com/development-resources/api-credentials#api-permissions):
        * Management API—Payment methods read and write
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.PostMerchantsMerchantIDPaymentMethodSettingsPaymentMethodIDAddApplePayDomainsRequest, base_url, '/merchants/{merchantId}/paymentMethodSettings/{paymentMethodId}/addApplePayDomains', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "apple_pay_info", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostMerchantsMerchantIDPaymentMethodSettingsPaymentMethodIDAddApplePayDomainsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 204:
            pass
        elif http_res.status_code in [400, 401, 403, 422, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.RestServiceError])
                res.rest_service_error = out

        return res

    