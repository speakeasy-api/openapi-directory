"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations
from typing import Optional

class Export:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def export_configurations_create(self, request: operations.ExportConfigurationsCreateRequest, security: operations.ExportConfigurationsCreateSecurity) -> operations.ExportConfigurationsCreateResponse:
        r"""Create new export configuration"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ExportConfigurationsCreateRequest, base_url, '/v0.1/apps/{owner_name}/{app_name}/export_configurations', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ExportConfigurationsCreateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 202:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.ExportConfigurationsCreate202ApplicationJSON])
                res.export_configurations_create_202_application_json_object = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.ExportConfigurationsCreateDefaultApplicationJSON])
                res.export_configurations_create_default_application_json_object = out

        return res

    def export_configurations_delete(self, request: operations.ExportConfigurationsDeleteRequest, security: operations.ExportConfigurationsDeleteSecurity) -> operations.ExportConfigurationsDeleteResponse:
        r"""Delete export configuration."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ExportConfigurationsDeleteRequest, base_url, '/v0.1/apps/{owner_name}/{app_name}/export_configurations/{export_configuration_id}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ExportConfigurationsDeleteResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            pass
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.ExportConfigurationsDeleteDefaultApplicationJSON])
                res.export_configurations_delete_default_application_json_object = out

        return res

    def export_configurations_disable(self, request: operations.ExportConfigurationsDisableRequest, security: operations.ExportConfigurationsDisableSecurity) -> operations.ExportConfigurationsDisableResponse:
        r"""Disable export configuration."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ExportConfigurationsDisableRequest, base_url, '/v0.1/apps/{owner_name}/{app_name}/export_configurations/{export_configuration_id}/disable', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ExportConfigurationsDisableResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            pass
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.ExportConfigurationsDisableDefaultApplicationJSON])
                res.export_configurations_disable_default_application_json_object = out

        return res

    def export_configurations_enable(self, request: operations.ExportConfigurationsEnableRequest, security: operations.ExportConfigurationsEnableSecurity) -> operations.ExportConfigurationsEnableResponse:
        r"""Enable export configuration."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ExportConfigurationsEnableRequest, base_url, '/v0.1/apps/{owner_name}/{app_name}/export_configurations/{export_configuration_id}/enable', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ExportConfigurationsEnableResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            pass
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.ExportConfigurationsEnableDefaultApplicationJSON])
                res.export_configurations_enable_default_application_json_object = out

        return res

    def export_configurations_get(self, request: operations.ExportConfigurationsGetRequest, security: operations.ExportConfigurationsGetSecurity) -> operations.ExportConfigurationsGetResponse:
        r"""Get export configuration."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ExportConfigurationsGetRequest, base_url, '/v0.1/apps/{owner_name}/{app_name}/export_configurations/{export_configuration_id}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ExportConfigurationsGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.ExportConfigurationsGet200ApplicationJSON])
                res.export_configurations_get_200_application_json_object = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.ExportConfigurationsGetDefaultApplicationJSON])
                res.export_configurations_get_default_application_json_object = out

        return res

    def export_configurations_list(self, request: operations.ExportConfigurationsListRequest, security: operations.ExportConfigurationsListSecurity) -> operations.ExportConfigurationsListResponse:
        r"""List export configurations."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ExportConfigurationsListRequest, base_url, '/v0.1/apps/{owner_name}/{app_name}/export_configurations', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ExportConfigurationsListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.ExportConfigurationsList200ApplicationJSON])
                res.export_configurations_list_200_application_json_object = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.ExportConfigurationsListDefaultApplicationJSON])
                res.export_configurations_list_default_application_json_object = out

        return res

    def export_configurations_partial_update(self, request: operations.ExportConfigurationsPartialUpdateRequest, security: operations.ExportConfigurationsPartialUpdateSecurity) -> operations.ExportConfigurationsPartialUpdateResponse:
        r"""Partially update export configuration."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ExportConfigurationsPartialUpdateRequest, base_url, '/v0.1/apps/{owner_name}/{app_name}/export_configurations/{export_configuration_id}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PATCH', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ExportConfigurationsPartialUpdateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.ExportConfigurationsPartialUpdate200ApplicationJSON])
                res.export_configurations_partial_update_200_application_json_object = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.ExportConfigurationsPartialUpdateDefaultApplicationJSON])
                res.export_configurations_partial_update_default_application_json_object = out

        return res

    