"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations

class Ontol:
    r"""extract a subgraph from an ontology"""
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def get_extract_ontology_subgraph_resource(self, request: operations.GetExtractOntologySubgraphResourceRequest) -> operations.GetExtractOntologySubgraphResourceResponse:
        r"""Extract a subgraph from an ontology"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetExtractOntologySubgraphResourceRequest, base_url, '/ontol/subgraph/{ontology}/{node}', request)
        
        query_params = utils.get_query_params(operations.GetExtractOntologySubgraphResourceRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetExtractOntologySubgraphResourceResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def get_information_content_resource(self, request: operations.GetInformationContentResourceRequest) -> operations.GetInformationContentResourceResponse:
        r"""Returns information content (IC) for a set of relevant ontology classes
        ```
        IC = -log2( freq(t) / popSize )
        ```
        
        Here the frequency and population is calculated for a particular dataset:
        e.g. all human disease-phenotype associations
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetInformationContentResourceRequest, base_url, '/ontol/information_content/{subject_category}/{object_category}/{subject_taxon}', request)
        
        query_params = utils.get_query_params(operations.GetInformationContentResourceRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetInformationContentResourceResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def post_extract_ontology_subgraph_resource(self, request: operations.PostExtractOntologySubgraphResourceRequest) -> operations.PostExtractOntologySubgraphResourceResponse:
        r"""Extract a subgraph from an ontology"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PostExtractOntologySubgraphResourceRequest, base_url, '/ontol/subgraph/{ontology}/{node}', request)
        
        query_params = utils.get_query_params(operations.PostExtractOntologySubgraphResourceRequest, request)
        
        client = self._client
        
        http_res = client.request('POST', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostExtractOntologySubgraphResourceResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    