"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import badrequestexception as shared_badrequestexception
from ..shared import describeprojectresult as shared_describeprojectresult
from ..shared import internalfailureexception as shared_internalfailureexception
from ..shared import notfoundexception as shared_notfoundexception
from ..shared import serviceunavailableexception as shared_serviceunavailableexception
from ..shared import toomanyrequestsexception as shared_toomanyrequestsexception
from ..shared import unauthorizedexception as shared_unauthorizedexception
from typing import Optional


@dataclasses.dataclass
class DescribeProjectRequest:
    
    project_id: str = dataclasses.field(metadata={'query_param': { 'field_name': 'projectId', 'style': 'form', 'explode': True }})
    r"""Unique project identifier."""  
    sync_from_resources: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'syncFromResources', 'style': 'form', 'explode': True }})
    r"""If set to true, causes AWS Mobile Hub to synchronize information from other services, e.g., update state of AWS CloudFormation stacks in the AWS Mobile Hub project."""  
    x_amz_algorithm: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Algorithm', 'style': 'simple', 'explode': False }})  
    x_amz_content_sha256: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Content-Sha256', 'style': 'simple', 'explode': False }})  
    x_amz_credential: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Credential', 'style': 'simple', 'explode': False }})  
    x_amz_date: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Date', 'style': 'simple', 'explode': False }})  
    x_amz_security_token: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Security-Token', 'style': 'simple', 'explode': False }})  
    x_amz_signature: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Signature', 'style': 'simple', 'explode': False }})  
    x_amz_signed_headers: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-SignedHeaders', 'style': 'simple', 'explode': False }})  
    

@dataclasses.dataclass
class DescribeProjectResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    bad_request_exception: Optional[shared_badrequestexception.BadRequestException] = dataclasses.field(default=None)
    r"""BadRequestException"""  
    describe_project_result: Optional[shared_describeprojectresult.DescribeProjectResult] = dataclasses.field(default=None)
    r"""Success"""  
    internal_failure_exception: Optional[shared_internalfailureexception.InternalFailureException] = dataclasses.field(default=None)
    r"""InternalFailureException"""  
    not_found_exception: Optional[shared_notfoundexception.NotFoundException] = dataclasses.field(default=None)
    r"""NotFoundException"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    service_unavailable_exception: Optional[shared_serviceunavailableexception.ServiceUnavailableException] = dataclasses.field(default=None)
    r"""ServiceUnavailableException"""  
    too_many_requests_exception: Optional[shared_toomanyrequestsexception.TooManyRequestsException] = dataclasses.field(default=None)
    r"""TooManyRequestsException"""  
    unauthorized_exception: Optional[shared_unauthorizedexception.UnauthorizedException] = dataclasses.field(default=None)
    r"""UnauthorizedException"""  
    