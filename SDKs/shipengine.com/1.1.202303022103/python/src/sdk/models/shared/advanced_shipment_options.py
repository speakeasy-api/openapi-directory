"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import collect_on_delivery as shared_collect_on_delivery
from ..shared import weight_unit_enum as shared_weight_unit_enum
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class AdvancedShipmentOptionsBillToPartyEnum(str, Enum):
    r"""The possible bill to party values"""
    RECIPIENT = 'recipient'
    THIRD_PARTY = 'third_party'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class AdvancedShipmentOptionsWeight:
    r"""The weight of a package"""
    
    unit: shared_weight_unit_enum.WeightUnitEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('unit') }})  
    value: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('value') }})
    r"""The weight, in the specified unit"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class AdvancedShipmentOptionsFedexFreight:
    r"""Provide details for the Fedex freight service"""
    
    booking_confirmation: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('booking_confirmation'), 'exclude': lambda f: f is None }})  
    shipper_load_and_count: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('shipper_load_and_count'), 'exclude': lambda f: f is None }})  
    
class AdvancedShipmentOptionsOriginTypeEnum(str, Enum):
    r"""Indicates if the package will be picked up or dropped off by the carrier"""
    PICKUP = 'pickup'
    DROP_OFF = 'drop_off'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class AdvancedShipmentOptions:
    r"""Advanced shipment options"""
    
    bill_to_account: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bill_to_account'), 'exclude': lambda f: f is None }})
    r"""This field is used to [bill shipping costs to a third party](https://www.shipengine.com/docs/shipping/bill-to-third-party/).  This field must be used in conjunction with the `bill_to_country_code`, `bill_to_party`, and `bill_to_postal_code` fields."""  
    bill_to_country_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bill_to_country_code'), 'exclude': lambda f: f is None }})
    r"""The two-letter [ISO 3166-1 country code](https://en.wikipedia.org/wiki/ISO_3166-1) of the third-party that is responsible for shipping costs."""  
    bill_to_party: Optional[AdvancedShipmentOptionsBillToPartyEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bill_to_party'), 'exclude': lambda f: f is None }})
    r"""Indicates whether to bill shipping costs to the recipient or to a third-party.  When billing to a third-party, the `bill_to_account`, `bill_to_country_code`, and `bill_to_postal_code` fields must also be set."""  
    bill_to_postal_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bill_to_postal_code'), 'exclude': lambda f: f is None }})
    r"""The postal code of the third-party that is responsible for shipping costs."""  
    collect_on_delivery: Optional[shared_collect_on_delivery.CollectOnDelivery] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('collect_on_delivery'), 'exclude': lambda f: f is None }})
    r"""Defer payment until package is delivered, instead of when it is ordered."""  
    contains_alcohol: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('contains_alcohol'), 'exclude': lambda f: f is None }})
    r"""Indicates that the shipment contains alcohol."""  
    custom_field1: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('custom_field1'), 'exclude': lambda f: f is None }})
    r"""An arbitrary field that can be used to store information about the shipment."""  
    custom_field2: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('custom_field2'), 'exclude': lambda f: f is None }})
    r"""An arbitrary field that can be used to store information about the shipment."""  
    custom_field3: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('custom_field3'), 'exclude': lambda f: f is None }})
    r"""An arbitrary field that can be used to store information about the shipment."""  
    delivered_duty_paid: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('delivered_duty_paid'), 'exclude': lambda f: f is None }})
    r"""Indicates that the shipper is paying the international delivery duties for this shipment.  This option is supported by UPS, FedEx, and DHL Express."""  
    dry_ice: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dry_ice'), 'exclude': lambda f: f is None }})
    r"""Indicates if the shipment contain dry ice"""  
    dry_ice_weight: Optional[AdvancedShipmentOptionsWeight] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dry_ice_weight'), 'exclude': lambda f: f is None }})
    r"""The weight of the dry ice in the shipment"""  
    fedex_freight: Optional[AdvancedShipmentOptionsFedexFreight] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('fedex_freight'), 'exclude': lambda f: f is None }})
    r"""Provide details for the Fedex freight service"""  
    freight_class: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('freight_class'), 'exclude': lambda f: f is None }})
    r"""The National Motor Freight Traffic Association [freight class](http://www.nmfta.org/pages/nmfc?AspxAutoDetectCookieSupport=1), such as \\"77.5\\", \\"110\\", or \\"250\\"."""  
    non_machinable: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('non_machinable'), 'exclude': lambda f: f is None }})
    r"""Indicates that the package cannot be processed automatically because it is too large or irregularly shaped. This is primarily for USPS shipments.  See [Section 1.2 of the USPS parcel standards](https://pe.usps.com/text/dmm300/101.htm#ep1047495) for details."""  
    origin_type: Optional[AdvancedShipmentOptionsOriginTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('origin_type'), 'exclude': lambda f: f is None }})  
    saturday_delivery: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('saturday_delivery'), 'exclude': lambda f: f is None }})
    r"""Enables Saturday delivery, if supported by the carrier."""  
    shipper_release: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('shipper_release'), 'exclude': lambda f: f is None }})  
    third_party_consignee: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('third_party_consignee'), 'exclude': lambda f: f is None }})
    r"""Third Party Consignee option is a value-added service that allows the shipper to supply goods without commercial invoices being attached"""  
    use_ups_ground_freight_pricing: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('use_ups_ground_freight_pricing'), 'exclude': lambda f: f is None }})
    r"""Whether to use [UPS Ground Freight pricing](https://www.shipengine.com/docs/shipping/ups-ground-freight/).  If enabled, then a `freight_class` must also be specified."""  
    