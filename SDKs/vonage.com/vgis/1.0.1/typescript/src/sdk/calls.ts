/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class Calls {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Answer call (On supported devices)
   */
  callAnswer(
    req: operations.CallAnswerRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.CallAnswerResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.CallAnswerRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/self/calls/{id}/answer",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "put",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.CallAnswerResponse =
        new operations.CallAnswerResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.call = utils.objectToClass(httpRes?.data, shared.Call);
          }
          break;
        case [400, 422].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.errorResponse = utils.objectToClass(
              httpRes?.data,
              shared.ErrorResponse
            );
          }
          break;
        case [401, 403, 408, 500, 502].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Put call on hold
   */
  callHold(
    req: operations.CallHoldRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.CallHoldResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.CallHoldRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/self/calls/{id}/hold",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "put",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.CallHoldResponse = new operations.CallHoldResponse({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
      });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.call = utils.objectToClass(httpRes?.data, shared.Call);
          }
          break;
        case [400, 422].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.errorResponse = utils.objectToClass(
              httpRes?.data,
              shared.ErrorResponse
            );
          }
          break;
        case [401, 403, 408, 500, 502].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Transfer call
   */
  callTransfer(
    req: operations.CallTransferRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.CallTransferResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.CallTransferRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/self/calls/{id}/transfer",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "callTransfer",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.CallTransferResponse =
        new operations.CallTransferResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.call = utils.objectToClass(httpRes?.data, shared.Call);
          }
          break;
        case [400, 422].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.errorResponse = utils.objectToClass(
              httpRes?.data,
              shared.ErrorResponse
            );
          }
          break;
        case [401, 403, 408, 500, 502].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Unhold
   */
  callUnold(
    req: operations.CallUnoldRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.CallUnoldResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.CallUnoldRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/self/calls/{id}/hold",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.CallUnoldResponse =
        new operations.CallUnoldResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.call = utils.objectToClass(httpRes?.data, shared.Call);
          }
          break;
        case [400, 422].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.errorResponse = utils.objectToClass(
              httpRes?.data,
              shared.ErrorResponse
            );
          }
          break;
        case [401, 403, 408, 500, 502].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Send call to voicemail
   */
  callVMTransfer(
    req: operations.CallVMTransferRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.CallVMTransferResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.CallVMTransferRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/self/calls/{id}/vmtransfer",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "put",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.CallVMTransferResponse =
        new operations.CallVMTransferResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.call = utils.objectToClass(httpRes?.data, shared.Call);
          }
          break;
        case [400, 422].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.errorResponse = utils.objectToClass(
              httpRes?.data,
              shared.ErrorResponse
            );
          }
          break;
        case [401, 403, 408, 500, 502].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Place a call
   */
  createCall(
    req: shared.CallCreate,
    config?: AxiosRequestConfig
  ): Promise<operations.CreateCallResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new shared.CallCreate(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/self/calls";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.CreateCallResponse =
        new operations.CreateCallResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 201:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.calls = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.calls = utils.objectToClass(
              httpRes?.data,
              shared.Call,
              resFieldDepth
            );
          }
          break;
        case [400, 422].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.errorResponse = utils.objectToClass(
              httpRes?.data,
              shared.ErrorResponse
            );
          }
          break;
        case [401, 403, 408, 500, 502].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * End a call
   */
  destroyCall(
    req: operations.DestroyCallRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.DestroyCallResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DestroyCallRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/self/calls/{id}", req);

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DestroyCallResponse =
        new operations.DestroyCallResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.calls = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.calls = utils.objectToClass(
              httpRes?.data,
              shared.Call,
              resFieldDepth
            );
          }
          break;
        case [400, 422].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.errorResponse = utils.objectToClass(
              httpRes?.data,
              shared.ErrorResponse
            );
          }
          break;
        case [401, 403, 408, 500, 502].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Get calls count
   */
  getCallsCount(
    req: operations.GetCallsCountRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetCallsCountResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetCallsCountRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/self/calls/count";

    const client: AxiosInstance = this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetCallsCountResponse =
        new operations.GetCallsCountResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.eventsCount = utils.objectToClass(
              httpRes?.data,
              shared.EventsCount
            );
          }
          break;
        case [400, 422].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.errorResponse = utils.objectToClass(
              httpRes?.data,
              shared.ErrorResponse
            );
          }
          break;
        case [401, 403, 408, 500, 502].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Get a call
   */
  getRoles(
    req: operations.GetRolesRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetRolesResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetRolesRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/self/calls/{id}", req);

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetRolesResponse = new operations.GetRolesResponse({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
      });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.calls = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.calls = utils.objectToClass(
              httpRes?.data,
              shared.Call,
              resFieldDepth
            );
          }
          break;
        case [400, 422].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.errorResponse = utils.objectToClass(
              httpRes?.data,
              shared.ErrorResponse
            );
          }
          break;
        case [401, 403, 408, 500, 502].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * List active calls
   *
   * @remarks
   * Lists currently active calls
   */
  listCalls(
    req: operations.ListCallsRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.ListCallsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ListCallsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/self/calls";

    const client: AxiosInstance = this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ListCallsResponse =
        new operations.ListCallsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.calls = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.calls = utils.objectToClass(
              httpRes?.data,
              shared.Call,
              resFieldDepth
            );
          }
          break;
        case [400, 422].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.errorResponse = utils.objectToClass(
              httpRes?.data,
              shared.ErrorResponse
            );
          }
          break;
        case [401, 403, 408, 500, 502].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }
}
