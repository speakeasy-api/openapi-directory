/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { DoubleHparamSearchSpace } from "./doublehparamsearchspace";
import { IntArrayHparamSearchSpace } from "./intarrayhparamsearchspace";
import { IntHparamSearchSpace } from "./inthparamsearchspace";
import { StringHparamSearchSpace } from "./stringhparamsearchspace";
import { Expose, Type } from "class-transformer";

/**
 * Hyperparameter search spaces. These should be a subset of training_options.
 */
export class HparamSearchSpaces extends SpeakeasyBase {
  /**
   * Search space for string and enum.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "activationFn" })
  @Type(() => StringHparamSearchSpace)
  activationFn?: StringHparamSearchSpace;

  /**
   * Search space for an int hyperparameter.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "batchSize" })
  @Type(() => IntHparamSearchSpace)
  batchSize?: IntHparamSearchSpace;

  /**
   * Search space for string and enum.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "boosterType" })
  @Type(() => StringHparamSearchSpace)
  boosterType?: StringHparamSearchSpace;

  /**
   * Search space for a double hyperparameter.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "colsampleBylevel" })
  @Type(() => DoubleHparamSearchSpace)
  colsampleBylevel?: DoubleHparamSearchSpace;

  /**
   * Search space for a double hyperparameter.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "colsampleBynode" })
  @Type(() => DoubleHparamSearchSpace)
  colsampleBynode?: DoubleHparamSearchSpace;

  /**
   * Search space for a double hyperparameter.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "colsampleBytree" })
  @Type(() => DoubleHparamSearchSpace)
  colsampleBytree?: DoubleHparamSearchSpace;

  /**
   * Search space for string and enum.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "dartNormalizeType" })
  @Type(() => StringHparamSearchSpace)
  dartNormalizeType?: StringHparamSearchSpace;

  /**
   * Search space for a double hyperparameter.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "dropout" })
  @Type(() => DoubleHparamSearchSpace)
  dropout?: DoubleHparamSearchSpace;

  /**
   * Search space for int array.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "hiddenUnits" })
  @Type(() => IntArrayHparamSearchSpace)
  hiddenUnits?: IntArrayHparamSearchSpace;

  /**
   * Search space for a double hyperparameter.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "l1Reg" })
  @Type(() => DoubleHparamSearchSpace)
  l1Reg?: DoubleHparamSearchSpace;

  /**
   * Search space for a double hyperparameter.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "l2Reg" })
  @Type(() => DoubleHparamSearchSpace)
  l2Reg?: DoubleHparamSearchSpace;

  /**
   * Search space for a double hyperparameter.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "learnRate" })
  @Type(() => DoubleHparamSearchSpace)
  learnRate?: DoubleHparamSearchSpace;

  /**
   * Search space for an int hyperparameter.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "maxTreeDepth" })
  @Type(() => IntHparamSearchSpace)
  maxTreeDepth?: IntHparamSearchSpace;

  /**
   * Search space for a double hyperparameter.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "minSplitLoss" })
  @Type(() => DoubleHparamSearchSpace)
  minSplitLoss?: DoubleHparamSearchSpace;

  /**
   * Search space for an int hyperparameter.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "minTreeChildWeight" })
  @Type(() => IntHparamSearchSpace)
  minTreeChildWeight?: IntHparamSearchSpace;

  /**
   * Search space for an int hyperparameter.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "numClusters" })
  @Type(() => IntHparamSearchSpace)
  numClusters?: IntHparamSearchSpace;

  /**
   * Search space for an int hyperparameter.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "numFactors" })
  @Type(() => IntHparamSearchSpace)
  numFactors?: IntHparamSearchSpace;

  /**
   * Search space for an int hyperparameter.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "numParallelTree" })
  @Type(() => IntHparamSearchSpace)
  numParallelTree?: IntHparamSearchSpace;

  /**
   * Search space for string and enum.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "optimizer" })
  @Type(() => StringHparamSearchSpace)
  optimizer?: StringHparamSearchSpace;

  /**
   * Search space for a double hyperparameter.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "subsample" })
  @Type(() => DoubleHparamSearchSpace)
  subsample?: DoubleHparamSearchSpace;

  /**
   * Search space for string and enum.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "treeMethod" })
  @Type(() => StringHparamSearchSpace)
  treeMethod?: StringHparamSearchSpace;

  /**
   * Search space for a double hyperparameter.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "walsAlpha" })
  @Type(() => DoubleHparamSearchSpace)
  walsAlpha?: DoubleHparamSearchSpace;
}
