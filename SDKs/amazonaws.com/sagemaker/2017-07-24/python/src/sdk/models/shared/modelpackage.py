"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from ..shared import additionalinferencespecificationdefinition as shared_additionalinferencespecificationdefinition
from ..shared import driftcheckbaselines as shared_driftcheckbaselines
from ..shared import inferencespecification as shared_inferencespecification
from ..shared import metadataproperties as shared_metadataproperties
from ..shared import modelapprovalstatus_enum as shared_modelapprovalstatus_enum
from ..shared import modelmetrics as shared_modelmetrics
from ..shared import modelpackagestatus_enum as shared_modelpackagestatus_enum
from ..shared import modelpackagestatusdetails as shared_modelpackagestatusdetails
from ..shared import modelpackagevalidationspecification as shared_modelpackagevalidationspecification
from ..shared import sourcealgorithmspecification as shared_sourcealgorithmspecification
from ..shared import tag as shared_tag
from ..shared import usercontext as shared_usercontext
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from marshmallow import fields
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ModelPackage:
    r"""A versioned model that can be deployed for SageMaker inference."""
    
    additional_inference_specifications: Optional[list[shared_additionalinferencespecificationdefinition.AdditionalInferenceSpecificationDefinition]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AdditionalInferenceSpecifications'), 'exclude': lambda f: f is None }})  
    approval_description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ApprovalDescription'), 'exclude': lambda f: f is None }})  
    certify_for_marketplace: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CertifyForMarketplace'), 'exclude': lambda f: f is None }})  
    created_by: Optional[shared_usercontext.UserContext] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CreatedBy'), 'exclude': lambda f: f is None }})  
    creation_time: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CreationTime'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})  
    customer_metadata_properties: Optional[dict[str, str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CustomerMetadataProperties'), 'exclude': lambda f: f is None }})  
    domain: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Domain'), 'exclude': lambda f: f is None }})  
    drift_check_baselines: Optional[shared_driftcheckbaselines.DriftCheckBaselines] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DriftCheckBaselines'), 'exclude': lambda f: f is None }})  
    inference_specification: Optional[shared_inferencespecification.InferenceSpecification] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('InferenceSpecification'), 'exclude': lambda f: f is None }})  
    last_modified_by: Optional[shared_usercontext.UserContext] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('LastModifiedBy'), 'exclude': lambda f: f is None }})  
    last_modified_time: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('LastModifiedTime'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})  
    metadata_properties: Optional[shared_metadataproperties.MetadataProperties] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('MetadataProperties'), 'exclude': lambda f: f is None }})  
    model_approval_status: Optional[shared_modelapprovalstatus_enum.ModelApprovalStatusEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ModelApprovalStatus'), 'exclude': lambda f: f is None }})  
    model_metrics: Optional[shared_modelmetrics.ModelMetrics] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ModelMetrics'), 'exclude': lambda f: f is None }})  
    model_package_arn: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ModelPackageArn'), 'exclude': lambda f: f is None }})  
    model_package_description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ModelPackageDescription'), 'exclude': lambda f: f is None }})  
    model_package_group_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ModelPackageGroupName'), 'exclude': lambda f: f is None }})  
    model_package_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ModelPackageName'), 'exclude': lambda f: f is None }})  
    model_package_status: Optional[shared_modelpackagestatus_enum.ModelPackageStatusEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ModelPackageStatus'), 'exclude': lambda f: f is None }})  
    model_package_status_details: Optional[shared_modelpackagestatusdetails.ModelPackageStatusDetails] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ModelPackageStatusDetails'), 'exclude': lambda f: f is None }})  
    model_package_version: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ModelPackageVersion'), 'exclude': lambda f: f is None }})  
    sample_payload_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SamplePayloadUrl'), 'exclude': lambda f: f is None }})  
    source_algorithm_specification: Optional[shared_sourcealgorithmspecification.SourceAlgorithmSpecification] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SourceAlgorithmSpecification'), 'exclude': lambda f: f is None }})  
    tags: Optional[list[shared_tag.Tag]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Tags'), 'exclude': lambda f: f is None }})  
    task: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Task'), 'exclude': lambda f: f is None }})  
    validation_specification: Optional[shared_modelpackagevalidationspecification.ModelPackageValidationSpecification] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ValidationSpecification'), 'exclude': lambda f: f is None }})  
    