"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import date_ as shared_date_
from ..shared import pricerecord as shared_pricerecord
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class PriceAccuracyRowDeviceTypeEnum(str, Enum):
    r"""The user's device type."""
    DEVICE_UNSPECIFIED = 'DEVICE_UNSPECIFIED'
    DEVICE_UNKNOWN = 'DEVICE_UNKNOWN'
    DESKTOP = 'DESKTOP'
    MOBILE = 'MOBILE'
    TABLET = 'TABLET'

class PriceAccuracyRowMismatchReasonEnum(str, Enum):
    r"""The reason why the fetched price didn't match the cached price."""
    MISMATCH_REASON_UNSPECIFIED = 'MISMATCH_REASON_UNSPECIFIED'
    MISMATCH_REASON_UNKNOWN = 'MISMATCH_REASON_UNKNOWN'
    TAX_MISMATCH = 'TAX_MISMATCH'
    ROOM_UNAVAILABLE = 'ROOM_UNAVAILABLE'
    SITE_ERROR = 'SITE_ERROR'
    PRICE_FEED_DELAYED = 'PRICE_FEED_DELAYED'
    DISCOUNT_MISSING = 'DISCOUNT_MISSING'
    INCORRECT_DISCOUNT_VALUE = 'INCORRECT_DISCOUNT_VALUE'
    WRONG_ITINERARY = 'WRONG_ITINERARY'

class PriceAccuracyRowSignalSourceEnum(str, Enum):
    r"""Source of the price accuracy signal."""
    SIGNAL_SOURCE_UNSPECIFIED = 'SIGNAL_SOURCE_UNSPECIFIED'
    SIGNAL_SOURCE_UNKNOWN = 'SIGNAL_SOURCE_UNKNOWN'
    FETCHED = 'FETCHED'
    PIXEL = 'PIXEL'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PriceAccuracyRow:
    r"""A price accuracy row."""
    
    adult_occupancy: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('adultOccupancy'), 'exclude': lambda f: f is None }})
    r"""The number of adults in the occupancy details of the validation query."""  
    affects_score: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('affectsScore'), 'exclude': lambda f: f is None }})
    r"""True if this row affects the placement of a price. This field has been renamed to “Affects placement” in Hotel Center."""  
    cached_price_record: Optional[shared_pricerecord.PriceRecord] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cachedPriceRecord'), 'exclude': lambda f: f is None }})
    r"""A price record."""  
    checkin_date: Optional[shared_date_.Date] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('checkinDate'), 'exclude': lambda f: f is None }})
    r"""Represents a whole or partial calendar date, such as a birthday. The time of day and time zone are either specified elsewhere or are insignificant. The date is relative to the Gregorian Calendar. This can represent one of the following: * A full date, with non-zero year, month, and day values. * A month and day, with a zero year (for example, an anniversary). * A year on its own, with a zero month and a zero day. * A year and month, with a zero day (for example, a credit card expiration date). Related types: * google.type.TimeOfDay * google.type.DateTime * google.protobuf.Timestamp"""  
    child_occupancy: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('childOccupancy'), 'exclude': lambda f: f is None }})
    r"""The number of children in the occupancy details of the validation query."""  
    correction_time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('correctionTime'), 'exclude': lambda f: f is None }})
    r"""Time at which an incorrect price is updated to a correct price."""  
    device_type: Optional[PriceAccuracyRowDeviceTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('deviceType'), 'exclude': lambda f: f is None }})
    r"""The user's device type."""  
    fetched_price_record: Optional[shared_pricerecord.PriceRecord] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('fetchedPriceRecord'), 'exclude': lambda f: f is None }})
    r"""A price record."""  
    final_domain: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('finalDomain'), 'exclude': lambda f: f is None }})
    r"""The domain of the final page from which prices are read."""  
    hotel: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('hotel'), 'exclude': lambda f: f is None }})
    r"""Partner-defined hotel ID."""  
    hotel_country_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('hotelCountryCode'), 'exclude': lambda f: f is None }})
    r"""The country of the hotel (based on address)."""  
    length_of_stay_days: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lengthOfStayDays'), 'exclude': lambda f: f is None }})
    r"""Length of stay."""  
    mismatch_reason: Optional[PriceAccuracyRowMismatchReasonEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('mismatchReason'), 'exclude': lambda f: f is None }})
    r"""The reason why the fetched price didn't match the cached price."""  
    rate_rule_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('rateRuleId'), 'exclude': lambda f: f is None }})
    r"""The rate rule of the advertised price for non-public rates."""  
    signal_source: Optional[PriceAccuracyRowSignalSourceEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('signalSource'), 'exclude': lambda f: f is None }})
    r"""Source of the price accuracy signal."""  
    url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('url'), 'exclude': lambda f: f is None }})
    r"""Initial URL visited on the partner website."""  
    user_region_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('userRegionCode'), 'exclude': lambda f: f is None }})
    r"""The user's region."""  
    