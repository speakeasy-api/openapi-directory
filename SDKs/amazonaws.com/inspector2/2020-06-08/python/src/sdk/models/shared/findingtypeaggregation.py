"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import aggregationfindingtype_enum as shared_aggregationfindingtype_enum
from ..shared import aggregationresourcetype_enum as shared_aggregationresourcetype_enum
from ..shared import findingtypesortby_enum as shared_findingtypesortby_enum
from ..shared import sortorder_enum as shared_sortorder_enum
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class FindingTypeAggregation:
    r"""The details that define an aggregation based on finding type."""
    
    finding_type: Optional[shared_aggregationfindingtype_enum.AggregationFindingTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('findingType'), 'exclude': lambda f: f is None }})  
    resource_type: Optional[shared_aggregationresourcetype_enum.AggregationResourceTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('resourceType'), 'exclude': lambda f: f is None }})  
    sort_by: Optional[shared_findingtypesortby_enum.FindingTypeSortByEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sortBy'), 'exclude': lambda f: f is None }})  
    sort_order: Optional[shared_sortorder_enum.SortOrderEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sortOrder'), 'exclude': lambda f: f is None }})  
    