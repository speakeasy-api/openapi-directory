/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * GooglePrivacyDlpV2JobTrigger - Contains a configuration to make dlp api calls on a repeating basis. See https://cloud.google.com/dlp/docs/concepts-job-triggers to learn more.
 */
public class GooglePrivacyDlpV2JobTrigger {
    /**
     * Output only. The creation timestamp of a triggeredJob.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("createTime")
    public String createTime;

    public GooglePrivacyDlpV2JobTrigger withCreateTime(String createTime) {
        this.createTime = createTime;
        return this;
    }
    
    /**
     * User provided description (max 256 chars)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    public String description;

    public GooglePrivacyDlpV2JobTrigger withDescription(String description) {
        this.description = description;
        return this;
    }
    
    /**
     * Display name (max 100 chars)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("displayName")
    public String displayName;

    public GooglePrivacyDlpV2JobTrigger withDisplayName(String displayName) {
        this.displayName = displayName;
        return this;
    }
    
    /**
     * Output only. A stream of errors encountered when the trigger was activated. Repeated errors may result in the JobTrigger automatically being paused. Will return the last 100 errors. Whenever the JobTrigger is modified this list will be cleared.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("errors")
    public GooglePrivacyDlpV2Error[] errors;

    public GooglePrivacyDlpV2JobTrigger withErrors(GooglePrivacyDlpV2Error[] errors) {
        this.errors = errors;
        return this;
    }
    
    /**
     * Controls what and how to inspect for findings.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("inspectJob")
    public GooglePrivacyDlpV2InspectJobConfig inspectJob;

    public GooglePrivacyDlpV2JobTrigger withInspectJob(GooglePrivacyDlpV2InspectJobConfig inspectJob) {
        this.inspectJob = inspectJob;
        return this;
    }
    
    /**
     * Output only. The timestamp of the last time this trigger executed.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("lastRunTime")
    public String lastRunTime;

    public GooglePrivacyDlpV2JobTrigger withLastRunTime(String lastRunTime) {
        this.lastRunTime = lastRunTime;
        return this;
    }
    
    /**
     * Unique resource name for the triggeredJob, assigned by the service when the triggeredJob is created, for example `projects/dlp-test-project/jobTriggers/53234423`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    public String name;

    public GooglePrivacyDlpV2JobTrigger withName(String name) {
        this.name = name;
        return this;
    }
    
    /**
     * Required. A status for this trigger.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("status")
    public GooglePrivacyDlpV2JobTriggerStatusEnum status;

    public GooglePrivacyDlpV2JobTrigger withStatus(GooglePrivacyDlpV2JobTriggerStatusEnum status) {
        this.status = status;
        return this;
    }
    
    /**
     * A list of triggers which will be OR'ed together. Only one in the list needs to trigger for a job to be started. The list may contain only a single Schedule trigger and must have at least one object.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("triggers")
    public GooglePrivacyDlpV2Trigger[] triggers;

    public GooglePrivacyDlpV2JobTrigger withTriggers(GooglePrivacyDlpV2Trigger[] triggers) {
        this.triggers = triggers;
        return this;
    }
    
    /**
     * Output only. The last update timestamp of a triggeredJob.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("updateTime")
    public String updateTime;

    public GooglePrivacyDlpV2JobTrigger withUpdateTime(String updateTime) {
        this.updateTime = updateTime;
        return this;
    }
    
    public GooglePrivacyDlpV2JobTrigger(){}
}
