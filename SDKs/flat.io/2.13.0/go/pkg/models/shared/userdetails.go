// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"time"
)

// UserDetailsTypeEnum - The type of user account
type UserDetailsTypeEnum string

const (
	UserDetailsTypeEnumUser  UserDetailsTypeEnum = "user"
	UserDetailsTypeEnumGuest UserDetailsTypeEnum = "guest"
)

func (e *UserDetailsTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "user":
		fallthrough
	case "guest":
		*e = UserDetailsTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UserDetailsTypeEnum: %s", s)
	}
}

// UserDetails - Public User details summary
type UserDetails struct {
	// User's biography
	Bio *string `json:"bio,omitempty"`
	// User's Class Role (for Edu users only)
	ClassRole *ClassRolesEnum `json:"classRole,omitempty"`
	// Cover picture (backgroud) for the profile
	CoverPicture *string `json:"coverPicture,omitempty"`
	// The ID of the user profile cover picture
	CoverPictureFile *string `json:"coverPictureFile,omitempty"`
	// Firstname of the user (for education users)
	Firstname *string `json:"firstname,omitempty"`
	// Number of followers the user have
	FollowersCount *int64 `json:"followersCount,omitempty"`
	// Number of people the user follow
	FollowingCount *int64 `json:"followingCount,omitempty"`
	// Link to user profile (for Indiv. users only)
	HTMLURL *string `json:"htmlUrl,omitempty"`
	// The user unique identifier
	ID *string `json:"id,omitempty"`
	// An array of the instrument identifiers.
	// The format of the strings is `{instrument-group}.{instrument-id}`.
	//
	Instruments []string `json:"instruments,omitempty"`
	// Will be 'true' if user is part of the Flat Team
	IsFlatTeam *bool `json:"isFlatTeam,omitempty"`
	// User license status. 'true' if user is an individual Power user
	IsPowerUser *bool `json:"isPowerUser,omitempty"`
	// Lastname of the user (for education users)
	Lastname *string `json:"lastname,omitempty"`
	// Number of the scores liked by the user
	LikedScoresCount *int64 `json:"likedScoresCount,omitempty"`
	// The user language
	Locale *FlatLocalesEnum `json:"locale,omitempty"`
	// A displayable name for the user (for consumer users)
	Name *string `json:"name,omitempty"`
	// Organization ID (for Edu users only)
	Organization *string `json:"organization,omitempty"`
	// User's Organization Role (for Edu users only)
	OrganizationRole *OrganizationRolesEnum `json:"organizationRole,omitempty"`
	// Number of public scores the user have
	OwnedPublicScoresCount *int64 `json:"ownedPublicScoresCount,omitempty"`
	// The URL of the picture to display
	Picture *string `json:"picture,omitempty"`
	// The ID of the user profile picture
	PictureFile *string `json:"pictureFile,omitempty"`
	// The name that can be directly printed (name, firstname & lastname, or username)
	PrintableName *string `json:"printableName,omitempty"`
	// Tell either this user profile is private or not (individual accounts only)
	PrivateProfile *bool `json:"privateProfile,omitempty"`
	// Theme (background) for the profile
	ProfileTheme *string `json:"profileTheme,omitempty"`
	// Date the user signed up
	RegistrationDate *time.Time `json:"registrationDate,omitempty"`
	// The type of user account
	Type *UserDetailsTypeEnum `json:"type,omitempty"`
	// The user name (unique for the organization)
	Username *string `json:"username,omitempty"`
}
