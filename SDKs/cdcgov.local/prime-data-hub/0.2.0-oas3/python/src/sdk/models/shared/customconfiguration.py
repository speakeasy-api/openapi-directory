"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Any, Optional

class CustomConfigurationFormatEnum(str, Enum):
    r"""The format of the serializer"""
    CSV = 'CSV'
    HL7 = 'HL7'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CustomConfiguration:
    r"""A custom configuration for a custom schema"""
    
    format: CustomConfigurationFormatEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('format') }})
    r"""The format of the serializer"""  
    schema_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('schemaName') }})
    r"""The name of the custom schema"""  
    transport: Any = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('transport') }})
    r"""The transport to use"""  
    type: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type') }})
    r"""The discrimenator"""  
    name_format: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('nameFormat'), 'exclude': lambda f: f is None }})
    r"""The format to use for the file name generated by the translation"""  
    receiving_organization: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('receivingOrganization'), 'exclude': lambda f: f is None }})
    r"""The name of the receiving organization in the message"""  
    