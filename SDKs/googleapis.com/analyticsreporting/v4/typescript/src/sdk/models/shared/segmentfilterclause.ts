/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { SegmentDimensionFilter } from "./segmentdimensionfilter";
import { SegmentMetricFilter } from "./segmentmetricfilter";
import { Expose, Type } from "class-transformer";

/**
 * Filter Clause to be used in a segment definition, can be wither a metric or a dimension filter.
 */
export class SegmentFilterClause extends SpeakeasyBase {
  /**
   * Dimension filter specifies the filtering options on a dimension.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "dimensionFilter" })
  @Type(() => SegmentDimensionFilter)
  dimensionFilter?: SegmentDimensionFilter;

  /**
   * Metric filter to be used in a segment filter clause.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "metricFilter" })
  @Type(() => SegmentMetricFilter)
  metricFilter?: SegmentMetricFilter;

  /**
   * Matches the complement (`!`) of the filter.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "not" })
  not?: boolean;
}
