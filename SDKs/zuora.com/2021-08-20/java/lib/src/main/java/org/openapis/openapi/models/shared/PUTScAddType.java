/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.time.LocalDate;

/**
 * PUTScAddType - Container for custom fields of a Rate Plan Charge object.
 * 
 */
public class PUTScAddType {
    /**
     * Specifies the type of charges that you want a specific discount to apply to.
     * 
     * Values:
     * 
     * * `ONETIME`
     * * `RECURRING`
     * * `USAGE`
     * * `ONETIMERECURRING`
     * * `ONETIMEUSAGE`
     * * `RECURRINGUSAGE`
     * * `ONETIMERECURRINGUSAGE`
     * 
     * Available for the following charge type for the Discount-Fixed Amount and Discount-Percentage charge models:
     * 
     * * Recurring
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("applyDiscountTo")
    public String applyDiscountTo;
    public PUTScAddType withApplyDiscountTo(String applyDiscountTo) {
        this.applyDiscountTo = applyDiscountTo;
        return this;
    }
    
    /**
     * Sets the bill cycle day (BCD) for the charge. The BCD determines which day of the month customer is billed.
     * 
     * Values: `1`-`31`
     * 
     * Available for the following charge types:
     * 
     * * Recurring
     * * Usage-based
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("billCycleDay")
    public String billCycleDay;
    public PUTScAddType withBillCycleDay(String billCycleDay) {
        this.billCycleDay = billCycleDay;
        return this;
    }
    
    /**
     * Specifies how to determine the billing day for the charge. When this field is set to `SpecificDayofMonth`, set the `BillCycleDay` field. When this field is set to `SpecificDayofWeek`, set the `weeklyBillCycleDay` field.
     * 
     * Values:
     * 
     * * `DefaultFromCustomer`
     * * `SpecificDayofMonth`
     * * `SubscriptionStartDay`
     * * `ChargeTriggerDay`
     * * `SpecificDayofWeek`
     * 
     * Available for the following charge types:
     * 
     * * Recurring
     * * Usage-based
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("billCycleType")
    public String billCycleType;
    public PUTScAddType withBillCycleType(String billCycleType) {
        this.billCycleType = billCycleType;
        return this;
    }
    
    /**
     * Billing period for the charge. The start day of the billing period is also called the bill cycle day (BCD).
     * 
     * Values:
     * 
     * * `Month`
     * * `Quarter`
     * * `Semi_Annual`
     * * `Annual`
     * * `Eighteen_Months`
     * * `Two_Years`
     * * `Three_Years`
     * * `Five_Years`
     * * `Specific_Months`
     * * `Subscription_Term`
     * * `Week`
     * * `Specific_Weeks`
     * 
     * Available for the following charge types:
     * 
     * * Recurring
     * * Usage-based
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("billingPeriod")
    public String billingPeriod;
    public PUTScAddType withBillingPeriod(String billingPeriod) {
        this.billingPeriod = billingPeriod;
        return this;
    }
    
    /**
     * Aligns charges within the same subscription if multiple charges begin on different dates.
     * 
     * Values:
     * 
     * * `AlignToCharge`
     * * `AlignToSubscriptionStart`
     * * `AlignToTermStart`
     * 
     * Available for the following charge types:
     * 
     * * Recurring
     * * Usage-based
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("billingPeriodAlignment")
    public String billingPeriodAlignment;
    public PUTScAddType withBillingPeriodAlignment(String billingPeriodAlignment) {
        this.billingPeriodAlignment = billingPeriodAlignment;
        return this;
    }
    
    /**
     * Billing timing for the charge for recurring charge types. Not avaliable for one time, usage and discount charges.
     * 
     * Values:
     * 
     * * `IN_ADVANCE` (default)
     * * `IN_ARREARS`
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("billingTiming")
    public String billingTiming;
    public PUTScAddType withBillingTiming(String billingTiming) {
        this.billingTiming = billingTiming;
        return this;
    }
    
    /**
     * Container for charge model configuration data.
     * 
     * **Note**: This field is only available if you have the High Water Mark, Pre-Rated Pricing, or Multi-Attribute Pricing charge models enabled. These charge models are available for customers with Enterprise and Nine editions by default. If you are a Growth customer, see [Zuora Editions](https://knowledgecenter.zuora.com/BB_Introducing_Z_Business/C_Zuora_Editions) for pricing information.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("chargeModelConfiguration")
    public ChargeModelConfigurationType chargeModelConfiguration;
    public PUTScAddType withChargeModelConfiguration(ChargeModelConfigurationType chargeModelConfiguration) {
        this.chargeModelConfiguration = chargeModelConfiguration;
        return this;
    }
    
    /**
     * Description of the charge.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    public String description;
    public PUTScAddType withDescription(String description) {
        this.description = description;
        return this;
    }
    
    /**
     * Specifies the amount of fixed-amount discount.
     * 
     * Available for the following charge type for the Discount-Fixed Amount charge model:
     * 
     * * Recurring
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("discountAmount")
    public Double discountAmount;
    public PUTScAddType withDiscountAmount(Double discountAmount) {
        this.discountAmount = discountAmount;
        return this;
    }
    
    /**
     * Specifies if the discount applies to the product rate plan only , the entire subscription, or to any activity in the account.
     * 
     * Values:
     * 
     * * `rateplan`
     * * `subscription`
     * * `account`
     * 
     * Available for the following charge type for the Discount-Fixed Amount and Discount-Percentage charge models:
     * 
     * * Recurring
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("discountLevel")
    public String discountLevel;
    public PUTScAddType withDiscountLevel(String discountLevel) {
        this.discountLevel = discountLevel;
        return this;
    }
    
    /**
     * Specifies the percentage of a percentage discount. 
     * 
     * Available for the following charge type for the Discount-Percentage charge model:
     * 
     * * Recurring
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("discountPercentage")
    public Double discountPercentage;
    public PUTScAddType withDiscountPercentage(Double discountPercentage) {
        this.discountPercentage = discountPercentage;
        return this;
    }
    
    /**
     * Defines when the charge ends after the charge trigger date. If the subscription ends before the charge end date, the charge ends when the subscription ends. But if the subscription end date is subsequently changed through a Renewal, or Terms and Conditions amendment, the charge will end on the charge end date.
     * 
     * Values:
     * 
     * * `Subscription_End`
     * * `Fixed_Period`
     * * `Specific_End_Date`
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("endDateCondition")
    public String endDateCondition;
    public PUTScAddType withEndDateCondition(String endDateCondition) {
        this.endDateCondition = endDateCondition;
        return this;
    }
    
    /**
     * Specifies the number of units in the base set of units for this charge. Must be &gt;=`0`.
     * 
     * Available for the following charge types for the Overage charge model:
     * 
     * * Recurring
     * * Usage-based
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("includedUnits")
    public Double includedUnits;
    public PUTScAddType withIncludedUnits(Double includedUnits) {
        this.includedUnits = includedUnits;
        return this;
    }
    
    /**
     * The list price base for the product rate plan charge.
     * 
     * Values:
     * 
     * * `Per_Billing_Period`
     * * `Per_Month`
     * * `Per_Week`
     * 
     * Available for the following charge type for the Flat Fee, Per Unit, Volume Pricing, and Tiered Pricing charge models:
     * 
     * * Recurring
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("listPriceBase")
    public String listPriceBase;
    public PUTScAddType withListPriceBase(String listPriceBase) {
        this.listPriceBase = listPriceBase;
        return this;
    }
    
    /**
     * Unique number that identifies the charge. System-generated if not provided.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("number")
    public String number;
    public PUTScAddType withNumber(String number) {
        this.number = number;
        return this;
    }
    
    /**
     * Specifies the number of periods to use when calculating charges in an overage smoothing charge model.
     * 
     * Available for the following charge type for the Overage and Tiered with Overage charge models:
     * 
     * * Usage-based
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("numberOfPeriods")
    public Long numberOfPeriods;
    public PUTScAddType withNumberOfPeriods(Long numberOfPeriods) {
        this.numberOfPeriods = numberOfPeriods;
        return this;
    }
    
    /**
     * Price for units over the allowed amount. 
     * 
     * Available for the following charge type for the Overage and Tiered with Overage charge models:
     * 
     * * Usage-based
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("overagePrice")
    public Double overagePrice;
    public PUTScAddType withOveragePrice(Double overagePrice) {
        this.overagePrice = overagePrice;
        return this;
    }
    
    /**
     * Determines whether to credit the customer with unused units of usage.
     * 
     * Values:
     * 
     * * `NoCredit`
     * * `CreditBySpecificRate`
     * 
     * Available for the following charge type for the Overage and Tiered with Overage charge models:
     * 
     * * Usage-based
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("overageUnusedUnitsCreditOption")
    public String overageUnusedUnitsCreditOption;
    public PUTScAddType withOverageUnusedUnitsCreditOption(String overageUnusedUnitsCreditOption) {
        this.overageUnusedUnitsCreditOption = overageUnusedUnitsCreditOption;
        return this;
    }
    
    /**
     * Price for units in the subscription rate plan.
     * 
     * Supports all charge types for the Flat Fee and Per Unit charge models
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("price")
    public Double price;
    public PUTScAddType withPrice(Double price) {
        this.price = price;
        return this;
    }
    
    /**
     * Applies an automatic price change when a termed subscription is renewed. The Zuora Billing Admin setting Enable Automatic Price Change When Subscriptions are Renewed?  must be set to Yes to use this field.  See Define Default Subscription Settings for more information on setting this option.
     * 
     * Values:
     * 
     * * `NoChange` (default)
     * * `SpecificPercentageValue`
     * * `UseLatestProductCatalogPricing`
     * 
     * Available for the following charge types:
     * 
     * * Recurring
     * * Usage-based
     * * Not available for the Fixed-Amount Discount charge model.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("priceChangeOption")
    public String priceChangeOption;
    public PUTScAddType withPriceChangeOption(String priceChangeOption) {
        this.priceChangeOption = priceChangeOption;
        return this;
    }
    
    /**
     * Specifies the percentage to increase or decrease the price of a termed subscription's renewal. Required if you set the `PriceChangeOption` field to `SpecificPercentageValue`.
     * 
     * Decimal between -100 and 100.
     * 
     * Available for the following charge types:
     * 
     * * Recurring
     * * Usage-based
     * 
     * Not available for the Fixed-Amount Discount charge model.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("priceIncreasePercentage")
    public Double priceIncreasePercentage;
    public PUTScAddType withPriceIncreasePercentage(Double priceIncreasePercentage) {
        this.priceIncreasePercentage = priceIncreasePercentage;
        return this;
    }
    
    @JsonProperty("productRatePlanChargeId")
    public String productRatePlanChargeId;
    public PUTScAddType withProductRatePlanChargeId(String productRatePlanChargeId) {
        this.productRatePlanChargeId = productRatePlanChargeId;
        return this;
    }
    
    /**
     * Number of units. Must be &gt;=`0`.
     * 
     * Available for the following charge types for the Per Unit, Volume Pricing, and Tiered Pricing charge models:
     * 
     * * One-time
     * * Recurring
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("quantity")
    public Double quantity;
    public PUTScAddType withQuantity(Double quantity) {
        this.quantity = quantity;
        return this;
    }
    
    /**
     * Specifies a rating group based on which usage records are rated.
     * 
     * Possible values:
     * 
     * - `ByBillingPeriod` (default): The rating is based on all the usages in a billing period.
     * - `ByUsageStartDate`: The rating is based on all the usages on the same usage start date. 
     * - `ByUsageRecord`: The rating is based on each usage record.
     * - `ByUsageUpload`: The rating is based on all the  usages in a uploaded usage file (`.xls` or `.csv`).
     * - `ByGroupId`: The rating is based on all the usages in a custom group.
     * 
     * **Note:** 
     * - The `ByBillingPeriod` value can be applied for all charge models. 
     * - The `ByUsageStartDate`, `ByUsageRecord`, and `ByUsageUpload` values can only be applied for per unit, volume pricing, and tiered pricing charge models. 
     * - The `ByGroupId` value is only available if you have the Active Rating feature enabled.
     * - Use this field only for Usage charges. One-Time Charges and Recurring Charges return `NULL`.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ratingGroup")
    public String ratingGroup;
    public PUTScAddType withRatingGroup(String ratingGroup) {
        this.ratingGroup = ratingGroup;
        return this;
    }
    
    /**
     * Specifies the number of month or week for the charges billing period. Required if you set the value of the `billingPeriod` field to `Specific_Months` or `Specific_Weeks`.
     * 
     * Available for the following charge types:
     * 
     * * Recurring
     * * Usage-based
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("specificBillingPeriod")
    public Long specificBillingPeriod;
    public PUTScAddType withSpecificBillingPeriod(Long specificBillingPeriod) {
        this.specificBillingPeriod = specificBillingPeriod;
        return this;
    }
    
    /**
     * Defines when the charge ends after the charge trigger date.
     * 
     * This field is only applicable when the `endDateCondition` field is set to `Specific_End_Date`.
     * 
     * If the subscription ends before the specific end date, the charge ends when the subscription ends. But if the subscription end date is subsequently changed through a Renewal, or Terms and Conditions amendment, the charge will end on the specific end date.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd")
    @JsonProperty("specificEndDate")
    public LocalDate specificEndDate;
    public PUTScAddType withSpecificEndDate(LocalDate specificEndDate) {
        this.specificEndDate = specificEndDate;
        return this;
    }
    
    /**
     * Container for Volume, Tiered or Tiered with Overage charge models. Supports the following charge types:
     * 
     * * One-time
     * * Recurring
     * * Usage-based
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tiers")
    public POSTTierType[] tiers;
    public PUTScAddType withTiers(POSTTierType[] tiers) {
        this.tiers = tiers;
        return this;
    }
    
    /**
     * Specifies when to start billing the customer for the charge. Required if the `triggerEvent` field is set to `USD`.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd")
    @JsonProperty("triggerDate")
    public LocalDate triggerDate;
    public PUTScAddType withTriggerDate(LocalDate triggerDate) {
        this.triggerDate = triggerDate;
        return this;
    }
    
    /**
     * Specifies when to start billing the customer for the charge.
     * 
     * Values:
     * 
     * * `UCE`
     * * `USA`
     * * `UCA`
     * * `USD`
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("triggerEvent")
    public String triggerEvent;
    public PUTScAddType withTriggerEvent(String triggerEvent) {
        this.triggerEvent = triggerEvent;
        return this;
    }
    
    /**
     * Specifies the rate to credit a customer for unused units of usage. This field applies only for overage charge models when the `OverageUnusedUnitsCreditOption` field is set to `CreditBySpecificRate`.
     * 
     * Available for the following charge type for the Overage and Tiered with Overage charge models:
     * 
     * * Usage-based
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("unusedUnitsCreditRates")
    public Double unusedUnitsCreditRates;
    public PUTScAddType withUnusedUnitsCreditRates(Double unusedUnitsCreditRates) {
        this.unusedUnitsCreditRates = unusedUnitsCreditRates;
        return this;
    }
    
    /**
     * The period type used to define when the charge ends. 
     * 
     * Values:
     * 
     * * `Billing_Periods`
     * * `Days`
     * * `Weeks`
     * * `Months`
     * * `Years`
     * 
     * You must use this field together with the `upToPeriods` field to specify the time period.
     * 
     * This field is applicable only when the `endDateCondition` field is set to `Fixed_Period`. 
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("upToPeriods")
    public Long upToPeriods;
    public PUTScAddType withUpToPeriods(Long upToPeriods) {
        this.upToPeriods = upToPeriods;
        return this;
    }
    
    /**
     * The period type used to define when the charge ends. 
     * 
     * Values:
     * 
     * * `Billing_Periods`
     * * `Days`
     * * `Weeks`
     * * `Months`
     * * `Years`
     * 
     * You must use this field together with the `upToPeriods` field to specify the time period.
     * 
     * This field is applicable only when the `endDateCondition` field is set to `Fixed_Period`. 
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("upToPeriodsType")
    public String upToPeriodsType;
    public PUTScAddType withUpToPeriodsType(String upToPeriodsType) {
        this.upToPeriodsType = upToPeriodsType;
        return this;
    }
    
}
