<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class FloodlightActivities 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Deletes an existing floodlight activity.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DfareportingFloodlightActivitiesDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DfareportingFloodlightActivitiesDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DfareportingFloodlightActivitiesDeleteResponse
     */
	public function dfareportingFloodlightActivitiesDelete(
        \OpenAPI\OpenAPI\Models\Operations\DfareportingFloodlightActivitiesDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DfareportingFloodlightActivitiesDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DfareportingFloodlightActivitiesDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/userprofiles/{profileId}/floodlightActivities/{id}', \OpenAPI\OpenAPI\Models\Operations\DfareportingFloodlightActivitiesDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DfareportingFloodlightActivitiesDeleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DfareportingFloodlightActivitiesDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Generates a tag for a floodlight activity.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DfareportingFloodlightActivitiesGeneratetagRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DfareportingFloodlightActivitiesGeneratetagSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DfareportingFloodlightActivitiesGeneratetagResponse
     */
	public function dfareportingFloodlightActivitiesGeneratetag(
        \OpenAPI\OpenAPI\Models\Operations\DfareportingFloodlightActivitiesGeneratetagRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DfareportingFloodlightActivitiesGeneratetagSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DfareportingFloodlightActivitiesGeneratetagResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/userprofiles/{profileId}/floodlightActivities/generatetag', \OpenAPI\OpenAPI\Models\Operations\DfareportingFloodlightActivitiesGeneratetagRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DfareportingFloodlightActivitiesGeneratetagRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DfareportingFloodlightActivitiesGeneratetagResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->floodlightActivitiesGenerateTagResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\FloodlightActivitiesGenerateTagResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets one floodlight activity by ID.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DfareportingFloodlightActivitiesGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DfareportingFloodlightActivitiesGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DfareportingFloodlightActivitiesGetResponse
     */
	public function dfareportingFloodlightActivitiesGet(
        \OpenAPI\OpenAPI\Models\Operations\DfareportingFloodlightActivitiesGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DfareportingFloodlightActivitiesGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DfareportingFloodlightActivitiesGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/userprofiles/{profileId}/floodlightActivities/{id}', \OpenAPI\OpenAPI\Models\Operations\DfareportingFloodlightActivitiesGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DfareportingFloodlightActivitiesGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DfareportingFloodlightActivitiesGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->floodlightActivity = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\FloodlightActivity', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Inserts a new floodlight activity.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DfareportingFloodlightActivitiesInsertRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DfareportingFloodlightActivitiesInsertSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DfareportingFloodlightActivitiesInsertResponse
     */
	public function dfareportingFloodlightActivitiesInsert(
        \OpenAPI\OpenAPI\Models\Operations\DfareportingFloodlightActivitiesInsertRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DfareportingFloodlightActivitiesInsertSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DfareportingFloodlightActivitiesInsertResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/userprofiles/{profileId}/floodlightActivities', \OpenAPI\OpenAPI\Models\Operations\DfareportingFloodlightActivitiesInsertRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "floodlightActivity", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DfareportingFloodlightActivitiesInsertRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DfareportingFloodlightActivitiesInsertResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->floodlightActivity = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\FloodlightActivity', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieves a list of floodlight activities, possibly filtered. This method supports paging.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DfareportingFloodlightActivitiesListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DfareportingFloodlightActivitiesListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DfareportingFloodlightActivitiesListResponse
     */
	public function dfareportingFloodlightActivitiesList(
        \OpenAPI\OpenAPI\Models\Operations\DfareportingFloodlightActivitiesListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DfareportingFloodlightActivitiesListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DfareportingFloodlightActivitiesListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/userprofiles/{profileId}/floodlightActivities', \OpenAPI\OpenAPI\Models\Operations\DfareportingFloodlightActivitiesListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DfareportingFloodlightActivitiesListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DfareportingFloodlightActivitiesListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->floodlightActivitiesListResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\FloodlightActivitiesListResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates an existing floodlight activity. This method supports patch semantics.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DfareportingFloodlightActivitiesPatchRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DfareportingFloodlightActivitiesPatchSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DfareportingFloodlightActivitiesPatchResponse
     */
	public function dfareportingFloodlightActivitiesPatch(
        \OpenAPI\OpenAPI\Models\Operations\DfareportingFloodlightActivitiesPatchRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DfareportingFloodlightActivitiesPatchSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DfareportingFloodlightActivitiesPatchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/userprofiles/{profileId}/floodlightActivities', \OpenAPI\OpenAPI\Models\Operations\DfareportingFloodlightActivitiesPatchRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "floodlightActivity", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DfareportingFloodlightActivitiesPatchRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DfareportingFloodlightActivitiesPatchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->floodlightActivity = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\FloodlightActivity', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates an existing floodlight activity.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DfareportingFloodlightActivitiesUpdateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DfareportingFloodlightActivitiesUpdateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DfareportingFloodlightActivitiesUpdateResponse
     */
	public function dfareportingFloodlightActivitiesUpdate(
        \OpenAPI\OpenAPI\Models\Operations\DfareportingFloodlightActivitiesUpdateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DfareportingFloodlightActivitiesUpdateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DfareportingFloodlightActivitiesUpdateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/userprofiles/{profileId}/floodlightActivities', \OpenAPI\OpenAPI\Models\Operations\DfareportingFloodlightActivitiesUpdateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "floodlightActivity", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DfareportingFloodlightActivitiesUpdateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DfareportingFloodlightActivitiesUpdateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->floodlightActivity = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\FloodlightActivity', 'json');
            }
        }

        return $response;
    }
}