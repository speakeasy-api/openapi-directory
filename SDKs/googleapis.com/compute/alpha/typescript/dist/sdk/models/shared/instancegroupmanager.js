"use strict";
/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.InstanceGroupManager = exports.InstanceGroupManagerListManagedInstancesResultsEnum = exports.InstanceGroupManagerFailoverActionEnum = void 0;
var utils_1 = require("../../../internal/utils");
var distributionpolicy_1 = require("./distributionpolicy");
var instancegroupmanageractionssummary_1 = require("./instancegroupmanageractionssummary");
var instancegroupmanagerallinstancesconfig_1 = require("./instancegroupmanagerallinstancesconfig");
var instancegroupmanagerautohealingpolicy_1 = require("./instancegroupmanagerautohealingpolicy");
var instancegroupmanagerinstancelifecyclepolicy_1 = require("./instancegroupmanagerinstancelifecyclepolicy");
var instancegroupmanagerstandbypolicy_1 = require("./instancegroupmanagerstandbypolicy");
var instancegroupmanagerstatus_1 = require("./instancegroupmanagerstatus");
var instancegroupmanagerupdatepolicy_1 = require("./instancegroupmanagerupdatepolicy");
var instancegroupmanagerversion_1 = require("./instancegroupmanagerversion");
var namedport_1 = require("./namedport");
var statefulpolicy_1 = require("./statefulpolicy");
var class_transformer_1 = require("class-transformer");
/**
 * The action to perform in case of zone failure. Only one value is supported, NO_FAILOVER. The default is NO_FAILOVER.
 */
var InstanceGroupManagerFailoverActionEnum;
(function (InstanceGroupManagerFailoverActionEnum) {
    InstanceGroupManagerFailoverActionEnum["NoFailover"] = "NO_FAILOVER";
    InstanceGroupManagerFailoverActionEnum["Unknown"] = "UNKNOWN";
})(InstanceGroupManagerFailoverActionEnum = exports.InstanceGroupManagerFailoverActionEnum || (exports.InstanceGroupManagerFailoverActionEnum = {}));
/**
 * Pagination behavior of the listManagedInstances API method for this managed instance group.
 */
var InstanceGroupManagerListManagedInstancesResultsEnum;
(function (InstanceGroupManagerListManagedInstancesResultsEnum) {
    InstanceGroupManagerListManagedInstancesResultsEnum["Pageless"] = "PAGELESS";
    InstanceGroupManagerListManagedInstancesResultsEnum["Paginated"] = "PAGINATED";
})(InstanceGroupManagerListManagedInstancesResultsEnum = exports.InstanceGroupManagerListManagedInstancesResultsEnum || (exports.InstanceGroupManagerListManagedInstancesResultsEnum = {}));
/**
 * Represents a Managed Instance Group resource. An instance group is a collection of VM instances that you can manage as a single entity. For more information, read Instance groups. For zonal Managed Instance Group, use the instanceGroupManagers resource. For regional Managed Instance Group, use the regionInstanceGroupManagers resource.
 */
var InstanceGroupManager = /** @class */ (function (_super) {
    __extends(InstanceGroupManager, _super);
    function InstanceGroupManager() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "allInstancesConfig" }),
        (0, class_transformer_1.Type)(function () { return instancegroupmanagerallinstancesconfig_1.InstanceGroupManagerAllInstancesConfig; }),
        __metadata("design:type", instancegroupmanagerallinstancesconfig_1.InstanceGroupManagerAllInstancesConfig)
    ], InstanceGroupManager.prototype, "allInstancesConfig", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({ elemType: instancegroupmanagerautohealingpolicy_1.InstanceGroupManagerAutoHealingPolicy }),
        (0, class_transformer_1.Expose)({ name: "autoHealingPolicies" }),
        (0, class_transformer_1.Type)(function () { return instancegroupmanagerautohealingpolicy_1.InstanceGroupManagerAutoHealingPolicy; }),
        __metadata("design:type", Array)
    ], InstanceGroupManager.prototype, "autoHealingPolicies", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "baseInstanceName" }),
        __metadata("design:type", String)
    ], InstanceGroupManager.prototype, "baseInstanceName", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "creationTimestamp" }),
        __metadata("design:type", String)
    ], InstanceGroupManager.prototype, "creationTimestamp", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "currentActions" }),
        (0, class_transformer_1.Type)(function () { return instancegroupmanageractionssummary_1.InstanceGroupManagerActionsSummary; }),
        __metadata("design:type", instancegroupmanageractionssummary_1.InstanceGroupManagerActionsSummary)
    ], InstanceGroupManager.prototype, "currentActions", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "description" }),
        __metadata("design:type", String)
    ], InstanceGroupManager.prototype, "description", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "distributionPolicy" }),
        (0, class_transformer_1.Type)(function () { return distributionpolicy_1.DistributionPolicy; }),
        __metadata("design:type", distributionpolicy_1.DistributionPolicy)
    ], InstanceGroupManager.prototype, "distributionPolicy", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "failoverAction" }),
        __metadata("design:type", String)
    ], InstanceGroupManager.prototype, "failoverAction", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "fingerprint" }),
        __metadata("design:type", String)
    ], InstanceGroupManager.prototype, "fingerprint", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "id" }),
        __metadata("design:type", String)
    ], InstanceGroupManager.prototype, "id", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "instanceGroup" }),
        __metadata("design:type", String)
    ], InstanceGroupManager.prototype, "instanceGroup", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "instanceLifecyclePolicy" }),
        (0, class_transformer_1.Type)(function () { return instancegroupmanagerinstancelifecyclepolicy_1.InstanceGroupManagerInstanceLifecyclePolicy; }),
        __metadata("design:type", instancegroupmanagerinstancelifecyclepolicy_1.InstanceGroupManagerInstanceLifecyclePolicy)
    ], InstanceGroupManager.prototype, "instanceLifecyclePolicy", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "instanceTemplate" }),
        __metadata("design:type", String)
    ], InstanceGroupManager.prototype, "instanceTemplate", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "kind" }),
        __metadata("design:type", String)
    ], InstanceGroupManager.prototype, "kind", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "listManagedInstancesResults" }),
        __metadata("design:type", String)
    ], InstanceGroupManager.prototype, "listManagedInstancesResults", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "name" }),
        __metadata("design:type", String)
    ], InstanceGroupManager.prototype, "name", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({ elemType: namedport_1.NamedPort }),
        (0, class_transformer_1.Expose)({ name: "namedPorts" }),
        (0, class_transformer_1.Type)(function () { return namedport_1.NamedPort; }),
        __metadata("design:type", Array)
    ], InstanceGroupManager.prototype, "namedPorts", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "region" }),
        __metadata("design:type", String)
    ], InstanceGroupManager.prototype, "region", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "selfLink" }),
        __metadata("design:type", String)
    ], InstanceGroupManager.prototype, "selfLink", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "selfLinkWithId" }),
        __metadata("design:type", String)
    ], InstanceGroupManager.prototype, "selfLinkWithId", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "serviceAccount" }),
        __metadata("design:type", String)
    ], InstanceGroupManager.prototype, "serviceAccount", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "standbyPolicy" }),
        (0, class_transformer_1.Type)(function () { return instancegroupmanagerstandbypolicy_1.InstanceGroupManagerStandbyPolicy; }),
        __metadata("design:type", instancegroupmanagerstandbypolicy_1.InstanceGroupManagerStandbyPolicy)
    ], InstanceGroupManager.prototype, "standbyPolicy", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "statefulPolicy" }),
        (0, class_transformer_1.Type)(function () { return statefulpolicy_1.StatefulPolicy; }),
        __metadata("design:type", statefulpolicy_1.StatefulPolicy)
    ], InstanceGroupManager.prototype, "statefulPolicy", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "status" }),
        (0, class_transformer_1.Type)(function () { return instancegroupmanagerstatus_1.InstanceGroupManagerStatus; }),
        __metadata("design:type", instancegroupmanagerstatus_1.InstanceGroupManagerStatus)
    ], InstanceGroupManager.prototype, "status", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "targetPools" }),
        __metadata("design:type", Array)
    ], InstanceGroupManager.prototype, "targetPools", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "targetSize" }),
        __metadata("design:type", Number)
    ], InstanceGroupManager.prototype, "targetSize", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "targetStoppedSize" }),
        __metadata("design:type", Number)
    ], InstanceGroupManager.prototype, "targetStoppedSize", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "targetSuspendedSize" }),
        __metadata("design:type", Number)
    ], InstanceGroupManager.prototype, "targetSuspendedSize", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "updatePolicy" }),
        (0, class_transformer_1.Type)(function () { return instancegroupmanagerupdatepolicy_1.InstanceGroupManagerUpdatePolicy; }),
        __metadata("design:type", instancegroupmanagerupdatepolicy_1.InstanceGroupManagerUpdatePolicy)
    ], InstanceGroupManager.prototype, "updatePolicy", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({ elemType: instancegroupmanagerversion_1.InstanceGroupManagerVersion }),
        (0, class_transformer_1.Expose)({ name: "versions" }),
        (0, class_transformer_1.Type)(function () { return instancegroupmanagerversion_1.InstanceGroupManagerVersion; }),
        __metadata("design:type", Array)
    ], InstanceGroupManager.prototype, "versions", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "zone" }),
        __metadata("design:type", String)
    ], InstanceGroupManager.prototype, "zone", void 0);
    return InstanceGroupManager;
}(utils_1.SpeakeasyBase));
exports.InstanceGroupManager = InstanceGroupManager;
