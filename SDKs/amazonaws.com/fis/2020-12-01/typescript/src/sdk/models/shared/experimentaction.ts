/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { ExperimentActionState } from "./experimentactionstate";
import { Expose, Transform, Type } from "class-transformer";

/**
 * Describes the action for an experiment.
 */
export class ExperimentAction extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "actionId" })
  actionId?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "description" })
  description?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "endTime" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  endTime?: Date;

  @SpeakeasyMetadata()
  @Expose({ name: "parameters" })
  parameters?: Record<string, string>;

  @SpeakeasyMetadata()
  @Expose({ name: "startAfter" })
  startAfter?: string[];

  @SpeakeasyMetadata()
  @Expose({ name: "startTime" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  startTime?: Date;

  @SpeakeasyMetadata()
  @Expose({ name: "state" })
  @Type(() => ExperimentActionState)
  state?: ExperimentActionState;

  @SpeakeasyMetadata()
  @Expose({ name: "targets" })
  targets?: Record<string, string>;
}
