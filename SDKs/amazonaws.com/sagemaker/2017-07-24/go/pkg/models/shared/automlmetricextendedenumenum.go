// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type AutoMLMetricExtendedEnumEnum string

const (
	AutoMLMetricExtendedEnumEnumAccuracy         AutoMLMetricExtendedEnumEnum = "Accuracy"
	AutoMLMetricExtendedEnumEnumMse              AutoMLMetricExtendedEnumEnum = "MSE"
	AutoMLMetricExtendedEnumEnumF1               AutoMLMetricExtendedEnumEnum = "F1"
	AutoMLMetricExtendedEnumEnumF1macro          AutoMLMetricExtendedEnumEnum = "F1macro"
	AutoMLMetricExtendedEnumEnumAuc              AutoMLMetricExtendedEnumEnum = "AUC"
	AutoMLMetricExtendedEnumEnumRmse             AutoMLMetricExtendedEnumEnum = "RMSE"
	AutoMLMetricExtendedEnumEnumMae              AutoMLMetricExtendedEnumEnum = "MAE"
	AutoMLMetricExtendedEnumEnumR2               AutoMLMetricExtendedEnumEnum = "R2"
	AutoMLMetricExtendedEnumEnumBalancedAccuracy AutoMLMetricExtendedEnumEnum = "BalancedAccuracy"
	AutoMLMetricExtendedEnumEnumPrecision        AutoMLMetricExtendedEnumEnum = "Precision"
	AutoMLMetricExtendedEnumEnumPrecisionMacro   AutoMLMetricExtendedEnumEnum = "PrecisionMacro"
	AutoMLMetricExtendedEnumEnumRecall           AutoMLMetricExtendedEnumEnum = "Recall"
	AutoMLMetricExtendedEnumEnumRecallMacro      AutoMLMetricExtendedEnumEnum = "RecallMacro"
	AutoMLMetricExtendedEnumEnumLogLoss          AutoMLMetricExtendedEnumEnum = "LogLoss"
	AutoMLMetricExtendedEnumEnumInferenceLatency AutoMLMetricExtendedEnumEnum = "InferenceLatency"
)

func (e AutoMLMetricExtendedEnumEnum) ToPointer() *AutoMLMetricExtendedEnumEnum {
	return &e
}

func (e *AutoMLMetricExtendedEnumEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Accuracy":
		fallthrough
	case "MSE":
		fallthrough
	case "F1":
		fallthrough
	case "F1macro":
		fallthrough
	case "AUC":
		fallthrough
	case "RMSE":
		fallthrough
	case "MAE":
		fallthrough
	case "R2":
		fallthrough
	case "BalancedAccuracy":
		fallthrough
	case "Precision":
		fallthrough
	case "PrecisionMacro":
		fallthrough
	case "Recall":
		fallthrough
	case "RecallMacro":
		fallthrough
	case "LogLoss":
		fallthrough
	case "InferenceLatency":
		*e = AutoMLMetricExtendedEnumEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AutoMLMetricExtendedEnumEnum: %v", v)
	}
}
