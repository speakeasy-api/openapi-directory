// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

type EcAlphabetSequence struct {
	// The n-th character.
	Char *string `json:"char,omitempty"`
	// The n-th character after the l33t transformation.
	L33tchar *string `json:"l33tchar,omitempty"`
	// The penalty applied to this character if it is part of an alphabet sequence.
	//
	// The penalty is a float number in the range [0, 1]. Full penalty, 0; no penalty, 1.
	//
	Penalty *float64 `json:"penalty,omitempty"`
}

type EcEntropyDistribution struct {
	// The n-th character.
	Char *string `json:"char,omitempty"`
	// The n-th character after the l33t transformation.
	L33tchar *string `json:"l33tchar,omitempty"`
	// The amount of entropy contributed by this character, expressed as percentage of the total.
	Percentage *float64 `json:"percentage,omitempty"`
}

type EcKeyboardSequence struct {
	// The n-th character.
	Char *string `json:"char,omitempty"`
	// The n-th character after the l33t transformation.
	L33tchar *string `json:"l33tchar,omitempty"`
	// The penalty applied to this character if it is part of a keyboard sequence.
	//
	// The penalty is a float number in the range [0, 1]. Full penalty, 0; no penalty, 1.
	//
	Penalty *float64 `json:"penalty,omitempty"`
}

type EcNumberSequence struct {
	// The n-th character.
	Char *string `json:"char,omitempty"`
	// The n-th character after the l33t transformation.
	L33tchar *string `json:"l33tchar,omitempty"`
	// The penalty applied to this character if it is part of a number sequence.
	//
	// The penalty is a float number in the range [0, 1]. Full penalty, 0; no penalty, 1.
	//
	Penalty *float64 `json:"penalty,omitempty"`
}

type EcRepeatedChars struct {
	// The n-th character.
	Char *string `json:"char,omitempty"`
	// The n-th character after the l33t transformation.
	L33tchar *string `json:"l33tchar,omitempty"`
	// The penalty applied to this character if it is repeated.
	//
	// The penalty is a float number in the range [0, 1]. Full penalty, 0; no penalty, 1.
	//
	Penalty *float64 `json:"penalty,omitempty"`
}

type EcTotal struct {
	// The n-th character.
	Char *string `json:"char,omitempty"`
	// The n-th character after the l33t transformation.
	L33tchar *string `json:"l33tchar,omitempty"`
	// The total penalty applied to each character.
	//
	// The penalty is a float number in the range [0, 1]. Full penalty, 0; no penalty, 1.
	//
	Penalty *float64 `json:"penalty,omitempty"`
}

type EcWords struct {
	// The n-th character.
	Char *string `json:"char,omitempty"`
	// The n-th character after the l33t transformation.
	L33tchar *string `json:"l33tchar,omitempty"`
	// The penalty applied to this character if it is part of a word.
	//
	// The penalty is a float number in the range [0, 1]. Full penalty, 0; no penalty, 1.
	//
	Penalty *float64 `json:"penalty,omitempty"`
}

// Ec - The password analysis, including the calculated entropy.
type Ec struct {
	// **The penalty applied to each character that has been found to be part of an alphabet sequence.**
	//
	// The penalty is a float number in the range [0, 1]. Full penalty, 0; no penalty, 1.
	//
	AlphabetSequence []EcAlphabetSequence `json:"alphabetSequence,omitempty"`
	// **This API version number.**
	//
	APIVersion *string `json:"apiVersion,omitempty"`
	// **The detected keyboard, QWERTY or Dvorak.**
	//
	DetectedKeyboard *string `json:"detectedKeyboard,omitempty"`
	// **The ratio entropy / idealEntropy.**
	//
	// It is a float number in the range [0, 1].
	//
	Efficiency *float64 `json:"efficiency,omitempty"`
	// **The entropy calculated for the input password.**
	//
	// It is measured in bits.
	//
	Entropy *float64 `json:"entropy,omitempty"`
	// **The distribution of the calculated entropy among the password characters.**
	//
	EntropyDistribution []EcEntropyDistribution `json:"entropyDistribution,omitempty"`
	// **The Shannon entropy.**
	//
	// The Shannon entropy is the entropy calculated if no penalizations - words, number sequence, alphabet sequence, etc - were found in the password.
	//
	// It is measured in bits.
	//
	IdealEntropy *float64 `json:"idealEntropy,omitempty"`
	// **The penalty applied to each character that has been found to be part of a keyboard sequence.**
	//
	// The penalty is a float number in the range [0, 1]. Full penalty, 0; no penalty, 1.
	//
	KeyboardSequence []EcKeyboardSequence `json:"keyboardSequence,omitempty"`
	// The analyzed password after the l33t substitution.
	L33tPassword *string `json:"l33tPassword,omitempty"`
	// **The penalty applied to the whole password because of irregular entropy distribution.**
	//
	// This penalty is a float number in the range [0, 1]. Full penalty, 0; no penalty, 1.
	//
	NonUniformEntropyDistributionPenalty *float64 `json:"nonUniformEntropyDistributionPenalty,omitempty"`
	// **The penalty applied to each character that has been found to be part of a number sequence.**
	//
	// The penalty is a float number in the range [0, 1]. Full penalty, 0; no penalty, 1.
	//
	NumberSequence []EcNumberSequence `json:"numberSequence,omitempty"`
	// The analyzed password.
	Password *string `json:"password,omitempty"`
	// The number of characters the password has.
	PasswordLength *int64 `json:"passwordLength,omitempty"`
	// **The penalty applied to each character that has been found to be part of a word, number sequence, alphabet sequence, etc.**
	//
	// The penalty is a float number in the range [0, 1]. Full penalty, 0; no penalty, 1.
	//
	// Its value is equal to the value of the input parameter *penalty*.
	//
	Penalty *float64 `json:"penalty,omitempty"`
	// **The penalty applied to each character that are repeated**
	//
	// The penalty is a float number in the range [0, 1]. Full penalty, 0; no penalty, 1.
	//
	RepeatedChars []EcRepeatedChars `json:"repeatedChars,omitempty"`
	// **The identifier of the request that corresponds to this response.**
	//
	RequestID *string `json:"requestId,omitempty"`
	// **The timestamp for this response.**
	//
	// Milliseconds from the epoch of 1970-01-01T00:00:00Z.
	//
	RequestTimestamp *float64 `json:"requestTimestamp,omitempty"`
	Summary          []string `json:"summary,omitempty"`
	// **The total penalty applied to each character.**
	//
	// The penalty is a float number in the range [0, 1]. Full penalty, 0; no penalty, 1.
	//
	Total []EcTotal `json:"total,omitempty"`
	// **The penalty applied to each character that has been found to be part of a word.**
	//
	// The penalty is a float number in the range [0, 1]. Full penalty, 0; no penalty, 1.
	//
	Words []EcWords `json:"words,omitempty"`
}
