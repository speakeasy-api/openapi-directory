// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// GETDeleteClusterActionEnum
type GETDeleteClusterActionEnum string

const (
	GETDeleteClusterActionEnumDeleteCluster GETDeleteClusterActionEnum = "DeleteCluster"
)

func (e GETDeleteClusterActionEnum) ToPointer() *GETDeleteClusterActionEnum {
	return &e
}

func (e *GETDeleteClusterActionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "DeleteCluster":
		*e = GETDeleteClusterActionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GETDeleteClusterActionEnum: %v", v)
	}
}

// GETDeleteClusterVersionEnum
type GETDeleteClusterVersionEnum string

const (
	GETDeleteClusterVersionEnumTwoThousandAndTwelve1201 GETDeleteClusterVersionEnum = "2012-12-01"
)

func (e GETDeleteClusterVersionEnum) ToPointer() *GETDeleteClusterVersionEnum {
	return &e
}

func (e *GETDeleteClusterVersionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "2012-12-01":
		*e = GETDeleteClusterVersionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GETDeleteClusterVersionEnum: %v", v)
	}
}

type GETDeleteClusterRequest struct {
	Action GETDeleteClusterActionEnum `queryParam:"style=form,explode=true,name=Action"`
	// <p>The identifier of the cluster to be deleted.</p> <p>Constraints:</p> <ul> <li> <p>Must contain lowercase characters.</p> </li> <li> <p>Must contain from 1 to 63 alphanumeric characters or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens.</p> </li> </ul>
	ClusterIdentifier string `queryParam:"style=form,explode=true,name=ClusterIdentifier"`
	// <p>The identifier of the final snapshot that is to be created immediately before deleting the cluster. If this parameter is provided, <i>SkipFinalClusterSnapshot</i> must be <code>false</code>. </p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 alphanumeric characters.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens.</p> </li> </ul>
	FinalClusterSnapshotIdentifier *string `queryParam:"style=form,explode=true,name=FinalClusterSnapshotIdentifier"`
	// <p>The number of days that a manual snapshot is retained. If the value is -1, the manual snapshot is retained indefinitely.</p> <p>The value must be either -1 or an integer between 1 and 3,653.</p> <p>The default value is -1.</p>
	FinalClusterSnapshotRetentionPeriod *int64 `queryParam:"style=form,explode=true,name=FinalClusterSnapshotRetentionPeriod"`
	// <p>Determines whether a final snapshot of the cluster is created before Amazon Redshift deletes the cluster. If <code>true</code>, a final cluster snapshot is not created. If <code>false</code>, a final cluster snapshot is created before the cluster is deleted. </p> <note> <p>The <i>FinalClusterSnapshotIdentifier</i> parameter must be specified if <i>SkipFinalClusterSnapshot</i> is <code>false</code>.</p> </note> <p>Default: <code>false</code> </p>
	SkipFinalClusterSnapshot *bool                       `queryParam:"style=form,explode=true,name=SkipFinalClusterSnapshot"`
	Version                  GETDeleteClusterVersionEnum `queryParam:"style=form,explode=true,name=Version"`
	XAmzAlgorithm            *string                     `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256        *string                     `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential           *string                     `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate                 *string                     `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken        *string                     `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature            *string                     `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders        *string                     `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
}

type GETDeleteClusterResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
