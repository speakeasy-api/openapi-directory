/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

public class ContainersQuotaInfoOrgQuota {
    /**
     * The number of public IP addresses that can be assigned across all spaces of the organization.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("floating_ips_max")
    public String floatingIpsMax;
    public ContainersQuotaInfoOrgQuota withFloatingIpsMax(String floatingIpsMax) {
        this.floatingIpsMax = floatingIpsMax;
        return this;
    }
    
    /**
     * The number of public IP addresses that are required for one space. If the number of public IP addresses is not available, then a new space cannot be created to be used with IBM Containers. 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("floating_ips_space_default")
    public String floatingIpsSpaceDefault;
    public ContainersQuotaInfoOrgQuota withFloatingIpsSpaceDefault(String floatingIpsSpaceDefault) {
        this.floatingIpsSpaceDefault = floatingIpsSpaceDefault;
        return this;
    }
    
    /**
     * The number of public IP addresses that are currently assigned to the spaces of the organization.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("floating_ips_usage")
    public Integer floatingIpsUsage;
    public ContainersQuotaInfoOrgQuota withFloatingIpsUsage(Integer floatingIpsUsage) {
        this.floatingIpsUsage = floatingIpsUsage;
        return this;
    }
    
    /**
     * The maximum amount of container memory on the compute host that can be assigned across the spaces of the organization.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ram_max")
    public Integer ramMax;
    public ContainersQuotaInfoOrgQuota withRamMax(Integer ramMax) {
        this.ramMax = ramMax;
        return this;
    }
    
    /**
     * The amount of container memory that is required to be used for one space. If this amount is not available, then a new space cannot be created to be used with IBM Containers. 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ram_space_default")
    public Integer ramSpaceDefault;
    public ContainersQuotaInfoOrgQuota withRamSpaceDefault(Integer ramSpaceDefault) {
        this.ramSpaceDefault = ramSpaceDefault;
        return this;
    }
    
    /**
     * The amount of container memory that is currently used across all spaces of the organization.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ram_usage")
    public Integer ramUsage;
    public ContainersQuotaInfoOrgQuota withRamUsage(Integer ramUsage) {
        this.ramUsage = ramUsage;
        return this;
    }
    
    /**
     * The number of subnets that were created across all spaces of the organization.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("subnet_usage")
    public Integer subnetUsage;
    public ContainersQuotaInfoOrgQuota withSubnetUsage(Integer subnetUsage) {
        this.subnetUsage = subnetUsage;
        return this;
    }
    
    /**
     * The number of subnets that is required to create a new space. If this number is not available, then a new space cannot be created to be used with IBM Containers.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("subnets_default")
    public Integer subnetsDefault;
    public ContainersQuotaInfoOrgQuota withSubnetsDefault(Integer subnetsDefault) {
        this.subnetsDefault = subnetsDefault;
        return this;
    }
    
    /**
     * The maximum number of container private subnet that can be created across all spaces of the organization.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("subnets_max")
    public Integer subnetsMax;
    public ContainersQuotaInfoOrgQuota withSubnetsMax(Integer subnetsMax) {
        this.subnetsMax = subnetsMax;
        return this;
    }
    
}
