"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations
from typing import Optional

class DeviceCommandLogs:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def get_network_sm_device_device_command_logs(self, request: operations.GetNetworkSmDeviceDeviceCommandLogsRequest) -> operations.GetNetworkSmDeviceDeviceCommandLogsResponse:
        r"""Return historical records of commands sent to Systems Manager devices
        Return historical records of commands sent to Systems Manager devices. Note that this will include the name of the Dashboard user who initiated the command if it was generated by a Dashboard admin rather than the automatic behavior of the system; you may wish to filter this out of any reports.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetNetworkSmDeviceDeviceCommandLogsRequest, base_url, '/networks/{networkId}/sm/devices/{deviceId}/deviceCommandLogs', request)
        
        query_params = utils.get_query_params(operations.GetNetworkSmDeviceDeviceCommandLogsRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetNetworkSmDeviceDeviceCommandLogsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[operations.GetNetworkSmDeviceDeviceCommandLogs200ApplicationJSON]])
                res.get_network_sm_device_device_command_logs_200_application_json_objects = out

        return res

    