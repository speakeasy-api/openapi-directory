/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi;

import com.fasterxml.jackson.databind.ObjectMapper;
import java.net.http.HttpResponse;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.apache.http.NameValuePair;
import org.openapis.openapi.utils.HTTPClient;
import org.openapis.openapi.utils.HTTPRequest;
import org.openapis.openapi.utils.JSON;
import org.openapis.openapi.utils.SerializedBody;
import org.openapis.openapi.utils.SpeakeasyHTTPClient;

/**
 * This is the public Twilio REST API.
 */
public class SDK {
	/**
	 * SERVERS contains the list of server urls available to the SDK.
	 */
	public static final String[] SERVERS = {
        "https://voice.twilio.com",
	};
    /**
	 * CREATE_BYOC_TRUNK_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] CREATE_BYOC_TRUNK_SERVERS = {
        "https://voice.twilio.com",
    };
	
    /**
	 * CREATE_CONNECTION_POLICY_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] CREATE_CONNECTION_POLICY_SERVERS = {
        "https://voice.twilio.com",
    };
	
    /**
	 * CREATE_CONNECTION_POLICY_TARGET_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] CREATE_CONNECTION_POLICY_TARGET_SERVERS = {
        "https://voice.twilio.com",
    };
	
    /**
	 * CREATE_DIALING_PERMISSIONS_COUNTRY_BULK_UPDATE_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] CREATE_DIALING_PERMISSIONS_COUNTRY_BULK_UPDATE_SERVERS = {
        "https://voice.twilio.com",
    };
	
    /**
	 * CREATE_IP_RECORD_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] CREATE_IP_RECORD_SERVERS = {
        "https://voice.twilio.com",
    };
	
    /**
	 * CREATE_SOURCE_IP_MAPPING_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] CREATE_SOURCE_IP_MAPPING_SERVERS = {
        "https://voice.twilio.com",
    };
	
    /**
	 * DELETE_ARCHIVED_CALL_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] DELETE_ARCHIVED_CALL_SERVERS = {
        "https://voice.twilio.com",
    };
	
    /**
	 * DELETE_BYOC_TRUNK_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] DELETE_BYOC_TRUNK_SERVERS = {
        "https://voice.twilio.com",
    };
	
    /**
	 * DELETE_CONNECTION_POLICY_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] DELETE_CONNECTION_POLICY_SERVERS = {
        "https://voice.twilio.com",
    };
	
    /**
	 * DELETE_CONNECTION_POLICY_TARGET_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] DELETE_CONNECTION_POLICY_TARGET_SERVERS = {
        "https://voice.twilio.com",
    };
	
    /**
	 * DELETE_IP_RECORD_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] DELETE_IP_RECORD_SERVERS = {
        "https://voice.twilio.com",
    };
	
    /**
	 * DELETE_SOURCE_IP_MAPPING_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] DELETE_SOURCE_IP_MAPPING_SERVERS = {
        "https://voice.twilio.com",
    };
	
    /**
	 * FETCH_BYOC_TRUNK_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_BYOC_TRUNK_SERVERS = {
        "https://voice.twilio.com",
    };
	
    /**
	 * FETCH_CONNECTION_POLICY_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_CONNECTION_POLICY_SERVERS = {
        "https://voice.twilio.com",
    };
	
    /**
	 * FETCH_CONNECTION_POLICY_TARGET_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_CONNECTION_POLICY_TARGET_SERVERS = {
        "https://voice.twilio.com",
    };
	
    /**
	 * FETCH_DIALING_PERMISSIONS_COUNTRY_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_DIALING_PERMISSIONS_COUNTRY_SERVERS = {
        "https://voice.twilio.com",
    };
	
    /**
	 * FETCH_DIALING_PERMISSIONS_SETTINGS_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_DIALING_PERMISSIONS_SETTINGS_SERVERS = {
        "https://voice.twilio.com",
    };
	
    /**
	 * FETCH_IP_RECORD_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_IP_RECORD_SERVERS = {
        "https://voice.twilio.com",
    };
	
    /**
	 * FETCH_SOURCE_IP_MAPPING_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_SOURCE_IP_MAPPING_SERVERS = {
        "https://voice.twilio.com",
    };
	
    /**
	 * LIST_BYOC_TRUNK_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] LIST_BYOC_TRUNK_SERVERS = {
        "https://voice.twilio.com",
    };
	
    /**
	 * LIST_CONNECTION_POLICY_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] LIST_CONNECTION_POLICY_SERVERS = {
        "https://voice.twilio.com",
    };
	
    /**
	 * LIST_CONNECTION_POLICY_TARGET_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] LIST_CONNECTION_POLICY_TARGET_SERVERS = {
        "https://voice.twilio.com",
    };
	
    /**
	 * LIST_DIALING_PERMISSIONS_COUNTRY_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] LIST_DIALING_PERMISSIONS_COUNTRY_SERVERS = {
        "https://voice.twilio.com",
    };
	
    /**
	 * LIST_DIALING_PERMISSIONS_HRS_PREFIXES_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] LIST_DIALING_PERMISSIONS_HRS_PREFIXES_SERVERS = {
        "https://voice.twilio.com",
    };
	
    /**
	 * LIST_IP_RECORD_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] LIST_IP_RECORD_SERVERS = {
        "https://voice.twilio.com",
    };
	
    /**
	 * LIST_SOURCE_IP_MAPPING_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] LIST_SOURCE_IP_MAPPING_SERVERS = {
        "https://voice.twilio.com",
    };
	
    /**
	 * UPDATE_BYOC_TRUNK_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] UPDATE_BYOC_TRUNK_SERVERS = {
        "https://voice.twilio.com",
    };
	
    /**
	 * UPDATE_CONNECTION_POLICY_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] UPDATE_CONNECTION_POLICY_SERVERS = {
        "https://voice.twilio.com",
    };
	
    /**
	 * UPDATE_CONNECTION_POLICY_TARGET_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] UPDATE_CONNECTION_POLICY_TARGET_SERVERS = {
        "https://voice.twilio.com",
    };
	
    /**
	 * UPDATE_DIALING_PERMISSIONS_SETTINGS_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] UPDATE_DIALING_PERMISSIONS_SETTINGS_SERVERS = {
        "https://voice.twilio.com",
    };
	
    /**
	 * UPDATE_IP_RECORD_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] UPDATE_IP_RECORD_SERVERS = {
        "https://voice.twilio.com",
    };
	
    /**
	 * UPDATE_SOURCE_IP_MAPPING_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] UPDATE_SOURCE_IP_MAPPING_SERVERS = {
        "https://voice.twilio.com",
    };
	
  		

	private HTTPClient _defaultClient;
	private HTTPClient _securityClient;
	
	private String _serverUrl;
	private String _language = "java";
	private String _sdkVersion = "0.0.1";
	private String _genVersion = "internal";
	/**
	 * The Builder class allows the configuration of a new instance of the SDK.
	 */
	public static class Builder {
		private HTTPClient client;
		
		private String serverUrl;
		private java.util.Map<String, String> params = new java.util.HashMap<String, String>();

		private Builder() {
		}

		/**
		 * Allows the default HTTP client to be overridden with a custom implementation.
		 * @param client The HTTP client to use for all requests.
		 * @return The builder instance.
		 */
		public Builder setClient(HTTPClient client) {
			this.client = client;
			return this;
		}
		
		/**
		 * Allows the overriding of the default server URL.
		 * @param serverUrl The server URL to use for all requests.
		 * @return The builder instance.
		 */
		public Builder setServerURL(String serverUrl) {
			this.serverUrl = serverUrl;
			return this;
		}
		
		/**
		 * Allows the overriding of the default server URL  with a templated URL populated with the provided parameters.
		 * @param serverUrl The server URL to use for all requests.
		 * @param params The parameters to use when templating the URL.
		 * @return The builder instance.
		 */
		public Builder setServerURL(String serverUrl, java.util.Map<String, String> params) {
			this.serverUrl = serverUrl;
			this.params = params;
			return this;
		}
		
		/**
		 * Builds a new instance of the SDK.
		 * @return The SDK instance.
		 * @throws Exception Thrown if the SDK could not be built.
		 */
		public SDK build() throws Exception {
			return new SDK(this.client, this.serverUrl, this.params);
		}
	}

	/**
	 * Get a new instance of the SDK builder to configure a new instance of the SDK.
	 * @return The SDK builder instance.
	 */
	public static Builder builder() {
		return new Builder();
	}

	private SDK(HTTPClient client, String serverUrl, java.util.Map<String, String> params) throws Exception {
		this._defaultClient = client;
		
		if (this._defaultClient == null) {
			this._defaultClient = new SpeakeasyHTTPClient();
		}
		
		if (this._securityClient == null) {
			this._securityClient = this._defaultClient;
		}

		if (serverUrl != null && !serverUrl.isBlank()) {
			this._serverUrl = org.openapis.openapi.utils.Utils.templateUrl(serverUrl, params);
		}
		
		if (this._serverUrl == null) {
			this._serverUrl = SERVERS[0];
		}
		
	}

    public org.openapis.openapi.models.operations.CreateByocTrunkResponse createByocTrunk(org.openapis.openapi.models.operations.CreateByocTrunkCreateByocTrunkRequest request, org.openapis.openapi.models.operations.CreateByocTrunkSecurity security) throws Exception {
        return this.createByocTrunk(request, security, null);
    }

    public org.openapis.openapi.models.operations.CreateByocTrunkResponse createByocTrunk(org.openapis.openapi.models.operations.CreateByocTrunkCreateByocTrunkRequest request, org.openapis.openapi.models.operations.CreateByocTrunkSecurity security, String serverURL) throws Exception {
        String baseUrl = CREATE_BYOC_TRUNK_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/v1/ByocTrunks");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.CreateByocTrunkResponse res = new org.openapis.openapi.models.operations.CreateByocTrunkResponse() {{
            voiceV1ByocTrunk = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.VoiceV1ByocTrunk out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.VoiceV1ByocTrunk.class);
                res.voiceV1ByocTrunk = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.CreateConnectionPolicyResponse createConnectionPolicy(org.openapis.openapi.models.operations.CreateConnectionPolicyCreateConnectionPolicyRequest request, org.openapis.openapi.models.operations.CreateConnectionPolicySecurity security) throws Exception {
        return this.createConnectionPolicy(request, security, null);
    }

    public org.openapis.openapi.models.operations.CreateConnectionPolicyResponse createConnectionPolicy(org.openapis.openapi.models.operations.CreateConnectionPolicyCreateConnectionPolicyRequest request, org.openapis.openapi.models.operations.CreateConnectionPolicySecurity security, String serverURL) throws Exception {
        String baseUrl = CREATE_CONNECTION_POLICY_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/v1/ConnectionPolicies");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.CreateConnectionPolicyResponse res = new org.openapis.openapi.models.operations.CreateConnectionPolicyResponse() {{
            voiceV1ConnectionPolicy = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.VoiceV1ConnectionPolicy out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.VoiceV1ConnectionPolicy.class);
                res.voiceV1ConnectionPolicy = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.CreateConnectionPolicyTargetResponse createConnectionPolicyTarget(org.openapis.openapi.models.operations.CreateConnectionPolicyTargetRequest request, org.openapis.openapi.models.operations.CreateConnectionPolicyTargetSecurity security) throws Exception {
        return this.createConnectionPolicyTarget(request, security, null);
    }

    public org.openapis.openapi.models.operations.CreateConnectionPolicyTargetResponse createConnectionPolicyTarget(org.openapis.openapi.models.operations.CreateConnectionPolicyTargetRequest request, org.openapis.openapi.models.operations.CreateConnectionPolicyTargetSecurity security, String serverURL) throws Exception {
        String baseUrl = CREATE_CONNECTION_POLICY_TARGET_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.CreateConnectionPolicyTargetRequest.class, baseUrl, "/v1/ConnectionPolicies/{ConnectionPolicySid}/Targets", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.CreateConnectionPolicyTargetResponse res = new org.openapis.openapi.models.operations.CreateConnectionPolicyTargetResponse() {{
            voiceV1ConnectionPolicyConnectionPolicyTarget = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.VoiceV1ConnectionPolicyConnectionPolicyTarget out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.VoiceV1ConnectionPolicyConnectionPolicyTarget.class);
                res.voiceV1ConnectionPolicyConnectionPolicyTarget = out;
            }
        }

        return res;
    }

    /**
     * Create a bulk update request to change voice dialing country permissions of one or more countries identified by the corresponding [ISO country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.CreateDialingPermissionsCountryBulkUpdateResponse createDialingPermissionsCountryBulkUpdate(org.openapis.openapi.models.operations.CreateDialingPermissionsCountryBulkUpdateCreateDialingPermissionsCountryBulkUpdateRequest request, org.openapis.openapi.models.operations.CreateDialingPermissionsCountryBulkUpdateSecurity security) throws Exception {
        return this.createDialingPermissionsCountryBulkUpdate(request, security, null);
    }

    /**
     * Create a bulk update request to change voice dialing country permissions of one or more countries identified by the corresponding [ISO country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.CreateDialingPermissionsCountryBulkUpdateResponse createDialingPermissionsCountryBulkUpdate(org.openapis.openapi.models.operations.CreateDialingPermissionsCountryBulkUpdateCreateDialingPermissionsCountryBulkUpdateRequest request, org.openapis.openapi.models.operations.CreateDialingPermissionsCountryBulkUpdateSecurity security, String serverURL) throws Exception {
        String baseUrl = CREATE_DIALING_PERMISSIONS_COUNTRY_BULK_UPDATE_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/v1/DialingPermissions/BulkCountryUpdates");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.CreateDialingPermissionsCountryBulkUpdateResponse res = new org.openapis.openapi.models.operations.CreateDialingPermissionsCountryBulkUpdateResponse() {{
            voiceV1DialingPermissionsDialingPermissionsCountryBulkUpdate = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.VoiceV1DialingPermissionsDialingPermissionsCountryBulkUpdate out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.VoiceV1DialingPermissionsDialingPermissionsCountryBulkUpdate.class);
                res.voiceV1DialingPermissionsDialingPermissionsCountryBulkUpdate = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.CreateIpRecordResponse createIpRecord(org.openapis.openapi.models.operations.CreateIpRecordCreateIpRecordRequest request, org.openapis.openapi.models.operations.CreateIpRecordSecurity security) throws Exception {
        return this.createIpRecord(request, security, null);
    }

    public org.openapis.openapi.models.operations.CreateIpRecordResponse createIpRecord(org.openapis.openapi.models.operations.CreateIpRecordCreateIpRecordRequest request, org.openapis.openapi.models.operations.CreateIpRecordSecurity security, String serverURL) throws Exception {
        String baseUrl = CREATE_IP_RECORD_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/v1/IpRecords");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.CreateIpRecordResponse res = new org.openapis.openapi.models.operations.CreateIpRecordResponse() {{
            voiceV1IpRecord = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.VoiceV1IpRecord out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.VoiceV1IpRecord.class);
                res.voiceV1IpRecord = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.CreateSourceIpMappingResponse createSourceIpMapping(org.openapis.openapi.models.operations.CreateSourceIpMappingCreateSourceIpMappingRequest request, org.openapis.openapi.models.operations.CreateSourceIpMappingSecurity security) throws Exception {
        return this.createSourceIpMapping(request, security, null);
    }

    public org.openapis.openapi.models.operations.CreateSourceIpMappingResponse createSourceIpMapping(org.openapis.openapi.models.operations.CreateSourceIpMappingCreateSourceIpMappingRequest request, org.openapis.openapi.models.operations.CreateSourceIpMappingSecurity security, String serverURL) throws Exception {
        String baseUrl = CREATE_SOURCE_IP_MAPPING_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/v1/SourceIpMappings");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.CreateSourceIpMappingResponse res = new org.openapis.openapi.models.operations.CreateSourceIpMappingResponse() {{
            voiceV1SourceIpMapping = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.VoiceV1SourceIpMapping out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.VoiceV1SourceIpMapping.class);
                res.voiceV1SourceIpMapping = out;
            }
        }

        return res;
    }

    /**
     * Delete an archived call record from Bulk Export. Note: this does not also delete the record from the Voice API.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DeleteArchivedCallResponse deleteArchivedCall(org.openapis.openapi.models.operations.DeleteArchivedCallRequest request, org.openapis.openapi.models.operations.DeleteArchivedCallSecurity security) throws Exception {
        return this.deleteArchivedCall(request, security, null);
    }

    /**
     * Delete an archived call record from Bulk Export. Note: this does not also delete the record from the Voice API.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DeleteArchivedCallResponse deleteArchivedCall(org.openapis.openapi.models.operations.DeleteArchivedCallRequest request, org.openapis.openapi.models.operations.DeleteArchivedCallSecurity security, String serverURL) throws Exception {
        String baseUrl = DELETE_ARCHIVED_CALL_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DeleteArchivedCallRequest.class, baseUrl, "/v1/Archives/{Date}/Calls/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DeleteArchivedCallResponse res = new org.openapis.openapi.models.operations.DeleteArchivedCallResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    public org.openapis.openapi.models.operations.DeleteByocTrunkResponse deleteByocTrunk(org.openapis.openapi.models.operations.DeleteByocTrunkRequest request, org.openapis.openapi.models.operations.DeleteByocTrunkSecurity security) throws Exception {
        return this.deleteByocTrunk(request, security, null);
    }

    public org.openapis.openapi.models.operations.DeleteByocTrunkResponse deleteByocTrunk(org.openapis.openapi.models.operations.DeleteByocTrunkRequest request, org.openapis.openapi.models.operations.DeleteByocTrunkSecurity security, String serverURL) throws Exception {
        String baseUrl = DELETE_BYOC_TRUNK_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DeleteByocTrunkRequest.class, baseUrl, "/v1/ByocTrunks/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DeleteByocTrunkResponse res = new org.openapis.openapi.models.operations.DeleteByocTrunkResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    public org.openapis.openapi.models.operations.DeleteConnectionPolicyResponse deleteConnectionPolicy(org.openapis.openapi.models.operations.DeleteConnectionPolicyRequest request, org.openapis.openapi.models.operations.DeleteConnectionPolicySecurity security) throws Exception {
        return this.deleteConnectionPolicy(request, security, null);
    }

    public org.openapis.openapi.models.operations.DeleteConnectionPolicyResponse deleteConnectionPolicy(org.openapis.openapi.models.operations.DeleteConnectionPolicyRequest request, org.openapis.openapi.models.operations.DeleteConnectionPolicySecurity security, String serverURL) throws Exception {
        String baseUrl = DELETE_CONNECTION_POLICY_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DeleteConnectionPolicyRequest.class, baseUrl, "/v1/ConnectionPolicies/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DeleteConnectionPolicyResponse res = new org.openapis.openapi.models.operations.DeleteConnectionPolicyResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    public org.openapis.openapi.models.operations.DeleteConnectionPolicyTargetResponse deleteConnectionPolicyTarget(org.openapis.openapi.models.operations.DeleteConnectionPolicyTargetRequest request, org.openapis.openapi.models.operations.DeleteConnectionPolicyTargetSecurity security) throws Exception {
        return this.deleteConnectionPolicyTarget(request, security, null);
    }

    public org.openapis.openapi.models.operations.DeleteConnectionPolicyTargetResponse deleteConnectionPolicyTarget(org.openapis.openapi.models.operations.DeleteConnectionPolicyTargetRequest request, org.openapis.openapi.models.operations.DeleteConnectionPolicyTargetSecurity security, String serverURL) throws Exception {
        String baseUrl = DELETE_CONNECTION_POLICY_TARGET_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DeleteConnectionPolicyTargetRequest.class, baseUrl, "/v1/ConnectionPolicies/{ConnectionPolicySid}/Targets/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DeleteConnectionPolicyTargetResponse res = new org.openapis.openapi.models.operations.DeleteConnectionPolicyTargetResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    public org.openapis.openapi.models.operations.DeleteIpRecordResponse deleteIpRecord(org.openapis.openapi.models.operations.DeleteIpRecordRequest request, org.openapis.openapi.models.operations.DeleteIpRecordSecurity security) throws Exception {
        return this.deleteIpRecord(request, security, null);
    }

    public org.openapis.openapi.models.operations.DeleteIpRecordResponse deleteIpRecord(org.openapis.openapi.models.operations.DeleteIpRecordRequest request, org.openapis.openapi.models.operations.DeleteIpRecordSecurity security, String serverURL) throws Exception {
        String baseUrl = DELETE_IP_RECORD_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DeleteIpRecordRequest.class, baseUrl, "/v1/IpRecords/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DeleteIpRecordResponse res = new org.openapis.openapi.models.operations.DeleteIpRecordResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    public org.openapis.openapi.models.operations.DeleteSourceIpMappingResponse deleteSourceIpMapping(org.openapis.openapi.models.operations.DeleteSourceIpMappingRequest request, org.openapis.openapi.models.operations.DeleteSourceIpMappingSecurity security) throws Exception {
        return this.deleteSourceIpMapping(request, security, null);
    }

    public org.openapis.openapi.models.operations.DeleteSourceIpMappingResponse deleteSourceIpMapping(org.openapis.openapi.models.operations.DeleteSourceIpMappingRequest request, org.openapis.openapi.models.operations.DeleteSourceIpMappingSecurity security, String serverURL) throws Exception {
        String baseUrl = DELETE_SOURCE_IP_MAPPING_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DeleteSourceIpMappingRequest.class, baseUrl, "/v1/SourceIpMappings/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DeleteSourceIpMappingResponse res = new org.openapis.openapi.models.operations.DeleteSourceIpMappingResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    public org.openapis.openapi.models.operations.FetchByocTrunkResponse fetchByocTrunk(org.openapis.openapi.models.operations.FetchByocTrunkRequest request, org.openapis.openapi.models.operations.FetchByocTrunkSecurity security) throws Exception {
        return this.fetchByocTrunk(request, security, null);
    }

    public org.openapis.openapi.models.operations.FetchByocTrunkResponse fetchByocTrunk(org.openapis.openapi.models.operations.FetchByocTrunkRequest request, org.openapis.openapi.models.operations.FetchByocTrunkSecurity security, String serverURL) throws Exception {
        String baseUrl = FETCH_BYOC_TRUNK_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchByocTrunkRequest.class, baseUrl, "/v1/ByocTrunks/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchByocTrunkResponse res = new org.openapis.openapi.models.operations.FetchByocTrunkResponse() {{
            voiceV1ByocTrunk = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.VoiceV1ByocTrunk out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.VoiceV1ByocTrunk.class);
                res.voiceV1ByocTrunk = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.FetchConnectionPolicyResponse fetchConnectionPolicy(org.openapis.openapi.models.operations.FetchConnectionPolicyRequest request, org.openapis.openapi.models.operations.FetchConnectionPolicySecurity security) throws Exception {
        return this.fetchConnectionPolicy(request, security, null);
    }

    public org.openapis.openapi.models.operations.FetchConnectionPolicyResponse fetchConnectionPolicy(org.openapis.openapi.models.operations.FetchConnectionPolicyRequest request, org.openapis.openapi.models.operations.FetchConnectionPolicySecurity security, String serverURL) throws Exception {
        String baseUrl = FETCH_CONNECTION_POLICY_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchConnectionPolicyRequest.class, baseUrl, "/v1/ConnectionPolicies/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchConnectionPolicyResponse res = new org.openapis.openapi.models.operations.FetchConnectionPolicyResponse() {{
            voiceV1ConnectionPolicy = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.VoiceV1ConnectionPolicy out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.VoiceV1ConnectionPolicy.class);
                res.voiceV1ConnectionPolicy = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.FetchConnectionPolicyTargetResponse fetchConnectionPolicyTarget(org.openapis.openapi.models.operations.FetchConnectionPolicyTargetRequest request, org.openapis.openapi.models.operations.FetchConnectionPolicyTargetSecurity security) throws Exception {
        return this.fetchConnectionPolicyTarget(request, security, null);
    }

    public org.openapis.openapi.models.operations.FetchConnectionPolicyTargetResponse fetchConnectionPolicyTarget(org.openapis.openapi.models.operations.FetchConnectionPolicyTargetRequest request, org.openapis.openapi.models.operations.FetchConnectionPolicyTargetSecurity security, String serverURL) throws Exception {
        String baseUrl = FETCH_CONNECTION_POLICY_TARGET_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchConnectionPolicyTargetRequest.class, baseUrl, "/v1/ConnectionPolicies/{ConnectionPolicySid}/Targets/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchConnectionPolicyTargetResponse res = new org.openapis.openapi.models.operations.FetchConnectionPolicyTargetResponse() {{
            voiceV1ConnectionPolicyConnectionPolicyTarget = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.VoiceV1ConnectionPolicyConnectionPolicyTarget out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.VoiceV1ConnectionPolicyConnectionPolicyTarget.class);
                res.voiceV1ConnectionPolicyConnectionPolicyTarget = out;
            }
        }

        return res;
    }

    /**
     * Retrieve voice dialing country permissions identified by the given ISO country code
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FetchDialingPermissionsCountryResponse fetchDialingPermissionsCountry(org.openapis.openapi.models.operations.FetchDialingPermissionsCountryRequest request, org.openapis.openapi.models.operations.FetchDialingPermissionsCountrySecurity security) throws Exception {
        return this.fetchDialingPermissionsCountry(request, security, null);
    }

    /**
     * Retrieve voice dialing country permissions identified by the given ISO country code
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FetchDialingPermissionsCountryResponse fetchDialingPermissionsCountry(org.openapis.openapi.models.operations.FetchDialingPermissionsCountryRequest request, org.openapis.openapi.models.operations.FetchDialingPermissionsCountrySecurity security, String serverURL) throws Exception {
        String baseUrl = FETCH_DIALING_PERMISSIONS_COUNTRY_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchDialingPermissionsCountryRequest.class, baseUrl, "/v1/DialingPermissions/Countries/{IsoCode}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchDialingPermissionsCountryResponse res = new org.openapis.openapi.models.operations.FetchDialingPermissionsCountryResponse() {{
            voiceV1DialingPermissionsDialingPermissionsCountryInstance = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.VoiceV1DialingPermissionsDialingPermissionsCountryInstance out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.VoiceV1DialingPermissionsDialingPermissionsCountryInstance.class);
                res.voiceV1DialingPermissionsDialingPermissionsCountryInstance = out;
            }
        }

        return res;
    }

    /**
     * Retrieve voice dialing permissions inheritance for the sub-account
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FetchDialingPermissionsSettingsResponse fetchDialingPermissionsSettings() throws Exception {
        return this.fetchDialingPermissionsSettings(null);
    }

    /**
     * Retrieve voice dialing permissions inheritance for the sub-account
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FetchDialingPermissionsSettingsResponse fetchDialingPermissionsSettings(String serverURL) throws Exception {
        String baseUrl = FETCH_DIALING_PERMISSIONS_SETTINGS_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/v1/Settings");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchDialingPermissionsSettingsResponse res = new org.openapis.openapi.models.operations.FetchDialingPermissionsSettingsResponse() {{
            voiceV1DialingPermissionsDialingPermissionsSettings = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.VoiceV1DialingPermissionsDialingPermissionsSettings out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.VoiceV1DialingPermissionsDialingPermissionsSettings.class);
                res.voiceV1DialingPermissionsDialingPermissionsSettings = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.FetchIpRecordResponse fetchIpRecord(org.openapis.openapi.models.operations.FetchIpRecordRequest request, org.openapis.openapi.models.operations.FetchIpRecordSecurity security) throws Exception {
        return this.fetchIpRecord(request, security, null);
    }

    public org.openapis.openapi.models.operations.FetchIpRecordResponse fetchIpRecord(org.openapis.openapi.models.operations.FetchIpRecordRequest request, org.openapis.openapi.models.operations.FetchIpRecordSecurity security, String serverURL) throws Exception {
        String baseUrl = FETCH_IP_RECORD_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchIpRecordRequest.class, baseUrl, "/v1/IpRecords/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchIpRecordResponse res = new org.openapis.openapi.models.operations.FetchIpRecordResponse() {{
            voiceV1IpRecord = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.VoiceV1IpRecord out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.VoiceV1IpRecord.class);
                res.voiceV1IpRecord = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.FetchSourceIpMappingResponse fetchSourceIpMapping(org.openapis.openapi.models.operations.FetchSourceIpMappingRequest request, org.openapis.openapi.models.operations.FetchSourceIpMappingSecurity security) throws Exception {
        return this.fetchSourceIpMapping(request, security, null);
    }

    public org.openapis.openapi.models.operations.FetchSourceIpMappingResponse fetchSourceIpMapping(org.openapis.openapi.models.operations.FetchSourceIpMappingRequest request, org.openapis.openapi.models.operations.FetchSourceIpMappingSecurity security, String serverURL) throws Exception {
        String baseUrl = FETCH_SOURCE_IP_MAPPING_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchSourceIpMappingRequest.class, baseUrl, "/v1/SourceIpMappings/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchSourceIpMappingResponse res = new org.openapis.openapi.models.operations.FetchSourceIpMappingResponse() {{
            voiceV1SourceIpMapping = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.VoiceV1SourceIpMapping out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.VoiceV1SourceIpMapping.class);
                res.voiceV1SourceIpMapping = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.ListByocTrunkResponse listByocTrunk(org.openapis.openapi.models.operations.ListByocTrunkRequest request, org.openapis.openapi.models.operations.ListByocTrunkSecurity security) throws Exception {
        return this.listByocTrunk(request, security, null);
    }

    public org.openapis.openapi.models.operations.ListByocTrunkResponse listByocTrunk(org.openapis.openapi.models.operations.ListByocTrunkRequest request, org.openapis.openapi.models.operations.ListByocTrunkSecurity security, String serverURL) throws Exception {
        String baseUrl = LIST_BYOC_TRUNK_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/v1/ByocTrunks");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ListByocTrunkRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ListByocTrunkResponse res = new org.openapis.openapi.models.operations.ListByocTrunkResponse() {{
            listByocTrunkResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ListByocTrunkListByocTrunkResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ListByocTrunkListByocTrunkResponse.class);
                res.listByocTrunkResponse = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.ListConnectionPolicyResponse listConnectionPolicy(org.openapis.openapi.models.operations.ListConnectionPolicyRequest request, org.openapis.openapi.models.operations.ListConnectionPolicySecurity security) throws Exception {
        return this.listConnectionPolicy(request, security, null);
    }

    public org.openapis.openapi.models.operations.ListConnectionPolicyResponse listConnectionPolicy(org.openapis.openapi.models.operations.ListConnectionPolicyRequest request, org.openapis.openapi.models.operations.ListConnectionPolicySecurity security, String serverURL) throws Exception {
        String baseUrl = LIST_CONNECTION_POLICY_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/v1/ConnectionPolicies");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ListConnectionPolicyRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ListConnectionPolicyResponse res = new org.openapis.openapi.models.operations.ListConnectionPolicyResponse() {{
            listConnectionPolicyResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ListConnectionPolicyListConnectionPolicyResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ListConnectionPolicyListConnectionPolicyResponse.class);
                res.listConnectionPolicyResponse = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.ListConnectionPolicyTargetResponse listConnectionPolicyTarget(org.openapis.openapi.models.operations.ListConnectionPolicyTargetRequest request, org.openapis.openapi.models.operations.ListConnectionPolicyTargetSecurity security) throws Exception {
        return this.listConnectionPolicyTarget(request, security, null);
    }

    public org.openapis.openapi.models.operations.ListConnectionPolicyTargetResponse listConnectionPolicyTarget(org.openapis.openapi.models.operations.ListConnectionPolicyTargetRequest request, org.openapis.openapi.models.operations.ListConnectionPolicyTargetSecurity security, String serverURL) throws Exception {
        String baseUrl = LIST_CONNECTION_POLICY_TARGET_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ListConnectionPolicyTargetRequest.class, baseUrl, "/v1/ConnectionPolicies/{ConnectionPolicySid}/Targets", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ListConnectionPolicyTargetRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ListConnectionPolicyTargetResponse res = new org.openapis.openapi.models.operations.ListConnectionPolicyTargetResponse() {{
            listConnectionPolicyTargetResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ListConnectionPolicyTargetListConnectionPolicyTargetResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ListConnectionPolicyTargetListConnectionPolicyTargetResponse.class);
                res.listConnectionPolicyTargetResponse = out;
            }
        }

        return res;
    }

    /**
     * Retrieve all voice dialing country permissions for this account
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ListDialingPermissionsCountryResponse listDialingPermissionsCountry(org.openapis.openapi.models.operations.ListDialingPermissionsCountryRequest request, org.openapis.openapi.models.operations.ListDialingPermissionsCountrySecurity security) throws Exception {
        return this.listDialingPermissionsCountry(request, security, null);
    }

    /**
     * Retrieve all voice dialing country permissions for this account
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ListDialingPermissionsCountryResponse listDialingPermissionsCountry(org.openapis.openapi.models.operations.ListDialingPermissionsCountryRequest request, org.openapis.openapi.models.operations.ListDialingPermissionsCountrySecurity security, String serverURL) throws Exception {
        String baseUrl = LIST_DIALING_PERMISSIONS_COUNTRY_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/v1/DialingPermissions/Countries");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ListDialingPermissionsCountryRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ListDialingPermissionsCountryResponse res = new org.openapis.openapi.models.operations.ListDialingPermissionsCountryResponse() {{
            listDialingPermissionsCountryResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ListDialingPermissionsCountryListDialingPermissionsCountryResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ListDialingPermissionsCountryListDialingPermissionsCountryResponse.class);
                res.listDialingPermissionsCountryResponse = out;
            }
        }

        return res;
    }

    /**
     * Fetch the high-risk special services prefixes from the country resource corresponding to the [ISO country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ListDialingPermissionsHrsPrefixesResponse listDialingPermissionsHrsPrefixes(org.openapis.openapi.models.operations.ListDialingPermissionsHrsPrefixesRequest request, org.openapis.openapi.models.operations.ListDialingPermissionsHrsPrefixesSecurity security) throws Exception {
        return this.listDialingPermissionsHrsPrefixes(request, security, null);
    }

    /**
     * Fetch the high-risk special services prefixes from the country resource corresponding to the [ISO country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ListDialingPermissionsHrsPrefixesResponse listDialingPermissionsHrsPrefixes(org.openapis.openapi.models.operations.ListDialingPermissionsHrsPrefixesRequest request, org.openapis.openapi.models.operations.ListDialingPermissionsHrsPrefixesSecurity security, String serverURL) throws Exception {
        String baseUrl = LIST_DIALING_PERMISSIONS_HRS_PREFIXES_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ListDialingPermissionsHrsPrefixesRequest.class, baseUrl, "/v1/DialingPermissions/Countries/{IsoCode}/HighRiskSpecialPrefixes", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ListDialingPermissionsHrsPrefixesRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ListDialingPermissionsHrsPrefixesResponse res = new org.openapis.openapi.models.operations.ListDialingPermissionsHrsPrefixesResponse() {{
            listDialingPermissionsHrsPrefixesResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ListDialingPermissionsHrsPrefixesListDialingPermissionsHrsPrefixesResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ListDialingPermissionsHrsPrefixesListDialingPermissionsHrsPrefixesResponse.class);
                res.listDialingPermissionsHrsPrefixesResponse = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.ListIpRecordResponse listIpRecord(org.openapis.openapi.models.operations.ListIpRecordRequest request, org.openapis.openapi.models.operations.ListIpRecordSecurity security) throws Exception {
        return this.listIpRecord(request, security, null);
    }

    public org.openapis.openapi.models.operations.ListIpRecordResponse listIpRecord(org.openapis.openapi.models.operations.ListIpRecordRequest request, org.openapis.openapi.models.operations.ListIpRecordSecurity security, String serverURL) throws Exception {
        String baseUrl = LIST_IP_RECORD_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/v1/IpRecords");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ListIpRecordRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ListIpRecordResponse res = new org.openapis.openapi.models.operations.ListIpRecordResponse() {{
            listIpRecordResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ListIpRecordListIpRecordResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ListIpRecordListIpRecordResponse.class);
                res.listIpRecordResponse = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.ListSourceIpMappingResponse listSourceIpMapping(org.openapis.openapi.models.operations.ListSourceIpMappingRequest request, org.openapis.openapi.models.operations.ListSourceIpMappingSecurity security) throws Exception {
        return this.listSourceIpMapping(request, security, null);
    }

    public org.openapis.openapi.models.operations.ListSourceIpMappingResponse listSourceIpMapping(org.openapis.openapi.models.operations.ListSourceIpMappingRequest request, org.openapis.openapi.models.operations.ListSourceIpMappingSecurity security, String serverURL) throws Exception {
        String baseUrl = LIST_SOURCE_IP_MAPPING_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/v1/SourceIpMappings");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ListSourceIpMappingRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ListSourceIpMappingResponse res = new org.openapis.openapi.models.operations.ListSourceIpMappingResponse() {{
            listSourceIpMappingResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ListSourceIpMappingListSourceIpMappingResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ListSourceIpMappingListSourceIpMappingResponse.class);
                res.listSourceIpMappingResponse = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.UpdateByocTrunkResponse updateByocTrunk(org.openapis.openapi.models.operations.UpdateByocTrunkRequest request, org.openapis.openapi.models.operations.UpdateByocTrunkSecurity security) throws Exception {
        return this.updateByocTrunk(request, security, null);
    }

    public org.openapis.openapi.models.operations.UpdateByocTrunkResponse updateByocTrunk(org.openapis.openapi.models.operations.UpdateByocTrunkRequest request, org.openapis.openapi.models.operations.UpdateByocTrunkSecurity security, String serverURL) throws Exception {
        String baseUrl = UPDATE_BYOC_TRUNK_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.UpdateByocTrunkRequest.class, baseUrl, "/v1/ByocTrunks/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.UpdateByocTrunkResponse res = new org.openapis.openapi.models.operations.UpdateByocTrunkResponse() {{
            voiceV1ByocTrunk = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.VoiceV1ByocTrunk out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.VoiceV1ByocTrunk.class);
                res.voiceV1ByocTrunk = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.UpdateConnectionPolicyResponse updateConnectionPolicy(org.openapis.openapi.models.operations.UpdateConnectionPolicyRequest request, org.openapis.openapi.models.operations.UpdateConnectionPolicySecurity security) throws Exception {
        return this.updateConnectionPolicy(request, security, null);
    }

    public org.openapis.openapi.models.operations.UpdateConnectionPolicyResponse updateConnectionPolicy(org.openapis.openapi.models.operations.UpdateConnectionPolicyRequest request, org.openapis.openapi.models.operations.UpdateConnectionPolicySecurity security, String serverURL) throws Exception {
        String baseUrl = UPDATE_CONNECTION_POLICY_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.UpdateConnectionPolicyRequest.class, baseUrl, "/v1/ConnectionPolicies/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.UpdateConnectionPolicyResponse res = new org.openapis.openapi.models.operations.UpdateConnectionPolicyResponse() {{
            voiceV1ConnectionPolicy = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.VoiceV1ConnectionPolicy out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.VoiceV1ConnectionPolicy.class);
                res.voiceV1ConnectionPolicy = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.UpdateConnectionPolicyTargetResponse updateConnectionPolicyTarget(org.openapis.openapi.models.operations.UpdateConnectionPolicyTargetRequest request, org.openapis.openapi.models.operations.UpdateConnectionPolicyTargetSecurity security) throws Exception {
        return this.updateConnectionPolicyTarget(request, security, null);
    }

    public org.openapis.openapi.models.operations.UpdateConnectionPolicyTargetResponse updateConnectionPolicyTarget(org.openapis.openapi.models.operations.UpdateConnectionPolicyTargetRequest request, org.openapis.openapi.models.operations.UpdateConnectionPolicyTargetSecurity security, String serverURL) throws Exception {
        String baseUrl = UPDATE_CONNECTION_POLICY_TARGET_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.UpdateConnectionPolicyTargetRequest.class, baseUrl, "/v1/ConnectionPolicies/{ConnectionPolicySid}/Targets/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.UpdateConnectionPolicyTargetResponse res = new org.openapis.openapi.models.operations.UpdateConnectionPolicyTargetResponse() {{
            voiceV1ConnectionPolicyConnectionPolicyTarget = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.VoiceV1ConnectionPolicyConnectionPolicyTarget out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.VoiceV1ConnectionPolicyConnectionPolicyTarget.class);
                res.voiceV1ConnectionPolicyConnectionPolicyTarget = out;
            }
        }

        return res;
    }

    /**
     * Update voice dialing permissions inheritance for the sub-account
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.UpdateDialingPermissionsSettingsResponse updateDialingPermissionsSettings(org.openapis.openapi.models.operations.UpdateDialingPermissionsSettingsUpdateDialingPermissionsSettingsRequest request, org.openapis.openapi.models.operations.UpdateDialingPermissionsSettingsSecurity security) throws Exception {
        return this.updateDialingPermissionsSettings(request, security, null);
    }

    /**
     * Update voice dialing permissions inheritance for the sub-account
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.UpdateDialingPermissionsSettingsResponse updateDialingPermissionsSettings(org.openapis.openapi.models.operations.UpdateDialingPermissionsSettingsUpdateDialingPermissionsSettingsRequest request, org.openapis.openapi.models.operations.UpdateDialingPermissionsSettingsSecurity security, String serverURL) throws Exception {
        String baseUrl = UPDATE_DIALING_PERMISSIONS_SETTINGS_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/v1/Settings");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.UpdateDialingPermissionsSettingsResponse res = new org.openapis.openapi.models.operations.UpdateDialingPermissionsSettingsResponse() {{
            voiceV1DialingPermissionsDialingPermissionsSettings = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 202) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.VoiceV1DialingPermissionsDialingPermissionsSettings out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.VoiceV1DialingPermissionsDialingPermissionsSettings.class);
                res.voiceV1DialingPermissionsDialingPermissionsSettings = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.UpdateIpRecordResponse updateIpRecord(org.openapis.openapi.models.operations.UpdateIpRecordRequest request, org.openapis.openapi.models.operations.UpdateIpRecordSecurity security) throws Exception {
        return this.updateIpRecord(request, security, null);
    }

    public org.openapis.openapi.models.operations.UpdateIpRecordResponse updateIpRecord(org.openapis.openapi.models.operations.UpdateIpRecordRequest request, org.openapis.openapi.models.operations.UpdateIpRecordSecurity security, String serverURL) throws Exception {
        String baseUrl = UPDATE_IP_RECORD_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.UpdateIpRecordRequest.class, baseUrl, "/v1/IpRecords/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.UpdateIpRecordResponse res = new org.openapis.openapi.models.operations.UpdateIpRecordResponse() {{
            voiceV1IpRecord = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.VoiceV1IpRecord out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.VoiceV1IpRecord.class);
                res.voiceV1IpRecord = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.UpdateSourceIpMappingResponse updateSourceIpMapping(org.openapis.openapi.models.operations.UpdateSourceIpMappingRequest request, org.openapis.openapi.models.operations.UpdateSourceIpMappingSecurity security) throws Exception {
        return this.updateSourceIpMapping(request, security, null);
    }

    public org.openapis.openapi.models.operations.UpdateSourceIpMappingResponse updateSourceIpMapping(org.openapis.openapi.models.operations.UpdateSourceIpMappingRequest request, org.openapis.openapi.models.operations.UpdateSourceIpMappingSecurity security, String serverURL) throws Exception {
        String baseUrl = UPDATE_SOURCE_IP_MAPPING_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.UpdateSourceIpMappingRequest.class, baseUrl, "/v1/SourceIpMappings/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.UpdateSourceIpMappingResponse res = new org.openapis.openapi.models.operations.UpdateSourceIpMappingResponse() {{
            voiceV1SourceIpMapping = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.VoiceV1SourceIpMapping out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.VoiceV1SourceIpMapping.class);
                res.voiceV1SourceIpMapping = out;
            }
        }

        return res;
    }
}