"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations

class OwnershipFindOwnership:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def get_ownership(self, request: operations.GetOwnershipRequest) -> operations.GetOwnershipResponse:
        r"""Returns a paginated list of app licenses
        - Results are returned for the market provided within the basic authentication credentials
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/ownership'
        
        query_params = utils.get_query_params(operations.GetOwnershipRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetOwnershipResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 400:
            pass
        else:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content

        return res

    def get_ownership_ownership_id_(self, request: operations.GetOwnershipOwnershipIDRequest) -> operations.GetOwnershipOwnershipIDResponse:
        r"""Returns an ownership record
        - Results are returned for the market provided within the basic authentication credentials
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetOwnershipOwnershipIDRequest, base_url, '/ownership/{ownershipId}', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetOwnershipOwnershipIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 400:
            pass
        else:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content

        return res

    def patch_ownership_ownership_id_(self, request: operations.PatchOwnershipOwnershipIDRequest) -> operations.PatchOwnershipOwnershipIDResponse:
        r"""Updates ownership fields
        - Results are returned for the market provided within the basic authentication credentials
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.PatchOwnershipOwnershipIDRequest, base_url, '/ownership/{ownershipId}', request)
        
        query_params = utils.get_query_params(operations.PatchOwnershipOwnershipIDRequest, request)
        
        client = self._security_client
        
        http_res = client.request('PATCH', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PatchOwnershipOwnershipIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code in [400, 404]:
            pass
        else:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content

        return res

    def post_ownership_install(self, request: operations.PostOwnershipInstallRequest) -> operations.PostOwnershipInstallResponse:
        r"""Aquires an app license for a user (installs app)
        - This method is called on behalf of a user - This method requires either a modelId from the app or a custom model - User data and statistics are recorded when this method is called
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/ownership/install'
        
        query_params = utils.get_query_params(operations.PostOwnershipInstallRequest, request)
        
        client = self._security_client
        
        http_res = client.request('POST', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostOwnershipInstallResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code in [400, 402, 404, 409, 412]:
            pass
        else:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content

        return res

    def post_ownership_uninstall_ownership_id_(self, request: operations.PostOwnershipUninstallOwnershipIDRequest) -> operations.PostOwnershipUninstallOwnershipIDResponse:
        r"""Uninstalls a license for a particular user and app (uninstalls app)
        - This method is called on behalf of a user - User data and statistics are recorded when this method is called
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.PostOwnershipUninstallOwnershipIDRequest, base_url, '/ownership/uninstall/{ownershipId}', request)
        
        query_params = utils.get_query_params(operations.PostOwnershipUninstallOwnershipIDRequest, request)
        
        client = self._security_client
        
        http_res = client.request('POST', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostOwnershipUninstallOwnershipIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code in [400, 404, 409]:
            pass
        else:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content

        return res

    def post_ownership_ownership_id_(self, request: operations.PostOwnershipOwnershipIDRequest) -> operations.PostOwnershipOwnershipIDResponse:
        r"""Updates an ownership record
        - Results are returned for the market provided within the basic authentication credentials
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.PostOwnershipOwnershipIDRequest, base_url, '/ownership/{ownershipId}', request)
        
        query_params = utils.get_query_params(operations.PostOwnershipOwnershipIDRequest, request)
        
        client = self._security_client
        
        http_res = client.request('POST', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostOwnershipOwnershipIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 400:
            pass
        else:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content

        return res

    