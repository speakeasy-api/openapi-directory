"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Any, Optional

class Organizations:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def securitycenter_organizations_operations_cancel(self, request: operations.SecuritycenterOrganizationsOperationsCancelRequest, security: operations.SecuritycenterOrganizationsOperationsCancelSecurity) -> operations.SecuritycenterOrganizationsOperationsCancelResponse:
        r"""Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.SecuritycenterOrganizationsOperationsCancelRequest, base_url, '/v1p1alpha1/{name}:cancel', request)
        
        query_params = utils.get_query_params(operations.SecuritycenterOrganizationsOperationsCancelRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.SecuritycenterOrganizationsOperationsCancelResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.empty = out

        return res

    def securitycenter_organizations_operations_delete(self, request: operations.SecuritycenterOrganizationsOperationsDeleteRequest, security: operations.SecuritycenterOrganizationsOperationsDeleteSecurity) -> operations.SecuritycenterOrganizationsOperationsDeleteResponse:
        r"""Deletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.SecuritycenterOrganizationsOperationsDeleteRequest, base_url, '/v1p1alpha1/{name}', request)
        
        query_params = utils.get_query_params(operations.SecuritycenterOrganizationsOperationsDeleteRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.SecuritycenterOrganizationsOperationsDeleteResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.empty = out

        return res

    def securitycenter_organizations_operations_list(self, request: operations.SecuritycenterOrganizationsOperationsListRequest, security: operations.SecuritycenterOrganizationsOperationsListSecurity) -> operations.SecuritycenterOrganizationsOperationsListResponse:
        r"""Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.SecuritycenterOrganizationsOperationsListRequest, base_url, '/v1p1alpha1/{name}', request)
        
        query_params = utils.get_query_params(operations.SecuritycenterOrganizationsOperationsListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.SecuritycenterOrganizationsOperationsListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ListOperationsResponse])
                res.list_operations_response = out

        return res

    