/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { TflApiPresentationEntitiesDisruption } from "./tflapipresentationentitiesdisruption";
import { TflApiPresentationEntitiesIdentifier } from "./tflapipresentationentitiesidentifier";
import { TflApiPresentationEntitiesInstruction } from "./tflapipresentationentitiesinstruction";
import { TflApiPresentationEntitiesJourneyPlannerObstacle } from "./tflapipresentationentitiesjourneyplannerobstacle";
import { TflApiPresentationEntitiesJourneyPlannerPath } from "./tflapipresentationentitiesjourneyplannerpath";
import { TflApiPresentationEntitiesJourneyPlannerPlannedWork } from "./tflapipresentationentitiesjourneyplannerplannedwork";
import { TflApiPresentationEntitiesJourneyPlannerRouteOption } from "./tflapipresentationentitiesjourneyplannerrouteoption";
import { TflApiPresentationEntitiesPoint } from "./tflapipresentationentitiespoint";
import { Expose, Transform, Type } from "class-transformer";

export class TflApiPresentationEntitiesJourneyPlannerLeg extends SpeakeasyBase {
  /**
   * Represents a point located at a latitude and longitude using the WGS84 co-ordinate system.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "arrivalPoint" })
  @Type(() => TflApiPresentationEntitiesPoint)
  arrivalPoint?: TflApiPresentationEntitiesPoint;

  @SpeakeasyMetadata()
  @Expose({ name: "arrivalTime" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  arrivalTime?: Date;

  /**
   * Represents a point located at a latitude and longitude using the WGS84 co-ordinate system.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "departurePoint" })
  @Type(() => TflApiPresentationEntitiesPoint)
  departurePoint?: TflApiPresentationEntitiesPoint;

  @SpeakeasyMetadata()
  @Expose({ name: "departureTime" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  departureTime?: Date;

  @SpeakeasyMetadata({ elemType: TflApiPresentationEntitiesDisruption })
  @Expose({ name: "disruptions" })
  @Type(() => TflApiPresentationEntitiesDisruption)
  disruptions?: TflApiPresentationEntitiesDisruption[];

  @SpeakeasyMetadata()
  @Expose({ name: "distance" })
  distance?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "duration" })
  duration?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "hasFixedLocations" })
  hasFixedLocations?: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "instruction" })
  @Type(() => TflApiPresentationEntitiesInstruction)
  instruction?: TflApiPresentationEntitiesInstruction;

  @SpeakeasyMetadata()
  @Expose({ name: "interChangeDuration" })
  interChangeDuration?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "interChangePosition" })
  interChangePosition?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "isDisrupted" })
  isDisrupted?: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "mode" })
  @Type(() => TflApiPresentationEntitiesIdentifier)
  mode?: TflApiPresentationEntitiesIdentifier;

  @SpeakeasyMetadata({
    elemType: TflApiPresentationEntitiesJourneyPlannerObstacle,
  })
  @Expose({ name: "obstacles" })
  @Type(() => TflApiPresentationEntitiesJourneyPlannerObstacle)
  obstacles?: TflApiPresentationEntitiesJourneyPlannerObstacle[];

  @SpeakeasyMetadata()
  @Expose({ name: "path" })
  @Type(() => TflApiPresentationEntitiesJourneyPlannerPath)
  path?: TflApiPresentationEntitiesJourneyPlannerPath;

  @SpeakeasyMetadata({
    elemType: TflApiPresentationEntitiesJourneyPlannerPlannedWork,
  })
  @Expose({ name: "plannedWorks" })
  @Type(() => TflApiPresentationEntitiesJourneyPlannerPlannedWork)
  plannedWorks?: TflApiPresentationEntitiesJourneyPlannerPlannedWork[];

  @SpeakeasyMetadata({
    elemType: TflApiPresentationEntitiesJourneyPlannerRouteOption,
  })
  @Expose({ name: "routeOptions" })
  @Type(() => TflApiPresentationEntitiesJourneyPlannerRouteOption)
  routeOptions?: TflApiPresentationEntitiesJourneyPlannerRouteOption[];

  @SpeakeasyMetadata()
  @Expose({ name: "scheduledArrivalTime" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  scheduledArrivalTime?: Date;

  @SpeakeasyMetadata()
  @Expose({ name: "scheduledDepartureTime" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  scheduledDepartureTime?: Date;

  @SpeakeasyMetadata()
  @Expose({ name: "speed" })
  speed?: string;
}
