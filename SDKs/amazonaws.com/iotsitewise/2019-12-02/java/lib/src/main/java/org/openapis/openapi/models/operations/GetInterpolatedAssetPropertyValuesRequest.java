/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import org.openapis.openapi.utils.SpeakeasyMetadata;

public class GetInterpolatedAssetPropertyValuesRequest {
    @SpeakeasyMetadata("header:style=simple,explode=false,name=X-Amz-Algorithm")
    public String xAmzAlgorithm;
    public GetInterpolatedAssetPropertyValuesRequest withXAmzAlgorithm(String xAmzAlgorithm) {
        this.xAmzAlgorithm = xAmzAlgorithm;
        return this;
    }
    
    @SpeakeasyMetadata("header:style=simple,explode=false,name=X-Amz-Content-Sha256")
    public String xAmzContentSha256;
    public GetInterpolatedAssetPropertyValuesRequest withXAmzContentSha256(String xAmzContentSha256) {
        this.xAmzContentSha256 = xAmzContentSha256;
        return this;
    }
    
    @SpeakeasyMetadata("header:style=simple,explode=false,name=X-Amz-Credential")
    public String xAmzCredential;
    public GetInterpolatedAssetPropertyValuesRequest withXAmzCredential(String xAmzCredential) {
        this.xAmzCredential = xAmzCredential;
        return this;
    }
    
    @SpeakeasyMetadata("header:style=simple,explode=false,name=X-Amz-Date")
    public String xAmzDate;
    public GetInterpolatedAssetPropertyValuesRequest withXAmzDate(String xAmzDate) {
        this.xAmzDate = xAmzDate;
        return this;
    }
    
    @SpeakeasyMetadata("header:style=simple,explode=false,name=X-Amz-Security-Token")
    public String xAmzSecurityToken;
    public GetInterpolatedAssetPropertyValuesRequest withXAmzSecurityToken(String xAmzSecurityToken) {
        this.xAmzSecurityToken = xAmzSecurityToken;
        return this;
    }
    
    @SpeakeasyMetadata("header:style=simple,explode=false,name=X-Amz-Signature")
    public String xAmzSignature;
    public GetInterpolatedAssetPropertyValuesRequest withXAmzSignature(String xAmzSignature) {
        this.xAmzSignature = xAmzSignature;
        return this;
    }
    
    @SpeakeasyMetadata("header:style=simple,explode=false,name=X-Amz-SignedHeaders")
    public String xAmzSignedHeaders;
    public GetInterpolatedAssetPropertyValuesRequest withXAmzSignedHeaders(String xAmzSignedHeaders) {
        this.xAmzSignedHeaders = xAmzSignedHeaders;
        return this;
    }
    
    /**
     * The ID of the asset.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=assetId")
    public String assetId;
    public GetInterpolatedAssetPropertyValuesRequest withAssetId(String assetId) {
        this.assetId = assetId;
        return this;
    }
    
    /**
     * The inclusive end of the range from which to interpolate data, expressed in seconds in Unix epoch time.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=endTimeInSeconds")
    public Long endTimeInSeconds;
    public GetInterpolatedAssetPropertyValuesRequest withEndTimeInSeconds(Long endTimeInSeconds) {
        this.endTimeInSeconds = endTimeInSeconds;
        return this;
    }
    
    /**
     * The nanosecond offset converted from &lt;code&gt;endTimeInSeconds&lt;/code&gt;.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=endTimeOffsetInNanos")
    public Long endTimeOffsetInNanos;
    public GetInterpolatedAssetPropertyValuesRequest withEndTimeOffsetInNanos(Long endTimeOffsetInNanos) {
        this.endTimeOffsetInNanos = endTimeOffsetInNanos;
        return this;
    }
    
    /**
     * The time interval in seconds over which to interpolate data. Each interval starts when the previous one ends.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=intervalInSeconds")
    public Long intervalInSeconds;
    public GetInterpolatedAssetPropertyValuesRequest withIntervalInSeconds(Long intervalInSeconds) {
        this.intervalInSeconds = intervalInSeconds;
        return this;
    }
    
    /**
     * &lt;p&gt;The query interval for the window, in seconds. IoT SiteWise computes each interpolated value by using data points from the timestamp of each interval, minus the window to the timestamp of each interval plus the window. If not specified, the window ranges between the start time minus the interval and the end time plus the interval.&lt;/p&gt; &lt;note&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;If you specify a value for the &lt;code&gt;intervalWindowInSeconds&lt;/code&gt; parameter, the value for the &lt;code&gt;type&lt;/code&gt; parameter must be &lt;code&gt;LINEAR_INTERPOLATION&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If a data point isn't found during the specified query window, IoT SiteWise won't return an interpolated value for the interval. This indicates that there's a gap in the ingested data points.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/note&gt; &lt;p&gt;For example, you can get the interpolated temperature values for a wind turbine every 24 hours over a duration of 7 days. If the interpolation starts on July 1, 2021, at 9 AM with a window of 2 hours, IoT SiteWise uses the data points from 7 AM (9 AM minus 2 hours) to 11 AM (9 AM plus 2 hours) on July 2, 2021 to compute the first interpolated value. Next, IoT SiteWise uses the data points from 7 AM (9 AM minus 2 hours) to 11 AM (9 AM plus 2 hours) on July 3, 2021 to compute the second interpolated value, and so on. &lt;/p&gt;
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=intervalWindowInSeconds")
    public Long intervalWindowInSeconds;
    public GetInterpolatedAssetPropertyValuesRequest withIntervalWindowInSeconds(Long intervalWindowInSeconds) {
        this.intervalWindowInSeconds = intervalWindowInSeconds;
        return this;
    }
    
    /**
     * The maximum number of results to return for each paginated request. If not specified, the default value is 10.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=maxResults")
    public Long maxResults;
    public GetInterpolatedAssetPropertyValuesRequest withMaxResults(Long maxResults) {
        this.maxResults = maxResults;
        return this;
    }
    
    /**
     * The token to be used for the next set of paginated results.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=nextToken")
    public String nextToken;
    public GetInterpolatedAssetPropertyValuesRequest withNextToken(String nextToken) {
        this.nextToken = nextToken;
        return this;
    }
    
    /**
     * The alias that identifies the property, such as an OPC-UA server data stream path (for example, &lt;code&gt;/company/windfarm/3/turbine/7/temperature&lt;/code&gt;). For more information, see &lt;a href="https://docs.aws.amazon.com/iot-sitewise/latest/userguide/connect-data-streams.html"&gt;Mapping industrial data streams to asset properties&lt;/a&gt; in the &lt;i&gt;IoT SiteWise User Guide&lt;/i&gt;.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=propertyAlias")
    public String propertyAlias;
    public GetInterpolatedAssetPropertyValuesRequest withPropertyAlias(String propertyAlias) {
        this.propertyAlias = propertyAlias;
        return this;
    }
    
    /**
     * The ID of the asset property.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=propertyId")
    public String propertyId;
    public GetInterpolatedAssetPropertyValuesRequest withPropertyId(String propertyId) {
        this.propertyId = propertyId;
        return this;
    }
    
    /**
     * The quality of the asset property value. You can use this parameter as a filter to choose only the asset property values that have a specific quality.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=quality")
    public GetInterpolatedAssetPropertyValuesQualityEnum quality;
    public GetInterpolatedAssetPropertyValuesRequest withQuality(GetInterpolatedAssetPropertyValuesQualityEnum quality) {
        this.quality = quality;
        return this;
    }
    
    /**
     * The exclusive start of the range from which to interpolate data, expressed in seconds in Unix epoch time.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=startTimeInSeconds")
    public Long startTimeInSeconds;
    public GetInterpolatedAssetPropertyValuesRequest withStartTimeInSeconds(Long startTimeInSeconds) {
        this.startTimeInSeconds = startTimeInSeconds;
        return this;
    }
    
    /**
     * The nanosecond offset converted from &lt;code&gt;startTimeInSeconds&lt;/code&gt;.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=startTimeOffsetInNanos")
    public Long startTimeOffsetInNanos;
    public GetInterpolatedAssetPropertyValuesRequest withStartTimeOffsetInNanos(Long startTimeOffsetInNanos) {
        this.startTimeOffsetInNanos = startTimeOffsetInNanos;
        return this;
    }
    
    /**
     * &lt;p&gt;The interpolation type.&lt;/p&gt; &lt;p&gt;Valid values: &lt;code&gt;LINEAR_INTERPOLATION | LOCF_INTERPOLATION&lt;/code&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;LINEAR_INTERPOLATION&lt;/code&gt; \u2013 Estimates missing data using &lt;a href="https://en.wikipedia.org/wiki/Linear_interpolation"&gt;linear interpolation&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;For example, you can use this operation to return the interpolated temperature values for a wind turbine every 24 hours over a duration of 7 days. If the interpolation starts July 1, 2021, at 9 AM, IoT SiteWise returns the first interpolated value on July 2, 2021, at 9 AM, the second interpolated value on July 3, 2021, at 9 AM, and so on.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;LOCF_INTERPOLATION&lt;/code&gt; \u2013 Estimates missing data using last observation carried forward interpolation&lt;/p&gt; &lt;p&gt;If no data point is found for an interval, IoT SiteWise returns the last observed data point for the previous interval and carries forward this interpolated value until a new data point is found.&lt;/p&gt; &lt;p&gt;For example, you can get the state of an on-off valve every 24 hours over a duration of 7 days. If the interpolation starts July 1, 2021, at 9 AM, IoT SiteWise returns the last observed data point between July 1, 2021, at 9 AM and July 2, 2021, at 9 AM as the first interpolated value. If a data point isn't found after 9 AM on July 2, 2021, IoT SiteWise uses the same interpolated value for the rest of the days.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=type")
    public String type;
    public GetInterpolatedAssetPropertyValuesRequest withType(String type) {
        this.type = type;
        return this;
    }
    
}
