/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";

export class RoutesRouteFromIdRequest extends SpeakeasyBase {
  /**
   * Your developer id
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=devid" })
  devid?: string;

  /**
   * Filter geopaths by date (ISO 8601 UTC format) (default = current date)
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=geopath_utc;dateTimeFormat=YYYY-MM-DDThh:mm:ss.sssZ",
  })
  geopathUtc?: Date;

  /**
   * Indicates kif geopath data will be returned (default = false)
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=include_geopath",
  })
  includeGeopath?: boolean;

  /**
   * Identifier of route; values returned by Departures, Directions and Disruptions APIs
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=route_id",
  })
  routeId: number;

  /**
   * Authentication signature for request
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=signature",
  })
  signature?: string;

  /**
   * Please ignore
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=token" })
  token?: string;
}

export class RoutesRouteFromIdResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  body?: Uint8Array;

  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * Invalid Request
   */
  @SpeakeasyMetadata()
  v3ErrorResponse?: shared.V3ErrorResponse;

  /**
   * The route name and number for the specified route ID.
   */
  @SpeakeasyMetadata()
  v3RouteResponse?: shared.V3RouteResponse;
}
