/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import {
  objectToClass,
  SpeakeasyBase,
  SpeakeasyMetadata,
} from "../../../internal/utils";
import { SuggestedTextStyle } from "./suggestedtextstyle";
import { TextStyle } from "./textstyle";
import { Expose, Transform, Type } from "class-transformer";

/**
 * A ParagraphElement that represents a run of text that all has the same styling.
 */
export class TextRun extends SpeakeasyBase {
  /**
   * The text of this run. Any non-text elements in the run are replaced with the Unicode character U+E907.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "content" })
  content?: string;

  /**
   * The suggested deletion IDs. If empty, then there are no suggested deletions of this content.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "suggestedDeletionIds" })
  suggestedDeletionIds?: string[];

  /**
   * The suggested insertion IDs. A TextRun may have multiple insertion IDs if it's a nested suggested change. If empty, then this is not a suggested insertion.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "suggestedInsertionIds" })
  suggestedInsertionIds?: string[];

  /**
   * The suggested text style changes to this run, keyed by suggestion ID.
   */
  @SpeakeasyMetadata({ elemType: SuggestedTextStyle })
  @Expose({ name: "suggestedTextStyleChanges" })
  @Transform(
    ({ value }) => {
      const obj: Record<string, SuggestedTextStyle> = {};
      for (const key in value) {
        obj[key] = objectToClass(value[key], SuggestedTextStyle);
      }
      return obj;
    },
    { toClassOnly: true }
  )
  suggestedTextStyleChanges?: Record<string, SuggestedTextStyle>;

  /**
   * Represents the styling that can be applied to text. Inherited text styles are represented as unset fields in this message. A text style's parent depends on where the text style is defined: * The TextStyle of text in a Paragraph inherits from the paragraph's corresponding named style type. * The TextStyle on a named style inherits from the normal text named style. * The TextStyle of the normal text named style inherits from the default text style in the Docs editor. * The TextStyle on a Paragraph element that's contained in a table may inherit its text style from the table style. If the text style does not inherit from a parent, unsetting fields will revert the style to a value matching the defaults in the Docs editor.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "textStyle" })
  @Type(() => TextStyle)
  textStyle?: TextStyle;
}
