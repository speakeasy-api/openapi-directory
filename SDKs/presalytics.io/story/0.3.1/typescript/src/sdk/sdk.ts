/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import { Cache } from "./cache";
import { Conversation } from "./conversation";
import { Events } from "./events";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { Permissions } from "./permissions";
import { Restricted } from "./restricted";
import { Schemas } from "./schemas";
import { Sessions } from "./sessions";
import { Story } from "./story";
import { StoryCollaborators } from "./storycollaborators";
import { Views } from "./views";
import axios from "axios";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

/**
 * Contains the list of servers available to the SDK
 */
export const ServerList = ["/story"] as const;

/**
 * The available configuration options for the SDK
 */
export type SDKProps = {
  /**
   * Allows overriding the default axios client used by the SDK
   */
  defaultClient?: AxiosInstance;
  /**
   * Allows overriding the default server URL used by the SDK
   */
  serverURL?: string;
};

/**
 * This API is the main entry point for creating, editing and publishing analytics throught the Presalytics API
 */
export class SDK {
  public cache: Cache;
  public conversation: Conversation;
  public events: Events;
  /**
   * Permissions and Authorization
   */
  public permissions: Permissions;
  public restricted: Restricted;
  public schemas: Schemas;
  public sessions: Sessions;
  /**
   * Story
   */
  public story: Story;
  /**
   * Story Collaborators
   */
  public storyCollaborators: StoryCollaborators;
  public views: Views;

  public _defaultClient: AxiosInstance;
  public _securityClient: AxiosInstance;
  public _serverURL: string;
  private _language = "typescript";
  private _sdkVersion = "0.0.1";
  private _genVersion = "internal";
  private _globals: any;

  constructor(props?: SDKProps) {
    this._serverURL = props?.serverURL ?? ServerList[0];

    this._defaultClient =
      props?.defaultClient ?? axios.create({ baseURL: this._serverURL });
    this._securityClient = this._defaultClient;

    this.cache = new Cache(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.conversation = new Conversation(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.events = new Events(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.permissions = new Permissions(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.restricted = new Restricted(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.schemas = new Schemas(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.sessions = new Sessions(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.story = new Story(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.storyCollaborators = new StoryCollaborators(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.views = new Views(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );
  }

  /**
   * Environment: Get
   *
   * @remarks
   * pass rendering metadata to the client-side scripts
   */
  getEnvironment(
    config?: AxiosRequestConfig
  ): Promise<operations.GetEnvironmentResponse> {
    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/environment/";

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetEnvironmentResponse =
        new operations.GetEnvironmentResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getEnvironment200ApplicationJSONObject = utils.objectToClass(
              httpRes?.data
            );
          }
          break;
        case [400, 401].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.problemDetail = utils.objectToClass(
              httpRes?.data,
              shared.ProblemDetail
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Specification: No tags
   *
   * @remarks
   * json-formatted version of this spec with the tags removed to help with codegen processes
   */
  specNoTags(
    config?: AxiosRequestConfig
  ): Promise<operations.SpecNoTagsResponse> {
    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/no_tags_spec";

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.SpecNoTagsResponse =
        new operations.SpecNoTagsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.problemDetail = utils.objectToClass(
              httpRes?.data,
              shared.ProblemDetail
            );
          }
          break;
      }

      return res;
    });
  }
}
