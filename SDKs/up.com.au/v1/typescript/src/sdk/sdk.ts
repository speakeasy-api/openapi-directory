/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import { Accounts } from "./accounts";
import { Categories } from "./categories";
import * as shared from "./models/shared";
import { Tags } from "./tags";
import { Transactions } from "./transactions";
import { UtilityEndpoints } from "./utilityendpoints";
import { Webhooks } from "./webhooks";
import axios from "axios";
import { AxiosInstance } from "axios";

/**
 * Contains the list of servers available to the SDK
 */
export const ServerList = ["https://api.up.com.au/api/v1"] as const;

/**
 * The available configuration options for the SDK
 */
export type SDKProps = {
  /**
   * The security details required to authenticate the SDK
   */
  security?: shared.Security;
  /**
   * Allows overriding the default axios client used by the SDK
   */
  defaultClient?: AxiosInstance;
  /**
   * Allows overriding the default server URL used by the SDK
   */
  serverURL?: string;
};

/**
 * The Up API gives you programmatic access to your balances and
 *
 * @remarks
 * transaction data. You can request past transactions or set up
 * webhooks to receive real-time events when new transactions hit your
 * account. It’s new, it’s exciting and it’s just the beginning.
 *
 */
export class SDK {
  /**
   * Accounts represent the underlying store used to track balances
   *
   * @remarks
   * and the transactions that have occurred to modify those balances
   * over time. Up currently has two types of account: `SAVER`—used to
   * earn interest and to hit savings goals, and `TRANSACTIONAL`—used
   * for everyday spending.
   *
   */
  public accounts: Accounts;
  /**
   * Categories enable understanding where your money goes by driving
   *
   * @remarks
   * powerful insights in Up. All categories in Up are pre-defined
   * and are automatically assigned to new purchases in most cases. A
   * parent-child relationship is used to represent categories,
   * however parent categories cannot be directly assigned to
   * transactions.
   *
   */
  public categories: Categories;
  /**
   * Tags are custom labels that can be associated with transactions
   *
   * @remarks
   * on Up. Within the Up application, tags provide additional insight
   * into spending. For example, you could have a "Take Away" tag that
   * you apply to purchases from food delivery services. The Up API
   * allows you to manage the tags associated with transactions. Each
   * transaction may have up to 6 tags.
   *
   * Tags are identified by their labels, which are unique strings,
   * so the tag "Holiday" has also the `id` `"Holiday"`.
   *
   */
  public tags: Tags;
  /**
   * Transactions represent the movement of money into and out of an
   *
   * @remarks
   * account. They have many characteristics that vary depending on
   * the kind of transaction. Transactions may be temporarily `HELD`
   * (pending) or `SETTLED`, typically depending on which payment
   * method was used at the point of sale.
   *
   */
  public transactions: Transactions;
  /**
   * Some endpoints exist not to expose data, but to test the API
   *
   * @remarks
   * itself. Currently there is only one endpoint in this group: ping!
   *
   */
  public utilityEndpoints: UtilityEndpoints;
  /**
   * Webhooks provide a mechanism for a configured URL to receive
   *
   * @remarks
   * events when transaction activity occurs on Up. You can think of
   * webhooks as being like push notifications for your server-side
   * application.
   *
   */
  public webhooks: Webhooks;

  public _defaultClient: AxiosInstance;
  public _securityClient: AxiosInstance;
  public _serverURL: string;
  private _language = "typescript";
  private _sdkVersion = "0.0.1";
  private _genVersion = "internal";
  private _globals: any;

  constructor(props?: SDKProps) {
    this._serverURL = props?.serverURL ?? ServerList[0];

    this._defaultClient =
      props?.defaultClient ?? axios.create({ baseURL: this._serverURL });
    if (props?.security) {
      let security: shared.Security = props.security;
      if (!(props.security instanceof utils.SpeakeasyBase))
        security = new shared.Security(props.security);
      this._securityClient = utils.createSecurityClient(
        this._defaultClient,
        security
      );
    } else {
      this._securityClient = this._defaultClient;
    }

    this.accounts = new Accounts(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.categories = new Categories(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.tags = new Tags(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.transactions = new Transactions(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.utilityEndpoints = new UtilityEndpoints(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.webhooks = new Webhooks(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );
  }
}
