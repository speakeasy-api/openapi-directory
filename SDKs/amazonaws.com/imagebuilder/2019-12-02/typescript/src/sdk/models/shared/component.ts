/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { ComponentParameterDetail } from "./componentparameterdetail";
import { ComponentState } from "./componentstate";
import { ComponentTypeEnum } from "./componenttypeenum";
import { PlatformEnum } from "./platformenum";
import { Expose, Type } from "class-transformer";

/**
 * A detailed view of a component.
 */
export class Component extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "arn" })
  arn?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "changeDescription" })
  changeDescription?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "data" })
  data?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "dateCreated" })
  dateCreated?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "description" })
  description?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "encrypted" })
  encrypted?: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "kmsKeyId" })
  kmsKeyId?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "obfuscate" })
  obfuscate?: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "owner" })
  owner?: string;

  @SpeakeasyMetadata({ elemType: ComponentParameterDetail })
  @Expose({ name: "parameters" })
  @Type(() => ComponentParameterDetail)
  parameters?: ComponentParameterDetail[];

  @SpeakeasyMetadata()
  @Expose({ name: "platform" })
  platform?: PlatformEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "publisher" })
  publisher?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "state" })
  @Type(() => ComponentState)
  state?: ComponentState;

  @SpeakeasyMetadata()
  @Expose({ name: "supportedOsVersions" })
  supportedOsVersions?: string[];

  @SpeakeasyMetadata()
  @Expose({ name: "tags" })
  tags?: Record<string, string>;

  @SpeakeasyMetadata()
  @Expose({ name: "type" })
  type?: ComponentTypeEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "version" })
  version?: string;
}
