"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Any, Optional

SERVERS = [
    "https://api.openfigi.com/{basePath}",
    r"""Production Tier"""
]
"""Contains the list of servers available to the SDK"""

class SDK:
    r"""A free & open API for FIGI discovery."""

    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str = SERVERS[0]
    _language: str = "python"
    _sdk_version: str = "0.0.1"
    _gen_version: str = "internal"

    def __init__(self,
                 security: shared.Security = None,
                 server_url: str = None,
                 url_params: dict[str, str] = None,
                 client: requests_http.Session = None
                 ) -> None:
        """Instantiates the SDK configuring it with the provided parameters.
        
        :param security: The security details required for authentication
        :type security: shared.Security
        :param server_url: The server URL to use for all operations
        :type server_url: str
        :param url_params: Parameters to optionally template the server URL with
        :type url_params: dict[str, str]
        :param client: The requests.Session HTTP client to use for all operations
        :type client: requests_http.Session        
        """
        self._client = requests_http.Session()
        
        
        if server_url is not None:
            if url_params is not None:
                self._server_url = utils.template_url(server_url, url_params)
            else:
                self._server_url = server_url

        if client is not None:
            self._client = client
        
        self._security_client = utils.configure_security_client(self._client, security)
        

        
    
    
    def get_mapping_values_key_(self, request: operations.GetMappingValuesKeyRequest) -> operations.GetMappingValuesKeyResponse:
        r"""Get values for enum-like fields."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetMappingValuesKeyRequest, base_url, '/mapping/values/{key}', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetMappingValuesKeyResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetMappingValuesKey200ApplicationJSON])
                res.get_mapping_values_key_200_application_json_object = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, '*/*'):
                res.get_mapping_values_key_400_wildcard_string = http_res.content
        elif http_res.status_code == 500:
            if utils.match_content_type(content_type, '*/*'):
                res.get_mapping_values_key_500_wildcard_string = http_res.content

        return res

    def post_mapping(self, request: list[shared.MappingJob]) -> operations.PostMappingResponse:
        r"""Allows mapping from third-party identifiers to FIGIs."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/mapping'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostMappingResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[Any]])
                res.bulk_mapping_job_result = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, '*/*'):
                res.post_mapping_400_wildcard_string = http_res.content
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, '*/*'):
                res.post_mapping_401_wildcard_string = http_res.content
        elif http_res.status_code == 406:
            if utils.match_content_type(content_type, '*/*'):
                res.post_mapping_406_wildcard_string = http_res.content
        elif http_res.status_code == 413:
            if utils.match_content_type(content_type, '*/*'):
                res.post_mapping_413_wildcard_string = http_res.content
        elif http_res.status_code == 500:
            if utils.match_content_type(content_type, '*/*'):
                res.post_mapping_500_wildcard_string = http_res.content

        return res

    