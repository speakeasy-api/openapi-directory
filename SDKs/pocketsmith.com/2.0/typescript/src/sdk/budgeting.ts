/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class Budgeting {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Delete forecast cache for user
   *
   * @remarks
   * Delete the user's cached forecast by recalculating the forecast.
   */
  deleteUsersIdForecastCache(
    req: operations.DeleteUsersIdForecastCacheRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.DeleteUsersIdForecastCacheResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DeleteUsersIdForecastCacheRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/users/{id}/forecast_cache",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DeleteUsersIdForecastCacheResponse =
        new operations.DeleteUsersIdForecastCacheResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 204:
          break;
        case [403, 404].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.error = utils.objectToClass(httpRes?.data, shared.ErrorT);
          }
          break;
      }

      return res;
    });
  }

  /**
   * List budget for user
   *
   * @remarks
   * Lists the user's budget, consisting of one or more budget analysis packages, one per category. Akin to the list on the Budget page in PocketSmith.
   */
  getUsersIdBudget(
    req: operations.GetUsersIdBudgetRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetUsersIdBudgetResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetUsersIdBudgetRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/users/{id}/budget", req);

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetUsersIdBudgetResponse =
        new operations.GetUsersIdBudgetResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.budgetAnalysisPackages = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.budgetAnalysisPackages = utils.objectToClass(
              httpRes?.data,
              shared.BudgetAnalysisPackage,
              resFieldDepth
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get budget summary for user
   *
   * @remarks
   * Get the user's budget summary, containing an expense and income analysis for all categories (excluding transfer categories) for the given period and date range. Akin to the overall budget shown on the Budget page in PocketSmith.
   */
  getUsersIdBudgetSummary(
    req: operations.GetUsersIdBudgetSummaryRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetUsersIdBudgetSummaryResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetUsersIdBudgetSummaryRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/users/{id}/budget_summary",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetUsersIdBudgetSummaryResponse =
        new operations.GetUsersIdBudgetSummaryResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.budgetAnalysisPackages = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.budgetAnalysisPackages = utils.objectToClass(
              httpRes?.data,
              shared.BudgetAnalysisPackage,
              resFieldDepth
            );
          }
          break;
        case [400, 403, 404].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.error = utils.objectToClass(httpRes?.data, shared.ErrorT);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get trend analysis for user
   *
   * @remarks
   * Get an income and/or expense budget analysis for the given date range and period across any number of categories and scenarios. Akin to the Trends page in PocketSmith.
   */
  getUsersIdTrendAnalysis(
    req: operations.GetUsersIdTrendAnalysisRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetUsersIdTrendAnalysisResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetUsersIdTrendAnalysisRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/users/{id}/trend_analysis",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetUsersIdTrendAnalysisResponse =
        new operations.GetUsersIdTrendAnalysisResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.budgetAnalysisPackages = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.budgetAnalysisPackages = utils.objectToClass(
              httpRes?.data,
              shared.BudgetAnalysisPackage,
              resFieldDepth
            );
          }
          break;
        case [400, 403, 404, 422].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.error = utils.objectToClass(httpRes?.data, shared.ErrorT);
          }
          break;
      }

      return res;
    });
  }
}
