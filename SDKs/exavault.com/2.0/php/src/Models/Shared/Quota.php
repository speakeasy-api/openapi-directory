<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Shared;


class Quota
{
    /**
     * Total number of bytes that can be transferred per month.
     * 
     * @var ?int $bandwidthLimit
     */
	#[\JMS\Serializer\Annotation\SerializedName('bandwidthLimit')]
    #[\JMS\Serializer\Annotation\Type('int')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?int $bandwidthLimit = null;
    
    /**
     * Number of bytes transferred this month.
     * 
     * @var ?int $bandwidthUsed
     */
	#[\JMS\Serializer\Annotation\SerializedName('bandwidthUsed')]
    #[\JMS\Serializer\Annotation\Type('int')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?int $bandwidthUsed = null;
    
    /**
     * Amount of disk space that the account has available to it. This may be increased by upgrading to a larger plan.
     * 
     * @var ?int $diskLimit
     */
	#[\JMS\Serializer\Annotation\SerializedName('diskLimit')]
    #[\JMS\Serializer\Annotation\Type('int')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?int $diskLimit = null;
    
    /**
     * Amount of disk space currently in use.
     * 
     * @var ?int $diskUsed
     */
	#[\JMS\Serializer\Annotation\SerializedName('diskUsed')]
    #[\JMS\Serializer\Annotation\Type('int')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?int $diskUsed = null;
    
    /**
     * Should a quota warning be sent to the account owner when a threshold level of space utilization is reached?
     * 
     * @var ?bool $noticeEnabled
     */
	#[\JMS\Serializer\Annotation\SerializedName('noticeEnabled')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $noticeEnabled = null;
    
    /**
     * Treshold that triggers a quota notification. This represents the "percent full" your account must be before the quota notification is generated.
     * 
     * @var ?int $noticeThreshold
     */
	#[\JMS\Serializer\Annotation\SerializedName('noticeThreshold')]
    #[\JMS\Serializer\Annotation\Type('int')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?int $noticeThreshold = null;
    
    /**
     * Total number of transactions allowed in a 24-hour period.
     * 
     * @var ?int $transactionsLimit
     */
	#[\JMS\Serializer\Annotation\SerializedName('transactionsLimit')]
    #[\JMS\Serializer\Annotation\Type('int')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?int $transactionsLimit = null;
    
    /**
     * Whether an email should be sent to the account owner up to once per day if transaction usage exceeds `transactionsNoticeThreshold` value.
     * 
     * @var ?bool $transactionsNoticeEnabled
     */
	#[\JMS\Serializer\Annotation\SerializedName('transactionsNoticeEnabled')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $transactionsNoticeEnabled = null;
    
    /**
     * Percent of daily transactions limit that will trigger an email if activity exceeds it.
     * 
     * @var ?int $transactionsNoticeThreshold
     */
	#[\JMS\Serializer\Annotation\SerializedName('transactionsNoticeThreshold')]
    #[\JMS\Serializer\Annotation\Type('int')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?int $transactionsNoticeThreshold = null;
    
	public function __construct()
	{
		$this->bandwidthLimit = null;
		$this->bandwidthUsed = null;
		$this->diskLimit = null;
		$this->diskUsed = null;
		$this->noticeEnabled = null;
		$this->noticeThreshold = null;
		$this->transactionsLimit = null;
		$this->transactionsNoticeEnabled = null;
		$this->transactionsNoticeThreshold = null;
	}
}
