"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import supplierworkgroupbasicvo as shared_supplierworkgroupbasicvo
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SupplierWorkgroupDetailVO:
    r"""Java type: com.noosh.nooshapi.vo.SupplierWorkgroupDetailVO"""
    
    additional_workgroups_contain_same_supplier: Optional[list[shared_supplierworkgroupbasicvo.SupplierWorkgroupBasicVO]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('additional_workgroups_contain_same_supplier'), 'exclude': lambda f: f is None }})  
    bu_supplier_workgroup_id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bu_supplier_workgroup_id'), 'exclude': lambda f: f is None }})  
    bu_supplier_workgroup_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bu_supplier_workgroup_name'), 'exclude': lambda f: f is None }})  
    client_workgroup_id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('client_workgroup_id'), 'exclude': lambda f: f is None }})  
    client_workgroup_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('client_workgroup_name'), 'exclude': lambda f: f is None }})  
    is_approved: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('is_approved'), 'exclude': lambda f: f is None }})  
    supplier_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('supplier_code'), 'exclude': lambda f: f is None }})  
    supplier_workgroup_id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('supplier_workgroup_id'), 'exclude': lambda f: f is None }})  
    supplier_workgroup_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('supplier_workgroup_name'), 'exclude': lambda f: f is None }})  
    