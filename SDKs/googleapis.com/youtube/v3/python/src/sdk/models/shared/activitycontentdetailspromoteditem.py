"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class ActivityContentDetailsPromotedItemCtaTypeEnum(str, Enum):
    r"""The type of call-to-action, a message to the user indicating action that can be taken."""
    CTA_TYPE_UNSPECIFIED = 'ctaTypeUnspecified'
    VISIT_ADVERTISER_SITE = 'visitAdvertiserSite'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ActivityContentDetailsPromotedItem:
    r"""Details about a resource which is being promoted."""
    
    ad_tag: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('adTag'), 'exclude': lambda f: f is None }})
    r"""The URL the client should fetch to request a promoted item."""  
    click_tracking_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('clickTrackingUrl'), 'exclude': lambda f: f is None }})
    r"""The URL the client should ping to indicate that the user clicked through on this promoted item."""  
    creative_view_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('creativeViewUrl'), 'exclude': lambda f: f is None }})
    r"""The URL the client should ping to indicate that the user was shown this promoted item."""  
    cta_type: Optional[ActivityContentDetailsPromotedItemCtaTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ctaType'), 'exclude': lambda f: f is None }})
    r"""The type of call-to-action, a message to the user indicating action that can be taken."""  
    custom_cta_button_text: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('customCtaButtonText'), 'exclude': lambda f: f is None }})
    r"""The custom call-to-action button text. If specified, it will override the default button text for the cta_type."""  
    description_text: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('descriptionText'), 'exclude': lambda f: f is None }})
    r"""The text description to accompany the promoted item."""  
    destination_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('destinationUrl'), 'exclude': lambda f: f is None }})
    r"""The URL the client should direct the user to, if the user chooses to visit the advertiser's website."""  
    forecasting_url: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('forecastingUrl'), 'exclude': lambda f: f is None }})
    r"""The list of forecasting URLs. The client should ping all of these URLs when a promoted item is not available, to indicate that a promoted item could have been shown."""  
    impression_url: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('impressionUrl'), 'exclude': lambda f: f is None }})
    r"""The list of impression URLs. The client should ping all of these URLs to indicate that the user was shown this promoted item."""  
    video_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('videoId'), 'exclude': lambda f: f is None }})
    r"""The ID that YouTube uses to uniquely identify the promoted video."""  
    