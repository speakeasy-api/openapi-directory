// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type AdditionalConstraintsElementEnum string

const (
	AdditionalConstraintsElementEnumRequireDigit     AdditionalConstraintsElementEnum = "REQUIRE_DIGIT"
	AdditionalConstraintsElementEnumRequireLowercase AdditionalConstraintsElementEnum = "REQUIRE_LOWERCASE"
	AdditionalConstraintsElementEnumRequireSymbol    AdditionalConstraintsElementEnum = "REQUIRE_SYMBOL"
	AdditionalConstraintsElementEnumRequireUppercase AdditionalConstraintsElementEnum = "REQUIRE_UPPERCASE"
)

func (e AdditionalConstraintsElementEnum) ToPointer() *AdditionalConstraintsElementEnum {
	return &e
}

func (e *AdditionalConstraintsElementEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "REQUIRE_DIGIT":
		fallthrough
	case "REQUIRE_LOWERCASE":
		fallthrough
	case "REQUIRE_SYMBOL":
		fallthrough
	case "REQUIRE_UPPERCASE":
		*e = AdditionalConstraintsElementEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AdditionalConstraintsElementEnum: %v", v)
	}
}
