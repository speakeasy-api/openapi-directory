<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Products 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Retrieve the count of existing products
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CountAllProductsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CountAllProductsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CountAllProductsResponse
     */
	public function countAllProducts(
        \OpenAPI\OpenAPI\Models\Operations\CountAllProductsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CountAllProductsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CountAllProductsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationUuid}/products/v2/count', \OpenAPI\OpenAPI\Models\Operations\CountAllProductsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CountAllProductsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->productCountResponses = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\ProductCountResponse>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create a new product
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateProductRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateProductSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateProductResponse
     */
	public function createProduct(
        \OpenAPI\OpenAPI\Models\Operations\CreateProductRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CreateProductSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateProductResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationUuid}/products', \OpenAPI\OpenAPI\Models\Operations\CreateProductRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "productCreateRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\CreateProductRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateProductResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->productResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ProductResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Delete a single product
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteProductRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteProductSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteProductResponse
     */
	public function deleteProduct(
        \OpenAPI\OpenAPI\Models\Operations\DeleteProductRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeleteProductSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteProductResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationUuid}/products/{productUuid}', \OpenAPI\OpenAPI\Models\Operations\DeleteProductRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteProductResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * Delete a list of products
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteProductsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteProductsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteProductsResponse
     */
	public function deleteProducts(
        \OpenAPI\OpenAPI\Models\Operations\DeleteProductsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeleteProductsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteProductsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationUuid}/products', \OpenAPI\OpenAPI\Models\Operations\DeleteProductsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DeleteProductsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteProductsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Retrieve an aggregate of active Options in the library
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetAllOptionsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetAllOptionsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetAllOptionsResponse
     */
	public function getAllOptions(
        \OpenAPI\OpenAPI\Models\Operations\GetAllOptionsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetAllOptionsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetAllOptionsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationUuid}/products/options', \OpenAPI\OpenAPI\Models\Operations\GetAllOptionsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetAllOptionsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->variantOptionsResponses = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\VariantOptionsResponse>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieve all products visible in POS
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetAllProductsInPosRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetAllProductsInPosSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetAllProductsInPosResponse
     */
	public function getAllProductsInPos(
        \OpenAPI\OpenAPI\Models\Operations\GetAllProductsInPosRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetAllProductsInPosSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetAllProductsInPosResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationUuid}/products', \OpenAPI\OpenAPI\Models\Operations\GetAllProductsInPosRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetAllProductsInPosResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->productResponses = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\ProductResponse>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieve all products visible in POS – v2
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetAllProductsV2Request $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetAllProductsV2Security $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetAllProductsV2Response
     */
	public function getAllProductsV2(
        \OpenAPI\OpenAPI\Models\Operations\GetAllProductsV2Request $request,
        \OpenAPI\OpenAPI\Models\Operations\GetAllProductsV2Security $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetAllProductsV2Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationUuid}/products/v2', \OpenAPI\OpenAPI\Models\Operations\GetAllProductsV2Request::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetAllProductsV2Request::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetAllProductsV2Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->productResponses = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\ProductResponse>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieve a single product
     * 
     * Get the full product with the provided UUID. The method supports conditional GET through providing a HttpHeaders.IF_NONE_MATCH header. If the conditional prerequisite is fullfilled, the full product is returned, otherwise a 304 not modified will be returned with an empty body.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetProductRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetProductSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetProductResponse
     */
	public function getProduct(
        \OpenAPI\OpenAPI\Models\Operations\GetProductRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetProductSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetProductResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationUuid}/products/{productUuid}', \OpenAPI\OpenAPI\Models\Operations\GetProductRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetProductResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->productResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ProductResponse', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 304 or $httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * Update a single product
     * 
     * Updates a product entity using JSON merge patch (https://tools.ietf.org/html/rfc7386). This means that only included fields will be changed: null values removes the field on the target entity, and other values updates the field. Conditional updates are supported through the HttpHeaders.IF_MATCH header. If the conditional prerequisite is fullfilled, the product is updated: otherwise a 412 (precondition failed) will be returned with an empty body.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateProductRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateProductSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateProductResponse
     */
	public function updateProduct(
        \OpenAPI\OpenAPI\Models\Operations\UpdateProductRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\UpdateProductSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateProductResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationUuid}/products/v2/{productUuid}', \OpenAPI\OpenAPI\Models\Operations\UpdateProductRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "fullProductUpdateRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateProductResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
            $response->headers = $httpResponse->getHeaders();
            
        }
        else if ($httpResponse->getStatusCode() === 400) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorResponse', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 412) {
        }

        return $response;
    }
}