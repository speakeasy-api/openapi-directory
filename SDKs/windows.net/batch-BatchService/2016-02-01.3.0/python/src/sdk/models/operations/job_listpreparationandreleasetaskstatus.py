"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import batcherror as shared_batcherror
from ..shared import cloudjoblistpreparationandreleasetaskstatusresult as shared_cloudjoblistpreparationandreleasetaskstatusresult
from typing import Optional


@dataclasses.dataclass
class JobListPreparationAndReleaseTaskStatusRequest:
    
    api_version: str = dataclasses.field(metadata={'query_param': { 'field_name': 'api-version', 'style': 'form', 'explode': True }})
    r"""Client API Version."""  
    job_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'jobId', 'style': 'simple', 'explode': False }})
    r"""The id of the job."""  
    dollar_filter: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': '$filter', 'style': 'form', 'explode': True }})
    r"""An OData $filter clause."""  
    dollar_select: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': '$select', 'style': 'form', 'explode': True }})
    r"""An OData $select clause."""  
    client_request_id: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'client-request-id', 'style': 'simple', 'explode': False }})
    r"""The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0."""  
    maxresults: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'maxresults', 'style': 'form', 'explode': True }})
    r"""The maximum number of items to return in the response."""  
    ocp_date: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'ocp-date', 'style': 'simple', 'explode': False }})
    r"""The time the request was issued. If not specified, this header will be automatically populated with the current system clock time."""  
    return_client_request_id: Optional[bool] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'return-client-request-id', 'style': 'simple', 'explode': False }})
    r"""Whether the server should return the client-request-id identifier in the response."""  
    timeout: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'timeout', 'style': 'form', 'explode': True }})
    r"""The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds."""  
    

@dataclasses.dataclass
class JobListPreparationAndReleaseTaskStatusResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    batch_error: Optional[shared_batcherror.BatchError] = dataclasses.field(default=None)
    r"""The error from the Batch service."""  
    cloud_job_list_preparation_and_release_task_status_result: Optional[shared_cloudjoblistpreparationandreleasetaskstatusresult.CloudJobListPreparationAndReleaseTaskStatusResult] = dataclasses.field(default=None)  
    headers: Optional[dict[str, list[str]]] = dataclasses.field(default=None)  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    