"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class RouteOptimizationAPI:
    r"""## Quickstart
    
    The Route Optimization API can be used to solve [traveling salesman](https://en.wikipedia.org/wiki/Travelling_salesman_problem) or [vehicle routing problems](https://en.wikipedia.org/wiki/Vehicle_routing_problem).
    Solve your first problem by following these steps. If you already have a GraphHopper account, start with step 2.
    
    1. [Sign up for GraphHopper](https://support.graphhopper.com/a/solutions/articles/44001976025)
    2. [Create an API key](https://support.graphhopper.com/a/solutions/articles/44001976027)
    3. Download [simple traveling salesman problem](https://gist.github.com/oblonski/fb2f2be534c3ebe7bebaa72151194182) and save it in a local folder
    4. Open your command line, go to that local folder and use cURL ([What is cURL?](https://de.wikipedia.org/wiki/CURL)) as follows:
    
       ```
       curl -X POST -H \"Content-Type: application/json\"   \"https://graphhopper.com/api/1/vrp?key=YOUR_CREATED_API_KEY\" --data \"@tsp.json\"
       ```
    
    Alternatively, you can use our Editor to explore that API:
    
    1. Login to your GraphHopper account
    2. Go to **Editor**
    3. Click the **Optimize** button to solve your first problem
    4. Analyze the solution on the **Map** or as raw **JSON Output**
    
    If you have successfully solved the first problem, we recommend this tutorial - [Getting Started with the Optimization API](https://www.graphhopper.com/blog/2019/05/17/getting-started-with-the-optimization-api-traveling-salesman-problem/).
    It shows and describes the essential elements to model your vehicle routing problem.
    
    To explore the full specification, we recommend that you either use our [route editor](https://www.graphhopper.com/blog/2015/07/21/graphhoppers-new-route-optimization-editor/),
    which you can find in our [dashboard](https://graphhopper.com/dashboard/),
    or use a REST client such as Insomnia or Postman, as described [here](https://docs.graphhopper.com/#section/Explore-our-APIs/Insomnia).
    
    ## Tutorials
    
    We provide [a number of tutorials](https://www.graphhopper.com/tutorial/) illustrating how to use the Route Optimization API and
    how to model your vehicle routing problems:
    
    - [Getting Start with the Optimization API - Traveling Salesman Problem](https://www.graphhopper.com/blog/2019/05/17/getting-started-with-the-optimization-api-traveling-salesman-problem/)
    - [How to solve a traveling salesman problem with a week-planning horizon?](https://www.graphhopper.com/blog/2020/07/15/how-to-solve-a-traveling-salesman-problem-with-a-week-planning-horizon-and-driver-shifts/)
    - [How to schedule technicians with skills and multiple dependencies between tasks?](https://www.graphhopper.com/blog/2016/06/03/how-to-route-technicians-with-skills-and-multiple-dependencies-between-tasks/)
    - [What is the difference between the min. of completion time and min. transport time?](https://www.graphhopper.com/blog/2016/06/20/what-is-the-difference-between-the-minimization-of-completion-time-and-minimizing-transport-time/)
    - [How to model multiple delivery routes with a single vehicle?](https://www.graphhopper.com/blog/2016/07/21/how-to-model-multiple-delivery-routes-with-a-single-vehicle/)
    """
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def async_vrp(self, request: shared.Request) -> operations.AsyncVRPResponse:
        r"""POST route optimization problem (batch mode)
        To solve a vehicle routing problem, perform the following steps:
        
        1.) Make a HTTP POST to this URL
        
        ```
        https://graphhopper.com/api/1/vrp/optimize?key=<your_key>
        ```
        
        It returns a job id (job_id).
        
        2.) Take the job id and fetch the solution for the vehicle routing problem from this URL:
        
        ```
        https://graphhopper.com/api/1/vrp/solution/<job_id>?key=<your_key>
        ```
        
        We recommend to query the solution every 500ms until it returns 'status=finished'.
        
        **Note**: Since the workflow is a bit more cumbersome and since you lose some time in fetching the solution, you should always prefer
        the [synchronous endpoint](#operation/solveVRP). You should use the batch mode only for long running problems.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/vrp/optimize'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AsyncVRPResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.JobID])
                res.job_id = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.BadRequest])
                res.bad_request = out
        elif http_res.status_code == 500:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.InternalErrorMessage])
                res.internal_error_message = out

        return res

    def get_solution(self, request: operations.GetSolutionRequest) -> operations.GetSolutionResponse:
        r"""GET the solution (batch mode)
        Take the job id and fetch the solution for the vehicle routing problem from this URL:
        
        ```
        https://graphhopper.com/api/1/vrp/solution/<job_id>?key=<your_key>
        ```
        
        You get the job id by sending a vehicle routing problem to the [batch mode URL](#operation/asyncVRP).
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetSolutionRequest, base_url, '/vrp/solution/{jobId}', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetSolutionResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Response])
                res.response = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.BadRequest])
                res.bad_request = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetSolution404ApplicationJSON])
                res.get_solution_404_application_json_object = out
        elif http_res.status_code == 500:
            pass

        return res

    def solve_vrp(self, request: shared.Request) -> operations.SolveVRPResponse:
        r"""POST route optimization problem
        To get started with the Route Optimization API, please read the [introduction](#tag/Route-Optimization-API).
        
        To solve a new vehicle routing problem, make a HTTP POST to this URL
        
        ```
        https://graphhopper.com/api/1/vrp?key=<your_key>
        ```
        
        It returns the solution to this problem in the JSON response.
        
        Please note that this URL is very well suited to solve minor problems.
        Larger vehicle routing problems, which take longer than 10 seconds to solve, cannot be solved.
        To solve them, please use the [batch mode URL](#operation/asyncVRP) instead.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/vrp'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.SolveVRPResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Response])
                res.response = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.BadRequest])
                res.bad_request = out
        elif http_res.status_code == 500:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.InternalErrorMessage])
                res.internal_error_message = out

        return res

    