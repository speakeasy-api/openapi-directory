"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from ..shared import userpermissions as shared_userpermissions
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from enum import Enum
from marshmallow import fields
from sdk import utils
from typing import Optional

class UserAttributesRoleEnum(str, Enum):
    r"""User's access level"""
    USER = 'user'
    ADMIN = 'admin'
    MASTER = 'master'

class UserAttributesStatusEnum(str, Enum):
    r"""Indicates user activity status. `0` means the user is locked and cannot log in. `1` means the user is active and can log in."""
    ZERO = '0'
    ONE = '1'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UserAttributes:
    r"""Attributes of the user including expiration, home directory, and permissions."""
    
    account_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('accountName') }})
    r"""Name of the account this user belongs to."""  
    created: datetime = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('created'), 'encoder': utils.datetimeisoformat(False), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso') }})
    r"""Timestamp of user creation."""  
    modified: datetime = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('modified'), 'encoder': utils.datetimeisoformat(False), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso') }})
    r"""Timestamp of user modification."""  
    nickname: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('nickname') }})
    r"""Nickname of the user."""  
    onboarding: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('onboarding') }})
    r"""Whether the onboarding help system is enabled for this user. `true` means that additional help popups are displayed in the web application for this user."""  
    permissions: shared_userpermissions.UserPermissions = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('permissions') }})  
    role: UserAttributesRoleEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('role') }})
    r"""User's access level"""  
    status: UserAttributesStatusEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status') }})
    r"""Indicates user activity status. `0` means the user is locked and cannot log in. `1` means the user is active and can log in."""  
    time_zone: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('timeZone') }})
    r"""User's timezone. See <a href='https://php.net/manual/en/timezones.php' target='blank'>this page</a> for allowed values."""  
    username: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('username') }})
    r"""Username of the user."""  
    access_timestamp: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('accessTimestamp'), 'exclude': lambda f: f is None }})
    r"""Timestamp of most recent successful user login."""  
    email: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('email'), 'exclude': lambda f: f is None }})
    r"""Email address of the user."""  
    expiration: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('expiration'), 'exclude': lambda f: f is None }})
    r"""Timestamp of user expiration."""  
    first_login: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('firstLogin'), 'exclude': lambda f: f is None }})
    r"""`true` if the user has logged into the system."""  
    home_path: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('homePath'), 'exclude': lambda f: f is None }})
    r"""Path to the user's home folder."""  
    locked: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('locked'), 'exclude': lambda f: f is None }})
    r"""`true` if the user is locked and cannot log in."""  
    