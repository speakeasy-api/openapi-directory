// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// CreateCustomMetricRequestBodyMetricTypeEnum - <p> The type of the custom metric. </p> <important> <p>The type <code>number</code> only takes a single metric value as an input, but when you submit the metrics value in the DeviceMetrics report, you must pass it as an array with a single value.</p> </important>
type CreateCustomMetricRequestBodyMetricTypeEnum string

const (
	CreateCustomMetricRequestBodyMetricTypeEnumStringList    CreateCustomMetricRequestBodyMetricTypeEnum = "string-list"
	CreateCustomMetricRequestBodyMetricTypeEnumIPAddressList CreateCustomMetricRequestBodyMetricTypeEnum = "ip-address-list"
	CreateCustomMetricRequestBodyMetricTypeEnumNumberList    CreateCustomMetricRequestBodyMetricTypeEnum = "number-list"
	CreateCustomMetricRequestBodyMetricTypeEnumNumber        CreateCustomMetricRequestBodyMetricTypeEnum = "number"
)

func (e CreateCustomMetricRequestBodyMetricTypeEnum) ToPointer() *CreateCustomMetricRequestBodyMetricTypeEnum {
	return &e
}

func (e *CreateCustomMetricRequestBodyMetricTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "string-list":
		fallthrough
	case "ip-address-list":
		fallthrough
	case "number-list":
		fallthrough
	case "number":
		*e = CreateCustomMetricRequestBodyMetricTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateCustomMetricRequestBodyMetricTypeEnum: %v", v)
	}
}

type CreateCustomMetricRequestBody struct {
	// Each custom metric must have a unique client request token. If you try to create a new custom metric that already exists with a different token, an exception occurs. If you omit this value, Amazon Web Services SDKs will automatically generate a unique client request.
	ClientRequestToken string `json:"clientRequestToken"`
	//  The friendly name in the console for the custom metric. This name doesn't have to be unique. Don't use this name as the metric identifier in the device metric report. You can update the friendly name after you define it.
	DisplayName *string `json:"displayName,omitempty"`
	// <p> The type of the custom metric. </p> <important> <p>The type <code>number</code> only takes a single metric value as an input, but when you submit the metrics value in the DeviceMetrics report, you must pass it as an array with a single value.</p> </important>
	MetricType CreateCustomMetricRequestBodyMetricTypeEnum `json:"metricType"`
	//  Metadata that can be used to manage the custom metric.
	Tags []shared.Tag `json:"tags,omitempty"`
}

type CreateCustomMetricRequest struct {
	RequestBody       CreateCustomMetricRequestBody `request:"mediaType=application/json"`
	XAmzAlgorithm     *string                       `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string                       `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string                       `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string                       `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string                       `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string                       `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string                       `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	//  The name of the custom metric. This will be used in the metric report submitted from the device/thing. The name can't begin with <code>aws:</code>. You can't change the name after you define it.
	MetricName string `pathParam:"style=simple,explode=false,name=metricName"`
}

type CreateCustomMetricResponse struct {
	ContentType string
	// Success
	CreateCustomMetricResponse *shared.CreateCustomMetricResponse
	// InternalFailureException
	InternalFailureException interface{}
	// InvalidRequestException
	InvalidRequestException interface{}
	// LimitExceededException
	LimitExceededException interface{}
	StatusCode             int
	RawResponse            *http.Response
	// ResourceAlreadyExistsException
	ResourceAlreadyExistsException interface{}
	// ThrottlingException
	ThrottlingException interface{}
}
