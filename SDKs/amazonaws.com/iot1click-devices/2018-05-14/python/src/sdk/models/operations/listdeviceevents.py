"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import listdeviceeventsresponse as shared_listdeviceeventsresponse
from datetime import datetime
from typing import Any, Optional


@dataclasses.dataclass
class ListDeviceEventsRequest:
    
    device_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'deviceId', 'style': 'simple', 'explode': False }})
    r"""The unique identifier of the device."""  
    from_time_stamp: datetime = dataclasses.field(metadata={'query_param': { 'field_name': 'fromTimeStamp', 'style': 'form', 'explode': True }})
    r"""The start date for the device event query, in ISO8061 format. For example,
     2018-03-28T15:45:12.880Z
    """  
    to_time_stamp: datetime = dataclasses.field(metadata={'query_param': { 'field_name': 'toTimeStamp', 'style': 'form', 'explode': True }})
    r"""The end date for the device event query, in ISO8061 format. For example,
     2018-03-28T15:45:12.880Z
    """  
    max_results: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'maxResults', 'style': 'form', 'explode': True }})
    r"""The maximum number of results to return per request. If not set, a default value of
     100 is used.
    """  
    next_token: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'nextToken', 'style': 'form', 'explode': True }})
    r"""The token to retrieve the next set of results."""  
    x_amz_algorithm: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Algorithm', 'style': 'simple', 'explode': False }})  
    x_amz_content_sha256: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Content-Sha256', 'style': 'simple', 'explode': False }})  
    x_amz_credential: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Credential', 'style': 'simple', 'explode': False }})  
    x_amz_date: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Date', 'style': 'simple', 'explode': False }})  
    x_amz_security_token: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Security-Token', 'style': 'simple', 'explode': False }})  
    x_amz_signature: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Signature', 'style': 'simple', 'explode': False }})  
    x_amz_signed_headers: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-SignedHeaders', 'style': 'simple', 'explode': False }})  
    

@dataclasses.dataclass
class ListDeviceEventsResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    internal_failure_exception: Optional[Any] = dataclasses.field(default=None)
    r"""InternalFailureException"""  
    invalid_request_exception: Optional[Any] = dataclasses.field(default=None)
    r"""InvalidRequestException"""  
    list_device_events_response: Optional[shared_listdeviceeventsresponse.ListDeviceEventsResponse] = dataclasses.field(default=None)
    r"""Success"""  
    range_not_satisfiable_exception: Optional[Any] = dataclasses.field(default=None)
    r"""RangeNotSatisfiableException"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    resource_not_found_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ResourceNotFoundException"""  
    