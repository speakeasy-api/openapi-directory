"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import assets as shared_assets
from ..shared import assetstatusqueryparam_enum as shared_assetstatusqueryparam_enum
from enum import Enum
from typing import Optional


@dataclasses.dataclass
class GetAssetsSecurity:
    
    o_auth2: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'oauth2', 'field_name': 'Authorization' }})  
    
class GetAssetsOrderByEnum(str, Enum):
    r"""Requests can be ordered by AssetType, AssetName, AssetNumber, PurchaseDate and PurchasePrice. If the asset status is DISPOSED it also allows DisposalDate and DisposalPrice."""
    ASSET_TYPE = 'AssetType'
    ASSET_NAME = 'AssetName'
    ASSET_NUMBER = 'AssetNumber'
    PURCHASE_DATE = 'PurchaseDate'
    PURCHASE_PRICE = 'PurchasePrice'
    DISPOSAL_DATE = 'DisposalDate'
    DISPOSAL_PRICE = 'DisposalPrice'

class GetAssetsSortDirectionEnum(str, Enum):
    r"""ASC or DESC"""
    ASC = 'asc'
    DESC = 'desc'


@dataclasses.dataclass
class GetAssetsRequest:
    
    status: shared_assetstatusqueryparam_enum.AssetStatusQueryParamEnum = dataclasses.field(metadata={'query_param': { 'field_name': 'status', 'style': 'form', 'explode': True }})
    r"""Required when retrieving a collection of assets. See Asset Status Codes"""  
    xero_tenant_id: str = dataclasses.field(metadata={'header': { 'field_name': 'xero-tenant-id', 'style': 'simple', 'explode': False }})
    r"""Xero identifier for Tenant"""  
    filter_by: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'filterBy', 'style': 'form', 'explode': True }})
    r"""A string that can be used to filter the list to only return assets containing the text. Checks it against the AssetName, AssetNumber, Description and AssetTypeName fields."""  
    order_by: Optional[GetAssetsOrderByEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'orderBy', 'style': 'form', 'explode': True }})
    r"""Requests can be ordered by AssetType, AssetName, AssetNumber, PurchaseDate and PurchasePrice. If the asset status is DISPOSED it also allows DisposalDate and DisposalPrice."""  
    page: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'page', 'style': 'form', 'explode': True }})
    r"""Results are paged. This specifies which page of the results to return. The default page is 1."""  
    page_size: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'pageSize', 'style': 'form', 'explode': True }})
    r"""The number of records returned per page. By default the number of records returned is 10."""  
    sort_direction: Optional[GetAssetsSortDirectionEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'sortDirection', 'style': 'form', 'explode': True }})
    r"""ASC or DESC"""  
    

@dataclasses.dataclass
class GetAssetsResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    assets: Optional[shared_assets.Assets] = dataclasses.field(default=None)
    r"""search results matching criteria"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    