// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// DocumentOrderOrderTypeEnum - The type of this order.
type DocumentOrderOrderTypeEnum string

const (
	DocumentOrderOrderTypeEnumRegular     DocumentOrderOrderTypeEnum = "regular"
	DocumentOrderOrderTypeEnumConsignment DocumentOrderOrderTypeEnum = "consignment"
)

func (e *DocumentOrderOrderTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "regular":
		fallthrough
	case "consignment":
		*e = DocumentOrderOrderTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for DocumentOrderOrderTypeEnum: %s", s)
	}
}

// DocumentOrderTaxSystemEnum - The tax system used for the invoice. The system 'tax_line_percentages' is the only one currently supported.
type DocumentOrderTaxSystemEnum string

const (
	DocumentOrderTaxSystemEnumTaxLinePercentages DocumentOrderTaxSystemEnum = "tax_line_percentages"
)

func (e *DocumentOrderTaxSystemEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "tax_line_percentages":
		*e = DocumentOrderTaxSystemEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for DocumentOrderTaxSystemEnum: %s", s)
	}
}

// DocumentOrder - The order to send.
type DocumentOrder struct {
	// The buyer's accounting cost centre for this document.
	AccountingCost *string `json:"accountingCost,omitempty"`
	// An array of allowance charges.
	AllowanceCharges []AllowanceCharge `json:"allowanceCharges,omitempty"`
	// Total amount including Tax.
	AmountIncludingTax float64 `json:"amountIncludingTax"`
	// An array of attachments. You may provide up to 10 attchments, but the total size must not exceed 10MB after Base64 encoding.
	Attachments   []Attachment   `json:"attachments,omitempty"`
	Delivery      *Delivery      `json:"delivery,omitempty"`
	DeliveryTerms *DeliveryTerms `json:"deliveryTerms,omitempty"`
	// The ISO 4217 currency code.
	DocumentCurrencyCode *CurrencyCodeEnum `json:"documentCurrencyCode,omitempty"`
	// The number you assigned to the document.
	DocumentNumber string `json:"documentNumber"`
	// Format: yyyy-mm-dd.
	IssueDate string `json:"issueDate"`
	// Format: hh:mm:ss±zzzz
	IssueTime *string `json:"issueTime,omitempty"`
	// A note to add to the document
	Note *string `json:"note,omitempty"`
	// An array of order lines.
	OrderLines []OrderLine `json:"orderLines"`
	// The type of this order.
	OrderType *DocumentOrderOrderTypeEnum `json:"orderType,omitempty"`
	// The payment terms of the document.
	PaymentTerms *PaymentTerms `json:"paymentTerms,omitempty"`
	// An array of references to other documents. Note that many syntaxes do not support multiple references of the same type in which case they will be concatenated with ','. Also, not all syntaxes and doucments support all documentTypes.
	References []Reference `json:"references,omitempty"`
	// The party sending the order.
	SellerSupplierParty SellerSupplierParty `json:"sellerSupplierParty"`
	// The tax system used for the invoice. The system 'tax_line_percentages' is the only one currently supported.
	TaxSystem *DocumentOrderTaxSystemEnum `json:"taxSystem,omitempty"`
	// Format: ±zzzz, where ±zzzz is the difference from UTC, e.g. +0100 or -0900 etc. The timezone will also apply to the document issue date if this field is provided.
	TimeZone *string `json:"timeZone,omitempty"`
	// The period (or specific date) to which the invoice applies. Format: yyyy-mm-dd - yyyy-mm-dd.
	ValidityPeriod *string `json:"validityPeriod,omitempty"`
}
