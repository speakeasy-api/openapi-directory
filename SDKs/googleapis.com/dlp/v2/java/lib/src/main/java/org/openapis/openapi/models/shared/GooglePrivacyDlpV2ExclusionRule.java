/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * GooglePrivacyDlpV2ExclusionRule - The rule that specifies conditions when findings of infoTypes specified in `InspectionRuleSet` are removed from results.
 */
public class GooglePrivacyDlpV2ExclusionRule {
    /**
     * Custom information type based on a dictionary of words or phrases. This can be used to match sensitive information specific to the data, such as a list of employee IDs or job titles. Dictionary words are case-insensitive and all characters other than letters and digits in the unicode [Basic Multilingual Plane](https://en.wikipedia.org/wiki/Plane_%28Unicode%29#Basic_Multilingual_Plane) will be replaced with whitespace when scanning for matches, so the dictionary phrase "Sam Johnson" will match all three phrases "sam johnson", "Sam, Johnson", and "Sam (Johnson)". Additionally, the characters surrounding any match must be of a different type than the adjacent characters within the word, so letters must be next to non-letters and digits next to non-digits. For example, the dictionary word "jen" will match the first three letters of the text "jen123" but will return no matches for "jennifer". Dictionary words containing a large number of characters that are not letters or digits may result in unexpected findings because such characters are treated as whitespace. The [limits](https://cloud.google.com/dlp/limits) page contains details about the size limits of dictionaries. For dictionaries that do not fit within these constraints, consider using `LargeCustomDictionaryConfig` in the `StoredInfoType` API.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("dictionary")
    public GooglePrivacyDlpV2Dictionary dictionary;
    public GooglePrivacyDlpV2ExclusionRule withDictionary(GooglePrivacyDlpV2Dictionary dictionary) {
        this.dictionary = dictionary;
        return this;
    }
    
    /**
     * The rule to exclude findings based on a hotword. For record inspection of tables, column names are considered hotwords. An example of this is to exclude a finding if it belongs to a BigQuery column that matches a specific pattern.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("excludeByHotword")
    public GooglePrivacyDlpV2ExcludeByHotword excludeByHotword;
    public GooglePrivacyDlpV2ExclusionRule withExcludeByHotword(GooglePrivacyDlpV2ExcludeByHotword excludeByHotword) {
        this.excludeByHotword = excludeByHotword;
        return this;
    }
    
    /**
     * List of excluded infoTypes.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("excludeInfoTypes")
    public GooglePrivacyDlpV2ExcludeInfoTypes excludeInfoTypes;
    public GooglePrivacyDlpV2ExclusionRule withExcludeInfoTypes(GooglePrivacyDlpV2ExcludeInfoTypes excludeInfoTypes) {
        this.excludeInfoTypes = excludeInfoTypes;
        return this;
    }
    
    /**
     * How the rule is applied, see MatchingType documentation for details.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("matchingType")
    public GooglePrivacyDlpV2ExclusionRuleMatchingTypeEnum matchingType;
    public GooglePrivacyDlpV2ExclusionRule withMatchingType(GooglePrivacyDlpV2ExclusionRuleMatchingTypeEnum matchingType) {
        this.matchingType = matchingType;
        return this;
    }
    
    /**
     * Message defining a custom regular expression.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("regex")
    public GooglePrivacyDlpV2Regex regex;
    public GooglePrivacyDlpV2ExclusionRule withRegex(GooglePrivacyDlpV2Regex regex) {
        this.regex = regex;
        return this;
    }
    
}
