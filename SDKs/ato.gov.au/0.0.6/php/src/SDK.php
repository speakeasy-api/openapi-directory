<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

/**
 * SDK - # Introduction
 * 
 * The Business Registries API is built on HTTP. The API is RESTful. It has predictable resource URIs.
 * 
 *   The API is documented in <a target="_blank" href="https://github.com/OAI/OpenAPI-Specification">OpenAPI</a> format.
 *   In addition to the standard OpenAPI syntax we use a few
 *   <a target="_blank" href="https://github.com/Rebilly/ReDoc/blob/master/docs/redoc-vendor-extensions.md">vendor extensions</a>.
 * 
 * # Overview
 * The following sections describe the resources that make up the Business Registries REST API.
 * ## Current Version
 * By default, all requests to https://api.abr.ato.gov.au receive the `v1` version of the REST API. We encourage you to explicitly request this version via the `Accept` header.
 * 
 *     Accept: application/vnd.abr-ato.v1+json
 * 
 * ## Schema
 * All API access is over HTTPS, and accessed from https://api.abr.ato.gov.au. All data is sent and received as JSON. Blank fields are included.
 * 
 *   All dates use the [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format:
 * 
 *     YYYY-MM-DD
 * 
 *   For example: `2017-07-01` (the 1st of July 2017)
 * 
 *   All timestamps use the [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format:
 * 
 *     YYYY-MM-DDTHH:MM:SSZ
 * 
 *   For example: `2017-07-01T11:05:06+10:00`
 * 
 * ## Timezones
 * Some requests allow for specifying timestamps or generate timestamps with time zone information. We apply the following rules, in order of priority, to determine timezone information for API calls.
 * ### Explicitly provide an ISO 8601 timestamp with timezone information
 * For API calls that allow for a timestamp to be specified, we use that exact timestamp.
 * 
 *   For example: `2017-07-01T11:05:06+10:00`
 * 
 * ## Pagination
 * Information about pagination is provided in the [Link](https://tools.ietf.org/html/rfc5988#page-6) header.
 * 
 *   For example:
 * 
 *     Link: <https://api.abr.ato.gov.au/individuals?page=2>; rel="next",
 *           <https://api.abr.ato.gov.au/individuals?page=34>; rel="last"
 * 
 * `rel="next"` states that the next page is `page=2`. This makes sense, since by default, all paginated queries start at page `1`. `rel="last"` provides some more information, stating that the last page of results is on `page 34`. Accordingly, we have 33 more pages of information that we can consume.
 * ## Parameters
 * Many API methods take optional parameters:
 * 
 *     GET /individuals/1234/addresses/?addressType='Mailing'
 * 
 * In this example, the '1234' value is provided for the `:partyId` parameter in the path while `:addressType` is passed in the query string.
 * For POST, PATCH, PUT, and DELETE requests, parameters not included in the URL should be encoded as JSON with a Content-Type of 'application/json'.
 * ## Metadata
 * The API provides **metadata services** that you can use to discover information about the classifcation schemes and values used by the Registry.
 * 
 *   For example:
 * 
 *     GET /classifications/roles
 * 
 *   Sample response:
 * 
 *     [
 *       {
 *         "id": "123e4567-e89b-12d3-a456-426655440001",
 *         "role": "Director",
 *         "roleDescription": "An individual responsible for managing a company's ...",
 *         "relationship": "Directorship",
 *         "reciprocalRole": "Company",
 *         "reciprocalRoleDescription": "An incorporated legal entity."
 *       },
 *       {
 *         ...
 *       }
 *     ]
 * 
 * ## Root Endpoint
 * You can issue a GET request to the root endpoint (also known as the service root) to get all the endpoint categories that the REST API supports:
 * 
 *     curl https://api.abr.ato.gov.au
 * 
 * ## Authentication
 * The Business Registries API supports API Key authentication.
 * 
 *   When you sign up for an account, you are given your first API key. You can generate additional API keys, and delete
 *   API keys (as you may need to rotate your keys in the future). You authenticate to the Business Registries API by
 *   providing your secret key in the request header.
 * 
 *   **Note:** Some requests will return `404 Not Found`, instead of `403 Permission Denied`. This is to prevent the
 *   accidental leakage of information to unauthorised users.
 * 
 * 
 * @package OpenAPI\OpenAPI
 * @access public
 */
class SDK
{
	public const SERVERS = [
        /** Production API Server */
		'//api.abr.ato.gov.au/',
        /** Sandbox API Server */
		'//api.sandbox.abr.ato.gov.au/',
	];
  	
    /**
     * A classification scheme for addresses.
     * 
     * 
     * 
     * @var AddressTypes $$addressTypes
     */
	public AddressTypes $addressTypes;
	
    /**
     * A classification scheme for business names.
     * 
     * 
     * 
     * @var BusinessNameLifecycleStates $$businessNameLifecycleStates
     */
	public BusinessNameLifecycleStates $businessNameLifecycleStates;
	
    /**
     * A business name is a name or title under which a person or organisation conducts a business.
     * 
     * 
     * 
     * @var BusinessNames $$businessNames
     */
	public BusinessNames $businessNames;
	
    /**
     * A classification scheme for electronic addresses.
     * 
     * 
     * 
     * @var ElectronicAddressTypes $$electronicAddressTypes
     */
	public ElectronicAddressTypes $electronicAddressTypes;
	
    /**
     * A classification scheme for the representation of human sexes.
     * 
     * 
     * 
     * @var Genders $$genders
     */
	public Genders $genders;
	
    /**
     * An individual is a person about whom the registry wishes to maintain information.
     * 
     * 
     *   For example, the individual's date and place of birth (for the purposes of identification) and the individual's
     *   residential address (which is used for administrative purposes).
     * 
     * 
     * @var Individuals $$individuals
     */
	public Individuals $individuals;
	
    /**
     * The registry maintains information about an individual's contact details for administrative purposes.
     * 
     * 
     *   Including:
     *   - an address for the service of documents
     *   - a principal place of business address
     * 
     * 
     * @var IndividualsAddresses $$individualsAddresses
     */
	public IndividualsAddresses $individualsAddresses;
	
    /**
     * A business name is a name or title under which a person conducts a business.
     * 
     * 
     * 
     * @var IndividualsBusinessNames $$individualsBusinessNames
     */
	public IndividualsBusinessNames $individualsBusinessNames;
	
    /**
     * The registry maintains information about an individual's contact details for administrative purposes.
     * 
     * 
     *   Including:
     *   - an email address
     *   - a mobile number
     * 
     * 
     * @var IndividualsElectronicAddresses $$individualsElectronicAddresses
     */
	public IndividualsElectronicAddresses $individualsElectronicAddresses;
	
    /**
     * If you carry on a business you may need to hold a licence.
     * 
     * 
     *   For example, if you provide financial services, you are required to hold an Australian Financial
     *   Services (AFS) licence.
     * 
     * 
     * @var IndividualsLicenses $$individualsLicenses
     */
	public IndividualsLicenses $individualsLicenses;
	
    /**
     * A role defines the characteristics of a relationship between parties.
     * 
     * An Individual can participate in a relationship with other individuals and organisations.
     * 
     * For example:
     * 
     * | Party         | Role           | Relationship     | Role          | Party                           |
     * | ------------- | -------------- | ---------------- | ------------- | ------------------------------- |
     * | Homer Simpson | Husband        | Marriage         | Wife          | Marge Simpson                   |
     * | Homer Simpson | Employee       | Employment       | Employer      | Springfield Nuclear Power Plant |
     * | Homer Simpson | Safety Officer | Colleague        | Supervisor    | Carl Carlson                    |
     * | Homer Simpson | Director       | Directorship     | Company       | Compu Global Hyper Mega Net     |
     * | Homer Simpson | Employee       | Employment       | Employer      | Compu Global Hyper Mega Net     |
     * | Homer Simpson | Member         | Membership       | Organisation  | The Stonecutters                |
     * | Homer Simpson | Partner        | Partnership      | Partnership   | The Be Sharps                   |
     * | Homer Simpson | Trustee        | Trusteeship      | Trust         | The Simpson Family Trust        |
     * | Homer Simpson | Member         | Membership       | Association   | Mensa International             |
     * 
     * You can use the API's **metadata services** to retrieve information about the classifcation schemes and
     * values used by the Registry.
     * 
     * 
     * @var IndividualsRoles $$individualsRoles
     */
	public IndividualsRoles $individualsRoles;
	
    /**
     * A classification scheme for parties (individuals and organisations).
     * 
     * 
     * 
     * @var LegalEntityTypes $$legalEntityTypes
     */
	public LegalEntityTypes $legalEntityTypes;
	
    /**
     * A classification scheme for licenses.
     * 
     * 
     * 
     * @var LicenseLifecycleStates $$licenseLifecycleStates
     */
	public LicenseLifecycleStates $licenseLifecycleStates;
	
    /**
     * A classification scheme for licenses.
     * 
     * 
     * 
     * @var LicenseTypes $$licenseTypes
     */
	public LicenseTypes $licenseTypes;
	
    /**
     * If you carry on a business you may need to hold a licence.
     * 
     * 
     *   For example, if you provide financial services, you are required to hold an Australian Financial
     *   Services (AFS) licence.
     * 
     * 
     * @var Licenses $$licenses
     */
	public Licenses $licenses;
	
    /**
     * A classification scheme for names.
     * 
     * 
     * 
     * @var NameDirections $$nameDirections
     */
	public NameDirections $nameDirections;
	
    /**
     * A classification scheme for names.
     * 
     * 
     * 
     * @var NamePrefixes $$namePrefixes
     */
	public NamePrefixes $namePrefixes;
	
    /**
     * A classification scheme for names.
     * 
     * 
     * 
     * @var NameTypes $$nameTypes
     */
	public NameTypes $nameTypes;
	
    /**
     * An organisation usually consists of a number of individuals or groups bound by a common purpose about whom the
     * 
     * registry wishes to maintain information.
     * 
     *   For example, the organisation's legal entity type (e.g., Incorporated Entity, Unincorporated Entity,
     *   Partnership or Joint Venture).
     * 
     * 
     * @var Organisations $$organisations
     */
	public Organisations $organisations;
	
    /**
     * The registry maintains information about an organisation's contact details for administrative purposes.
     * 
     * 
     *   Including:
     *   - an address for the service of documents
     *   - a principal place of business address
     * 
     * 
     * @var OrganisationsAddresses $$organisationsAddresses
     */
	public OrganisationsAddresses $organisationsAddresses;
	
    /**
     * A business name is a name or title under which an organisation conducts a business.
     * 
     * 
     * 
     * @var OrganisationsBusinessNames $$organisationsBusinessNames
     */
	public OrganisationsBusinessNames $organisationsBusinessNames;
	
    /**
     * The registry maintains information about an organisation's contact details for administrative purposes.
     * 
     * 
     *   Including:
     *   - an email address
     *   - a mobile number
     * 
     * 
     * @var OrganisationsElectronicAddresses $$organisationsElectronicAddresses
     */
	public OrganisationsElectronicAddresses $organisationsElectronicAddresses;
	
    /**
     * If you carry on a business you may need to hold a licence.
     * 
     * 
     *   For example, if you provide financial services, you are required to hold an Australian Financial
     *   Services (AFS) licence.
     * 
     * 
     * @var OrganisationsLicenses $$organisationsLicenses
     */
	public OrganisationsLicenses $organisationsLicenses;
	
    /**
     * A role defines the characteristics of a relationship between parties.
     * 
     * An Organisation can participate in a relationship with other organisations and indiviuals.
     * 
     * For example:
     * 
     * | Party                           | Role     | Relationship | Role         | Party             |
     * | ------------------------------- | -------- | -------------| ------------ | ----------------- |
     * | Springfield Nuclear Power Plant | Employer | Employment   | Employee     | Homer Simpson     |
     * | Springfield Nuclear Power Plant | Company  | Directorship | Director     | Mr Burns          |
     * | Springfield Nuclear Power Plant | Employer | Employment   | Employee     | Mr Burns          |
     * | Springfield Nuclear Power Plant | Sponsor  | Sponsorship  | Organisation | The Stonecutters  |
     * 
     * You can use the API's **metadata services** to retrieve information about the classifcation schemes and
     * values used by the Registry.
     * 
     * 
     * @var OrganisationsRoles $$organisationsRoles
     */
	public OrganisationsRoles $organisationsRoles;
	
    /**
     * A classification scheme for registered identifiers.
     * 
     * 
     * 
     * @var RegisteredIdentifierTypes $$registeredIdentifierTypes
     */
	public RegisteredIdentifierTypes $registeredIdentifierTypes;
	
    /**
     * A classification scheme for the characteristics of relationships between parties (individuals and organisations).
     * 
     * 
     * 
     * @var Roles $$roles
     */
	public Roles $roles;
		
	// SDK private variables namespaced with _ to avoid conflicts with API models
	private ?\GuzzleHttp\ClientInterface $_defaultClient;
	private ?\GuzzleHttp\ClientInterface $_securityClient;
	
	private string $_serverUrl;
	private string $_language = 'php';
	private string $_sdkVersion = '0.0.1';
	private string $_genVersion = 'internal';

	/**
	 * Returns a new instance of the SDK builder used to configure and create the SDK instance.
	 * 
	 * @return SDKBuilder
	 */
	public static function builder(): SDKBuilder
	{
		return new SDKBuilder();
	}

	/**
	 * @param \GuzzleHttp\ClientInterface|null $client
	 * @param string $serverUrl
	 * @param array<string, string>|null $params
	 */
	public function __construct(?\GuzzleHttp\ClientInterface $client, string $serverUrl, ?array $params)
	{
		$this->_defaultClient = $client;
		
		if ($this->_defaultClient === null) {
			$this->_defaultClient = new \GuzzleHttp\Client([
				'timeout' => 60,
			]);
		}

		$this->_securityClient = null;
		if ($this->_securityClient === null) {
			$this->_securityClient = $this->_defaultClient;
		}

		if (!empty($serverUrl)) {
			$this->_serverUrl = Utils\Utils::templateUrl($serverUrl, $params);
		}
		
		if (empty($this->_serverUrl)) {
			$this->_serverUrl = $this::SERVERS[0];
		}
		
		$this->addressTypes = new AddressTypes(
			$this->_defaultClient,
			$this->_securityClient,
			$this->_serverUrl,
			$this->_language,
			$this->_sdkVersion,
			$this->_genVersion
		);
		
		$this->businessNameLifecycleStates = new BusinessNameLifecycleStates(
			$this->_defaultClient,
			$this->_securityClient,
			$this->_serverUrl,
			$this->_language,
			$this->_sdkVersion,
			$this->_genVersion
		);
		
		$this->businessNames = new BusinessNames(
			$this->_defaultClient,
			$this->_securityClient,
			$this->_serverUrl,
			$this->_language,
			$this->_sdkVersion,
			$this->_genVersion
		);
		
		$this->electronicAddressTypes = new ElectronicAddressTypes(
			$this->_defaultClient,
			$this->_securityClient,
			$this->_serverUrl,
			$this->_language,
			$this->_sdkVersion,
			$this->_genVersion
		);
		
		$this->genders = new Genders(
			$this->_defaultClient,
			$this->_securityClient,
			$this->_serverUrl,
			$this->_language,
			$this->_sdkVersion,
			$this->_genVersion
		);
		
		$this->individuals = new Individuals(
			$this->_defaultClient,
			$this->_securityClient,
			$this->_serverUrl,
			$this->_language,
			$this->_sdkVersion,
			$this->_genVersion
		);
		
		$this->individualsAddresses = new IndividualsAddresses(
			$this->_defaultClient,
			$this->_securityClient,
			$this->_serverUrl,
			$this->_language,
			$this->_sdkVersion,
			$this->_genVersion
		);
		
		$this->individualsBusinessNames = new IndividualsBusinessNames(
			$this->_defaultClient,
			$this->_securityClient,
			$this->_serverUrl,
			$this->_language,
			$this->_sdkVersion,
			$this->_genVersion
		);
		
		$this->individualsElectronicAddresses = new IndividualsElectronicAddresses(
			$this->_defaultClient,
			$this->_securityClient,
			$this->_serverUrl,
			$this->_language,
			$this->_sdkVersion,
			$this->_genVersion
		);
		
		$this->individualsLicenses = new IndividualsLicenses(
			$this->_defaultClient,
			$this->_securityClient,
			$this->_serverUrl,
			$this->_language,
			$this->_sdkVersion,
			$this->_genVersion
		);
		
		$this->individualsRoles = new IndividualsRoles(
			$this->_defaultClient,
			$this->_securityClient,
			$this->_serverUrl,
			$this->_language,
			$this->_sdkVersion,
			$this->_genVersion
		);
		
		$this->legalEntityTypes = new LegalEntityTypes(
			$this->_defaultClient,
			$this->_securityClient,
			$this->_serverUrl,
			$this->_language,
			$this->_sdkVersion,
			$this->_genVersion
		);
		
		$this->licenseLifecycleStates = new LicenseLifecycleStates(
			$this->_defaultClient,
			$this->_securityClient,
			$this->_serverUrl,
			$this->_language,
			$this->_sdkVersion,
			$this->_genVersion
		);
		
		$this->licenseTypes = new LicenseTypes(
			$this->_defaultClient,
			$this->_securityClient,
			$this->_serverUrl,
			$this->_language,
			$this->_sdkVersion,
			$this->_genVersion
		);
		
		$this->licenses = new Licenses(
			$this->_defaultClient,
			$this->_securityClient,
			$this->_serverUrl,
			$this->_language,
			$this->_sdkVersion,
			$this->_genVersion
		);
		
		$this->nameDirections = new NameDirections(
			$this->_defaultClient,
			$this->_securityClient,
			$this->_serverUrl,
			$this->_language,
			$this->_sdkVersion,
			$this->_genVersion
		);
		
		$this->namePrefixes = new NamePrefixes(
			$this->_defaultClient,
			$this->_securityClient,
			$this->_serverUrl,
			$this->_language,
			$this->_sdkVersion,
			$this->_genVersion
		);
		
		$this->nameTypes = new NameTypes(
			$this->_defaultClient,
			$this->_securityClient,
			$this->_serverUrl,
			$this->_language,
			$this->_sdkVersion,
			$this->_genVersion
		);
		
		$this->organisations = new Organisations(
			$this->_defaultClient,
			$this->_securityClient,
			$this->_serverUrl,
			$this->_language,
			$this->_sdkVersion,
			$this->_genVersion
		);
		
		$this->organisationsAddresses = new OrganisationsAddresses(
			$this->_defaultClient,
			$this->_securityClient,
			$this->_serverUrl,
			$this->_language,
			$this->_sdkVersion,
			$this->_genVersion
		);
		
		$this->organisationsBusinessNames = new OrganisationsBusinessNames(
			$this->_defaultClient,
			$this->_securityClient,
			$this->_serverUrl,
			$this->_language,
			$this->_sdkVersion,
			$this->_genVersion
		);
		
		$this->organisationsElectronicAddresses = new OrganisationsElectronicAddresses(
			$this->_defaultClient,
			$this->_securityClient,
			$this->_serverUrl,
			$this->_language,
			$this->_sdkVersion,
			$this->_genVersion
		);
		
		$this->organisationsLicenses = new OrganisationsLicenses(
			$this->_defaultClient,
			$this->_securityClient,
			$this->_serverUrl,
			$this->_language,
			$this->_sdkVersion,
			$this->_genVersion
		);
		
		$this->organisationsRoles = new OrganisationsRoles(
			$this->_defaultClient,
			$this->_securityClient,
			$this->_serverUrl,
			$this->_language,
			$this->_sdkVersion,
			$this->_genVersion
		);
		
		$this->registeredIdentifierTypes = new RegisteredIdentifierTypes(
			$this->_defaultClient,
			$this->_securityClient,
			$this->_serverUrl,
			$this->_language,
			$this->_sdkVersion,
			$this->_genVersion
		);
		
		$this->roles = new Roles(
			$this->_defaultClient,
			$this->_securityClient,
			$this->_serverUrl,
			$this->_language,
			$this->_sdkVersion,
			$this->_genVersion
		);
	}
}