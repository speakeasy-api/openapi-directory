"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

SERVERS = [
    "https://api.openuv.io/api/{version}",
]
"""Contains the list of servers available to the SDK"""

class SDK:
    r"""The missing minimalistic JSON real-time UV Index API for awesome Developers, Innovators and Smart Home Enthusiasts"""

    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str = SERVERS[0]
    _language: str = "python"
    _sdk_version: str = "0.0.1"
    _gen_version: str = "internal"

    def __init__(self,
                 server_url: str = None,
                 url_params: dict[str, str] = None,
                 client: requests_http.Session = None
                 ) -> None:
        """Instantiates the SDK configuring it with the provided parameters.
        
        :param server_url: The server URL to use for all operations
        :type server_url: str
        :param url_params: Parameters to optionally template the server URL with
        :type url_params: dict[str, str]
        :param client: The requests.Session HTTP client to use for all operations
        :type client: requests_http.Session        
        """
        self._client = requests_http.Session()
        
        
        if server_url is not None:
            if url_params is not None:
                self._server_url = utils.template_url(server_url, url_params)
            else:
                self._server_url = server_url

        if client is not None:
            self._client = client
        
        self._security_client = self._client
        

        
    
    
    def get_forecast(self, request: operations.GetForecastRequest) -> operations.GetForecastResponse:
        r"""Get hourly UV Index Forecast by location and date. Optional altitude, ozone level and datetime could be provided."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/forecast'
        
        headers = utils.get_headers(request)
        query_params = utils.get_query_params(operations.GetForecastRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetForecastResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[list[shared.Forecast]]])
                res.forecast_results = out

        return res

    def get_protection(self, request: operations.GetProtectionRequest) -> operations.GetProtectionResponse:
        r"""Get daily protection time by location, UV Index from and UV Index to with 10 minutes accuracy. Optional altitide and ozone level could be provided."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/protection'
        
        headers = utils.get_headers(request)
        query_params = utils.get_query_params(operations.GetProtectionRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetProtectionResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ProtectionResult])
                res.protection_result = out

        return res

    def get_uv(self, request: operations.GetUvRequest) -> operations.GetUvResponse:
        r"""Get real-time UV Index by location. Optional altitude, ozone level and datetime could be provided."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/uv'
        
        headers = utils.get_headers(request)
        query_params = utils.get_query_params(operations.GetUvRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetUvResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.UvIndexResult])
                res.uv_index_result = out

        return res

    