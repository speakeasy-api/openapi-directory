// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type BooksMylibraryBookshelvesAddVolumeSecurity struct {
	Oauth2  string `security:"scheme,type=oauth2,name=Authorization"`
	Oauth2c string `security:"scheme,type=oauth2,name=Authorization"`
}

// BooksMylibraryBookshelvesAddVolumeReasonEnum - The reason for which the book is added to the library.
type BooksMylibraryBookshelvesAddVolumeReasonEnum string

const (
	BooksMylibraryBookshelvesAddVolumeReasonEnumReasonUndefined BooksMylibraryBookshelvesAddVolumeReasonEnum = "REASON_UNDEFINED"
	BooksMylibraryBookshelvesAddVolumeReasonEnumIosPrex         BooksMylibraryBookshelvesAddVolumeReasonEnum = "IOS_PREX"
	BooksMylibraryBookshelvesAddVolumeReasonEnumIosSearch       BooksMylibraryBookshelvesAddVolumeReasonEnum = "IOS_SEARCH"
	BooksMylibraryBookshelvesAddVolumeReasonEnumOnboarding      BooksMylibraryBookshelvesAddVolumeReasonEnum = "ONBOARDING"
)

func (e BooksMylibraryBookshelvesAddVolumeReasonEnum) ToPointer() *BooksMylibraryBookshelvesAddVolumeReasonEnum {
	return &e
}

func (e *BooksMylibraryBookshelvesAddVolumeReasonEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "REASON_UNDEFINED":
		fallthrough
	case "IOS_PREX":
		fallthrough
	case "IOS_SEARCH":
		fallthrough
	case "ONBOARDING":
		*e = BooksMylibraryBookshelvesAddVolumeReasonEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for BooksMylibraryBookshelvesAddVolumeReasonEnum: %v", v)
	}
}

type BooksMylibraryBookshelvesAddVolumeRequest struct {
	// V1 error format.
	DollarXgafv *shared.XgafvEnum `queryParam:"style=form,explode=true,name=$.xgafv"`
	// OAuth access token.
	AccessToken *string `queryParam:"style=form,explode=true,name=access_token"`
	// Data format for response.
	Alt *shared.AltEnum `queryParam:"style=form,explode=true,name=alt"`
	// JSONP
	Callback *string `queryParam:"style=form,explode=true,name=callback"`
	// Selector specifying which fields to include in a partial response.
	Fields *string `queryParam:"style=form,explode=true,name=fields"`
	// API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
	Key *string `queryParam:"style=form,explode=true,name=key"`
	// OAuth 2.0 token for the current user.
	OauthToken *string `queryParam:"style=form,explode=true,name=oauth_token"`
	// Returns response with indentations and line breaks.
	PrettyPrint *bool `queryParam:"style=form,explode=true,name=prettyPrint"`
	// Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
	QuotaUser *string `queryParam:"style=form,explode=true,name=quotaUser"`
	// The reason for which the book is added to the library.
	Reason *BooksMylibraryBookshelvesAddVolumeReasonEnum `queryParam:"style=form,explode=true,name=reason"`
	// ID of bookshelf to which to add a volume.
	Shelf string `pathParam:"style=simple,explode=false,name=shelf"`
	// String to identify the originator of this request.
	Source *string `queryParam:"style=form,explode=true,name=source"`
	// Legacy upload protocol for media (e.g. "media", "multipart").
	UploadType *string `queryParam:"style=form,explode=true,name=uploadType"`
	// Upload protocol for media (e.g. "raw", "multipart").
	UploadProtocol *string `queryParam:"style=form,explode=true,name=upload_protocol"`
	// ID of volume to add.
	VolumeID string `queryParam:"style=form,explode=true,name=volumeId"`
}

type BooksMylibraryBookshelvesAddVolumeResponse struct {
	ContentType string
	// Successful response
	Empty       map[string]interface{}
	StatusCode  int
	RawResponse *http.Response
}
