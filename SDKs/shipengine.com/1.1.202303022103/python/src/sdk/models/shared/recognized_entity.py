"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Any, Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class RecognizedEntity:
    r"""An entity is a single piece of data that was recognized in unstructured text.  For example, a city, a postal code, package dimensions, insured value, etc.  Each entity includes the original text and the parsed value."""
    
    end_index: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('end_index') }})
    r"""The index of the last character of this entity within the original text"""  
    score: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('score') }})
    r"""A confidence score between zero and one that indicates how certain the API is that it correctly recognized this entity"""  
    start_index: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('start_index') }})
    r"""The index of the first character of this entity within the original text"""  
    text: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('text') }})
    r"""The substring from the original text that was recognized as this entity"""  
    type: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type') }})
    r"""The Entity type (e.g. \\"weight\\", \\"person\\", \\"address_line1\\", etc.)"""  
    result: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('result'), 'exclude': lambda f: f is None }})
    r"""The normalized value of the entity.
    
    Most entity results have a `value` field, which is the normalized value of the entity.  For example, if the substring \"john doe\" was recognized as a \"person\" entity, then the value might be normalized to have proper capitalization (e.g. \"John Doe\").  Or if the substring \"ft worth\" was recognized as a \"city\" entity, then the value might be normalized to \"Fort Worth\".
    
    Some entities have other information in addition to, or instead of a `value`.  For example, a \"dimensions\" entity will have separate fields for `length`, `width`, `height`, and `unit`.
    """  
    