// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// POSTGetServerCertificateActionEnum
type POSTGetServerCertificateActionEnum string

const (
	POSTGetServerCertificateActionEnumGetServerCertificate POSTGetServerCertificateActionEnum = "GetServerCertificate"
)

func (e *POSTGetServerCertificateActionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "GetServerCertificate":
		*e = POSTGetServerCertificateActionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for POSTGetServerCertificateActionEnum: %s", s)
	}
}

// POSTGetServerCertificateVersionEnum
type POSTGetServerCertificateVersionEnum string

const (
	POSTGetServerCertificateVersionEnumTwoThousandAndTen0508 POSTGetServerCertificateVersionEnum = "2010-05-08"
)

func (e *POSTGetServerCertificateVersionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "2010-05-08":
		*e = POSTGetServerCertificateVersionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for POSTGetServerCertificateVersionEnum: %s", s)
	}
}

type POSTGetServerCertificateRequest struct {
	Action            POSTGetServerCertificateActionEnum  `queryParam:"style=form,explode=true,name=Action"`
	RequestBody       []byte                              `request:"mediaType=text/xml"`
	Version           POSTGetServerCertificateVersionEnum `queryParam:"style=form,explode=true,name=Version"`
	XAmzAlgorithm     *string                             `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string                             `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string                             `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string                             `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string                             `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string                             `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string                             `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
}

type POSTGetServerCertificateResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
