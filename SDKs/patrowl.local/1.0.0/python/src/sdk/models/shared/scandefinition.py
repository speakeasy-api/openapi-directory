"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Any, Optional

class ScanDefinitionAssetsCriticityEnum(str, Enum):
    LOW = 'low'
    MEDIUM = 'medium'
    HIGH = 'high'

class ScanDefinitionAssetsDatatypeEnum(str, Enum):
    IP = 'ip'
    IP_RANGE = 'ip-range'
    IP_SUBNET = 'ip-subnet'
    FQDN = 'fqdn'
    DOMAIN = 'domain'
    URL = 'url'
    KEYWORD = 'keyword'
    PERSON = 'person'
    ORGANISATION = 'organisation'
    PATH = 'path'
    APPLICATION = 'application'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ScanDefinitionAssets:
    
    criticity: Optional[ScanDefinitionAssetsCriticityEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('criticity'), 'exclude': lambda f: f is None }})  
    datatype: Optional[ScanDefinitionAssetsDatatypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('datatype'), 'exclude': lambda f: f is None }})  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})  
    value: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('value'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ScanDefinition:
    
    assets: Optional[list[ScanDefinitionAssets]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('assets'), 'exclude': lambda f: f is None }})  
    options: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('options'), 'exclude': lambda f: f is None }})  
    scan_id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('scan_id'), 'exclude': lambda f: f is None }})  
    