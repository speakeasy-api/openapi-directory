<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Shared;


/**
 * DebitMemoFromChargeType - Container for custom fields of a Debit Memo object.
 * 
 * 
 * 
 * @package OpenAPI\OpenAPI\Models\Shared
 * @access public
 */
class DebitMemoFromChargeType
{
    /**
     * ID of the corresponding object in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).
     * 
     * 
     * 
     * @var ?string $integrationIdNS
     */
	#[\JMS\Serializer\Annotation\SerializedName('IntegrationId__NS')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $integrationIdNS = null;
    
    /**
     * Status of the debit memo's synchronization with NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).
     * 
     * 
     * 
     * @var ?string $integrationStatusNS
     */
	#[\JMS\Serializer\Annotation\SerializedName('IntegrationStatus__NS')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $integrationStatusNS = null;
    
    /**
     * Date when the debit memo was synchronized with NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).
     * 
     * 
     * 
     * @var ?string $syncDateNS
     */
	#[\JMS\Serializer\Annotation\SerializedName('SyncDate__NS')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $syncDateNS = null;
    
    /**
     * The ID of the account associated with the debit memo.
     * 
     * 
     * **Note**: When creating debit memos from product rate plan charges, you must specify `accountNumber`, `accountId`, or both in the request body. If both fields are specified, they must correspond to the same account.
     * 
     * 
     * @var ?string $accountId
     */
	#[\JMS\Serializer\Annotation\SerializedName('accountId')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $accountId = null;
    
    /**
     * The Number of the account associated with the debit memo.
     * 
     * 
     * **Note**: When creating debit memos from product rate plan charges, you must specify `accountNumber`, `accountId`, or both in the request body. If both fields are specified, they must correspond to the same account.
     * 
     * 
     * @var ?string $accountNumber
     */
	#[\JMS\Serializer\Annotation\SerializedName('accountNumber')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $accountNumber = null;
    
    /**
     * Whether debit memos are automatically picked up for processing in the corresponding payment run. 
     * 
     * 
     * By default, debit memos are automatically picked up for processing in the corresponding payment run.
     * 
     * 
     * @var ?bool $autoPay
     */
	#[\JMS\Serializer\Annotation\SerializedName('autoPay')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $autoPay = null;
    
    /**
     * Whether to automatically post the debit memo after it is created. 
     * 
     * 
     * Setting this field to `true`, you do not need to separately call the [Post a debit memo](https://www.zuora.com/developer/api-reference/#operation/PUT_PostDebitMemo) operation to post the debit memo.
     * 
     * 
     * @var ?bool $autoPost
     */
	#[\JMS\Serializer\Annotation\SerializedName('autoPost')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $autoPost = null;
    
    /**
     * Container for product rate plan charges. The maximum number of items is 1,000.
     * 
     * 
     * 
     * @var ?array<\OpenAPI\OpenAPI\Models\Shared\DebitMemoFromChargeDetailType> $charges
     */
	#[\JMS\Serializer\Annotation\SerializedName('charges')]
    #[\JMS\Serializer\Annotation\Type('array<OpenAPI\OpenAPI\Models\Shared\DebitMemoFromChargeDetailType>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $charges = null;
    
    /**
     * Comments about the debit memo.
     * 
     * 
     * 
     * @var ?string $comment
     */
	#[\JMS\Serializer\Annotation\SerializedName('comment')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $comment = null;
    
    /**
     * The date by which the payment for the debit memo is due, in `yyyy-mm-dd` format.
     * 
     * 
     * 
     * @var ?\DateTime $dueDate
     */
	#[\JMS\Serializer\Annotation\SerializedName('dueDate')]
    #[\JMS\Serializer\Annotation\Type("DateTime<'Y-m-d', '', '|Y-m-d'>")]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?\DateTime $dueDate = null;
    
    /**
     * The date when the debit memo takes effect.
     * 
     * 
     * 
     * @var ?\DateTime $effectiveDate
     */
	#[\JMS\Serializer\Annotation\SerializedName('effectiveDate')]
    #[\JMS\Serializer\Annotation\Type("DateTime<'Y-m-d', '', '|Y-m-d'>")]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?\DateTime $effectiveDate = null;
    
    /**
     * A code identifying the reason for the transaction. The value must be an existing reason code or empty. If you do not specify a value, Zuora uses the default reason code.
     * 
     * 
     * 
     * @var ?string $reasonCode
     */
	#[\JMS\Serializer\Annotation\SerializedName('reasonCode')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $reasonCode = null;
    
	public function __construct()
	{
		$this->integrationIdNS = null;
		$this->integrationStatusNS = null;
		$this->syncDateNS = null;
		$this->accountId = null;
		$this->accountNumber = null;
		$this->autoPay = null;
		$this->autoPost = null;
		$this->charges = null;
		$this->comment = null;
		$this->dueDate = null;
		$this->effectiveDate = null;
		$this->reasonCode = null;
	}
}
