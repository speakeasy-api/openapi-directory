// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// CreateContainerXAmzTargetEnum
type CreateContainerXAmzTargetEnum string

const (
	CreateContainerXAmzTargetEnumMediaStore20170901CreateContainer CreateContainerXAmzTargetEnum = "MediaStore_20170901.CreateContainer"
)

func (e CreateContainerXAmzTargetEnum) ToPointer() *CreateContainerXAmzTargetEnum {
	return &e
}

func (e *CreateContainerXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "MediaStore_20170901.CreateContainer":
		*e = CreateContainerXAmzTargetEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateContainerXAmzTargetEnum: %v", v)
	}
}

type CreateContainerRequest struct {
	CreateContainerInput shared.CreateContainerInput   `request:"mediaType=application/json"`
	XAmzAlgorithm        *string                       `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256    *string                       `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential       *string                       `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate             *string                       `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken    *string                       `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature        *string                       `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders    *string                       `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget           CreateContainerXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type CreateContainerResponse struct {
	// ContainerInUseException
	ContainerInUseException interface{}
	ContentType             string
	// Success
	CreateContainerOutput *shared.CreateContainerOutput
	// InternalServerError
	InternalServerError interface{}
	// LimitExceededException
	LimitExceededException interface{}
	StatusCode             int
	RawResponse            *http.Response
}
