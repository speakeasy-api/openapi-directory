"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from datetime import date
from marshmallow import fields
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class EntityReceiptDisbursementTotals:
    
    cumulative_candidate_disbursements: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cumulative_candidate_disbursements'), 'exclude': lambda f: f is None }})
    r"""Cumulative candidate disbursements in a two year period, adjusted to avoid double counting."""  
    cumulative_candidate_receipts: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cumulative_candidate_receipts'), 'exclude': lambda f: f is None }})
    r"""Cumulative candidate receipts in a two year period, adjusted to avoid double counting."""  
    cumulative_pac_disbursements: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cumulative_pac_disbursements'), 'exclude': lambda f: f is None }})
    r"""Cumulative PAC disbursements in a two year period, adjusted to avoid double counting."""  
    cumulative_pac_receipts: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cumulative_pac_receipts'), 'exclude': lambda f: f is None }})
    r"""Cumulative PAC recipts in a two year period, adjusted to avoid double counting."""  
    cumulative_party_disbursements: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cumulative_party_disbursements'), 'exclude': lambda f: f is None }})
    r"""Cumulative party disbursements in a two year period, adjusted to avoid double counting."""  
    cumulative_party_receipts: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cumulative_party_receipts'), 'exclude': lambda f: f is None }})
    r"""Cumulative party receipts in a two year period, adjusted to avoid double counting."""  
    cycle: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cycle'), 'exclude': lambda f: f is None }})
    r"""Filter records to only those that were applicable to a given
    two-year period.The cycle begins with an odd year and is named
    for its ending, even year.
    """  
    end_date: Optional[date] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('end_date'), 'encoder': utils.dateisoformat(True), 'decoder': utils.datefromisoformat, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})  
    