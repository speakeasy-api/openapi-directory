"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Any, Optional


@dataclasses.dataclass
class TestStartTestRunSecurity:
    
    api_token: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'apiKey', 'sub_type': 'header', 'field_name': 'X-API-Token' }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class TestStartTestRunTestCloudStartTestRunOptions:
    r"""Options required to start the test run"""
    
    device_selection: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('device_selection') }})
    r"""Device selection string."""  
    test_framework: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('test_framework') }})
    r"""Test framework used by tests."""  
    language: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('language'), 'exclude': lambda f: f is None }})
    r"""Language that should be used to run tests."""  
    locale: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('locale'), 'exclude': lambda f: f is None }})
    r"""Locale that should be used to run tests."""  
    test_parameters: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('test_parameters'), 'exclude': lambda f: f is None }})
    r"""A JSON dictionary with additional test parameters"""  
    test_series: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('test_series'), 'exclude': lambda f: f is None }})
    r"""Name of the test series."""  
    

@dataclasses.dataclass
class TestStartTestRunRequest:
    
    app_name: str = dataclasses.field(metadata={'path_param': { 'field_name': 'app_name', 'style': 'simple', 'explode': False }})
    r"""The name of the application"""  
    owner_name: str = dataclasses.field(metadata={'path_param': { 'field_name': 'owner_name', 'style': 'simple', 'explode': False }})
    r"""The name of the owner"""  
    request_body: TestStartTestRunTestCloudStartTestRunOptions = dataclasses.field(metadata={'request': { 'media_type': 'application/json' }})
    r"""Option required to start the test run"""  
    test_run_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'test_run_id', 'style': 'simple', 'explode': False }})
    r"""The ID of the test run"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class TestStartTestRunTestCloudTestRunStartResult:
    r"""Result of starting a test run"""
    
    accepted_devices: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('accepted_devices'), 'exclude': lambda f: f is None }})
    r"""List with names of accepted devices"""  
    rejected_devices: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('rejected_devices'), 'exclude': lambda f: f is None }})
    r"""List with names and descriptions of rejected devices"""  
    

@dataclasses.dataclass
class TestStartTestRunResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    test_cloud_test_run_start_result: Optional[TestStartTestRunTestCloudTestRunStartResult] = dataclasses.field(default=None)
    r"""OK"""  
    