// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type ClouddebuggerDebuggerDebuggeesBreakpointsListSecurityOption1 struct {
	Oauth2  string `security:"scheme,type=oauth2,name=Authorization"`
	Oauth2c string `security:"scheme,type=oauth2,name=Authorization"`
}

type ClouddebuggerDebuggerDebuggeesBreakpointsListSecurityOption2 struct {
	Oauth2  string `security:"scheme,type=oauth2,name=Authorization"`
	Oauth2c string `security:"scheme,type=oauth2,name=Authorization"`
}

type ClouddebuggerDebuggerDebuggeesBreakpointsListSecurity struct {
	Option1 *ClouddebuggerDebuggerDebuggeesBreakpointsListSecurityOption1 `security:"option"`
	Option2 *ClouddebuggerDebuggerDebuggeesBreakpointsListSecurityOption2 `security:"option"`
}

// ClouddebuggerDebuggerDebuggeesBreakpointsListActionValueEnum - Only breakpoints with the specified action will pass the filter.
type ClouddebuggerDebuggerDebuggeesBreakpointsListActionValueEnum string

const (
	ClouddebuggerDebuggerDebuggeesBreakpointsListActionValueEnumCapture ClouddebuggerDebuggerDebuggeesBreakpointsListActionValueEnum = "CAPTURE"
	ClouddebuggerDebuggerDebuggeesBreakpointsListActionValueEnumLog     ClouddebuggerDebuggerDebuggeesBreakpointsListActionValueEnum = "LOG"
)

func (e ClouddebuggerDebuggerDebuggeesBreakpointsListActionValueEnum) ToPointer() *ClouddebuggerDebuggerDebuggeesBreakpointsListActionValueEnum {
	return &e
}

func (e *ClouddebuggerDebuggerDebuggeesBreakpointsListActionValueEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "CAPTURE":
		fallthrough
	case "LOG":
		*e = ClouddebuggerDebuggerDebuggeesBreakpointsListActionValueEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ClouddebuggerDebuggerDebuggeesBreakpointsListActionValueEnum: %v", v)
	}
}

type ClouddebuggerDebuggerDebuggeesBreakpointsListRequest struct {
	// V1 error format.
	DollarXgafv *shared.XgafvEnum `queryParam:"style=form,explode=true,name=$.xgafv"`
	// OAuth access token.
	AccessToken *string `queryParam:"style=form,explode=true,name=access_token"`
	// Only breakpoints with the specified action will pass the filter.
	ActionValue *ClouddebuggerDebuggerDebuggeesBreakpointsListActionValueEnum `queryParam:"style=form,explode=true,name=action.value"`
	// Data format for response.
	Alt *shared.AltEnum `queryParam:"style=form,explode=true,name=alt"`
	// JSONP
	Callback *string `queryParam:"style=form,explode=true,name=callback"`
	// Required. The client version making the call. Schema: `domain/type/version` (e.g., `google.com/intellij/v1`).
	ClientVersion *string `queryParam:"style=form,explode=true,name=clientVersion"`
	// Required. ID of the debuggee whose breakpoints to list.
	DebuggeeID string `pathParam:"style=simple,explode=false,name=debuggeeId"`
	// Selector specifying which fields to include in a partial response.
	Fields *string `queryParam:"style=form,explode=true,name=fields"`
	// When set to `true`, the response includes the list of breakpoints set by any user. Otherwise, it includes only breakpoints set by the caller.
	IncludeAllUsers *bool `queryParam:"style=form,explode=true,name=includeAllUsers"`
	// When set to `true`, the response includes active and inactive breakpoints. Otherwise, it includes only active breakpoints.
	IncludeInactive *bool `queryParam:"style=form,explode=true,name=includeInactive"`
	// API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
	Key *string `queryParam:"style=form,explode=true,name=key"`
	// OAuth 2.0 token for the current user.
	OauthToken *string `queryParam:"style=form,explode=true,name=oauth_token"`
	// Returns response with indentations and line breaks.
	PrettyPrint *bool `queryParam:"style=form,explode=true,name=prettyPrint"`
	// Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
	QuotaUser *string `queryParam:"style=form,explode=true,name=quotaUser"`
	// This field is deprecated. The following fields are always stripped out of the result: `stack_frames`, `evaluated_expressions` and `variable_table`.
	StripResults *bool `queryParam:"style=form,explode=true,name=stripResults"`
	// Legacy upload protocol for media (e.g. "media", "multipart").
	UploadType *string `queryParam:"style=form,explode=true,name=uploadType"`
	// Upload protocol for media (e.g. "raw", "multipart").
	UploadProtocol *string `queryParam:"style=form,explode=true,name=upload_protocol"`
	// A wait token that, if specified, blocks the call until the breakpoints list has changed, or a server selected timeout has expired. The value should be set from the last response. The error code `google.rpc.Code.ABORTED` (RPC) is returned on wait timeout, which should be called again with the same `wait_token`.
	WaitToken *string `queryParam:"style=form,explode=true,name=waitToken"`
}

type ClouddebuggerDebuggerDebuggeesBreakpointsListResponse struct {
	ContentType string
	// Successful response
	ListBreakpointsResponse *shared.ListBreakpointsResponse
	StatusCode              int
	RawResponse             *http.Response
}
