/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

/**
 * UserData - User information
 */
public class UserData {
    /**
     * User Authentication Data
     */
    @JsonProperty("authData")
    public UserAuthData authData;
    public UserData withAuthData(UserAuthData authData) {
        this.authData = authData;
        return this;
    }
    
    /**
     * &amp;#128679; Deprecated since v4.13.0
     * 
     * Authentication methods:
     * 
     * * `sql`
     * 
     * * `active_directory`
     * 
     * * `radius`
     * 
     * * `openid`
     * 
     * use `authData` instead
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("authMethods")
    public UserAuthMethod[] authMethods;
    public UserData withAuthMethods(UserAuthMethod[] authMethods) {
        this.authMethods = authMethods;
        return this;
    }
    
    /**
     * &amp;#128640; Since v4.11.0
     * 
     * Avatar UUID
     */
    @JsonProperty("avatarUuid")
    public String avatarUuid;
    public UserData withAvatarUuid(String avatarUuid) {
        this.avatarUuid = avatarUuid;
        return this;
    }
    
    /**
     * Email 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("email")
    public String email;
    public UserData withEmail(String email) {
        this.email = email;
        return this;
    }
    
    /**
     * Expiration date
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("expireAt")
    public OffsetDateTime expireAt;
    public UserData withExpireAt(OffsetDateTime expireAt) {
        this.expireAt = expireAt;
        return this;
    }
    
    /**
     * User first name
     */
    @JsonProperty("firstName")
    public String firstName;
    public UserData withFirstName(String firstName) {
        this.firstName = firstName;
        return this;
    }
    
    /**
     * &amp;#128679; Deprecated since v4.12.0
     * 
     * Gender
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("gender")
    public String gender;
    public UserData withGender(String gender) {
        this.gender = gender;
        return this;
    }
    
    /**
     * User has manageable rooms
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("hasManageableRooms")
    public Boolean hasManageableRooms;
    public UserData withHasManageableRooms(Boolean hasManageableRooms) {
        this.hasManageableRooms = hasManageableRooms;
        return this;
    }
    
    /**
     * Homeroom ID
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("homeRoomId")
    public Long homeRoomId;
    public UserData withHomeRoomId(Long homeRoomId) {
        this.homeRoomId = homeRoomId;
        return this;
    }
    
    /**
     * Unique identifier for the user
     */
    @JsonProperty("id")
    public Long id;
    public UserData withId(Long id) {
        this.id = id;
        return this;
    }
    
    /**
     * User has generated private key.
     * 
     * Possible if client-side encryption is active for this customer
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("isEncryptionEnabled")
    public Boolean isEncryptionEnabled;
    public UserData withIsEncryptionEnabled(Boolean isEncryptionEnabled) {
        this.isEncryptionEnabled = isEncryptionEnabled;
        return this;
    }
    
    /**
     * User is locked:
     * 
     * * `false` - unlocked
     * 
     * * `true` - locked
     * 
     * 
     * 
     * User is locked and can not login anymore.
     */
    @JsonProperty("isLocked")
    public Boolean isLocked;
    public UserData withIsLocked(Boolean isLocked) {
        this.isLocked = isLocked;
        return this;
    }
    
    /**
     * Determines whether multi-factor authentication is enabled
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("isMfaEnabled")
    public Boolean isMfaEnabled;
    public UserData withIsMfaEnabled(Boolean isMfaEnabled) {
        this.isMfaEnabled = isMfaEnabled;
        return this;
    }
    
    /**
     * Determines whether multi-factor authentication is enforced
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("isMfaEnforced")
    public Boolean isMfaEnforced;
    public UserData withIsMfaEnforced(Boolean isMfaEnforced) {
        this.isMfaEnforced = isMfaEnforced;
        return this;
    }
    
    /**
     * Last successful logon date
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("lastLoginSuccessAt")
    public OffsetDateTime lastLoginSuccessAt;
    public UserData withLastLoginSuccessAt(OffsetDateTime lastLoginSuccessAt) {
        this.lastLoginSuccessAt = lastLoginSuccessAt;
        return this;
    }
    
    /**
     * User last name
     */
    @JsonProperty("lastName")
    public String lastName;
    public UserData withLastName(String lastName) {
        this.lastName = lastName;
        return this;
    }
    
    /**
     * &amp;#128679; Deprecated since v4.7.0
     * 
     * User lock status:
     * 
     * * `0` - locked
     * 
     * * `1` - Web access allowed
     * 
     * * `2` - Web and mobile access allowed
     * 
     * 
     * 
     * Please use `isLocked` instead.
     */
    @JsonProperty("lockStatus")
    public Integer lockStatus;
    public UserData withLockStatus(Integer lockStatus) {
        this.lockStatus = lockStatus;
        return this;
    }
    
    /**
     * &amp;#128679; Deprecated since v4.13.0
     * 
     * User login name
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("login")
    public String login;
    public UserData withLogin(String login) {
        this.login = login;
        return this;
    }
    
    /**
     * Phone number
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("phone")
    public String phone;
    public UserData withPhone(String phone) {
        this.phone = phone;
        return this;
    }
    
    /**
     * Public key container
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("publicKeyContainer")
    public PublicKeyContainer publicKeyContainer;
    public UserData withPublicKeyContainer(PublicKeyContainer publicKeyContainer) {
        this.publicKeyContainer = publicKeyContainer;
        return this;
    }
    
    /**
     * &amp;#128679; Deprecated since v4.18.0
     * 
     * Job title
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("title")
    public String title;
    public UserData withTitle(String title) {
        this.title = title;
        return this;
    }
    
    /**
     * User custom attributes (list of key-value pairs)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("userAttributes")
    public UserAttributes userAttributes;
    public UserData withUserAttributes(UserAttributes userAttributes) {
        this.userAttributes = userAttributes;
        return this;
    }
    
    /**
     * &amp;#128640; Since v4.13.0
     * 
     * Username
     */
    @JsonProperty("userName")
    public String userName;
    public UserData withUserName(String userName) {
        this.userName = userName;
        return this;
    }
    
    /**
     * List of roles
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("userRoles")
    public RoleList userRoles;
    public UserData withUserRoles(RoleList userRoles) {
        this.userRoles = userRoles;
        return this;
    }
    
}
