"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class SuggestedTagAndRegionQueryTokenSortByEnum(str, Enum):
    r"""OrderBy. Ordering mechanism for your results."""
    UNCERTAINTY_ASCENDING = 'UncertaintyAscending'
    UNCERTAINTY_DESCENDING = 'UncertaintyDescending'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SuggestedTagAndRegionQueryToken:
    r"""Contains properties we need to fetch suggested tags for. For the first call, Session and continuation set to null.
    Then on subsequent calls, uses the session/continuation from the previous SuggestedTagAndRegionQuery result to fetch additional results.
    """
    
    continuation: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('continuation'), 'exclude': lambda f: f is None }, 'form': { 'field_name': 'continuation' }})
    r"""Continuation Id for database pagination. Initially null but later used to paginate."""  
    max_count: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('maxCount'), 'exclude': lambda f: f is None }, 'form': { 'field_name': 'maxCount' }})
    r"""Maximum number of results you want to be returned in the response."""  
    session: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('session'), 'exclude': lambda f: f is None }, 'form': { 'field_name': 'session' }})
    r"""SessionId for database query. Initially set to null but later used to paginate."""  
    sort_by: Optional[SuggestedTagAndRegionQueryTokenSortByEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sortBy'), 'exclude': lambda f: f is None }, 'form': { 'field_name': 'sortBy' }})
    r"""OrderBy. Ordering mechanism for your results."""  
    tag_ids: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tagIds'), 'exclude': lambda f: f is None }, 'form': { 'field_name': 'tagIds' }})
    r"""Existing TagIds in project to filter suggested tags on."""  
    threshold: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('threshold'), 'exclude': lambda f: f is None }, 'form': { 'field_name': 'threshold' }})
    r"""Confidence threshold to filter suggested tags on."""  
    