/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import axios from "axios";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

/**
 * Contains the list of servers available to the SDK
 */
export const ServerList = ["https://fax.twilio.com"] as const;

/**
 * The available configuration options for the SDK
 */
export type SDKProps = {
  /**
   * Allows overriding the default axios client used by the SDK
   */
  defaultClient?: AxiosInstance;
  /**
   * Allows overriding the default server URL used by the SDK
   */
  serverURL?: string;
};

/**
 * This is the public Twilio REST API.
 */
export class SDK {
  public _defaultClient: AxiosInstance;
  public _securityClient: AxiosInstance;
  public _serverURL: string;
  private _language = "typescript";
  private _sdkVersion = "0.0.1";
  private _genVersion = "internal";
  private _globals: any;

  constructor(props?: SDKProps) {
    this._serverURL = props?.serverURL ?? ServerList[0];

    this._defaultClient =
      props?.defaultClient ?? axios.create({ baseURL: this._serverURL });
    this._securityClient = this._defaultClient;
  }

  /**
   * Delete a specific fax and its associated media.
   */
  deleteFax(
    req: operations.DeleteFaxRequest,
    security: operations.DeleteFaxSecurity,
    serverURL?: string,
    config?: AxiosRequestConfig
  ): Promise<operations.DeleteFaxResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DeleteFaxRequest(req);
    }

    let baseURL: string = operations.DeleteFaxServerList[0];
    if (serverURL) {
      baseURL = serverURL;
    }
    const url: string = utils.generateURL(baseURL, "/v1/Faxes/{Sid}", req);
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.DeleteFaxSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DeleteFaxResponse =
        new operations.DeleteFaxResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 204:
          break;
      }

      return res;
    });
  }

  /**
   * Delete a specific fax media instance.
   */
  deleteFaxMedia(
    req: operations.DeleteFaxMediaRequest,
    security: operations.DeleteFaxMediaSecurity,
    serverURL?: string,
    config?: AxiosRequestConfig
  ): Promise<operations.DeleteFaxMediaResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DeleteFaxMediaRequest(req);
    }

    let baseURL: string = operations.DeleteFaxMediaServerList[0];
    if (serverURL) {
      baseURL = serverURL;
    }
    const url: string = utils.generateURL(
      baseURL,
      "/v1/Faxes/{FaxSid}/Media/{Sid}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.DeleteFaxMediaSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DeleteFaxMediaResponse =
        new operations.DeleteFaxMediaResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 204:
          break;
      }

      return res;
    });
  }

  /**
   * Fetch a specific fax.
   */
  fetchFax(
    req: operations.FetchFaxRequest,
    security: operations.FetchFaxSecurity,
    serverURL?: string,
    config?: AxiosRequestConfig
  ): Promise<operations.FetchFaxResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.FetchFaxRequest(req);
    }

    let baseURL: string = operations.FetchFaxServerList[0];
    if (serverURL) {
      baseURL = serverURL;
    }
    const url: string = utils.generateURL(baseURL, "/v1/Faxes/{Sid}", req);
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.FetchFaxSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.FetchFaxResponse = new operations.FetchFaxResponse({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
      });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.faxV1Fax = utils.objectToClass(httpRes?.data, shared.FaxV1Fax);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Fetch a specific fax media instance.
   */
  fetchFaxMedia(
    req: operations.FetchFaxMediaRequest,
    security: operations.FetchFaxMediaSecurity,
    serverURL?: string,
    config?: AxiosRequestConfig
  ): Promise<operations.FetchFaxMediaResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.FetchFaxMediaRequest(req);
    }

    let baseURL: string = operations.FetchFaxMediaServerList[0];
    if (serverURL) {
      baseURL = serverURL;
    }
    const url: string = utils.generateURL(
      baseURL,
      "/v1/Faxes/{FaxSid}/Media/{Sid}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.FetchFaxMediaSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.FetchFaxMediaResponse =
        new operations.FetchFaxMediaResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.faxV1FaxFaxMedia = utils.objectToClass(
              httpRes?.data,
              shared.FaxV1FaxFaxMedia
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Retrieve a list of all faxes.
   */
  listFax(
    req: operations.ListFaxRequest,
    security: operations.ListFaxSecurity,
    serverURL?: string,
    config?: AxiosRequestConfig
  ): Promise<operations.ListFaxResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ListFaxRequest(req);
    }

    let baseURL: string = operations.ListFaxServerList[0];
    if (serverURL) {
      baseURL = serverURL;
    }
    const url: string = baseURL.replace(/\/$/, "") + "/v1/Faxes";
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.ListFaxSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ListFaxResponse = new operations.ListFaxResponse({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
      });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listFaxResponse = utils.objectToClass(
              httpRes?.data,
              operations.ListFaxListFaxResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Retrieve a list of all fax media instances for the specified fax.
   */
  listFaxMedia(
    req: operations.ListFaxMediaRequest,
    security: operations.ListFaxMediaSecurity,
    serverURL?: string,
    config?: AxiosRequestConfig
  ): Promise<operations.ListFaxMediaResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ListFaxMediaRequest(req);
    }

    let baseURL: string = operations.ListFaxMediaServerList[0];
    if (serverURL) {
      baseURL = serverURL;
    }
    const url: string = utils.generateURL(
      baseURL,
      "/v1/Faxes/{FaxSid}/Media",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.ListFaxMediaSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ListFaxMediaResponse =
        new operations.ListFaxMediaResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listFaxMediaResponse = utils.objectToClass(
              httpRes?.data,
              operations.ListFaxMediaListFaxMediaResponse
            );
          }
          break;
      }

      return res;
    });
  }
}
