/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
import { Expose } from "class-transformer";

/**
 * Type of action be notified about. Notifications will only be sent for the given type of action. Valid choices are **upload**, **download**, **delete** or **all** (upload/download/delete)
 */
export enum UpdateNotificationByIdUpdateNotificationByIdRequestBodyActionEnum {
  Upload = "upload",
  Download = "download",
  Delete = "delete",
  All = "all",
}

export class UpdateNotificationByIdUpdateNotificationByIdRequestBody extends SpeakeasyBase {
  /**
   * Type of action be notified about. Notifications will only be sent for the given type of action. Valid choices are **upload**, **download**, **delete** or **all** (upload/download/delete)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "action" })
  action?: UpdateNotificationByIdUpdateNotificationByIdRequestBodyActionEnum;

  /**
   * Custom message to insert into the notification emails, along with the matching activity.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "message" })
  message?: string;

  /**
   * Email addresses to send notification emails to. If empty, sends to the current user's email address.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "recipients" })
  recipients?: string[];

  /**
   * Whether an email should be sent to the recipients when matching activity happens.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "sendEmail" })
  sendEmail?: boolean;

  /**
   * Determines which users' actions should trigger the notification.
   *
   * @remarks
   *
   * Rather than listing  individual users, you can also use 3 special options:
   *
   * - **notice\_user\_all** for activity by any user or share recipient
   * - **notice\_user\_all\_users** for activity only by user accounts
   * - **notice\_user\_all\_recipients** for activity only by share recipients
   */
  @SpeakeasyMetadata()
  @Expose({ name: "usernames" })
  usernames?: string[];
}

export class UpdateNotificationByIdRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  requestBody?: UpdateNotificationByIdUpdateNotificationByIdRequestBody;

  /**
   * Access token required to make the API call.
   */
  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=ev-access-token",
  })
  evAccessToken: string;

  /**
   * API Key required to make the API call.
   */
  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=ev-api-key",
  })
  evApiKey: string;

  /**
   * ID of the notification. Use [GET /notifications](#operation/listNotifications) if you need to lookup an ID.
   */
  @SpeakeasyMetadata({ data: "pathParam, style=simple;explode=false;name=id" })
  id: number;
}

export class UpdateNotificationByIdResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  /**
   * Successful Operation
   */
  @SpeakeasyMetadata()
  notificationResponse?: shared.NotificationResponse;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;
}
