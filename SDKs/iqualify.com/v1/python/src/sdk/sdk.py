"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from .api_info import APIInfo
from .assessment_data import AssessmentData
from .assessment_groups import AssessmentGroups
from .assessment_management import AssessmentManagement
from .badges import Badges
from .channels import Channels
from .course_mappings import CourseMappings
from .course_metadata import CourseMetadata
from .courses import Courses
from .learner_activity import LearnerActivity
from .offering_learners import OfferingLearners
from .offering_metadata import OfferingMetadata
from .offerings import Offerings
from .organisation import Organisation
from .pulses import Pulses
from .users_in_iqualify import UsersInIQualify
from sdk.models import shared

SERVERS = [
    "https://api.iqualify.com/v1",
]
"""Contains the list of servers available to the SDK"""

class SDK:
    r"""The iQualify API offers management responses for building
    learning experiences using your iQualify instance data.
    
    Once youâ€™ve registered with iQualify, you can request an API access token by
    navigating to the API access section of the \"Account Settings\" area.
    
    Find out how to [Request your API access token](https://www.iqualify.com/help/connecting-iqualify-to-other-systems/api/how-to-access-and-manage-your-api-token)
    on our Knowledge base.
    
    All endpoints are only accessible via https and are located at
    api.iqualify.com. For instance: you can find your current offerings by
    accessing the following URL:
    
        https://api.iqualify.com/v1/offerings/current
    """
    api_info: APIInfo
    assessment_data: AssessmentData
    assessment_groups: AssessmentGroups
    assessment_management: AssessmentManagement
    badges: Badges
    channels: Channels
    course_mappings: CourseMappings
    course_metadata: CourseMetadata
    courses: Courses
    learner_activity: LearnerActivity
    offering_learners: OfferingLearners
    offering_metadata: OfferingMetadata
    offerings: Offerings
    organisation: Organisation
    pulses: Pulses
    users_in_i_qualify: UsersInIQualify

    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str = SERVERS[0]
    _language: str = "python"
    _sdk_version: str = "0.0.1"
    _gen_version: str = "internal"

    def __init__(self,
                 security: shared.Security = None,
                 server_url: str = None,
                 url_params: dict[str, str] = None,
                 client: requests_http.Session = None
                 ) -> None:
        """Instantiates the SDK configuring it with the provided parameters.
        
        :param security: The security details required for authentication
        :type security: shared.Security
        :param server_url: The server URL to use for all operations
        :type server_url: str
        :param url_params: Parameters to optionally template the server URL with
        :type url_params: dict[str, str]
        :param client: The requests.Session HTTP client to use for all operations
        :type client: requests_http.Session        
        """
        self._client = requests_http.Session()
        
        
        if server_url is not None:
            if url_params is not None:
                self._server_url = utils.template_url(server_url, url_params)
            else:
                self._server_url = server_url

        if client is not None:
            self._client = client
        
        self._security_client = utils.configure_security_client(self._client, security)
        

        self._init_sdks()
    
    def _init_sdks(self):
        self.api_info = APIInfo(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.assessment_data = AssessmentData(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.assessment_groups = AssessmentGroups(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.assessment_management = AssessmentManagement(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.badges = Badges(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.channels = Channels(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.course_mappings = CourseMappings(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.course_metadata = CourseMetadata(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.courses = Courses(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.learner_activity = LearnerActivity(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.offering_learners = OfferingLearners(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.offering_metadata = OfferingMetadata(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.offerings = Offerings(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.organisation = Organisation(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.pulses = Pulses(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.users_in_i_qualify = UsersInIQualify(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
    