// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// LegalEntityAssociationTypeEnum - Defines the relationship of the legal entity to the current legal entity.
//
// Possible values for organizations: **uboThroughOwnership**, **uboThroughControl**, **signatory**, or **ultimateParentCompany**.
//
// Possible values for sole proprietorships: **soleProprietorship**.
type LegalEntityAssociationTypeEnum string

const (
	LegalEntityAssociationTypeEnumPciSignatory          LegalEntityAssociationTypeEnum = "pciSignatory"
	LegalEntityAssociationTypeEnumSignatory             LegalEntityAssociationTypeEnum = "signatory"
	LegalEntityAssociationTypeEnumSoleProprietorship    LegalEntityAssociationTypeEnum = "soleProprietorship"
	LegalEntityAssociationTypeEnumUboThroughControl     LegalEntityAssociationTypeEnum = "uboThroughControl"
	LegalEntityAssociationTypeEnumUboThroughOwnership   LegalEntityAssociationTypeEnum = "uboThroughOwnership"
	LegalEntityAssociationTypeEnumUltimateParentCompany LegalEntityAssociationTypeEnum = "ultimateParentCompany"
)

func (e LegalEntityAssociationTypeEnum) ToPointer() *LegalEntityAssociationTypeEnum {
	return &e
}

func (e *LegalEntityAssociationTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "pciSignatory":
		fallthrough
	case "signatory":
		fallthrough
	case "soleProprietorship":
		fallthrough
	case "uboThroughControl":
		fallthrough
	case "uboThroughOwnership":
		fallthrough
	case "ultimateParentCompany":
		*e = LegalEntityAssociationTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for LegalEntityAssociationTypeEnum: %v", v)
	}
}

type LegalEntityAssociationInput struct {
	// The individual's job title if the `type` is **uboThroughControl** or **signatory**.
	JobTitle *string `json:"jobTitle,omitempty"`
	// The unique identifier of the associated [legal entity](https://docs.adyen.com/api-explorer/legalentity/latest/post/legalEntities#responses-200-id).
	LegalEntityID string `json:"legalEntityId"`
	// Defines the relationship of the legal entity to the current legal entity.
	//
	// Possible values for organizations: **uboThroughOwnership**, **uboThroughControl**, **signatory**, or **ultimateParentCompany**.
	//
	// Possible values for sole proprietorships: **soleProprietorship**.
	Type LegalEntityAssociationTypeEnum `json:"type"`
}

type LegalEntityAssociation struct {
	// The unique identifier of another legal entity with which the `legalEntityId` is associated. When the `legalEntityId` is associated to legal entities other than the current one, the response returns all the associations.
	AssociatorID *string `json:"associatorId,omitempty"`
	// The legal entity type of associated legal entity.
	//
	// For example, **organization**, **soleProprietorship** or **individual**.
	EntityType *string `json:"entityType,omitempty"`
	// The individual's job title if the `type` is **uboThroughControl** or **signatory**.
	JobTitle *string `json:"jobTitle,omitempty"`
	// The unique identifier of the associated [legal entity](https://docs.adyen.com/api-explorer/legalentity/latest/post/legalEntities#responses-200-id).
	LegalEntityID string `json:"legalEntityId"`
	// The name of the associated [legal entity](https://docs.adyen.com/api-explorer/legalentity/latest/post/legalEntities#responses-200-id).
	//
	// - For **individual**, `name.firstName` and `name.lastName`.
	// - For **organization**, `legalName`.
	// - For **soleProprietorship**, `name`.
	Name *string `json:"name,omitempty"`
	// Defines the relationship of the legal entity to the current legal entity.
	//
	// Possible values for organizations: **uboThroughOwnership**, **uboThroughControl**, **signatory**, or **ultimateParentCompany**.
	//
	// Possible values for sole proprietorships: **soleProprietorship**.
	Type LegalEntityAssociationTypeEnum `json:"type"`
}
