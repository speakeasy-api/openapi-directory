"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import policytopicevidence as shared_policytopicevidence
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PolicyTopicEntry:
    r"""Each policy topic entry will represent a violation of a policy topic for a creative, with the policy topic information and optional evidence for the policy violation."""
    
    evidences: Optional[list[shared_policytopicevidence.PolicyTopicEvidence]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('evidences'), 'exclude': lambda f: f is None }})
    r"""Pieces of evidence associated with this policy topic entry."""  
    help_center_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('helpCenterUrl'), 'exclude': lambda f: f is None }})
    r"""URL of the help center article describing this policy topic."""  
    missing_certificate: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('missingCertificate'), 'exclude': lambda f: f is None }})
    r"""Whether or not the policy topic is missing a certificate. Some policy topics require a certificate to unblock serving in some regions. For more information about creative certification, refer to: https://support.google.com/authorizedbuyers/answer/7450776"""  
    policy_topic: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('policyTopic'), 'exclude': lambda f: f is None }})
    r"""Policy topic this entry refers to. For example, \\"ALCOHOL\\", \\"TRADEMARKS_IN_AD_TEXT\\", or \\"DESTINATION_NOT_WORKING\\". The set of possible policy topics is not fixed for a particular API version and may change at any time. Can be used to filter the response of the creatives.list method"""  
    