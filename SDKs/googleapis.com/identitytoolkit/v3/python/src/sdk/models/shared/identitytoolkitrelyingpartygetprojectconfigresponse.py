"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import emailtemplate as shared_emailtemplate
from ..shared import idpconfig as shared_idpconfig
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class IdentitytoolkitRelyingpartyGetProjectConfigResponse:
    r"""Response of getting the project configuration."""
    
    allow_password_user: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('allowPasswordUser'), 'exclude': lambda f: f is None }})
    r"""Whether to allow password user sign in or sign up."""  
    api_key: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('apiKey'), 'exclude': lambda f: f is None }})
    r"""Browser API key, needed when making http request to Apiary."""  
    authorized_domains: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('authorizedDomains'), 'exclude': lambda f: f is None }})
    r"""Authorized domains."""  
    change_email_template: Optional[shared_emailtemplate.EmailTemplate] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('changeEmailTemplate'), 'exclude': lambda f: f is None }})
    r"""Template for an email template."""  
    dynamic_links_domain: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dynamicLinksDomain'), 'exclude': lambda f: f is None }})  
    enable_anonymous_user: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('enableAnonymousUser'), 'exclude': lambda f: f is None }})
    r"""Whether anonymous user is enabled."""  
    idp_config: Optional[list[shared_idpconfig.IdpConfig]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('idpConfig'), 'exclude': lambda f: f is None }})
    r"""OAuth2 provider configuration."""  
    legacy_reset_password_template: Optional[shared_emailtemplate.EmailTemplate] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('legacyResetPasswordTemplate'), 'exclude': lambda f: f is None }})
    r"""Template for an email template."""  
    project_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('projectId'), 'exclude': lambda f: f is None }})
    r"""Project ID of the relying party."""  
    reset_password_template: Optional[shared_emailtemplate.EmailTemplate] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('resetPasswordTemplate'), 'exclude': lambda f: f is None }})
    r"""Template for an email template."""  
    use_email_sending: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('useEmailSending'), 'exclude': lambda f: f is None }})
    r"""Whether to use email sending provided by Firebear."""  
    verify_email_template: Optional[shared_emailtemplate.EmailTemplate] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('verifyEmailTemplate'), 'exclude': lambda f: f is None }})
    r"""Template for an email template."""  
    