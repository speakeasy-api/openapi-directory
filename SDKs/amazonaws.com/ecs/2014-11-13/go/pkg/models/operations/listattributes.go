// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// ListAttributesXAmzTargetEnum
type ListAttributesXAmzTargetEnum string

const (
	ListAttributesXAmzTargetEnumAmazonEc2ContainerServiceV20141113ListAttributes ListAttributesXAmzTargetEnum = "AmazonEC2ContainerServiceV20141113.ListAttributes"
)

func (e *ListAttributesXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "AmazonEC2ContainerServiceV20141113.ListAttributes":
		*e = ListAttributesXAmzTargetEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ListAttributesXAmzTargetEnum: %s", s)
	}
}

type ListAttributesRequest struct {
	ListAttributesRequest shared.ListAttributesRequest `request:"mediaType=application/json"`
	XAmzAlgorithm         *string                      `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256     *string                      `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential        *string                      `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate              *string                      `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken     *string                      `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature         *string                      `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders     *string                      `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget            ListAttributesXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
	// Pagination limit
	MaxResults *string `queryParam:"style=form,explode=true,name=maxResults"`
	// Pagination token
	NextToken *string `queryParam:"style=form,explode=true,name=nextToken"`
}

type ListAttributesResponse struct {
	// ClusterNotFoundException
	ClusterNotFoundException interface{}
	ContentType              string
	// InvalidParameterException
	InvalidParameterException interface{}
	// Success
	ListAttributesResponse *shared.ListAttributesResponse
	StatusCode             int
	RawResponse            *http.Response
}
