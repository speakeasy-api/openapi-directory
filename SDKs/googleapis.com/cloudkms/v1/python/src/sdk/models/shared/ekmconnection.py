"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import serviceresolver as shared_serviceresolver
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class EkmConnectionKeyManagementModeEnum(str, Enum):
    r"""Optional. Describes who can perform control plane operations on the EKM. If unset, this defaults to MANUAL."""
    KEY_MANAGEMENT_MODE_UNSPECIFIED = 'KEY_MANAGEMENT_MODE_UNSPECIFIED'
    MANUAL = 'MANUAL'
    CLOUD_KMS = 'CLOUD_KMS'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class EkmConnection:
    r"""An EkmConnection represents an individual EKM connection. It can be used for creating CryptoKeys and CryptoKeyVersions with a ProtectionLevel of EXTERNAL_VPC, as well as performing cryptographic operations using keys created within the EkmConnection."""
    
    create_time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('createTime'), 'exclude': lambda f: f is None }})
    r"""Output only. The time at which the EkmConnection was created."""  
    crypto_space_path: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cryptoSpacePath'), 'exclude': lambda f: f is None }})
    r"""Optional. Identifies the EKM Crypto Space that this EkmConnection maps to. Note: This field is required if KeyManagementMode is CLOUD_KMS."""  
    etag: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('etag'), 'exclude': lambda f: f is None }})
    r"""Optional. Etag of the currently stored EkmConnection."""  
    key_management_mode: Optional[EkmConnectionKeyManagementModeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('keyManagementMode'), 'exclude': lambda f: f is None }})
    r"""Optional. Describes who can perform control plane operations on the EKM. If unset, this defaults to MANUAL."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""Output only. The resource name for the EkmConnection in the format `projects/*/locations/*/ekmConnections/*`."""  
    service_resolvers: Optional[list[shared_serviceresolver.ServiceResolver]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('serviceResolvers'), 'exclude': lambda f: f is None }})
    r"""A list of ServiceResolvers where the EKM can be reached. There should be one ServiceResolver per EKM replica. Currently, only a single ServiceResolver is supported."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class EkmConnectionInput:
    r"""An EkmConnection represents an individual EKM connection. It can be used for creating CryptoKeys and CryptoKeyVersions with a ProtectionLevel of EXTERNAL_VPC, as well as performing cryptographic operations using keys created within the EkmConnection."""
    
    crypto_space_path: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cryptoSpacePath'), 'exclude': lambda f: f is None }})
    r"""Optional. Identifies the EKM Crypto Space that this EkmConnection maps to. Note: This field is required if KeyManagementMode is CLOUD_KMS."""  
    etag: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('etag'), 'exclude': lambda f: f is None }})
    r"""Optional. Etag of the currently stored EkmConnection."""  
    key_management_mode: Optional[EkmConnectionKeyManagementModeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('keyManagementMode'), 'exclude': lambda f: f is None }})
    r"""Optional. Describes who can perform control plane operations on the EKM. If unset, this defaults to MANUAL."""  
    service_resolvers: Optional[list[shared_serviceresolver.ServiceResolverInput]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('serviceResolvers'), 'exclude': lambda f: f is None }})
    r"""A list of ServiceResolvers where the EKM can be reached. There should be one ServiceResolver per EKM replica. Currently, only a single ServiceResolver is supported."""  
    