<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class TaxationItems 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Delete a taxation item
     * 
     * Deletes a specific taxation item by ID.
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DELETETaxationItemRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DELETETaxationItemResponse
     */
	public function deleteTaxationItem(
        \OpenAPI\OpenAPI\Models\Operations\DELETETaxationItemRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DELETETaxationItemResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/taxationitems/{id}', \OpenAPI\OpenAPI\Models\Operations\DELETETaxationItemRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DELETETaxationItemResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json; charset=utf-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->commonResponseType = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CommonResponseType', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieve a taxation item
     * 
     * 
     * Retrieves the information about a specific taxation item by ID.
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GETTaxationItemRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GETTaxationItemResponse
     */
	public function getTaxationItem(
        \OpenAPI\OpenAPI\Models\Operations\GETTaxationItemRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GETTaxationItemResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/taxationitems/{id}', \OpenAPI\OpenAPI\Models\Operations\GETTaxationItemRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GETTaxationItemResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json; charset=utf-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getTaxationItemType = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GETTaxationItemType', 'json');
            }
        }

        return $response;
    }
	
    /**
     * CRUD: Delete a taxation item
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ObjectDELETETaxationItemRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ObjectDELETETaxationItemResponse
     */
	public function objectDELETETaxationItem(
        \OpenAPI\OpenAPI\Models\Operations\ObjectDELETETaxationItemRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ObjectDELETETaxationItemResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/object/taxation-item/{id}', \OpenAPI\OpenAPI\Models\Operations\ObjectDELETETaxationItemRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ObjectDELETETaxationItemResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json; charset=utf-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->proxyDeleteResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ProxyDeleteResponse', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json; charset=utf-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->proxyUnauthorizedResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ProxyUnauthorizedResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * CRUD: Retrieve a taxation item
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ObjectGETTaxationItemRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ObjectGETTaxationItemResponse
     */
	public function objectGETTaxationItem(
        \OpenAPI\OpenAPI\Models\Operations\ObjectGETTaxationItemRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ObjectGETTaxationItemResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/object/taxation-item/{id}', \OpenAPI\OpenAPI\Models\Operations\ObjectGETTaxationItemRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ObjectGETTaxationItemRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ObjectGETTaxationItemResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json; charset=utf-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->proxyGetTaxationItem = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ProxyGetTaxationItem', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json; charset=utf-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->proxyUnauthorizedResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ProxyUnauthorizedResponse', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json; charset=utf-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->proxyNoDataResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ProxyNoDataResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * CRUD: Create a taxation item
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ObjectPOSTTaxationItemRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ObjectPOSTTaxationItemResponse
     */
	public function objectPOSTTaxationItem(
        \OpenAPI\OpenAPI\Models\Operations\ObjectPOSTTaxationItemRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ObjectPOSTTaxationItemResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/object/taxation-item');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "proxyCreateTaxationItem", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ObjectPOSTTaxationItemRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ObjectPOSTTaxationItemResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json; charset=utf-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->proxyCreateOrModifyResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ProxyCreateOrModifyResponse', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json; charset=utf-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->proxyBadRequestResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ProxyBadRequestResponse', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json; charset=utf-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->proxyUnauthorizedResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ProxyUnauthorizedResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * CRUD: Update a taxation item
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ObjectPUTTaxationItemRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ObjectPUTTaxationItemResponse
     */
	public function objectPUTTaxationItem(
        \OpenAPI\OpenAPI\Models\Operations\ObjectPUTTaxationItemRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ObjectPUTTaxationItemResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/object/taxation-item/{id}', \OpenAPI\OpenAPI\Models\Operations\ObjectPUTTaxationItemRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "proxyModifyTaxationItem", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ObjectPUTTaxationItemRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ObjectPUTTaxationItemResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json; charset=utf-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->proxyCreateOrModifyResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ProxyCreateOrModifyResponse', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json; charset=utf-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->proxyUnauthorizedResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ProxyUnauthorizedResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update a taxation item
     * 
     * Updates a specific taxation item by ID.
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PUTTaxationItemRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PUTTaxationItemResponse
     */
	public function putTaxationItem(
        \OpenAPI\OpenAPI\Models\Operations\PUTTaxationItemRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PUTTaxationItemResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/taxationitems/{id}', \OpenAPI\OpenAPI\Models\Operations\PUTTaxationItemRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "putTaxationItemType", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PUTTaxationItemResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json; charset=utf-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getTaxationItemType = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GETTaxationItemType', 'json');
            }
        }

        return $response;
    }
}