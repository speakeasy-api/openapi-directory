<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class ChannelsModerators 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Add a specific channel moderator
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AddChannelModeratorRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AddChannelModeratorSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AddChannelModeratorResponse
     */
	public function addChannelModerator(
        \OpenAPI\OpenAPI\Models\Operations\AddChannelModeratorRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AddChannelModeratorSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AddChannelModeratorResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/channels/{channel_id}/moderators/{user_id}', \OpenAPI\OpenAPI\Models\Operations\AddChannelModeratorRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AddChannelModeratorResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.vimeo.user+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->legacyError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\LegacyError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Add a list of channel moderators
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AddChannelModeratorsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AddChannelModeratorsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AddChannelModeratorsResponse
     */
	public function addChannelModerators(
        \OpenAPI\OpenAPI\Models\Operations\AddChannelModeratorsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AddChannelModeratorsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AddChannelModeratorsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/channels/{channel_id}/moderators', \OpenAPI\OpenAPI\Models\Operations\AddChannelModeratorsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AddChannelModeratorsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }
        else if ($httpResponse->getStatusCode() === 400) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->legacyError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\LegacyError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get a specific channel moderator
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetChannelModeratorRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetChannelModeratorResponse
     */
	public function getChannelModerator(
        \OpenAPI\OpenAPI\Models\Operations\GetChannelModeratorRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetChannelModeratorResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/channels/{channel_id}/moderators/{user_id}', \OpenAPI\OpenAPI\Models\Operations\GetChannelModeratorRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetChannelModeratorResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.vimeo.user+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->user = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\User', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get all the moderators in a channel
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetChannelModeratorsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetChannelModeratorsResponse
     */
	public function getChannelModerators(
        \OpenAPI\OpenAPI\Models\Operations\GetChannelModeratorsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetChannelModeratorsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/channels/{channel_id}/moderators', \OpenAPI\OpenAPI\Models\Operations\GetChannelModeratorsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetChannelModeratorsRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetChannelModeratorsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.vimeo.user+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->users = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\User>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Remove a specific channel moderator
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\RemoveChannelModeratorRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\RemoveChannelModeratorSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\RemoveChannelModeratorResponse
     */
	public function removeChannelModerator(
        \OpenAPI\OpenAPI\Models\Operations\RemoveChannelModeratorRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\RemoveChannelModeratorSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\RemoveChannelModeratorResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/channels/{channel_id}/moderators/{user_id}', \OpenAPI\OpenAPI\Models\Operations\RemoveChannelModeratorRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\RemoveChannelModeratorResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }
        else if ($httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.vimeo.user+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->legacyError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\LegacyError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Remove a list of channel moderators
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\RemoveChannelModeratorsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\RemoveChannelModeratorsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\RemoveChannelModeratorsResponse
     */
	public function removeChannelModerators(
        \OpenAPI\OpenAPI\Models\Operations\RemoveChannelModeratorsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\RemoveChannelModeratorsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\RemoveChannelModeratorsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/channels/{channel_id}/moderators', \OpenAPI\OpenAPI\Models\Operations\RemoveChannelModeratorsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\RemoveChannelModeratorsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.vimeo.user+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->user = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\User', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.vimeo.user+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->legacyError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\LegacyError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Replace the moderators of a channel
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ReplaceChannelModeratorsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ReplaceChannelModeratorsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ReplaceChannelModeratorsResponse
     */
	public function replaceChannelModerators(
        \OpenAPI\OpenAPI\Models\Operations\ReplaceChannelModeratorsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ReplaceChannelModeratorsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ReplaceChannelModeratorsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/channels/{channel_id}/moderators', \OpenAPI\OpenAPI\Models\Operations\ReplaceChannelModeratorsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ReplaceChannelModeratorsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->users = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\User>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->legacyError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\LegacyError', 'json');
            }
        }

        return $response;
    }
}