/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * ColumnEntity - Column is not used as an independent entity, it is retrieved as part of a Table entity.
 */
public class ColumnEntity {
    /**
     * Is the column of array type.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("array")
    public Boolean array;

    public ColumnEntity withArray(Boolean array) {
        this.array = array;
        return this;
    }
    
    /**
     * If the column is array, of which length.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("arrayLength")
    public Integer arrayLength;

    public ColumnEntity withArrayLength(Integer arrayLength) {
        this.arrayLength = arrayLength;
        return this;
    }
    
    /**
     * Is the column auto-generated/identity.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("autoGenerated")
    public Boolean autoGenerated;

    public ColumnEntity withAutoGenerated(Boolean autoGenerated) {
        this.autoGenerated = autoGenerated;
        return this;
    }
    
    /**
     * Charset override - instead of table level charset.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("charset")
    public String charset;

    public ColumnEntity withCharset(String charset) {
        this.charset = charset;
        return this;
    }
    
    /**
     * Collation override - instead of table level collation.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("collation")
    public String collation;

    public ColumnEntity withCollation(String collation) {
        this.collation = collation;
        return this;
    }
    
    /**
     * Comment associated with the column.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("comment")
    public String comment;

    public ColumnEntity withComment(String comment) {
        this.comment = comment;
        return this;
    }
    
    /**
     * Custom engine specific features.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("customFeatures")
    public java.util.Map<String, Object> customFeatures;

    public ColumnEntity withCustomFeatures(java.util.Map<String, Object> customFeatures) {
        this.customFeatures = customFeatures;
        return this;
    }
    
    /**
     * Column data type.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("dataType")
    public String dataType;

    public ColumnEntity withDataType(String dataType) {
        this.dataType = dataType;
        return this;
    }
    
    /**
     * Default value of the column.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("defaultValue")
    public String defaultValue;

    public ColumnEntity withDefaultValue(String defaultValue) {
        this.defaultValue = defaultValue;
        return this;
    }
    
    /**
     * Column fractional second precision - used for timestamp based datatypes.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("fractionalSecondsPrecision")
    public Integer fractionalSecondsPrecision;

    public ColumnEntity withFractionalSecondsPrecision(Integer fractionalSecondsPrecision) {
        this.fractionalSecondsPrecision = fractionalSecondsPrecision;
        return this;
    }
    
    /**
     * Column length - e.g. varchar (50).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("length")
    public String length;

    public ColumnEntity withLength(String length) {
        this.length = length;
        return this;
    }
    
    /**
     * Column name.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    public String name;

    public ColumnEntity withName(String name) {
        this.name = name;
        return this;
    }
    
    /**
     * Is the column nullable.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("nullable")
    public Boolean nullable;

    public ColumnEntity withNullable(Boolean nullable) {
        this.nullable = nullable;
        return this;
    }
    
    /**
     * Column order in the table.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ordinalPosition")
    public Integer ordinalPosition;

    public ColumnEntity withOrdinalPosition(Integer ordinalPosition) {
        this.ordinalPosition = ordinalPosition;
        return this;
    }
    
    /**
     * Column precision - when relevant.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("precision")
    public Integer precision;

    public ColumnEntity withPrecision(Integer precision) {
        this.precision = precision;
        return this;
    }
    
    /**
     * Column scale - when relevant.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("scale")
    public Integer scale;

    public ColumnEntity withScale(Integer scale) {
        this.scale = scale;
        return this;
    }
    
    /**
     * Specifies the list of values allowed in the column. Only used for set data type.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("setValues")
    public String[] setValues;

    public ColumnEntity withSetValues(String[] setValues) {
        this.setValues = setValues;
        return this;
    }
    
    /**
     * Is the column a UDT.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("udt")
    public Boolean udt;

    public ColumnEntity withUdt(Boolean udt) {
        this.udt = udt;
        return this;
    }
    
    public ColumnEntity(){}
}
