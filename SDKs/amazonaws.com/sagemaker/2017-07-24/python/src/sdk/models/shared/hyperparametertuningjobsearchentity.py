"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from ..shared import hyperparametertrainingjobdefinition as shared_hyperparametertrainingjobdefinition
from ..shared import hyperparametertrainingjobsummary as shared_hyperparametertrainingjobsummary
from ..shared import hyperparametertuningjobcompletiondetails as shared_hyperparametertuningjobcompletiondetails
from ..shared import hyperparametertuningjobconfig as shared_hyperparametertuningjobconfig
from ..shared import hyperparametertuningjobconsumedresources as shared_hyperparametertuningjobconsumedresources
from ..shared import hyperparametertuningjobstatus_enum as shared_hyperparametertuningjobstatus_enum
from ..shared import hyperparametertuningjobwarmstartconfig as shared_hyperparametertuningjobwarmstartconfig
from ..shared import objectivestatuscounters as shared_objectivestatuscounters
from ..shared import tag as shared_tag
from ..shared import trainingjobstatuscounters as shared_trainingjobstatuscounters
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from marshmallow import fields
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class HyperParameterTuningJobSearchEntity:
    r"""An entity returned by the <a href=\\"https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_SearchRecord.html\\">SearchRecord</a> API containing the properties of a hyperparameter tuning job."""
    
    best_training_job: Optional[shared_hyperparametertrainingjobsummary.HyperParameterTrainingJobSummary] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('BestTrainingJob'), 'exclude': lambda f: f is None }})
    r"""The container for the summary information about a training job."""  
    consumed_resources: Optional[shared_hyperparametertuningjobconsumedresources.HyperParameterTuningJobConsumedResources] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ConsumedResources'), 'exclude': lambda f: f is None }})  
    creation_time: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CreationTime'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})  
    failure_reason: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('FailureReason'), 'exclude': lambda f: f is None }})  
    hyper_parameter_tuning_end_time: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('HyperParameterTuningEndTime'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})  
    hyper_parameter_tuning_job_arn: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('HyperParameterTuningJobArn'), 'exclude': lambda f: f is None }})  
    hyper_parameter_tuning_job_config: Optional[shared_hyperparametertuningjobconfig.HyperParameterTuningJobConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('HyperParameterTuningJobConfig'), 'exclude': lambda f: f is None }})
    r"""Configures a hyperparameter tuning job."""  
    hyper_parameter_tuning_job_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('HyperParameterTuningJobName'), 'exclude': lambda f: f is None }})  
    hyper_parameter_tuning_job_status: Optional[shared_hyperparametertuningjobstatus_enum.HyperParameterTuningJobStatusEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('HyperParameterTuningJobStatus'), 'exclude': lambda f: f is None }})  
    last_modified_time: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('LastModifiedTime'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})  
    objective_status_counters: Optional[shared_objectivestatuscounters.ObjectiveStatusCounters] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ObjectiveStatusCounters'), 'exclude': lambda f: f is None }})
    r"""Specifies the number of training jobs that this hyperparameter tuning job launched, categorized by the status of their objective metric. The objective metric status shows whether the final objective metric for the training job has been evaluated by the tuning job and used in the hyperparameter tuning process."""  
    overall_best_training_job: Optional[shared_hyperparametertrainingjobsummary.HyperParameterTrainingJobSummary] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('OverallBestTrainingJob'), 'exclude': lambda f: f is None }})
    r"""The container for the summary information about a training job."""  
    tags: Optional[list[shared_tag.Tag]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Tags'), 'exclude': lambda f: f is None }})  
    training_job_definition: Optional[shared_hyperparametertrainingjobdefinition.HyperParameterTrainingJobDefinition] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TrainingJobDefinition'), 'exclude': lambda f: f is None }})
    r"""Defines the training jobs launched by a hyperparameter tuning job."""  
    training_job_definitions: Optional[list[shared_hyperparametertrainingjobdefinition.HyperParameterTrainingJobDefinition]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TrainingJobDefinitions'), 'exclude': lambda f: f is None }})  
    training_job_status_counters: Optional[shared_trainingjobstatuscounters.TrainingJobStatusCounters] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TrainingJobStatusCounters'), 'exclude': lambda f: f is None }})
    r"""The numbers of training jobs launched by a hyperparameter tuning job, categorized by status."""  
    tuning_job_completion_details: Optional[shared_hyperparametertuningjobcompletiondetails.HyperParameterTuningJobCompletionDetails] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TuningJobCompletionDetails'), 'exclude': lambda f: f is None }})  
    warm_start_config: Optional[shared_hyperparametertuningjobwarmstartconfig.HyperParameterTuningJobWarmStartConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('WarmStartConfig'), 'exclude': lambda f: f is None }})
    r"""<p>Specifies the configuration for a hyperparameter tuning job that uses one or more previous hyperparameter tuning jobs as a starting point. The results of previous tuning jobs are used to inform which combinations of hyperparameters to search over in the new tuning job.</p> <p>All training jobs launched by the new hyperparameter tuning job are evaluated by using the objective metric, and the training job that performs the best is compared to the best training jobs from the parent tuning jobs. From these, the training job that performs the best as measured by the objective metric is returned as the overall best training job.</p> <note> <p>All training jobs launched by parent hyperparameter tuning jobs and the new hyperparameter tuning jobs count against the limit of training jobs for the tuning job.</p> </note>"""  
    