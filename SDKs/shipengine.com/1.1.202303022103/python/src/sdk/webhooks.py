"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Webhooks:
    r"""[Webhooks](https://www.shipengine.com/docs/tracking/webhooks/) are a powerful feature of ShipEngine that can save you from sending repeated polling requests to check on the state of something.  With webhooks, ShipEngine will automatically contact your servers when the stage changes.  This can include [parcel tracking](https://www.shipengine.com/docs/tracking/) events, notification of the completion of a [batch operation](https://www.shipengine.com/docs/labels/bulk/),  or new [salses orders](https://www.shipengine.com/docs/orders/).
    https://www.shipengine.com/docs/tracking/webhooks/ - Learn how to setup webhooks and start listening to ShipEngine events.
    """
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def create_webhook(self, request: shared.CreateWebhookRequestBody) -> operations.CreateWebhookResponse:
        r"""Create a Webhook
        Create a webook for specific events in the environment.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v1/environment/webhooks'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateWebhookResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.CreateWebhookResponseBody])
                res.create_webhook_response_body = out
        elif http_res.status_code in [400, 409, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorResponseBody])
                res.error_response_body = out

        return res

    def delete_webhook(self, request: operations.DeleteWebhookRequest) -> operations.DeleteWebhookResponse:
        r"""Delete Webhook By ID
        Delete a webhook
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteWebhookRequest, base_url, '/v1/environment/webhooks/{webhook_id}', request)
        
        
        client = self._security_client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteWebhookResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 204:
            if utils.match_content_type(content_type, 'application/json'):
                res.empty_response_body = http_res.content
            if utils.match_content_type(content_type, 'text/plain'):
                res.empty_response_body = http_res.content
        elif http_res.status_code in [400, 404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorResponseBody])
                res.error_response_body = out

        return res

    def get_webhook_by_id(self, request: operations.GetWebhookByIDRequest) -> operations.GetWebhookByIDResponse:
        r"""Get Webhook By ID
        Retrieve individual webhook by an ID
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetWebhookByIDRequest, base_url, '/v1/environment/webhooks/{webhook_id}', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetWebhookByIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GetWebhookByIDResponseBody])
                res.get_webhook_by_id_response_body = out
        elif http_res.status_code in [400, 404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorResponseBody])
                res.error_response_body = out

        return res

    def list_webhooks(self) -> operations.ListWebhooksResponse:
        r"""List Webhooks
        List all webhooks currently enabled for the account.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v1/environment/webhooks'
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ListWebhooksResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.Webhook]])
                res.list_webhooks_response_body = out
        elif http_res.status_code in [400, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorResponseBody])
                res.error_response_body = out

        return res

    def update_webhook(self, request: operations.UpdateWebhookRequest) -> operations.UpdateWebhookResponse:
        r"""Update a Webhook
        Update the webhook url property
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.UpdateWebhookRequest, base_url, '/v1/environment/webhooks/{webhook_id}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "update_webhook_request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateWebhookResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 204:
            if utils.match_content_type(content_type, 'application/json'):
                res.empty_response_body = http_res.content
            if utils.match_content_type(content_type, 'text/plain'):
                res.empty_response_body = http_res.content
        elif http_res.status_code in [400, 404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorResponseBody])
                res.error_response_body = out

        return res

    