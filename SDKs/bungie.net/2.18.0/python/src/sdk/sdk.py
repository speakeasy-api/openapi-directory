"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from .app import App
from .communitycontent import CommunityContent
from .content import Content
from .destiny2 import Destiny2
from .fireteam import Fireteam
from .forum import Forum
from .groupv2 import GroupV2
from .preview import Preview
from .social import Social
from .tokens import Tokens
from .trending import Trending
from .user import User
from sdk.models import operations

SERVERS = [
    "https://www.bungie.net/Platform",
]
"""Contains the list of servers available to the SDK"""

class SDK:
    r"""These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
    https://github.com/Bungie-net/api/wiki/OAuth-Documentation - Our Wiki page about OAuth through Bungie.net.
    """
    app: App
    r"""application"""
    community_content: CommunityContent
    r"""communitycontent"""
    content: Content
    r"""content"""
    destiny2: Destiny2
    r"""destiny2"""
    fireteam: Fireteam
    r"""fireteam"""
    forum: Forum
    r"""forum"""
    group_v2: GroupV2
    r"""groupV2"""
    preview: Preview
    social: Social
    r"""social"""
    tokens: Tokens
    r"""tokens"""
    trending: Trending
    r"""trending"""
    user: User
    r"""user"""

    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str = SERVERS[0]
    _language: str = "python"
    _sdk_version: str = "0.0.1"
    _gen_version: str = "internal"

    def __init__(self,
                 server_url: str = None,
                 url_params: dict[str, str] = None,
                 client: requests_http.Session = None
                 ) -> None:
        """Instantiates the SDK configuring it with the provided parameters.
        
        :param server_url: The server URL to use for all operations
        :type server_url: str
        :param url_params: Parameters to optionally template the server URL with
        :type url_params: dict[str, str]
        :param client: The requests.Session HTTP client to use for all operations
        :type client: requests_http.Session        
        """
        self._client = requests_http.Session()
        
        
        if server_url is not None:
            if url_params is not None:
                self._server_url = utils.template_url(server_url, url_params)
            else:
                self._server_url = server_url

        if client is not None:
            self._client = client
        
        self._security_client = self._client
        

        self._init_sdks()
    
    def _init_sdks(self):
        self.app = App(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.community_content = CommunityContent(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.content = Content(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.destiny2 = Destiny2(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.fireteam = Fireteam(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.forum = Forum(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.group_v2 = GroupV2(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.preview = Preview(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.social = Social(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.tokens = Tokens(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.trending = Trending(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.user = User(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
    def dot_get_available_locales(self) -> operations.DotGetAvailableLocalesResponse:
        r"""List of available localization cultures"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/GetAvailableLocales/'
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DotGetAvailableLocalesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content

        return res

    def dot_get_common_settings(self) -> operations.DotGetCommonSettingsResponse:
        r"""Get the common settings used by the Bungie.Net environment."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/Settings/'
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DotGetCommonSettingsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content

        return res

    def dot_get_global_alerts(self, request: operations.DotGetGlobalAlertsRequest) -> operations.DotGetGlobalAlertsResponse:
        r"""Gets any active global alert for display in the forum banners, help pages, etc. Usually used for DOC alerts."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/GlobalAlerts/'
        
        query_params = utils.get_query_params(operations.DotGetGlobalAlertsRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DotGetGlobalAlertsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content

        return res

    def dot_get_user_system_overrides(self) -> operations.DotGetUserSystemOverridesResponse:
        r"""Get the user-specific system overrides that should be respected alongside common systems."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/UserSystemOverrides/'
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DotGetUserSystemOverridesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content

        return res

    