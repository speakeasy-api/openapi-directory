"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import transaction as shared_transaction
from dataclasses_json import Undefined, dataclass_json
from datetime import date, datetime
from sdk import utils
from typing import Optional


@dataclasses.dataclass
class GetUsersIDUserConnectionsIDConnectionAccountsIDAccountTransactionsRequest:
    
    id_account: int = dataclasses.field(metadata={'path_param': { 'field_name': 'id_account', 'style': 'simple', 'explode': False }})  
    id_connection: int = dataclasses.field(metadata={'path_param': { 'field_name': 'id_connection', 'style': 'simple', 'explode': False }})  
    id_user: str = dataclasses.field(metadata={'path_param': { 'field_name': 'id_user', 'style': 'simple', 'explode': False }})
    r"""Hint: you can use 'me' or 'all'"""  
    all: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'all', 'style': 'form', 'explode': True }})
    r"""display all transactions, including deleted ones"""  
    deleted: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'deleted', 'style': 'form', 'explode': True }})
    r"""display only deleted transactions"""  
    expand: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'expand', 'style': 'form', 'explode': True }})  
    id_category: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'id_category', 'style': 'form', 'explode': True }})
    r"""filter on given category id(s) (comma separated) or \\"null\\" """  
    income: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'income', 'style': 'form', 'explode': True }})
    r"""filter on income or expenditures"""  
    last_update: Optional[datetime] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'last_update', 'style': 'form', 'explode': True }})
    r"""get only transactions updated after the specified datetime"""  
    limit: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'limit', 'style': 'form', 'explode': True }})
    r"""limit number of results"""  
    max_date: Optional[date] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'max_date', 'style': 'form', 'explode': True }})
    r"""maximum (inclusive) date"""  
    max_value: Optional[float] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'max_value', 'style': 'form', 'explode': True }})
    r"""maximum (inclusive) value"""  
    min_date: Optional[date] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'min_date', 'style': 'form', 'explode': True }})
    r"""minimal (inclusive) date"""  
    min_value: Optional[float] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'min_value', 'style': 'form', 'explode': True }})
    r"""minimal (inclusive) value"""  
    offset: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'offset', 'style': 'form', 'explode': True }})
    r"""offset of first result"""  
    search: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'search', 'style': 'form', 'explode': True }})
    r"""search in labels, dates, values and categories"""  
    value: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'value', 'style': 'form', 'explode': True }})
    r"""\\"XX|-XX\\" or \\"Â±XX\\" """  
    wording: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'wording', 'style': 'form', 'explode': True }})
    r"""filter transactions containing the given string"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetUsersIDUserConnectionsIDConnectionAccountsIDAccountTransactions200ApplicationJSON:
    r"""transactions"""
    
    transactions: list[shared_transaction.Transaction] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('transactions') }})  
    total: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('total'), 'exclude': lambda f: f is None }})
    r"""total number of results"""  
    

@dataclasses.dataclass
class GetUsersIDUserConnectionsIDConnectionAccountsIDAccountTransactionsResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    get_users_id_user_connections_id_connection_accounts_id_account_transactions_200_application_json_object: Optional[GetUsersIDUserConnectionsIDConnectionAccountsIDAccountTransactions200ApplicationJSON] = dataclasses.field(default=None)
    r"""transactions"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    