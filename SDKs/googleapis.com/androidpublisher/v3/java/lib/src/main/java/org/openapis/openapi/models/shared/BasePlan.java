/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * BasePlan - A single base plan for a subscription.
 */
public class BasePlan {
    /**
     * Represents a base plan that automatically renews at the end of its subscription period.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("autoRenewingBasePlanType")
    public AutoRenewingBasePlanType autoRenewingBasePlanType;

    public BasePlan withAutoRenewingBasePlanType(AutoRenewingBasePlanType autoRenewingBasePlanType) {
        this.autoRenewingBasePlanType = autoRenewingBasePlanType;
        return this;
    }
    
    /**
     * Required. Immutable. The unique identifier of this base plan. Must be unique within the subscription, and conform with RFC-1034. That is, this ID can only contain lower-case letters (a-z), numbers (0-9), and hyphens (-), and be at most 63 characters.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("basePlanId")
    public String basePlanId;

    public BasePlan withBasePlanId(String basePlanId) {
        this.basePlanId = basePlanId;
        return this;
    }
    
    /**
     * List of up to 20 custom tags specified for this base plan, and returned to the app through the billing library. Subscription offers for this base plan will also receive these offer tags in the billing library.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("offerTags")
    public OfferTag[] offerTags;

    public BasePlan withOfferTags(OfferTag[] offerTags) {
        this.offerTags = offerTags;
        return this;
    }
    
    /**
     * Pricing information for any new locations Play may launch in.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("otherRegionsConfig")
    public OtherRegionsBasePlanConfig otherRegionsConfig;

    public BasePlan withOtherRegionsConfig(OtherRegionsBasePlanConfig otherRegionsConfig) {
        this.otherRegionsConfig = otherRegionsConfig;
        return this;
    }
    
    /**
     * Represents a base plan that does not automatically renew at the end of the base plan, and must be manually renewed by the user.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("prepaidBasePlanType")
    public PrepaidBasePlanType prepaidBasePlanType;

    public BasePlan withPrepaidBasePlanType(PrepaidBasePlanType prepaidBasePlanType) {
        this.prepaidBasePlanType = prepaidBasePlanType;
        return this;
    }
    
    /**
     * Region-specific information for this base plan.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("regionalConfigs")
    public RegionalBasePlanConfig[] regionalConfigs;

    public BasePlan withRegionalConfigs(RegionalBasePlanConfig[] regionalConfigs) {
        this.regionalConfigs = regionalConfigs;
        return this;
    }
    
    /**
     * Output only. The state of the base plan, i.e. whether it's active. Draft and inactive base plans can be activated or deleted. Active base plans can be made inactive. Inactive base plans can be canceled. This field cannot be changed by updating the resource. Use the dedicated endpoints instead.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("state")
    public BasePlanStateEnum state;

    public BasePlan withState(BasePlanStateEnum state) {
        this.state = state;
        return this;
    }
    
    public BasePlan(){}
}
