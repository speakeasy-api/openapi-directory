// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"bytes"
	"encoding/json"
	"errors"
	"net/http"
)

type PostAssetsVolatilityRequestBody3Assets struct {
	// The asset variance
	AssetVariance float64 `json:"assetVariance"`
}

type PostAssetsVolatilityRequestBody3 struct {
	Assets []PostAssetsVolatilityRequestBody3Assets `json:"assets"`
}

type PostAssetsVolatilityRequestBody2 struct {
	// The number of assets
	Assets int64 `json:"assets"`
	// assetsCovarianceMatrix[i][j] is the covariance between the asset i and the asset j
	AssetsCovarianceMatrix [][]float64 `json:"assetsCovarianceMatrix"`
}

type PostAssetsVolatilityRequestBody1Assets struct {
	// assetReturns[t] is the return of the asset at the time t
	AssetReturns []float64 `json:"assetReturns"`
}

type PostAssetsVolatilityRequestBody1 struct {
	Assets []PostAssetsVolatilityRequestBody1Assets `json:"assets"`
}

type PostAssetsVolatilityRequestBodyType string

const (
	PostAssetsVolatilityRequestBodyTypePostAssetsVolatilityRequestBody1 PostAssetsVolatilityRequestBodyType = "post_/assets/volatility_requestBody_1"
	PostAssetsVolatilityRequestBodyTypePostAssetsVolatilityRequestBody2 PostAssetsVolatilityRequestBodyType = "post_/assets/volatility_requestBody_2"
	PostAssetsVolatilityRequestBodyTypePostAssetsVolatilityRequestBody3 PostAssetsVolatilityRequestBodyType = "post_/assets/volatility_requestBody_3"
)

type PostAssetsVolatilityRequestBody struct {
	PostAssetsVolatilityRequestBody1 *PostAssetsVolatilityRequestBody1
	PostAssetsVolatilityRequestBody2 *PostAssetsVolatilityRequestBody2
	PostAssetsVolatilityRequestBody3 *PostAssetsVolatilityRequestBody3

	Type PostAssetsVolatilityRequestBodyType
}

func CreatePostAssetsVolatilityRequestBodyPostAssetsVolatilityRequestBody1(postAssetsVolatilityRequestBody1 PostAssetsVolatilityRequestBody1) PostAssetsVolatilityRequestBody {
	typ := PostAssetsVolatilityRequestBodyTypePostAssetsVolatilityRequestBody1

	return PostAssetsVolatilityRequestBody{
		PostAssetsVolatilityRequestBody1: &postAssetsVolatilityRequestBody1,
		Type:                             typ,
	}
}

func CreatePostAssetsVolatilityRequestBodyPostAssetsVolatilityRequestBody2(postAssetsVolatilityRequestBody2 PostAssetsVolatilityRequestBody2) PostAssetsVolatilityRequestBody {
	typ := PostAssetsVolatilityRequestBodyTypePostAssetsVolatilityRequestBody2

	return PostAssetsVolatilityRequestBody{
		PostAssetsVolatilityRequestBody2: &postAssetsVolatilityRequestBody2,
		Type:                             typ,
	}
}

func CreatePostAssetsVolatilityRequestBodyPostAssetsVolatilityRequestBody3(postAssetsVolatilityRequestBody3 PostAssetsVolatilityRequestBody3) PostAssetsVolatilityRequestBody {
	typ := PostAssetsVolatilityRequestBodyTypePostAssetsVolatilityRequestBody3

	return PostAssetsVolatilityRequestBody{
		PostAssetsVolatilityRequestBody3: &postAssetsVolatilityRequestBody3,
		Type:                             typ,
	}
}

func (u *PostAssetsVolatilityRequestBody) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	postAssetsVolatilityRequestBody1 := new(PostAssetsVolatilityRequestBody1)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&postAssetsVolatilityRequestBody1); err == nil {
		u.PostAssetsVolatilityRequestBody1 = postAssetsVolatilityRequestBody1
		u.Type = PostAssetsVolatilityRequestBodyTypePostAssetsVolatilityRequestBody1
		return nil
	}

	postAssetsVolatilityRequestBody2 := new(PostAssetsVolatilityRequestBody2)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&postAssetsVolatilityRequestBody2); err == nil {
		u.PostAssetsVolatilityRequestBody2 = postAssetsVolatilityRequestBody2
		u.Type = PostAssetsVolatilityRequestBodyTypePostAssetsVolatilityRequestBody2
		return nil
	}

	postAssetsVolatilityRequestBody3 := new(PostAssetsVolatilityRequestBody3)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&postAssetsVolatilityRequestBody3); err == nil {
		u.PostAssetsVolatilityRequestBody3 = postAssetsVolatilityRequestBody3
		u.Type = PostAssetsVolatilityRequestBodyTypePostAssetsVolatilityRequestBody3
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u PostAssetsVolatilityRequestBody) MarshalJSON() ([]byte, error) {
	if u.PostAssetsVolatilityRequestBody1 != nil {
		return json.Marshal(u.PostAssetsVolatilityRequestBody1)
	}

	if u.PostAssetsVolatilityRequestBody2 != nil {
		return json.Marshal(u.PostAssetsVolatilityRequestBody2)
	}

	if u.PostAssetsVolatilityRequestBody3 != nil {
		return json.Marshal(u.PostAssetsVolatilityRequestBody3)
	}

	return nil, nil
}

type PostAssetsVolatility200ApplicationJSONAssets struct {
	// The volatility of the asset
	AssetVolatility float64 `json:"assetVolatility"`
}

// PostAssetsVolatility200ApplicationJSON - OK
type PostAssetsVolatility200ApplicationJSON struct {
	Assets []PostAssetsVolatility200ApplicationJSONAssets `json:"assets"`
}

type PostAssetsVolatilityResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// OK
	PostAssetsVolatility200ApplicationJSONObject *PostAssetsVolatility200ApplicationJSON
}
