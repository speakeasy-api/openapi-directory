// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

type PostHubPayslipsJSONSecurity struct {
	GmaAuth string `security:"scheme,type=oauth2,name=Authorization"`
}

type PostHubPayslipsApplicationJSONAccountingWorkbookEnum string

const (
	PostHubPayslipsApplicationJSONAccountingWorkbookEnumCustomer    PostHubPayslipsApplicationJSONAccountingWorkbookEnum = "customer"
	PostHubPayslipsApplicationJSONAccountingWorkbookEnumProvider    PostHubPayslipsApplicationJSONAccountingWorkbookEnum = "provider"
	PostHubPayslipsApplicationJSONAccountingWorkbookEnumBank        PostHubPayslipsApplicationJSONAccountingWorkbookEnum = "bank"
	PostHubPayslipsApplicationJSONAccountingWorkbookEnumCashWoucher PostHubPayslipsApplicationJSONAccountingWorkbookEnum = "cashWoucher"
	PostHubPayslipsApplicationJSONAccountingWorkbookEnumFiscal      PostHubPayslipsApplicationJSONAccountingWorkbookEnum = "fiscal"
	PostHubPayslipsApplicationJSONAccountingWorkbookEnumInsurance   PostHubPayslipsApplicationJSONAccountingWorkbookEnum = "insurance"
	PostHubPayslipsApplicationJSONAccountingWorkbookEnumSocial      PostHubPayslipsApplicationJSONAccountingWorkbookEnum = "social"
	PostHubPayslipsApplicationJSONAccountingWorkbookEnumOther       PostHubPayslipsApplicationJSONAccountingWorkbookEnum = "other"
	PostHubPayslipsApplicationJSONAccountingWorkbookEnumPermanent   PostHubPayslipsApplicationJSONAccountingWorkbookEnum = "permanent"
)

func (e *PostHubPayslipsApplicationJSONAccountingWorkbookEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "customer":
		fallthrough
	case "provider":
		fallthrough
	case "bank":
		fallthrough
	case "cashWoucher":
		fallthrough
	case "fiscal":
		fallthrough
	case "insurance":
		fallthrough
	case "social":
		fallthrough
	case "other":
		fallthrough
	case "permanent":
		*e = PostHubPayslipsApplicationJSONAccountingWorkbookEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PostHubPayslipsApplicationJSONAccountingWorkbookEnum: %s", s)
	}
}

type PostHubPayslipsApplicationJSONAccounting struct {
	AccountedOn *string                                               `json:"AccountedOn,omitempty"`
	Workbook    *PostHubPayslipsApplicationJSONAccountingWorkbookEnum `json:"Workbook,omitempty"`
	YearMonth   *string                                               `json:"YearMonth,omitempty"`
}

type PostHubPayslipsApplicationJSONFile struct {
	Content64Encoded *string `json:"Content64Encoded,omitempty"`
	Name             *string `json:"Name,omitempty"`
}

// PostHubPayslipsApplicationJSON - Document to add
type PostHubPayslipsApplicationJSON struct {
	Accounting         *PostHubPayslipsApplicationJSONAccounting `json:"Accounting,omitempty"`
	AddContractAllowed *bool                                     `json:"AddContractAllowed,omitempty"`
	Author             *string                                   `json:"Author,omitempty"`
	Comment            *string                                   `json:"Comment,omitempty"`
	Date               *string                                   `json:"Date,omitempty"`
	File               PostHubPayslipsApplicationJSONFile        `json:"File"`
	Title              string                                    `json:"Title"`
}

// PostHubPayslipsJSON201ApplicationJSON - Id of documents created
type PostHubPayslipsJSON201ApplicationJSON struct {
	ID *string `json:"Id,omitempty"`
}

type PostHubPayslipsJSONResponse struct {
	ContentType string
	Headers     map[string][]string
	StatusCode  int
	RawResponse *http.Response
	// Id of documents created
	PostHubPayslipsJSON201ApplicationJSONObject *PostHubPayslipsJSON201ApplicationJSON
}
