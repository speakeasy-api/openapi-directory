/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { AxiosResponse } from "axios";
import { Expose } from "class-transformer";

export class TestGetTestRunStateSecurity extends SpeakeasyBase {
  @SpeakeasyMetadata({
    data: "security, scheme=true;type=apiKey;subtype=header;name=X-API-Token",
  })
  apiToken: string;
}

export class TestGetTestRunStateRequest extends SpeakeasyBase {
  /**
   * The name of the application
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=app_name",
  })
  appName: string;

  /**
   * The name of the owner
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=owner_name",
  })
  ownerName: string;

  /**
   * The ID of the test run
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=test_run_id",
  })
  testRunId: string;
}

/**
 * Current status of a test run
 */
export class TestGetTestRunStateTestRunState extends SpeakeasyBase {
  /**
   * The exit code that the client should use when exiting. Used for indicating status to the caller of the client.
   *
   * @remarks
   * 0: test run completes with no failing tests
   * 1: test run completes with at least one failing test
   * 2: test run failed to complete. Status for test run is unknown
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "exit_code" })
  exitCode?: number;

  /**
   * Multi-line message that describes the status
   */
  @SpeakeasyMetadata()
  @Expose({ name: "message" })
  message?: string[];

  /**
   * Time (in seconds) that the client should wait for before checking the status again
   */
  @SpeakeasyMetadata()
  @Expose({ name: "wait_time" })
  waitTime?: number;
}

export class TestGetTestRunStateResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * OK
   */
  @SpeakeasyMetadata()
  testRunState?: TestGetTestRunStateTestRunState;
}
