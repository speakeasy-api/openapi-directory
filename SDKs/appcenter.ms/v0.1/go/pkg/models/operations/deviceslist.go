// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

type DevicesListSecurity struct {
	APIToken string `security:"scheme,type=apiKey,subtype=header,name=X-API-Token"`
}

type DevicesListRequest struct {
	// The name of the application
	AppName string `pathParam:"style=simple,explode=false,name=app_name"`
	// The name of the distribution group.
	DistributionGroupName string `pathParam:"style=simple,explode=false,name=distribution_group_name"`
	// The name of the owner
	OwnerName string `pathParam:"style=simple,explode=false,name=owner_name"`
	// when provided, gets the provisioning state of the devices owned by users of this distribution group when compared to the provided release.
	ReleaseID *float64 `queryParam:"style=form,explode=true,name=release_id"`
}

type DevicesList404ApplicationJSONCodeEnum string

const (
	DevicesList404ApplicationJSONCodeEnumBadRequest          DevicesList404ApplicationJSONCodeEnum = "BadRequest"
	DevicesList404ApplicationJSONCodeEnumConflict            DevicesList404ApplicationJSONCodeEnum = "Conflict"
	DevicesList404ApplicationJSONCodeEnumNotAcceptable       DevicesList404ApplicationJSONCodeEnum = "NotAcceptable"
	DevicesList404ApplicationJSONCodeEnumNotFound            DevicesList404ApplicationJSONCodeEnum = "NotFound"
	DevicesList404ApplicationJSONCodeEnumInternalServerError DevicesList404ApplicationJSONCodeEnum = "InternalServerError"
	DevicesList404ApplicationJSONCodeEnumUnauthorized        DevicesList404ApplicationJSONCodeEnum = "Unauthorized"
	DevicesList404ApplicationJSONCodeEnumTooManyRequests     DevicesList404ApplicationJSONCodeEnum = "TooManyRequests"
)

func (e *DevicesList404ApplicationJSONCodeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "BadRequest":
		fallthrough
	case "Conflict":
		fallthrough
	case "NotAcceptable":
		fallthrough
	case "NotFound":
		fallthrough
	case "InternalServerError":
		fallthrough
	case "Unauthorized":
		fallthrough
	case "TooManyRequests":
		*e = DevicesList404ApplicationJSONCodeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for DevicesList404ApplicationJSONCodeEnum: %s", s)
	}
}

// DevicesList404ApplicationJSON - <b>not_found</b>: A distribution group can't be found.
type DevicesList404ApplicationJSON struct {
	Code    DevicesList404ApplicationJSONCodeEnum `json:"code"`
	Message string                                `json:"message"`
}

type DevicesList400ApplicationJSONCodeEnum string

const (
	DevicesList400ApplicationJSONCodeEnumBadRequest          DevicesList400ApplicationJSONCodeEnum = "BadRequest"
	DevicesList400ApplicationJSONCodeEnumConflict            DevicesList400ApplicationJSONCodeEnum = "Conflict"
	DevicesList400ApplicationJSONCodeEnumNotAcceptable       DevicesList400ApplicationJSONCodeEnum = "NotAcceptable"
	DevicesList400ApplicationJSONCodeEnumNotFound            DevicesList400ApplicationJSONCodeEnum = "NotFound"
	DevicesList400ApplicationJSONCodeEnumInternalServerError DevicesList400ApplicationJSONCodeEnum = "InternalServerError"
	DevicesList400ApplicationJSONCodeEnumUnauthorized        DevicesList400ApplicationJSONCodeEnum = "Unauthorized"
	DevicesList400ApplicationJSONCodeEnumTooManyRequests     DevicesList400ApplicationJSONCodeEnum = "TooManyRequests"
)

func (e *DevicesList400ApplicationJSONCodeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "BadRequest":
		fallthrough
	case "Conflict":
		fallthrough
	case "NotAcceptable":
		fallthrough
	case "NotFound":
		fallthrough
	case "InternalServerError":
		fallthrough
	case "Unauthorized":
		fallthrough
	case "TooManyRequests":
		*e = DevicesList400ApplicationJSONCodeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for DevicesList400ApplicationJSONCodeEnum: %s", s)
	}
}

// DevicesList400ApplicationJSON - <b>bad_request</b>: Devices information can only be requested for iOS apps.
type DevicesList400ApplicationJSON struct {
	Code    DevicesList400ApplicationJSONCodeEnum `json:"code"`
	Message string                                `json:"message"`
}

// DevicesList200ApplicationJSON - The information for a single iOS device
type DevicesList200ApplicationJSON struct {
	// The device description, in the format "iPhone 7 Plus (A1784)"
	DeviceName string `json:"device_name"`
	// A combination of the device model name and the owner name.
	FullDeviceName *string `json:"full_device_name,omitempty"`
	// The device's International Mobile Equipment Identity number. Always empty or undefined at present.
	Imei *string `json:"imei,omitempty"`
	// The model identifier of the device, in the format iDeviceM,N
	Model string `json:"model"`
	// The last known OS version running on the device
	OsBuild string `json:"os_build"`
	// The last known OS version running on the device
	OsVersion string `json:"os_version"`
	// The user ID of the device owner.
	OwnerID *string `json:"owner_id,omitempty"`
	// Timestamp of when the device was registered in ISO format.
	RegisteredAt *string `json:"registered_at,omitempty"`
	// The device's serial number. Always empty or undefined at present.
	Serial *string `json:"serial,omitempty"`
	// The provisioning status of the device.
	Status string `json:"status"`
	// The Unique Device IDentifier of the device
	Udid string `json:"udid"`
}

type DevicesListResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Success
	DevicesList200ApplicationJSONObjects []DevicesList200ApplicationJSON
	// <b>bad_request</b>: Devices information can only be requested for iOS apps.
	//
	DevicesList400ApplicationJSONObject *DevicesList400ApplicationJSON
	// <b>not_found</b>: A distribution group can't be found.
	//
	DevicesList404ApplicationJSONObject *DevicesList404ApplicationJSON
}
