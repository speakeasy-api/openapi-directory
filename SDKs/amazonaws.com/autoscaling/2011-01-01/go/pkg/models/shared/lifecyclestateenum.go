// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type LifecycleStateEnum string

const (
	LifecycleStateEnumPending                  LifecycleStateEnum = "Pending"
	LifecycleStateEnumPendingWait              LifecycleStateEnum = "Pending:Wait"
	LifecycleStateEnumPendingProceed           LifecycleStateEnum = "Pending:Proceed"
	LifecycleStateEnumQuarantined              LifecycleStateEnum = "Quarantined"
	LifecycleStateEnumInService                LifecycleStateEnum = "InService"
	LifecycleStateEnumTerminating              LifecycleStateEnum = "Terminating"
	LifecycleStateEnumTerminatingWait          LifecycleStateEnum = "Terminating:Wait"
	LifecycleStateEnumTerminatingProceed       LifecycleStateEnum = "Terminating:Proceed"
	LifecycleStateEnumTerminated               LifecycleStateEnum = "Terminated"
	LifecycleStateEnumDetaching                LifecycleStateEnum = "Detaching"
	LifecycleStateEnumDetached                 LifecycleStateEnum = "Detached"
	LifecycleStateEnumEnteringStandby          LifecycleStateEnum = "EnteringStandby"
	LifecycleStateEnumStandby                  LifecycleStateEnum = "Standby"
	LifecycleStateEnumWarmedPending            LifecycleStateEnum = "Warmed:Pending"
	LifecycleStateEnumWarmedPendingWait        LifecycleStateEnum = "Warmed:Pending:Wait"
	LifecycleStateEnumWarmedPendingProceed     LifecycleStateEnum = "Warmed:Pending:Proceed"
	LifecycleStateEnumWarmedTerminating        LifecycleStateEnum = "Warmed:Terminating"
	LifecycleStateEnumWarmedTerminatingWait    LifecycleStateEnum = "Warmed:Terminating:Wait"
	LifecycleStateEnumWarmedTerminatingProceed LifecycleStateEnum = "Warmed:Terminating:Proceed"
	LifecycleStateEnumWarmedTerminated         LifecycleStateEnum = "Warmed:Terminated"
	LifecycleStateEnumWarmedStopped            LifecycleStateEnum = "Warmed:Stopped"
	LifecycleStateEnumWarmedRunning            LifecycleStateEnum = "Warmed:Running"
	LifecycleStateEnumWarmedHibernated         LifecycleStateEnum = "Warmed:Hibernated"
)

func (e *LifecycleStateEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Pending":
		fallthrough
	case "Pending:Wait":
		fallthrough
	case "Pending:Proceed":
		fallthrough
	case "Quarantined":
		fallthrough
	case "InService":
		fallthrough
	case "Terminating":
		fallthrough
	case "Terminating:Wait":
		fallthrough
	case "Terminating:Proceed":
		fallthrough
	case "Terminated":
		fallthrough
	case "Detaching":
		fallthrough
	case "Detached":
		fallthrough
	case "EnteringStandby":
		fallthrough
	case "Standby":
		fallthrough
	case "Warmed:Pending":
		fallthrough
	case "Warmed:Pending:Wait":
		fallthrough
	case "Warmed:Pending:Proceed":
		fallthrough
	case "Warmed:Terminating":
		fallthrough
	case "Warmed:Terminating:Wait":
		fallthrough
	case "Warmed:Terminating:Proceed":
		fallthrough
	case "Warmed:Terminated":
		fallthrough
	case "Warmed:Stopped":
		fallthrough
	case "Warmed:Running":
		fallthrough
	case "Warmed:Hibernated":
		*e = LifecycleStateEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for LifecycleStateEnum: %s", s)
	}
}
