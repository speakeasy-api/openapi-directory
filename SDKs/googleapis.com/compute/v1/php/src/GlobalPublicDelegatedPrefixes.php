<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class GlobalPublicDelegatedPrefixes 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Deletes the specified global PublicDelegatedPrefix.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeGlobalPublicDelegatedPrefixesDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeGlobalPublicDelegatedPrefixesDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeGlobalPublicDelegatedPrefixesDeleteResponse
     */
	public function computeGlobalPublicDelegatedPrefixesDelete(
        \OpenAPI\OpenAPI\Models\Operations\ComputeGlobalPublicDelegatedPrefixesDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeGlobalPublicDelegatedPrefixesDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeGlobalPublicDelegatedPrefixesDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/global/publicDelegatedPrefixes/{publicDelegatedPrefix}', \OpenAPI\OpenAPI\Models\Operations\ComputeGlobalPublicDelegatedPrefixesDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeGlobalPublicDelegatedPrefixesDeleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeGlobalPublicDelegatedPrefixesDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns the specified global PublicDelegatedPrefix resource.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeGlobalPublicDelegatedPrefixesGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeGlobalPublicDelegatedPrefixesGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeGlobalPublicDelegatedPrefixesGetResponse
     */
	public function computeGlobalPublicDelegatedPrefixesGet(
        \OpenAPI\OpenAPI\Models\Operations\ComputeGlobalPublicDelegatedPrefixesGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeGlobalPublicDelegatedPrefixesGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeGlobalPublicDelegatedPrefixesGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/global/publicDelegatedPrefixes/{publicDelegatedPrefix}', \OpenAPI\OpenAPI\Models\Operations\ComputeGlobalPublicDelegatedPrefixesGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeGlobalPublicDelegatedPrefixesGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeGlobalPublicDelegatedPrefixesGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->publicDelegatedPrefix = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PublicDelegatedPrefix', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a global PublicDelegatedPrefix in the specified project using the parameters that are included in the request.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeGlobalPublicDelegatedPrefixesInsertRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeGlobalPublicDelegatedPrefixesInsertSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeGlobalPublicDelegatedPrefixesInsertResponse
     */
	public function computeGlobalPublicDelegatedPrefixesInsert(
        \OpenAPI\OpenAPI\Models\Operations\ComputeGlobalPublicDelegatedPrefixesInsertRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeGlobalPublicDelegatedPrefixesInsertSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeGlobalPublicDelegatedPrefixesInsertResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/global/publicDelegatedPrefixes', \OpenAPI\OpenAPI\Models\Operations\ComputeGlobalPublicDelegatedPrefixesInsertRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "publicDelegatedPrefix", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeGlobalPublicDelegatedPrefixesInsertRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeGlobalPublicDelegatedPrefixesInsertResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists the global PublicDelegatedPrefixes for a project.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeGlobalPublicDelegatedPrefixesListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeGlobalPublicDelegatedPrefixesListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeGlobalPublicDelegatedPrefixesListResponse
     */
	public function computeGlobalPublicDelegatedPrefixesList(
        \OpenAPI\OpenAPI\Models\Operations\ComputeGlobalPublicDelegatedPrefixesListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeGlobalPublicDelegatedPrefixesListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeGlobalPublicDelegatedPrefixesListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/global/publicDelegatedPrefixes', \OpenAPI\OpenAPI\Models\Operations\ComputeGlobalPublicDelegatedPrefixesListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeGlobalPublicDelegatedPrefixesListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeGlobalPublicDelegatedPrefixesListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->publicDelegatedPrefixList = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PublicDelegatedPrefixList', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Patches the specified global PublicDelegatedPrefix resource with the data included in the request. This method supports PATCH semantics and uses JSON merge patch format and processing rules.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeGlobalPublicDelegatedPrefixesPatchRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeGlobalPublicDelegatedPrefixesPatchSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeGlobalPublicDelegatedPrefixesPatchResponse
     */
	public function computeGlobalPublicDelegatedPrefixesPatch(
        \OpenAPI\OpenAPI\Models\Operations\ComputeGlobalPublicDelegatedPrefixesPatchRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeGlobalPublicDelegatedPrefixesPatchSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeGlobalPublicDelegatedPrefixesPatchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/global/publicDelegatedPrefixes/{publicDelegatedPrefix}', \OpenAPI\OpenAPI\Models\Operations\ComputeGlobalPublicDelegatedPrefixesPatchRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "publicDelegatedPrefix1", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeGlobalPublicDelegatedPrefixesPatchRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeGlobalPublicDelegatedPrefixesPatchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
}