/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * MeetingRecordingRegistrantCreate201ApplicationJSON - **HTTP Status Code:** `201` &lt;br&gt;
 * Registration submitted.
 */
public class MeetingRecordingRegistrantCreate201ApplicationJSON {
    /**
     * [Meeting ID](https://support.zoom.us/hc/en-us/articles/201362373-What-is-a-Meeting-ID-): Unique identifier of the meeting in "**long**" format(represented as int64 data type in JSON), also known as the meeting number.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    public Long id;
    public MeetingRecordingRegistrantCreate201ApplicationJSON withId(Long id) {
        this.id = id;
        return this;
    }
    
    /**
     * Registrant ID
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("registrant_id")
    public String registrantId;
    public MeetingRecordingRegistrantCreate201ApplicationJSON withRegistrantId(String registrantId) {
        this.registrantId = registrantId;
        return this;
    }
    
    /**
     * Share URL for the on-demand recording. This includes the \u201ctk\u201d token for the registrant. This is similar to the token that Zoom returns in the URL response to join a registered meeting, for example: `url?tk=xxxx`. Except while the meeting registration token can be used to join the meeting, this token can only be used to watch the recording.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("share_url")
    public String shareUrl;
    public MeetingRecordingRegistrantCreate201ApplicationJSON withShareUrl(String shareUrl) {
        this.shareUrl = shareUrl;
        return this;
    }
    
    /**
     * Meeting Topic
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("topic")
    public String topic;
    public MeetingRecordingRegistrantCreate201ApplicationJSON withTopic(String topic) {
        this.topic = topic;
        return this;
    }
    
}
