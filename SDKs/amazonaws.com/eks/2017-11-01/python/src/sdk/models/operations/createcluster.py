"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import controlplaneplacementrequest as shared_controlplaneplacementrequest
from ..shared import createclusterresponse as shared_createclusterresponse
from ..shared import encryptionconfig as shared_encryptionconfig
from ..shared import ipfamily_enum as shared_ipfamily_enum
from ..shared import logsetup as shared_logsetup
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Any, Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateClusterRequestBodyKubernetesNetworkConfig:
    r"""The Kubernetes network configuration for the cluster."""
    
    ip_family: Optional[shared_ipfamily_enum.IPFamilyEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ipFamily'), 'exclude': lambda f: f is None }})  
    service_ipv4_cidr: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('serviceIpv4Cidr'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateClusterRequestBodyLogging:
    r"""An object representing the logging configuration for resources in your cluster."""
    
    cluster_logging: Optional[list[shared_logsetup.LogSetup]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('clusterLogging'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateClusterRequestBodyOutpostConfig:
    r"""The configuration of your local Amazon EKS cluster on an Amazon Web Services Outpost. Before creating a cluster on an Outpost, review <a href=\\"https://docs.aws.amazon.com/eks/latest/userguide/eks-outposts-local-cluster-create.html\\">Creating a local cluster on an Outpost</a> in the <i>Amazon EKS User Guide</i>. This API isn't available for Amazon EKS clusters on the Amazon Web Services cloud."""
    
    control_plane_instance_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('controlPlaneInstanceType'), 'exclude': lambda f: f is None }})  
    control_plane_placement: Optional[shared_controlplaneplacementrequest.ControlPlanePlacementRequest] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('controlPlanePlacement'), 'exclude': lambda f: f is None }})  
    outpost_arns: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('outpostArns'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateClusterRequestBodyResourcesVpcConfig:
    r"""An object representing the VPC configuration to use for an Amazon EKS cluster."""
    
    endpoint_private_access: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('endpointPrivateAccess'), 'exclude': lambda f: f is None }})  
    endpoint_public_access: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('endpointPublicAccess'), 'exclude': lambda f: f is None }})  
    public_access_cidrs: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('publicAccessCidrs'), 'exclude': lambda f: f is None }})  
    security_group_ids: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('securityGroupIds'), 'exclude': lambda f: f is None }})  
    subnet_ids: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('subnetIds'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateClusterRequestBody:
    
    name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name') }})
    r"""The unique name to give to your cluster."""  
    resources_vpc_config: CreateClusterRequestBodyResourcesVpcConfig = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('resourcesVpcConfig') }})
    r"""An object representing the VPC configuration to use for an Amazon EKS cluster."""  
    role_arn: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('roleArn') }})
    r"""The Amazon Resource Name (ARN) of the IAM role that provides permissions for the Kubernetes control plane to make calls to Amazon Web Services API operations on your behalf. For more information, see <a href=\\"https://docs.aws.amazon.com/eks/latest/userguide/service_IAM_role.html\\">Amazon EKS Service IAM Role</a> in the <i> <i>Amazon EKS User Guide</i> </i>."""  
    client_request_token: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('clientRequestToken'), 'exclude': lambda f: f is None }})
    r"""Unique, case-sensitive identifier that you provide to ensure the idempotency of the request."""  
    encryption_config: Optional[list[shared_encryptionconfig.EncryptionConfig]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('encryptionConfig'), 'exclude': lambda f: f is None }})
    r"""The encryption configuration for the cluster."""  
    kubernetes_network_config: Optional[CreateClusterRequestBodyKubernetesNetworkConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('kubernetesNetworkConfig'), 'exclude': lambda f: f is None }})
    r"""The Kubernetes network configuration for the cluster."""  
    logging: Optional[CreateClusterRequestBodyLogging] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('logging'), 'exclude': lambda f: f is None }})
    r"""An object representing the logging configuration for resources in your cluster."""  
    outpost_config: Optional[CreateClusterRequestBodyOutpostConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('outpostConfig'), 'exclude': lambda f: f is None }})
    r"""The configuration of your local Amazon EKS cluster on an Amazon Web Services Outpost. Before creating a cluster on an Outpost, review <a href=\\"https://docs.aws.amazon.com/eks/latest/userguide/eks-outposts-local-cluster-create.html\\">Creating a local cluster on an Outpost</a> in the <i>Amazon EKS User Guide</i>. This API isn't available for Amazon EKS clusters on the Amazon Web Services cloud."""  
    tags: Optional[dict[str, str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tags'), 'exclude': lambda f: f is None }})
    r"""The metadata to apply to the cluster to assist with categorization and organization. Each tag consists of a key and an optional value. You define both."""  
    version: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('version'), 'exclude': lambda f: f is None }})
    r"""<p>The desired Kubernetes version for your cluster. If you don't specify a value here, the default version available in Amazon EKS is used.</p> <note> <p>The default version might not be the latest version available.</p> </note>"""  
    

@dataclasses.dataclass
class CreateClusterRequest:
    
    request_body: CreateClusterRequestBody = dataclasses.field(metadata={'request': { 'media_type': 'application/json' }})  
    x_amz_algorithm: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Algorithm', 'style': 'simple', 'explode': False }})  
    x_amz_content_sha256: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Content-Sha256', 'style': 'simple', 'explode': False }})  
    x_amz_credential: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Credential', 'style': 'simple', 'explode': False }})  
    x_amz_date: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Date', 'style': 'simple', 'explode': False }})  
    x_amz_security_token: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Security-Token', 'style': 'simple', 'explode': False }})  
    x_amz_signature: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Signature', 'style': 'simple', 'explode': False }})  
    x_amz_signed_headers: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-SignedHeaders', 'style': 'simple', 'explode': False }})  
    

@dataclasses.dataclass
class CreateClusterResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    client_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ClientException"""  
    create_cluster_response: Optional[shared_createclusterresponse.CreateClusterResponse] = dataclasses.field(default=None)
    r"""Success"""  
    invalid_parameter_exception: Optional[Any] = dataclasses.field(default=None)
    r"""InvalidParameterException"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    resource_in_use_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ResourceInUseException"""  
    resource_limit_exceeded_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ResourceLimitExceededException"""  
    server_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ServerException"""  
    service_unavailable_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ServiceUnavailableException"""  
    unsupported_availability_zone_exception: Optional[Any] = dataclasses.field(default=None)
    r"""UnsupportedAvailabilityZoneException"""  
    