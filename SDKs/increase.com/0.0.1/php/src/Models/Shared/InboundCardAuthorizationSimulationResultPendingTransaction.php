<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Shared;


/**
 * InboundCardAuthorizationSimulationResultPendingTransaction - If the authorization attempt succeeds, this will contain the resulting Pending Transaction object. The Pending Transaction's `source` will be of `category: card_authorization`.
 * 
 * @package OpenAPI\OpenAPI\Models\Shared
 * @access public
 */
class InboundCardAuthorizationSimulationResultPendingTransaction
{
    /**
     * The identifier for the account this Pending Transaction belongs to.
     * 
     * @var string $accountId
     */
	#[\JMS\Serializer\Annotation\SerializedName('account_id')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $accountId;
    
    /**
     * The Pending Transaction amount in the minor unit of its currency. For dollars, for example, this is cents.
     * 
     * @var int $amount
     */
	#[\JMS\Serializer\Annotation\SerializedName('amount')]
    #[\JMS\Serializer\Annotation\Type('int')]
    public int $amount;
    
    /**
     * The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date on which the Pending Transaction occured.
     * 
     * @var \DateTime $createdAt
     */
	#[\JMS\Serializer\Annotation\SerializedName('created_at')]
    #[\JMS\Serializer\Annotation\Type("DateTime<'Y-m-d\TH:i:s.up'>")]
    public \DateTime $createdAt;
    
    /**
     * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the Pending Transaction's currency. This will match the currency on the Pending Transcation's Account.
     * 
     * @var \OpenAPI\OpenAPI\Models\Shared\InboundCardAuthorizationSimulationResultPendingTransactionCurrencyEnum $currency
     */
	#[\JMS\Serializer\Annotation\SerializedName('currency')]
    #[\JMS\Serializer\Annotation\Type('enum<OpenAPI\OpenAPI\Models\Shared\InboundCardAuthorizationSimulationResultPendingTransactionCurrencyEnum>')]
    public InboundCardAuthorizationSimulationResultPendingTransactionCurrencyEnum $currency;
    
    /**
     * For a Pending Transaction related to a transfer, this is the description you provide. For a Pending Transaction related to a payment, this is the description the vendor provides.
     * 
     * @var string $description
     */
	#[\JMS\Serializer\Annotation\SerializedName('description')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $description;
    
    /**
     * The Pending Transaction identifier.
     * 
     * @var string $id
     */
	#[\JMS\Serializer\Annotation\SerializedName('id')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $id;
    
    /**
     * The identifier for the route this Pending Transaction came through. Routes are things like cards and ACH details.
     * 
     * @var string $routeId
     */
	#[\JMS\Serializer\Annotation\SerializedName('route_id')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $routeId;
    
    /**
     * The type of the route this Pending Transaction came through.
     * 
     * @var string $routeType
     */
	#[\JMS\Serializer\Annotation\SerializedName('route_type')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $routeType;
    
    /**
     * This is an object giving more details on the network-level event that caused the Pending Transaction. For example, for a card transaction this lists the merchant's industry and location.
     * 
     * @var \OpenAPI\OpenAPI\Models\Shared\InboundCardAuthorizationSimulationResultPendingTransactionPendingTransactionSource $source
     */
	#[\JMS\Serializer\Annotation\SerializedName('source')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\InboundCardAuthorizationSimulationResultPendingTransactionPendingTransactionSource')]
    public InboundCardAuthorizationSimulationResultPendingTransactionPendingTransactionSource $source;
    
    /**
     * Whether the Pending Transaction has been confirmed and has an associated Transaction.
     * 
     * @var \OpenAPI\OpenAPI\Models\Shared\InboundCardAuthorizationSimulationResultPendingTransactionStatusEnum $status
     */
	#[\JMS\Serializer\Annotation\SerializedName('status')]
    #[\JMS\Serializer\Annotation\Type('enum<OpenAPI\OpenAPI\Models\Shared\InboundCardAuthorizationSimulationResultPendingTransactionStatusEnum>')]
    public InboundCardAuthorizationSimulationResultPendingTransactionStatusEnum $status;
    
    /**
     * A constant representing the object's type. For this resource it will always be `pending_transaction`.
     * 
     * @var \OpenAPI\OpenAPI\Models\Shared\InboundCardAuthorizationSimulationResultPendingTransactionTypeEnum $type
     */
	#[\JMS\Serializer\Annotation\SerializedName('type')]
    #[\JMS\Serializer\Annotation\Type('enum<OpenAPI\OpenAPI\Models\Shared\InboundCardAuthorizationSimulationResultPendingTransactionTypeEnum>')]
    public InboundCardAuthorizationSimulationResultPendingTransactionTypeEnum $type;
    
	public function __construct()
	{
		$this->accountId = "";
		$this->amount = 0;
		$this->createdAt = new \DateTime();
		$this->currency = \OpenAPI\OpenAPI\Models\Shared\InboundCardAuthorizationSimulationResultPendingTransactionCurrencyEnum::CAD;
		$this->description = "";
		$this->id = "";
		$this->routeId = "";
		$this->routeType = "";
		$this->source = new \OpenAPI\OpenAPI\Models\Shared\InboundCardAuthorizationSimulationResultPendingTransactionPendingTransactionSource();
		$this->status = \OpenAPI\OpenAPI\Models\Shared\InboundCardAuthorizationSimulationResultPendingTransactionStatusEnum::PENDING;
		$this->type = \OpenAPI\OpenAPI\Models\Shared\InboundCardAuthorizationSimulationResultPendingTransactionTypeEnum::PENDING_TRANSACTION;
	}
}
