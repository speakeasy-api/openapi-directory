"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateDeviceSensorRelationshipsRequestBodyLivestreamRelatedDevices:
    
    serial: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('serial') }})
    r"""The serial of the related device"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateDeviceSensorRelationshipsRequestBodyLivestream:
    r"""A role defined between an MT sensor and an MV camera that adds the camera's livestream to the sensor's details page. Snapshots from the camera will also appear in alert notifications that the sensor triggers."""
    
    related_devices: Optional[list[UpdateDeviceSensorRelationshipsRequestBodyLivestreamRelatedDevices]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('relatedDevices'), 'exclude': lambda f: f is None }})
    r"""An array of the related devices for the role"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateDeviceSensorRelationshipsRequestBody:
    
    livestream: Optional[UpdateDeviceSensorRelationshipsRequestBodyLivestream] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('livestream'), 'exclude': lambda f: f is None }})
    r"""A role defined between an MT sensor and an MV camera that adds the camera's livestream to the sensor's details page. Snapshots from the camera will also appear in alert notifications that the sensor triggers."""  
    

@dataclasses.dataclass
class UpdateDeviceSensorRelationshipsRequest:
    
    serial: str = dataclasses.field(metadata={'path_param': { 'field_name': 'serial', 'style': 'simple', 'explode': False }})  
    request_body: Optional[UpdateDeviceSensorRelationshipsRequestBody] = dataclasses.field(default=None, metadata={'request': { 'media_type': 'application/json' }})  
    
class UpdateDeviceSensorRelationships200ApplicationJSONLivestreamRelatedDevicesProductTypeEnum(str, Enum):
    r"""The product type of the related device"""
    CAMERA = 'camera'
    SENSOR = 'sensor'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateDeviceSensorRelationships200ApplicationJSONLivestreamRelatedDevices:
    
    product_type: Optional[UpdateDeviceSensorRelationships200ApplicationJSONLivestreamRelatedDevicesProductTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('productType'), 'exclude': lambda f: f is None }})
    r"""The product type of the related device"""  
    serial: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('serial'), 'exclude': lambda f: f is None }})
    r"""The serial of the related device"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateDeviceSensorRelationships200ApplicationJSONLivestream:
    r"""A role defined between an MT sensor and an MV camera that adds the camera's livestream to the sensor's details page. Snapshots from the camera will also appear in alert notifications that the sensor triggers."""
    
    related_devices: Optional[list[UpdateDeviceSensorRelationships200ApplicationJSONLivestreamRelatedDevices]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('relatedDevices'), 'exclude': lambda f: f is None }})
    r"""An array of the related devices for the role"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateDeviceSensorRelationships200ApplicationJSON:
    r"""Successful operation"""
    
    livestream: Optional[UpdateDeviceSensorRelationships200ApplicationJSONLivestream] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('livestream'), 'exclude': lambda f: f is None }})
    r"""A role defined between an MT sensor and an MV camera that adds the camera's livestream to the sensor's details page. Snapshots from the camera will also appear in alert notifications that the sensor triggers."""  
    

@dataclasses.dataclass
class UpdateDeviceSensorRelationshipsResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    update_device_sensor_relationships_200_application_json_object: Optional[UpdateDeviceSensorRelationships200ApplicationJSON] = dataclasses.field(default=None)
    r"""Successful operation"""  
    