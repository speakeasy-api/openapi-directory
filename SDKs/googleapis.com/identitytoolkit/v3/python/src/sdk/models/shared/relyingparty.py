"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Relyingparty:
    r"""Request of getting a code for user confirmation (reset password, change email etc.)"""
    
    android_install_app: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('androidInstallApp'), 'exclude': lambda f: f is None }})
    r"""whether or not to install the android app on the device where the link is opened"""  
    android_minimum_version: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('androidMinimumVersion'), 'exclude': lambda f: f is None }})
    r"""minimum version of the app. if the version on the device is lower than this version then the user is taken to the play store to upgrade the app"""  
    android_package_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('androidPackageName'), 'exclude': lambda f: f is None }})
    r"""android package name of the android app to handle the action code"""  
    can_handle_code_in_app: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('canHandleCodeInApp'), 'exclude': lambda f: f is None }})
    r"""whether or not the app can handle the oob code without first going to web"""  
    captcha_resp: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('captchaResp'), 'exclude': lambda f: f is None }})
    r"""The recaptcha response from the user."""  
    challenge: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('challenge'), 'exclude': lambda f: f is None }})
    r"""The recaptcha challenge presented to the user."""  
    continue_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('continueUrl'), 'exclude': lambda f: f is None }})
    r"""The url to continue to the Gitkit app"""  
    email: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('email'), 'exclude': lambda f: f is None }})
    r"""The email of the user."""  
    id_token: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('idToken'), 'exclude': lambda f: f is None }})
    r"""The user's Gitkit login token for email change."""  
    i_os_app_store_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('iOSAppStoreId'), 'exclude': lambda f: f is None }})
    r"""iOS app store id to download the app if it's not already installed"""  
    i_os_bundle_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('iOSBundleId'), 'exclude': lambda f: f is None }})
    r"""the iOS bundle id of iOS app to handle the action code"""  
    kind: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('kind'), 'exclude': lambda f: f is None }})
    r"""The fixed string \\"identitytoolkit#relyingparty\\"."""  
    new_email: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('newEmail'), 'exclude': lambda f: f is None }})
    r"""The new email if the code is for email change."""  
    request_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('requestType'), 'exclude': lambda f: f is None }})
    r"""The request type."""  
    user_ip: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('userIp'), 'exclude': lambda f: f is None }})
    r"""The IP address of the user."""  
    