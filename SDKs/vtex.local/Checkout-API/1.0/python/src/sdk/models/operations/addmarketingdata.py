"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class AddMarketingDataRequestBody:
    
    coupon: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('coupon'), 'exclude': lambda f: f is None }})
    r"""Sending an existing coupon code in this field will return the corresponding discount in the purchase. Use the [cart simulation](https://developers.vtex.com/vtex-rest-api/reference/orderform#orderformsimulation) request to check which coupons might apply before placing the order."""  
    marketing_tags: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('marketingTags'), 'exclude': lambda f: f is None }})
    r"""Marketing tags."""  
    utm_campaign: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('utmCampaign'), 'exclude': lambda f: f is None }})
    r"""UTM campaign"""  
    utmi_campaign: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('utmiCampaign'), 'exclude': lambda f: f is None }})
    r"""utmi_campaign (internal utm)"""  
    utmi_page: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('utmiPage'), 'exclude': lambda f: f is None }})
    r"""utmi_page (internal utm)"""  
    utmi_part: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('utmiPart'), 'exclude': lambda f: f is None }})
    r"""utmi_part (internal utm)"""  
    utm_medium: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('utmMedium'), 'exclude': lambda f: f is None }})
    r"""UTM medium."""  
    utm_source: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('utmSource'), 'exclude': lambda f: f is None }})
    r"""UTM source."""  
    

@dataclasses.dataclass
class AddMarketingDataRequest:
    
    accept: str = dataclasses.field(metadata={'header': { 'field_name': 'Accept', 'style': 'simple', 'explode': False }})
    r"""HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand."""  
    content_type: str = dataclasses.field(metadata={'header': { 'field_name': 'Content-Type', 'style': 'simple', 'explode': False }})
    r"""Type of the content being sent."""  
    order_form_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'orderFormId', 'style': 'simple', 'explode': False }})
    r"""ID of the orderForm that will receive client profile information."""  
    request_body: AddMarketingDataRequestBody = dataclasses.field(metadata={'request': { 'media_type': 'application/json' }})  
    

@dataclasses.dataclass
class AddMarketingDataResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    