"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from marshmallow import fields
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class AirQualityPointHourlyData:
    
    aerosol_550: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('aerosol_550'), 'exclude': lambda f: f is None }})
    r"""Total aerosol optical depth at 550 nm.
    Unit: dimensionless
    """  
    air_quality: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('air_quality'), 'exclude': lambda f: f is None }})
    r"""Air quality index. The following values can appear:
    
    * 1 - Very good
    * 2 - Good
    * 3 - Medium
    * 4 - Poor
    * 5 - Very poor
    * 6 - Extremely poor
    
    Unit: index
    """  
    co_surface: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('co_surface'), 'exclude': lambda f: f is None }})
    r"""Carbon monoxide at surface level.
    Unit: µg/m3
    """  
    date_: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('date'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""Datetime in YYYY-MM-DDTHH:MM:SS format."""  
    dust_550nm: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dust_550nm'), 'exclude': lambda f: f is None }})
    r"""Dust aerosol optical depth at 550 nm.
    Unit: dimensionless
    """  
    dust_mixing_ratio_05: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dust_mixing_ratio_05'), 'exclude': lambda f: f is None }})
    r"""Dust aerosol (0.55 - 0.9 µm) mixing ratio.
    Unit: kg/kg
    """  
    no_surface: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('no_surface'), 'exclude': lambda f: f is None }})
    r"""Nitrogen monoxide at surface level.
    Unit: µg/m3
    """  
    no2_surface: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('no2_surface'), 'exclude': lambda f: f is None }})
    r"""Nitrogen dioxide at surface level.
    Unit: µg/m3
    """  
    ozone_surface: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ozone_surface'), 'exclude': lambda f: f is None }})
    r"""Ozone.
    Unit: µg/m3
    """  
    ozone_total: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ozone_total'), 'exclude': lambda f: f is None }})
    r"""Total column ozone.
    Unit: Dobson
    """  
    pm10: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('pm10'), 'exclude': lambda f: f is None }})
    r"""Particulate matter d < 10 µm (PM10).
    Unit: µg/m3
    """  
    pm25: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('pm25'), 'exclude': lambda f: f is None }})
    r"""Particulate matter d < 2.5 µm (PM2.5).
    Unit: µg/m3
    """  
    so2_surface: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('so2_surface'), 'exclude': lambda f: f is None }})
    r"""Sulphur dioxide at surface level.
    Unit: µg/m3
    """  
    