/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Ec - The password analysis, including the calculated entropy.
 */
public class Ec {
    /**
     * **The penalty applied to each character that has been found to be part of an alphabet sequence.**
     * 
     * The penalty is a float number in the range [0, 1]. Full penalty, 0; no penalty, 1.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("alphabetSequence")
    public EcAlphabetSequence[] alphabetSequence;

    public Ec withAlphabetSequence(EcAlphabetSequence[] alphabetSequence) {
        this.alphabetSequence = alphabetSequence;
        return this;
    }
    
    /**
     * **This API version number.**
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("apiVersion")
    public String apiVersion;

    public Ec withApiVersion(String apiVersion) {
        this.apiVersion = apiVersion;
        return this;
    }
    
    /**
     * **The detected keyboard, QWERTY or Dvorak.**
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("detectedKeyboard")
    public String detectedKeyboard;

    public Ec withDetectedKeyboard(String detectedKeyboard) {
        this.detectedKeyboard = detectedKeyboard;
        return this;
    }
    
    /**
     * **The ratio entropy / idealEntropy.**
     * 
     * It is a float number in the range [0, 1].
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("efficiency")
    public Double efficiency;

    public Ec withEfficiency(Double efficiency) {
        this.efficiency = efficiency;
        return this;
    }
    
    /**
     * **The entropy calculated for the input password.**
     * 
     * It is measured in bits.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("entropy")
    public Double entropy;

    public Ec withEntropy(Double entropy) {
        this.entropy = entropy;
        return this;
    }
    
    /**
     * **The distribution of the calculated entropy among the password characters.**
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("entropyDistribution")
    public EcEntropyDistribution[] entropyDistribution;

    public Ec withEntropyDistribution(EcEntropyDistribution[] entropyDistribution) {
        this.entropyDistribution = entropyDistribution;
        return this;
    }
    
    /**
     * **The Shannon entropy.**
     * 
     * The Shannon entropy is the entropy calculated if no penalizations - words, number sequence, alphabet sequence, etc - were found in the password.
     * 
     * It is measured in bits.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("idealEntropy")
    public Double idealEntropy;

    public Ec withIdealEntropy(Double idealEntropy) {
        this.idealEntropy = idealEntropy;
        return this;
    }
    
    /**
     * **The penalty applied to each character that has been found to be part of a keyboard sequence.**
     * 
     * The penalty is a float number in the range [0, 1]. Full penalty, 0; no penalty, 1.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("keyboardSequence")
    public EcKeyboardSequence[] keyboardSequence;

    public Ec withKeyboardSequence(EcKeyboardSequence[] keyboardSequence) {
        this.keyboardSequence = keyboardSequence;
        return this;
    }
    
    /**
     * The analyzed password after the l33t substitution.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("l33tPassword")
    public String l33tPassword;

    public Ec withL33tPassword(String l33tPassword) {
        this.l33tPassword = l33tPassword;
        return this;
    }
    
    /**
     * **The penalty applied to the whole password because of irregular entropy distribution.**
     * 
     * This penalty is a float number in the range [0, 1]. Full penalty, 0; no penalty, 1.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("nonUniformEntropyDistributionPenalty")
    public Double nonUniformEntropyDistributionPenalty;

    public Ec withNonUniformEntropyDistributionPenalty(Double nonUniformEntropyDistributionPenalty) {
        this.nonUniformEntropyDistributionPenalty = nonUniformEntropyDistributionPenalty;
        return this;
    }
    
    /**
     * **The penalty applied to each character that has been found to be part of a number sequence.**
     * 
     * The penalty is a float number in the range [0, 1]. Full penalty, 0; no penalty, 1.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("numberSequence")
    public EcNumberSequence[] numberSequence;

    public Ec withNumberSequence(EcNumberSequence[] numberSequence) {
        this.numberSequence = numberSequence;
        return this;
    }
    
    /**
     * The analyzed password.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("password")
    public String password;

    public Ec withPassword(String password) {
        this.password = password;
        return this;
    }
    
    /**
     * The number of characters the password has.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("passwordLength")
    public Long passwordLength;

    public Ec withPasswordLength(Long passwordLength) {
        this.passwordLength = passwordLength;
        return this;
    }
    
    /**
     * **The penalty applied to each character that has been found to be part of a word, number sequence, alphabet sequence, etc.**
     * 
     * The penalty is a float number in the range [0, 1]. Full penalty, 0; no penalty, 1.
     * 
     * Its value is equal to the value of the input parameter *penalty*.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("penalty")
    public Double penalty;

    public Ec withPenalty(Double penalty) {
        this.penalty = penalty;
        return this;
    }
    
    /**
     * **The penalty applied to each character that are repeated**
     * 
     * The penalty is a float number in the range [0, 1]. Full penalty, 0; no penalty, 1.          
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("repeatedChars")
    public EcRepeatedChars[] repeatedChars;

    public Ec withRepeatedChars(EcRepeatedChars[] repeatedChars) {
        this.repeatedChars = repeatedChars;
        return this;
    }
    
    /**
     * **The identifier of the request that corresponds to this response.**
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("requestId")
    public String requestId;

    public Ec withRequestId(String requestId) {
        this.requestId = requestId;
        return this;
    }
    
    /**
     * **The timestamp for this response.**
     * 
     * Milliseconds from the epoch of 1970-01-01T00:00:00Z.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("requestTimestamp")
    public Double requestTimestamp;

    public Ec withRequestTimestamp(Double requestTimestamp) {
        this.requestTimestamp = requestTimestamp;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("summary")
    public String[] summary;

    public Ec withSummary(String[] summary) {
        this.summary = summary;
        return this;
    }
    
    /**
     * **The total penalty applied to each character.**
     * 
     * The penalty is a float number in the range [0, 1]. Full penalty, 0; no penalty, 1.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("total")
    public EcTotal[] total;

    public Ec withTotal(EcTotal[] total) {
        this.total = total;
        return this;
    }
    
    /**
     * **The penalty applied to each character that has been found to be part of a word.**
     * 
     * The penalty is a float number in the range [0, 1]. Full penalty, 0; no penalty, 1.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("words")
    public EcWords[] words;

    public Ec withWords(EcWords[] words) {
        this.words = words;
        return this;
    }
    
    public Ec(){}
}
