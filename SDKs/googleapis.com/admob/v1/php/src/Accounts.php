<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Accounts 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * List the ad units under the specified AdMob account.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AdmobAccountsAdUnitsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AdmobAccountsAdUnitsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AdmobAccountsAdUnitsListResponse
     */
	public function admobAccountsAdUnitsList(
        \OpenAPI\OpenAPI\Models\Operations\AdmobAccountsAdUnitsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AdmobAccountsAdUnitsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AdmobAccountsAdUnitsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}/adUnits', \OpenAPI\OpenAPI\Models\Operations\AdmobAccountsAdUnitsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AdmobAccountsAdUnitsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AdmobAccountsAdUnitsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listAdUnitsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListAdUnitsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List the apps under the specified AdMob account.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AdmobAccountsAppsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AdmobAccountsAppsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AdmobAccountsAppsListResponse
     */
	public function admobAccountsAppsList(
        \OpenAPI\OpenAPI\Models\Operations\AdmobAccountsAppsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AdmobAccountsAppsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AdmobAccountsAppsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}/apps', \OpenAPI\OpenAPI\Models\Operations\AdmobAccountsAppsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AdmobAccountsAppsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AdmobAccountsAppsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listAppsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListAppsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets information about the specified AdMob publisher account.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AdmobAccountsGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AdmobAccountsGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AdmobAccountsGetResponse
     */
	public function admobAccountsGet(
        \OpenAPI\OpenAPI\Models\Operations\AdmobAccountsGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AdmobAccountsGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AdmobAccountsGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{name}', \OpenAPI\OpenAPI\Models\Operations\AdmobAccountsGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AdmobAccountsGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AdmobAccountsGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->publisherAccount = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PublisherAccount', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists the AdMob publisher account that was most recently signed in to from the AdMob UI. For more information, see https://support.google.com/admob/answer/10243672.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AdmobAccountsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AdmobAccountsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AdmobAccountsListResponse
     */
	public function admobAccountsList(
        \OpenAPI\OpenAPI\Models\Operations\AdmobAccountsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AdmobAccountsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AdmobAccountsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/accounts');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AdmobAccountsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AdmobAccountsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listPublisherAccountsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListPublisherAccountsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Generates an AdMob mediation report based on the provided report specification. Returns result of a server-side streaming RPC. The result is returned in a sequence of responses.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AdmobAccountsMediationReportGenerateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AdmobAccountsMediationReportGenerateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AdmobAccountsMediationReportGenerateResponse
     */
	public function admobAccountsMediationReportGenerate(
        \OpenAPI\OpenAPI\Models\Operations\AdmobAccountsMediationReportGenerateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AdmobAccountsMediationReportGenerateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AdmobAccountsMediationReportGenerateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}/mediationReport:generate', \OpenAPI\OpenAPI\Models\Operations\AdmobAccountsMediationReportGenerateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "generateMediationReportRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AdmobAccountsMediationReportGenerateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AdmobAccountsMediationReportGenerateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->generateMediationReportResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GenerateMediationReportResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Generates an AdMob Network report based on the provided report specification. Returns result of a server-side streaming RPC. The result is returned in a sequence of responses.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AdmobAccountsNetworkReportGenerateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AdmobAccountsNetworkReportGenerateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AdmobAccountsNetworkReportGenerateResponse
     */
	public function admobAccountsNetworkReportGenerate(
        \OpenAPI\OpenAPI\Models\Operations\AdmobAccountsNetworkReportGenerateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AdmobAccountsNetworkReportGenerateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AdmobAccountsNetworkReportGenerateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}/networkReport:generate', \OpenAPI\OpenAPI\Models\Operations\AdmobAccountsNetworkReportGenerateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "generateNetworkReportRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AdmobAccountsNetworkReportGenerateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AdmobAccountsNetworkReportGenerateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->generateNetworkReportResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GenerateNetworkReportResponse', 'json');
            }
        }

        return $response;
    }
}