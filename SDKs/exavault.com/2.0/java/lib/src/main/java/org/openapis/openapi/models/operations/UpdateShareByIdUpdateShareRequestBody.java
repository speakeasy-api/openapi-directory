/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

public class UpdateShareByIdUpdateShareRequestBody {
    /**
     * An object defining what a not-logged-in visitor can do with the share contents
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("accessMode")
    public org.openapis.openapi.models.shared.AccessMode accessMode;
    public UpdateShareByIdUpdateShareRequestBody withAccessMode(org.openapis.openapi.models.shared.AccessMode accessMode) {
        this.accessMode = accessMode;
        return this;
    }
    
    /**
     * Whether the share can be embedded in another web page.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("embed")
    public Boolean embed;
    public UpdateShareByIdUpdateShareRequestBody withEmbed(Boolean embed) {
        this.embed = embed;
        return this;
    }
    
    /**
     * New expiration date and time for the share
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("expiration")
    public OffsetDateTime expiration;
    public UpdateShareByIdUpdateShareRequestBody withExpiration(OffsetDateTime expiration) {
        this.expiration = expiration;
        return this;
    }
    
    /**
     * Whether uploads to a receive folder should be automatically placed into subfolders. See our [receive folder documentation](/docs/account/05-file-sharing/05-form-builder#advanced-form-settings)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("fileDropCreateFolders")
    public Boolean fileDropCreateFolders;
    public UpdateShareByIdUpdateShareRequestBody withFileDropCreateFolders(Boolean fileDropCreateFolders) {
        this.fileDropCreateFolders = fileDropCreateFolders;
        return this;
    }
    
    /**
     * Whether delivery receipts should be sent for this share.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("hasNotification")
    public Boolean hasNotification;
    public UpdateShareByIdUpdateShareRequestBody withHasNotification(Boolean hasNotification) {
        this.hasNotification = hasNotification;
        return this;
    }
    
    /**
     * Whether people can visit the share without following a link from an invitation email
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("isPublic")
    public Boolean isPublic;
    public UpdateShareByIdUpdateShareRequestBody withIsPublic(Boolean isPublic) {
        this.isPublic = isPublic;
        return this;
    }
    
    /**
     * Message content to use for emails inviting recipients to the share. Ignored if you have not also provided `recipients` and a `subject`
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("messageBody")
    public String messageBody;
    public UpdateShareByIdUpdateShareRequestBody withMessageBody(String messageBody) {
        this.messageBody = messageBody;
        return this;
    }
    
    /**
     * Subject to use on emails inviting recipients to the share. Ignored if you have not also provided `recipients` and a `message`
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("messageSubject")
    public String messageSubject;
    public UpdateShareByIdUpdateShareRequestBody withMessageSubject(String messageSubject) {
        this.messageSubject = messageSubject;
        return this;
    }
    
    /**
     * Name of the share.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    public String name;
    public UpdateShareByIdUpdateShareRequestBody withName(String name) {
        this.name = name;
        return this;
    }
    
    /**
     * List of email addresses to send delivery receipts to. Ignored if `hasNotification` is false. 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("notificationEmails")
    public String[] notificationEmails;
    public UpdateShareByIdUpdateShareRequestBody withNotificationEmails(String[] notificationEmails) {
        this.notificationEmails = notificationEmails;
        return this;
    }
    
    /**
     * New password for the share. To leave the password unchanged, do not send this parameter.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("password")
    public String password;
    public UpdateShareByIdUpdateShareRequestBody withPassword(String password) {
        this.password = password;
        return this;
    }
    
    /**
     * People you want to invite to the share. 
     * 
     * **Note**: unless you also set the `subject` and `message` for the new share, invitation emails will not be sent to these recipients.
     * 
     * **Note**: Recipients in this list will **REPLACE** the recipients already assigned to this share. 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("recipients")
    public UpdateShareByIdUpdateShareRequestBodyRecipients[] recipients;
    public UpdateShareByIdUpdateShareRequestBody withRecipients(UpdateShareByIdUpdateShareRequestBodyRecipients[] recipients) {
        this.recipients = recipients;
        return this;
    }
    
    /**
     * Whether visitors to the share will be required to enter their email in order to access the share.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("requireEmail")
    public Boolean requireEmail;
    public UpdateShareByIdUpdateShareRequestBody withRequireEmail(Boolean requireEmail) {
        this.requireEmail = requireEmail;
        return this;
    }
    
    /**
     * Array of resources for this share. See details on [how to specify resources](#section/Identifying-Resources) above.
     * 
     * **shared_folder** and **receive** shares must have only one `resource`, which is a directory that does not have a current share attached.
     * 
     * **send** shares may have multiple `resource` parameters. 
     * 
     * **NOTE**: Sending this parameter will **REPLACE** the existing resources with the resources included in this request.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("resources")
    public String[] resources;
    public UpdateShareByIdUpdateShareRequestBody withResources(String[] resources) {
        this.resources = resources;
        return this;
    }
    
    /**
     * New status for the share. You can set an active share to inactive by setting the status to **0**
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("status")
    public Long status;
    public UpdateShareByIdUpdateShareRequestBody withStatus(Long status) {
        this.status = status;
        return this;
    }
    
}
