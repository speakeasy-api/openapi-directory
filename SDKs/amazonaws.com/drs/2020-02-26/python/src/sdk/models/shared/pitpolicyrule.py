"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import pitpolicyruleunits_enum as shared_pitpolicyruleunits_enum
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PITPolicyRule:
    r"""A rule in the Point in Time (PIT) policy representing when to take snapshots and how long to retain them for."""
    
    interval: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('interval') }})  
    retention_duration: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('retentionDuration') }})  
    units: shared_pitpolicyruleunits_enum.PITPolicyRuleUnitsEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('units') }})  
    enabled: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('enabled'), 'exclude': lambda f: f is None }})  
    rule_id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ruleID'), 'exclude': lambda f: f is None }})  
    