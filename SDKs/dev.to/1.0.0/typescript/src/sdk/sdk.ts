/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import { Articles } from "./articles";
import { Comments } from "./comments";
import { DisplayAds } from "./displayads";
import { FollowedTags } from "./followedtags";
import { Followers } from "./followers";
import * as shared from "./models/shared";
import { Organizations } from "./organizations";
import { Pages } from "./pages";
import { PodcastEpisodes } from "./podcastepisodes";
import { ProfileImages } from "./profileimages";
import { Reactions } from "./reactions";
import { Readinglist } from "./readinglist";
import { Tags } from "./tags";
import { Users } from "./users";
import { Videos } from "./videos";
import axios, { AxiosInstance } from "axios";

/**
 * Contains the list of servers available to the SDK
 */
export const ServerList = [
  /**
   * Production server
   */
  "https://dev.to/api",
] as const;

/**
 * The available configuration options for the SDK
 */
export type SDKProps = {
  /**
   * The security details required to authenticate the SDK
   */
  security?: shared.Security;
  /**
   * Allows overriding the default axios client used by the SDK
   */
  defaultClient?: AxiosInstance;
  /**
   * Allows overriding the default server URL used by the SDK
   */
  serverURL?: string;
};

/**
 * Access Forem articles, users and other resources via API.
 *
 * @remarks
 *         For a real-world example of Forem in action, check out [DEV](https://www.dev.to).
 *         All endpoints can be accessed with the 'api-key' header and a accept header, but
 *         some of them are accessible publicly without authentication.
 *
 *         Dates and date times, unless otherwise specified, must be in
 *         the [RFC 3339](https://tools.ietf.org/html/rfc3339) format.
 */
export class SDK {
  public articles: Articles;
  public comments: Comments;
  public displayAds: DisplayAds;
  public followedTags: FollowedTags;
  public followers: Followers;
  public organizations: Organizations;
  public pages: Pages;
  public podcastEpisodes: PodcastEpisodes;
  public profileImages: ProfileImages;
  public reactions: Reactions;
  public readinglist: Readinglist;
  public tags: Tags;
  public users: Users;
  public videos: Videos;

  public _defaultClient: AxiosInstance;
  public _securityClient: AxiosInstance;
  public _serverURL: string;
  private _language = "typescript";
  private _sdkVersion = "0.0.1";
  private _genVersion = "internal";
  private _globals: any;

  constructor(props?: SDKProps) {
    this._serverURL = props?.serverURL ?? ServerList[0];

    this._defaultClient =
      props?.defaultClient ?? axios.create({ baseURL: this._serverURL });
    if (props?.security) {
      let security: shared.Security = props.security;
      if (!(props.security instanceof utils.SpeakeasyBase))
        security = new shared.Security(props.security);
      this._securityClient = utils.createSecurityClient(
        this._defaultClient,
        security
      );
    } else {
      this._securityClient = this._defaultClient;
    }

    this.articles = new Articles(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.comments = new Comments(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.displayAds = new DisplayAds(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.followedTags = new FollowedTags(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.followers = new Followers(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.organizations = new Organizations(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.pages = new Pages(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.podcastEpisodes = new PodcastEpisodes(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.profileImages = new ProfileImages(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.reactions = new Reactions(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.readinglist = new Readinglist(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.tags = new Tags(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.users = new Users(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.videos = new Videos(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );
  }
}
