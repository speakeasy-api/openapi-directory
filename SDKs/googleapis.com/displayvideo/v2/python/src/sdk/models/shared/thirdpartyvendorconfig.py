"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class ThirdPartyVendorConfigVendorEnum(str, Enum):
    r"""The third-party measurement vendor."""
    THIRD_PARTY_VENDOR_UNSPECIFIED = 'THIRD_PARTY_VENDOR_UNSPECIFIED'
    THIRD_PARTY_VENDOR_MOAT = 'THIRD_PARTY_VENDOR_MOAT'
    THIRD_PARTY_VENDOR_DOUBLE_VERIFY = 'THIRD_PARTY_VENDOR_DOUBLE_VERIFY'
    THIRD_PARTY_VENDOR_INTEGRAL_AD_SCIENCE = 'THIRD_PARTY_VENDOR_INTEGRAL_AD_SCIENCE'
    THIRD_PARTY_VENDOR_COMSCORE = 'THIRD_PARTY_VENDOR_COMSCORE'
    THIRD_PARTY_VENDOR_TELEMETRY = 'THIRD_PARTY_VENDOR_TELEMETRY'
    THIRD_PARTY_VENDOR_MEETRICS = 'THIRD_PARTY_VENDOR_MEETRICS'
    THIRD_PARTY_VENDOR_ZEFR = 'THIRD_PARTY_VENDOR_ZEFR'
    THIRD_PARTY_VENDOR_NIELSEN = 'THIRD_PARTY_VENDOR_NIELSEN'
    THIRD_PARTY_VENDOR_KANTAR = 'THIRD_PARTY_VENDOR_KANTAR'
    THIRD_PARTY_VENDOR_DYNATA = 'THIRD_PARTY_VENDOR_DYNATA'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ThirdPartyVendorConfig:
    r"""Settings that control how third-party measurement vendors are configured."""
    
    placement_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('placementId'), 'exclude': lambda f: f is None }})
    r"""The ID used by the platform of the third-party vendor to identify the line item."""  
    vendor: Optional[ThirdPartyVendorConfigVendorEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('vendor'), 'exclude': lambda f: f is None }})
    r"""The third-party measurement vendor."""  
    