"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import country_enum as shared_country_enum
from ..shared import countryiso2_enum as shared_countryiso2_enum
from ..shared import countryiso_enum as shared_countryiso_enum
from ..shared import dataset_enum as shared_dataset_enum
from ..shared import language_enum as shared_language_enum
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Any

class UsaGlobalAddressAddressSecondaryAbbreviationEnum(str, Enum):
    r"""Not available for non-US addresses"""
    UNKNOWN = ''

class UsaGlobalAddressBaseAlternateCodeEnum(str, Enum):
    r"""Not available for non-US addresses"""
    UNKNOWN = ''

class UsaGlobalAddressBuildingOrFirmNameEnum(str, Enum):
    r"""Not available for non-US addresses"""
    UNKNOWN = ''

class UsaGlobalAddressCarrierRouteIDEnum(str, Enum):
    r"""Not available for non-US addresses"""
    UNKNOWN = ''

class UsaGlobalAddressCarrierRouteRateSortationEnum(str, Enum):
    r"""Not available for non-US addresses"""
    UNKNOWN = ''

class UsaGlobalAddressCityStateMailingNameIndicatorEnum(str, Enum):
    r"""Not available for non-US addresses"""
    UNKNOWN = ''

class UsaGlobalAddressCityStateNameFacilityCodeEnum(str, Enum):
    r"""Not available for non-US addresses"""
    UNKNOWN = ''

class UsaGlobalAddressCongressionalDistrictNumberEnum(str, Enum):
    r"""Not available for non-US addresses"""
    UNKNOWN = ''

class UsaGlobalAddressCountyNumberEnum(str, Enum):
    r"""Not available for non-US addresses"""
    UNKNOWN = ''

class UsaGlobalAddressFinanceNumberEnum(str, Enum):
    r"""Not available for non-US addresses"""
    UNKNOWN = ''

class UsaGlobalAddressGovernmentBuildingIndicatorEnum(str, Enum):
    r"""Not available for non-US addresses"""
    UNKNOWN = ''

class UsaGlobalAddressLacsStatusIndicatorEnum(str, Enum):
    r"""Not available for non-US addresses"""
    UNKNOWN = ''

class UsaGlobalAddressLastLineEnum(str, Enum):
    r"""Not available for non-US addresses"""
    UNKNOWN = ''

class UsaGlobalAddressMunicipalityCityStateKeyEnum(str, Enum):
    r"""Not available for non-US addresses"""
    UNKNOWN = ''

class UsaGlobalAddressPlus4CodeEnum(str, Enum):
    r"""Not available for non-US addresses"""
    UNKNOWN = ''

class UsaGlobalAddressPreferredCityEnum(str, Enum):
    r"""Not available for non-US addresses"""
    UNKNOWN = ''

class UsaGlobalAddressPreferredLastLineCityStateKeyEnum(str, Enum):
    r"""Not available for non-US addresses"""
    UNKNOWN = ''

class UsaGlobalAddressPrimaryNumberEnum(str, Enum):
    r"""Not available for non-US addresses"""
    UNKNOWN = ''

class UsaGlobalAddressRecordTypeCodeEnum(str, Enum):
    r"""Not available for non-US addresses"""
    UNKNOWN = ''

class UsaGlobalAddressSecondaryNumberEnum(str, Enum):
    r"""Not available for non-US addresses"""
    UNKNOWN = ''

class UsaGlobalAddressStreetNameEnum(str, Enum):
    r"""Not available for non-US addresses"""
    UNKNOWN = ''

class UsaGlobalAddressStreetPostDirectionalAbbreviationEnum(str, Enum):
    r"""Not available for non-US addresses"""
    UNKNOWN = ''

class UsaGlobalAddressStreetPreDirectionalAbbreviationEnum(str, Enum):
    r"""Not available for non-US addresses"""
    UNKNOWN = ''

class UsaGlobalAddressStreetSuffixAbbreviationEnum(str, Enum):
    r"""Not available for non-US addresses"""
    UNKNOWN = ''

class UsaGlobalAddressUpdateKeyNumberEnum(str, Enum):
    r"""Not available for non-US addresses"""
    UNKNOWN = ''

class UsaGlobalAddressUrbanizationCityStateKeyEnum(str, Enum):
    r"""Not available for non-US addresses"""
    UNKNOWN = ''

class UsaGlobalAddressZipClassificationCodeEnum(str, Enum):
    r"""Not available for non-US addresses"""
    UNKNOWN = ''


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UsaGlobalAddress:
    r"""Global (non-US) Address in the US address format"""
    
    address_secondary_abbreviation: UsaGlobalAddressAddressSecondaryAbbreviationEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('address_secondary_abbreviation') }})
    r"""Not available for non-US addresses"""  
    base_alternate_code: UsaGlobalAddressBaseAlternateCodeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('base_alternate_code') }})
    r"""Not available for non-US addresses"""  
    building_or_firm_name: UsaGlobalAddressBuildingOrFirmNameEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('building_or_firm_name') }})
    r"""Not available for non-US addresses"""  
    carrier_route_id: UsaGlobalAddressCarrierRouteIDEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('carrier_route_id') }})
    r"""Not available for non-US addresses"""  
    carrier_route_rate_sortation: UsaGlobalAddressCarrierRouteRateSortationEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('carrier_route_rate_sortation') }})
    r"""Not available for non-US addresses"""  
    city: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('city') }})
    r"""City name"""  
    city_abbreviation: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('city_abbreviation') }})
    r"""City name abbreviation (if available)"""  
    city_state_mailing_name_indicator: UsaGlobalAddressCityStateMailingNameIndicatorEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('city_state_mailing_name_indicator') }})
    r"""Not available for non-US addresses"""  
    city_state_name_facility_code: UsaGlobalAddressCityStateNameFacilityCodeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('city_state_name_facility_code') }})
    r"""Not available for non-US addresses"""  
    congressional_district_number: UsaGlobalAddressCongressionalDistrictNumberEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('congressional_district_number') }})
    r"""Not available for non-US addresses"""  
    country: shared_country_enum.CountryEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('country') }})
    r"""Full country names (ISO 3166)"""  
    country_iso: shared_countryiso_enum.CountryISOEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('country_iso') }})
    r"""3 letter country code (ISO 3166-1)"""  
    country_iso_2: shared_countryiso2_enum.CountryIso2Enum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('country_iso_2') }})
    r"""2 letter country code (ISO 3166-1)"""  
    county: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('county') }})
    r"""County name"""  
    county_number: UsaGlobalAddressCountyNumberEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('county_number') }})
    r"""Not available for non-US addresses"""  
    dataset: shared_dataset_enum.DatasetEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dataset') }})
    r"""Indicates the provenance of an address.
    
      - `paf` (GBR) Postcode Address File
      - `mr` (GBR) Multiple Residence File
      - `nyb` (GBR) Not Yet Built File
      - `pafa` (GBR) Alias File
      - `pafw` (GBR) Welsh File
      - `ecaf` (IRL) Eircode ECAF
      - `ecad` (IRL) Eircode ECAD
      - `usps` (USA) USPS Zip+4
    """  
    finance_number: UsaGlobalAddressFinanceNumberEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('finance_number') }})
    r"""Not available for non-US addresses"""  
    government_building_indicator: UsaGlobalAddressGovernmentBuildingIndicatorEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('government_building_indicator') }})
    r"""Not available for non-US addresses"""  
    id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id') }})
    r"""Global unique internally generated identifier for an address"""  
    lacs_status_indicator: UsaGlobalAddressLacsStatusIndicatorEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lacs_status_indicator') }})
    r"""Not available for non-US addresses"""  
    language: shared_language_enum.LanguageEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('language') }})
    r"""Language represented by 2 letter ISO Code (639-1)"""  
    last_line: UsaGlobalAddressLastLineEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('last_line') }})
    r"""Not available for non-US addresses"""  
    line_1: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('line_1') }})
    r"""First line of address"""  
    line_2: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('line_2') }})
    r"""Second line of address"""  
    municipality_city_state_key: UsaGlobalAddressMunicipalityCityStateKeyEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('municipality_city_state_key') }})
    r"""Not available for non-US addresses"""  
    native: Any = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('native') }})
    r"""The native representation of a non-US address"""  
    plus_4_code: UsaGlobalAddressPlus4CodeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('plus_4_code') }})
    r"""Not available for non-US addresses"""  
    preferred_city: UsaGlobalAddressPreferredCityEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('preferred_city') }})
    r"""Not available for non-US addresses"""  
    preferred_last_line_city_state_key: UsaGlobalAddressPreferredLastLineCityStateKeyEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('preferred_last_line_city_state_key') }})
    r"""Not available for non-US addresses"""  
    primary_number: UsaGlobalAddressPrimaryNumberEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('primary_number') }})
    r"""Not available for non-US addresses"""  
    record_type_code: UsaGlobalAddressRecordTypeCodeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('record_type_code') }})
    r"""Not available for non-US addresses"""  
    secondary_number: UsaGlobalAddressSecondaryNumberEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('secondary_number') }})
    r"""Not available for non-US addresses"""  
    state: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('state') }})
    r"""State or province"""  
    state_abbreviation: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('state_abbreviation') }})
    r"""Code of state or province (if available)"""  
    street_name: UsaGlobalAddressStreetNameEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('street_name') }})
    r"""Not available for non-US addresses"""  
    street_post_directional_abbreviation: UsaGlobalAddressStreetPostDirectionalAbbreviationEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('street_post_directional_abbreviation') }})
    r"""Not available for non-US addresses"""  
    street_pre_directional_abbreviation: UsaGlobalAddressStreetPreDirectionalAbbreviationEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('street_pre_directional_abbreviation') }})
    r"""Not available for non-US addresses"""  
    street_suffix_abbreviation: UsaGlobalAddressStreetSuffixAbbreviationEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('street_suffix_abbreviation') }})
    r"""Not available for non-US addresses"""  
    update_key_number: UsaGlobalAddressUpdateKeyNumberEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('update_key_number') }})
    r"""Not available for non-US addresses"""  
    urbanization_city_state_key: UsaGlobalAddressUrbanizationCityStateKeyEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('urbanization_city_state_key') }})
    r"""Not available for non-US addresses"""  
    zip_classification_code: UsaGlobalAddressZipClassificationCodeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('zip_classification_code') }})
    r"""Not available for non-US addresses"""  
    zip_code: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('zip_code') }})
    r"""Partial postcode of address"""  
    zip_plus_4_code: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('zip_plus_4_code') }})
    r"""Full postal code of address"""  
    