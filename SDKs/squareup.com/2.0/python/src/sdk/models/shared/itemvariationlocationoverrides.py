"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import money as shared_money
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ItemVariationLocationOverrides:
    r"""Price and inventory alerting overrides for a `CatalogItemVariation` at a specific `Location`."""
    
    inventory_alert_threshold: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('inventory_alert_threshold'), 'exclude': lambda f: f is None }})
    r"""If the inventory quantity for the variation is less than or equal to this value and `inventory_alert_type`
    is `LOW_QUANTITY`, the variation displays an alert in the merchant dashboard.
    
    This value is always an integer.
    """  
    inventory_alert_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('inventory_alert_type'), 'exclude': lambda f: f is None }})
    r"""Indicates whether the `CatalogItemVariation` displays an alert when its inventory
    quantity is less than or equal to its `inventory_alert_threshold`.
    """  
    location_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('location_id'), 'exclude': lambda f: f is None }})
    r"""The ID of the `Location`. This can include locations that are deactivated."""  
    price_money: Optional[shared_money.Money] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('price_money'), 'exclude': lambda f: f is None }})
    r"""Represents an amount of money. `Money` fields can be signed or unsigned.
    Fields that do not explicitly define whether they are signed or unsigned are
    considered unsigned and can only hold positive amounts. For signed fields, the
    sign of the value indicates the purpose of the money transfer. See
    [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
    for more information.
    """  
    pricing_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('pricing_type'), 'exclude': lambda f: f is None }})
    r"""The pricing type (fixed or variable) for the `CatalogItemVariation` at the given `Location`."""  
    track_inventory: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('track_inventory'), 'exclude': lambda f: f is None }})
    r"""If `true`, inventory tracking is active for the `CatalogItemVariation` at this `Location`."""  
    