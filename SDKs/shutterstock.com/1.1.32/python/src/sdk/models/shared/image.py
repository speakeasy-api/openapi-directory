"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import category as shared_category
from ..shared import contributor as shared_contributor
from ..shared import imageassets as shared_imageassets
from ..shared import model as shared_model
from ..shared import modelrelease as shared_modelrelease
from dataclasses_json import Undefined, dataclass_json
from datetime import date
from marshmallow import fields
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ImageInsights:
    r"""AI-powered insights about how the asset will perform for the objective and audience"""
    
    labels: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('labels'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Image:
    r"""Information about an image"""
    
    contributor: shared_contributor.Contributor = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('contributor') }})
    r"""Information about a contributor"""  
    id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id') }})
    r"""Image ID"""  
    media_type: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('media_type') }})
    r"""Media type of this image, should always be \\"image\\" """  
    added_date: Optional[date] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('added_date'), 'encoder': utils.dateisoformat(True), 'decoder': utils.datefromisoformat, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""Date that the image was added by the contributor"""  
    affiliate_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('affiliate_url'), 'exclude': lambda f: f is None }})
    r"""Affiliate referral link; appears only for registered affiliate partners"""  
    aspect: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('aspect'), 'exclude': lambda f: f is None }})
    r"""Aspect ratio of the image in decimal format, such as 0.6667"""  
    assets: Optional[shared_imageassets.ImageAssets] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('assets'), 'exclude': lambda f: f is None }})
    r"""Information about the assets that are part of an image"""  
    categories: Optional[list[shared_category.Category]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('categories'), 'exclude': lambda f: f is None }})
    r"""Categories that this image is a part of"""  
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description'), 'exclude': lambda f: f is None }})
    r"""Detailed description of the image"""  
    has_model_release: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('has_model_release'), 'exclude': lambda f: f is None }})
    r"""Indicates whether there are model releases for the image"""  
    has_property_release: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('has_property_release'), 'exclude': lambda f: f is None }})
    r"""Indicates whether there are property releases for the image"""  
    image_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('image_type'), 'exclude': lambda f: f is None }})
    r"""Type of image"""  
    insights: Optional[ImageInsights] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('insights'), 'exclude': lambda f: f is None }})
    r"""AI-powered insights about how the asset will perform for the objective and audience"""  
    is_adult: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('is_adult'), 'exclude': lambda f: f is None }})
    r"""Whether or not this image contains adult content"""  
    is_editorial: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('is_editorial'), 'exclude': lambda f: f is None }})
    r"""Whether or not this image is editorial content"""  
    is_illustration: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('is_illustration'), 'exclude': lambda f: f is None }})
    r"""Whether or not this image is an illustration"""  
    keywords: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('keywords'), 'exclude': lambda f: f is None }})
    r"""Keywords associated with the content of this image"""  
    model_releases: Optional[list[shared_modelrelease.ModelRelease]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('model_releases'), 'exclude': lambda f: f is None }})
    r"""List of model releases"""  
    models: Optional[list[shared_model.Model]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('models'), 'exclude': lambda f: f is None }})
    r"""List of models"""  
    releases: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('releases'), 'exclude': lambda f: f is None }})
    r"""List of all releases of this image"""  
    url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('url'), 'exclude': lambda f: f is None }})
    r"""Link to image information page; included only for certain accounts"""  
    