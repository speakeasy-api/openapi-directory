/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { POSTJournalRunTransactionType } from "./postjournalruntransactiontype";
import { Expose, Transform, Type } from "class-transformer";

export class POSTJournalRunType extends SpeakeasyBase {
  /**
   * Name of the accounting period.
   *
   * @remarks
   *
   * This field determines the target start and end dates of the journal run.
   *
   * Required if you do not include `targetStartDate` and `targetEndDate`.
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "accountingPeriodName" })
  accountingPeriodName?: string;

  /**
   * Date of the journal entry.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "journalEntryDate" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  journalEntryDate: Date;

  /**
   * The target end date of the journal run.
   *
   * @remarks
   *
   * If you include `accountingPeriodName`, the `targetEndDate` must be empty or the same as the end date of the accounting period specified in `accountingPeriodName`.
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "targetEndDate" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  targetEndDate?: Date;

  /**
   * The target start date of the journal run.
   *
   * @remarks
   *
   * Required if you include targetEndDate.
   *
   * If you include `accountingPeriodName`, the `targetStartDate` must be empty or the same as the start date of the accounting period specified in `accountingPeriodName`.
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "targetStartDate" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  targetStartDate?: Date;

  /**
   * Transaction types included in the journal run.
   *
   * @remarks
   *
   * You can include one or more transaction types.
   *
   */
  @SpeakeasyMetadata({ elemType: POSTJournalRunTransactionType })
  @Expose({ name: "transactionTypes" })
  @Type(() => POSTJournalRunTransactionType)
  transactionTypes: POSTJournalRunTransactionType[];
}
