/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import {
  objectToClass,
  SpeakeasyBase,
  SpeakeasyMetadata,
} from "../../../internal/utils";
import { IPSet } from "./ipset";
import { PortSet } from "./portset";
import { Expose, Transform } from "class-transformer";

/**
 * Settings that are available for use in the rules in the <a>RuleGroup</a> where this is defined.
 */
export class RuleVariables extends SpeakeasyBase {
  @SpeakeasyMetadata({ elemType: IPSet })
  @Expose({ name: "IPSets" })
  @Transform(
    ({ value }) => {
      const obj: Record<string, IPSet> = {};
      for (const key in value) {
        obj[key] = objectToClass(value[key], IPSet);
      }
      return obj;
    },
    { toClassOnly: true }
  )
  ipSets?: Record<string, IPSet>;

  @SpeakeasyMetadata({ elemType: PortSet })
  @Expose({ name: "PortSets" })
  @Transform(
    ({ value }) => {
      const obj: Record<string, PortSet> = {};
      for (const key in value) {
        obj[key] = objectToClass(value[key], PortSet);
      }
      return obj;
    },
    { toClassOnly: true }
  )
  portSets?: Record<string, PortSet>;
}
