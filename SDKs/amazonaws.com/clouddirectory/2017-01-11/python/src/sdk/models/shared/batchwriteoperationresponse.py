"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import batchattachobjectresponse as shared_batchattachobjectresponse
from ..shared import batchattachtoindexresponse as shared_batchattachtoindexresponse
from ..shared import batchattachtypedlinkresponse as shared_batchattachtypedlinkresponse
from ..shared import batchcreateindexresponse as shared_batchcreateindexresponse
from ..shared import batchcreateobjectresponse as shared_batchcreateobjectresponse
from ..shared import batchdetachfromindexresponse as shared_batchdetachfromindexresponse
from ..shared import batchdetachobjectresponse as shared_batchdetachobjectresponse
from ..shared import batchupdateobjectattributesresponse as shared_batchupdateobjectattributesresponse
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Any, Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class BatchWriteOperationResponse:
    r"""Represents the output of a <code>BatchWrite</code> response operation."""
    
    add_facet_to_object: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AddFacetToObject'), 'exclude': lambda f: f is None }})  
    attach_object: Optional[shared_batchattachobjectresponse.BatchAttachObjectResponse] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AttachObject'), 'exclude': lambda f: f is None }})  
    attach_policy: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AttachPolicy'), 'exclude': lambda f: f is None }})  
    attach_to_index: Optional[shared_batchattachtoindexresponse.BatchAttachToIndexResponse] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AttachToIndex'), 'exclude': lambda f: f is None }})  
    attach_typed_link: Optional[shared_batchattachtypedlinkresponse.BatchAttachTypedLinkResponse] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AttachTypedLink'), 'exclude': lambda f: f is None }})  
    create_index: Optional[shared_batchcreateindexresponse.BatchCreateIndexResponse] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CreateIndex'), 'exclude': lambda f: f is None }})  
    create_object: Optional[shared_batchcreateobjectresponse.BatchCreateObjectResponse] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CreateObject'), 'exclude': lambda f: f is None }})  
    delete_object: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DeleteObject'), 'exclude': lambda f: f is None }})  
    detach_from_index: Optional[shared_batchdetachfromindexresponse.BatchDetachFromIndexResponse] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DetachFromIndex'), 'exclude': lambda f: f is None }})  
    detach_object: Optional[shared_batchdetachobjectresponse.BatchDetachObjectResponse] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DetachObject'), 'exclude': lambda f: f is None }})  
    detach_policy: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DetachPolicy'), 'exclude': lambda f: f is None }})  
    detach_typed_link: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DetachTypedLink'), 'exclude': lambda f: f is None }})  
    remove_facet_from_object: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('RemoveFacetFromObject'), 'exclude': lambda f: f is None }})  
    update_link_attributes: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('UpdateLinkAttributes'), 'exclude': lambda f: f is None }})  
    update_object_attributes: Optional[shared_batchupdateobjectattributesresponse.BatchUpdateObjectAttributesResponse] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('UpdateObjectAttributes'), 'exclude': lambda f: f is None }})  
    