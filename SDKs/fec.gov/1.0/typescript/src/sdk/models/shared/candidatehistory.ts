/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { Expose, Transform } from "class-transformer";

export class CandidateHistory extends SpeakeasyBase {
  /**
   * Last year a candidate was active. This field is specific to the candidate_id so if the same person runs for another office, there may be a different record for them.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "active_through" })
  activeThrough?: number;

  /**
   * City of candidate's address, as reported on their Form 2.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "address_city" })
  addressCity?: string;

  /**
   * State of candidate's address, as reported on their Form 2.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "address_state" })
  addressState?: string;

  /**
   * Street of candidate's address, as reported on their Form 2.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "address_street_1" })
  addressStreet1?: string;

  /**
   * Additional street information of candidate's address, as reported on their Form 2.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "address_street_2" })
  addressStreet2?: string;

  /**
   * Zip code of candidate's address, as reported on their Form 2.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "address_zip" })
  addressZip?: string;

  /**
   * The last year of the cycle for this election.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "candidate_election_year" })
  candidateElectionYear?: number;

  /**
   *
   * @remarks
   * A unique identifier assigned to each candidate registered with the FEC.
   * If a person runs for several offices, that person will have separate candidate IDs for each office.
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "candidate_id" })
  candidateId: string;

  /**
   *
   * @remarks
   * True indicates that a candidate is inactive.
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "candidate_inactive" })
  candidateInactive?: boolean;

  /**
   * One-letter code explaining if the candidate is:
   *
   * @remarks
   *         - C present candidate
   *         - F future candidate
   *         - N not yet a candidate
   *         - P prior candidate
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "candidate_status" })
  candidateStatus?: string;

  /**
   *
   * @remarks
   * Two-year election cycle in which a candidate runs for office.
   * Calculated from Form 2. The cycle begins with
   * an odd year and is named for its ending, even year. This cycle follows
   * the traditional house election cycle and subdivides the presidential
   * and Senate elections into comparable two-year blocks. To retrieve data for
   * the entire four years of a presidential term or six years of a senatorial term,
   * you will need the `election_full` flag.
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "cycles" })
  cycles?: number[];

  /**
   * Two-digit US House distirict of the office the candidate is running for. Presidential, Senate and House at-large candidates will have District 00.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "district" })
  district?: string;

  /**
   * One-letter code explaining if the candidate is:
   *
   * @remarks
   *         - C present candidate
   *         - F future candidate
   *         - N not yet a candidate
   *         - P prior candidate
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "district_number" })
  districtNumber?: number;

  /**
   * Two-digit US House distirict of the office the candidate is running for. Presidential, Senate and House at-large candidates will have District 00.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "election_districts" })
  electionDistricts?: string[];

  /**
   * Years in which a candidate ran for office.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "election_years" })
  electionYears?: number[];

  /**
   * FEC cycles are included in candidate election years.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "fec_cycles_in_election" })
  fecCyclesInElection?: number[];

  /**
   * The day the FEC received the candidate's first filing. This is a F2 candidate registration.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "first_file_date" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  firstFileDate?: Date;

  @SpeakeasyMetadata()
  @Expose({ name: "flags" })
  flags?: string;

  /**
   * One-letter code ('I', 'C', 'O') explaining if the candidate is an incumbent, a challenger, or if the seat is open.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "incumbent_challenge" })
  incumbentChallenge?: string;

  /**
   * Explains if the candidate is an incumbent, a challenger, or if the seat is open.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "incumbent_challenge_full" })
  incumbentChallengeFull?: string;

  /**
   * The day the FEC received the candidate's most recent Form 2
   */
  @SpeakeasyMetadata()
  @Expose({ name: "last_f2_date" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  lastF2Date?: Date;

  /**
   * The day the FEC received the candidate's most recent filing
   */
  @SpeakeasyMetadata()
  @Expose({ name: "last_file_date" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  lastFileDate?: Date;

  /**
   * Date the information was loaded into the FEC systems. This can be affected by reseting systems and other factors, refer to receipt_date for the day that the FEC received the paper or electronic document. Keep in mind that paper filings take more time to process and there can be a lag between load_date and receipt_date. This field can be helpful to identify paper records that have been processed recently.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "load_date" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  loadDate?: Date;

  /**
   * Name of candidate running for office
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name?: string;

  /**
   * Federal office candidate runs for: H, S or P
   */
  @SpeakeasyMetadata()
  @Expose({ name: "office" })
  office?: string;

  /**
   * Federal office candidate runs for: House, Senate or presidential
   */
  @SpeakeasyMetadata()
  @Expose({ name: "office_full" })
  officeFull?: string;

  /**
   * Three-letter code for the party affiliated with a candidate or committee. For example, DEM for Democratic Party and REP for Republican Party.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "party" })
  party?: string;

  /**
   * Party affiliated with a candidate or committee
   */
  @SpeakeasyMetadata()
  @Expose({ name: "party_full" })
  partyFull?: string;

  /**
   * Rounded election years in which a candidate ran for office
   */
  @SpeakeasyMetadata()
  @Expose({ name: "rounded_election_years" })
  roundedElectionYears?: number[];

  /**
   * US state or territory where a candidate runs for office
   */
  @SpeakeasyMetadata()
  @Expose({ name: "state" })
  state?: string;

  /**
   *
   * @remarks
   * Two-year election cycle in which a candidate runs for office.
   * Calculated from Form 2. The cycle begins with
   * an odd year and is named for its ending, even year. This cycle follows
   * the traditional house election cycle and subdivides the presidential
   * and Senate elections into comparable two-year blocks. To retrieve data for
   * the entire four years of a presidential term or six years of a senatorial term,
   * you will need the `election_full` flag.
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "two_year_period" })
  twoYearPeriod: number;
}
