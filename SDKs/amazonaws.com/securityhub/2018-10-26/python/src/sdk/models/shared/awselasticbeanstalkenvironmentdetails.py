"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import awselasticbeanstalkenvironmentenvironmentlink as shared_awselasticbeanstalkenvironmentenvironmentlink
from ..shared import awselasticbeanstalkenvironmentoptionsetting as shared_awselasticbeanstalkenvironmentoptionsetting
from ..shared import awselasticbeanstalkenvironmenttier as shared_awselasticbeanstalkenvironmenttier
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class AwsElasticBeanstalkEnvironmentDetails:
    r"""Contains details about an Elastic Beanstalk environment."""
    
    application_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ApplicationName'), 'exclude': lambda f: f is None }})  
    cname: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Cname'), 'exclude': lambda f: f is None }})  
    date_created: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DateCreated'), 'exclude': lambda f: f is None }})  
    date_updated: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DateUpdated'), 'exclude': lambda f: f is None }})  
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Description'), 'exclude': lambda f: f is None }})  
    endpoint_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('EndpointUrl'), 'exclude': lambda f: f is None }})  
    environment_arn: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('EnvironmentArn'), 'exclude': lambda f: f is None }})  
    environment_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('EnvironmentId'), 'exclude': lambda f: f is None }})  
    environment_links: Optional[list[shared_awselasticbeanstalkenvironmentenvironmentlink.AwsElasticBeanstalkEnvironmentEnvironmentLink]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('EnvironmentLinks'), 'exclude': lambda f: f is None }})  
    environment_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('EnvironmentName'), 'exclude': lambda f: f is None }})  
    option_settings: Optional[list[shared_awselasticbeanstalkenvironmentoptionsetting.AwsElasticBeanstalkEnvironmentOptionSetting]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('OptionSettings'), 'exclude': lambda f: f is None }})  
    platform_arn: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PlatformArn'), 'exclude': lambda f: f is None }})  
    solution_stack_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SolutionStackName'), 'exclude': lambda f: f is None }})  
    status: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Status'), 'exclude': lambda f: f is None }})  
    tier: Optional[shared_awselasticbeanstalkenvironmenttier.AwsElasticBeanstalkEnvironmentTier] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Tier'), 'exclude': lambda f: f is None }})  
    version_label: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('VersionLabel'), 'exclude': lambda f: f is None }})  
    