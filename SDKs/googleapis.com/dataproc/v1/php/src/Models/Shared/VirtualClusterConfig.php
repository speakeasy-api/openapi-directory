<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Shared;


/**
 * VirtualClusterConfig - The Dataproc cluster config for a cluster that does not directly control the underlying compute resources, such as a Dataproc-on-GKE cluster (https://cloud.google.com/dataproc/docs/guides/dpgke/dataproc-gke-overview).
 * 
 * @package OpenAPI\OpenAPI\Models\Shared
 * @access public
 */
class VirtualClusterConfig
{
    /**
     * Auxiliary services configuration for a Cluster.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\AuxiliaryServicesConfig $auxiliaryServicesConfig
     */
	#[\JMS\Serializer\Annotation\SerializedName('auxiliaryServicesConfig')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\AuxiliaryServicesConfig')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?AuxiliaryServicesConfig $auxiliaryServicesConfig = null;
    
    /**
     * The configuration for running the Dataproc cluster on Kubernetes.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\KubernetesClusterConfig $kubernetesClusterConfig
     */
	#[\JMS\Serializer\Annotation\SerializedName('kubernetesClusterConfig')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\KubernetesClusterConfig')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?KubernetesClusterConfig $kubernetesClusterConfig = null;
    
    /**
     * Optional. A Cloud Storage bucket used to stage job dependencies, config files, and job driver console output. If you do not specify a staging bucket, Cloud Dataproc will determine a Cloud Storage location (US, ASIA, or EU) for your cluster's staging bucket according to the Compute Engine zone where your cluster is deployed, and then create and manage this project-level, per-location bucket (see Dataproc staging and temp buckets (https://cloud.google.com/dataproc/docs/concepts/configuring-clusters/staging-bucket)). This field requires a Cloud Storage bucket name, not a gs://... URI to a Cloud Storage bucket.
     * 
     * @var ?string $stagingBucket
     */
	#[\JMS\Serializer\Annotation\SerializedName('stagingBucket')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $stagingBucket = null;
    
	public function __construct()
	{
		$this->auxiliaryServicesConfig = null;
		$this->kubernetesClusterConfig = null;
		$this->stagingBucket = null;
	}
}
