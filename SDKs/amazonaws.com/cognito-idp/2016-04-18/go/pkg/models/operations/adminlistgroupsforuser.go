// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type AdminListGroupsForUserQueryParams struct {
	// Pagination limit
	Limit *string `queryParam:"style=form,explode=true,name=Limit"`
	// Pagination token
	NextToken *string `queryParam:"style=form,explode=true,name=NextToken"`
}

// AdminListGroupsForUserXAmzTargetEnum
type AdminListGroupsForUserXAmzTargetEnum string

const (
	AdminListGroupsForUserXAmzTargetEnumAwsCognitoIdentityProviderServiceAdminListGroupsForUser AdminListGroupsForUserXAmzTargetEnum = "AWSCognitoIdentityProviderService.AdminListGroupsForUser"
)

func (e *AdminListGroupsForUserXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "AWSCognitoIdentityProviderService.AdminListGroupsForUser":
		*e = AdminListGroupsForUserXAmzTargetEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for AdminListGroupsForUserXAmzTargetEnum: %s", s)
	}
}

type AdminListGroupsForUserHeaders struct {
	XAmzAlgorithm     *string                              `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string                              `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string                              `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string                              `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string                              `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string                              `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string                              `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget        AdminListGroupsForUserXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type AdminListGroupsForUserRequest struct {
	QueryParams AdminListGroupsForUserQueryParams
	Headers     AdminListGroupsForUserHeaders
	Request     shared.AdminListGroupsForUserRequest `request:"mediaType=application/json"`
}

type AdminListGroupsForUserResponse struct {
	// Success
	AdminListGroupsForUserResponse *shared.AdminListGroupsForUserResponse
	ContentType                    string
	// InternalErrorException
	InternalErrorException interface{}
	// InvalidParameterException
	InvalidParameterException interface{}
	// NotAuthorizedException
	NotAuthorizedException interface{}
	StatusCode             int
	RawResponse            *http.Response
	// ResourceNotFoundException
	ResourceNotFoundException interface{}
	// TooManyRequestsException
	TooManyRequestsException interface{}
	// UserNotFoundException
	UserNotFoundException interface{}
}
