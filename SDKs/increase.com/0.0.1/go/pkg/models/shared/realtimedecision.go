// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"time"
)

// RealTimeDecisionCardAuthorizationDecisionEnum - Whether or not the authorization was approved.
type RealTimeDecisionCardAuthorizationDecisionEnum string

const (
	RealTimeDecisionCardAuthorizationDecisionEnumApprove RealTimeDecisionCardAuthorizationDecisionEnum = "approve"
	RealTimeDecisionCardAuthorizationDecisionEnumDecline RealTimeDecisionCardAuthorizationDecisionEnum = "decline"
)

func (e RealTimeDecisionCardAuthorizationDecisionEnum) ToPointer() *RealTimeDecisionCardAuthorizationDecisionEnum {
	return &e
}

func (e *RealTimeDecisionCardAuthorizationDecisionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "approve":
		fallthrough
	case "decline":
		*e = RealTimeDecisionCardAuthorizationDecisionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RealTimeDecisionCardAuthorizationDecisionEnum: %v", v)
	}
}

// RealTimeDecisionCardAuthorizationNetworkEnum - The payment network used to process this card authorization
type RealTimeDecisionCardAuthorizationNetworkEnum string

const (
	RealTimeDecisionCardAuthorizationNetworkEnumVisa RealTimeDecisionCardAuthorizationNetworkEnum = "visa"
)

func (e RealTimeDecisionCardAuthorizationNetworkEnum) ToPointer() *RealTimeDecisionCardAuthorizationNetworkEnum {
	return &e
}

func (e *RealTimeDecisionCardAuthorizationNetworkEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "visa":
		*e = RealTimeDecisionCardAuthorizationNetworkEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RealTimeDecisionCardAuthorizationNetworkEnum: %v", v)
	}
}

// RealTimeDecisionCardAuthorizationNetworkDetailsVisaElectronicCommerceIndicatorEnum - For electronic commerce transactions, this identifies the level of security used in obtaining the customer's payment credential. For mail or telephone order transactions, identifies the type of mail or telephone order.
type RealTimeDecisionCardAuthorizationNetworkDetailsVisaElectronicCommerceIndicatorEnum string

const (
	RealTimeDecisionCardAuthorizationNetworkDetailsVisaElectronicCommerceIndicatorEnumMailPhoneOrder                                          RealTimeDecisionCardAuthorizationNetworkDetailsVisaElectronicCommerceIndicatorEnum = "mail_phone_order"
	RealTimeDecisionCardAuthorizationNetworkDetailsVisaElectronicCommerceIndicatorEnumRecurring                                               RealTimeDecisionCardAuthorizationNetworkDetailsVisaElectronicCommerceIndicatorEnum = "recurring"
	RealTimeDecisionCardAuthorizationNetworkDetailsVisaElectronicCommerceIndicatorEnumInstallment                                             RealTimeDecisionCardAuthorizationNetworkDetailsVisaElectronicCommerceIndicatorEnum = "installment"
	RealTimeDecisionCardAuthorizationNetworkDetailsVisaElectronicCommerceIndicatorEnumUnknownMailPhoneOrder                                   RealTimeDecisionCardAuthorizationNetworkDetailsVisaElectronicCommerceIndicatorEnum = "unknown_mail_phone_order"
	RealTimeDecisionCardAuthorizationNetworkDetailsVisaElectronicCommerceIndicatorEnumSecureElectronicCommerce                                RealTimeDecisionCardAuthorizationNetworkDetailsVisaElectronicCommerceIndicatorEnum = "secure_electronic_commerce"
	RealTimeDecisionCardAuthorizationNetworkDetailsVisaElectronicCommerceIndicatorEnumNonAuthenticatedSecurityTransactionAt3dsCapableMerchant RealTimeDecisionCardAuthorizationNetworkDetailsVisaElectronicCommerceIndicatorEnum = "non_authenticated_security_transaction_at_3ds_capable_merchant"
	RealTimeDecisionCardAuthorizationNetworkDetailsVisaElectronicCommerceIndicatorEnumNonAuthenticatedSecurityTransaction                     RealTimeDecisionCardAuthorizationNetworkDetailsVisaElectronicCommerceIndicatorEnum = "non_authenticated_security_transaction"
	RealTimeDecisionCardAuthorizationNetworkDetailsVisaElectronicCommerceIndicatorEnumNonSecureTransaction                                    RealTimeDecisionCardAuthorizationNetworkDetailsVisaElectronicCommerceIndicatorEnum = "non_secure_transaction"
)

func (e RealTimeDecisionCardAuthorizationNetworkDetailsVisaElectronicCommerceIndicatorEnum) ToPointer() *RealTimeDecisionCardAuthorizationNetworkDetailsVisaElectronicCommerceIndicatorEnum {
	return &e
}

func (e *RealTimeDecisionCardAuthorizationNetworkDetailsVisaElectronicCommerceIndicatorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "mail_phone_order":
		fallthrough
	case "recurring":
		fallthrough
	case "installment":
		fallthrough
	case "unknown_mail_phone_order":
		fallthrough
	case "secure_electronic_commerce":
		fallthrough
	case "non_authenticated_security_transaction_at_3ds_capable_merchant":
		fallthrough
	case "non_authenticated_security_transaction":
		fallthrough
	case "non_secure_transaction":
		*e = RealTimeDecisionCardAuthorizationNetworkDetailsVisaElectronicCommerceIndicatorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RealTimeDecisionCardAuthorizationNetworkDetailsVisaElectronicCommerceIndicatorEnum: %v", v)
	}
}

// RealTimeDecisionCardAuthorizationNetworkDetailsVisaPointOfServiceEntryModeEnum - The method used to enter the cardholder's primary account number and card expiration date
type RealTimeDecisionCardAuthorizationNetworkDetailsVisaPointOfServiceEntryModeEnum string

const (
	RealTimeDecisionCardAuthorizationNetworkDetailsVisaPointOfServiceEntryModeEnumManual                     RealTimeDecisionCardAuthorizationNetworkDetailsVisaPointOfServiceEntryModeEnum = "manual"
	RealTimeDecisionCardAuthorizationNetworkDetailsVisaPointOfServiceEntryModeEnumMagneticStripeNoCvv        RealTimeDecisionCardAuthorizationNetworkDetailsVisaPointOfServiceEntryModeEnum = "magnetic_stripe_no_cvv"
	RealTimeDecisionCardAuthorizationNetworkDetailsVisaPointOfServiceEntryModeEnumOpticalCode                RealTimeDecisionCardAuthorizationNetworkDetailsVisaPointOfServiceEntryModeEnum = "optical_code"
	RealTimeDecisionCardAuthorizationNetworkDetailsVisaPointOfServiceEntryModeEnumIntegratedCircuitCard      RealTimeDecisionCardAuthorizationNetworkDetailsVisaPointOfServiceEntryModeEnum = "integrated_circuit_card"
	RealTimeDecisionCardAuthorizationNetworkDetailsVisaPointOfServiceEntryModeEnumContactless                RealTimeDecisionCardAuthorizationNetworkDetailsVisaPointOfServiceEntryModeEnum = "contactless"
	RealTimeDecisionCardAuthorizationNetworkDetailsVisaPointOfServiceEntryModeEnumCredentialOnFile           RealTimeDecisionCardAuthorizationNetworkDetailsVisaPointOfServiceEntryModeEnum = "credential_on_file"
	RealTimeDecisionCardAuthorizationNetworkDetailsVisaPointOfServiceEntryModeEnumMagneticStripe             RealTimeDecisionCardAuthorizationNetworkDetailsVisaPointOfServiceEntryModeEnum = "magnetic_stripe"
	RealTimeDecisionCardAuthorizationNetworkDetailsVisaPointOfServiceEntryModeEnumContactlessMagneticStripe  RealTimeDecisionCardAuthorizationNetworkDetailsVisaPointOfServiceEntryModeEnum = "contactless_magnetic_stripe"
	RealTimeDecisionCardAuthorizationNetworkDetailsVisaPointOfServiceEntryModeEnumIntegratedCircuitCardNoCvv RealTimeDecisionCardAuthorizationNetworkDetailsVisaPointOfServiceEntryModeEnum = "integrated_circuit_card_no_cvv"
)

func (e RealTimeDecisionCardAuthorizationNetworkDetailsVisaPointOfServiceEntryModeEnum) ToPointer() *RealTimeDecisionCardAuthorizationNetworkDetailsVisaPointOfServiceEntryModeEnum {
	return &e
}

func (e *RealTimeDecisionCardAuthorizationNetworkDetailsVisaPointOfServiceEntryModeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "manual":
		fallthrough
	case "magnetic_stripe_no_cvv":
		fallthrough
	case "optical_code":
		fallthrough
	case "integrated_circuit_card":
		fallthrough
	case "contactless":
		fallthrough
	case "credential_on_file":
		fallthrough
	case "magnetic_stripe":
		fallthrough
	case "contactless_magnetic_stripe":
		fallthrough
	case "integrated_circuit_card_no_cvv":
		*e = RealTimeDecisionCardAuthorizationNetworkDetailsVisaPointOfServiceEntryModeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RealTimeDecisionCardAuthorizationNetworkDetailsVisaPointOfServiceEntryModeEnum: %v", v)
	}
}

// RealTimeDecisionCardAuthorizationNetworkDetailsVisa - Fields specific to the `visa` network
type RealTimeDecisionCardAuthorizationNetworkDetailsVisa struct {
	// For electronic commerce transactions, this identifies the level of security used in obtaining the customer's payment credential. For mail or telephone order transactions, identifies the type of mail or telephone order.
	ElectronicCommerceIndicator RealTimeDecisionCardAuthorizationNetworkDetailsVisaElectronicCommerceIndicatorEnum `json:"electronic_commerce_indicator"`
	// The method used to enter the cardholder's primary account number and card expiration date
	PointOfServiceEntryMode RealTimeDecisionCardAuthorizationNetworkDetailsVisaPointOfServiceEntryModeEnum `json:"point_of_service_entry_mode"`
}

// RealTimeDecisionCardAuthorizationNetworkDetails - Fields specific to the `network`
type RealTimeDecisionCardAuthorizationNetworkDetails struct {
	// Fields specific to the `visa` network
	Visa RealTimeDecisionCardAuthorizationNetworkDetailsVisa `json:"visa"`
}

// RealTimeDecisionCardAuthorization - Fields related to a card authorization.
type RealTimeDecisionCardAuthorization struct {
	// The identifier of the Account the authorization will debit.
	AccountID string `json:"account_id"`
	// The identifier of the Card that is being authorized.
	CardID string `json:"card_id"`
	// Whether or not the authorization was approved.
	Decision RealTimeDecisionCardAuthorizationDecisionEnum `json:"decision"`
	// The merchant identifier (commonly abbreviated as MID) of the merchant the card is transacting with.
	MerchantAcceptorID string `json:"merchant_acceptor_id"`
	// The Merchant Category Code (commonly abbreviated as MCC) of the merchant the card is transacting with.
	MerchantCategoryCode string `json:"merchant_category_code"`
	// The city the merchant resides in.
	MerchantCity string `json:"merchant_city"`
	// The country the merchant resides in.
	MerchantCountry string `json:"merchant_country"`
	// The merchant descriptor of the merchant the card is transacting with.
	MerchantDescriptor string `json:"merchant_descriptor"`
	// The payment network used to process this card authorization
	Network RealTimeDecisionCardAuthorizationNetworkEnum `json:"network"`
	// Fields specific to the `network`
	NetworkDetails RealTimeDecisionCardAuthorizationNetworkDetails `json:"network_details"`
	// The amount of the attempted authorization in the currency the card user sees at the time of purchase, in the minor unit of that currency. For dollars, for example, this is cents.
	PresentmentAmount int64 `json:"presentment_amount"`
	// The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the currency the user sees at the time of purchase.
	PresentmentCurrency string `json:"presentment_currency"`
	// The amount of the attempted authorization in the currency it will be settled in. This currency is the same as that of the Account the card belongs to.
	SettlementAmount int64 `json:"settlement_amount"`
	// The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the currency the transaction will be settled in.
	SettlementCurrency string `json:"settlement_currency"`
}

// RealTimeDecisionCategoryEnum - The category of the Real-Time Decision.
type RealTimeDecisionCategoryEnum string

const (
	RealTimeDecisionCategoryEnumCardAuthorizationRequested           RealTimeDecisionCategoryEnum = "card_authorization_requested"
	RealTimeDecisionCategoryEnumDigitalWalletTokenRequested          RealTimeDecisionCategoryEnum = "digital_wallet_token_requested"
	RealTimeDecisionCategoryEnumDigitalWalletAuthenticationRequested RealTimeDecisionCategoryEnum = "digital_wallet_authentication_requested"
)

func (e RealTimeDecisionCategoryEnum) ToPointer() *RealTimeDecisionCategoryEnum {
	return &e
}

func (e *RealTimeDecisionCategoryEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "card_authorization_requested":
		fallthrough
	case "digital_wallet_token_requested":
		fallthrough
	case "digital_wallet_authentication_requested":
		*e = RealTimeDecisionCategoryEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RealTimeDecisionCategoryEnum: %v", v)
	}
}

// RealTimeDecisionDigitalWalletAuthenticationChannelEnum - The channel to send the card user their one-time passcode.
type RealTimeDecisionDigitalWalletAuthenticationChannelEnum string

const (
	RealTimeDecisionDigitalWalletAuthenticationChannelEnumSms   RealTimeDecisionDigitalWalletAuthenticationChannelEnum = "sms"
	RealTimeDecisionDigitalWalletAuthenticationChannelEnumEmail RealTimeDecisionDigitalWalletAuthenticationChannelEnum = "email"
)

func (e RealTimeDecisionDigitalWalletAuthenticationChannelEnum) ToPointer() *RealTimeDecisionDigitalWalletAuthenticationChannelEnum {
	return &e
}

func (e *RealTimeDecisionDigitalWalletAuthenticationChannelEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "sms":
		fallthrough
	case "email":
		*e = RealTimeDecisionDigitalWalletAuthenticationChannelEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RealTimeDecisionDigitalWalletAuthenticationChannelEnum: %v", v)
	}
}

// RealTimeDecisionDigitalWalletAuthenticationDigitalWalletEnum - The digital wallet app being used.
type RealTimeDecisionDigitalWalletAuthenticationDigitalWalletEnum string

const (
	RealTimeDecisionDigitalWalletAuthenticationDigitalWalletEnumApplePay  RealTimeDecisionDigitalWalletAuthenticationDigitalWalletEnum = "apple_pay"
	RealTimeDecisionDigitalWalletAuthenticationDigitalWalletEnumGooglePay RealTimeDecisionDigitalWalletAuthenticationDigitalWalletEnum = "google_pay"
)

func (e RealTimeDecisionDigitalWalletAuthenticationDigitalWalletEnum) ToPointer() *RealTimeDecisionDigitalWalletAuthenticationDigitalWalletEnum {
	return &e
}

func (e *RealTimeDecisionDigitalWalletAuthenticationDigitalWalletEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "apple_pay":
		fallthrough
	case "google_pay":
		*e = RealTimeDecisionDigitalWalletAuthenticationDigitalWalletEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RealTimeDecisionDigitalWalletAuthenticationDigitalWalletEnum: %v", v)
	}
}

// RealTimeDecisionDigitalWalletAuthenticationResultEnum - Whether your application successfully delivered the one-time passcode.
type RealTimeDecisionDigitalWalletAuthenticationResultEnum string

const (
	RealTimeDecisionDigitalWalletAuthenticationResultEnumSuccess RealTimeDecisionDigitalWalletAuthenticationResultEnum = "success"
	RealTimeDecisionDigitalWalletAuthenticationResultEnumFailure RealTimeDecisionDigitalWalletAuthenticationResultEnum = "failure"
)

func (e RealTimeDecisionDigitalWalletAuthenticationResultEnum) ToPointer() *RealTimeDecisionDigitalWalletAuthenticationResultEnum {
	return &e
}

func (e *RealTimeDecisionDigitalWalletAuthenticationResultEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "success":
		fallthrough
	case "failure":
		*e = RealTimeDecisionDigitalWalletAuthenticationResultEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RealTimeDecisionDigitalWalletAuthenticationResultEnum: %v", v)
	}
}

// RealTimeDecisionDigitalWalletAuthentication - Fields related to a digital wallet authentication attempt.
type RealTimeDecisionDigitalWalletAuthentication struct {
	// The identifier of the Card that is being tokenized.
	CardID string `json:"card_id"`
	// The channel to send the card user their one-time passcode.
	Channel RealTimeDecisionDigitalWalletAuthenticationChannelEnum `json:"channel"`
	// The digital wallet app being used.
	DigitalWallet RealTimeDecisionDigitalWalletAuthenticationDigitalWalletEnum `json:"digital_wallet"`
	// The email to send the one-time passcode to if `channel` is equal to `email`.
	Email string `json:"email"`
	// The one-time passcode to send the card user.
	OneTimePasscode string `json:"one_time_passcode"`
	// The phone number to send the one-time passcode to if `channel` is equal to `sms`.
	Phone string `json:"phone"`
	// Whether your application successfully delivered the one-time passcode.
	Result RealTimeDecisionDigitalWalletAuthenticationResultEnum `json:"result"`
}

// RealTimeDecisionDigitalWalletTokenDecisionEnum - Whether or not the provisioning request was approved. This will be null until the real time decision is responded to.
type RealTimeDecisionDigitalWalletTokenDecisionEnum string

const (
	RealTimeDecisionDigitalWalletTokenDecisionEnumApprove RealTimeDecisionDigitalWalletTokenDecisionEnum = "approve"
	RealTimeDecisionDigitalWalletTokenDecisionEnumDecline RealTimeDecisionDigitalWalletTokenDecisionEnum = "decline"
)

func (e RealTimeDecisionDigitalWalletTokenDecisionEnum) ToPointer() *RealTimeDecisionDigitalWalletTokenDecisionEnum {
	return &e
}

func (e *RealTimeDecisionDigitalWalletTokenDecisionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "approve":
		fallthrough
	case "decline":
		*e = RealTimeDecisionDigitalWalletTokenDecisionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RealTimeDecisionDigitalWalletTokenDecisionEnum: %v", v)
	}
}

// RealTimeDecisionDigitalWalletTokenDigitalWalletEnum - The digital wallet app being used.
type RealTimeDecisionDigitalWalletTokenDigitalWalletEnum string

const (
	RealTimeDecisionDigitalWalletTokenDigitalWalletEnumApplePay  RealTimeDecisionDigitalWalletTokenDigitalWalletEnum = "apple_pay"
	RealTimeDecisionDigitalWalletTokenDigitalWalletEnumGooglePay RealTimeDecisionDigitalWalletTokenDigitalWalletEnum = "google_pay"
)

func (e RealTimeDecisionDigitalWalletTokenDigitalWalletEnum) ToPointer() *RealTimeDecisionDigitalWalletTokenDigitalWalletEnum {
	return &e
}

func (e *RealTimeDecisionDigitalWalletTokenDigitalWalletEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "apple_pay":
		fallthrough
	case "google_pay":
		*e = RealTimeDecisionDigitalWalletTokenDigitalWalletEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RealTimeDecisionDigitalWalletTokenDigitalWalletEnum: %v", v)
	}
}

// RealTimeDecisionDigitalWalletToken - Fields related to a digital wallet token provisioning attempt.
type RealTimeDecisionDigitalWalletToken struct {
	// The identifier of the Card that is being tokenized.
	CardID string `json:"card_id"`
	// The identifier of the Card Profile that was set via the real time decision. This will be null until the real time decision is responded to or if the real time decision did not set a card profile.
	CardProfileID string `json:"card_profile_id"`
	// Whether or not the provisioning request was approved. This will be null until the real time decision is responded to.
	Decision RealTimeDecisionDigitalWalletTokenDecisionEnum `json:"decision"`
	// The digital wallet app being used.
	DigitalWallet RealTimeDecisionDigitalWalletTokenDigitalWalletEnum `json:"digital_wallet"`
}

// RealTimeDecisionStatusEnum - The status of the Real-Time Decision.
type RealTimeDecisionStatusEnum string

const (
	RealTimeDecisionStatusEnumPending   RealTimeDecisionStatusEnum = "pending"
	RealTimeDecisionStatusEnumResponded RealTimeDecisionStatusEnum = "responded"
	RealTimeDecisionStatusEnumTimedOut  RealTimeDecisionStatusEnum = "timed_out"
)

func (e RealTimeDecisionStatusEnum) ToPointer() *RealTimeDecisionStatusEnum {
	return &e
}

func (e *RealTimeDecisionStatusEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "pending":
		fallthrough
	case "responded":
		fallthrough
	case "timed_out":
		*e = RealTimeDecisionStatusEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RealTimeDecisionStatusEnum: %v", v)
	}
}

// RealTimeDecisionTypeEnum - A constant representing the object's type. For this resource it will always be `real_time_decision`.
type RealTimeDecisionTypeEnum string

const (
	RealTimeDecisionTypeEnumRealTimeDecision RealTimeDecisionTypeEnum = "real_time_decision"
)

func (e RealTimeDecisionTypeEnum) ToPointer() *RealTimeDecisionTypeEnum {
	return &e
}

func (e *RealTimeDecisionTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "real_time_decision":
		*e = RealTimeDecisionTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RealTimeDecisionTypeEnum: %v", v)
	}
}

// RealTimeDecision - Real Time Decisions are created when your application needs to take action in real-time to some event such as a card authorization. Real time decisions are currently in beta; please contact support@increase.com if you're interested in trying them out!
type RealTimeDecision struct {
	// Fields related to a card authorization.
	CardAuthorization RealTimeDecisionCardAuthorization `json:"card_authorization"`
	// The category of the Real-Time Decision.
	Category RealTimeDecisionCategoryEnum `json:"category"`
	// The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the Real-Time Decision was created.
	CreatedAt time.Time `json:"created_at"`
	// Fields related to a digital wallet authentication attempt.
	DigitalWalletAuthentication RealTimeDecisionDigitalWalletAuthentication `json:"digital_wallet_authentication"`
	// Fields related to a digital wallet token provisioning attempt.
	DigitalWalletToken RealTimeDecisionDigitalWalletToken `json:"digital_wallet_token"`
	// The Real-Time Decision identifier.
	ID string `json:"id"`
	// The status of the Real-Time Decision.
	Status RealTimeDecisionStatusEnum `json:"status"`
	// The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which your application can no longer respond to the Real-Time Decision.
	TimeoutAt time.Time `json:"timeout_at"`
	// A constant representing the object's type. For this resource it will always be `real_time_decision`.
	Type RealTimeDecisionTypeEnum `json:"type"`
}
