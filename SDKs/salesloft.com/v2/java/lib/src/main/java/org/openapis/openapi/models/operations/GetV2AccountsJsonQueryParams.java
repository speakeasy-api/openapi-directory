/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import org.openapis.openapi.utils.SpeakeasyMetadata;

public class GetV2AccountsJsonQueryParams {
    /**
     * Filters accounts by account_stage_id. Multiple account_stage_ids can be applied. An additional value of "_is_null" can be passed to filter accounts that do not have account_stage_id
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=false,name=account_stage_id")
    public Long[] accountStageId;
    public GetV2AccountsJsonQueryParams withAccountStageId(Long[] accountStageId) {
        this.accountStageId = accountStageId;
        return this;
    }
    
    /**
     * Filters accounts by account_tier_id. Multiple account tier ids can be applied
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=false,name=account_tier_id")
    public Long[] accountTierId;
    public GetV2AccountsJsonQueryParams withAccountTierId(Long[] accountTierId) {
        this.accountTierId = accountTierId;
        return this;
    }
    
    /**
     * Filters accounts by archived_at status. Returns only accounts where archived_at is not null if this field is true. Returns only accounts where archived_at is null if this field is false. Do not pass this parameter to return both archived and unarchived accounts. This filter is not applied if any value other than "true" or "false" is passed.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=archived")
    public Boolean archived;
    public GetV2AccountsJsonQueryParams withArchived(Boolean archived) {
        this.archived = archived;
        return this;
    }
    
    /**
     * Filters accounts by city by exact match. Supports partial matching
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=false,name=city")
    public String[] city;
    public GetV2AccountsJsonQueryParams withCity(String[] city) {
        this.city = city;
        return this;
    }
    
    /**
     * Filters accounts by country by exact match. Supports partial matching
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=false,name=country")
    public String[] country;
    public GetV2AccountsJsonQueryParams withCountry(String[] country) {
        this.country = country;
        return this;
    }
    
    /**
     * Equality filters that are applied to the created_at field. A single filter can be used by itself or combined with other filters to create a range.
     * 
     * ---CUSTOM---
     * {"type":"object","keys":[{"name":"gt","type":"iso8601 string","description":"Returns all matching records that are greater than the provided iso8601 timestamp. The comparison is done using microsecond precision."},{"name":"gte","type":"iso8601 string","description":"Returns all matching records that are greater than or equal to the provided iso8601 timestamp. The comparison is done using microsecond precision."},{"name":"lt","type":"iso8601 string","description":"Returns all matching records that are less than the provided iso8601 timestamp. The comparison is done using microsecond precision."},{"name":"lte","type":"iso8601 string","description":"Returns all matching records that are less than or equal to the provided iso8601 timestamp. The comparison is done using microsecond precision."}]}
     * 
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=false,name=created_at")
    public String[] createdAt;
    public GetV2AccountsJsonQueryParams withCreatedAt(String[] createdAt) {
        this.createdAt = createdAt;
        return this;
    }
    
    /**
     * Filters accounts by crm_id. Multiple crm ids can be applied
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=false,name=crm_id")
    public String[] crmId;
    public GetV2AccountsJsonQueryParams withCrmId(String[] crmId) {
        this.crmId = crmId;
        return this;
    }
    
    /**
     * Filters by accounts matching all given custom fields. The custom field names are case-sensitive, but the provided values are case-insensitive. Example: v2/accounts?custom_fields[custom_field_name]=custom_field_value
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=custom_fields")
    public java.util.Map<String, Object> customFields;
    public GetV2AccountsJsonQueryParams withCustomFields(java.util.Map<String, Object> customFields) {
        this.customFields = customFields;
        return this;
    }
    
    /**
     * Domain of the accounts to fetch. Domains are unique and lowercase
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=domain")
    public String domain;
    public GetV2AccountsJsonQueryParams withDomain(String domain) {
        this.domain = domain;
        return this;
    }
    
    /**
     * IDs of accounts to fetch. If a record can't be found, that record won't be returned and your request will be successful
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=false,name=ids")
    public Long[] ids;
    public GetV2AccountsJsonQueryParams withIds(Long[] ids) {
        this.ids = ids;
        return this;
    }
    
    /**
     * Whether to include total_pages and total_count in the metadata. Defaults to false
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=include_paging_counts")
    public Boolean includePagingCounts;
    public GetV2AccountsJsonQueryParams withIncludePagingCounts(Boolean includePagingCounts) {
        this.includePagingCounts = includePagingCounts;
        return this;
    }
    
    /**
     * Filters accounts by industry by exact match. Supports partial matching
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=false,name=industry")
    public String[] industry;
    public GetV2AccountsJsonQueryParams withIndustry(String[] industry) {
        this.industry = industry;
        return this;
    }
    
    /**
     * Equality filters that are applied to the last_contacted field. A single filter can be used by itself or combined with other filters to create a range.
     * Additional values of "_is_null" or "_is_not_null" can be passed to filter records that either have no timestamp value or any timestamp value.
     * ---CUSTOM---
     * {"type":"object","keys":[{"name":"gt","type":"iso8601 string","description":"Returns all matching records that are greater than the provided iso8601 timestamp. The comparison is done using microsecond precision."},{"name":"gte","type":"iso8601 string","description":"Returns all matching records that are greater than or equal to the provided iso8601 timestamp. The comparison is done using microsecond precision."},{"name":"lt","type":"iso8601 string","description":"Returns all matching records that are less than the provided iso8601 timestamp. The comparison is done using microsecond precision."},{"name":"lte","type":"iso8601 string","description":"Returns all matching records that are less than or equal to the provided iso8601 timestamp. The comparison is done using microsecond precision."}]}
     * 
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=last_contacted")
    public java.util.Map<String, Object> lastContacted;
    public GetV2AccountsJsonQueryParams withLastContacted(java.util.Map<String, Object> lastContacted) {
        this.lastContacted = lastContacted;
        return this;
    }
    
    /**
     * Specifies whether the max limit of 10k records should be applied to pagination counts. Affects the total_count and total_pages data
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=limit_paging_counts")
    public Boolean limitPagingCounts;
    public GetV2AccountsJsonQueryParams withLimitPagingCounts(Boolean limitPagingCounts) {
        this.limitPagingCounts = limitPagingCounts;
        return this;
    }
    
    /**
     * Filters accounts by locale. Multiple locales are allowed
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=false,name=locales")
    public String[] locales;
    public GetV2AccountsJsonQueryParams withLocales(String[] locales) {
        this.locales = locales;
        return this;
    }
    
    /**
     * Names of accounts to fetch. Name matches are exact and case sensitive. Multiple names can be fetched.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=false,name=name")
    public String[] name;
    public GetV2AccountsJsonQueryParams withName(String[] name) {
        this.name = name;
        return this;
    }
    
    /**
     * Filters accounts by owner_crm_id. Multiple owner_crm_ids can be applied. An additional value of "_is_null" can be passed to filter accounts that are unowned. A "_not_in" modifier can be used to exclude specific owner_crm_ids. Example: v2/accounts?owner_crm_id[_not_in]=id
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=false,name=owner_crm_id")
    public String[] ownerCrmId;
    public GetV2AccountsJsonQueryParams withOwnerCrmId(String[] ownerCrmId) {
        this.ownerCrmId = ownerCrmId;
        return this;
    }
    
    /**
     * Filters accounts by owner_id. Multiple owner_ids can be applied. An additional value of "_is_null" can be passed to filter accounts that are unowned
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=false,name=owner_id")
    public String[] ownerId;
    public GetV2AccountsJsonQueryParams withOwnerId(String[] ownerId) {
        this.ownerId = ownerId;
        return this;
    }
    
    /**
     * Filters accounts by whether the owner is active or not.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=owner_is_active")
    public Boolean ownerIsActive;
    public GetV2AccountsJsonQueryParams withOwnerIsActive(Boolean ownerIsActive) {
        this.ownerIsActive = ownerIsActive;
        return this;
    }
    
    /**
     * The current page to fetch results from. Defaults to 1
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=page")
    public Long page;
    public GetV2AccountsJsonQueryParams withPage(Long page) {
        this.page = page;
        return this;
    }
    
    /**
     * How many records to show per page in the range [1, 100]. Defaults to 25
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=per_page")
    public Long perPage;
    public GetV2AccountsJsonQueryParams withPerPage(Long perPage) {
        this.perPage = perPage;
        return this;
    }
    
    /**
     * Key to sort on, must be one of: created_at, updated_at, last_contacted_at, account_stage, account_stage_name, account_tier, account_tier_name, name, counts_people. Defaults to updated_at
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=sort_by")
    public String sortBy;
    public GetV2AccountsJsonQueryParams withSortBy(String sortBy) {
        this.sortBy = sortBy;
        return this;
    }
    
    /**
     * Direction to sort in, must be one of: ASC, DESC. Defaults to DESC
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=sort_direction")
    public String sortDirection;
    public GetV2AccountsJsonQueryParams withSortDirection(String sortDirection) {
        this.sortDirection = sortDirection;
        return this;
    }
    
    /**
     * Filters accounts by state by exact match. Supports partial matching
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=false,name=state")
    public String[] state;
    public GetV2AccountsJsonQueryParams withState(String[] state) {
        this.state = state;
        return this;
    }
    
    /**
     * Filters accounts by the tags applied to the account. Multiple tags can be applied
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=false,name=tag")
    public String[] tag;
    public GetV2AccountsJsonQueryParams withTag(String[] tag) {
        this.tag = tag;
        return this;
    }
    
    /**
     * Filters accounts by the tag id's applied to the account. Multiple tag id's can be applied
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=false,name=tag_id")
    public Long[] tagId;
    public GetV2AccountsJsonQueryParams withTagId(Long[] tagId) {
        this.tagId = tagId;
        return this;
    }
    
    /**
     * Equality filters that are applied to the updated_at field. A single filter can be used by itself or combined with other filters to create a range.
     * 
     * ---CUSTOM---
     * {"type":"object","keys":[{"name":"gt","type":"iso8601 string","description":"Returns all matching records that are greater than the provided iso8601 timestamp. The comparison is done using microsecond precision."},{"name":"gte","type":"iso8601 string","description":"Returns all matching records that are greater than or equal to the provided iso8601 timestamp. The comparison is done using microsecond precision."},{"name":"lt","type":"iso8601 string","description":"Returns all matching records that are less than the provided iso8601 timestamp. The comparison is done using microsecond precision."},{"name":"lte","type":"iso8601 string","description":"Returns all matching records that are less than or equal to the provided iso8601 timestamp. The comparison is done using microsecond precision."}]}
     * 
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=false,name=updated_at")
    public String[] updatedAt;
    public GetV2AccountsJsonQueryParams withUpdatedAt(String[] updatedAt) {
        this.updatedAt = updatedAt;
        return this;
    }
    
    /**
     * Filters by accounts matching all given user relationship fields, _is_null or _unmapped can be passed to filter accounts with null or unmapped user relationship values. Example: v2/accounts?user_relationships[name]=value
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=user_relationships")
    public java.util.Map<String, Object> userRelationships;
    public GetV2AccountsJsonQueryParams withUserRelationships(java.util.Map<String, Object> userRelationships) {
        this.userRelationships = userRelationships;
        return this;
    }
    
    /**
     * Filters accounts by website. Multiple websites can be applied. An additional value of "_is_null" can be passed to filter accounts that do not have a website.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=false,name=website")
    public String[] website;
    public GetV2AccountsJsonQueryParams withWebsite(String[] website) {
        this.website = website;
        return this;
    }
    
}
