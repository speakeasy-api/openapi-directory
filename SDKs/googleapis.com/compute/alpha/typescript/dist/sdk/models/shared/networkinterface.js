"use strict";
/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.NetworkInterface = exports.NetworkInterfaceStackTypeEnum = exports.NetworkInterfaceNicTypeEnum = exports.NetworkInterfaceIpv6AccessTypeEnum = void 0;
var utils_1 = require("../../../internal/utils");
var accessconfig_1 = require("./accessconfig");
var aliasiprange_1 = require("./aliasiprange");
var networkinterfacesubinterface_1 = require("./networkinterfacesubinterface");
var class_transformer_1 = require("class-transformer");
/**
 * [Output Only] One of EXTERNAL, INTERNAL to indicate whether the IP can be accessed from the Internet. This field is always inherited from its subnetwork. Valid only if stackType is IPV4_IPV6.
 */
var NetworkInterfaceIpv6AccessTypeEnum;
(function (NetworkInterfaceIpv6AccessTypeEnum) {
    NetworkInterfaceIpv6AccessTypeEnum["External"] = "EXTERNAL";
    NetworkInterfaceIpv6AccessTypeEnum["Internal"] = "INTERNAL";
})(NetworkInterfaceIpv6AccessTypeEnum = exports.NetworkInterfaceIpv6AccessTypeEnum || (exports.NetworkInterfaceIpv6AccessTypeEnum = {}));
/**
 * The type of vNIC to be used on this interface. This may be gVNIC or VirtioNet.
 */
var NetworkInterfaceNicTypeEnum;
(function (NetworkInterfaceNicTypeEnum) {
    NetworkInterfaceNicTypeEnum["Gvnic"] = "GVNIC";
    NetworkInterfaceNicTypeEnum["UnspecifiedNicType"] = "UNSPECIFIED_NIC_TYPE";
    NetworkInterfaceNicTypeEnum["VirtioNet"] = "VIRTIO_NET";
})(NetworkInterfaceNicTypeEnum = exports.NetworkInterfaceNicTypeEnum || (exports.NetworkInterfaceNicTypeEnum = {}));
/**
 * The stack type for this network interface to identify whether the IPv6 feature is enabled or not. If not specified, IPV4_ONLY will be used. This field can be both set at instance creation and update network interface operations.
 */
var NetworkInterfaceStackTypeEnum;
(function (NetworkInterfaceStackTypeEnum) {
    NetworkInterfaceStackTypeEnum["Ipv4Ipv6"] = "IPV4_IPV6";
    NetworkInterfaceStackTypeEnum["Ipv4Only"] = "IPV4_ONLY";
})(NetworkInterfaceStackTypeEnum = exports.NetworkInterfaceStackTypeEnum || (exports.NetworkInterfaceStackTypeEnum = {}));
/**
 * A network interface resource attached to an instance.
 */
var NetworkInterface = /** @class */ (function (_super) {
    __extends(NetworkInterface, _super);
    function NetworkInterface() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({ elemType: accessconfig_1.AccessConfig }),
        (0, class_transformer_1.Expose)({ name: "accessConfigs" }),
        (0, class_transformer_1.Type)(function () { return accessconfig_1.AccessConfig; }),
        __metadata("design:type", Array)
    ], NetworkInterface.prototype, "accessConfigs", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({ elemType: aliasiprange_1.AliasIpRange }),
        (0, class_transformer_1.Expose)({ name: "aliasIpRanges" }),
        (0, class_transformer_1.Type)(function () { return aliasiprange_1.AliasIpRange; }),
        __metadata("design:type", Array)
    ], NetworkInterface.prototype, "aliasIpRanges", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "fingerprint" }),
        __metadata("design:type", String)
    ], NetworkInterface.prototype, "fingerprint", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "internalIpv6PrefixLength" }),
        __metadata("design:type", Number)
    ], NetworkInterface.prototype, "internalIpv6PrefixLength", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({ elemType: accessconfig_1.AccessConfig }),
        (0, class_transformer_1.Expose)({ name: "ipv6AccessConfigs" }),
        (0, class_transformer_1.Type)(function () { return accessconfig_1.AccessConfig; }),
        __metadata("design:type", Array)
    ], NetworkInterface.prototype, "ipv6AccessConfigs", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "ipv6AccessType" }),
        __metadata("design:type", String)
    ], NetworkInterface.prototype, "ipv6AccessType", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "ipv6Address" }),
        __metadata("design:type", String)
    ], NetworkInterface.prototype, "ipv6Address", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "kind" }),
        __metadata("design:type", String)
    ], NetworkInterface.prototype, "kind", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "name" }),
        __metadata("design:type", String)
    ], NetworkInterface.prototype, "name", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "network" }),
        __metadata("design:type", String)
    ], NetworkInterface.prototype, "network", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "networkAttachment" }),
        __metadata("design:type", String)
    ], NetworkInterface.prototype, "networkAttachment", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "networkIP" }),
        __metadata("design:type", String)
    ], NetworkInterface.prototype, "networkIP", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "nicType" }),
        __metadata("design:type", String)
    ], NetworkInterface.prototype, "nicType", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "parentNicName" }),
        __metadata("design:type", String)
    ], NetworkInterface.prototype, "parentNicName", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "queueCount" }),
        __metadata("design:type", Number)
    ], NetworkInterface.prototype, "queueCount", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "stackType" }),
        __metadata("design:type", String)
    ], NetworkInterface.prototype, "stackType", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({ elemType: networkinterfacesubinterface_1.NetworkInterfaceSubInterface }),
        (0, class_transformer_1.Expose)({ name: "subinterfaces" }),
        (0, class_transformer_1.Type)(function () { return networkinterfacesubinterface_1.NetworkInterfaceSubInterface; }),
        __metadata("design:type", Array)
    ], NetworkInterface.prototype, "subinterfaces", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "subnetwork" }),
        __metadata("design:type", String)
    ], NetworkInterface.prototype, "subnetwork", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "vlan" }),
        __metadata("design:type", Number)
    ], NetworkInterface.prototype, "vlan", void 0);
    return NetworkInterface;
}(utils_1.SpeakeasyBase));
exports.NetworkInterface = NetworkInterface;
