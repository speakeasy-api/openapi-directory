// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// VideoSourceEnum - The video source.
type VideoSourceEnum string

const (
	VideoSourceEnumSourceUnspecified VideoSourceEnum = "SOURCE_UNSPECIFIED"
	VideoSourceEnumYoutube           VideoSourceEnum = "YOUTUBE"
	VideoSourceEnumDrive             VideoSourceEnum = "DRIVE"
)

func (e VideoSourceEnum) ToPointer() *VideoSourceEnum {
	return &e
}

func (e *VideoSourceEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "SOURCE_UNSPECIFIED":
		fallthrough
	case "YOUTUBE":
		fallthrough
	case "DRIVE":
		*e = VideoSourceEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for VideoSourceEnum: %v", v)
	}
}

// Video - A PageElement kind representing a video.
type Video struct {
	// The video source's unique identifier for this video.
	ID *string `json:"id,omitempty"`
	// The video source.
	Source *VideoSourceEnum `json:"source,omitempty"`
	// An URL to a video. The URL is valid as long as the source video exists and sharing settings do not change.
	URL *string `json:"url,omitempty"`
	// The properties of the Video.
	VideoProperties *VideoProperties `json:"videoProperties,omitempty"`
}
