// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type PostcodeNotFoundResponseCodeEnum string

const (
	PostcodeNotFoundResponseCodeEnumFourThousandAndForty PostcodeNotFoundResponseCodeEnum = "4040"
)

func (e *PostcodeNotFoundResponseCodeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "4040":
		*e = PostcodeNotFoundResponseCodeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PostcodeNotFoundResponseCodeEnum: %s", s)
	}
}

type PostcodeNotFoundResponseMessageEnum string

const (
	PostcodeNotFoundResponseMessageEnumPostcodeNotFound PostcodeNotFoundResponseMessageEnum = "Postcode not found"
)

func (e *PostcodeNotFoundResponseMessageEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Postcode not found":
		*e = PostcodeNotFoundResponseMessageEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PostcodeNotFoundResponseMessageEnum: %s", s)
	}
}

// PostcodeNotFoundResponse - Postcode Not Found
type PostcodeNotFoundResponse struct {
	Code    PostcodeNotFoundResponseCodeEnum    `json:"code"`
	Message PostcodeNotFoundResponseMessageEnum `json:"message"`
	// A list of alternate nearest matching postcodes you can try
	Suggestions []string `json:"suggestions"`
}
