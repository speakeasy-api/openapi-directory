<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Shared;


/**
 * Connector - Successful GET on Connector resource
 * 
 * @package OpenAPI\OpenAPI\Models\Shared
 * @access public
 */
class Connector
{
    /**
     * Authentication mechanism to use
     * 
     * @var ?string $authMechanism
     */
	#[\JMS\Serializer\Annotation\SerializedName('auth_mechanism')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $authMechanism = null;
    
    /**
     * If true, this connector is perhaps unstable :)
     * 
     * @var bool $beta
     */
	#[\JMS\Serializer\Annotation\SerializedName('beta')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    public bool $beta;
    
    /**
     * Usage of this connector is charged
     * 
     * @var bool $charged
     */
	#[\JMS\Serializer\Annotation\SerializedName('charged')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    public bool $charged;
    
    /**
     * Bank code
     * 
     * @var ?string $code
     */
	#[\JMS\Serializer\Annotation\SerializedName('code')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $code = null;
    
    /**
     * Main color of the bank or provider
     * 
     * @var ?string $color
     */
	#[\JMS\Serializer\Annotation\SerializedName('color')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $color = null;
    
    /**
     * This connector is hidden from your users
     * 
     * @var ?bool $hidden
     */
	#[\JMS\Serializer\Annotation\SerializedName('hidden')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $hidden = null;
    
    /**
     * ID of the connector
     * 
     * @var int $id
     */
	#[\JMS\Serializer\Annotation\SerializedName('id')]
    #[\JMS\Serializer\Annotation\Type('int')]
    public int $id;
    
    /**
     * How many months of history to fetch
     * 
     * @var ?int $monthsToFetch
     */
	#[\JMS\Serializer\Annotation\SerializedName('months_to_fetch')]
    #[\JMS\Serializer\Annotation\Type('int')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?int $monthsToFetch = null;
    
    /**
     * Name of the bank or provider
     * 
     * @var string $name
     */
	#[\JMS\Serializer\Annotation\SerializedName('name')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $name;
    
    /**
     * If true, new connections cannot be added with this connector
     * 
     * @var bool $restricted
     */
	#[\JMS\Serializer\Annotation\SerializedName('restricted')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    public bool $restricted;
    
    /**
     * SIRET code for Bill modules
     * 
     * @var ?string $siret
     */
	#[\JMS\Serializer\Annotation\SerializedName('siret')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $siret = null;
    
	#[\JMS\Serializer\Annotation\SerializedName('slug')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $slug = null;
    
    /**
     * How many days to wait between syncs
     * 
     * @var ?float $syncFrequency
     */
	#[\JMS\Serializer\Annotation\SerializedName('sync_frequency')]
    #[\JMS\Serializer\Annotation\Type('float')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?float $syncFrequency = null;
    
    /**
     * Unique connector identifier
     * 
     * @var string $uuid
     */
	#[\JMS\Serializer\Annotation\SerializedName('uuid')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $uuid;
    
	public function __construct()
	{
		$this->authMechanism = null;
		$this->beta = false;
		$this->charged = false;
		$this->code = null;
		$this->color = null;
		$this->hidden = null;
		$this->id = 0;
		$this->monthsToFetch = null;
		$this->name = "";
		$this->restricted = false;
		$this->siret = null;
		$this->slug = null;
		$this->syncFrequency = null;
		$this->uuid = "";
	}
}
