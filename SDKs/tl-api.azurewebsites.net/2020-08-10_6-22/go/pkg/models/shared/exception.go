// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"bytes"
	"encoding/json"
	"errors"
)

type ExceptionInnerExceptionType string

const (
	ExceptionInnerExceptionTypeException ExceptionInnerExceptionType = "Exception"
)

type ExceptionInnerException struct {
	Exception *Exception

	Type ExceptionInnerExceptionType
}

func CreateExceptionInnerExceptionException(exception Exception) ExceptionInnerException {
	typ := ExceptionInnerExceptionTypeException

	return ExceptionInnerException{
		Exception: &exception,
		Type:      typ,
	}
}

func (u *ExceptionInnerException) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	exception := new(Exception)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&exception); err == nil {
		u.Exception = exception
		u.Type = ExceptionInnerExceptionTypeException
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u ExceptionInnerException) MarshalJSON() ([]byte, error) {
	if u.Exception != nil {
		return json.Marshal(u.Exception)
	}

	return nil, nil
}

type Exception struct {
	InnerException *ExceptionInnerException `json:"InnerException,omitempty"`
	Message        *string                  `json:"Message,omitempty"`
	Source         *string                  `json:"Source,omitempty"`
	StackTrace     *string                  `json:"StackTrace,omitempty"`
}
