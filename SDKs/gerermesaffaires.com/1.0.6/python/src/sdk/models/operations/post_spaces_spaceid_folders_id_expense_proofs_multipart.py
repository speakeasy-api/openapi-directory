"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional


@dataclasses.dataclass
class PostSpacesSpaceIDFoldersIDExpenseProofsMultipartSecurity:
    
    gma_auth: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'oauth2', 'field_name': 'Authorization' }})  
    
class PostSpacesSpaceIDFoldersIDExpenseProofsMultipartFormDataAccountEnum(str, Enum):
    CAB = 'CAB'
    IKM = 'IKM'
    PRK = 'PRK'
    TXI = 'TXI'
    VOY = 'VOY'
    PTT = 'PTT'
    FHR = 'FHR'
    DIV = 'DIV'
    RES = 'RES'

class PostSpacesSpaceIDFoldersIDExpenseProofsMultipartFormDataAccountingWorkbookEnum(str, Enum):
    CUSTOMER = 'customer'
    PROVIDER = 'provider'
    BANK = 'bank'
    CASH_WOUCHER = 'cashWoucher'
    FISCAL = 'fiscal'
    INSURANCE = 'insurance'
    SOCIAL = 'social'
    OTHER = 'other'
    PERMANENT = 'permanent'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PostSpacesSpaceIDFoldersIDExpenseProofsMultipartFormDataAccounting:
    
    accounted_on: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AccountedOn'), 'exclude': lambda f: f is None }})  
    workbook: Optional[PostSpacesSpaceIDFoldersIDExpenseProofsMultipartFormDataAccountingWorkbookEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Workbook'), 'exclude': lambda f: f is None }})  
    year_month: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('YearMonth'), 'exclude': lambda f: f is None }})  
    

@dataclasses.dataclass
class PostSpacesSpaceIDFoldersIDExpenseProofsMultipartFormDataFile:
    
    content: bytes = dataclasses.field(metadata={'multipart_form': { 'content': True }})  
    file: str = dataclasses.field(metadata={'multipart_form': { 'field_name': 'File' }})  
    
class PostSpacesSpaceIDFoldersIDExpenseProofsMultipartFormDataStatusEnum(str, Enum):
    R = 'R'
    V = 'V'
    W = 'W'


@dataclasses.dataclass
class PostSpacesSpaceIDFoldersIDExpenseProofsMultipartFormData1:
    r"""Expense proof to add (either DocumentId, ExpenseDate either (File,Name,Content64Encoded,Title,ExpenseDate) is mandatory)"""
    
    file: PostSpacesSpaceIDFoldersIDExpenseProofsMultipartFormDataFile = dataclasses.field(metadata={'multipart_form': { 'file': True }})  
    title: str = dataclasses.field(metadata={'multipart_form': { 'field_name': 'Title' }})  
    account: Optional[PostSpacesSpaceIDFoldersIDExpenseProofsMultipartFormDataAccountEnum] = dataclasses.field(default=None, metadata={'multipart_form': { 'field_name': 'Account' }})  
    accounting: Optional[PostSpacesSpaceIDFoldersIDExpenseProofsMultipartFormDataAccounting] = dataclasses.field(default=None, metadata={'multipart_form': { 'field_name': 'Accounting', 'json': True }})  
    archival_date: Optional[str] = dataclasses.field(default=None, metadata={'multipart_form': { 'field_name': 'ArchivalDate' }})  
    author: Optional[str] = dataclasses.field(default=None, metadata={'multipart_form': { 'field_name': 'Author' }})  
    before_vat: Optional[float] = dataclasses.field(default=None, metadata={'multipart_form': { 'field_name': 'BeforeVAT' }})  
    code: Optional[str] = dataclasses.field(default=None, metadata={'multipart_form': { 'field_name': 'Code' }})  
    comment: Optional[str] = dataclasses.field(default=None, metadata={'multipart_form': { 'field_name': 'Comment' }})  
    date_: Optional[str] = dataclasses.field(default=None, metadata={'multipart_form': { 'field_name': 'Date' }})  
    expense_date: Optional[str] = dataclasses.field(default=None, metadata={'multipart_form': { 'field_name': 'ExpenseDate' }})  
    expense_report_id: Optional[str] = dataclasses.field(default=None, metadata={'multipart_form': { 'field_name': 'ExpenseReportId' }})  
    provider: Optional[str] = dataclasses.field(default=None, metadata={'multipart_form': { 'field_name': 'Provider' }})  
    reason: Optional[str] = dataclasses.field(default=None, metadata={'multipart_form': { 'field_name': 'Reason' }})  
    status: Optional[PostSpacesSpaceIDFoldersIDExpenseProofsMultipartFormDataStatusEnum] = dataclasses.field(default=None, metadata={'multipart_form': { 'field_name': 'Status' }})  
    vat: Optional[float] = dataclasses.field(default=None, metadata={'multipart_form': { 'field_name': 'VAT' }})  
    

@dataclasses.dataclass
class PostSpacesSpaceIDFoldersIDExpenseProofsMultipartRequest:
    
    id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'id', 'style': 'simple', 'explode': False }})
    r"""Id of the folder"""  
    request_body: PostSpacesSpaceIDFoldersIDExpenseProofsMultipartFormData1 = dataclasses.field(metadata={'request': { 'media_type': 'multipart/form-data' }})
    r"""Expense proof to add (either DocumentId, ExpenseDate either (File,Name,Content64Encoded,Title,ExpenseDate) is mandatory)"""  
    space_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'spaceId', 'style': 'simple', 'explode': False }})
    r"""Id of the space"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PostSpacesSpaceIDFoldersIDExpenseProofsMultipart201ApplicationJSON:
    r"""Id of expense proof created"""
    
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Id'), 'exclude': lambda f: f is None }})  
    

@dataclasses.dataclass
class PostSpacesSpaceIDFoldersIDExpenseProofsMultipartResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    headers: Optional[dict[str, list[str]]] = dataclasses.field(default=None)  
    post_spaces_space_id_folders_id_expense_proofs_multipart_201_application_json_object: Optional[PostSpacesSpaceIDFoldersIDExpenseProofsMultipart201ApplicationJSON] = dataclasses.field(default=None)
    r"""Id of expense proof created"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    