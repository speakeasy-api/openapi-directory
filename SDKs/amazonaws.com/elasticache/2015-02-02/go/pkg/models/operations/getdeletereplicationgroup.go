// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// GETDeleteReplicationGroupActionEnum
type GETDeleteReplicationGroupActionEnum string

const (
	GETDeleteReplicationGroupActionEnumDeleteReplicationGroup GETDeleteReplicationGroupActionEnum = "DeleteReplicationGroup"
)

func (e *GETDeleteReplicationGroupActionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "DeleteReplicationGroup":
		*e = GETDeleteReplicationGroupActionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GETDeleteReplicationGroupActionEnum: %s", s)
	}
}

// GETDeleteReplicationGroupVersionEnum
type GETDeleteReplicationGroupVersionEnum string

const (
	GETDeleteReplicationGroupVersionEnumTwoThousandAndFifteen0202 GETDeleteReplicationGroupVersionEnum = "2015-02-02"
)

func (e *GETDeleteReplicationGroupVersionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "2015-02-02":
		*e = GETDeleteReplicationGroupVersionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GETDeleteReplicationGroupVersionEnum: %s", s)
	}
}

type GETDeleteReplicationGroupQueryParams struct {
	Action GETDeleteReplicationGroupActionEnum `queryParam:"style=form,explode=true,name=Action"`
	// The name of a final node group (shard) snapshot. ElastiCache creates the snapshot from the primary node in the cluster, rather than one of the replicas; this is to ensure that it captures the freshest data. After the final snapshot is taken, the replication group is immediately deleted.
	FinalSnapshotIdentifier *string `queryParam:"style=form,explode=true,name=FinalSnapshotIdentifier"`
	// The identifier for the cluster to be deleted. This parameter is not case sensitive.
	ReplicationGroupID string `queryParam:"style=form,explode=true,name=ReplicationGroupId"`
	// If set to <code>true</code>, all of the read replicas are deleted, but the primary node is retained.
	RetainPrimaryCluster *bool                                `queryParam:"style=form,explode=true,name=RetainPrimaryCluster"`
	Version              GETDeleteReplicationGroupVersionEnum `queryParam:"style=form,explode=true,name=Version"`
}

type GETDeleteReplicationGroupHeaders struct {
	XAmzAlgorithm     *string `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
}

type GETDeleteReplicationGroupRequest struct {
	QueryParams GETDeleteReplicationGroupQueryParams
	Headers     GETDeleteReplicationGroupHeaders
}

type GETDeleteReplicationGroupResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
