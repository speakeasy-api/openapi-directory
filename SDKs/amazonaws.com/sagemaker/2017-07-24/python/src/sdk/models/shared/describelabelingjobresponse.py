"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from ..shared import humantaskconfig as shared_humantaskconfig
from ..shared import labelcounters as shared_labelcounters
from ..shared import labelingjobalgorithmsconfig as shared_labelingjobalgorithmsconfig
from ..shared import labelingjobinputconfig as shared_labelingjobinputconfig
from ..shared import labelingjoboutput as shared_labelingjoboutput
from ..shared import labelingjoboutputconfig as shared_labelingjoboutputconfig
from ..shared import labelingjobstatus_enum as shared_labelingjobstatus_enum
from ..shared import labelingjobstoppingconditions as shared_labelingjobstoppingconditions
from ..shared import tag as shared_tag
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from marshmallow import fields
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class DescribeLabelingJobResponse:
    r"""Success"""
    
    creation_time: datetime = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CreationTime'), 'encoder': utils.datetimeisoformat(False), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso') }})  
    human_task_config: shared_humantaskconfig.HumanTaskConfig = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('HumanTaskConfig') }})  
    input_config: shared_labelingjobinputconfig.LabelingJobInputConfig = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('InputConfig') }})  
    job_reference_code: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('JobReferenceCode') }})  
    label_counters: shared_labelcounters.LabelCounters = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('LabelCounters') }})  
    labeling_job_arn: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('LabelingJobArn') }})  
    labeling_job_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('LabelingJobName') }})  
    labeling_job_status: shared_labelingjobstatus_enum.LabelingJobStatusEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('LabelingJobStatus') }})  
    last_modified_time: datetime = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('LastModifiedTime'), 'encoder': utils.datetimeisoformat(False), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso') }})  
    output_config: shared_labelingjoboutputconfig.LabelingJobOutputConfig = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('OutputConfig') }})  
    role_arn: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('RoleArn') }})  
    failure_reason: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('FailureReason'), 'exclude': lambda f: f is None }})  
    label_attribute_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('LabelAttributeName'), 'exclude': lambda f: f is None }})  
    label_category_config_s3_uri: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('LabelCategoryConfigS3Uri'), 'exclude': lambda f: f is None }})  
    labeling_job_algorithms_config: Optional[shared_labelingjobalgorithmsconfig.LabelingJobAlgorithmsConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('LabelingJobAlgorithmsConfig'), 'exclude': lambda f: f is None }})  
    labeling_job_output: Optional[shared_labelingjoboutput.LabelingJobOutput] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('LabelingJobOutput'), 'exclude': lambda f: f is None }})  
    stopping_conditions: Optional[shared_labelingjobstoppingconditions.LabelingJobStoppingConditions] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('StoppingConditions'), 'exclude': lambda f: f is None }})  
    tags: Optional[list[shared_tag.Tag]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Tags'), 'exclude': lambda f: f is None }})  
    