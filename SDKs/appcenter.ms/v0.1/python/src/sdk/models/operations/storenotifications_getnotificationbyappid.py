"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional


@dataclasses.dataclass
class StoreNotificationsGetNotificationByAppIDSecurity:
    
    api_token: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'apiKey', 'sub_type': 'header', 'field_name': 'X-API-Token' }})  
    

@dataclasses.dataclass
class StoreNotificationsGetNotificationByAppIDRequest:
    
    app_name: str = dataclasses.field(metadata={'path_param': { 'field_name': 'app_name', 'style': 'simple', 'explode': False }})
    r"""The name of the application"""  
    owner_name: str = dataclasses.field(metadata={'path_param': { 'field_name': 'owner_name', 'style': 'simple', 'explode': False }})
    r"""The name of the owner"""  
    
class StoreNotificationsGetNotificationByAppIDDefaultApplicationJSONCodeEnum(str, Enum):
    BAD_REQUEST = 'BadRequest'
    CONFLICT = 'Conflict'
    NOT_ACCEPTABLE = 'NotAcceptable'
    NOT_FOUND = 'NotFound'
    INTERNAL_SERVER_ERROR = 'InternalServerError'
    UNAUTHORIZED = 'Unauthorized'
    TOO_MANY_REQUESTS = 'TooManyRequests'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class StoreNotificationsGetNotificationByAppIDDefaultApplicationJSON:
    r"""Error"""
    
    code: StoreNotificationsGetNotificationByAppIDDefaultApplicationJSONCodeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('code') }})  
    message: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('message') }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class StoreNotificationsGetNotificationByAppID200ApplicationJSON:
    r"""Success. Availability for store service status is stored in response schema."""
    
    service: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('service'), 'exclude': lambda f: f is None }})  
    status: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status'), 'exclude': lambda f: f is None }})  
    valid_until: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('valid_until'), 'exclude': lambda f: f is None }})  
    

@dataclasses.dataclass
class StoreNotificationsGetNotificationByAppIDResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    store_notifications_get_notification_by_app_id_200_application_json_object: Optional[StoreNotificationsGetNotificationByAppID200ApplicationJSON] = dataclasses.field(default=None)
    r"""Success. Availability for store service status is stored in response schema."""  
    store_notifications_get_notification_by_app_id_default_application_json_object: Optional[StoreNotificationsGetNotificationByAppIDDefaultApplicationJSON] = dataclasses.field(default=None)
    r"""Error"""  
    