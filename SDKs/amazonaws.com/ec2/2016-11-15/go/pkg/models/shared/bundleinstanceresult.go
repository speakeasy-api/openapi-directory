// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"time"
)

// BundleInstanceResultBundleTaskBundleTaskError - If the task fails, a description of the error.
type BundleInstanceResultBundleTaskBundleTaskError struct {
	Code    *string
	Message *string
}

// BundleInstanceResultBundleTaskStateEnum - The state of the task.
type BundleInstanceResultBundleTaskStateEnum string

const (
	BundleInstanceResultBundleTaskStateEnumPending            BundleInstanceResultBundleTaskStateEnum = "pending"
	BundleInstanceResultBundleTaskStateEnumWaitingForShutdown BundleInstanceResultBundleTaskStateEnum = "waiting-for-shutdown"
	BundleInstanceResultBundleTaskStateEnumBundling           BundleInstanceResultBundleTaskStateEnum = "bundling"
	BundleInstanceResultBundleTaskStateEnumStoring            BundleInstanceResultBundleTaskStateEnum = "storing"
	BundleInstanceResultBundleTaskStateEnumCancelling         BundleInstanceResultBundleTaskStateEnum = "cancelling"
	BundleInstanceResultBundleTaskStateEnumComplete           BundleInstanceResultBundleTaskStateEnum = "complete"
	BundleInstanceResultBundleTaskStateEnumFailed             BundleInstanceResultBundleTaskStateEnum = "failed"
)

func (e *BundleInstanceResultBundleTaskStateEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "pending":
		fallthrough
	case "waiting-for-shutdown":
		fallthrough
	case "bundling":
		fallthrough
	case "storing":
		fallthrough
	case "cancelling":
		fallthrough
	case "complete":
		fallthrough
	case "failed":
		*e = BundleInstanceResultBundleTaskStateEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for BundleInstanceResultBundleTaskStateEnum: %s", s)
	}
}

// BundleInstanceResultBundleTaskStorage - The Amazon S3 storage locations.
type BundleInstanceResultBundleTaskStorage struct {
	S3 *S3Storage
}

// BundleInstanceResultBundleTask - Information about the bundle task.
type BundleInstanceResultBundleTask struct {
	BundleID        *string
	BundleTaskError *BundleInstanceResultBundleTaskBundleTaskError
	InstanceID      *string
	Progress        *string
	StartTime       *time.Time
	State           *BundleInstanceResultBundleTaskStateEnum
	Storage         *BundleInstanceResultBundleTaskStorage
	UpdateTime      *time.Time
}

// BundleInstanceResult - Contains the output of BundleInstance.
type BundleInstanceResult struct {
	BundleTask *BundleInstanceResultBundleTask
}
