"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import notificationseveritylevel_enum as shared_notificationseveritylevel_enum
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SlackChannelConfiguration:
    r"""The configuration for a Slack channel that you added for your Amazon Web Services account."""
    
    channel_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('channelId') }})  
    team_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('teamId') }})  
    channel_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('channelName'), 'exclude': lambda f: f is None }})  
    channel_role_arn: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('channelRoleArn'), 'exclude': lambda f: f is None }})  
    notify_on_add_correspondence_to_case: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('notifyOnAddCorrespondenceToCase'), 'exclude': lambda f: f is None }})  
    notify_on_case_severity: Optional[shared_notificationseveritylevel_enum.NotificationSeverityLevelEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('notifyOnCaseSeverity'), 'exclude': lambda f: f is None }})  
    notify_on_create_or_reopen_case: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('notifyOnCreateOrReopenCase'), 'exclude': lambda f: f is None }})  
    notify_on_resolve_case: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('notifyOnResolveCase'), 'exclude': lambda f: f is None }})  
    