// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// ResourceTypeEnum - Different types of resource supported.
type ResourceTypeEnum string

const (
	ResourceTypeEnumTypeUnspecified               ResourceTypeEnum = "TYPE_UNSPECIFIED"
	ResourceTypeEnumGcpProject                    ResourceTypeEnum = "GCP_PROJECT"
	ResourceTypeEnumGcpResource                   ResourceTypeEnum = "GCP_RESOURCE"
	ResourceTypeEnumGcpSecretmanagerSecret        ResourceTypeEnum = "GCP_SECRETMANAGER_SECRET"
	ResourceTypeEnumGcpSecretmanagerSecretVersion ResourceTypeEnum = "GCP_SECRETMANAGER_SECRET_VERSION"
)

func (e *ResourceTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "TYPE_UNSPECIFIED":
		fallthrough
	case "GCP_PROJECT":
		fallthrough
	case "GCP_RESOURCE":
		fallthrough
	case "GCP_SECRETMANAGER_SECRET":
		fallthrough
	case "GCP_SECRETMANAGER_SECRET_VERSION":
		*e = ResourceTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ResourceTypeEnum: %s", s)
	}
}

// Resource - Resource definition
type Resource struct {
	// Template to uniquely represent a GCP resource in a format IAM expects This is a template that can have references to other values provided in the config variable template.
	PathTemplate *string `json:"pathTemplate,omitempty"`
	// Different types of resource supported.
	Type *ResourceTypeEnum `json:"type,omitempty"`
}
