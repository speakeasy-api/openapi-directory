"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import autotext as shared_autotext
from ..shared import paragraphmarker as shared_paragraphmarker
from ..shared import textrun as shared_textrun
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class TextElement:
    r"""A TextElement describes the content of a range of indices in the text content of a Shape or TableCell."""
    
    auto_text: Optional[shared_autotext.AutoText] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('autoText'), 'exclude': lambda f: f is None }})
    r"""A TextElement kind that represents auto text."""  
    end_index: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('endIndex'), 'exclude': lambda f: f is None }})
    r"""The zero-based end index of this text element, exclusive, in Unicode code units."""  
    paragraph_marker: Optional[shared_paragraphmarker.ParagraphMarker] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('paragraphMarker'), 'exclude': lambda f: f is None }})
    r"""A TextElement kind that represents the beginning of a new paragraph."""  
    start_index: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('startIndex'), 'exclude': lambda f: f is None }})
    r"""The zero-based start index of this text element, in Unicode code units."""  
    text_run: Optional[shared_textrun.TextRun] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('textRun'), 'exclude': lambda f: f is None }})
    r"""A TextElement kind that represents a run of text that all has the same styling."""  
    