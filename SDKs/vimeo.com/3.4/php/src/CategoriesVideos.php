<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class CategoriesVideos 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Check for a video in a category
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CheckCategoryForVideoRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CheckCategoryForVideoResponse
     */
	public function checkCategoryForVideo(
        \OpenAPI\OpenAPI\Models\Operations\CheckCategoryForVideoRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CheckCategoryForVideoResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/categories/{category}/videos/{video_id}', \OpenAPI\OpenAPI\Models\Operations\CheckCategoryForVideoRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CheckCategoryForVideoResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.vimeo.video+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->video = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Video', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.vimeo.video+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->legacyError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\LegacyError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get all the videos in a category
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetCategoryVideosRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetCategoryVideosResponse
     */
	public function getCategoryVideos(
        \OpenAPI\OpenAPI\Models\Operations\GetCategoryVideosRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetCategoryVideosResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/categories/{category}/videos', \OpenAPI\OpenAPI\Models\Operations\GetCategoryVideosRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetCategoryVideosRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetCategoryVideosResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.vimeo.video+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->videos = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Video>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.vimeo.video+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->legacyError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\LegacyError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get all the categories to which a video belongs
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetVideoCategoriesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetVideoCategoriesResponse
     */
	public function getVideoCategories(
        \OpenAPI\OpenAPI\Models\Operations\GetVideoCategoriesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetVideoCategoriesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/videos/{video_id}/categories', \OpenAPI\OpenAPI\Models\Operations\GetVideoCategoriesRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetVideoCategoriesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.vimeo.category+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->categories = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Category>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.vimeo.category+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->legacyError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\LegacyError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Suggest categories for a video
     * 
     * With this method, you can suggest up to two categories and one subcategory for a video. Vimeo makes the final determination about whether the video
     * belongs in these categories.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\SuggestVideoCategoryRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\SuggestVideoCategorySecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\SuggestVideoCategoryResponse
     */
	public function suggestVideoCategory(
        \OpenAPI\OpenAPI\Models\Operations\SuggestVideoCategoryRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\SuggestVideoCategorySecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\SuggestVideoCategoryResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/videos/{video_id}/categories', \OpenAPI\OpenAPI\Models\Operations\SuggestVideoCategoryRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\SuggestVideoCategoryResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.vimeo.category+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->category = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Category', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.vimeo.category+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->legacyError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\LegacyError', 'json');
            }
        }

        return $response;
    }
}