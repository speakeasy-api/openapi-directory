// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
	"openapi/pkg/types"
)

type GetCommunicationCostsSupportOpposeIndicatorEnum string

const (
	GetCommunicationCostsSupportOpposeIndicatorEnumS GetCommunicationCostsSupportOpposeIndicatorEnum = "S"
	GetCommunicationCostsSupportOpposeIndicatorEnumO GetCommunicationCostsSupportOpposeIndicatorEnum = "O"
)

func (e *GetCommunicationCostsSupportOpposeIndicatorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "S":
		fallthrough
	case "O":
		*e = GetCommunicationCostsSupportOpposeIndicatorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetCommunicationCostsSupportOpposeIndicatorEnum: %s", s)
	}
}

type GetCommunicationCostsQueryParams struct {
	// API key for https://api.data.gov. Get one at https://api.data.gov/signup.
	//
	APIKey string `queryParam:"style=form,explode=true,name=api_key"`
	// A unique identifier assigned to each candidate registered with the FEC.
	// If a person runs for several offices, that person will have separate candidate IDs for each office.
	//
	CandidateID []string `queryParam:"style=form,explode=true,name=candidate_id"`
	// A unique identifier assigned to each committee or filer registered with the FEC. In general committee id's begin with the letter C which is followed by eight digits.
	//
	CommitteeID []string `queryParam:"style=form,explode=true,name=committee_id"`
	// An unique identifier for each page where the electronic or paper filing is reported.
	//
	ImageNumber []string `queryParam:"style=form,explode=true,name=image_number"`
	// Filter for form and line number using the following format: `FORM-LINENUMBER`.  For example an argument such as `F3X-16` would filter down to all entries from form `F3X` line number `16`.
	LineNumber *string `queryParam:"style=form,explode=true,name=line_number"`
	// Filter for all amounts less than a value.
	MaxAmount *string `queryParam:"style=form,explode=true,name=max_amount"`
	// Maximum date
	MaxDate *types.Date `queryParam:"style=form,explode=true,name=max_date"`
	// Maxium image number of the page where the schedule item is reported
	MaxImageNumber *string `queryParam:"style=form,explode=true,name=max_image_number"`
	// Filter for all amounts greater than a value.
	MinAmount *string `queryParam:"style=form,explode=true,name=min_amount"`
	// Minimum date
	MinDate *types.Date `queryParam:"style=form,explode=true,name=min_date"`
	// Minium image number of the page where the schedule item is reported
	MinImageNumber *string `queryParam:"style=form,explode=true,name=min_image_number"`
	// For paginating through results, starting at page 1
	Page *int `queryParam:"style=form,explode=true,name=page"`
	// The number of results returned per page. Defaults to 20.
	PerPage *int `queryParam:"style=form,explode=true,name=per_page"`
	// Provide a field to sort by. Use `-` for descending order.
	//
	Sort *string `queryParam:"style=form,explode=true,name=sort"`
	// Hide null values on sorted column(s).
	SortHideNull *bool `queryParam:"style=form,explode=true,name=sort_hide_null"`
	// Toggle that filters out all rows having sort column that is non-null
	SortNullOnly *bool `queryParam:"style=form,explode=true,name=sort_null_only"`
	// Toggle that sorts null values last
	SortNullsLast *bool `queryParam:"style=form,explode=true,name=sort_nulls_last"`
	// Support or opposition
	SupportOpposeIndicator []GetCommunicationCostsSupportOpposeIndicatorEnum `queryParam:"style=form,explode=true,name=support_oppose_indicator"`
}

type GetCommunicationCostsRequest struct {
	QueryParams GetCommunicationCostsQueryParams
}

type GetCommunicationCostsResponse struct {
	CommunicationCostPage *shared.CommunicationCostPage
	ContentType           string
	StatusCode            int
	RawResponse           *http.Response
}
