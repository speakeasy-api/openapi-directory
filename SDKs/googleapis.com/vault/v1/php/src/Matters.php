<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Matters 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Adds an account as a matter collaborator.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\VaultMattersAddPermissionsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\VaultMattersAddPermissionsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\VaultMattersAddPermissionsResponse
     */
	public function vaultMattersAddPermissions(
        \OpenAPI\OpenAPI\Models\Operations\VaultMattersAddPermissionsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\VaultMattersAddPermissionsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\VaultMattersAddPermissionsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/matters/{matterId}:addPermissions', \OpenAPI\OpenAPI\Models\Operations\VaultMattersAddPermissionsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "addMatterPermissionsRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\VaultMattersAddPermissionsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\VaultMattersAddPermissionsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->matterPermission = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\MatterPermission', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Closes the specified matter. Returns the matter with updated state.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\VaultMattersCloseRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\VaultMattersCloseSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\VaultMattersCloseResponse
     */
	public function vaultMattersClose(
        \OpenAPI\OpenAPI\Models\Operations\VaultMattersCloseRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\VaultMattersCloseSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\VaultMattersCloseResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/matters/{matterId}:close', \OpenAPI\OpenAPI\Models\Operations\VaultMattersCloseRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\VaultMattersCloseRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\VaultMattersCloseResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->closeMatterResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CloseMatterResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Counts the accounts processed by the specified query.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\VaultMattersCountRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\VaultMattersCountSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\VaultMattersCountResponse
     */
	public function vaultMattersCount(
        \OpenAPI\OpenAPI\Models\Operations\VaultMattersCountRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\VaultMattersCountSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\VaultMattersCountResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/matters/{matterId}:count', \OpenAPI\OpenAPI\Models\Operations\VaultMattersCountRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "countArtifactsRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\VaultMattersCountRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\VaultMattersCountResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a matter with the given name and description. The initial state is open, and the owner is the method caller. Returns the created matter with default view.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\VaultMattersCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\VaultMattersCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\VaultMattersCreateResponse
     */
	public function vaultMattersCreate(
        \OpenAPI\OpenAPI\Models\Operations\VaultMattersCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\VaultMattersCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\VaultMattersCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/matters');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "matter", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\VaultMattersCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\VaultMattersCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->matter = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Matter', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Deletes the specified matter. Returns the matter with updated state.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\VaultMattersDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\VaultMattersDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\VaultMattersDeleteResponse
     */
	public function vaultMattersDelete(
        \OpenAPI\OpenAPI\Models\Operations\VaultMattersDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\VaultMattersDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\VaultMattersDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/matters/{matterId}', \OpenAPI\OpenAPI\Models\Operations\VaultMattersDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\VaultMattersDeleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\VaultMattersDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->matter = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Matter', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates an export.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\VaultMattersExportsCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\VaultMattersExportsCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\VaultMattersExportsCreateResponse
     */
	public function vaultMattersExportsCreate(
        \OpenAPI\OpenAPI\Models\Operations\VaultMattersExportsCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\VaultMattersExportsCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\VaultMattersExportsCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/matters/{matterId}/exports', \OpenAPI\OpenAPI\Models\Operations\VaultMattersExportsCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "export", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\VaultMattersExportsCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\VaultMattersExportsCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->export = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Export', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Deletes an export.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\VaultMattersExportsDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\VaultMattersExportsDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\VaultMattersExportsDeleteResponse
     */
	public function vaultMattersExportsDelete(
        \OpenAPI\OpenAPI\Models\Operations\VaultMattersExportsDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\VaultMattersExportsDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\VaultMattersExportsDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/matters/{matterId}/exports/{exportId}', \OpenAPI\OpenAPI\Models\Operations\VaultMattersExportsDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\VaultMattersExportsDeleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\VaultMattersExportsDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->empty = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets an export.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\VaultMattersExportsGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\VaultMattersExportsGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\VaultMattersExportsGetResponse
     */
	public function vaultMattersExportsGet(
        \OpenAPI\OpenAPI\Models\Operations\VaultMattersExportsGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\VaultMattersExportsGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\VaultMattersExportsGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/matters/{matterId}/exports/{exportId}', \OpenAPI\OpenAPI\Models\Operations\VaultMattersExportsGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\VaultMattersExportsGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\VaultMattersExportsGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->export = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Export', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists details about the exports in the specified matter.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\VaultMattersExportsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\VaultMattersExportsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\VaultMattersExportsListResponse
     */
	public function vaultMattersExportsList(
        \OpenAPI\OpenAPI\Models\Operations\VaultMattersExportsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\VaultMattersExportsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\VaultMattersExportsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/matters/{matterId}/exports', \OpenAPI\OpenAPI\Models\Operations\VaultMattersExportsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\VaultMattersExportsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\VaultMattersExportsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listExportsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListExportsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets the specified matter.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\VaultMattersGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\VaultMattersGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\VaultMattersGetResponse
     */
	public function vaultMattersGet(
        \OpenAPI\OpenAPI\Models\Operations\VaultMattersGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\VaultMattersGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\VaultMattersGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/matters/{matterId}', \OpenAPI\OpenAPI\Models\Operations\VaultMattersGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\VaultMattersGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\VaultMattersGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->matter = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Matter', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Adds an account to a hold. Accounts can be added only to a hold that does not have an organizational unit set. If you try to add an account to an organizational unit-based hold, an error is returned.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\VaultMattersHoldsAccountsCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\VaultMattersHoldsAccountsCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\VaultMattersHoldsAccountsCreateResponse
     */
	public function vaultMattersHoldsAccountsCreate(
        \OpenAPI\OpenAPI\Models\Operations\VaultMattersHoldsAccountsCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\VaultMattersHoldsAccountsCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\VaultMattersHoldsAccountsCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/matters/{matterId}/holds/{holdId}/accounts', \OpenAPI\OpenAPI\Models\Operations\VaultMattersHoldsAccountsCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "heldAccount", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\VaultMattersHoldsAccountsCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\VaultMattersHoldsAccountsCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->heldAccount = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\HeldAccount', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Removes an account from a hold.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\VaultMattersHoldsAccountsDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\VaultMattersHoldsAccountsDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\VaultMattersHoldsAccountsDeleteResponse
     */
	public function vaultMattersHoldsAccountsDelete(
        \OpenAPI\OpenAPI\Models\Operations\VaultMattersHoldsAccountsDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\VaultMattersHoldsAccountsDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\VaultMattersHoldsAccountsDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/matters/{matterId}/holds/{holdId}/accounts/{accountId}', \OpenAPI\OpenAPI\Models\Operations\VaultMattersHoldsAccountsDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\VaultMattersHoldsAccountsDeleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\VaultMattersHoldsAccountsDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->empty = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists the accounts covered by a hold. This can list only individually-specified accounts covered by the hold. If the hold covers an organizational unit, use the [Admin SDK](https://developers.google.com/admin-sdk/). to list the members of the organizational unit on hold.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\VaultMattersHoldsAccountsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\VaultMattersHoldsAccountsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\VaultMattersHoldsAccountsListResponse
     */
	public function vaultMattersHoldsAccountsList(
        \OpenAPI\OpenAPI\Models\Operations\VaultMattersHoldsAccountsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\VaultMattersHoldsAccountsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\VaultMattersHoldsAccountsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/matters/{matterId}/holds/{holdId}/accounts', \OpenAPI\OpenAPI\Models\Operations\VaultMattersHoldsAccountsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\VaultMattersHoldsAccountsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\VaultMattersHoldsAccountsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listHeldAccountsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListHeldAccountsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Adds accounts to a hold. Returns a list of accounts that have been successfully added. Accounts can be added only to an existing account-based hold.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\VaultMattersHoldsAddHeldAccountsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\VaultMattersHoldsAddHeldAccountsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\VaultMattersHoldsAddHeldAccountsResponse
     */
	public function vaultMattersHoldsAddHeldAccounts(
        \OpenAPI\OpenAPI\Models\Operations\VaultMattersHoldsAddHeldAccountsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\VaultMattersHoldsAddHeldAccountsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\VaultMattersHoldsAddHeldAccountsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/matters/{matterId}/holds/{holdId}:addHeldAccounts', \OpenAPI\OpenAPI\Models\Operations\VaultMattersHoldsAddHeldAccountsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "addHeldAccountsRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\VaultMattersHoldsAddHeldAccountsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\VaultMattersHoldsAddHeldAccountsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->addHeldAccountsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\AddHeldAccountsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a hold in the specified matter.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\VaultMattersHoldsCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\VaultMattersHoldsCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\VaultMattersHoldsCreateResponse
     */
	public function vaultMattersHoldsCreate(
        \OpenAPI\OpenAPI\Models\Operations\VaultMattersHoldsCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\VaultMattersHoldsCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\VaultMattersHoldsCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/matters/{matterId}/holds', \OpenAPI\OpenAPI\Models\Operations\VaultMattersHoldsCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "hold", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\VaultMattersHoldsCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\VaultMattersHoldsCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->hold = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Hold', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Removes the specified hold and releases the accounts or organizational unit covered by the hold. If the data is not preserved by another hold or retention rule, it might be purged.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\VaultMattersHoldsDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\VaultMattersHoldsDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\VaultMattersHoldsDeleteResponse
     */
	public function vaultMattersHoldsDelete(
        \OpenAPI\OpenAPI\Models\Operations\VaultMattersHoldsDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\VaultMattersHoldsDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\VaultMattersHoldsDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/matters/{matterId}/holds/{holdId}', \OpenAPI\OpenAPI\Models\Operations\VaultMattersHoldsDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\VaultMattersHoldsDeleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\VaultMattersHoldsDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->empty = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets the specified hold.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\VaultMattersHoldsGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\VaultMattersHoldsGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\VaultMattersHoldsGetResponse
     */
	public function vaultMattersHoldsGet(
        \OpenAPI\OpenAPI\Models\Operations\VaultMattersHoldsGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\VaultMattersHoldsGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\VaultMattersHoldsGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/matters/{matterId}/holds/{holdId}', \OpenAPI\OpenAPI\Models\Operations\VaultMattersHoldsGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\VaultMattersHoldsGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\VaultMattersHoldsGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->hold = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Hold', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists the holds in a matter.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\VaultMattersHoldsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\VaultMattersHoldsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\VaultMattersHoldsListResponse
     */
	public function vaultMattersHoldsList(
        \OpenAPI\OpenAPI\Models\Operations\VaultMattersHoldsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\VaultMattersHoldsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\VaultMattersHoldsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/matters/{matterId}/holds', \OpenAPI\OpenAPI\Models\Operations\VaultMattersHoldsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\VaultMattersHoldsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\VaultMattersHoldsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listHoldsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListHoldsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Removes the specified accounts from a hold. Returns a list of statuses in the same order as the request.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\VaultMattersHoldsRemoveHeldAccountsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\VaultMattersHoldsRemoveHeldAccountsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\VaultMattersHoldsRemoveHeldAccountsResponse
     */
	public function vaultMattersHoldsRemoveHeldAccounts(
        \OpenAPI\OpenAPI\Models\Operations\VaultMattersHoldsRemoveHeldAccountsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\VaultMattersHoldsRemoveHeldAccountsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\VaultMattersHoldsRemoveHeldAccountsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/matters/{matterId}/holds/{holdId}:removeHeldAccounts', \OpenAPI\OpenAPI\Models\Operations\VaultMattersHoldsRemoveHeldAccountsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "removeHeldAccountsRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\VaultMattersHoldsRemoveHeldAccountsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\VaultMattersHoldsRemoveHeldAccountsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->removeHeldAccountsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\RemoveHeldAccountsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates the scope (organizational unit or accounts) and query parameters of a hold. You cannot add accounts to a hold that covers an organizational unit, nor can you add organizational units to a hold that covers individual accounts. If you try, the unsupported values are ignored.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\VaultMattersHoldsUpdateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\VaultMattersHoldsUpdateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\VaultMattersHoldsUpdateResponse
     */
	public function vaultMattersHoldsUpdate(
        \OpenAPI\OpenAPI\Models\Operations\VaultMattersHoldsUpdateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\VaultMattersHoldsUpdateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\VaultMattersHoldsUpdateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/matters/{matterId}/holds/{holdId}', \OpenAPI\OpenAPI\Models\Operations\VaultMattersHoldsUpdateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "hold", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\VaultMattersHoldsUpdateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\VaultMattersHoldsUpdateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->hold = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Hold', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists matters the requestor has access to.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\VaultMattersListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\VaultMattersListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\VaultMattersListResponse
     */
	public function vaultMattersList(
        \OpenAPI\OpenAPI\Models\Operations\VaultMattersListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\VaultMattersListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\VaultMattersListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/matters');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\VaultMattersListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\VaultMattersListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listMattersResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListMattersResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Removes an account as a matter collaborator.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\VaultMattersRemovePermissionsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\VaultMattersRemovePermissionsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\VaultMattersRemovePermissionsResponse
     */
	public function vaultMattersRemovePermissions(
        \OpenAPI\OpenAPI\Models\Operations\VaultMattersRemovePermissionsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\VaultMattersRemovePermissionsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\VaultMattersRemovePermissionsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/matters/{matterId}:removePermissions', \OpenAPI\OpenAPI\Models\Operations\VaultMattersRemovePermissionsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "removeMatterPermissionsRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\VaultMattersRemovePermissionsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\VaultMattersRemovePermissionsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->empty = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Reopens the specified matter. Returns the matter with updated state.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\VaultMattersReopenRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\VaultMattersReopenSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\VaultMattersReopenResponse
     */
	public function vaultMattersReopen(
        \OpenAPI\OpenAPI\Models\Operations\VaultMattersReopenRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\VaultMattersReopenSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\VaultMattersReopenResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/matters/{matterId}:reopen', \OpenAPI\OpenAPI\Models\Operations\VaultMattersReopenRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\VaultMattersReopenRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\VaultMattersReopenResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->reopenMatterResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ReopenMatterResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a saved query.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\VaultMattersSavedQueriesCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\VaultMattersSavedQueriesCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\VaultMattersSavedQueriesCreateResponse
     */
	public function vaultMattersSavedQueriesCreate(
        \OpenAPI\OpenAPI\Models\Operations\VaultMattersSavedQueriesCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\VaultMattersSavedQueriesCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\VaultMattersSavedQueriesCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/matters/{matterId}/savedQueries', \OpenAPI\OpenAPI\Models\Operations\VaultMattersSavedQueriesCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "savedQuery", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\VaultMattersSavedQueriesCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\VaultMattersSavedQueriesCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->savedQuery = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\SavedQuery', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Deletes the specified saved query.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\VaultMattersSavedQueriesDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\VaultMattersSavedQueriesDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\VaultMattersSavedQueriesDeleteResponse
     */
	public function vaultMattersSavedQueriesDelete(
        \OpenAPI\OpenAPI\Models\Operations\VaultMattersSavedQueriesDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\VaultMattersSavedQueriesDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\VaultMattersSavedQueriesDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/matters/{matterId}/savedQueries/{savedQueryId}', \OpenAPI\OpenAPI\Models\Operations\VaultMattersSavedQueriesDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\VaultMattersSavedQueriesDeleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\VaultMattersSavedQueriesDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->empty = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieves the specified saved query.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\VaultMattersSavedQueriesGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\VaultMattersSavedQueriesGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\VaultMattersSavedQueriesGetResponse
     */
	public function vaultMattersSavedQueriesGet(
        \OpenAPI\OpenAPI\Models\Operations\VaultMattersSavedQueriesGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\VaultMattersSavedQueriesGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\VaultMattersSavedQueriesGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/matters/{matterId}/savedQueries/{savedQueryId}', \OpenAPI\OpenAPI\Models\Operations\VaultMattersSavedQueriesGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\VaultMattersSavedQueriesGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\VaultMattersSavedQueriesGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->savedQuery = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\SavedQuery', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists the saved queries in a matter.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\VaultMattersSavedQueriesListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\VaultMattersSavedQueriesListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\VaultMattersSavedQueriesListResponse
     */
	public function vaultMattersSavedQueriesList(
        \OpenAPI\OpenAPI\Models\Operations\VaultMattersSavedQueriesListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\VaultMattersSavedQueriesListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\VaultMattersSavedQueriesListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/matters/{matterId}/savedQueries', \OpenAPI\OpenAPI\Models\Operations\VaultMattersSavedQueriesListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\VaultMattersSavedQueriesListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\VaultMattersSavedQueriesListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listSavedQueriesResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListSavedQueriesResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Undeletes the specified matter. Returns the matter with updated state.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\VaultMattersUndeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\VaultMattersUndeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\VaultMattersUndeleteResponse
     */
	public function vaultMattersUndelete(
        \OpenAPI\OpenAPI\Models\Operations\VaultMattersUndeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\VaultMattersUndeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\VaultMattersUndeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/matters/{matterId}:undelete', \OpenAPI\OpenAPI\Models\Operations\VaultMattersUndeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\VaultMattersUndeleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\VaultMattersUndeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->matter = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Matter', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates the specified matter. This updates only the name and description of the matter, identified by matter ID. Changes to any other fields are ignored. Returns the default view of the matter.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\VaultMattersUpdateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\VaultMattersUpdateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\VaultMattersUpdateResponse
     */
	public function vaultMattersUpdate(
        \OpenAPI\OpenAPI\Models\Operations\VaultMattersUpdateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\VaultMattersUpdateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\VaultMattersUpdateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/matters/{matterId}', \OpenAPI\OpenAPI\Models\Operations\VaultMattersUpdateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "matter", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\VaultMattersUpdateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\VaultMattersUpdateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->matter = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Matter', 'json');
            }
        }

        return $response;
    }
}