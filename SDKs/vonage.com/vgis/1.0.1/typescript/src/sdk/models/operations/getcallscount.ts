/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";

/**
 * Filter by call direction. For multiple criteria, seperate values by a comma.
 */
export enum GetCallsCountDirectionEnum {
  Inbound = "INBOUND",
  Outbound = "OUTBOUND",
}

/**
 * Filter calls by state. For multiple criteria, seperate values by a comma.
 */
export enum GetCallsCountStatesEnum {
  Initializing = "INITIALIZING",
  Ringing = "RINGING",
  Active = "ACTIVE",
  Held = "HELD",
  RemoteHeld = "REMOTE_HELD",
}

export class GetCallsCountRequest extends SpeakeasyBase {
  /**
   * Filter by call direction. For multiple criteria, seperate values by a comma.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=direction",
  })
  direction?: GetCallsCountDirectionEnum;

  /**
   * Return calls that occurred after this point in time
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=fromDate",
  })
  fromDate?: number;

  /**
   * Filter calls by state. For multiple criteria, seperate values by a comma.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=states",
  })
  states?: GetCallsCountStatesEnum;

  /**
   * Return calls that occurred before this point in time
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=toDate",
  })
  toDate?: number;
}

export class GetCallsCountResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  /**
   * Bad Request: The client should not repeat the request without modifications
   */
  @SpeakeasyMetadata()
  errorResponse?: shared.ErrorResponse;

  /**
   * Successful
   */
  @SpeakeasyMetadata()
  eventsCount?: shared.EventsCount;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;
}
