import { AxiosInstance, AxiosRequestConfig } from "axios";
import * as operations from "./models/operations";
import { Addon } from "./addon";
import { BranchRestrictions } from "./branchrestrictions";
import { BranchingModel } from "./branchingmodel";
import { CommitStatuses } from "./commitstatuses";
import { Commits } from "./commits";
import { Deployments } from "./deployments";
import { Downloads } from "./downloads";
import { IssueTracker } from "./issuetracker";
import { Pipelines } from "./pipelines";
import { Projects } from "./projects";
import { Pullrequests } from "./pullrequests";
import { Refs } from "./refs";
import { Reports } from "./reports";
import { Repositories } from "./repositories";
import { Search } from "./search";
import { Snippets } from "./snippets";
import { Source } from "./source";
import { Ssh } from "./ssh";
import { Teams } from "./teams";
import { Users } from "./users";
import { Webhooks } from "./webhooks";
import { Workspaces } from "./workspaces";
import { Properties } from "./properties";
export declare const ServerList: readonly ["https://api.bitbucket.org/2.0"];
export type SDKProps = {
    defaultClient?: AxiosInstance;
    serverUrl?: string;
};
export declare class SDK {
    addon: Addon;
    branchRestrictions: BranchRestrictions;
    branchingModel: BranchingModel;
    commitStatuses: CommitStatuses;
    commits: Commits;
    deployments: Deployments;
    downloads: Downloads;
    issueTracker: IssueTracker;
    pipelines: Pipelines;
    projects: Projects;
    pullrequests: Pullrequests;
    refs: Refs;
    reports: Reports;
    repositories: Repositories;
    search: Search;
    snippets: Snippets;
    source: Source;
    ssh: Ssh;
    teams: Teams;
    users: Users;
    webhooks: Webhooks;
    workspaces: Workspaces;
    properties: Properties;
    _defaultClient: AxiosInstance;
    _securityClient: AxiosInstance;
    _serverURL: string;
    private _language;
    private _sdkVersion;
    private _genVersion;
    constructor(props: SDKProps);
    getRepositoriesWorkspaceRepoSlugPipelinesPipelineUuidStepsStepUuidLogsLogUuid(req: operations.GetRepositoriesWorkspaceRepoSlugPipelinesPipelineUuidStepsStepUuidLogsLogUuidRequest, config?: AxiosRequestConfig): Promise<operations.GetRepositoriesWorkspaceRepoSlugPipelinesPipelineUuidStepsStepUuidLogsLogUuidResponse>;
    getRepositoriesWorkspaceRepoSlugPipelinesPipelineUuidStepsStepUuidTestReports(req: operations.GetRepositoriesWorkspaceRepoSlugPipelinesPipelineUuidStepsStepUuidTestReportsRequest, config?: AxiosRequestConfig): Promise<operations.GetRepositoriesWorkspaceRepoSlugPipelinesPipelineUuidStepsStepUuidTestReportsResponse>;
    getRepositoriesWorkspaceRepoSlugPipelinesPipelineUuidStepsStepUuidTestReportsTestCases(req: operations.GetRepositoriesWorkspaceRepoSlugPipelinesPipelineUuidStepsStepUuidTestReportsTestCasesRequest, config?: AxiosRequestConfig): Promise<operations.GetRepositoriesWorkspaceRepoSlugPipelinesPipelineUuidStepsStepUuidTestReportsTestCasesResponse>;
    getRepositoriesWorkspaceRepoSlugPipelinesPipelineUuidStepsStepUuidTestReportsTestCasesTestCaseUuidTestCaseReasons(req: operations.GetRepositoriesWorkspaceRepoSlugPipelinesPipelineUuidStepsStepUuidTestReportsTestCasesTestCaseUuidTestCaseReasonsRequest, config?: AxiosRequestConfig): Promise<operations.GetRepositoriesWorkspaceRepoSlugPipelinesPipelineUuidStepsStepUuidTestReportsTestCasesTestCaseUuidTestCaseReasonsResponse>;
    getWorkspacesWorkspacePipelinesConfigIdentityOidcWellKnownOpenidConfiguration(req: operations.GetWorkspacesWorkspacePipelinesConfigIdentityOidcWellKnownOpenidConfigurationRequest, config?: AxiosRequestConfig): Promise<operations.GetWorkspacesWorkspacePipelinesConfigIdentityOidcWellKnownOpenidConfigurationResponse>;
    getWorkspacesWorkspacePipelinesConfigIdentityOidcKeysJson(req: operations.GetWorkspacesWorkspacePipelinesConfigIdentityOidcKeysJsonRequest, config?: AxiosRequestConfig): Promise<operations.GetWorkspacesWorkspacePipelinesConfigIdentityOidcKeysJsonResponse>;
}
