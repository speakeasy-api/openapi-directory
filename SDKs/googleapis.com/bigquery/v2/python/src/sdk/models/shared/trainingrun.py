"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import datasplitresult as shared_datasplitresult
from ..shared import evaluationmetrics as shared_evaluationmetrics
from ..shared import globalexplanation as shared_globalexplanation
from ..shared import iterationresult as shared_iterationresult
from ..shared import trainingoptions as shared_trainingoptions
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class TrainingRunInput:
    r"""Information about a single training query run for the model."""
    
    data_split_result: Optional[shared_datasplitresult.DataSplitResult] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dataSplitResult'), 'exclude': lambda f: f is None }})
    r"""Data split result. This contains references to the training and evaluation data tables that were used to train the model."""  
    evaluation_metrics: Optional[shared_evaluationmetrics.EvaluationMetrics] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('evaluationMetrics'), 'exclude': lambda f: f is None }})
    r"""Evaluation metrics of a model. These are either computed on all training data or just the eval data based on whether eval data was used during training. These are not present for imported models."""  
    model_level_global_explanation: Optional[shared_globalexplanation.GlobalExplanation] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('modelLevelGlobalExplanation'), 'exclude': lambda f: f is None }})
    r"""Global explanations containing the top most important features after training."""  
    training_options: Optional[shared_trainingoptions.TrainingOptions] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('trainingOptions'), 'exclude': lambda f: f is None }})
    r"""Options used in model training."""  
    vertex_ai_model_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('vertexAiModelId'), 'exclude': lambda f: f is None }})
    r"""The model id in the [Vertex AI Model Registry](https://cloud.google.com/vertex-ai/docs/model-registry/introduction) for this training run."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class TrainingRun:
    r"""Information about a single training query run for the model."""
    
    class_level_global_explanations: Optional[list[shared_globalexplanation.GlobalExplanation]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('classLevelGlobalExplanations'), 'exclude': lambda f: f is None }})
    r"""Output only. Global explanation contains the explanation of top features on the class level. Applies to classification models only."""  
    data_split_result: Optional[shared_datasplitresult.DataSplitResult] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dataSplitResult'), 'exclude': lambda f: f is None }})
    r"""Data split result. This contains references to the training and evaluation data tables that were used to train the model."""  
    evaluation_metrics: Optional[shared_evaluationmetrics.EvaluationMetrics] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('evaluationMetrics'), 'exclude': lambda f: f is None }})
    r"""Evaluation metrics of a model. These are either computed on all training data or just the eval data based on whether eval data was used during training. These are not present for imported models."""  
    model_level_global_explanation: Optional[shared_globalexplanation.GlobalExplanation] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('modelLevelGlobalExplanation'), 'exclude': lambda f: f is None }})
    r"""Global explanations containing the top most important features after training."""  
    results: Optional[list[shared_iterationresult.IterationResult]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('results'), 'exclude': lambda f: f is None }})
    r"""Output only. Output of each iteration run, results.size() <= max_iterations."""  
    start_time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('startTime'), 'exclude': lambda f: f is None }})
    r"""Output only. The start time of this training run."""  
    training_options: Optional[shared_trainingoptions.TrainingOptions] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('trainingOptions'), 'exclude': lambda f: f is None }})
    r"""Options used in model training."""  
    training_start_time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('trainingStartTime'), 'exclude': lambda f: f is None }})
    r"""Output only. The start time of this training run, in milliseconds since epoch."""  
    vertex_ai_model_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('vertexAiModelId'), 'exclude': lambda f: f is None }})
    r"""The model id in the [Vertex AI Model Registry](https://cloud.google.com/vertex-ai/docs/model-registry/introduction) for this training run."""  
    vertex_ai_model_version: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('vertexAiModelVersion'), 'exclude': lambda f: f is None }})
    r"""Output only. The model version in the [Vertex AI Model Registry](https://cloud.google.com/vertex-ai/docs/model-registry/introduction) for this training run."""  
    