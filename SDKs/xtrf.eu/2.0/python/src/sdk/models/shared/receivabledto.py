"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import chargelanguagecombinationdto as shared_chargelanguagecombinationdto
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class ReceivableDTORateOriginEnum(str, Enum):
    PRICE_PROFILE = 'PRICE_PROFILE'
    PRICE_LIST = 'PRICE_LIST'
    FILLED_MANUALLY = 'FILLED_MANUALLY'
    AUTOCALCULATED = 'AUTOCALCULATED'

class ReceivableDTOTypeEnum(str, Enum):
    SIMPLE = 'SIMPLE'
    CAT = 'CAT'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ReceivableDTO:
    r"""Success"""
    
    calculation_unit_id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('calculationUnitId'), 'exclude': lambda f: f is None }})  
    currency_id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('currencyId'), 'exclude': lambda f: f is None }})  
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description'), 'exclude': lambda f: f is None }})  
    id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})  
    ignore_minimum_charge: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ignoreMinimumCharge'), 'exclude': lambda f: f is None }})  
    invoice_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('invoiceId'), 'exclude': lambda f: f is None }})  
    job_type_id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('jobTypeId'), 'exclude': lambda f: f is None }})  
    language_combination: Optional[shared_chargelanguagecombinationdto.ChargeLanguageCombinationDTO] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('languageCombination'), 'exclude': lambda f: f is None }})  
    language_combination_id_number: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('languageCombinationIdNumber'), 'exclude': lambda f: f is None }})  
    minimum_charge: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('minimumCharge'), 'exclude': lambda f: f is None }})  
    quantity: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('quantity'), 'exclude': lambda f: f is None }})  
    rate: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('rate'), 'exclude': lambda f: f is None }})  
    rate_origin: Optional[ReceivableDTORateOriginEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('rateOrigin'), 'exclude': lambda f: f is None }})  
    task_id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('taskId'), 'exclude': lambda f: f is None }})  
    total: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('total'), 'exclude': lambda f: f is None }})  
    type: Optional[ReceivableDTOTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})  
    