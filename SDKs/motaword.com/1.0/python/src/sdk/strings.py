"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Strings:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def clear_translation_cache(self, request: operations.ClearTranslationCacheRequest) -> operations.ClearTranslationCacheResponse:
        r"""Clear translation cache
        Clear/delete continuous project translation cache.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.ClearTranslationCacheRequest, base_url, '/continuous_projects/{projectId}/strings/cached', request)
        
        query_params = utils.get_query_params(operations.ClearTranslationCacheRequest, request)
        
        client = self._security_client
        
        http_res = client.request('DELETE', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ClearTranslationCacheResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.OperationStatus])
                res.operation_status = out

        return res

    def get_continuous_project_file_strings(self, request: operations.GetContinuousProjectFileStringsRequest) -> operations.GetContinuousProjectFileStringsResponse:
        r"""View strings their translations in a continuous document
        View the strings from a document and their translations in your continuous translation project, for all target languages. If you need the translated version of your source document/file, then you need to use package and download endpoints.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetContinuousProjectFileStringsRequest, base_url, '/continuous_projects/{projectId}/documents/{documentId}/strings', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetContinuousProjectFileStringsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.StringList])
                res.string_list = out

        return res

    def get_continuous_project_strings(self, request: operations.GetContinuousProjectStringsRequest) -> operations.GetContinuousProjectStringsResponse:
        r"""View strings and translations in continuous project
        View the strings and their translations in your continuous translation project, for all target languages. If you need the translated version of your source document/file, then you need to use package and download endpoints.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetContinuousProjectStringsRequest, base_url, '/continuous_projects/{projectId}/strings', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetContinuousProjectStringsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.StringList])
                res.string_list = out

        return res

    def get_document_translations(self, request: operations.GetDocumentTranslationsRequest) -> operations.GetDocumentTranslationsResponse:
        r"""View strings and translations of a document
        View the strings and their translations in your translation project for the specified source document. The list of translations is live if your project is not completed yet. If you need the translated version of your source document/file, then you need to use package and download endpoints.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetDocumentTranslationsRequest, base_url, '/projects/{projectId}/documents/{documentId}/translations', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetDocumentTranslationsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.StringList])
                res.string_list = out

        return res

    def get_document_translations_for_language(self, request: operations.GetDocumentTranslationsForLanguageRequest) -> operations.GetDocumentTranslationsForLanguageResponse:
        r"""View strings and translations of a document for target language
        View the strings and their translations in the given target language for the specified source document. The list of translations is live if your project is not completed yet. If you need the translated version of your source document/file, then you need to use package and download endpoints.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetDocumentTranslationsForLanguageRequest, base_url, '/projects/{projectId}/documents/{documentId}/translations/{language}', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetDocumentTranslationsForLanguageResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.StringList])
                res.string_list = out

        return res

    def get_project_strings(self, request: operations.GetProjectStringsRequest) -> operations.GetProjectStringsResponse:
        r"""View project strings and translations
        View the strings and their translations in your translation project, for all target languages. The list of translations is live if your project is not completed yet. If you need the translated version of your source document/file, then you need to use package and download endpoints.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetProjectStringsRequest, base_url, '/projects/{projectId}/strings', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetProjectStringsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.StringList])
                res.string_list = out

        return res

    def get_project_strings_for_language(self, request: operations.GetProjectStringsForLanguageRequest) -> operations.GetProjectStringsForLanguageResponse:
        r"""View strings and translations for target language
        View the strings and their translations in your translation project for the specified target language. The list of translations is live if your project is not completed yet. If you need the translated version of your source document/file, then you need to use package and download endpoints.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetProjectStringsForLanguageRequest, base_url, '/projects/{projectId}/strings/{language}', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetProjectStringsForLanguageResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.StringList])
                res.string_list = out

        return res

    def get_project_translations(self, request: operations.GetProjectTranslationsRequest) -> operations.GetProjectTranslationsResponse:
        r"""Deprecated. Use /projects/{projectId}/strings instead."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetProjectTranslationsRequest, base_url, '/projects/{projectId}/translations', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetProjectTranslationsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.StringList])
                res.string_list = out

        return res

    def get_project_translations_for_language(self, request: operations.GetProjectTranslationsForLanguageRequest) -> operations.GetProjectTranslationsForLanguageResponse:
        r"""Deprecated. use /projects/{projectId}/strings/{language} instead."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetProjectTranslationsForLanguageRequest, base_url, '/projects/{projectId}/translations/{language}', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetProjectTranslationsForLanguageResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.StringList])
                res.string_list = out

        return res

    def get_strings(self, request: operations.GetStringsRequest) -> operations.GetStringsResponse:
        r"""View account strings (translation memory)
        Get a list of all strings and their translations under your account, from all projects. This is your MotaWord translation memory. If you have the related permission, this endpoint will also return strings from your company account.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/strings'
        
        query_params = utils.get_query_params(operations.GetStringsRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetStringsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ClientStrings])
                res.client_strings = out

        return res

    def get_translation_cache(self, request: operations.GetTranslationCacheRequest) -> operations.GetTranslationCacheResponse:
        r"""View cached strings translations in continuous project
        MotaWord caches your account intensively (and in a smart way) in real-time translation environments. This endpoint will return the currently cached strings and translations in your continuous translation project.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetTranslationCacheRequest, base_url, '/continuous_projects/{projectId}/strings/cached', request)
        
        query_params = utils.get_query_params(operations.GetTranslationCacheRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetTranslationCacheResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ContinuousProjectCache])
                res.continuous_project_cache = out

        return res

    def package_project_translation_memory(self, request: operations.PackageProjectTranslationMemoryRequest) -> operations.PackageProjectTranslationMemoryResponse:
        r"""Download project translation memory
        Package and download project translation memory in TMX format
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.PackageProjectTranslationMemoryRequest, base_url, '/projects/{projectId}/strings/package', request)
        
        query_params = utils.get_query_params(operations.PackageProjectTranslationMemoryRequest, request)
        
        client = self._security_client
        
        http_res = client.request('POST', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PackageProjectTranslationMemoryResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.AsyncOperationStatus])
                res.async_operation_status = out
            if utils.match_content_type(content_type, 'application/xml'):
                res.package_project_translation_memory_200_application_xml_binary_string = http_res.content

        return res

    def package_project_translation_memory_for_language(self, request: operations.PackageProjectTranslationMemoryForLanguageRequest) -> operations.PackageProjectTranslationMemoryForLanguageResponse:
        r"""Download language-specific project translation memory
        Package and download project translation memory in TMX format for a specific target language.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.PackageProjectTranslationMemoryForLanguageRequest, base_url, '/projects/{projectId}/strings/{languageCode}/package', request)
        
        query_params = utils.get_query_params(operations.PackageProjectTranslationMemoryForLanguageRequest, request)
        
        client = self._security_client
        
        http_res = client.request('POST', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PackageProjectTranslationMemoryForLanguageResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.AsyncOperationStatus])
                res.async_operation_status = out
            if utils.match_content_type(content_type, 'application/xml'):
                res.package_project_translation_memory_for_language_200_application_xml_binary_string = http_res.content

        return res

    def package_project_translation_memory_for_language_status(self, request: operations.PackageProjectTranslationMemoryForLanguageStatusRequest) -> operations.PackageProjectTranslationMemoryForLanguageStatusResponse:
        r"""Check language-specific translation memory packaging status
        Check translation memory packaging status for async packaging requests, using the key returned from strings/package call.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.PackageProjectTranslationMemoryForLanguageStatusRequest, base_url, '/projects/{projectId}/strings/{languageCode}/package/status', request)
        
        query_params = utils.get_query_params(operations.PackageProjectTranslationMemoryForLanguageStatusRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PackageProjectTranslationMemoryForLanguageStatusResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.AsyncOperationStatus])
                res.async_operation_status = out

        return res

    def package_project_translation_memory_status(self, request: operations.PackageProjectTranslationMemoryStatusRequest) -> operations.PackageProjectTranslationMemoryStatusResponse:
        r"""Check translation memory packaging status
        Check translation memory packaging status for async packaging requests, using the key returned from strings/package call.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.PackageProjectTranslationMemoryStatusRequest, base_url, '/projects/{projectId}/strings/package/status', request)
        
        query_params = utils.get_query_params(operations.PackageProjectTranslationMemoryStatusRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PackageProjectTranslationMemoryStatusResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.AsyncOperationStatus])
                res.async_operation_status = out

        return res

    def package_user_translation_memory(self, request: operations.PackageUserTranslationMemoryRequest) -> operations.PackageUserTranslationMemoryResponse:
        r"""Download account translation memory
        Package and download account translation memory in TMX format. If you have the related permission, this will also download your company translation memory.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.PackageUserTranslationMemoryRequest, base_url, '/strings/{languageCode}/package', request)
        
        query_params = utils.get_query_params(operations.PackageUserTranslationMemoryRequest, request)
        
        client = self._security_client
        
        http_res = client.request('POST', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PackageUserTranslationMemoryResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.AsyncOperationStatus])
                res.async_operation_status = out
            if utils.match_content_type(content_type, 'application/xml'):
                res.package_user_translation_memory_200_application_xml_binary_string = http_res.content

        return res

    def package_user_translation_memory_for_language_status(self, request: operations.PackageUserTranslationMemoryForLanguageStatusRequest) -> operations.PackageUserTranslationMemoryForLanguageStatusResponse:
        r"""Check account translation memory packaging status
        Check translation memory packaging status for async packaging requests, using the key returned from strings/package call.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.PackageUserTranslationMemoryForLanguageStatusRequest, base_url, '/strings/{languageCode}/package/status', request)
        
        query_params = utils.get_query_params(operations.PackageUserTranslationMemoryForLanguageStatusRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PackageUserTranslationMemoryForLanguageStatusResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.AsyncOperationStatus])
                res.async_operation_status = out

        return res

    def post_continuous_project_file_strings(self, request: operations.PostContinuousProjectFileStringsRequest) -> operations.PostContinuousProjectFileStringsResponse:
        r"""Get a list of strings and its translations in the project."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PostContinuousProjectFileStringsRequest, base_url, '/continuous_projects/{projectId}/documents/strings', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "continuous_project_document_strings_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostContinuousProjectFileStringsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.StringList])
                res.string_list = out

        return res

    def post_strings(self, request: shared.DeprecatedStringTranslationContent) -> operations.PostStringsResponse:
        r"""Translate Strings with MT
        Deprecated, use instant translation mechanism for continuous projects.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/strings'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostStringsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.MachineTranslatedStrings])
                res.machine_translated_strings = out

        return res

    def recache_translations(self, request: operations.RecacheTranslationsRequest) -> operations.RecacheTranslationsResponse:
        r"""Recache translations
        Recache translations for the continuous project.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.RecacheTranslationsRequest, base_url, '/continuous_projects/{projectId}/strings/recache-tms', request)
        
        query_params = utils.get_query_params(operations.RecacheTranslationsRequest, request)
        
        client = self._security_client
        
        http_res = client.request('POST', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.RecacheTranslationsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.OperationStatus])
                res.operation_status = out

        return res

    def update_translation_memory_unit(self, request: shared.TranslationMemoryUnit) -> operations.UpdateTranslationMemoryUnitResponse:
        r"""Update string translation
        Update the translation of a string from your account strings/translation memory.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/strings'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._security_client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateTranslationMemoryUnitResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.OperationStatus])
                res.operation_status = out
        elif http_res.status_code in [400, 404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out

        return res

    