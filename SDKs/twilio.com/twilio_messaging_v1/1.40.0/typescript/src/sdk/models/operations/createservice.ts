/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
export const CreateServiceServerList = [
  "https://messaging.twilio.com",
] as const;

export class CreateServiceSecurity extends SpeakeasyBase {
  @SpeakeasyMetadata({
    data: "security, scheme=true;type=http;subtype=basic;name=password",
  })
  password: string;

  @SpeakeasyMetadata({
    data: "security, scheme=true;type=http;subtype=basic;name=username",
  })
  username: string;
}

/**
 * The HTTP method we should use to call `fallback_url`. Can be: `GET` or `POST`.
 */
export enum CreateServiceCreateServiceRequestFallbackMethodEnum {
  Head = "HEAD",
  Get = "GET",
  Post = "POST",
  Patch = "PATCH",
  Put = "PUT",
  Delete = "DELETE",
}

/**
 * The HTTP method we should use to call `inbound_request_url`. Can be `GET` or `POST` and the default is `POST`.
 */
export enum CreateServiceCreateServiceRequestInboundMethodEnum {
  Head = "HEAD",
  Get = "GET",
  Post = "POST",
  Patch = "PATCH",
  Put = "PUT",
  Delete = "DELETE",
}

export class CreateServiceCreateServiceRequest extends SpeakeasyBase {
  /**
   * Whether to enable [Area Code Geomatch](https://www.twilio.com/docs/sms/services#area-code-geomatch) on the Service Instance.
   */
  @SpeakeasyMetadata({ data: "form, name=AreaCodeGeomatch" })
  areaCodeGeomatch?: boolean;

  /**
   * The HTTP method we should use to call `fallback_url`. Can be: `GET` or `POST`.
   */
  @SpeakeasyMetadata({ data: "form, name=FallbackMethod" })
  fallbackMethod?: CreateServiceCreateServiceRequestFallbackMethodEnum;

  /**
   * Whether to enable [Fallback to Long Code](https://www.twilio.com/docs/sms/services#fallback-to-long-code) for messages sent through the Service instance.
   */
  @SpeakeasyMetadata({ data: "form, name=FallbackToLongCode" })
  fallbackToLongCode?: boolean;

  /**
   * The URL that we call using `fallback_method` if an error occurs while retrieving or executing the TwiML from the Inbound Request URL. If the `use_inbound_webhook_on_number` field is enabled then the webhook url defined on the phone number will override the `fallback_url` defined for the Messaging Service.
   */
  @SpeakeasyMetadata({ data: "form, name=FallbackUrl" })
  fallbackUrl?: string;

  /**
   * A descriptive string that you create to describe the resource. It can be up to 64 characters long.
   */
  @SpeakeasyMetadata({ data: "form, name=FriendlyName" })
  friendlyName: string;

  /**
   * The HTTP method we should use to call `inbound_request_url`. Can be `GET` or `POST` and the default is `POST`.
   */
  @SpeakeasyMetadata({ data: "form, name=InboundMethod" })
  inboundMethod?: CreateServiceCreateServiceRequestInboundMethodEnum;

  /**
   * The URL we call using `inbound_method` when a message is received by any phone number or short code in the Service. When this property is `null`, receiving inbound messages is disabled. All messages sent to the Twilio phone number or short code will not be logged and received on the Account. If the `use_inbound_webhook_on_number` field is enabled then the webhook url defined on the phone number will override the `inbound_request_url` defined for the Messaging Service.
   */
  @SpeakeasyMetadata({ data: "form, name=InboundRequestUrl" })
  inboundRequestUrl?: string;

  /**
   * Whether to enable the [MMS Converter](https://www.twilio.com/docs/sms/services#mms-converter) for messages sent through the Service instance.
   */
  @SpeakeasyMetadata({ data: "form, name=MmsConverter" })
  mmsConverter?: boolean;

  @SpeakeasyMetadata({ data: "form, name=ScanMessageContent" })
  scanMessageContent?: shared.ServiceEnumScanMessageContentEnum;

  /**
   * Whether to enable [Smart Encoding](https://www.twilio.com/docs/sms/services#smart-encoding) for messages sent through the Service instance.
   */
  @SpeakeasyMetadata({ data: "form, name=SmartEncoding" })
  smartEncoding?: boolean;

  /**
   * The URL we should call to [pass status updates](https://www.twilio.com/docs/sms/api/message-resource#message-status-values) about message delivery.
   */
  @SpeakeasyMetadata({ data: "form, name=StatusCallback" })
  statusCallback?: string;

  /**
   * Whether to enable [Sticky Sender](https://www.twilio.com/docs/sms/services#sticky-sender) on the Service instance.
   */
  @SpeakeasyMetadata({ data: "form, name=StickySender" })
  stickySender?: boolean;

  /**
   * Reserved.
   */
  @SpeakeasyMetadata({ data: "form, name=SynchronousValidation" })
  synchronousValidation?: boolean;

  /**
   * A boolean value that indicates either the webhook url configured on the phone number will be used or `inbound_request_url`/`fallback_url` url will be called when a message is received from the phone number. If this field is enabled then the webhook url defined on the phone number will override the `inbound_request_url`/`fallback_url` defined for the Messaging Service.
   */
  @SpeakeasyMetadata({ data: "form, name=UseInboundWebhookOnNumber" })
  useInboundWebhookOnNumber?: boolean;

  /**
   * A string that describes the scenario in which the Messaging Service will be used. Examples: [notification, marketing, verification, poll ..].
   */
  @SpeakeasyMetadata({ data: "form, name=Usecase" })
  usecase?: string;

  /**
   * How long, in seconds, messages sent from the Service are valid. Can be an integer from `1` to `14,400`.
   */
  @SpeakeasyMetadata({ data: "form, name=ValidityPeriod" })
  validityPeriod?: number;
}

export class CreateServiceResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * Created
   */
  @SpeakeasyMetadata()
  messagingV1Service?: shared.MessagingV1Service;
}
