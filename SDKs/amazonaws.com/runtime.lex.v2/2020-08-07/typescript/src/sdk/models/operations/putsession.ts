/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

/**
 * The state of the user's session with Amazon Lex V2.
 */
export class PutSessionRequestBodySessionState extends SpeakeasyBase {
  @SpeakeasyMetadata({ elemType: shared.ActiveContext })
  @Expose({ name: "activeContexts" })
  @Type(() => shared.ActiveContext)
  activeContexts?: shared.ActiveContext[];

  @SpeakeasyMetadata()
  @Expose({ name: "dialogAction" })
  @Type(() => shared.DialogAction)
  dialogAction?: shared.DialogAction;

  @SpeakeasyMetadata()
  @Expose({ name: "intent" })
  @Type(() => shared.Intent)
  intent?: shared.Intent;

  @SpeakeasyMetadata()
  @Expose({ name: "originatingRequestId" })
  originatingRequestId?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "runtimeHints" })
  @Type(() => shared.RuntimeHints)
  runtimeHints?: shared.RuntimeHints;

  @SpeakeasyMetadata()
  @Expose({ name: "sessionAttributes" })
  sessionAttributes?: Record<string, string>;
}

export class PutSessionRequestBody extends SpeakeasyBase {
  /**
   * A list of messages to send to the user. Messages are sent in the order that they are defined in the list.
   */
  @SpeakeasyMetadata({ elemType: shared.Message })
  @Expose({ name: "messages" })
  @Type(() => shared.Message)
  messages?: shared.Message[];

  /**
   * <p>Request-specific information passed between Amazon Lex V2 and the client application.</p> <p>The namespace <code>x-amz-lex:</code> is reserved for special attributes. Don't create any request attributes with the prefix <code>x-amz-lex:</code>.</p>
   */
  @SpeakeasyMetadata()
  @Expose({ name: "requestAttributes" })
  requestAttributes?: Record<string, string>;

  /**
   * The state of the user's session with Amazon Lex V2.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "sessionState" })
  @Type(() => PutSessionRequestBodySessionState)
  sessionState: PutSessionRequestBodySessionState;
}

export class PutSessionRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  requestBody: PutSessionRequestBody;

  /**
   * <p>The message that Amazon Lex V2 returns in the response can be either text or speech depending on the value of this parameter. </p> <ul> <li> <p>If the value is <code>text/plain; charset=utf-8</code>, Amazon Lex V2 returns text in the response.</p> </li> </ul>
   */
  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=ResponseContentType",
  })
  responseContentType?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Algorithm",
  })
  xAmzAlgorithm?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Content-Sha256",
  })
  xAmzContentSha256?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Credential",
  })
  xAmzCredential?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Date",
  })
  xAmzDate?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Security-Token",
  })
  xAmzSecurityToken?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Signature",
  })
  xAmzSignature?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-SignedHeaders",
  })
  xAmzSignedHeaders?: string;

  /**
   * The alias identifier of the bot that receives the session data.
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=botAliasId",
  })
  botAliasId: string;

  /**
   * The identifier of the bot that receives the session data.
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=botId",
  })
  botId: string;

  /**
   * The locale where the session is in use.
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=localeId",
  })
  localeId: string;

  /**
   * The identifier of the session that receives the session data.
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=sessionId",
  })
  sessionId: string;
}

export class PutSessionResponse extends SpeakeasyBase {
  /**
   * AccessDeniedException
   */
  @SpeakeasyMetadata()
  accessDeniedException?: any;

  /**
   * BadGatewayException
   */
  @SpeakeasyMetadata()
  badGatewayException?: any;

  /**
   * ConflictException
   */
  @SpeakeasyMetadata()
  conflictException?: any;

  @SpeakeasyMetadata()
  contentType: string;

  /**
   * DependencyFailedException
   */
  @SpeakeasyMetadata()
  dependencyFailedException?: any;

  /**
   * InternalServerException
   */
  @SpeakeasyMetadata()
  internalServerException?: any;

  /**
   * Success
   */
  @SpeakeasyMetadata()
  putSessionResponse?: shared.PutSessionResponse;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * ResourceNotFoundException
   */
  @SpeakeasyMetadata()
  resourceNotFoundException?: any;

  /**
   * ThrottlingException
   */
  @SpeakeasyMetadata()
  throttlingException?: any;

  /**
   * ValidationException
   */
  @SpeakeasyMetadata()
  validationException?: any;
}
