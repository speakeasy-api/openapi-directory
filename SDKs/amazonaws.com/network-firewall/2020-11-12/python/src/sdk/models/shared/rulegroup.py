"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import referencesets as shared_referencesets
from ..shared import rulessource as shared_rulessource
from ..shared import rulevariables as shared_rulevariables
from ..shared import statefulruleoptions as shared_statefulruleoptions
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class RuleGroup:
    r"""<p>The object that defines the rules in a rule group. This, along with <a>RuleGroupResponse</a>, define the rule group. You can retrieve all objects for a rule group by calling <a>DescribeRuleGroup</a>. </p> <p>Network Firewall uses a rule group to inspect and control network traffic. You define stateless rule groups to inspect individual packets and you define stateful rule groups to inspect packets in the context of their traffic flow. </p> <p>To use a rule group, you include it by reference in an Network Firewall firewall policy, then you use the policy in a firewall. You can reference a rule group from more than one firewall policy, and you can use a firewall policy in more than one firewall. </p>"""
    
    rules_source: shared_rulessource.RulesSource = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('RulesSource') }})  
    reference_sets: Optional[shared_referencesets.ReferenceSets] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ReferenceSets'), 'exclude': lambda f: f is None }})  
    rule_variables: Optional[shared_rulevariables.RuleVariables] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('RuleVariables'), 'exclude': lambda f: f is None }})  
    stateful_rule_options: Optional[shared_statefulruleoptions.StatefulRuleOptions] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('StatefulRuleOptions'), 'exclude': lambda f: f is None }})  
    