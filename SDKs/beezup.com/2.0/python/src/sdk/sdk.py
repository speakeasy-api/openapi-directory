"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from .analytics_global import AnalyticsGlobal
from .analytics_optimisations import AnalyticsOptimisations
from .analytics_reports import AnalyticsReports
from .analytics_rules import AnalyticsRules
from .analytics_statistics import AnalyticsStatistics
from .analytics_tracking import AnalyticsTracking
from .catalogs_auto import CatalogsAuto
from .catalogs_catalog import CatalogsCatalog
from .catalogs_global import CatalogsGlobal
from .catalogs_importation_catalog_info import CatalogsImportationCatalogInfo
from .catalogs_importation_process import CatalogsImportationProcess
from .channel_catalogs_categories import ChannelCatalogsCategories
from .channel_catalogs_column_mappings import ChannelCatalogsColumnMappings
from .channel_catalogs_exclusion_filters import ChannelCatalogsExclusionFilters
from .channel_catalogs_exportations import ChannelCatalogsExportations
from .channel_catalogs_global import ChannelCatalogsGlobal
from .channel_catalogs_legacy_tracking_global import ChannelCatalogsLegacyTrackingGlobal
from .channel_catalogs_products import ChannelCatalogsProducts
from .channel_catalogs_products_optimisation import ChannelCatalogsProductsOptimisation
from .channel_catalogs_products_overrides import ChannelCatalogsProductsOverrides
from .channel_catalogs_settings import ChannelCatalogsSettings
from .channels_channels_global import ChannelsChannelsGlobal
from .customer_account import CustomerAccount
from .customer_alerts import CustomerAlerts
from .customer_contracts import CustomerContracts
from .customer_friends import CustomerFriends
from .customer_global import CustomerGlobal
from .customer_invoices import CustomerInvoices
from .customer_rights import CustomerRights
from .customer_security import CustomerSecurity
from .customer_shares import CustomerShares
from .customer_stores import CustomerStores
from .marketplaces_channel_catalogs_global import MarketplacesChannelCatalogsGlobal
from .marketplaces_channel_catalogs_publications import MarketplacesChannelCatalogsPublications
from .marketplaces_channel_catalogs_settings import MarketplacesChannelCatalogsSettings
from .marketplaces_orders_autotransitions import MarketplacesOrdersAutoTransitions
from .marketplaces_orders_batches import MarketplacesOrdersBatches
from .marketplaces_orders_exports import MarketplacesOrdersExports
from .marketplaces_orders_global import MarketplacesOrdersGlobal
from .marketplaces_orders_list import MarketplacesOrdersList
from .marketplaces_orders_order import MarketplacesOrdersOrder
from .marketplaces_orders_subscriptions_subscriptions import MarketplacesOrdersSubscriptionsSubscriptions
from .marketplaces_orders_v3_batches import MarketplacesOrdersV3Batches
from .marketplaces_orders_v3_global import MarketplacesOrdersV3Global
from .marketplaces_orders_v3_list import MarketplacesOrdersV3List
from .marketplaces_orders_v3_order import MarketplacesOrdersV3Order
from .om_invoice_api_generation import OMInvoiceAPIGeneration
from .om_invoice_api_settings import OMInvoiceAPISettings
from .public_channels_public_channels import PublicChannelsPublicChannels
from .public_list_of_values_lov import PublicListOfValuesLOV
from .public_security_security import PublicSecuritySecurity
from .user_list_of_values_lov import UserListOfValuesLOV

SERVERS = [
    "https://api.beezup.com",
]
"""Contains the list of servers available to the SDK"""

class SDK:
    r"""# The REST API of BeezUP system
    ## Overview
    The REST APIs provide programmatic access to read and write BeezUP data. 
    Basically, with this API you will be able to do everything like you were with your browser on https://go.beezup.com !
    
    The main features are:
    - Register and manage your account
    - Create and manage and share your stores with your friends/co-workers.
    - Import your product catalog and schedule the auto importation
    - Search the channels your want to use
    - Configure your channels for your catalogs to export your product information:
        - cost and general settings
        - category and columns mappings
        - your will be able to create and manage your custom column
        - put in place exlusion filters based on simple conditions on your product data
        - override product values
        - get product vision for a channel catalog scope
    - Analyze and optimize your performance of your catalogs on all yours channels with different type of reportings by day, channel, category and by product.
    - Automatize your optimisation by using rules!
    - And of course... Manage your orders harvested from all your marketplaces:
        - Synchronize your orders in an uniformized way
        - Get the available actions and update the order status
    - ...and more!
    
    ## Authentication credentials
    The public API with the base path **/v2/public** have been put in place to give you an entry point to our system for the user registration, login and lost password. The public API does not require any credentials.
    We give you the some public list of values and public channels for our public commercial web site [www.beezup.com](http://www.beezup.com).
    
    The user API with the base path **/v2/user** requires a token which is available on this page:
    https://go.beezup.com/Account/MyAccount
    
    ## Things to keep in mind
    ### API Rate Limits
    - The BeezUP REST API is limited to 100 calls/minute.
    
    ### Media type
    The default media type for requests and responses is application/json. Where noted, some operations support other content types. If no additional content type is mentioned for a specific operation, then the media type is application/json.
    
    ### Required content type
    The required and default encoding for the request and responses is UTF8.
    
    ### Required date time format
    All our date time are formatted in ISO 8601 format: 2014-06-24T16:25:00Z.
    
    ### Base URL
    The Base URL of the BeezUP API Order Management REST API conforms to the following template.
    
    https://api.beezup.com
    
    All URLs returned by the BeezUP API are relative to this base URL, and all requests to the REST API must use this base URL template.
    
    You can test our API on https://api-docs.beezup.com/swagger-ui\\
    You can contact us on [gitter, #BeezUP/API](https://gitter.im/BeezUP/API)
    https://api-docs.beezup.com/ - Find the documentation for BeezUP's API here
    """
    analytics_global: AnalyticsGlobal
    analytics_optimisations: AnalyticsOptimisations
    analytics_reports: AnalyticsReports
    analytics_rules: AnalyticsRules
    analytics_statistics: AnalyticsStatistics
    analytics_tracking: AnalyticsTracking
    catalogs_auto: CatalogsAuto
    catalogs_catalog: CatalogsCatalog
    catalogs_global: CatalogsGlobal
    catalogs_importation_catalog_info: CatalogsImportationCatalogInfo
    catalogs_importation_process: CatalogsImportationProcess
    channel_catalogs_categories: ChannelCatalogsCategories
    channel_catalogs_column_mappings: ChannelCatalogsColumnMappings
    channel_catalogs_exclusion_filters: ChannelCatalogsExclusionFilters
    channel_catalogs_exportations: ChannelCatalogsExportations
    channel_catalogs_global: ChannelCatalogsGlobal
    channel_catalogs_legacy_tracking_global: ChannelCatalogsLegacyTrackingGlobal
    channel_catalogs_products: ChannelCatalogsProducts
    channel_catalogs_products_optimisation: ChannelCatalogsProductsOptimisation
    channel_catalogs_products_overrides: ChannelCatalogsProductsOverrides
    channel_catalogs_settings: ChannelCatalogsSettings
    channels_channels_global: ChannelsChannelsGlobal
    customer_account: CustomerAccount
    customer_alerts: CustomerAlerts
    customer_contracts: CustomerContracts
    customer_friends: CustomerFriends
    customer_global: CustomerGlobal
    customer_invoices: CustomerInvoices
    customer_rights: CustomerRights
    customer_security: CustomerSecurity
    customer_shares: CustomerShares
    customer_stores: CustomerStores
    marketplaces_channel_catalogs_global: MarketplacesChannelCatalogsGlobal
    marketplaces_channel_catalogs_publications: MarketplacesChannelCatalogsPublications
    marketplaces_channel_catalogs_settings: MarketplacesChannelCatalogsSettings
    marketplaces_orders_auto_transitions: MarketplacesOrdersAutoTransitions
    marketplaces_orders_batches: MarketplacesOrdersBatches
    marketplaces_orders_exports: MarketplacesOrdersExports
    marketplaces_orders_global: MarketplacesOrdersGlobal
    marketplaces_orders_list: MarketplacesOrdersList
    marketplaces_orders_order: MarketplacesOrdersOrder
    marketplaces_orders_subscriptions_subscriptions: MarketplacesOrdersSubscriptionsSubscriptions
    marketplaces_orders_v3_batches: MarketplacesOrdersV3Batches
    marketplaces_orders_v3_global: MarketplacesOrdersV3Global
    marketplaces_orders_v3_list: MarketplacesOrdersV3List
    marketplaces_orders_v3_order: MarketplacesOrdersV3Order
    om_invoice_api_generation: OMInvoiceAPIGeneration
    om_invoice_api_settings: OMInvoiceAPISettings
    public_channels_public_channels: PublicChannelsPublicChannels
    public_list_of_values_lov: PublicListOfValuesLOV
    public_security_security: PublicSecuritySecurity
    user_list_of_values_lov: UserListOfValuesLOV

    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str = SERVERS[0]
    _language: str = "python"
    _sdk_version: str = "0.0.1"
    _gen_version: str = "internal"

    def __init__(self,
                 server_url: str = None,
                 url_params: dict[str, str] = None,
                 client: requests_http.Session = None
                 ) -> None:
        """Instantiates the SDK configuring it with the provided parameters.
        
        :param server_url: The server URL to use for all operations
        :type server_url: str
        :param url_params: Parameters to optionally template the server URL with
        :type url_params: dict[str, str]
        :param client: The requests.Session HTTP client to use for all operations
        :type client: requests_http.Session        
        """
        self._client = requests_http.Session()
        
        
        if server_url is not None:
            if url_params is not None:
                self._server_url = utils.template_url(server_url, url_params)
            else:
                self._server_url = server_url

        if client is not None:
            self._client = client
        
        self._security_client = self._client
        

        self._init_sdks()
    
    def _init_sdks(self):
        self.analytics_global = AnalyticsGlobal(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.analytics_optimisations = AnalyticsOptimisations(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.analytics_reports = AnalyticsReports(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.analytics_rules = AnalyticsRules(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.analytics_statistics = AnalyticsStatistics(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.analytics_tracking = AnalyticsTracking(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.catalogs_auto = CatalogsAuto(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.catalogs_catalog = CatalogsCatalog(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.catalogs_global = CatalogsGlobal(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.catalogs_importation_catalog_info = CatalogsImportationCatalogInfo(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.catalogs_importation_process = CatalogsImportationProcess(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.channel_catalogs_categories = ChannelCatalogsCategories(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.channel_catalogs_column_mappings = ChannelCatalogsColumnMappings(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.channel_catalogs_exclusion_filters = ChannelCatalogsExclusionFilters(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.channel_catalogs_exportations = ChannelCatalogsExportations(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.channel_catalogs_global = ChannelCatalogsGlobal(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.channel_catalogs_legacy_tracking_global = ChannelCatalogsLegacyTrackingGlobal(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.channel_catalogs_products = ChannelCatalogsProducts(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.channel_catalogs_products_optimisation = ChannelCatalogsProductsOptimisation(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.channel_catalogs_products_overrides = ChannelCatalogsProductsOverrides(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.channel_catalogs_settings = ChannelCatalogsSettings(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.channels_channels_global = ChannelsChannelsGlobal(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.customer_account = CustomerAccount(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.customer_alerts = CustomerAlerts(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.customer_contracts = CustomerContracts(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.customer_friends = CustomerFriends(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.customer_global = CustomerGlobal(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.customer_invoices = CustomerInvoices(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.customer_rights = CustomerRights(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.customer_security = CustomerSecurity(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.customer_shares = CustomerShares(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.customer_stores = CustomerStores(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.marketplaces_channel_catalogs_global = MarketplacesChannelCatalogsGlobal(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.marketplaces_channel_catalogs_publications = MarketplacesChannelCatalogsPublications(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.marketplaces_channel_catalogs_settings = MarketplacesChannelCatalogsSettings(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.marketplaces_orders_auto_transitions = MarketplacesOrdersAutoTransitions(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.marketplaces_orders_batches = MarketplacesOrdersBatches(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.marketplaces_orders_exports = MarketplacesOrdersExports(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.marketplaces_orders_global = MarketplacesOrdersGlobal(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.marketplaces_orders_list = MarketplacesOrdersList(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.marketplaces_orders_order = MarketplacesOrdersOrder(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.marketplaces_orders_subscriptions_subscriptions = MarketplacesOrdersSubscriptionsSubscriptions(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.marketplaces_orders_v3_batches = MarketplacesOrdersV3Batches(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.marketplaces_orders_v3_global = MarketplacesOrdersV3Global(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.marketplaces_orders_v3_list = MarketplacesOrdersV3List(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.marketplaces_orders_v3_order = MarketplacesOrdersV3Order(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.om_invoice_api_generation = OMInvoiceAPIGeneration(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.om_invoice_api_settings = OMInvoiceAPISettings(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.public_channels_public_channels = PublicChannelsPublicChannels(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.public_list_of_values_lov = PublicListOfValuesLOV(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.public_security_security = PublicSecuritySecurity(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.user_list_of_values_lov = UserListOfValuesLOV(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
    