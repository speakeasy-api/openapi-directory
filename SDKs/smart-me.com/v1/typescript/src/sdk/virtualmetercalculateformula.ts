/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class VirtualMeterCalculateFormula {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Calculates a virtual meter from a formula.
   *             A meter is coded as ID("METERID")
   *
   * @remarks
   * Calculates a virtual meter from a formula.
   *
   *             A meter is coded as ID("METERID")
   *             Ariphmetical operators:
   *              ()  parentheses;
   *              +   plus (a + b);
   *              -  minus (a - b);
   *              *  multiplycation symbol (a * b);
   *              /  divide symbol (a / b);
   *             Example: (ID("63ac09cb-4e5f-4f3e-bd27-ad8c30bdfc0c") + ID("0209555e-9dc4-4e84-a166-a864488b4b12")) * 2
   */
  virtualMeterCalculateFormulaGet(
    req: operations.VirtualMeterCalculateFormulaGetRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.VirtualMeterCalculateFormulaGetResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.VirtualMeterCalculateFormulaGetRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/api/VirtualMeterCalculateFormula";

    const client: AxiosInstance = this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.VirtualMeterCalculateFormulaGetResponse =
        new operations.VirtualMeterCalculateFormulaGetResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.device = utils.objectToClass(httpRes?.data, shared.Device);
          }
          if (utils.matchContentType(contentType, `text/json`)) {
            res.device = utils.objectToClass(httpRes?.data, shared.Device);
          }
          if (utils.matchContentType(contentType, `application/xml`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          if (utils.matchContentType(contentType, `text/xml`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          break;
      }

      return res;
    });
  }
}
