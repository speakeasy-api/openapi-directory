/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import {
  objectToClass,
  SpeakeasyBase,
  SpeakeasyMetadata,
} from "../../../internal/utils";
import { Value } from "./value";
import { Expose, Transform } from "class-transformer";

/**
 * A map value.
 */
export class MapValue extends SpeakeasyBase {
  /**
   * The map's fields. The map keys represent field names. Field names matching the regular expression `__.*__` are reserved. Reserved field names are forbidden except in certain documented contexts. The map keys, represented as UTF-8, must not exceed 1,500 bytes and cannot be empty.
   */
  @SpeakeasyMetadata({ elemType: Value })
  @Expose({ name: "fields" })
  @Transform(
    ({ value }) => {
      const obj: Record<string, Value> = {};
      for (const key in value) {
        obj[key] = objectToClass(value[key], Value);
      }
      return obj;
    },
    { toClassOnly: true }
  )
  fields?: Record<string, Value>;
}
