"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import startauditmitigationactionstaskresponse as shared_startauditmitigationactionstaskresponse
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Any, Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class StartAuditMitigationActionsTaskRequestBodyTarget:
    r"""Used in MitigationActionParams, this information identifies the target findings to which the mitigation actions are applied. Only one entry appears."""
    
    audit_check_to_reason_code_filter: Optional[dict[str, list[str]]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('auditCheckToReasonCodeFilter'), 'exclude': lambda f: f is None }})  
    audit_task_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('auditTaskId'), 'exclude': lambda f: f is None }})  
    finding_ids: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('findingIds'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class StartAuditMitigationActionsTaskRequestBody:
    
    audit_check_to_actions_mapping: dict[str, list[str]] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('auditCheckToActionsMapping') }})
    r"""For an audit check, specifies which mitigation actions to apply. Those actions must be defined in your Amazon Web Services accounts."""  
    client_request_token: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('clientRequestToken') }})
    r"""Each audit mitigation task must have a unique client request token. If you try to start a new task with the same token as a task that already exists, an exception occurs. If you omit this value, a unique client request token is generated automatically."""  
    target: StartAuditMitigationActionsTaskRequestBodyTarget = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('target') }})
    r"""Used in MitigationActionParams, this information identifies the target findings to which the mitigation actions are applied. Only one entry appears."""  
    

@dataclasses.dataclass
class StartAuditMitigationActionsTaskRequest:
    
    request_body: StartAuditMitigationActionsTaskRequestBody = dataclasses.field(metadata={'request': { 'media_type': 'application/json' }})  
    task_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'taskId', 'style': 'simple', 'explode': False }})
    r"""A unique identifier for the task. You can use this identifier to check the status of the task or to cancel it."""  
    x_amz_algorithm: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Algorithm', 'style': 'simple', 'explode': False }})  
    x_amz_content_sha256: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Content-Sha256', 'style': 'simple', 'explode': False }})  
    x_amz_credential: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Credential', 'style': 'simple', 'explode': False }})  
    x_amz_date: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Date', 'style': 'simple', 'explode': False }})  
    x_amz_security_token: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Security-Token', 'style': 'simple', 'explode': False }})  
    x_amz_signature: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Signature', 'style': 'simple', 'explode': False }})  
    x_amz_signed_headers: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-SignedHeaders', 'style': 'simple', 'explode': False }})  
    

@dataclasses.dataclass
class StartAuditMitigationActionsTaskResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    internal_failure_exception: Optional[Any] = dataclasses.field(default=None)
    r"""InternalFailureException"""  
    invalid_request_exception: Optional[Any] = dataclasses.field(default=None)
    r"""InvalidRequestException"""  
    limit_exceeded_exception: Optional[Any] = dataclasses.field(default=None)
    r"""LimitExceededException"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    start_audit_mitigation_actions_task_response: Optional[shared_startauditmitigationactionstaskresponse.StartAuditMitigationActionsTaskResponse] = dataclasses.field(default=None)
    r"""Success"""  
    task_already_exists_exception: Optional[Any] = dataclasses.field(default=None)
    r"""TaskAlreadyExistsException"""  
    throttling_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ThrottlingException"""  
    