"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class IsInstanceUpgradeableResponse:
    r"""Response for checking if a notebook instance is upgradeable."""
    
    upgradeable: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('upgradeable'), 'exclude': lambda f: f is None }})
    r"""If an instance is upgradeable."""  
    upgrade_image: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('upgradeImage'), 'exclude': lambda f: f is None }})
    r"""The new image self link this instance will be upgraded to if calling the upgrade endpoint. This field will only be populated if field upgradeable is true."""  
    upgrade_info: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('upgradeInfo'), 'exclude': lambda f: f is None }})
    r"""Additional information about upgrade."""  
    upgrade_version: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('upgradeVersion'), 'exclude': lambda f: f is None }})
    r"""The version this instance will be upgraded to if calling the upgrade endpoint. This field will only be populated if field upgradeable is true."""  
    