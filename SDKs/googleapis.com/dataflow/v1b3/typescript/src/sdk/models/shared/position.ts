/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { ConcatPosition } from "./concatposition";
import { Expose, Type } from "class-transformer";

/**
 * Position defines a position within a collection of data. The value can be either the end position, a key (used with ordered collections), a byte offset, or a record index.
 */
export class Position extends SpeakeasyBase {
  /**
   * Position is a byte offset.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "byteOffset" })
  byteOffset?: string;

  /**
   * A position that encapsulates an inner position and an index for the inner position. A ConcatPosition can be used by a reader of a source that encapsulates a set of other sources.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "concatPosition" })
  @Type(() => ConcatPosition)
  concatPosition?: ConcatPosition;

  /**
   * Position is past all other positions. Also useful for the end position of an unbounded range.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "end" })
  end?: boolean;

  /**
   * Position is a string key, ordered lexicographically.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "key" })
  key?: string;

  /**
   * Position is a record index.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "recordIndex" })
  recordIndex?: string;

  /**
   * CloudPosition is a base64 encoded BatchShufflePosition (with FIXED sharding).
   */
  @SpeakeasyMetadata()
  @Expose({ name: "shufflePosition" })
  shufflePosition?: string;
}
