"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class AlbumsEssentials:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def create_album(self, request: operations.CreateAlbumRequest, security: operations.CreateAlbumSecurity) -> operations.CreateAlbumResponse:
        r"""Create an album"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.CreateAlbumRequest, base_url, '/users/{user_id}/albums', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateAlbumResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/vnd.vimeo.album+json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Album])
                res.album = out
        elif http_res.status_code in [400, 403]:
            if utils.match_content_type(content_type, 'application/vnd.vimeo.album+json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.LegacyError])
                res.legacy_error = out

        return res

    def create_album_alt1(self, request: operations.CreateAlbumAlt1RequestBody, security: operations.CreateAlbumAlt1Security) -> operations.CreateAlbumAlt1Response:
        r"""Create an album"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/me/albums'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateAlbumAlt1Response(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/vnd.vimeo.album+json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Album])
                res.album = out
        elif http_res.status_code in [400, 403]:
            if utils.match_content_type(content_type, 'application/vnd.vimeo.album+json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.LegacyError])
                res.legacy_error = out

        return res

    def delete_album(self, request: operations.DeleteAlbumRequest, security: operations.DeleteAlbumSecurity) -> operations.DeleteAlbumResponse:
        r"""Delete an album"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteAlbumRequest, base_url, '/users/{user_id}/albums/{album_id}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteAlbumResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 204:
            pass
        elif http_res.status_code in [403, 404]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.LegacyError])
                res.legacy_error = out

        return res

    def delete_album_alt1(self, request: operations.DeleteAlbumAlt1Request, security: operations.DeleteAlbumAlt1Security) -> operations.DeleteAlbumAlt1Response:
        r"""Delete an album"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteAlbumAlt1Request, base_url, '/me/albums/{album_id}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteAlbumAlt1Response(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 204:
            pass
        elif http_res.status_code in [403, 404]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.LegacyError])
                res.legacy_error = out

        return res

    def edit_album(self, request: operations.EditAlbumRequest, security: operations.EditAlbumSecurity) -> operations.EditAlbumResponse:
        r"""Edit an album"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.EditAlbumRequest, base_url, '/users/{user_id}/albums/{album_id}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PATCH', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.EditAlbumResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/vnd.vimeo.album+json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Album])
                res.album = out
        elif http_res.status_code in [400, 403, 404]:
            if utils.match_content_type(content_type, 'application/vnd.vimeo.album+json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.LegacyError])
                res.legacy_error = out

        return res

    def edit_album_alt1(self, request: operations.EditAlbumAlt1Request, security: operations.EditAlbumAlt1Security) -> operations.EditAlbumAlt1Response:
        r"""Edit an album"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.EditAlbumAlt1Request, base_url, '/me/albums/{album_id}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PATCH', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.EditAlbumAlt1Response(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/vnd.vimeo.album+json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Album])
                res.album = out
        elif http_res.status_code in [400, 403, 404]:
            if utils.match_content_type(content_type, 'application/vnd.vimeo.album+json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.LegacyError])
                res.legacy_error = out

        return res

    def get_album(self, request: operations.GetAlbumRequest) -> operations.GetAlbumResponse:
        r"""Get a specific album"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetAlbumRequest, base_url, '/users/{user_id}/albums/{album_id}', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetAlbumResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/vnd.vimeo.album+json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Album])
                res.album = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/vnd.vimeo.album+json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.LegacyError])
                res.legacy_error = out

        return res

    def get_album_alt1(self, request: operations.GetAlbumAlt1Request) -> operations.GetAlbumAlt1Response:
        r"""Get a specific album"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetAlbumAlt1Request, base_url, '/me/albums/{album_id}', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetAlbumAlt1Response(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/vnd.vimeo.album+json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Album])
                res.album = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/vnd.vimeo.album+json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.LegacyError])
                res.legacy_error = out

        return res

    def get_albums(self, request: operations.GetAlbumsRequest) -> operations.GetAlbumsResponse:
        r"""Get all the albums that belong to a user"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetAlbumsRequest, base_url, '/users/{user_id}/albums', request)
        
        query_params = utils.get_query_params(operations.GetAlbumsRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetAlbumsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.Album]])
                res.albums = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.LegacyError])
                res.legacy_error = out

        return res

    def get_albums_alt1(self, request: operations.GetAlbumsAlt1Request) -> operations.GetAlbumsAlt1Response:
        r"""Get all the albums that belong to a user"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/me/albums'
        
        query_params = utils.get_query_params(operations.GetAlbumsAlt1Request, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetAlbumsAlt1Response(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.Album]])
                res.albums = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.LegacyError])
                res.legacy_error = out

        return res

    