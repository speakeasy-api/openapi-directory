// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"bytes"
	"encoding/json"
	"errors"
	"fmt"
)

type AwsLambdaRuleResponseRuleTypeEnum string

const (
	AwsLambdaRuleResponseRuleTypeEnumAwsLambda AwsLambdaRuleResponseRuleTypeEnum = "aws/lambda"
)

func (e AwsLambdaRuleResponseRuleTypeEnum) ToPointer() *AwsLambdaRuleResponseRuleTypeEnum {
	return &e
}

func (e *AwsLambdaRuleResponseRuleTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "aws/lambda":
		*e = AwsLambdaRuleResponseRuleTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AwsLambdaRuleResponseRuleTypeEnum: %v", v)
	}
}

type AwsLambdaRuleResponseTargetAuthenticationType string

const (
	AwsLambdaRuleResponseTargetAuthenticationTypeAssumeRole  AwsLambdaRuleResponseTargetAuthenticationType = "assumeRole"
	AwsLambdaRuleResponseTargetAuthenticationTypeCredentials AwsLambdaRuleResponseTargetAuthenticationType = "credentials"
)

type AwsLambdaRuleResponseTargetAuthentication struct {
	AwsAccessKeysResponse *AwsAccessKeysResponse
	AwsAssumeRole         *AwsAssumeRole

	Type AwsLambdaRuleResponseTargetAuthenticationType
}

func CreateAwsLambdaRuleResponseTargetAuthenticationAssumeRole(assumeRole AwsAssumeRole) AwsLambdaRuleResponseTargetAuthentication {
	typ := AwsLambdaRuleResponseTargetAuthenticationTypeAssumeRole
	typStr := AwsAssumeRoleAuthenticationModeEnum(typ)
	assumeRole.AuthenticationMode = &typStr

	return AwsLambdaRuleResponseTargetAuthentication{
		AwsAssumeRole: &assumeRole,
		Type:          typ,
	}
}

func CreateAwsLambdaRuleResponseTargetAuthenticationCredentials(credentials AwsAccessKeysResponse) AwsLambdaRuleResponseTargetAuthentication {
	typ := AwsLambdaRuleResponseTargetAuthenticationTypeCredentials
	typStr := AwsAccessKeysResponseAuthenticationModeEnum(typ)
	credentials.AuthenticationMode = &typStr

	return AwsLambdaRuleResponseTargetAuthentication{
		AwsAccessKeysResponse: &credentials,
		Type:                  typ,
	}
}

func (u *AwsLambdaRuleResponseTargetAuthentication) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	type discriminator struct {
		AuthenticationMode string
	}

	dis := new(discriminator)
	if err := json.Unmarshal(data, &dis); err != nil {
		return fmt.Errorf("could not unmarshal discriminator: %w", err)
	}

	switch dis.AuthenticationMode {
	case "assumeRole":
		d = json.NewDecoder(bytes.NewReader(data))
		d.DisallowUnknownFields()
		awsAssumeRole := new(AwsAssumeRole)
		if err := d.Decode(&awsAssumeRole); err != nil {
			return fmt.Errorf("could not unmarshal expected type: %w", err)
		}

		u.AwsAssumeRole = awsAssumeRole
		u.Type = AwsLambdaRuleResponseTargetAuthenticationTypeAssumeRole
		return nil
	case "credentials":
		d = json.NewDecoder(bytes.NewReader(data))
		d.DisallowUnknownFields()
		awsAccessKeysResponse := new(AwsAccessKeysResponse)
		if err := d.Decode(&awsAccessKeysResponse); err != nil {
			return fmt.Errorf("could not unmarshal expected type: %w", err)
		}

		u.AwsAccessKeysResponse = awsAccessKeysResponse
		u.Type = AwsLambdaRuleResponseTargetAuthenticationTypeCredentials
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u AwsLambdaRuleResponseTargetAuthentication) MarshalJSON() ([]byte, error) {
	if u.AwsAccessKeysResponse != nil {
		return json.Marshal(u.AwsAccessKeysResponse)
	}

	if u.AwsAssumeRole != nil {
		return json.Marshal(u.AwsAssumeRole)
	}

	return nil, nil
}

type AwsLambdaRuleResponseTarget struct {
	Authentication AwsLambdaRuleResponseTargetAuthentication `json:"authentication"`
	Enveloped      *bool                                     `json:"enveloped,omitempty"`
	Format         *string                                   `json:"format,omitempty"`
	FunctionName   string                                    `json:"functionName"`
	Region         string                                    `json:"region"`
}

type AwsLambdaRuleResponse struct {
	Links       map[string]interface{}            `json:"_links,omitempty"`
	AppID       *string                           `json:"appId,omitempty"`
	Created     *float64                          `json:"created,omitempty"`
	ID          *string                           `json:"id,omitempty"`
	Modified    *float64                          `json:"modified,omitempty"`
	RequestMode string                            `json:"requestMode"`
	RuleType    AwsLambdaRuleResponseRuleTypeEnum `json:"ruleType"`
	Source      RuleSource                        `json:"source"`
	Status      *string                           `json:"status,omitempty"`
	Target      AwsLambdaRuleResponseTarget       `json:"target"`
	Version     *string                           `json:"version,omitempty"`
}
