// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"openapi/pkg/types"
)

// TimeSlicedElpNetMetricsGeneratedReasonEnum - Specify the reason why the metrics are generated by the certain order action.
type TimeSlicedElpNetMetricsGeneratedReasonEnum string

const (
	TimeSlicedElpNetMetricsGeneratedReasonEnumIncreaseQuantity TimeSlicedElpNetMetricsGeneratedReasonEnum = "IncreaseQuantity"
	TimeSlicedElpNetMetricsGeneratedReasonEnumDecreaseQuantity TimeSlicedElpNetMetricsGeneratedReasonEnum = "DecreaseQuantity"
	TimeSlicedElpNetMetricsGeneratedReasonEnumChangePrice      TimeSlicedElpNetMetricsGeneratedReasonEnum = "ChangePrice"
	TimeSlicedElpNetMetricsGeneratedReasonEnumExtension        TimeSlicedElpNetMetricsGeneratedReasonEnum = "Extension"
	TimeSlicedElpNetMetricsGeneratedReasonEnumContraction      TimeSlicedElpNetMetricsGeneratedReasonEnum = "Contraction"
)

func (e *TimeSlicedElpNetMetricsGeneratedReasonEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "IncreaseQuantity":
		fallthrough
	case "DecreaseQuantity":
		fallthrough
	case "ChangePrice":
		fallthrough
	case "Extension":
		fallthrough
	case "Contraction":
		*e = TimeSlicedElpNetMetricsGeneratedReasonEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for TimeSlicedElpNetMetricsGeneratedReasonEnum: %s", s)
	}
}

// TimeSlicedElpNetMetricsTypeEnum - The type for ELP is always "Regular".
type TimeSlicedElpNetMetricsTypeEnum string

const (
	TimeSlicedElpNetMetricsTypeEnumRegular  TimeSlicedElpNetMetricsTypeEnum = "Regular"
	TimeSlicedElpNetMetricsTypeEnumDiscount TimeSlicedElpNetMetricsTypeEnum = "Discount"
)

func (e *TimeSlicedElpNetMetricsTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Regular":
		fallthrough
	case "Discount":
		*e = TimeSlicedElpNetMetricsTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for TimeSlicedElpNetMetricsTypeEnum: %s", s)
	}
}

type TimeSlicedElpNetMetrics struct {
	// The extended list price which is calculated by the original product catalog list price multiplied by the delta quantity.
	Amount *float64 `json:"amount,omitempty"`
	// The latest date that the metric applies.
	EndDate *types.Date `json:"endDate,omitempty"`
	// Specify the reason why the metrics are generated by the certain order action.
	//
	GeneratedReason *TimeSlicedElpNetMetricsGeneratedReasonEnum `json:"generatedReason,omitempty"`
	// The acount number of the billing account that is billed for the subscription.
	InvoiceOwner *string `json:"invoiceOwner,omitempty"`
	// The ID of the order item referenced by the order metrics.
	OrderItemID *string `json:"orderItemId,omitempty"`
	// The earliest date that the metric applies.
	StartDate *types.Date `json:"startDate,omitempty"`
	// The acount number of the billing account that owns the subscription.
	SubscriptionOwner *string `json:"subscriptionOwner,omitempty"`
	// The tax amount in the metric when the tax permission is enabled.
	Tax        *float64 `json:"tax,omitempty"`
	TermNumber *float64 `json:"termNumber,omitempty"`
	// The type for ELP is always "Regular".
	Type *TimeSlicedElpNetMetricsTypeEnum `json:"type,omitempty"`
}
