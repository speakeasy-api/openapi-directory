"use strict";
/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CodespaceMachine = exports.CodespaceMachinePrebuildAvailabilityEnum = void 0;
var utils_1 = require("../../../internal/utils");
var class_transformer_1 = require("class-transformer");
/**
 * Whether a prebuild is currently available when creating a codespace for this machine and repository. If a branch was not specified as a ref, the default branch will be assumed. Value will be "null" if prebuilds are not supported or prebuild availability could not be determined. Value will be "none" if no prebuild is available. Latest values "ready" and "in_progress" indicate the prebuild availability status.
 */
var CodespaceMachinePrebuildAvailabilityEnum;
(function (CodespaceMachinePrebuildAvailabilityEnum) {
    CodespaceMachinePrebuildAvailabilityEnum["None"] = "none";
    CodespaceMachinePrebuildAvailabilityEnum["Ready"] = "ready";
    CodespaceMachinePrebuildAvailabilityEnum["InProgress"] = "in_progress";
})(CodespaceMachinePrebuildAvailabilityEnum = exports.CodespaceMachinePrebuildAvailabilityEnum || (exports.CodespaceMachinePrebuildAvailabilityEnum = {}));
/**
 * A description of the machine powering a codespace.
 */
var CodespaceMachine = /** @class */ (function (_super) {
    __extends(CodespaceMachine, _super);
    function CodespaceMachine() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "cpus" }),
        __metadata("design:type", Number)
    ], CodespaceMachine.prototype, "cpus", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "display_name" }),
        __metadata("design:type", String)
    ], CodespaceMachine.prototype, "displayName", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "memory_in_bytes" }),
        __metadata("design:type", Number)
    ], CodespaceMachine.prototype, "memoryInBytes", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "name" }),
        __metadata("design:type", String)
    ], CodespaceMachine.prototype, "name", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "operating_system" }),
        __metadata("design:type", String)
    ], CodespaceMachine.prototype, "operatingSystem", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "prebuild_availability" }),
        __metadata("design:type", String)
    ], CodespaceMachine.prototype, "prebuildAvailability", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "storage_in_bytes" }),
        __metadata("design:type", Number)
    ], CodespaceMachine.prototype, "storageInBytes", void 0);
    return CodespaceMachine;
}(utils_1.SpeakeasyBase));
exports.CodespaceMachine = CodespaceMachine;
