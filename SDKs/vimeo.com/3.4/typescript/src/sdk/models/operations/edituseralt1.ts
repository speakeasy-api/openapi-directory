/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

/**
 * Who can comment on the video. This value becomes the default comment setting for all future videos that this user uploads.
 */
export enum EditUserAlt1RequestBodyVideosPrivacyCommentsEnum {
  Anybody = "anybody",
  Contacts = "contacts",
  Nobody = "nobody",
}

/**
 * The privacy for embed videos. The `whitelist` value enables you to define all valid embed domains. See our [documentation](https://developer.vimeo.com/api/endpoints/videos#/{video_id}/privacy/domains) for adding and removing domains.
 */
export enum EditUserAlt1RequestBodyVideosPrivacyEmbedEnum {
  Private = "private",
  Public = "public",
  Whitelist = "whitelist",
}

/**
 * Who can view the video. This value becomes the default view setting for all future videos that this user uploads.
 */
export enum EditUserAlt1RequestBodyVideosPrivacyViewEnum {
  Anybody = "anybody",
  Contacts = "contacts",
  Disable = "disable",
  Nobody = "nobody",
  Password = "password",
  Unlisted = "unlisted",
  Users = "users",
}

export class EditUserAlt1RequestBodyVideosPrivacy extends SpeakeasyBase {
  /**
   * Whether a user can add the video to an album, channel, or group. This value becomes the default add setting for all future videos uploaded by the user.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "add" })
  add?: boolean;

  /**
   * Who can comment on the video. This value becomes the default comment setting for all future videos that this user uploads.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "comments" })
  comments?: EditUserAlt1RequestBodyVideosPrivacyCommentsEnum;

  /**
   * Whether a user can download the video. This value becomes the default download setting for all future videos that this user uploads.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "download" })
  download?: boolean;

  /**
   * The privacy for embed videos. The `whitelist` value enables you to define all valid embed domains. See our [documentation](https://developer.vimeo.com/api/endpoints/videos#/{video_id}/privacy/domains) for adding and removing domains.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "embed" })
  embed?: EditUserAlt1RequestBodyVideosPrivacyEmbedEnum;

  /**
   * Who can view the video. This value becomes the default view setting for all future videos that this user uploads.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "view" })
  view?: EditUserAlt1RequestBodyVideosPrivacyViewEnum;
}

export class EditUserAlt1RequestBodyVideos extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "privacy" })
  @Type(() => EditUserAlt1RequestBodyVideosPrivacy)
  privacy?: EditUserAlt1RequestBodyVideosPrivacy;
}

export class EditUserAlt1RequestBody extends SpeakeasyBase {
  /**
   * The user's bio.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "bio" })
  bio?: string;

  /**
   * A list of values describing the content in this video. Find the full list in the [/contentratings](https://developer.vimeo.com/api/endpoints/videos#GET/contentratings) endpoint. You must provide a comma-separated list if you are using a query string or an array if you are using JSON.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "content_filter" })
  contentFilter?: string[];

  /**
   * The user's custom Vimeo URL slug.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "link" })
  link?: string;

  /**
   * The user's location.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "location" })
  location?: string;

  /**
   * The user's display name.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name?: string;

  /**
   * The default password for all future videos that this user uploads. To use this field, the `videos.privacy.view` field must be `password`.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "password" })
  password?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "videos" })
  @Type(() => EditUserAlt1RequestBodyVideos)
  videos?: EditUserAlt1RequestBodyVideos;
}

export class EditUserAlt1Response extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * The user was edited.
   */
  @SpeakeasyMetadata()
  user?: shared.User;
}
