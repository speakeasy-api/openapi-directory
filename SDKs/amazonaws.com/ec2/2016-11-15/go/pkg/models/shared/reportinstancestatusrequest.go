// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"time"
)

type ReportInstanceStatusRequestReasonCodesEnum string

const (
	ReportInstanceStatusRequestReasonCodesEnumInstanceStuckInState     ReportInstanceStatusRequestReasonCodesEnum = "instance-stuck-in-state"
	ReportInstanceStatusRequestReasonCodesEnumUnresponsive             ReportInstanceStatusRequestReasonCodesEnum = "unresponsive"
	ReportInstanceStatusRequestReasonCodesEnumNotAcceptingCredentials  ReportInstanceStatusRequestReasonCodesEnum = "not-accepting-credentials"
	ReportInstanceStatusRequestReasonCodesEnumPasswordNotAvailable     ReportInstanceStatusRequestReasonCodesEnum = "password-not-available"
	ReportInstanceStatusRequestReasonCodesEnumPerformanceNetwork       ReportInstanceStatusRequestReasonCodesEnum = "performance-network"
	ReportInstanceStatusRequestReasonCodesEnumPerformanceInstanceStore ReportInstanceStatusRequestReasonCodesEnum = "performance-instance-store"
	ReportInstanceStatusRequestReasonCodesEnumPerformanceEbsVolume     ReportInstanceStatusRequestReasonCodesEnum = "performance-ebs-volume"
	ReportInstanceStatusRequestReasonCodesEnumPerformanceOther         ReportInstanceStatusRequestReasonCodesEnum = "performance-other"
	ReportInstanceStatusRequestReasonCodesEnumOther                    ReportInstanceStatusRequestReasonCodesEnum = "other"
)

func (e ReportInstanceStatusRequestReasonCodesEnum) ToPointer() *ReportInstanceStatusRequestReasonCodesEnum {
	return &e
}

func (e *ReportInstanceStatusRequestReasonCodesEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "instance-stuck-in-state":
		fallthrough
	case "unresponsive":
		fallthrough
	case "not-accepting-credentials":
		fallthrough
	case "password-not-available":
		fallthrough
	case "performance-network":
		fallthrough
	case "performance-instance-store":
		fallthrough
	case "performance-ebs-volume":
		fallthrough
	case "performance-other":
		fallthrough
	case "other":
		*e = ReportInstanceStatusRequestReasonCodesEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ReportInstanceStatusRequestReasonCodesEnum: %v", v)
	}
}

// ReportInstanceStatusRequestStatusEnum - The status of all instances listed.
type ReportInstanceStatusRequestStatusEnum string

const (
	ReportInstanceStatusRequestStatusEnumOk       ReportInstanceStatusRequestStatusEnum = "ok"
	ReportInstanceStatusRequestStatusEnumImpaired ReportInstanceStatusRequestStatusEnum = "impaired"
)

func (e ReportInstanceStatusRequestStatusEnum) ToPointer() *ReportInstanceStatusRequestStatusEnum {
	return &e
}

func (e *ReportInstanceStatusRequestStatusEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ok":
		fallthrough
	case "impaired":
		*e = ReportInstanceStatusRequestStatusEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ReportInstanceStatusRequestStatusEnum: %v", v)
	}
}

type ReportInstanceStatusRequest struct {
	Description *string
	DryRun      *bool
	EndTime     *time.Time
	Instances   []string
	ReasonCodes []ReportInstanceStatusRequestReasonCodesEnum
	StartTime   *time.Time
	Status      ReportInstanceStatusRequestStatusEnum
}
