<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Volumes 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Return a list of associated books.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\BooksVolumesAssociatedListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\BooksVolumesAssociatedListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\BooksVolumesAssociatedListResponse
     */
	public function booksVolumesAssociatedList(
        \OpenAPI\OpenAPI\Models\Operations\BooksVolumesAssociatedListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\BooksVolumesAssociatedListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\BooksVolumesAssociatedListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/books/v1/volumes/{volumeId}/associated', \OpenAPI\OpenAPI\Models\Operations\BooksVolumesAssociatedListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\BooksVolumesAssociatedListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\BooksVolumesAssociatedListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->volumes = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Volumes', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets volume information for a single volume.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\BooksVolumesGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\BooksVolumesGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\BooksVolumesGetResponse
     */
	public function booksVolumesGet(
        \OpenAPI\OpenAPI\Models\Operations\BooksVolumesGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\BooksVolumesGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\BooksVolumesGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/books/v1/volumes/{volumeId}', \OpenAPI\OpenAPI\Models\Operations\BooksVolumesGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\BooksVolumesGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\BooksVolumesGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->volume = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Volume', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Performs a book search.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\BooksVolumesListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\BooksVolumesListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\BooksVolumesListResponse
     */
	public function booksVolumesList(
        \OpenAPI\OpenAPI\Models\Operations\BooksVolumesListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\BooksVolumesListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\BooksVolumesListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/books/v1/volumes');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\BooksVolumesListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\BooksVolumesListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->volumes = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Volumes', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Return a list of books in My Library.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\BooksVolumesMybooksListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\BooksVolumesMybooksListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\BooksVolumesMybooksListResponse
     */
	public function booksVolumesMybooksList(
        \OpenAPI\OpenAPI\Models\Operations\BooksVolumesMybooksListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\BooksVolumesMybooksListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\BooksVolumesMybooksListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/books/v1/volumes/mybooks');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\BooksVolumesMybooksListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\BooksVolumesMybooksListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->volumes = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Volumes', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Return a list of recommended books for the current user.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\BooksVolumesRecommendedListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\BooksVolumesRecommendedListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\BooksVolumesRecommendedListResponse
     */
	public function booksVolumesRecommendedList(
        \OpenAPI\OpenAPI\Models\Operations\BooksVolumesRecommendedListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\BooksVolumesRecommendedListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\BooksVolumesRecommendedListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/books/v1/volumes/recommended');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\BooksVolumesRecommendedListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\BooksVolumesRecommendedListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->volumes = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Volumes', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Rate a recommended book for the current user.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\BooksVolumesRecommendedRateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\BooksVolumesRecommendedRateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\BooksVolumesRecommendedRateResponse
     */
	public function booksVolumesRecommendedRate(
        \OpenAPI\OpenAPI\Models\Operations\BooksVolumesRecommendedRateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\BooksVolumesRecommendedRateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\BooksVolumesRecommendedRateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/books/v1/volumes/recommended/rate');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\BooksVolumesRecommendedRateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\BooksVolumesRecommendedRateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->booksVolumesRecommendedRateResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BooksVolumesRecommendedRateResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Return a list of books uploaded by the current user.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\BooksVolumesUseruploadedListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\BooksVolumesUseruploadedListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\BooksVolumesUseruploadedListResponse
     */
	public function booksVolumesUseruploadedList(
        \OpenAPI\OpenAPI\Models\Operations\BooksVolumesUseruploadedListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\BooksVolumesUseruploadedListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\BooksVolumesUseruploadedListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/books/v1/volumes/useruploaded');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\BooksVolumesUseruploadedListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\BooksVolumesUseruploadedListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->volumes = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Volumes', 'json');
            }
        }

        return $response;
    }
}