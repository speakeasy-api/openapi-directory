/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Notification - &lt;p&gt;A notification that's associated with a budget. A budget can have up to ten notifications. &lt;/p&gt; &lt;p&gt;Each notification must have at least one subscriber. A notification can have one SNS subscriber and up to 10 email subscribers, for a total of 11 subscribers.&lt;/p&gt; &lt;p&gt;For example, if you have a budget for 200 dollars and you want to be notified when you go over 160 dollars, create a notification with the following parameters:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;A notificationType of &lt;code&gt;ACTUAL&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;A &lt;code&gt;thresholdType&lt;/code&gt; of &lt;code&gt;PERCENTAGE&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;A &lt;code&gt;comparisonOperator&lt;/code&gt; of &lt;code&gt;GREATER_THAN&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;A notification &lt;code&gt;threshold&lt;/code&gt; of &lt;code&gt;80&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
 */
public class Notification {
    @JsonProperty("ComparisonOperator")
    public ComparisonOperatorEnum comparisonOperator;
    public Notification withComparisonOperator(ComparisonOperatorEnum comparisonOperator) {
        this.comparisonOperator = comparisonOperator;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("NotificationState")
    public NotificationStateEnum notificationState;
    public Notification withNotificationState(NotificationStateEnum notificationState) {
        this.notificationState = notificationState;
        return this;
    }
    
    @JsonProperty("NotificationType")
    public NotificationTypeEnum notificationType;
    public Notification withNotificationType(NotificationTypeEnum notificationType) {
        this.notificationType = notificationType;
        return this;
    }
    
    @JsonProperty("Threshold")
    public Double threshold;
    public Notification withThreshold(Double threshold) {
        this.threshold = threshold;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ThresholdType")
    public ThresholdTypeEnum thresholdType;
    public Notification withThresholdType(ThresholdTypeEnum thresholdType) {
        this.thresholdType = thresholdType;
        return this;
    }
    
}
