/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
import { Expose, Transform, Type } from "class-transformer";

/**
 * Contains details about additional route preferences for requests that specify <code>TravelMode</code> as <code>Car</code>.
 */
export class CalculateRouteMatrixRequestBodyCarModeOptions extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "AvoidFerries" })
  avoidFerries?: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "AvoidTolls" })
  avoidTolls?: boolean;
}

/**
 * <p>Set the unit system to specify the distance.</p> <p>Default Value: <code>Kilometers</code> </p>
 */
export enum CalculateRouteMatrixRequestBodyDistanceUnitEnum {
  Kilometers = "Kilometers",
  Miles = "Miles",
}

/**
 * <p>Specifies the mode of transport when calculating a route. Used in estimating the speed of travel and road compatibility.</p> <p>The <code>TravelMode</code> you specify also determines how you specify route preferences: </p> <ul> <li> <p>If traveling by <code>Car</code> use the <code>CarModeOptions</code> parameter.</p> </li> <li> <p>If traveling by <code>Truck</code> use the <code>TruckModeOptions</code> parameter.</p> </li> </ul> <note> <p> <code>Bicycle</code> or <code>Motorcycle</code> are only valid when using <code>Grab</code> as a data provider, and only within Southeast Asia.</p> <p> <code>Truck</code> is not available for Grab.</p> <p>For more information about using Grab as a data provider, see <a href="https://docs.aws.amazon.com/location/latest/developerguide/grab.html">GrabMaps</a> in the <i>Amazon Location Service Developer Guide</i>.</p> </note> <p>Default Value: <code>Car</code> </p>
 */
export enum CalculateRouteMatrixRequestBodyTravelModeEnum {
  Car = "Car",
  Truck = "Truck",
  Walking = "Walking",
  Bicycle = "Bicycle",
  Motorcycle = "Motorcycle",
}

/**
 * Contains details about additional route preferences for requests that specify <code>TravelMode</code> as <code>Truck</code>.
 */
export class CalculateRouteMatrixRequestBodyTruckModeOptions extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "AvoidFerries" })
  avoidFerries?: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "AvoidTolls" })
  avoidTolls?: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "Dimensions" })
  @Type(() => shared.TruckDimensions)
  dimensions?: shared.TruckDimensions;

  @SpeakeasyMetadata()
  @Expose({ name: "Weight" })
  @Type(() => shared.TruckWeight)
  weight?: shared.TruckWeight;
}

export class CalculateRouteMatrixRequestBody extends SpeakeasyBase {
  /**
   * Contains details about additional route preferences for requests that specify <code>TravelMode</code> as <code>Car</code>.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "CarModeOptions" })
  @Type(() => CalculateRouteMatrixRequestBodyCarModeOptions)
  carModeOptions?: CalculateRouteMatrixRequestBodyCarModeOptions;

  /**
   * <p>Sets the time of departure as the current time. Uses the current time to calculate the route matrix. You can't set both <code>DepartureTime</code> and <code>DepartNow</code>. If neither is set, the best time of day to travel with the best traffic conditions is used to calculate the route matrix.</p> <p>Default Value: <code>false</code> </p> <p>Valid Values: <code>false</code> | <code>true</code> </p>
   */
  @SpeakeasyMetadata()
  @Expose({ name: "DepartNow" })
  departNow?: boolean;

  /**
   * <p>The list of departure (origin) positions for the route matrix. An array of points, each of which is itself a 2-value array defined in <a href="https://earth-info.nga.mil/GandG/wgs84/index.html">WGS 84</a> format: <code>[longitude, latitude]</code>. For example, <code>[-123.115, 49.285]</code>.</p> <important> <p>Depending on the data provider selected in the route calculator resource there may be additional restrictions on the inputs you can choose. See <a href="https://docs.aws.amazon.com/location/latest/developerguide/calculate-route-matrix.html#matrix-routing-position-limits"> Position restrictions</a> in the <i>Amazon Location Service Developer Guide</i>.</p> </important> <note> <p>For route calculators that use Esri as the data provider, if you specify a departure that's not located on a road, Amazon Location <a href="https://docs.aws.amazon.com/location/latest/developerguide/snap-to-nearby-road.html"> moves the position to the nearest road</a>. The snapped value is available in the result in <code>SnappedDeparturePositions</code>.</p> </note> <p>Valid Values: <code>[-180 to 180,-90 to 90]</code> </p>
   */
  @SpeakeasyMetadata()
  @Expose({ name: "DeparturePositions" })
  departurePositions: number[][];

  /**
   * <p>Specifies the desired time of departure. Uses the given time to calculate the route matrix. You can't set both <code>DepartureTime</code> and <code>DepartNow</code>. If neither is set, the best time of day to travel with the best traffic conditions is used to calculate the route matrix.</p> <note> <p>Setting a departure time in the past returns a <code>400 ValidationException</code> error.</p> </note> <ul> <li> <p>In <a href="https://www.iso.org/iso-8601-date-and-time-format.html">ISO 8601</a> format: <code>YYYY-MM-DDThh:mm:ss.sssZ</code>. For example, <code>2020â€“07-2T12:15:20.000Z+01:00</code> </p> </li> </ul>
   */
  @SpeakeasyMetadata()
  @Expose({ name: "DepartureTime" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  departureTime?: Date;

  /**
   * <p>The list of destination positions for the route matrix. An array of points, each of which is itself a 2-value array defined in <a href="https://earth-info.nga.mil/GandG/wgs84/index.html">WGS 84</a> format: <code>[longitude, latitude]</code>. For example, <code>[-122.339, 47.615]</code> </p> <important> <p>Depending on the data provider selected in the route calculator resource there may be additional restrictions on the inputs you can choose. See <a href="https://docs.aws.amazon.com/location/latest/developerguide/calculate-route-matrix.html#matrix-routing-position-limits"> Position restrictions</a> in the <i>Amazon Location Service Developer Guide</i>.</p> </important> <note> <p>For route calculators that use Esri as the data provider, if you specify a destination that's not located on a road, Amazon Location <a href="https://docs.aws.amazon.com/location/latest/developerguide/snap-to-nearby-road.html"> moves the position to the nearest road</a>. The snapped value is available in the result in <code>SnappedDestinationPositions</code>.</p> </note> <p>Valid Values: <code>[-180 to 180,-90 to 90]</code> </p>
   */
  @SpeakeasyMetadata()
  @Expose({ name: "DestinationPositions" })
  destinationPositions: number[][];

  /**
   * <p>Set the unit system to specify the distance.</p> <p>Default Value: <code>Kilometers</code> </p>
   */
  @SpeakeasyMetadata()
  @Expose({ name: "DistanceUnit" })
  distanceUnit?: CalculateRouteMatrixRequestBodyDistanceUnitEnum;

  /**
   * <p>Specifies the mode of transport when calculating a route. Used in estimating the speed of travel and road compatibility.</p> <p>The <code>TravelMode</code> you specify also determines how you specify route preferences: </p> <ul> <li> <p>If traveling by <code>Car</code> use the <code>CarModeOptions</code> parameter.</p> </li> <li> <p>If traveling by <code>Truck</code> use the <code>TruckModeOptions</code> parameter.</p> </li> </ul> <note> <p> <code>Bicycle</code> or <code>Motorcycle</code> are only valid when using <code>Grab</code> as a data provider, and only within Southeast Asia.</p> <p> <code>Truck</code> is not available for Grab.</p> <p>For more information about using Grab as a data provider, see <a href="https://docs.aws.amazon.com/location/latest/developerguide/grab.html">GrabMaps</a> in the <i>Amazon Location Service Developer Guide</i>.</p> </note> <p>Default Value: <code>Car</code> </p>
   */
  @SpeakeasyMetadata()
  @Expose({ name: "TravelMode" })
  travelMode?: CalculateRouteMatrixRequestBodyTravelModeEnum;

  /**
   * Contains details about additional route preferences for requests that specify <code>TravelMode</code> as <code>Truck</code>.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "TruckModeOptions" })
  @Type(() => CalculateRouteMatrixRequestBodyTruckModeOptions)
  truckModeOptions?: CalculateRouteMatrixRequestBodyTruckModeOptions;
}

export class CalculateRouteMatrixRequest extends SpeakeasyBase {
  /**
   * The name of the route calculator resource that you want to use to calculate the route matrix.
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=CalculatorName",
  })
  calculatorName: string;

  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  requestBody: CalculateRouteMatrixRequestBody;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Algorithm",
  })
  xAmzAlgorithm?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Content-Sha256",
  })
  xAmzContentSha256?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Credential",
  })
  xAmzCredential?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Date",
  })
  xAmzDate?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Security-Token",
  })
  xAmzSecurityToken?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Signature",
  })
  xAmzSignature?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-SignedHeaders",
  })
  xAmzSignedHeaders?: string;
}

export class CalculateRouteMatrixResponse extends SpeakeasyBase {
  /**
   * AccessDeniedException
   */
  @SpeakeasyMetadata()
  accessDeniedException?: any;

  /**
   * Success
   */
  @SpeakeasyMetadata()
  calculateRouteMatrixResponse?: shared.CalculateRouteMatrixResponse;

  @SpeakeasyMetadata()
  contentType: string;

  /**
   * InternalServerException
   */
  @SpeakeasyMetadata()
  internalServerException?: any;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * ResourceNotFoundException
   */
  @SpeakeasyMetadata()
  resourceNotFoundException?: any;

  /**
   * ThrottlingException
   */
  @SpeakeasyMetadata()
  throttlingException?: any;

  /**
   * ValidationException
   */
  @SpeakeasyMetadata()
  validationException?: any;
}
