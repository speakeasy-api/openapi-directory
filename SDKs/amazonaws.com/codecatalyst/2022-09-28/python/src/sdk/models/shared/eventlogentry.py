"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from ..shared import eventpayload as shared_eventpayload
from ..shared import operationtype_enum as shared_operationtype_enum
from ..shared import projectinformation as shared_projectinformation
from ..shared import useridentity as shared_useridentity
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from marshmallow import fields
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class EventLogEntry:
    r"""Information about an entry in an event log of Amazon CodeCatalyst activity."""
    
    event_category: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('eventCategory') }})  
    event_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('eventName') }})  
    event_source: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('eventSource') }})  
    event_time: datetime = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('eventTime'), 'encoder': utils.datetimeisoformat(False), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso') }})  
    event_type: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('eventType') }})  
    id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id') }})  
    operation_type: shared_operationtype_enum.OperationTypeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('operationType') }})  
    user_identity: shared_useridentity.UserIdentity = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('userIdentity') }})  
    error_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('errorCode'), 'exclude': lambda f: f is None }})  
    project_information: Optional[shared_projectinformation.ProjectInformation] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('projectInformation'), 'exclude': lambda f: f is None }})  
    request_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('requestId'), 'exclude': lambda f: f is None }})  
    request_payload: Optional[shared_eventpayload.EventPayload] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('requestPayload'), 'exclude': lambda f: f is None }})  
    response_payload: Optional[shared_eventpayload.EventPayload] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('responsePayload'), 'exclude': lambda f: f is None }})  
    source_ip_address: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sourceIpAddress'), 'exclude': lambda f: f is None }})  
    user_agent: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('userAgent'), 'exclude': lambda f: f is None }})  
    