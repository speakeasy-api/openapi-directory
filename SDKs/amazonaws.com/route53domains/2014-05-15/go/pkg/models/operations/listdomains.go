// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// ListDomainsXAmzTargetEnum
type ListDomainsXAmzTargetEnum string

const (
	ListDomainsXAmzTargetEnumRoute53DomainsV20140515ListDomains ListDomainsXAmzTargetEnum = "Route53Domains_v20140515.ListDomains"
)

func (e ListDomainsXAmzTargetEnum) ToPointer() *ListDomainsXAmzTargetEnum {
	return &e
}

func (e *ListDomainsXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Route53Domains_v20140515.ListDomains":
		*e = ListDomainsXAmzTargetEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListDomainsXAmzTargetEnum: %v", v)
	}
}

type ListDomainsRequest struct {
	ListDomainsRequest shared.ListDomainsRequest `request:"mediaType=application/json"`
	// Pagination token
	Marker *string `queryParam:"style=form,explode=true,name=Marker"`
	// Pagination limit
	MaxItems          *string                   `queryParam:"style=form,explode=true,name=MaxItems"`
	XAmzAlgorithm     *string                   `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string                   `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string                   `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string                   `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string                   `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string                   `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string                   `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget        ListDomainsXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type ListDomainsResponse struct {
	ContentType string
	// InvalidInput
	InvalidInput interface{}
	// Success
	ListDomainsResponse *shared.ListDomainsResponse
	StatusCode          int
	RawResponse         *http.Response
}
