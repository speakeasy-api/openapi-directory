/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { Asset } from "./asset";
import { StatementTemplate } from "./statementtemplate";
import { Expose, Type } from "class-transformer";

/**
 * Message used to check for the existence of multiple digital asset links within a single RPC.
 */
export class BulkCheckRequest extends SpeakeasyBase {
  /**
   * Same configuration as in Check request, all statements checks will use same configurations.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "allowGoogleInternalDataSources" })
  allowGoogleInternalDataSources?: boolean;

  /**
   * If specified, will be used in any given template statement that doesnâ€™t specify a relation.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "defaultRelation" })
  defaultRelation?: string;

  /**
   * Uniquely identifies an asset. A digital asset is an identifiable and addressable online entity that typically provides some service or content. Examples of assets are websites, Android apps, Twitter feeds, and Plus Pages.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "defaultSource" })
  @Type(() => Asset)
  defaultSource?: Asset;

  /**
   * Uniquely identifies an asset. A digital asset is an identifiable and addressable online entity that typically provides some service or content. Examples of assets are websites, Android apps, Twitter feeds, and Plus Pages.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "defaultTarget" })
  @Type(() => Asset)
  defaultTarget?: Asset;

  /**
   * Same configuration as in Check request, all statements checks will use same configurations.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "skipCacheLookup" })
  skipCacheLookup?: boolean;

  /**
   * List of statements to check. For each statement, you can omit a field if the corresponding default_* field below was supplied. Minimum 1 statement; maximum 1,000 statements. Any additional statements will be ignored.
   */
  @SpeakeasyMetadata({ elemType: StatementTemplate })
  @Expose({ name: "statements" })
  @Type(() => StatementTemplate)
  statements?: StatementTemplate[];
}
