"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import addressconfiguration as shared_addressconfiguration
from ..shared import directmessageconfiguration as shared_directmessageconfiguration
from ..shared import endpointsendconfiguration as shared_endpointsendconfiguration
from ..shared import sendmessagesresponse as shared_sendmessagesresponse
from ..shared import templateconfiguration as shared_templateconfiguration
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Any, Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SendMessagesRequestBodyMessageRequest:
    r"""Specifies the configuration and other settings for a message."""
    
    addresses: Optional[dict[str, shared_addressconfiguration.AddressConfiguration]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Addresses'), 'exclude': lambda f: f is None }})  
    context: Optional[dict[str, str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Context'), 'exclude': lambda f: f is None }})  
    endpoints: Optional[dict[str, shared_endpointsendconfiguration.EndpointSendConfiguration]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Endpoints'), 'exclude': lambda f: f is None }})  
    message_configuration: Optional[shared_directmessageconfiguration.DirectMessageConfiguration] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('MessageConfiguration'), 'exclude': lambda f: f is None }})  
    template_configuration: Optional[shared_templateconfiguration.TemplateConfiguration] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TemplateConfiguration'), 'exclude': lambda f: f is None }})  
    trace_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TraceId'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SendMessagesRequestBody:
    
    message_request: SendMessagesRequestBodyMessageRequest = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('MessageRequest') }})
    r"""Specifies the configuration and other settings for a message."""  
    

@dataclasses.dataclass
class SendMessagesRequest:
    
    application_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'application-id', 'style': 'simple', 'explode': False }})
    r"""The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console."""  
    request_body: SendMessagesRequestBody = dataclasses.field(metadata={'request': { 'media_type': 'application/json' }})  
    x_amz_algorithm: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Algorithm', 'style': 'simple', 'explode': False }})  
    x_amz_content_sha256: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Content-Sha256', 'style': 'simple', 'explode': False }})  
    x_amz_credential: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Credential', 'style': 'simple', 'explode': False }})  
    x_amz_date: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Date', 'style': 'simple', 'explode': False }})  
    x_amz_security_token: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Security-Token', 'style': 'simple', 'explode': False }})  
    x_amz_signature: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Signature', 'style': 'simple', 'explode': False }})  
    x_amz_signed_headers: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-SignedHeaders', 'style': 'simple', 'explode': False }})  
    

@dataclasses.dataclass
class SendMessagesResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    bad_request_exception: Optional[Any] = dataclasses.field(default=None)
    r"""BadRequestException"""  
    forbidden_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ForbiddenException"""  
    internal_server_error_exception: Optional[Any] = dataclasses.field(default=None)
    r"""InternalServerErrorException"""  
    method_not_allowed_exception: Optional[Any] = dataclasses.field(default=None)
    r"""MethodNotAllowedException"""  
    not_found_exception: Optional[Any] = dataclasses.field(default=None)
    r"""NotFoundException"""  
    payload_too_large_exception: Optional[Any] = dataclasses.field(default=None)
    r"""PayloadTooLargeException"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    send_messages_response: Optional[shared_sendmessagesresponse.SendMessagesResponse] = dataclasses.field(default=None)
    r"""Success"""  
    too_many_requests_exception: Optional[Any] = dataclasses.field(default=None)
    r"""TooManyRequestsException"""  
    