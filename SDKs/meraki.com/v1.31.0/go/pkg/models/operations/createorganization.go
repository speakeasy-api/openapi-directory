// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

type CreateOrganizationRequestBodyManagementDetails struct {
	// Name of management data
	Name *string `json:"name,omitempty"`
	// Value of management data
	Value *string `json:"value,omitempty"`
}

// CreateOrganizationRequestBodyManagement - Information about the organization's management system
type CreateOrganizationRequestBodyManagement struct {
	// Details related to organization management, possibly empty
	Details []CreateOrganizationRequestBodyManagementDetails `json:"details,omitempty"`
}

type CreateOrganizationRequestBody struct {
	// Information about the organization's management system
	Management *CreateOrganizationRequestBodyManagement `json:"management,omitempty"`
	// The name of the organization
	Name string `json:"name"`
}

// CreateOrganization201ApplicationJSONAPI - API related settings
type CreateOrganization201ApplicationJSONAPI struct {
	// Enable API access
	Enabled *bool `json:"enabled,omitempty"`
}

// CreateOrganization201ApplicationJSONCloudRegion - Region info
type CreateOrganization201ApplicationJSONCloudRegion struct {
	// Name of region
	Name *string `json:"name,omitempty"`
}

// CreateOrganization201ApplicationJSONCloud - Data for this organization
type CreateOrganization201ApplicationJSONCloud struct {
	// Region info
	Region *CreateOrganization201ApplicationJSONCloudRegion `json:"region,omitempty"`
}

// CreateOrganization201ApplicationJSONLicensingModelEnum - Organization licensing model. Can be 'co-term', 'per-device', or 'subscription'.
type CreateOrganization201ApplicationJSONLicensingModelEnum string

const (
	CreateOrganization201ApplicationJSONLicensingModelEnumCoTerm       CreateOrganization201ApplicationJSONLicensingModelEnum = "co-term"
	CreateOrganization201ApplicationJSONLicensingModelEnumPerDevice    CreateOrganization201ApplicationJSONLicensingModelEnum = "per-device"
	CreateOrganization201ApplicationJSONLicensingModelEnumSubscription CreateOrganization201ApplicationJSONLicensingModelEnum = "subscription"
)

func (e *CreateOrganization201ApplicationJSONLicensingModelEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "co-term":
		fallthrough
	case "per-device":
		fallthrough
	case "subscription":
		*e = CreateOrganization201ApplicationJSONLicensingModelEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateOrganization201ApplicationJSONLicensingModelEnum: %s", s)
	}
}

// CreateOrganization201ApplicationJSONLicensing - Licensing related settings
type CreateOrganization201ApplicationJSONLicensing struct {
	// Organization licensing model. Can be 'co-term', 'per-device', or 'subscription'.
	Model *CreateOrganization201ApplicationJSONLicensingModelEnum `json:"model,omitempty"`
}

type CreateOrganization201ApplicationJSONManagementDetails struct {
	// Name of management data
	Name *string `json:"name,omitempty"`
	// Value of management data
	Value *string `json:"value,omitempty"`
}

// CreateOrganization201ApplicationJSONManagement - Information about the organization's management system
type CreateOrganization201ApplicationJSONManagement struct {
	// Details related to organization management, possibly empty
	Details []CreateOrganization201ApplicationJSONManagementDetails `json:"details,omitempty"`
}

// CreateOrganization201ApplicationJSON - Successful operation
type CreateOrganization201ApplicationJSON struct {
	// API related settings
	API *CreateOrganization201ApplicationJSONAPI `json:"api,omitempty"`
	// Data for this organization
	Cloud *CreateOrganization201ApplicationJSONCloud `json:"cloud,omitempty"`
	// Organization ID
	ID *string `json:"id,omitempty"`
	// Licensing related settings
	Licensing *CreateOrganization201ApplicationJSONLicensing `json:"licensing,omitempty"`
	// Information about the organization's management system
	Management *CreateOrganization201ApplicationJSONManagement `json:"management,omitempty"`
	// Organization name
	Name *string `json:"name,omitempty"`
	// Organization URL
	URL *string `json:"url,omitempty"`
}

type CreateOrganizationResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Successful operation
	CreateOrganization201ApplicationJSONObject *CreateOrganization201ApplicationJSON
}
