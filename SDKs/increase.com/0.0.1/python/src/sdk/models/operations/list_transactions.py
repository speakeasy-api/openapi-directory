"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import transaction_list as shared_transaction_list
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from enum import Enum
from sdk import utils
from typing import Any, Optional

class ListTransactionsCategoryInEnum(str, Enum):
    ACCOUNT_TRANSFER_INTENTION = 'account_transfer_intention'
    ACH_CHECK_CONVERSION_RETURN = 'ach_check_conversion_return'
    ACH_CHECK_CONVERSION = 'ach_check_conversion'
    ACH_TRANSFER_INTENTION = 'ach_transfer_intention'
    ACH_TRANSFER_REJECTION = 'ach_transfer_rejection'
    ACH_TRANSFER_RETURN = 'ach_transfer_return'
    CARD_DISPUTE_ACCEPTANCE = 'card_dispute_acceptance'
    CARD_REFUND = 'card_refund'
    CARD_SETTLEMENT = 'card_settlement'
    CHECK_DEPOSIT_ACCEPTANCE = 'check_deposit_acceptance'
    CHECK_DEPOSIT_RETURN = 'check_deposit_return'
    CHECK_TRANSFER_INTENTION = 'check_transfer_intention'
    CHECK_TRANSFER_RETURN = 'check_transfer_return'
    CHECK_TRANSFER_REJECTION = 'check_transfer_rejection'
    CHECK_TRANSFER_STOP_PAYMENT_REQUEST = 'check_transfer_stop_payment_request'
    DISPUTE_RESOLUTION = 'dispute_resolution'
    EMPYREAL_CASH_DEPOSIT = 'empyreal_cash_deposit'
    INBOUND_ACH_TRANSFER = 'inbound_ach_transfer'
    INBOUND_ACH_TRANSFER_RETURN_INTENTION = 'inbound_ach_transfer_return_intention'
    INBOUND_CHECK = 'inbound_check'
    INBOUND_INTERNATIONAL_ACH_TRANSFER = 'inbound_international_ach_transfer'
    INBOUND_REAL_TIME_PAYMENTS_TRANSFER_CONFIRMATION = 'inbound_real_time_payments_transfer_confirmation'
    INBOUND_WIRE_DRAWDOWN_PAYMENT_REVERSAL = 'inbound_wire_drawdown_payment_reversal'
    INBOUND_WIRE_DRAWDOWN_PAYMENT = 'inbound_wire_drawdown_payment'
    INBOUND_WIRE_REVERSAL = 'inbound_wire_reversal'
    INBOUND_WIRE_TRANSFER = 'inbound_wire_transfer'
    INTEREST_PAYMENT = 'interest_payment'
    INTERNAL_GENERAL_LEDGER_TRANSACTION = 'internal_general_ledger_transaction'
    INTERNAL_SOURCE = 'internal_source'
    CARD_ROUTE_REFUND = 'card_route_refund'
    CARD_ROUTE_SETTLEMENT = 'card_route_settlement'
    REAL_TIME_PAYMENTS_TRANSFER_ACKNOWLEDGEMENT = 'real_time_payments_transfer_acknowledgement'
    SAMPLE_FUNDS = 'sample_funds'
    WIRE_DRAWDOWN_PAYMENT_INTENTION = 'wire_drawdown_payment_intention'
    WIRE_DRAWDOWN_PAYMENT_REJECTION = 'wire_drawdown_payment_rejection'
    WIRE_TRANSFER_INTENTION = 'wire_transfer_intention'
    WIRE_TRANSFER_REJECTION = 'wire_transfer_rejection'
    OTHER = 'other'


@dataclasses.dataclass
class ListTransactionsRequest:
    
    account_id: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'account_id', 'style': 'form', 'explode': True }})  
    category_in: Optional[list[ListTransactionsCategoryInEnum]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'category.in', 'style': 'form', 'explode': True }})  
    created_at_after: Optional[datetime] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'created_at.after', 'style': 'form', 'explode': True }})  
    created_at_before: Optional[datetime] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'created_at.before', 'style': 'form', 'explode': True }})  
    created_at_on_or_after: Optional[datetime] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'created_at.on_or_after', 'style': 'form', 'explode': True }})  
    created_at_on_or_before: Optional[datetime] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'created_at.on_or_before', 'style': 'form', 'explode': True }})  
    cursor: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'cursor', 'style': 'form', 'explode': True }})  
    limit: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'limit', 'style': 'form', 'explode': True }})  
    route_id: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'route_id', 'style': 'form', 'explode': True }})  
    
class ListTransactionsDefaultApplicationJSON13StatusEnum(str, Enum):
    FOUR_HUNDRED_AND_TWENTY_NINE = '429'

class ListTransactionsDefaultApplicationJSON13TypeEnum(str, Enum):
    RATE_LIMITED_ERROR = 'rate_limited_error'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ListTransactionsDefaultApplicationJSON13:
    
    detail: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('detail') }})  
    status: ListTransactionsDefaultApplicationJSON13StatusEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status') }})  
    title: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('title') }})  
    type: ListTransactionsDefaultApplicationJSON13TypeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type') }})  
    retry_after: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('retry_after'), 'exclude': lambda f: f is None }})  
    
class ListTransactionsDefaultApplicationJSON12StatusEnum(str, Enum):
    FOUR_HUNDRED_AND_THREE = '403'

class ListTransactionsDefaultApplicationJSON12TypeEnum(str, Enum):
    PRIVATE_FEATURE_ERROR = 'private_feature_error'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ListTransactionsDefaultApplicationJSON12:
    
    detail: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('detail') }})  
    status: ListTransactionsDefaultApplicationJSON12StatusEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status') }})  
    title: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('title') }})  
    type: ListTransactionsDefaultApplicationJSON12TypeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type') }})  
    
class ListTransactionsDefaultApplicationJSON11StatusEnum(str, Enum):
    FOUR_HUNDRED_AND_FOUR = '404'

class ListTransactionsDefaultApplicationJSON11TypeEnum(str, Enum):
    OBJECT_NOT_FOUND_ERROR = 'object_not_found_error'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ListTransactionsDefaultApplicationJSON11:
    
    detail: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('detail') }})  
    status: ListTransactionsDefaultApplicationJSON11StatusEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status') }})  
    title: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('title') }})  
    type: ListTransactionsDefaultApplicationJSON11TypeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type') }})  
    
class ListTransactionsDefaultApplicationJSON10StatusEnum(str, Enum):
    FOUR_HUNDRED = '400'

class ListTransactionsDefaultApplicationJSON10TypeEnum(str, Enum):
    MALFORMED_REQUEST_ERROR = 'malformed_request_error'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ListTransactionsDefaultApplicationJSON10:
    
    detail: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('detail') }})  
    status: ListTransactionsDefaultApplicationJSON10StatusEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status') }})  
    title: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('title') }})  
    type: ListTransactionsDefaultApplicationJSON10TypeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type') }})  
    
class ListTransactionsDefaultApplicationJSON9StatusEnum(str, Enum):
    FOUR_HUNDRED = '400'

class ListTransactionsDefaultApplicationJSON9TypeEnum(str, Enum):
    INVALID_PARAMETERS_ERROR = 'invalid_parameters_error'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ListTransactionsDefaultApplicationJSON9:
    
    detail: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('detail') }})  
    status: ListTransactionsDefaultApplicationJSON9StatusEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status') }})  
    title: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('title') }})  
    type: ListTransactionsDefaultApplicationJSON9TypeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type') }})  
    errors: Optional[list[dict[str, Any]]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('errors'), 'exclude': lambda f: f is None }})
    r"""All errors related to parsing the request parameters."""  
    
class ListTransactionsDefaultApplicationJSON8StatusEnum(str, Enum):
    FOUR_HUNDRED_AND_NINE = '409'

class ListTransactionsDefaultApplicationJSON8TypeEnum(str, Enum):
    INVALID_OPERATION_ERROR = 'invalid_operation_error'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ListTransactionsDefaultApplicationJSON8:
    
    detail: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('detail') }})  
    status: ListTransactionsDefaultApplicationJSON8StatusEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status') }})  
    title: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('title') }})  
    type: ListTransactionsDefaultApplicationJSON8TypeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type') }})  
    
class ListTransactionsDefaultApplicationJSON7StatusEnum(str, Enum):
    FOUR_HUNDRED_AND_ONE = '401'

class ListTransactionsDefaultApplicationJSON7TypeEnum(str, Enum):
    INVALID_API_KEY_ERROR = 'invalid_api_key_error'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ListTransactionsDefaultApplicationJSON7:
    
    detail: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('detail') }})  
    status: ListTransactionsDefaultApplicationJSON7StatusEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status') }})  
    title: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('title') }})  
    type: ListTransactionsDefaultApplicationJSON7TypeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type') }})  
    
class ListTransactionsDefaultApplicationJSON6StatusEnum(str, Enum):
    FIVE_HUNDRED = '500'

class ListTransactionsDefaultApplicationJSON6TypeEnum(str, Enum):
    INTERNAL_SERVER_ERROR = 'internal_server_error'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ListTransactionsDefaultApplicationJSON6:
    
    detail: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('detail') }})  
    status: ListTransactionsDefaultApplicationJSON6StatusEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status') }})  
    title: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('title') }})  
    type: ListTransactionsDefaultApplicationJSON6TypeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type') }})  
    
class ListTransactionsDefaultApplicationJSON5StatusEnum(str, Enum):
    FOUR_HUNDRED_AND_THREE = '403'

class ListTransactionsDefaultApplicationJSON5TypeEnum(str, Enum):
    INSUFFICIENT_PERMISSIONS_ERROR = 'insufficient_permissions_error'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ListTransactionsDefaultApplicationJSON5:
    
    detail: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('detail') }})  
    status: ListTransactionsDefaultApplicationJSON5StatusEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status') }})  
    title: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('title') }})  
    type: ListTransactionsDefaultApplicationJSON5TypeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type') }})  
    
class ListTransactionsDefaultApplicationJSON4StatusEnum(str, Enum):
    FOUR_HUNDRED_AND_TWENTY_TWO = '422'

class ListTransactionsDefaultApplicationJSON4TypeEnum(str, Enum):
    IDEMPOTENCY_UNPROCESSABLE_ERROR = 'idempotency_unprocessable_error'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ListTransactionsDefaultApplicationJSON4:
    
    detail: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('detail') }})  
    status: ListTransactionsDefaultApplicationJSON4StatusEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status') }})  
    title: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('title') }})  
    type: ListTransactionsDefaultApplicationJSON4TypeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type') }})  
    
class ListTransactionsDefaultApplicationJSON3StatusEnum(str, Enum):
    FOUR_HUNDRED_AND_NINE = '409'

class ListTransactionsDefaultApplicationJSON3TypeEnum(str, Enum):
    IDEMPOTENCY_CONFLICT_ERROR = 'idempotency_conflict_error'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ListTransactionsDefaultApplicationJSON3:
    
    detail: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('detail') }})  
    status: ListTransactionsDefaultApplicationJSON3StatusEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status') }})  
    title: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('title') }})  
    type: ListTransactionsDefaultApplicationJSON3TypeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type') }})  
    
class ListTransactionsDefaultApplicationJSON2StatusEnum(str, Enum):
    FOUR_HUNDRED_AND_THREE = '403'

class ListTransactionsDefaultApplicationJSON2TypeEnum(str, Enum):
    ENVIRONMENT_MISMATCH_ERROR = 'environment_mismatch_error'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ListTransactionsDefaultApplicationJSON2:
    
    detail: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('detail') }})  
    status: ListTransactionsDefaultApplicationJSON2StatusEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status') }})  
    title: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('title') }})  
    type: ListTransactionsDefaultApplicationJSON2TypeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type') }})  
    
class ListTransactionsDefaultApplicationJSON1StatusEnum(str, Enum):
    FOUR_HUNDRED_AND_FOUR = '404'

class ListTransactionsDefaultApplicationJSON1TypeEnum(str, Enum):
    API_METHOD_NOT_FOUND_ERROR = 'api_method_not_found_error'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ListTransactionsDefaultApplicationJSON1:
    
    detail: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('detail') }})  
    status: ListTransactionsDefaultApplicationJSON1StatusEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status') }})  
    title: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('title') }})  
    type: ListTransactionsDefaultApplicationJSON1TypeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type') }})  
    

@dataclasses.dataclass
class ListTransactionsResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    error: Optional[Any] = dataclasses.field(default=None)
    r"""Error"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    transaction_list: Optional[shared_transaction_list.TransactionList] = dataclasses.field(default=None)
    r"""Transaction List"""  
    