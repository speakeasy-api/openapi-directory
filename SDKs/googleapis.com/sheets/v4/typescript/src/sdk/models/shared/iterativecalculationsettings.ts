/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { Expose } from "class-transformer";

/**
 * Settings to control how circular dependencies are resolved with iterative calculation.
 */
export class IterativeCalculationSettings extends SpeakeasyBase {
  /**
   * When iterative calculation is enabled and successive results differ by less than this threshold value, the calculation rounds stop.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "convergenceThreshold" })
  convergenceThreshold?: number;

  /**
   * When iterative calculation is enabled, the maximum number of calculation rounds to perform.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "maxIterations" })
  maxIterations?: number;
}
