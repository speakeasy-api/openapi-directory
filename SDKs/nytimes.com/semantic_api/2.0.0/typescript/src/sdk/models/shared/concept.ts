/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { ConceptRelation } from "./conceptrelation";
import { Expose, Type } from "class-transformer";

export class ConceptArticleListResultsConcepts extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "nytd_des" })
  nytdDes?: string[];

  @SpeakeasyMetadata()
  @Expose({ name: "nytd_org" })
  nytdOrg?: string[];

  @SpeakeasyMetadata()
  @Expose({ name: "nytd_per" })
  nytdPer?: string[];
}

export class ConceptArticleListResults extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "body" })
  body?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "byline" })
  byline?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "concepts" })
  @Type(() => ConceptArticleListResultsConcepts)
  concepts?: ConceptArticleListResultsConcepts;

  @SpeakeasyMetadata()
  @Expose({ name: "date" })
  date?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "document_type" })
  documentType?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "title" })
  title?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "type_of_material" })
  typeOfMaterial?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "url" })
  url?: string;
}

export class ConceptArticleList extends SpeakeasyBase {
  @SpeakeasyMetadata({ elemType: ConceptArticleListResults })
  @Expose({ name: "results" })
  @Type(() => ConceptArticleListResults)
  results?: ConceptArticleListResults[];

  @SpeakeasyMetadata()
  @Expose({ name: "total" })
  total?: number;
}

export class ConceptCombinations extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "combination_note" })
  combinationNote?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "combination_source_concept_id" })
  combinationSourceConceptId?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "combination_source_concept_name" })
  combinationSourceConceptName?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "combination_source_concept_type" })
  combinationSourceConceptType?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "combination_target_concept_id" })
  combinationTargetConceptId?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "combination_target_concept_name" })
  combinationTargetConceptName?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "combination_target_concept_type" })
  combinationTargetConceptType?: string;
}

export class ConceptLinks extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "concept_id" })
  conceptId?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "concept_name" })
  conceptName?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "concept_status" })
  conceptStatus?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "concept_type" })
  conceptType?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "is_times_tag" })
  isTimesTag?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "link" })
  link?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "link_id" })
  linkId?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "link_type" })
  linkType?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "mapping_type" })
  mappingType?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "relation" })
  relation?: string;
}

export class ConceptScopeNotes extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "scope_note" })
  scopeNote?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "scope_note_name" })
  scopeNoteName?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "scope_note_type" })
  scopeNoteType?: string;
}

export class ConceptTaxonomy extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "source_concept_id" })
  sourceConceptId?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "source_concept_name" })
  sourceConceptName?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "source_concept_type" })
  sourceConceptType?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "source_concept_vernacular" })
  sourceConceptVernacular?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "target_concept_id" })
  targetConceptId?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "target_concept_name" })
  targetConceptName?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "target_concept_type" })
  targetConceptType?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "target_concept_vernacular" })
  targetConceptVernacular?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "taxonomic_relation" })
  taxonomicRelation?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "taxonomic_verification_status" })
  taxonomicVerificationStatus?: string;
}

export class Concept extends SpeakeasyBase {
  @SpeakeasyMetadata({ elemType: ConceptRelation })
  @Expose({ name: "ancestors" })
  @Type(() => ConceptRelation)
  ancestors?: ConceptRelation[];

  @SpeakeasyMetadata()
  @Expose({ name: "article_list" })
  @Type(() => ConceptArticleList)
  articleList?: ConceptArticleList;

  @SpeakeasyMetadata({ elemType: ConceptCombinations })
  @Expose({ name: "combinations" })
  @Type(() => ConceptCombinations)
  combinations?: ConceptCombinations[];

  @SpeakeasyMetadata()
  @Expose({ name: "concept_created" })
  conceptCreated?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "concept_id" })
  conceptId?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "concept_name" })
  conceptName?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "concept_status" })
  conceptStatus?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "concept_type" })
  conceptType?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "concept_updated" })
  conceptUpdated?: string;

  @SpeakeasyMetadata({ elemType: ConceptRelation })
  @Expose({ name: "descendants" })
  @Type(() => ConceptRelation)
  descendants?: ConceptRelation[];

  @SpeakeasyMetadata()
  @Expose({ name: "is_times_tag" })
  isTimesTag?: number;

  @SpeakeasyMetadata({ elemType: ConceptLinks })
  @Expose({ name: "links" })
  @Type(() => ConceptLinks)
  links?: ConceptLinks[];

  @SpeakeasyMetadata({ elemType: ConceptScopeNotes })
  @Expose({ name: "scope_notes" })
  @Type(() => ConceptScopeNotes)
  scopeNotes?: ConceptScopeNotes[];

  @SpeakeasyMetadata()
  @Expose({ name: "search_api_query" })
  searchApiQuery?: string;

  @SpeakeasyMetadata({ elemType: ConceptTaxonomy })
  @Expose({ name: "taxonomy" })
  @Type(() => ConceptTaxonomy)
  taxonomy?: ConceptTaxonomy[];

  @SpeakeasyMetadata()
  @Expose({ name: "vernacular" })
  vernacular?: string;
}
