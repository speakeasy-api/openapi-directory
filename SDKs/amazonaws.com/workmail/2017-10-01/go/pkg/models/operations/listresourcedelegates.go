// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// ListResourceDelegatesXAmzTargetEnum
type ListResourceDelegatesXAmzTargetEnum string

const (
	ListResourceDelegatesXAmzTargetEnumWorkMailServiceListResourceDelegates ListResourceDelegatesXAmzTargetEnum = "WorkMailService.ListResourceDelegates"
)

func (e *ListResourceDelegatesXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "WorkMailService.ListResourceDelegates":
		*e = ListResourceDelegatesXAmzTargetEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ListResourceDelegatesXAmzTargetEnum: %s", s)
	}
}

type ListResourceDelegatesRequest struct {
	ListResourceDelegatesRequest shared.ListResourceDelegatesRequest `request:"mediaType=application/json"`
	// Pagination limit
	MaxResults *string `queryParam:"style=form,explode=true,name=MaxResults"`
	// Pagination token
	NextToken         *string                             `queryParam:"style=form,explode=true,name=NextToken"`
	XAmzAlgorithm     *string                             `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string                             `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string                             `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string                             `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string                             `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string                             `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string                             `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget        ListResourceDelegatesXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type ListResourceDelegatesResponse struct {
	ContentType string
	// EntityNotFoundException
	EntityNotFoundException interface{}
	// EntityStateException
	EntityStateException interface{}
	// InvalidParameterException
	InvalidParameterException interface{}
	// Success
	ListResourceDelegatesResponse *shared.ListResourceDelegatesResponse
	// OrganizationNotFoundException
	OrganizationNotFoundException interface{}
	// OrganizationStateException
	OrganizationStateException interface{}
	StatusCode                 int
	RawResponse                *http.Response
}
