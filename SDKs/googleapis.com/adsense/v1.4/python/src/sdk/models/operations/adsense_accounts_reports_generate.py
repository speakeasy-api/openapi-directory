"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import adsensereportsgenerateresponse as shared_adsensereportsgenerateresponse
from ..shared import alt_enum as shared_alt_enum
from typing import Optional


@dataclasses.dataclass
class AdsenseAccountsReportsGenerateSecurityOption1:
    
    oauth2: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'oauth2', 'field_name': 'Authorization' }})  
    oauth2c: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'oauth2', 'field_name': 'Authorization' }})  
    

@dataclasses.dataclass
class AdsenseAccountsReportsGenerateSecurityOption2:
    
    oauth2: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'oauth2', 'field_name': 'Authorization' }})  
    oauth2c: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'oauth2', 'field_name': 'Authorization' }})  
    

@dataclasses.dataclass
class AdsenseAccountsReportsGenerateSecurity:
    
    option1: Optional[AdsenseAccountsReportsGenerateSecurityOption1] = dataclasses.field(default=None, metadata={'security': { 'option': True }})  
    option2: Optional[AdsenseAccountsReportsGenerateSecurityOption2] = dataclasses.field(default=None, metadata={'security': { 'option': True }})  
    

@dataclasses.dataclass
class AdsenseAccountsReportsGenerateRequest:
    
    account_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'accountId', 'style': 'simple', 'explode': False }})
    r"""Account upon which to report."""  
    end_date: str = dataclasses.field(metadata={'query_param': { 'field_name': 'endDate', 'style': 'form', 'explode': True }})
    r"""End of the date range to report on in \\"YYYY-MM-DD\\" format, inclusive."""  
    start_date: str = dataclasses.field(metadata={'query_param': { 'field_name': 'startDate', 'style': 'form', 'explode': True }})
    r"""Start of the date range to report on in \\"YYYY-MM-DD\\" format, inclusive."""  
    alt: Optional[shared_alt_enum.AltEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'alt', 'style': 'form', 'explode': True }})
    r"""Data format for the response."""  
    currency: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'currency', 'style': 'form', 'explode': True }})
    r"""Optional currency to use when reporting on monetary metrics. Defaults to the account's currency if not set."""  
    dimension: Optional[list[str]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'dimension', 'style': 'form', 'explode': True }})
    r"""Dimensions to base the report on."""  
    fields_: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'fields', 'style': 'form', 'explode': True }})
    r"""Selector specifying which fields to include in a partial response."""  
    filter: Optional[list[str]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'filter', 'style': 'form', 'explode': True }})
    r"""Filters to be run on the report."""  
    key: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'key', 'style': 'form', 'explode': True }})
    r"""API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."""  
    locale: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'locale', 'style': 'form', 'explode': True }})
    r"""Optional locale to use for translating report output to a local language. Defaults to \\"en_US\\" if not specified."""  
    max_results: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'maxResults', 'style': 'form', 'explode': True }})
    r"""The maximum number of rows of report data to return."""  
    metric: Optional[list[str]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'metric', 'style': 'form', 'explode': True }})
    r"""Numeric columns to include in the report."""  
    oauth_token: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'oauth_token', 'style': 'form', 'explode': True }})
    r"""OAuth 2.0 token for the current user."""  
    pretty_print: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'prettyPrint', 'style': 'form', 'explode': True }})
    r"""Returns response with indentations and line breaks."""  
    quota_user: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'quotaUser', 'style': 'form', 'explode': True }})
    r"""An opaque string that represents a user for quota purposes. Must not exceed 40 characters."""  
    sort: Optional[list[str]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'sort', 'style': 'form', 'explode': True }})
    r"""The name of a dimension or metric to sort the resulting report on, optionally prefixed with \\"+\\" to sort ascending or \\"-\\" to sort descending. If no prefix is specified, the column is sorted ascending."""  
    start_index: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'startIndex', 'style': 'form', 'explode': True }})
    r"""Index of the first row of report data to return."""  
    user_ip: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'userIp', 'style': 'form', 'explode': True }})
    r"""Deprecated. Please use quotaUser instead."""  
    use_timezone_reporting: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'useTimezoneReporting', 'style': 'form', 'explode': True }})
    r"""Whether the report should be generated in the AdSense account's local timezone. If false default PST/PDT timezone will be used."""  
    

@dataclasses.dataclass
class AdsenseAccountsReportsGenerateResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    adsense_reports_generate_response: Optional[shared_adsensereportsgenerateresponse.AdsenseReportsGenerateResponse] = dataclasses.field(default=None)
    r"""Successful response"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    