/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class Group {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * this functions helps you to map your application group ids to Etherpad group ids
   */
  createGroupIfNotExistsForUsingGET(
    req: operations.CreateGroupIfNotExistsForUsingGETRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.CreateGroupIfNotExistsForUsingGETResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.CreateGroupIfNotExistsForUsingGETRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/createGroupIfNotExistsFor";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.CreateGroupIfNotExistsForUsingGETResponse =
        new operations.CreateGroupIfNotExistsForUsingGETResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.createGroupIfNotExistsForUsingGET200ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.CreateGroupIfNotExistsForUsingGet200ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.createGroupIfNotExistsForUsingGET400ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.CreateGroupIfNotExistsForUsingGet400ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.createGroupIfNotExistsForUsingGET401ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.CreateGroupIfNotExistsForUsingGet401ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 500:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.createGroupIfNotExistsForUsingGET500ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.CreateGroupIfNotExistsForUsingGet500ApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * this functions helps you to map your application group ids to Etherpad group ids
   */
  createGroupIfNotExistsForUsingPOST(
    req: operations.CreateGroupIfNotExistsForUsingPOSTRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.CreateGroupIfNotExistsForUsingPOSTResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.CreateGroupIfNotExistsForUsingPOSTRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/createGroupIfNotExistsFor";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.CreateGroupIfNotExistsForUsingPOSTResponse =
        new operations.CreateGroupIfNotExistsForUsingPOSTResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.createGroupIfNotExistsForUsingPOST200ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.CreateGroupIfNotExistsForUsingPost200ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.createGroupIfNotExistsForUsingPOST400ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.CreateGroupIfNotExistsForUsingPost400ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.createGroupIfNotExistsForUsingPOST401ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.CreateGroupIfNotExistsForUsingPost401ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 500:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.createGroupIfNotExistsForUsingPOST500ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.CreateGroupIfNotExistsForUsingPost500ApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * creates a new pad in this group
   */
  createGroupPadUsingGET(
    req: operations.CreateGroupPadUsingGETRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.CreateGroupPadUsingGETResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.CreateGroupPadUsingGETRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/createGroupPad";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.CreateGroupPadUsingGETResponse =
        new operations.CreateGroupPadUsingGETResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.createGroupPadUsingGET200ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.CreateGroupPadUsingGet200ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.createGroupPadUsingGET400ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.CreateGroupPadUsingGet400ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.createGroupPadUsingGET401ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.CreateGroupPadUsingGet401ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 500:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.createGroupPadUsingGET500ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.CreateGroupPadUsingGet500ApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * creates a new pad in this group
   */
  createGroupPadUsingPOST(
    req: operations.CreateGroupPadUsingPOSTRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.CreateGroupPadUsingPOSTResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.CreateGroupPadUsingPOSTRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/createGroupPad";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.CreateGroupPadUsingPOSTResponse =
        new operations.CreateGroupPadUsingPOSTResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.createGroupPadUsingPOST200ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.CreateGroupPadUsingPost200ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.createGroupPadUsingPOST400ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.CreateGroupPadUsingPost400ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.createGroupPadUsingPOST401ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.CreateGroupPadUsingPost401ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 500:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.createGroupPadUsingPOST500ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.CreateGroupPadUsingPost500ApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * creates a new group
   */
  createGroupUsingGET(
    config?: AxiosRequestConfig
  ): Promise<operations.CreateGroupUsingGETResponse> {
    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/createGroup";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.CreateGroupUsingGETResponse =
        new operations.CreateGroupUsingGETResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.createGroupUsingGET200ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.CreateGroupUsingGet200ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.createGroupUsingGET400ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.CreateGroupUsingGet400ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.createGroupUsingGET401ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.CreateGroupUsingGet401ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 500:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.createGroupUsingGET500ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.CreateGroupUsingGet500ApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * creates a new group
   */
  createGroupUsingPOST(
    config?: AxiosRequestConfig
  ): Promise<operations.CreateGroupUsingPOSTResponse> {
    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/createGroup";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "post",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.CreateGroupUsingPOSTResponse =
        new operations.CreateGroupUsingPOSTResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.createGroupUsingPOST200ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.CreateGroupUsingPost200ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.createGroupUsingPOST400ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.CreateGroupUsingPost400ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.createGroupUsingPOST401ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.CreateGroupUsingPost401ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 500:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.createGroupUsingPOST500ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.CreateGroupUsingPost500ApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * deletes a group
   */
  deleteGroupUsingGET(
    req: operations.DeleteGroupUsingGETRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.DeleteGroupUsingGETResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DeleteGroupUsingGETRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/deleteGroup";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DeleteGroupUsingGETResponse =
        new operations.DeleteGroupUsingGETResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.deleteGroupUsingGET200ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.DeleteGroupUsingGet200ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.deleteGroupUsingGET400ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.DeleteGroupUsingGet400ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.deleteGroupUsingGET401ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.DeleteGroupUsingGet401ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 500:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.deleteGroupUsingGET500ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.DeleteGroupUsingGet500ApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * deletes a group
   */
  deleteGroupUsingPOST(
    req: operations.DeleteGroupUsingPOSTRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.DeleteGroupUsingPOSTResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DeleteGroupUsingPOSTRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/deleteGroup";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DeleteGroupUsingPOSTResponse =
        new operations.DeleteGroupUsingPOSTResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.deleteGroupUsingPOST200ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.DeleteGroupUsingPost200ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.deleteGroupUsingPOST400ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.DeleteGroupUsingPost400ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.deleteGroupUsingPOST401ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.DeleteGroupUsingPost401ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 500:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.deleteGroupUsingPOST500ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.DeleteGroupUsingPost500ApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }

  listAllGroupsUsingGET(
    config?: AxiosRequestConfig
  ): Promise<operations.ListAllGroupsUsingGETResponse> {
    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/listAllGroups";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ListAllGroupsUsingGETResponse =
        new operations.ListAllGroupsUsingGETResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listAllGroupsUsingGET200ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.ListAllGroupsUsingGet200ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listAllGroupsUsingGET400ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.ListAllGroupsUsingGet400ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listAllGroupsUsingGET401ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.ListAllGroupsUsingGet401ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 500:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listAllGroupsUsingGET500ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.ListAllGroupsUsingGet500ApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }

  listAllGroupsUsingPOST(
    config?: AxiosRequestConfig
  ): Promise<operations.ListAllGroupsUsingPOSTResponse> {
    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/listAllGroups";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "post",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ListAllGroupsUsingPOSTResponse =
        new operations.ListAllGroupsUsingPOSTResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listAllGroupsUsingPOST200ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.ListAllGroupsUsingPost200ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listAllGroupsUsingPOST400ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.ListAllGroupsUsingPost400ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listAllGroupsUsingPOST401ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.ListAllGroupsUsingPost401ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 500:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listAllGroupsUsingPOST500ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.ListAllGroupsUsingPost500ApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * returns all pads of this group
   */
  listPadsUsingGET(
    req: operations.ListPadsUsingGETRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.ListPadsUsingGETResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ListPadsUsingGETRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/listPads";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ListPadsUsingGETResponse =
        new operations.ListPadsUsingGETResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listPadsUsingGET200ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.ListPadsUsingGet200ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listPadsUsingGET400ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.ListPadsUsingGet400ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listPadsUsingGET401ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.ListPadsUsingGet401ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 500:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listPadsUsingGET500ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.ListPadsUsingGet500ApplicationJSON
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * returns all pads of this group
   */
  listPadsUsingPOST(
    req: operations.ListPadsUsingPOSTRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.ListPadsUsingPOSTResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ListPadsUsingPOSTRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/listPads";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ListPadsUsingPOSTResponse =
        new operations.ListPadsUsingPOSTResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listPadsUsingPOST200ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.ListPadsUsingPost200ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listPadsUsingPOST400ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.ListPadsUsingPost400ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listPadsUsingPOST401ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.ListPadsUsingPost401ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 500:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listPadsUsingPOST500ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.ListPadsUsingPost500ApplicationJSON
            );
          }
          break;
      }

      return res;
    });
  }

  listSessionsOfGroupUsingGET(
    req: operations.ListSessionsOfGroupUsingGETRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.ListSessionsOfGroupUsingGETResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ListSessionsOfGroupUsingGETRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/listSessionsOfGroup";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ListSessionsOfGroupUsingGETResponse =
        new operations.ListSessionsOfGroupUsingGETResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listSessionsOfGroupUsingGET200ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.ListSessionsOfGroupUsingGet200ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listSessionsOfGroupUsingGET400ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.ListSessionsOfGroupUsingGet400ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listSessionsOfGroupUsingGET401ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.ListSessionsOfGroupUsingGet401ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 500:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listSessionsOfGroupUsingGET500ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.ListSessionsOfGroupUsingGet500ApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }

  listSessionsOfGroupUsingPOST(
    req: operations.ListSessionsOfGroupUsingPOSTRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.ListSessionsOfGroupUsingPOSTResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ListSessionsOfGroupUsingPOSTRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/listSessionsOfGroup";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ListSessionsOfGroupUsingPOSTResponse =
        new operations.ListSessionsOfGroupUsingPOSTResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listSessionsOfGroupUsingPOST200ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.ListSessionsOfGroupUsingPost200ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listSessionsOfGroupUsingPOST400ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.ListSessionsOfGroupUsingPost400ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listSessionsOfGroupUsingPOST401ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.ListSessionsOfGroupUsingPost401ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 500:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listSessionsOfGroupUsingPOST500ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.ListSessionsOfGroupUsingPost500ApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }
}
