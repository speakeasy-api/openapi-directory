"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import googleclouddocumentaiv1documentpagedetectedlanguage as shared_googleclouddocumentaiv1documentpagedetectedlanguage
from ..shared import googleclouddocumentaiv1documentpagelayout as shared_googleclouddocumentaiv1documentpagelayout
from ..shared import googleclouddocumentaiv1documentpagetokendetectedbreak as shared_googleclouddocumentaiv1documentpagetokendetectedbreak
from ..shared import googleclouddocumentaiv1documentprovenance as shared_googleclouddocumentaiv1documentprovenance
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GoogleCloudDocumentaiV1DocumentPageToken:
    r"""A detected token."""
    
    detected_break: Optional[shared_googleclouddocumentaiv1documentpagetokendetectedbreak.GoogleCloudDocumentaiV1DocumentPageTokenDetectedBreak] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('detectedBreak'), 'exclude': lambda f: f is None }})
    r"""Detected break at the end of a Token."""  
    detected_languages: Optional[list[shared_googleclouddocumentaiv1documentpagedetectedlanguage.GoogleCloudDocumentaiV1DocumentPageDetectedLanguage]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('detectedLanguages'), 'exclude': lambda f: f is None }})
    r"""A list of detected languages together with confidence."""  
    layout: Optional[shared_googleclouddocumentaiv1documentpagelayout.GoogleCloudDocumentaiV1DocumentPageLayout] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('layout'), 'exclude': lambda f: f is None }})
    r"""Visual element describing a layout unit on a page."""  
    provenance: Optional[shared_googleclouddocumentaiv1documentprovenance.GoogleCloudDocumentaiV1DocumentProvenance] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('provenance'), 'exclude': lambda f: f is None }})
    r"""Structure to identify provenance relationships between annotations in different revisions."""  
    