"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from ..shared import fxsummary as shared_fxsummary
from ..shared import payoutschedule as shared_payoutschedule
from ..shared import sourceaccountsummary as shared_sourceaccountsummary
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from marshmallow import fields
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PayoutSummaryAudit:
    
    payor_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('payorName') }})  
    payout_type: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('payoutType') }})
    r"""The type of payout. One of the following values: STANDARD, AS, ON_BEHALF_OF"""  
    status: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status') }})
    r"""Current status of the Payout. One of the following values: ACCEPTED, REJECTED, SUBMITTED, QUOTED, INSTRUCTED, COMPLETED, INCOMPLETE, CONFIRMED, WITHDRAWN"""  
    submitted_date_time: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('submittedDateTime') }})  
    date_time: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dateTime'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})  
    fx_summaries: Optional[list[shared_fxsummary.FxSummary]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('fxSummaries'), 'exclude': lambda f: f is None }})  
    instructed_date_time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('instructedDateTime'), 'exclude': lambda f: f is None }})  
    payor_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('payorId'), 'exclude': lambda f: f is None }})  
    payout_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('payoutId'), 'exclude': lambda f: f is None }})  
    payout_memo: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('payoutMemo'), 'exclude': lambda f: f is None }})  
    schedule: Optional[shared_payoutschedule.PayoutSchedule] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('schedule'), 'exclude': lambda f: f is None }})
    r"""Details relating to a payout that was executed via a schedule or is still waiting to be executed"""  
    source_account_summary: Optional[list[shared_sourceaccountsummary.SourceAccountSummary]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sourceAccountSummary'), 'exclude': lambda f: f is None }})  
    total_incomplete_payments: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('totalIncompletePayments'), 'exclude': lambda f: f is None }})  
    total_payments: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('totalPayments'), 'exclude': lambda f: f is None }})  
    total_returned_payments: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('totalReturnedPayments'), 'exclude': lambda f: f is None }})  
    total_withdrawn_payments: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('totalWithdrawnPayments'), 'exclude': lambda f: f is None }})  
    withdrawn_date_time: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('withdrawnDateTime'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})  
    