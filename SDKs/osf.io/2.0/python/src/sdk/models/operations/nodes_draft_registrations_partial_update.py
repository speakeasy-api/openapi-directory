"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Any, Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class NodesDraftRegistrationsPartialUpdateDraftRegistrationAttributesNodeLicense:
    
    copyright_holders: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('copyright_holders'), 'exclude': lambda f: f is None }})
    r"""A list of names of copyright holders for the license."""  
    year: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('year'), 'exclude': lambda f: f is None }})
    r"""The year the copyright was made."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class NodesDraftRegistrationsPartialUpdateDraftRegistrationAttributesInput:
    r"""The properties of the Draft Registration entity."""
    
    category: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('category'), 'exclude': lambda f: f is None }})
    r"""The category of the Draft Registration."""  
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description'), 'exclude': lambda f: f is None }})
    r"""The description of the Draft Registration."""  
    node_license: Optional[NodesDraftRegistrationsPartialUpdateDraftRegistrationAttributesNodeLicense] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('node_license'), 'exclude': lambda f: f is None }})  
    registration_metadata: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('registration_metadata'), 'exclude': lambda f: f is None }})
    r"""This is a legacy format for `registration_responses`."""  
    registration_responses: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('registration_responses'), 'exclude': lambda f: f is None }})
    r"""A dictionary of question IDs and responses from the registration schema."""  
    tags: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tags'), 'exclude': lambda f: f is None }})
    r"""The searchable tags of the Draft Registration."""  
    title: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('title'), 'exclude': lambda f: f is None }})
    r"""The title of the Draft Registration."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class NodesDraftRegistrationsPartialUpdateDraftRegistrationInput:
    
    attributes: NodesDraftRegistrationsPartialUpdateDraftRegistrationAttributesInput = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('attributes') }})
    r"""The properties of the Draft Registration entity."""  
    

@dataclasses.dataclass
class NodesDraftRegistrationsPartialUpdateRequest:
    
    draft_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'draft_id', 'style': 'simple', 'explode': False }})
    r"""The unique identifier of the draft registration."""  
    node_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'node_id', 'style': 'simple', 'explode': False }})
    r"""The unique identifier of the node."""  
    request_body: NodesDraftRegistrationsPartialUpdateDraftRegistrationInput = dataclasses.field(metadata={'request': { 'media_type': 'application/json' }})  
    

@dataclasses.dataclass
class NodesDraftRegistrationsPartialUpdateResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    