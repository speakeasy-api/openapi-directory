/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { AxiosResponse } from "axios";
import { Expose, Transform, Type } from "class-transformer";

/**
 * API key
 */
export class GetAdministeredIdentitiesMe200ApplicationJSONAuthenticationApiKey extends SpeakeasyBase {
  /**
   * If API key is created for this user
   */
  @SpeakeasyMetadata()
  @Expose({ name: "created" })
  created?: boolean;
}

/**
 * API authentication
 */
export class GetAdministeredIdentitiesMe200ApplicationJSONAuthenticationApi extends SpeakeasyBase {
  /**
   * API key
   */
  @SpeakeasyMetadata()
  @Expose({ name: "key" })
  @Type(() => GetAdministeredIdentitiesMe200ApplicationJSONAuthenticationApiKey)
  key?: GetAdministeredIdentitiesMe200ApplicationJSONAuthenticationApiKey;
}

/**
 * SAML authentication
 */
export class GetAdministeredIdentitiesMe200ApplicationJSONAuthenticationSaml extends SpeakeasyBase {
  /**
   * If SAML authentication is enabled for this user
   */
  @SpeakeasyMetadata()
  @Expose({ name: "enabled" })
  enabled?: boolean;
}

/**
 * TwoFactor authentication
 */
export class GetAdministeredIdentitiesMe200ApplicationJSONAuthenticationTwoFactor extends SpeakeasyBase {
  /**
   * If twoFactor authentication is enabled for this user
   */
  @SpeakeasyMetadata()
  @Expose({ name: "enabled" })
  enabled?: boolean;
}

/**
 * Authentication info
 */
export class GetAdministeredIdentitiesMe200ApplicationJSONAuthentication extends SpeakeasyBase {
  /**
   * API authentication
   */
  @SpeakeasyMetadata()
  @Expose({ name: "api" })
  @Type(() => GetAdministeredIdentitiesMe200ApplicationJSONAuthenticationApi)
  api?: GetAdministeredIdentitiesMe200ApplicationJSONAuthenticationApi;

  /**
   * Authentication mode
   */
  @SpeakeasyMetadata()
  @Expose({ name: "mode" })
  mode?: string;

  /**
   * SAML authentication
   */
  @SpeakeasyMetadata()
  @Expose({ name: "saml" })
  @Type(() => GetAdministeredIdentitiesMe200ApplicationJSONAuthenticationSaml)
  saml?: GetAdministeredIdentitiesMe200ApplicationJSONAuthenticationSaml;

  /**
   * TwoFactor authentication
   */
  @SpeakeasyMetadata()
  @Expose({ name: "twoFactor" })
  @Type(
    () => GetAdministeredIdentitiesMe200ApplicationJSONAuthenticationTwoFactor
  )
  twoFactor?: GetAdministeredIdentitiesMe200ApplicationJSONAuthenticationTwoFactor;
}

/**
 * Successful operation
 */
export class GetAdministeredIdentitiesMe200ApplicationJSON extends SpeakeasyBase {
  /**
   * Authentication info
   */
  @SpeakeasyMetadata()
  @Expose({ name: "authentication" })
  @Type(() => GetAdministeredIdentitiesMe200ApplicationJSONAuthentication)
  authentication?: GetAdministeredIdentitiesMe200ApplicationJSONAuthentication;

  /**
   * User email
   */
  @SpeakeasyMetadata()
  @Expose({ name: "email" })
  email?: string;

  /**
   * Last seen active on Dashboard UI
   */
  @SpeakeasyMetadata()
  @Expose({ name: "lastUsedDashboardAt" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  lastUsedDashboardAt?: Date;

  /**
   * Username
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name?: string;
}

export class GetAdministeredIdentitiesMeResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * Successful operation
   */
  @SpeakeasyMetadata()
  getAdministeredIdentitiesMe200ApplicationJSONObject?: GetAdministeredIdentitiesMe200ApplicationJSON;
}
