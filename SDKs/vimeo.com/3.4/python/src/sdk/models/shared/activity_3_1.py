"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import category as shared_category
from ..shared import channel as shared_channel
from ..shared import group as shared_group
from ..shared import tag as shared_tag
from ..shared import user as shared_user
from ..shared import video as shared_video
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Activity31MetadataConnectionsRelated:
    r"""Related content for this activity."""
    
    options: list[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('options') }})
    r"""An array of HTTP methods permitted on this URI."""  
    uri: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('uri') }})
    r"""The API URI that resolves to the connection data."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Activity31MetadataConnections:
    r"""A list of resource URIs related to the activity."""
    
    related: Activity31MetadataConnectionsRelated = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('related') }})
    r"""Related content for this activity."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Activity31Metadata:
    r"""The activity's metadata."""
    
    connections: Activity31MetadataConnections = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('connections') }})
    r"""A list of resource URIs related to the activity."""  
    
class Activity31TypeEnum(str, Enum):
    r"""Activity type"""
    APPEARANCE = 'appearance'
    CATEGORY = 'category'
    CHANNEL = 'channel'
    FACEBOOK_FEED = 'facebook_feed'
    GROUP = 'group'
    LIKE = 'like'
    ONDEMAND = 'ondemand'
    SHARE = 'share'
    TAG = 'tag'
    TWITTER_TIMELINE = 'twitter_timeline'
    UPLOAD = 'upload'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Activity31:
    
    clip: shared_video.Video = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('clip') }})
    r"""Video associated with ths activity."""  
    metadata: Activity31Metadata = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('metadata') }})
    r"""The activity's metadata."""  
    time: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('time') }})
    r"""Time that the event occurred."""  
    type: Activity31TypeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type') }})
    r"""Activity type"""  
    category: Optional[shared_category.Category] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('category'), 'exclude': lambda f: f is None }})
    r"""The category that this event occurred for. This will be preset for only \\"category\\" activity types."""  
    channel: Optional[shared_channel.Channel] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('channel'), 'exclude': lambda f: f is None }})
    r"""The channel that this event occurred for. This will be present for only \\"channel\\" activity types."""  
    group: Optional[shared_group.Group] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('group'), 'exclude': lambda f: f is None }})
    r"""The group that this event occurred for. This will be present for only \\"group\\" activity types."""  
    tag: Optional[shared_tag.Tag] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tag'), 'exclude': lambda f: f is None }})
    r"""The tag that this event occurred for. This will be present for only \\"tag\\" activity types."""  
    user: Optional[shared_user.User] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('user'), 'exclude': lambda f: f is None }})
    r"""The user that this event occurred for. This will be present for \\"like\\", \\"appearance\\", and \\"share\\" activity types."""  
    