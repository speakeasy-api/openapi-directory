// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// ExchangeCodeForTokenRequestBodyRequest - Describes the configuration of a request to exchange an access code for a token.
type ExchangeCodeForTokenRequestBodyRequest struct {
	Code        *string `json:"code,omitempty"`
	RedirectURI *string `json:"redirectUri,omitempty"`
}

type ExchangeCodeForTokenRequestBody struct {
	// Describes the configuration of a request to exchange an access code for a token.
	Request ExchangeCodeForTokenRequestBodyRequest `json:"request"`
}

// ExchangeCodeForTokenProviderEnum - The third-party provider for the token. The only valid value is <code>figma</code>.
type ExchangeCodeForTokenProviderEnum string

const (
	ExchangeCodeForTokenProviderEnumFigma ExchangeCodeForTokenProviderEnum = "figma"
)

func (e *ExchangeCodeForTokenProviderEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "figma":
		*e = ExchangeCodeForTokenProviderEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ExchangeCodeForTokenProviderEnum: %s", s)
	}
}

type ExchangeCodeForTokenRequest struct {
	RequestBody       ExchangeCodeForTokenRequestBody `request:"mediaType=application/json"`
	XAmzAlgorithm     *string                         `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string                         `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string                         `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string                         `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string                         `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string                         `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string                         `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	// The third-party provider for the token. The only valid value is <code>figma</code>.
	Provider ExchangeCodeForTokenProviderEnum `pathParam:"style=simple,explode=false,name=provider"`
}

type ExchangeCodeForTokenResponse struct {
	ContentType string
	// Success
	ExchangeCodeForTokenResponse *shared.ExchangeCodeForTokenResponse
	// InvalidParameterException
	InvalidParameterException interface{}
	StatusCode                int
	RawResponse               *http.Response
}
