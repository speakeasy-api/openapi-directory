<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Images 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Deletes the specified image.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeImagesDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeImagesDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeImagesDeleteResponse
     */
	public function computeImagesDelete(
        \OpenAPI\OpenAPI\Models\Operations\ComputeImagesDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeImagesDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeImagesDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/global/images/{image}', \OpenAPI\OpenAPI\Models\Operations\ComputeImagesDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeImagesDeleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeImagesDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Sets the deprecation status of an image. If an empty request body is given, clears the deprecation status instead.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeImagesDeprecateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeImagesDeprecateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeImagesDeprecateResponse
     */
	public function computeImagesDeprecate(
        \OpenAPI\OpenAPI\Models\Operations\ComputeImagesDeprecateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeImagesDeprecateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeImagesDeprecateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/global/images/{image}/deprecate', \OpenAPI\OpenAPI\Models\Operations\ComputeImagesDeprecateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "deprecationStatus", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeImagesDeprecateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeImagesDeprecateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns the specified image.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeImagesGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeImagesGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeImagesGetResponse
     */
	public function computeImagesGet(
        \OpenAPI\OpenAPI\Models\Operations\ComputeImagesGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeImagesGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeImagesGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/global/images/{image}', \OpenAPI\OpenAPI\Models\Operations\ComputeImagesGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeImagesGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeImagesGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->image = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Image', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns the latest image that is part of an image family and is not deprecated. For more information on image families, see Public image families documentation.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeImagesGetFromFamilyRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeImagesGetFromFamilySecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeImagesGetFromFamilyResponse
     */
	public function computeImagesGetFromFamily(
        \OpenAPI\OpenAPI\Models\Operations\ComputeImagesGetFromFamilyRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeImagesGetFromFamilySecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeImagesGetFromFamilyResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/global/images/family/{family}', \OpenAPI\OpenAPI\Models\Operations\ComputeImagesGetFromFamilyRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeImagesGetFromFamilyRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeImagesGetFromFamilyResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->image = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Image', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets the access control policy for a resource. May be empty if no such policy or resource exists.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeImagesGetIamPolicyRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeImagesGetIamPolicySecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeImagesGetIamPolicyResponse
     */
	public function computeImagesGetIamPolicy(
        \OpenAPI\OpenAPI\Models\Operations\ComputeImagesGetIamPolicyRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeImagesGetIamPolicySecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeImagesGetIamPolicyResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/global/images/{resource}/getIamPolicy', \OpenAPI\OpenAPI\Models\Operations\ComputeImagesGetIamPolicyRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeImagesGetIamPolicyRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeImagesGetIamPolicyResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->policy = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Policy', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates an image in the specified project using the data included in the request.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeImagesInsertRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeImagesInsertSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeImagesInsertResponse
     */
	public function computeImagesInsert(
        \OpenAPI\OpenAPI\Models\Operations\ComputeImagesInsertRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeImagesInsertSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeImagesInsertResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/global/images', \OpenAPI\OpenAPI\Models\Operations\ComputeImagesInsertRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "image", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeImagesInsertRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeImagesInsertResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieves the list of custom images available to the specified project. Custom images are images you create that belong to your project. This method does not get any images that belong to other projects, including publicly-available images, like Debian 8. If you want to get a list of publicly-available images, use this method to make a request to the respective image project, such as debian-cloud or windows-cloud.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeImagesListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeImagesListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeImagesListResponse
     */
	public function computeImagesList(
        \OpenAPI\OpenAPI\Models\Operations\ComputeImagesListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeImagesListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeImagesListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/global/images', \OpenAPI\OpenAPI\Models\Operations\ComputeImagesListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeImagesListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeImagesListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->imageList = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ImageList', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Patches the specified image with the data included in the request. Only the following fields can be modified: family, description, deprecation status.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeImagesPatchRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeImagesPatchSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeImagesPatchResponse
     */
	public function computeImagesPatch(
        \OpenAPI\OpenAPI\Models\Operations\ComputeImagesPatchRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeImagesPatchSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeImagesPatchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/global/images/{image}', \OpenAPI\OpenAPI\Models\Operations\ComputeImagesPatchRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "image1", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeImagesPatchRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeImagesPatchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Sets the access control policy on the specified resource. Replaces any existing policy.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeImagesSetIamPolicyRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeImagesSetIamPolicySecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeImagesSetIamPolicyResponse
     */
	public function computeImagesSetIamPolicy(
        \OpenAPI\OpenAPI\Models\Operations\ComputeImagesSetIamPolicyRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeImagesSetIamPolicySecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeImagesSetIamPolicyResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/global/images/{resource}/setIamPolicy', \OpenAPI\OpenAPI\Models\Operations\ComputeImagesSetIamPolicyRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "globalSetPolicyRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeImagesSetIamPolicyRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeImagesSetIamPolicyResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->policy = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Policy', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Sets the labels on an image. To learn more about labels, read the Labeling Resources documentation.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeImagesSetLabelsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeImagesSetLabelsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeImagesSetLabelsResponse
     */
	public function computeImagesSetLabels(
        \OpenAPI\OpenAPI\Models\Operations\ComputeImagesSetLabelsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeImagesSetLabelsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeImagesSetLabelsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/global/images/{resource}/setLabels', \OpenAPI\OpenAPI\Models\Operations\ComputeImagesSetLabelsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "globalSetLabelsRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeImagesSetLabelsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeImagesSetLabelsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns permissions that a caller has on the specified resource.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeImagesTestIamPermissionsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeImagesTestIamPermissionsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeImagesTestIamPermissionsResponse
     */
	public function computeImagesTestIamPermissions(
        \OpenAPI\OpenAPI\Models\Operations\ComputeImagesTestIamPermissionsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeImagesTestIamPermissionsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeImagesTestIamPermissionsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/global/images/{resource}/testIamPermissions', \OpenAPI\OpenAPI\Models\Operations\ComputeImagesTestIamPermissionsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "testPermissionsRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeImagesTestIamPermissionsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeImagesTestIamPermissionsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->testPermissionsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\TestPermissionsResponse', 'json');
            }
        }

        return $response;
    }
}