"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Any, Optional

class ConfigModuleEnablementStateEnum(str, Enum):
    r"""The state of enablement for the module at its level of the resource hierarchy."""
    ENABLEMENT_STATE_UNSPECIFIED = 'ENABLEMENT_STATE_UNSPECIFIED'
    INHERITED = 'INHERITED'
    ENABLED = 'ENABLED'
    DISABLED = 'DISABLED'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Config:
    r"""Configuration of a module."""
    
    module_enablement_state: Optional[ConfigModuleEnablementStateEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('moduleEnablementState'), 'exclude': lambda f: f is None }})
    r"""The state of enablement for the module at its level of the resource hierarchy."""  
    value: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('value'), 'exclude': lambda f: f is None }})
    r"""The configuration value for the module. The absence of this field implies its inheritance from the parent."""  
    