// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"time"
)

// StringInSearchTypeEnum - String search result typ from ZNT. Options are LOCAL_PROJECT, IMPORTED_TM. Imported TM results should probably not be visible to end users.
type StringInSearchTypeEnum string

const (
	StringInSearchTypeEnumLocalProject StringInSearchTypeEnum = "LOCAL_PROJECT"
	StringInSearchTypeEnumImportedTm   StringInSearchTypeEnum = "IMPORTED_TM"
)

func (e StringInSearchTypeEnum) ToPointer() *StringInSearchTypeEnum {
	return &e
}

func (e *StringInSearchTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "LOCAL_PROJECT":
		fallthrough
	case "IMPORTED_TM":
		*e = StringInSearchTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for StringInSearchTypeEnum: %v", v)
	}
}

type StringInSearch struct {
	FileID            *int64 `json:"file_id,omitempty"`
	InternalProjectID *int64 `json:"internal_project_id,omitempty"`
	// the date-time notation as defined by RFC 3339, section 5.6, for example, 2017-07-21T17:32:28Z
	LastUpdated *time.Time                  `json:"last_updated,omitempty"`
	ProjectID   *int64                      `json:"project_id,omitempty"`
	SearchScore *float32                    `json:"search_score,omitempty"`
	Source      *string                     `json:"source,omitempty"`
	Status      *StringTranslationStateEnum `json:"status,omitempty"`
	StringID    *int64                      `json:"string_id,omitempty"`
	Target      *string                     `json:"target,omitempty"`
	Targets     []string                    `json:"targets,omitempty"`
	TmName      *string                     `json:"tm_name,omitempty"`
	// String search result typ from ZNT. Options are LOCAL_PROJECT, IMPORTED_TM. Imported TM results should probably not be visible to end users.
	Type *StringInSearchTypeEnum `json:"type,omitempty"`
}
