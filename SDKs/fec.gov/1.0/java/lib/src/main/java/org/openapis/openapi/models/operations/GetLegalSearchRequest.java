/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import com.fasterxml.jackson.annotation.JsonProperty;
import java.time.LocalDate;
import org.openapis.openapi.utils.SpeakeasyMetadata;

public class GetLegalSearchRequest {
    /**
     * Admin fine committee ID
     * 
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=af_committee_id")
    public String afCommitteeId;

    public GetLegalSearchRequest withAfCommitteeId(String afCommitteeId) {
        this.afCommitteeId = afCommitteeId;
        return this;
    }
    
    /**
     * Final Determination fine amount
     * 
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=af_fd_fine_amount")
    public Integer afFdFineAmount;

    public GetLegalSearchRequest withAfFdFineAmount(Integer afFdFineAmount) {
        this.afFdFineAmount = afFdFineAmount;
        return this;
    }
    
    /**
     * The latest Final Determination date
     * 
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=af_max_fd_date")
    public LocalDate afMaxFdDate;

    public GetLegalSearchRequest withAfMaxFdDate(LocalDate afMaxFdDate) {
        this.afMaxFdDate = afMaxFdDate;
        return this;
    }
    
    /**
     * The latest Reason to Believe date
     * 
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=af_max_rtb_date")
    public LocalDate afMaxRtbDate;

    public GetLegalSearchRequest withAfMaxRtbDate(LocalDate afMaxRtbDate) {
        this.afMaxRtbDate = afMaxRtbDate;
        return this;
    }
    
    /**
     * The earliest Final Determination date
     * 
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=af_min_fd_date")
    public LocalDate afMinFdDate;

    public GetLegalSearchRequest withAfMinFdDate(LocalDate afMinFdDate) {
        this.afMinFdDate = afMinFdDate;
        return this;
    }
    
    /**
     * The earliest Reason to Believe date
     * 
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=af_min_rtb_date")
    public LocalDate afMinRtbDate;

    public GetLegalSearchRequest withAfMinRtbDate(LocalDate afMinRtbDate) {
        this.afMinRtbDate = afMinRtbDate;
        return this;
    }
    
    /**
     * Admin fine committee name
     * 
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=af_name")
    public String[] afName;

    public GetLegalSearchRequest withAfName(String[] afName) {
        this.afName = afName;
        return this;
    }
    
    /**
     * Admin fine report year
     * 
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=af_report_year")
    public String afReportYear;

    public GetLegalSearchRequest withAfReportYear(String afReportYear) {
        this.afReportYear = afReportYear;
        return this;
    }
    
    /**
     * Reason to Believe fine amount
     * 
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=af_rtb_fine_amount")
    public Integer afRtbFineAmount;

    public GetLegalSearchRequest withAfRtbFineAmount(Integer afRtbFineAmount) {
        this.afRtbFineAmount = afRtbFineAmount;
        return this;
    }
    
    /**
     * Category of the document
     * 
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=ao_category")
    public GetLegalSearchAoCategoryEnum[] aoCategory;

    public GetLegalSearchRequest withAoCategory(GetLegalSearchAoCategoryEnum[] aoCategory) {
        this.aoCategory = aoCategory;
        return this;
    }
    
    /**
     * Require all citations to be in document (default behavior is any)
     * 
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=ao_citation_require_all")
    public Boolean aoCitationRequireAll;

    public GetLegalSearchRequest withAoCitationRequireAll(Boolean aoCitationRequireAll) {
        this.aoCitationRequireAll = aoCitationRequireAll;
        return this;
    }
    
    /**
     * Name of commenter or representative
     * 
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=ao_entity_name")
    public String[] aoEntityName;

    public GetLegalSearchRequest withAoEntityName(String[] aoEntityName) {
        this.aoEntityName = aoEntityName;
        return this;
    }
    
    /**
     * AO is pending
     * 
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=ao_is_pending")
    public Boolean aoIsPending;

    public GetLegalSearchRequest withAoIsPending(Boolean aoIsPending) {
        this.aoIsPending = aoIsPending;
        return this;
    }
    
    /**
     * Latest issue date of advisory opinion
     * 
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=ao_max_issue_date")
    public LocalDate aoMaxIssueDate;

    public GetLegalSearchRequest withAoMaxIssueDate(LocalDate aoMaxIssueDate) {
        this.aoMaxIssueDate = aoMaxIssueDate;
        return this;
    }
    
    /**
     * Latest request date of advisory opinion
     * 
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=ao_max_request_date")
    public LocalDate aoMaxRequestDate;

    public GetLegalSearchRequest withAoMaxRequestDate(LocalDate aoMaxRequestDate) {
        this.aoMaxRequestDate = aoMaxRequestDate;
        return this;
    }
    
    /**
     * Earliest issue date of advisory opinion
     * 
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=ao_min_issue_date")
    public LocalDate aoMinIssueDate;

    public GetLegalSearchRequest withAoMinIssueDate(LocalDate aoMinIssueDate) {
        this.aoMinIssueDate = aoMinIssueDate;
        return this;
    }
    
    /**
     * Earliest request date of advisory opinion
     * 
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=ao_min_request_date")
    public LocalDate aoMinRequestDate;

    public GetLegalSearchRequest withAoMinRequestDate(LocalDate aoMinRequestDate) {
        this.aoMinRequestDate = aoMinRequestDate;
        return this;
    }
    
    /**
     * Force advisory opinion name
     * 
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=ao_name")
    public String[] aoName;

    public GetLegalSearchRequest withAoName(String[] aoName) {
        this.aoName = aoName;
        return this;
    }
    
    /**
     * Force advisory opinion number
     * 
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=ao_no")
    public String[] aoNo;

    public GetLegalSearchRequest withAoNo(String[] aoNo) {
        this.aoNo = aoNo;
        return this;
    }
    
    /**
     * Regulatory citations
     * 
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=ao_regulatory_citation")
    public String[] aoRegulatoryCitation;

    public GetLegalSearchRequest withAoRegulatoryCitation(String[] aoRegulatoryCitation) {
        this.aoRegulatoryCitation = aoRegulatoryCitation;
        return this;
    }
    
    /**
     * The requestor of the advisory opinion
     * 
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=ao_requestor")
    public String aoRequestor;

    public GetLegalSearchRequest withAoRequestor(String aoRequestor) {
        this.aoRequestor = aoRequestor;
        return this;
    }
    
    /**
     * Code of the advisory opinion requestor type.
     * 
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=ao_requestor_type")
    public GetLegalSearchAoRequestorTypeEnum[] aoRequestorType;

    public GetLegalSearchRequest withAoRequestorType(GetLegalSearchAoRequestorTypeEnum[] aoRequestorType) {
        this.aoRequestorType = aoRequestorType;
        return this;
    }
    
    /**
     * Status of AO (pending, withdrawn, or final)
     * 
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=ao_status")
    public String aoStatus;

    public GetLegalSearchRequest withAoStatus(String aoStatus) {
        this.aoStatus = aoStatus;
        return this;
    }
    
    /**
     * Statutory citations
     * 
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=ao_statutory_citation")
    public String[] aoStatutoryCitation;

    public GetLegalSearchRequest withAoStatutoryCitation(String[] aoStatutoryCitation) {
        this.aoStatutoryCitation = aoStatutoryCitation;
        return this;
    }
    
    /**
     * API key for https://api.data.gov. Get one at https://api.data.gov/signup.
     * 
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=api_key")
    public String apiKey;

    public GetLegalSearchRequest withApiKey(String apiKey) {
        this.apiKey = apiKey;
        return this;
    }
    
    /**
     * Require all citations to be in document (default behavior is any)
     * 
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=case_citation_require_all")
    public Boolean caseCitationRequireAll;

    public GetLegalSearchRequest withCaseCitationRequireAll(Boolean caseCitationRequireAll) {
        this.caseCitationRequireAll = caseCitationRequireAll;
        return this;
    }
    
    /**
     * Cases dispositions
     * 
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=case_dispositions")
    public String[] caseDispositions;

    public GetLegalSearchRequest withCaseDispositions(String[] caseDispositions) {
        this.caseDispositions = caseDispositions;
        return this;
    }
    
    /**
     * Select one or more case_doc_category_id to filter by corresponding CASE_DOCUMENT_CATEGORY:
     *         - 1 - Conciliation and Settlement Agreements
     *         - 2 - Complaint, Responses, Designation of Counsel and Extensions of Time
     *         - 3 - General Counsel Reports, Briefs, Notifications and Responses
     *         - 4 - Certifications
     *         - 5 - Civil Penalties, Disgorgements, Other Payments and Letters of Compliance
     *         - 6 - Statement of Reasons 
     *         - 1001 - ADR Settlement Agreements
     *         - 1002 - Complaint, Responses, Designation of Counsel and Extensions of Time
     *         - 1003 - ADR Memoranda, Notifications and Responses
     *         - 1004 - Certifications
     *         - 1005 - Civil Penalties, Disgorgements, Other Payments and Letters of Compliance
     *         - 1006 - Statement of Reasons 
     *         - 2001 - Administrative Fine Case
     * 
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=case_doc_category_id")
    public GetLegalSearchCaseDocCategoryIDEnum[] caseDocCategoryId;

    public GetLegalSearchRequest withCaseDocCategoryId(GetLegalSearchCaseDocCategoryIDEnum[] caseDocCategoryId) {
        this.caseDocCategoryId = caseDocCategoryId;
        return this;
    }
    
    /**
     * Cases election cycles
     * 
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=case_election_cycles")
    public Integer caseElectionCycles;

    public GetLegalSearchRequest withCaseElectionCycles(Integer caseElectionCycles) {
        this.caseElectionCycles = caseElectionCycles;
        return this;
    }
    
    /**
     * The latest date closed of case
     * 
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=case_max_close_date")
    public LocalDate caseMaxCloseDate;

    public GetLegalSearchRequest withCaseMaxCloseDate(LocalDate caseMaxCloseDate) {
        this.caseMaxCloseDate = caseMaxCloseDate;
        return this;
    }
    
    /**
     * The latest date opened of case
     * 
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=case_max_open_date")
    public LocalDate caseMaxOpenDate;

    public GetLegalSearchRequest withCaseMaxOpenDate(LocalDate caseMaxOpenDate) {
        this.caseMaxOpenDate = caseMaxOpenDate;
        return this;
    }
    
    /**
     * The earliest date closed of case
     * 
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=case_min_close_date")
    public LocalDate caseMinCloseDate;

    public GetLegalSearchRequest withCaseMinCloseDate(LocalDate caseMinCloseDate) {
        this.caseMinCloseDate = caseMinCloseDate;
        return this;
    }
    
    /**
     * The earliest date opened of case
     * 
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=case_min_open_date")
    public LocalDate caseMinOpenDate;

    public GetLegalSearchRequest withCaseMinOpenDate(LocalDate caseMinOpenDate) {
        this.caseMinOpenDate = caseMinOpenDate;
        return this;
    }
    
    /**
     * Enforcement matter case number
     * 
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=case_no")
    public String[] caseNo;

    public GetLegalSearchRequest withCaseNo(String[] caseNo) {
        this.caseNo = caseNo;
        return this;
    }
    
    /**
     * Regulatory citations
     * 
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=case_regulatory_citation")
    public String[] caseRegulatoryCitation;

    public GetLegalSearchRequest withCaseRegulatoryCitation(String[] caseRegulatoryCitation) {
        this.caseRegulatoryCitation = caseRegulatoryCitation;
        return this;
    }
    
    /**
     * Cases respondents
     * 
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=case_respondents")
    public String caseRespondents;

    public GetLegalSearchRequest withCaseRespondents(String caseRespondents) {
        this.caseRespondents = caseRespondents;
        return this;
    }
    
    /**
     * Statutory citations
     * 
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=case_statutory_citation")
    public String[] caseStatutoryCitation;

    public GetLegalSearchRequest withCaseStatutoryCitation(String[] caseStatutoryCitation) {
        this.caseStatutoryCitation = caseStatutoryCitation;
        return this;
    }
    
    /**
     * Get results starting from this index
     * 
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=from_hit")
    public Integer fromHit;

    public GetLegalSearchRequest withFromHit(Integer fromHit) {
        this.fromHit = fromHit;
        return this;
    }
    
    /**
     * Number of results to return (max 10)
     * 
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=hits_returned")
    public Integer hitsReturned;

    public GetLegalSearchRequest withHitsReturned(Integer hitsReturned) {
        this.hitsReturned = hitsReturned;
        return this;
    }
    
    /**
     * Type of MUR : current or archived
     * 
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=mur_type")
    public GetLegalSearchMurTypeEnum murType;

    public GetLegalSearchRequest withMurType(GetLegalSearchMurTypeEnum murType) {
        this.murType = murType;
        return this;
    }
    
    /**
     * Text to search legal documents for
     * 
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=q")
    public String q;

    public GetLegalSearchRequest withQ(String q) {
        this.q = q;
        return this;
    }
    
    /**
     * Provide a field to sort by. Use `-` for descending order. ex: `-case_no`
     * 
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=sort")
    public String sort;

    public GetLegalSearchRequest withSort(String sort) {
        this.sort = sort;
        return this;
    }
    
    /**
     * Choose a legal document type
     * 
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=type")
    public GetLegalSearchTypeEnum type;

    public GetLegalSearchRequest withType(GetLegalSearchTypeEnum type) {
        this.type = type;
        return this;
    }
    
    public GetLegalSearchRequest(@JsonProperty("api_key") String apiKey) {
        this.apiKey = apiKey;
  }
}
