<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Shared;


/**
 * ProxyCreateRefund - Container for custom fields of a Refund object.
 * 
 * 
 * 
 * @package OpenAPI\OpenAPI\Models\Shared
 * @access public
 */
class ProxyCreateRefund
{
    /**
     *  The ID of the account associated with this refund. This field is only required if you create a non-referenced refund. Don't specify a value for any other type of refund; Zuora associates the refund automatically with the account from the associated payment.
     * 
     * **Character limit**: 32 **Values**: a valid account ID 
     * 
     * @var ?string $accountId
     */
	#[\JMS\Serializer\Annotation\SerializedName('AccountId')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $accountId = null;
    
    /**
     *  The amount of the refund. The amount can't exceed the amount of the associated payment. If the original payment was applied to a single invoice, you can create a partial refund by specifying an amount in this field or through the UI. If the payment was applied to multiple invoices, you can create a partial refund by using the `RefundInvoicePaymentData` field of this operation or through the UI.
     * 
     * **Character limit**: 16 **Values**: a valid currency amount 
     * 
     * @var float $amount
     */
	#[\JMS\Serializer\Annotation\SerializedName('Amount')]
    #[\JMS\Serializer\Annotation\Type('float')]
    public float $amount;
    
    /**
     *  Use this field to record comments about the refund.
     * 
     * **Character limit**: 255 **Values**: a string of 255 characters or fewer 
     * 
     * @var ?string $comment
     */
	#[\JMS\Serializer\Annotation\SerializedName('Comment')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $comment = null;
    
    /**
     * A field used to pass gateway options. Zuora allows you to pass in special gateway-specific parameters for payments that go through the Adyen, Autorize.et, CyberSource, Merchant eSolutions, Orbital (Chase Paymentech), QValent, Vantiv, and Verifi gateways.
     * 
     * 
     * For each of these special parameters, you supply the name-value pair and Zuora passes it to the gateway. This allows you to add functionality that's supported by a specific gateway but currently not supported by Zuora.
     * 
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\ProxyCreateRefundGatewayOptionData $gatewayOptionData
     */
	#[\JMS\Serializer\Annotation\SerializedName('GatewayOptionData')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\ProxyCreateRefundGatewayOptionData')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?ProxyCreateRefundGatewayOptionData $gatewayOptionData = null;
    
    /**
     *  The status of the payment in the gateway.
     * 
     * **Character limit**: 19 **Values**: automatically generated 
     * 
     * @var ?string $gatewayState
     */
	#[\JMS\Serializer\Annotation\SerializedName('GatewayState')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $gatewayState = null;
    
    /**
     * ID of the corresponding object in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).
     * 
     * 
     * 
     * @var ?string $integrationIdNS
     */
	#[\JMS\Serializer\Annotation\SerializedName('IntegrationId__NS')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $integrationIdNS = null;
    
    /**
     * Status of the refund's synchronization with NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).
     * 
     * 
     * 
     * @var ?string $integrationStatusNS
     */
	#[\JMS\Serializer\Annotation\SerializedName('IntegrationStatus__NS')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $integrationStatusNS = null;
    
    /**
     *  Indicates how an external refund was issued to a customer. This field is only required if the `Type` field is set to ` External`. You can issue an external refund on an electronic payment. **Character limit**: 30 **Values**:
     * 
     * 
     * - `ACH`
     * - `Cash`
     * - `Check`
     * - `CreditCard`
     * - `Other`
     * - `PayPal`
     * - `WireTransfer`
     * - `DebitCard`
     * - `CreditCardReferenceTransaction`
     * 
     * 
     * @var ?string $methodType
     */
	#[\JMS\Serializer\Annotation\SerializedName('MethodType')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $methodType = null;
    
    /**
     * Origin of the corresponding object in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).
     * 
     * 
     * 
     * @var ?string $originNS
     */
	#[\JMS\Serializer\Annotation\SerializedName('Origin__NS')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $originNS = null;
    
    /**
     *  The unique ID of the payment associated with this refund. Don't specify a value for this field if you're creating an electronic non-referenced refund.
     * 
     * **Character limit**: 32 **Values**: a valid payment ID 
     * 
     * @var ?string $paymentId
     */
	#[\JMS\Serializer\Annotation\SerializedName('PaymentId')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $paymentId = null;
    
    /**
     *  The unique ID of the payment method that the customer used to make the payment. This field is only required if you create a non-referenced refund.
     * 
     * **Character limit**: 32 **V****alues**: a valid payment method ID 
     * 
     * @var ?string $paymentMethodId
     */
	#[\JMS\Serializer\Annotation\SerializedName('PaymentMethodId')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $paymentMethodId = null;
    
    /**
     *  A code identifying the reason for the transaction. Must be an existing reason code or empty. If you do not specify a value, Zuora uses the default reason code.
     * 
     * **Character limit**: 32 **V****alues**: a valid reason code 
     * 
     * @var ?string $reasonCode
     */
	#[\JMS\Serializer\Annotation\SerializedName('ReasonCode')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $reasonCode = null;
    
    /**
     * The date of the refund, in `yyyy-mm-dd` format. The date of the refund cannot be before the payment date. This field is only required if the `Type` field is set to ` External`. Zuora automatically generates this field for electronic refunds.
     * 
     * 
     * With the Future Dated Credit Balance Adjustment feature enabled, you can create a non-referenced refund with a refund date. 
     * * For external refunds, you can specify any date.
     * * For electronic refunds, you can only set the date to the date when the API operation is called or one day later.
     * 
     * 
     * @var ?\DateTime $refundDate
     */
	#[\JMS\Serializer\Annotation\SerializedName('RefundDate')]
    #[\JMS\Serializer\Annotation\Type("DateTime<'Y-m-d', '', '|Y-m-d'>")]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?\DateTime $refundDate = null;
    
    /**
     * Container for the refund invoice payment data. This field is only required if you apply a full or partical refund against a payment attached to muliple invoices.
     * 
     * 
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\ProxyCreateRefundRefundInvoicePaymentData $refundInvoicePaymentData
     */
	#[\JMS\Serializer\Annotation\SerializedName('RefundInvoicePaymentData')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\ProxyCreateRefundRefundInvoicePaymentData')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?ProxyCreateRefundRefundInvoicePaymentData $refundInvoicePaymentData = null;
    
    /**
     *  A payment gateway-specific field that maps Zuora to other gateways . **Character limit**: 35 **Values**:
     * 
     * 
     * - 3-byte company identifier &quot;*&quot; 18-byte descriptor
     * - 7-byte company identifier &quot;*&quot; 14-byte descriptor
     * - 12-byte company identifier &quot;*&quot; 9-byte descriptor
     * 
     * 
     * @var ?string $softDescriptor
     */
	#[\JMS\Serializer\Annotation\SerializedName('SoftDescriptor')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $softDescriptor = null;
    
    /**
     *  A payment gateway-specific field that maps Zuora to other gateways . **Character limit**: 20 **Values**:
     * 
     * 
     * - Customer service phone number formatted as: `NNN-NNN-NNNN` or `NNN-AAAAAAA`
     * - URL (non-e-Commerce): Transactions sent with a URL do not qualify for the best interchange rate
     * - Email address
     * 
     * 
     * @var ?string $softDescriptorPhone
     */
	#[\JMS\Serializer\Annotation\SerializedName('SoftDescriptorPhone')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $softDescriptorPhone = null;
    
    /**
     *  Specifies whether the refund is a refund payment or a credit balance. This field is only required if you create a non-referenced refund. If you creating an non-referenced refund, then set this value to `CreditBalance`.
     * 
     * **Note**: If you have the Invoice Settlement feature enabled, the value of this field can only be set to `Payment`.
     * **Character limit**: 13 **Values**:
     * 
     * - `Payment`
     * - `CreditBalance`
     * 
     * 
     * @var ?string $sourceType
     */
	#[\JMS\Serializer\Annotation\SerializedName('SourceType')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $sourceType = null;
    
    /**
     * Date when the refund was synchronized with NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).
     * 
     * 
     * 
     * @var ?string $syncDateNS
     */
	#[\JMS\Serializer\Annotation\SerializedName('SyncDate__NS')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $syncDateNS = null;
    
    /**
     * Specifies whether the refund should be synchronized with NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).
     * 
     * 
     * 
     * @var ?string $synctoNetSuiteNS
     */
	#[\JMS\Serializer\Annotation\SerializedName('SynctoNetSuite__NS')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $synctoNetSuiteNS = null;
    
    /**
     *  Specifies if the refund is electronic or external.
     * 
     * **Character limit**: 10 **Values**:
     * 
     * - `Electronic`
     * - `External`
     * 
     * 
     * @var string $type
     */
	#[\JMS\Serializer\Annotation\SerializedName('Type')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $type;
    
	public function __construct()
	{
		$this->accountId = null;
		$this->amount = 0;
		$this->comment = null;
		$this->gatewayOptionData = null;
		$this->gatewayState = null;
		$this->integrationIdNS = null;
		$this->integrationStatusNS = null;
		$this->methodType = null;
		$this->originNS = null;
		$this->paymentId = null;
		$this->paymentMethodId = null;
		$this->reasonCode = null;
		$this->refundDate = null;
		$this->refundInvoicePaymentData = null;
		$this->softDescriptor = null;
		$this->softDescriptorPhone = null;
		$this->sourceType = null;
		$this->syncDateNS = null;
		$this->synctoNetSuiteNS = null;
		$this->type = "";
	}
}
