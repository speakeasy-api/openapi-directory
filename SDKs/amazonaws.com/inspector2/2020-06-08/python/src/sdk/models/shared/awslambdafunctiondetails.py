"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from ..shared import architecture_enum as shared_architecture_enum
from ..shared import lambdavpcconfig as shared_lambdavpcconfig
from ..shared import packagetype_enum as shared_packagetype_enum
from ..shared import runtime_enum as shared_runtime_enum
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from marshmallow import fields
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class AwsLambdaFunctionDetails:
    r"""A summary of information about the AWS Lambda function."""
    
    code_sha256: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('codeSha256') }})  
    execution_role_arn: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('executionRoleArn') }})  
    function_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('functionName') }})  
    runtime: shared_runtime_enum.RuntimeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('runtime') }})  
    version: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('version') }})  
    architectures: Optional[list[shared_architecture_enum.ArchitectureEnum]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('architectures'), 'exclude': lambda f: f is None }})  
    last_modified_at: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lastModifiedAt'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})  
    layers: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('layers'), 'exclude': lambda f: f is None }})  
    package_type: Optional[shared_packagetype_enum.PackageTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('packageType'), 'exclude': lambda f: f is None }})  
    vpc_config: Optional[shared_lambdavpcconfig.LambdaVpcConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('vpcConfig'), 'exclude': lambda f: f is None }})  
    