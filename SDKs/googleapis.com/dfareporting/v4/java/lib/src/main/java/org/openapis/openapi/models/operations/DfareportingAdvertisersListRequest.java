/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import com.fasterxml.jackson.annotation.JsonProperty;
import org.openapis.openapi.utils.SpeakeasyMetadata;

public class DfareportingAdvertisersListRequest {
    /**
     * V1 error format.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=$.xgafv")
    public org.openapis.openapi.models.shared.XgafvEnum dollarXgafv;

    public DfareportingAdvertisersListRequest withDollarXgafv(org.openapis.openapi.models.shared.XgafvEnum dollarXgafv) {
        this.dollarXgafv = dollarXgafv;
        return this;
    }
    
    /**
     * OAuth access token.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=access_token")
    public String accessToken;

    public DfareportingAdvertisersListRequest withAccessToken(String accessToken) {
        this.accessToken = accessToken;
        return this;
    }
    
    /**
     * Select only advertisers with these advertiser group IDs.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=advertiserGroupIds")
    public String[] advertiserGroupIds;

    public DfareportingAdvertisersListRequest withAdvertiserGroupIds(String[] advertiserGroupIds) {
        this.advertiserGroupIds = advertiserGroupIds;
        return this;
    }
    
    /**
     * Data format for response.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=alt")
    public org.openapis.openapi.models.shared.AltEnum alt;

    public DfareportingAdvertisersListRequest withAlt(org.openapis.openapi.models.shared.AltEnum alt) {
        this.alt = alt;
        return this;
    }
    
    /**
     * JSONP
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=callback")
    public String callback;

    public DfareportingAdvertisersListRequest withCallback(String callback) {
        this.callback = callback;
        return this;
    }
    
    /**
     * Selector specifying which fields to include in a partial response.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=fields")
    public String fields;

    public DfareportingAdvertisersListRequest withFields(String fields) {
        this.fields = fields;
        return this;
    }
    
    /**
     * Select only advertisers with these floodlight configuration IDs.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=floodlightConfigurationIds")
    public String[] floodlightConfigurationIds;

    public DfareportingAdvertisersListRequest withFloodlightConfigurationIds(String[] floodlightConfigurationIds) {
        this.floodlightConfigurationIds = floodlightConfigurationIds;
        return this;
    }
    
    /**
     * Select only advertisers with these IDs.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=ids")
    public String[] ids;

    public DfareportingAdvertisersListRequest withIds(String[] ids) {
        this.ids = ids;
        return this;
    }
    
    /**
     * Select only advertisers which do not belong to any advertiser group.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=includeAdvertisersWithoutGroupsOnly")
    public Boolean includeAdvertisersWithoutGroupsOnly;

    public DfareportingAdvertisersListRequest withIncludeAdvertisersWithoutGroupsOnly(Boolean includeAdvertisersWithoutGroupsOnly) {
        this.includeAdvertisersWithoutGroupsOnly = includeAdvertisersWithoutGroupsOnly;
        return this;
    }
    
    /**
     * API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=key")
    public String key;

    public DfareportingAdvertisersListRequest withKey(String key) {
        this.key = key;
        return this;
    }
    
    /**
     * Maximum number of results to return.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=maxResults")
    public Long maxResults;

    public DfareportingAdvertisersListRequest withMaxResults(Long maxResults) {
        this.maxResults = maxResults;
        return this;
    }
    
    /**
     * OAuth 2.0 token for the current user.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=oauth_token")
    public String oauthToken;

    public DfareportingAdvertisersListRequest withOauthToken(String oauthToken) {
        this.oauthToken = oauthToken;
        return this;
    }
    
    /**
     * Select only advertisers which use another advertiser's floodlight configuration.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=onlyParent")
    public Boolean onlyParent;

    public DfareportingAdvertisersListRequest withOnlyParent(Boolean onlyParent) {
        this.onlyParent = onlyParent;
        return this;
    }
    
    /**
     * Value of the nextPageToken from the previous result page.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=pageToken")
    public String pageToken;

    public DfareportingAdvertisersListRequest withPageToken(String pageToken) {
        this.pageToken = pageToken;
        return this;
    }
    
    /**
     * Returns response with indentations and line breaks.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=prettyPrint")
    public Boolean prettyPrint;

    public DfareportingAdvertisersListRequest withPrettyPrint(Boolean prettyPrint) {
        this.prettyPrint = prettyPrint;
        return this;
    }
    
    /**
     * User profile ID associated with this request.
     */
    @SpeakeasyMetadata("pathParam:style=simple,explode=false,name=profileId")
    public String profileId;

    public DfareportingAdvertisersListRequest withProfileId(String profileId) {
        this.profileId = profileId;
        return this;
    }
    
    /**
     * Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=quotaUser")
    public String quotaUser;

    public DfareportingAdvertisersListRequest withQuotaUser(String quotaUser) {
        this.quotaUser = quotaUser;
        return this;
    }
    
    /**
     * Allows searching for objects by name or ID. Wildcards (*) are allowed. For example, "advertiser*2015" will return objects with names like "advertiser June 2015", "advertiser April 2015", or simply "advertiser 2015". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of "advertiser" will match objects with name "my advertiser", "advertiser 2015", or simply "advertiser" .
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=searchString")
    public String searchString;

    public DfareportingAdvertisersListRequest withSearchString(String searchString) {
        this.searchString = searchString;
        return this;
    }
    
    /**
     * Field by which to sort the list.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=sortField")
    public DfareportingAdvertisersListSortFieldEnum sortField;

    public DfareportingAdvertisersListRequest withSortField(DfareportingAdvertisersListSortFieldEnum sortField) {
        this.sortField = sortField;
        return this;
    }
    
    /**
     * Order of sorted results.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=sortOrder")
    public DfareportingAdvertisersListSortOrderEnum sortOrder;

    public DfareportingAdvertisersListRequest withSortOrder(DfareportingAdvertisersListSortOrderEnum sortOrder) {
        this.sortOrder = sortOrder;
        return this;
    }
    
    /**
     * Select only advertisers with the specified status.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=status")
    public DfareportingAdvertisersListStatusEnum status;

    public DfareportingAdvertisersListRequest withStatus(DfareportingAdvertisersListStatusEnum status) {
        this.status = status;
        return this;
    }
    
    /**
     * Select only advertisers with these subaccount IDs.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=subaccountId")
    public String subaccountId;

    public DfareportingAdvertisersListRequest withSubaccountId(String subaccountId) {
        this.subaccountId = subaccountId;
        return this;
    }
    
    /**
     * Legacy upload protocol for media (e.g. "media", "multipart").
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=uploadType")
    public String uploadType;

    public DfareportingAdvertisersListRequest withUploadType(String uploadType) {
        this.uploadType = uploadType;
        return this;
    }
    
    /**
     * Upload protocol for media (e.g. "raw", "multipart").
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=upload_protocol")
    public String uploadProtocol;

    public DfareportingAdvertisersListRequest withUploadProtocol(String uploadProtocol) {
        this.uploadProtocol = uploadProtocol;
        return this;
    }
    
    public DfareportingAdvertisersListRequest(@JsonProperty("profileId") String profileId) {
        this.profileId = profileId;
  }
}
