// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
	"openapi/pkg/types"
)

type SearchEditorialImagesSecurity struct {
	Basic              *shared.SchemeBasic              `security:"scheme,type=http,subtype=basic"`
	CustomerAccessCode *shared.SchemeCustomerAccessCode `security:"scheme,type=oauth2"`
}

// SearchEditorialImagesSortEnum - Sort by
type SearchEditorialImagesSortEnum string

const (
	SearchEditorialImagesSortEnumRelevant SearchEditorialImagesSortEnum = "relevant"
	SearchEditorialImagesSortEnumNewest   SearchEditorialImagesSortEnum = "newest"
	SearchEditorialImagesSortEnumOldest   SearchEditorialImagesSortEnum = "oldest"
)

func (e *SearchEditorialImagesSortEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "relevant":
		fallthrough
	case "newest":
		fallthrough
	case "oldest":
		*e = SearchEditorialImagesSortEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for SearchEditorialImagesSortEnum: %s", s)
	}
}

type SearchEditorialImagesQueryParams struct {
	// Show editorial content within a certain editorial category; specify by category name
	Category *string `queryParam:"style=form,explode=true,name=category"`
	// Show only editorial content that is available for distribution in a certain country
	Country string `queryParam:"style=form,explode=true,name=country"`
	// The cursor of the page with which to start fetching results; this cursor is returned from previous requests
	Cursor *string `queryParam:"style=form,explode=true,name=cursor"`
	// Show only editorial content generated on or before a specific date
	DateEnd *types.Date `queryParam:"style=form,explode=true,name=date_end"`
	// Show only editorial content generated on or after a specific date
	DateStart *types.Date `queryParam:"style=form,explode=true,name=date_start"`
	// Number of results per page
	PerPage *int64 `queryParam:"style=form,explode=true,name=per_page"`
	// One or more search terms separated by spaces
	Query *string `queryParam:"style=form,explode=true,name=query"`
	// Sort by
	Sort *SearchEditorialImagesSortEnum `queryParam:"style=form,explode=true,name=sort"`
	// Show only editorial content from certain suppliers
	SupplierCode []string `queryParam:"style=form,explode=true,name=supplier_code"`
}

type SearchEditorialImagesRequest struct {
	QueryParams SearchEditorialImagesQueryParams
	Security    SearchEditorialImagesSecurity
}

type SearchEditorialImagesResponse struct {
	ContentType string
	// OK
	EditorialSearchResults *shared.EditorialSearchResults
	StatusCode             int
	RawResponse            *http.Response
}
