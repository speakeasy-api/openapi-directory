/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import com.fasterxml.jackson.annotation.JsonProperty;
import org.openapis.openapi.utils.SpeakeasyMetadata;

public class CreateServiceCreateServiceRequest {
    /**
     * The length of the verification code to generate. Must be an integer value between 4 and 10, inclusive.
     */
    @SpeakeasyMetadata("form:name=CodeLength")
    public Long codeLength;

    public CreateServiceCreateServiceRequest withCodeLength(Long codeLength) {
        this.codeLength = codeLength;
        return this;
    }
    
    /**
     * Whether to allow sending verifications with a custom code instead of a randomly generated one. Not available for all customers.
     */
    @SpeakeasyMetadata("form:name=CustomCodeEnabled")
    public Boolean customCodeEnabled;

    public CreateServiceCreateServiceRequest withCustomCodeEnabled(Boolean customCodeEnabled) {
        this.customCodeEnabled = customCodeEnabled;
        return this;
    }
    
    /**
     * The default message [template](https://www.twilio.com/docs/verify/api/templates). Will be used for all SMS verifications unless explicitly overriden. SMS channel only.
     */
    @SpeakeasyMetadata("form:name=DefaultTemplateSid")
    public String defaultTemplateSid;

    public CreateServiceCreateServiceRequest withDefaultTemplateSid(String defaultTemplateSid) {
        this.defaultTemplateSid = defaultTemplateSid;
        return this;
    }
    
    /**
     * Whether to add a security warning at the end of an SMS verification body. Disabled by default and applies only to SMS. Example SMS body: `Your AppName verification code is: 1234. Don\u2019t share this code with anyone; our employees will never ask for the code`
     */
    @SpeakeasyMetadata("form:name=DoNotShareWarningEnabled")
    public Boolean doNotShareWarningEnabled;

    public CreateServiceCreateServiceRequest withDoNotShareWarningEnabled(Boolean doNotShareWarningEnabled) {
        this.doNotShareWarningEnabled = doNotShareWarningEnabled;
        return this;
    }
    
    /**
     * Whether to ask the user to press a number before delivering the verify code in a phone call.
     */
    @SpeakeasyMetadata("form:name=DtmfInputRequired")
    public Boolean dtmfInputRequired;

    public CreateServiceCreateServiceRequest withDtmfInputRequired(Boolean dtmfInputRequired) {
        this.dtmfInputRequired = dtmfInputRequired;
        return this;
    }
    
    /**
     * A descriptive string that you create to describe the verification service. It can be up to 32 characters long. **This value should not contain PII.**
     */
    @SpeakeasyMetadata("form:name=FriendlyName")
    public String friendlyName;

    public CreateServiceCreateServiceRequest withFriendlyName(String friendlyName) {
        this.friendlyName = friendlyName;
        return this;
    }
    
    /**
     * Whether to perform a lookup with each verification started and return info about the phone number.
     */
    @SpeakeasyMetadata("form:name=LookupEnabled")
    public Boolean lookupEnabled;

    public CreateServiceCreateServiceRequest withLookupEnabled(Boolean lookupEnabled) {
        this.lookupEnabled = lookupEnabled;
        return this;
    }
    
    /**
     * Whether to pass PSD2 transaction parameters when starting a verification.
     */
    @SpeakeasyMetadata("form:name=Psd2Enabled")
    public Boolean psd2Enabled;

    public CreateServiceCreateServiceRequest withPsd2Enabled(Boolean psd2Enabled) {
        this.psd2Enabled = psd2Enabled;
        return this;
    }
    
    /**
     * Optional configuration for the Push factors. Set the APN Credential for this service. This will allow to send push notifications to iOS devices. See [Credential Resource](https://www.twilio.com/docs/notify/api/credential-resource)
     */
    @SpeakeasyMetadata("form:name=Push.ApnCredentialSid")
    public String pushApnCredentialSid;

    public CreateServiceCreateServiceRequest withPushApnCredentialSid(String pushApnCredentialSid) {
        this.pushApnCredentialSid = pushApnCredentialSid;
        return this;
    }
    
    /**
     * Optional configuration for the Push factors. Set the FCM Credential for this service. This will allow to send push notifications to Android devices. See [Credential Resource](https://www.twilio.com/docs/notify/api/credential-resource)
     */
    @SpeakeasyMetadata("form:name=Push.FcmCredentialSid")
    public String pushFcmCredentialSid;

    public CreateServiceCreateServiceRequest withPushFcmCredentialSid(String pushFcmCredentialSid) {
        this.pushFcmCredentialSid = pushFcmCredentialSid;
        return this;
    }
    
    /**
     * Optional configuration for the Push factors. If true, include the date in the Challenge's response. Otherwise, the date is omitted from the response. See [Challenge](https://www.twilio.com/docs/verify/api/challenge) resource\u2019s details parameter for more info. Default: false. **Deprecated** do not use this parameter. This timestamp value is the same one as the one found in `date_created`, please use that one instead.
     */
    @SpeakeasyMetadata("form:name=Push.IncludeDate")
    public Boolean pushIncludeDate;

    public CreateServiceCreateServiceRequest withPushIncludeDate(Boolean pushIncludeDate) {
        this.pushIncludeDate = pushIncludeDate;
        return this;
    }
    
    /**
     * Whether to skip sending SMS verifications to landlines. Requires `lookup_enabled`.
     */
    @SpeakeasyMetadata("form:name=SkipSmsToLandlines")
    public Boolean skipSmsToLandlines;

    public CreateServiceCreateServiceRequest withSkipSmsToLandlines(Boolean skipSmsToLandlines) {
        this.skipSmsToLandlines = skipSmsToLandlines;
        return this;
    }
    
    /**
     * Optional configuration for the TOTP factors. Number of digits for generated TOTP codes. Must be between 3 and 8, inclusive. Defaults to 6
     */
    @SpeakeasyMetadata("form:name=Totp.CodeLength")
    public Long totpCodeLength;

    public CreateServiceCreateServiceRequest withTotpCodeLength(Long totpCodeLength) {
        this.totpCodeLength = totpCodeLength;
        return this;
    }
    
    /**
     * Optional configuration for the TOTP factors. Set TOTP Issuer for this service. This will allow to configure the issuer of the TOTP URI. Defaults to the service friendly name if not provided.
     */
    @SpeakeasyMetadata("form:name=Totp.Issuer")
    public String totpIssuer;

    public CreateServiceCreateServiceRequest withTotpIssuer(String totpIssuer) {
        this.totpIssuer = totpIssuer;
        return this;
    }
    
    /**
     * Optional configuration for the TOTP factors. The number of time-steps, past and future, that are valid for validation of TOTP codes. Must be between 0 and 2, inclusive. Defaults to 1
     */
    @SpeakeasyMetadata("form:name=Totp.Skew")
    public Long totpSkew;

    public CreateServiceCreateServiceRequest withTotpSkew(Long totpSkew) {
        this.totpSkew = totpSkew;
        return this;
    }
    
    /**
     * Optional configuration for the TOTP factors. Defines how often, in seconds, are TOTP codes generated. i.e, a new TOTP code is generated every time_step seconds. Must be between 20 and 60 seconds, inclusive. Defaults to 30 seconds
     */
    @SpeakeasyMetadata("form:name=Totp.TimeStep")
    public Long totpTimeStep;

    public CreateServiceCreateServiceRequest withTotpTimeStep(Long totpTimeStep) {
        this.totpTimeStep = totpTimeStep;
        return this;
    }
    
    /**
     * The name of an alternative text-to-speech service to use in phone calls. Applies only to TTS languages.
     */
    @SpeakeasyMetadata("form:name=TtsName")
    public String ttsName;

    public CreateServiceCreateServiceRequest withTtsName(String ttsName) {
        this.ttsName = ttsName;
        return this;
    }
    
    public CreateServiceCreateServiceRequest(@JsonProperty("FriendlyName") String friendlyName) {
        this.friendlyName = friendlyName;
  }
}
