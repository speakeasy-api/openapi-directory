// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// UpdateFunctionURLConfigRequestBodyAuthTypeEnum - The type of authentication that your function URL uses. Set to <code>AWS_IAM</code> if you want to restrict access to authenticated users only. Set to <code>NONE</code> if you want to bypass IAM authentication to create a public endpoint. For more information, see <a href="https://docs.aws.amazon.com/lambda/latest/dg/urls-auth.html">Security and auth model for Lambda function URLs</a>.
type UpdateFunctionURLConfigRequestBodyAuthTypeEnum string

const (
	UpdateFunctionURLConfigRequestBodyAuthTypeEnumNone   UpdateFunctionURLConfigRequestBodyAuthTypeEnum = "NONE"
	UpdateFunctionURLConfigRequestBodyAuthTypeEnumAwsIam UpdateFunctionURLConfigRequestBodyAuthTypeEnum = "AWS_IAM"
)

func (e UpdateFunctionURLConfigRequestBodyAuthTypeEnum) ToPointer() *UpdateFunctionURLConfigRequestBodyAuthTypeEnum {
	return &e
}

func (e *UpdateFunctionURLConfigRequestBodyAuthTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "NONE":
		fallthrough
	case "AWS_IAM":
		*e = UpdateFunctionURLConfigRequestBodyAuthTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateFunctionURLConfigRequestBodyAuthTypeEnum: %v", v)
	}
}

// UpdateFunctionURLConfigRequestBodyCors - The <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS">cross-origin resource sharing (CORS)</a> settings for your Lambda function URL. Use CORS to grant access to your function URL from any origin. You can also use CORS to control access for specific HTTP headers and methods in requests to your function URL.
type UpdateFunctionURLConfigRequestBodyCors struct {
	AllowCredentials *bool    `json:"AllowCredentials,omitempty"`
	AllowHeaders     []string `json:"AllowHeaders,omitempty"`
	AllowMethods     []string `json:"AllowMethods,omitempty"`
	AllowOrigins     []string `json:"AllowOrigins,omitempty"`
	ExposeHeaders    []string `json:"ExposeHeaders,omitempty"`
	MaxAge           *int64   `json:"MaxAge,omitempty"`
}

// UpdateFunctionURLConfigRequestBodyInvokeModeEnum - <p>Use one of the following options:</p> <ul> <li> <p> <code>BUFFERED</code> – This is the default option. Lambda invokes your function using the <code>Invoke</code> API operation. Invocation results are available when the payload is complete. The maximum payload size is 6 MB.</p> </li> <li> <p> <code>RESPONSE_STREAM</code> – Your function streams payload results as they become available. Lambda invokes your function using the <code>InvokeWithResponseStream</code> API operation. The maximum response payload size is 20 MB, however, you can <a href="https://docs.aws.amazon.com/servicequotas/latest/userguide/request-quota-increase.html">request a quota increase</a>.</p> </li> </ul>
type UpdateFunctionURLConfigRequestBodyInvokeModeEnum string

const (
	UpdateFunctionURLConfigRequestBodyInvokeModeEnumBuffered       UpdateFunctionURLConfigRequestBodyInvokeModeEnum = "BUFFERED"
	UpdateFunctionURLConfigRequestBodyInvokeModeEnumResponseStream UpdateFunctionURLConfigRequestBodyInvokeModeEnum = "RESPONSE_STREAM"
)

func (e UpdateFunctionURLConfigRequestBodyInvokeModeEnum) ToPointer() *UpdateFunctionURLConfigRequestBodyInvokeModeEnum {
	return &e
}

func (e *UpdateFunctionURLConfigRequestBodyInvokeModeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "BUFFERED":
		fallthrough
	case "RESPONSE_STREAM":
		*e = UpdateFunctionURLConfigRequestBodyInvokeModeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateFunctionURLConfigRequestBodyInvokeModeEnum: %v", v)
	}
}

type UpdateFunctionURLConfigRequestBody struct {
	// The type of authentication that your function URL uses. Set to <code>AWS_IAM</code> if you want to restrict access to authenticated users only. Set to <code>NONE</code> if you want to bypass IAM authentication to create a public endpoint. For more information, see <a href="https://docs.aws.amazon.com/lambda/latest/dg/urls-auth.html">Security and auth model for Lambda function URLs</a>.
	AuthType *UpdateFunctionURLConfigRequestBodyAuthTypeEnum `json:"AuthType,omitempty"`
	// The <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS">cross-origin resource sharing (CORS)</a> settings for your Lambda function URL. Use CORS to grant access to your function URL from any origin. You can also use CORS to control access for specific HTTP headers and methods in requests to your function URL.
	Cors *UpdateFunctionURLConfigRequestBodyCors `json:"Cors,omitempty"`
	// <p>Use one of the following options:</p> <ul> <li> <p> <code>BUFFERED</code> – This is the default option. Lambda invokes your function using the <code>Invoke</code> API operation. Invocation results are available when the payload is complete. The maximum payload size is 6 MB.</p> </li> <li> <p> <code>RESPONSE_STREAM</code> – Your function streams payload results as they become available. Lambda invokes your function using the <code>InvokeWithResponseStream</code> API operation. The maximum response payload size is 20 MB, however, you can <a href="https://docs.aws.amazon.com/servicequotas/latest/userguide/request-quota-increase.html">request a quota increase</a>.</p> </li> </ul>
	InvokeMode *UpdateFunctionURLConfigRequestBodyInvokeModeEnum `json:"InvokeMode,omitempty"`
}

type UpdateFunctionURLConfigRequest struct {
	// <p>The name of the Lambda function.</p> <p class="title"> <b>Name formats</b> </p> <ul> <li> <p> <b>Function name</b> – <code>my-function</code>.</p> </li> <li> <p> <b>Function ARN</b> – <code>arn:aws:lambda:us-west-2:123456789012:function:my-function</code>.</p> </li> <li> <p> <b>Partial ARN</b> – <code>123456789012:function:my-function</code>.</p> </li> </ul> <p>The length constraint applies only to the full ARN. If you specify only the function name, it is limited to 64 characters in length.</p>
	FunctionName string `pathParam:"style=simple,explode=false,name=FunctionName"`
	// The alias name.
	Qualifier         *string                            `queryParam:"style=form,explode=true,name=Qualifier"`
	RequestBody       UpdateFunctionURLConfigRequestBody `request:"mediaType=application/json"`
	XAmzAlgorithm     *string                            `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string                            `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string                            `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string                            `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string                            `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string                            `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string                            `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
}

type UpdateFunctionURLConfigResponse struct {
	ContentType string
	// InvalidParameterValueException
	InvalidParameterValueException interface{}
	StatusCode                     int
	RawResponse                    *http.Response
	// ResourceConflictException
	ResourceConflictException interface{}
	// ResourceNotFoundException
	ResourceNotFoundException interface{}
	// ServiceException
	ServiceException interface{}
	// TooManyRequestsException
	TooManyRequestsException interface{}
	// Success
	UpdateFunctionURLConfigResponse *shared.UpdateFunctionURLConfigResponse
}
