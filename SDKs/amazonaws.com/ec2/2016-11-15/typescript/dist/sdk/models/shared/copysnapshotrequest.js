"use strict";
/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CopySnapshotRequest = exports.CopySnapshotRequestTagSpecifications = exports.CopySnapshotRequestTagSpecificationsTags = exports.CopySnapshotRequestTagSpecificationsResourceTypeEnum = void 0;
var utils_1 = require("../../../internal/utils");
/**
 * The type of resource to tag on creation.
 */
var CopySnapshotRequestTagSpecificationsResourceTypeEnum;
(function (CopySnapshotRequestTagSpecificationsResourceTypeEnum) {
    CopySnapshotRequestTagSpecificationsResourceTypeEnum["CapacityReservation"] = "capacity-reservation";
    CopySnapshotRequestTagSpecificationsResourceTypeEnum["ClientVpnEndpoint"] = "client-vpn-endpoint";
    CopySnapshotRequestTagSpecificationsResourceTypeEnum["CustomerGateway"] = "customer-gateway";
    CopySnapshotRequestTagSpecificationsResourceTypeEnum["CarrierGateway"] = "carrier-gateway";
    CopySnapshotRequestTagSpecificationsResourceTypeEnum["CoipPool"] = "coip-pool";
    CopySnapshotRequestTagSpecificationsResourceTypeEnum["DedicatedHost"] = "dedicated-host";
    CopySnapshotRequestTagSpecificationsResourceTypeEnum["DhcpOptions"] = "dhcp-options";
    CopySnapshotRequestTagSpecificationsResourceTypeEnum["EgressOnlyInternetGateway"] = "egress-only-internet-gateway";
    CopySnapshotRequestTagSpecificationsResourceTypeEnum["ElasticIp"] = "elastic-ip";
    CopySnapshotRequestTagSpecificationsResourceTypeEnum["ElasticGpu"] = "elastic-gpu";
    CopySnapshotRequestTagSpecificationsResourceTypeEnum["ExportImageTask"] = "export-image-task";
    CopySnapshotRequestTagSpecificationsResourceTypeEnum["ExportInstanceTask"] = "export-instance-task";
    CopySnapshotRequestTagSpecificationsResourceTypeEnum["Fleet"] = "fleet";
    CopySnapshotRequestTagSpecificationsResourceTypeEnum["FpgaImage"] = "fpga-image";
    CopySnapshotRequestTagSpecificationsResourceTypeEnum["HostReservation"] = "host-reservation";
    CopySnapshotRequestTagSpecificationsResourceTypeEnum["Image"] = "image";
    CopySnapshotRequestTagSpecificationsResourceTypeEnum["ImportImageTask"] = "import-image-task";
    CopySnapshotRequestTagSpecificationsResourceTypeEnum["ImportSnapshotTask"] = "import-snapshot-task";
    CopySnapshotRequestTagSpecificationsResourceTypeEnum["Instance"] = "instance";
    CopySnapshotRequestTagSpecificationsResourceTypeEnum["InstanceEventWindow"] = "instance-event-window";
    CopySnapshotRequestTagSpecificationsResourceTypeEnum["InternetGateway"] = "internet-gateway";
    CopySnapshotRequestTagSpecificationsResourceTypeEnum["Ipam"] = "ipam";
    CopySnapshotRequestTagSpecificationsResourceTypeEnum["IpamPool"] = "ipam-pool";
    CopySnapshotRequestTagSpecificationsResourceTypeEnum["IpamScope"] = "ipam-scope";
    CopySnapshotRequestTagSpecificationsResourceTypeEnum["Ipv4poolEc2"] = "ipv4pool-ec2";
    CopySnapshotRequestTagSpecificationsResourceTypeEnum["Ipv6poolEc2"] = "ipv6pool-ec2";
    CopySnapshotRequestTagSpecificationsResourceTypeEnum["KeyPair"] = "key-pair";
    CopySnapshotRequestTagSpecificationsResourceTypeEnum["LaunchTemplate"] = "launch-template";
    CopySnapshotRequestTagSpecificationsResourceTypeEnum["LocalGateway"] = "local-gateway";
    CopySnapshotRequestTagSpecificationsResourceTypeEnum["LocalGatewayRouteTable"] = "local-gateway-route-table";
    CopySnapshotRequestTagSpecificationsResourceTypeEnum["LocalGatewayVirtualInterface"] = "local-gateway-virtual-interface";
    CopySnapshotRequestTagSpecificationsResourceTypeEnum["LocalGatewayVirtualInterfaceGroup"] = "local-gateway-virtual-interface-group";
    CopySnapshotRequestTagSpecificationsResourceTypeEnum["LocalGatewayRouteTableVpcAssociation"] = "local-gateway-route-table-vpc-association";
    CopySnapshotRequestTagSpecificationsResourceTypeEnum["LocalGatewayRouteTableVirtualInterfaceGroupAssociation"] = "local-gateway-route-table-virtual-interface-group-association";
    CopySnapshotRequestTagSpecificationsResourceTypeEnum["Natgateway"] = "natgateway";
    CopySnapshotRequestTagSpecificationsResourceTypeEnum["NetworkAcl"] = "network-acl";
    CopySnapshotRequestTagSpecificationsResourceTypeEnum["NetworkInterface"] = "network-interface";
    CopySnapshotRequestTagSpecificationsResourceTypeEnum["NetworkInsightsAnalysis"] = "network-insights-analysis";
    CopySnapshotRequestTagSpecificationsResourceTypeEnum["NetworkInsightsPath"] = "network-insights-path";
    CopySnapshotRequestTagSpecificationsResourceTypeEnum["NetworkInsightsAccessScope"] = "network-insights-access-scope";
    CopySnapshotRequestTagSpecificationsResourceTypeEnum["NetworkInsightsAccessScopeAnalysis"] = "network-insights-access-scope-analysis";
    CopySnapshotRequestTagSpecificationsResourceTypeEnum["PlacementGroup"] = "placement-group";
    CopySnapshotRequestTagSpecificationsResourceTypeEnum["PrefixList"] = "prefix-list";
    CopySnapshotRequestTagSpecificationsResourceTypeEnum["ReplaceRootVolumeTask"] = "replace-root-volume-task";
    CopySnapshotRequestTagSpecificationsResourceTypeEnum["ReservedInstances"] = "reserved-instances";
    CopySnapshotRequestTagSpecificationsResourceTypeEnum["RouteTable"] = "route-table";
    CopySnapshotRequestTagSpecificationsResourceTypeEnum["SecurityGroup"] = "security-group";
    CopySnapshotRequestTagSpecificationsResourceTypeEnum["SecurityGroupRule"] = "security-group-rule";
    CopySnapshotRequestTagSpecificationsResourceTypeEnum["Snapshot"] = "snapshot";
    CopySnapshotRequestTagSpecificationsResourceTypeEnum["SpotFleetRequest"] = "spot-fleet-request";
    CopySnapshotRequestTagSpecificationsResourceTypeEnum["SpotInstancesRequest"] = "spot-instances-request";
    CopySnapshotRequestTagSpecificationsResourceTypeEnum["Subnet"] = "subnet";
    CopySnapshotRequestTagSpecificationsResourceTypeEnum["SubnetCidrReservation"] = "subnet-cidr-reservation";
    CopySnapshotRequestTagSpecificationsResourceTypeEnum["TrafficMirrorFilter"] = "traffic-mirror-filter";
    CopySnapshotRequestTagSpecificationsResourceTypeEnum["TrafficMirrorSession"] = "traffic-mirror-session";
    CopySnapshotRequestTagSpecificationsResourceTypeEnum["TrafficMirrorTarget"] = "traffic-mirror-target";
    CopySnapshotRequestTagSpecificationsResourceTypeEnum["TransitGateway"] = "transit-gateway";
    CopySnapshotRequestTagSpecificationsResourceTypeEnum["TransitGatewayAttachment"] = "transit-gateway-attachment";
    CopySnapshotRequestTagSpecificationsResourceTypeEnum["TransitGatewayConnectPeer"] = "transit-gateway-connect-peer";
    CopySnapshotRequestTagSpecificationsResourceTypeEnum["TransitGatewayMulticastDomain"] = "transit-gateway-multicast-domain";
    CopySnapshotRequestTagSpecificationsResourceTypeEnum["TransitGatewayPolicyTable"] = "transit-gateway-policy-table";
    CopySnapshotRequestTagSpecificationsResourceTypeEnum["TransitGatewayRouteTable"] = "transit-gateway-route-table";
    CopySnapshotRequestTagSpecificationsResourceTypeEnum["TransitGatewayRouteTableAnnouncement"] = "transit-gateway-route-table-announcement";
    CopySnapshotRequestTagSpecificationsResourceTypeEnum["Volume"] = "volume";
    CopySnapshotRequestTagSpecificationsResourceTypeEnum["Vpc"] = "vpc";
    CopySnapshotRequestTagSpecificationsResourceTypeEnum["VpcEndpoint"] = "vpc-endpoint";
    CopySnapshotRequestTagSpecificationsResourceTypeEnum["VpcEndpointConnection"] = "vpc-endpoint-connection";
    CopySnapshotRequestTagSpecificationsResourceTypeEnum["VpcEndpointService"] = "vpc-endpoint-service";
    CopySnapshotRequestTagSpecificationsResourceTypeEnum["VpcEndpointServicePermission"] = "vpc-endpoint-service-permission";
    CopySnapshotRequestTagSpecificationsResourceTypeEnum["VpcPeeringConnection"] = "vpc-peering-connection";
    CopySnapshotRequestTagSpecificationsResourceTypeEnum["VpnConnection"] = "vpn-connection";
    CopySnapshotRequestTagSpecificationsResourceTypeEnum["VpnGateway"] = "vpn-gateway";
    CopySnapshotRequestTagSpecificationsResourceTypeEnum["VpcFlowLog"] = "vpc-flow-log";
    CopySnapshotRequestTagSpecificationsResourceTypeEnum["CapacityReservationFleet"] = "capacity-reservation-fleet";
    CopySnapshotRequestTagSpecificationsResourceTypeEnum["TrafficMirrorFilterRule"] = "traffic-mirror-filter-rule";
    CopySnapshotRequestTagSpecificationsResourceTypeEnum["VpcEndpointConnectionDeviceType"] = "vpc-endpoint-connection-device-type";
    CopySnapshotRequestTagSpecificationsResourceTypeEnum["VerifiedAccessInstance"] = "verified-access-instance";
    CopySnapshotRequestTagSpecificationsResourceTypeEnum["VerifiedAccessGroup"] = "verified-access-group";
    CopySnapshotRequestTagSpecificationsResourceTypeEnum["VerifiedAccessEndpoint"] = "verified-access-endpoint";
    CopySnapshotRequestTagSpecificationsResourceTypeEnum["VerifiedAccessPolicy"] = "verified-access-policy";
    CopySnapshotRequestTagSpecificationsResourceTypeEnum["VerifiedAccessTrustProvider"] = "verified-access-trust-provider";
    CopySnapshotRequestTagSpecificationsResourceTypeEnum["VpnConnectionDeviceType"] = "vpn-connection-device-type";
    CopySnapshotRequestTagSpecificationsResourceTypeEnum["VpcBlockPublicAccessExclusion"] = "vpc-block-public-access-exclusion";
    CopySnapshotRequestTagSpecificationsResourceTypeEnum["IpamResourceDiscovery"] = "ipam-resource-discovery";
    CopySnapshotRequestTagSpecificationsResourceTypeEnum["IpamResourceDiscoveryAssociation"] = "ipam-resource-discovery-association";
})(CopySnapshotRequestTagSpecificationsResourceTypeEnum = exports.CopySnapshotRequestTagSpecificationsResourceTypeEnum || (exports.CopySnapshotRequestTagSpecificationsResourceTypeEnum = {}));
/**
 * Describes a tag.
 */
var CopySnapshotRequestTagSpecificationsTags = /** @class */ (function (_super) {
    __extends(CopySnapshotRequestTagSpecificationsTags, _super);
    function CopySnapshotRequestTagSpecificationsTags() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], CopySnapshotRequestTagSpecificationsTags.prototype, "key", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], CopySnapshotRequestTagSpecificationsTags.prototype, "value", void 0);
    return CopySnapshotRequestTagSpecificationsTags;
}(utils_1.SpeakeasyBase));
exports.CopySnapshotRequestTagSpecificationsTags = CopySnapshotRequestTagSpecificationsTags;
/**
 * <p>The tags to apply to a resource when the resource is being created. When you specify a tag, you must specify the resource type to tag, otherwise the request will fail.</p> <note> <p>The <code>Valid Values</code> lists all the resource types that can be tagged. However, the action you're using might not support tagging all of these resource types. If you try to tag a resource type that is unsupported for the action you're using, you'll get an error.</p> </note>
 */
var CopySnapshotRequestTagSpecifications = /** @class */ (function (_super) {
    __extends(CopySnapshotRequestTagSpecifications, _super);
    function CopySnapshotRequestTagSpecifications() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], CopySnapshotRequestTagSpecifications.prototype, "resourceType", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({ elemType: CopySnapshotRequestTagSpecificationsTags }),
        __metadata("design:type", Array)
    ], CopySnapshotRequestTagSpecifications.prototype, "tags", void 0);
    return CopySnapshotRequestTagSpecifications;
}(utils_1.SpeakeasyBase));
exports.CopySnapshotRequestTagSpecifications = CopySnapshotRequestTagSpecifications;
var CopySnapshotRequest = /** @class */ (function (_super) {
    __extends(CopySnapshotRequest, _super);
    function CopySnapshotRequest() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], CopySnapshotRequest.prototype, "description", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], CopySnapshotRequest.prototype, "destinationOutpostArn", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], CopySnapshotRequest.prototype, "destinationRegion", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", Boolean)
    ], CopySnapshotRequest.prototype, "dryRun", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", Boolean)
    ], CopySnapshotRequest.prototype, "encrypted", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], CopySnapshotRequest.prototype, "kmsKeyId", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], CopySnapshotRequest.prototype, "presignedUrl", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], CopySnapshotRequest.prototype, "sourceRegion", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], CopySnapshotRequest.prototype, "sourceSnapshotId", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({ elemType: CopySnapshotRequestTagSpecifications }),
        __metadata("design:type", Array)
    ], CopySnapshotRequest.prototype, "tagSpecifications", void 0);
    return CopySnapshotRequest;
}(utils_1.SpeakeasyBase));
exports.CopySnapshotRequest = CopySnapshotRequest;
