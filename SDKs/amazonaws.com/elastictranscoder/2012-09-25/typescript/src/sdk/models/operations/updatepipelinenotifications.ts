/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

/**
 * <p>The Amazon Simple Notification Service (Amazon SNS) topic or topics to notify in order to report job status.</p> <important> <p>To receive notifications, you must also subscribe to the new topic in the Amazon SNS console.</p> </important>
 */
export class UpdatePipelineNotificationsRequestBodyNotifications extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "Completed" })
  completed?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "Error" })
  error?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "Progressing" })
  progressing?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "Warning" })
  warning?: string;
}

export class UpdatePipelineNotificationsRequestBody extends SpeakeasyBase {
  /**
   * <p>The Amazon Simple Notification Service (Amazon SNS) topic or topics to notify in order to report job status.</p> <important> <p>To receive notifications, you must also subscribe to the new topic in the Amazon SNS console.</p> </important>
   */
  @SpeakeasyMetadata()
  @Expose({ name: "Notifications" })
  @Type(() => UpdatePipelineNotificationsRequestBodyNotifications)
  notifications: UpdatePipelineNotificationsRequestBodyNotifications;
}

export class UpdatePipelineNotificationsRequest extends SpeakeasyBase {
  /**
   * The identifier of the pipeline for which you want to change notification settings.
   */
  @SpeakeasyMetadata({ data: "pathParam, style=simple;explode=false;name=Id" })
  id: string;

  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  requestBody: UpdatePipelineNotificationsRequestBody;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Algorithm",
  })
  xAmzAlgorithm?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Content-Sha256",
  })
  xAmzContentSha256?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Credential",
  })
  xAmzCredential?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Date",
  })
  xAmzDate?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Security-Token",
  })
  xAmzSecurityToken?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Signature",
  })
  xAmzSignature?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-SignedHeaders",
  })
  xAmzSignedHeaders?: string;
}

export class UpdatePipelineNotificationsResponse extends SpeakeasyBase {
  /**
   * AccessDeniedException
   */
  @SpeakeasyMetadata()
  accessDeniedException?: any;

  @SpeakeasyMetadata()
  contentType: string;

  /**
   * IncompatibleVersionException
   */
  @SpeakeasyMetadata()
  incompatibleVersionException?: any;

  /**
   * InternalServiceException
   */
  @SpeakeasyMetadata()
  internalServiceException?: any;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * ResourceInUseException
   */
  @SpeakeasyMetadata()
  resourceInUseException?: any;

  /**
   * ResourceNotFoundException
   */
  @SpeakeasyMetadata()
  resourceNotFoundException?: any;

  /**
   * Success
   */
  @SpeakeasyMetadata()
  updatePipelineNotificationsResponse?: shared.UpdatePipelineNotificationsResponse;

  /**
   * ValidationException
   */
  @SpeakeasyMetadata()
  validationException?: any;
}
