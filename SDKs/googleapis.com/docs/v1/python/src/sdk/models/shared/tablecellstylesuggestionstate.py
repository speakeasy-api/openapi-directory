"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class TableCellStyleSuggestionState:
    r"""A mask that indicates which of the fields on the base TableCellStyle have been changed in this suggestion. For any field set to true, there's a new suggested value."""
    
    background_color_suggested: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('backgroundColorSuggested'), 'exclude': lambda f: f is None }})
    r"""Indicates if there was a suggested change to background_color."""  
    border_bottom_suggested: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('borderBottomSuggested'), 'exclude': lambda f: f is None }})
    r"""Indicates if there was a suggested change to border_bottom."""  
    border_left_suggested: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('borderLeftSuggested'), 'exclude': lambda f: f is None }})
    r"""Indicates if there was a suggested change to border_left."""  
    border_right_suggested: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('borderRightSuggested'), 'exclude': lambda f: f is None }})
    r"""Indicates if there was a suggested change to border_right."""  
    border_top_suggested: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('borderTopSuggested'), 'exclude': lambda f: f is None }})
    r"""Indicates if there was a suggested change to border_top."""  
    column_span_suggested: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('columnSpanSuggested'), 'exclude': lambda f: f is None }})
    r"""Indicates if there was a suggested change to column_span."""  
    content_alignment_suggested: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('contentAlignmentSuggested'), 'exclude': lambda f: f is None }})
    r"""Indicates if there was a suggested change to content_alignment."""  
    padding_bottom_suggested: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('paddingBottomSuggested'), 'exclude': lambda f: f is None }})
    r"""Indicates if there was a suggested change to padding_bottom."""  
    padding_left_suggested: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('paddingLeftSuggested'), 'exclude': lambda f: f is None }})
    r"""Indicates if there was a suggested change to padding_left."""  
    padding_right_suggested: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('paddingRightSuggested'), 'exclude': lambda f: f is None }})
    r"""Indicates if there was a suggested change to padding_right."""  
    padding_top_suggested: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('paddingTopSuggested'), 'exclude': lambda f: f is None }})
    r"""Indicates if there was a suggested change to padding_top."""  
    row_span_suggested: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('rowSpanSuggested'), 'exclude': lambda f: f is None }})
    r"""Indicates if there was a suggested change to row_span."""  
    