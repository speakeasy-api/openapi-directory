/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi;

import com.fasterxml.jackson.databind.ObjectMapper;
import java.net.http.HttpResponse;
import java.nio.charset.StandardCharsets;
import org.apache.http.NameValuePair;
import org.openapis.openapi.utils.HTTPClient;
import org.openapis.openapi.utils.HTTPRequest;
import org.openapis.openapi.utils.JSON;
import org.openapis.openapi.utils.SerializedBody;

public class Jobs {
	
	private HTTPClient _defaultClient;
	private HTTPClient _securityClient;
	private String _serverUrl;
	private String _language;
	private String _sdkVersion;
	private String _genVersion;

	public Jobs(HTTPClient defaultClient, HTTPClient securityClient, String serverUrl, String language, String sdkVersion, String genVersion) {
		this._defaultClient = defaultClient;
		this._securityClient = securityClient;
		this._serverUrl = serverUrl;
		this._language = language;
		this._sdkVersion = sdkVersion;
		this._genVersion = genVersion;
	}

    /**
     * Delete Job by Id
     * Deletes a transcription job. All data related to the job, such as input media and transcript, will be permanently deleted. A job can only be deleted once it's completed (either with success or failure).
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DeleteJobByIdResponse deleteJobById(org.openapis.openapi.models.operations.DeleteJobByIdRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DeleteJobByIdRequest.class, baseUrl, "/jobs/{id}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DeleteJobByIdResponse res = new org.openapis.openapi.models.operations.DeleteJobByIdResponse() {{
            deleteJobById401ApplicationProblemPlusJsonObject = null;
            deleteJobById404ApplicationProblemPlusJsonObject = null;
            deleteJobById409ApplicationProblemPlusJsonObject = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }
        else if (httpRes.statusCode() == 401) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/problem+json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.DeleteJobById401ApplicationProblemPlusJson out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.DeleteJobById401ApplicationProblemPlusJson.class);
                res.deleteJobById401ApplicationProblemPlusJsonObject = out;
            }
        }
        else if (httpRes.statusCode() == 404) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/problem+json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.DeleteJobById404ApplicationProblemPlusJson out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.DeleteJobById404ApplicationProblemPlusJson.class);
                res.deleteJobById404ApplicationProblemPlusJsonObject = out;
            }
        }
        else if (httpRes.statusCode() == 409) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/problem+json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.DeleteJobById409ApplicationProblemPlusJson out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.DeleteJobById409ApplicationProblemPlusJson.class);
                res.deleteJobById409ApplicationProblemPlusJsonObject = out;
            }
        }

        return res;
    }

    /**
     * Get Job By Id
     * Returns information about a transcription job
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetJobByIdResponse getJobById(org.openapis.openapi.models.operations.GetJobByIdRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetJobByIdRequest.class, baseUrl, "/jobs/{id}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetJobByIdResponse res = new org.openapis.openapi.models.operations.GetJobByIdResponse() {{
            job = null;
            getJobById401ApplicationProblemPlusJsonObject = null;
            getJobById404ApplicationProblemPlusJsonObject = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.Job out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.Job.class);
                res.job = out;
            }
        }
        else if (httpRes.statusCode() == 401) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/problem+json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.GetJobById401ApplicationProblemPlusJson out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.GetJobById401ApplicationProblemPlusJson.class);
                res.getJobById401ApplicationProblemPlusJsonObject = out;
            }
        }
        else if (httpRes.statusCode() == 404) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/problem+json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.GetJobById404ApplicationProblemPlusJson out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.GetJobById404ApplicationProblemPlusJson.class);
                res.getJobById404ApplicationProblemPlusJsonObject = out;
            }
        }

        return res;
    }

    /**
     * Get List of Jobs
     * Gets a list of transcription jobs submitted within the last 30 days in reverse chronological order up to the provided `limit` number of jobs per call. **Note:** Jobs older than 30 days will not be listed. Pagination is supported via passing the last job `id` from a previous call into `starting_after`.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetListOfJobsResponse getListOfJobs(org.openapis.openapi.models.operations.GetListOfJobsRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/jobs");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.GetListOfJobsRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetListOfJobsResponse res = new org.openapis.openapi.models.operations.GetListOfJobsResponse() {{
            jobs = null;
            getListOfJobs400ApplicationProblemPlusJsonObject = null;
            getListOfJobs401ApplicationProblemPlusJsonObject = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.Job[] out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.Job[].class);
                res.jobs = out;
            }
        }
        else if (httpRes.statusCode() == 400) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/problem+json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.GetListOfJobs400ApplicationProblemPlusJson out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.GetListOfJobs400ApplicationProblemPlusJson.class);
                res.getListOfJobs400ApplicationProblemPlusJsonObject = out;
            }
        }
        else if (httpRes.statusCode() == 401) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/problem+json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.GetListOfJobs401ApplicationProblemPlusJson out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.GetListOfJobs401ApplicationProblemPlusJson.class);
                res.getListOfJobs401ApplicationProblemPlusJsonObject = out;
            }
        }

        return res;
    }

    /**
     * Submit Transcription Job
     * Starts an asynchronous job to transcribe speech-to-text for a media file. Media files can be specified in two ways, either by including a public url to the media in the transcription job `options` or by uploading a local file as part of a multipart/form request.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.SubmitTranscriptionJobJsonResponse submitTranscriptionJobJson(org.openapis.openapi.models.shared.SubmitJobMediaUrlOptions request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/jobs");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.SubmitTranscriptionJobJsonResponse res = new org.openapis.openapi.models.operations.SubmitTranscriptionJobJsonResponse() {{
            job = null;
            submitTranscriptionJobJson400ApplicationProblemPlusJsonObject = null;
            submitTranscriptionJobJson401ApplicationProblemPlusJsonObject = null;
            submitTranscriptionJobJson413ApplicationProblemPlusJsonObject = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.Job out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.Job.class);
                res.job = out;
            }
        }
        else if (httpRes.statusCode() == 400) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/problem+json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.SubmitTranscriptionJobJson400ApplicationProblemPlusJson out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.SubmitTranscriptionJobJson400ApplicationProblemPlusJson.class);
                res.submitTranscriptionJobJson400ApplicationProblemPlusJsonObject = out;
            }
        }
        else if (httpRes.statusCode() == 401) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/problem+json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.SubmitTranscriptionJobJson401ApplicationProblemPlusJson out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.SubmitTranscriptionJobJson401ApplicationProblemPlusJson.class);
                res.submitTranscriptionJobJson401ApplicationProblemPlusJsonObject = out;
            }
        }
        else if (httpRes.statusCode() == 413) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/problem+json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.SubmitTranscriptionJobJson413ApplicationProblemPlusJson out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.SubmitTranscriptionJobJson413ApplicationProblemPlusJson.class);
                res.submitTranscriptionJobJson413ApplicationProblemPlusJsonObject = out;
            }
        }

        return res;
    }

    /**
     * Submit Transcription Job
     * Starts an asynchronous job to transcribe speech-to-text for a media file. Media files can be specified in two ways, either by including a public url to the media in the transcription job `options` or by uploading a local file as part of a multipart/form request.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.SubmitTranscriptionJobMultipartResponse submitTranscriptionJobMultipart(org.openapis.openapi.models.operations.SubmitTranscriptionJobMultipartFormData request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/jobs");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "multipart");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.SubmitTranscriptionJobMultipartResponse res = new org.openapis.openapi.models.operations.SubmitTranscriptionJobMultipartResponse() {{
            job = null;
            submitTranscriptionJobMultipart400ApplicationProblemPlusJsonObject = null;
            submitTranscriptionJobMultipart401ApplicationProblemPlusJsonObject = null;
            submitTranscriptionJobMultipart413ApplicationProblemPlusJsonObject = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.Job out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.Job.class);
                res.job = out;
            }
        }
        else if (httpRes.statusCode() == 400) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/problem+json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.SubmitTranscriptionJobMultipart400ApplicationProblemPlusJson out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.SubmitTranscriptionJobMultipart400ApplicationProblemPlusJson.class);
                res.submitTranscriptionJobMultipart400ApplicationProblemPlusJsonObject = out;
            }
        }
        else if (httpRes.statusCode() == 401) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/problem+json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.SubmitTranscriptionJobMultipart401ApplicationProblemPlusJson out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.SubmitTranscriptionJobMultipart401ApplicationProblemPlusJson.class);
                res.submitTranscriptionJobMultipart401ApplicationProblemPlusJsonObject = out;
            }
        }
        else if (httpRes.statusCode() == 413) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/problem+json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.SubmitTranscriptionJobMultipart413ApplicationProblemPlusJson out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.SubmitTranscriptionJobMultipart413ApplicationProblemPlusJson.class);
                res.submitTranscriptionJobMultipart413ApplicationProblemPlusJsonObject = out;
            }
        }

        return res;
    }
}