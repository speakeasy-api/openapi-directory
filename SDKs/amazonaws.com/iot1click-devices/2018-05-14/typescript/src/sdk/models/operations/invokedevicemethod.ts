/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

/**
 * The device method to invoke.
 */
export class InvokeDeviceMethodRequestBodyDeviceMethod extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "DeviceType" })
  deviceType?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "MethodName" })
  methodName?: string;
}

export class InvokeDeviceMethodRequestBody extends SpeakeasyBase {
  /**
   * The device method to invoke.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "deviceMethod" })
  @Type(() => InvokeDeviceMethodRequestBodyDeviceMethod)
  deviceMethod?: InvokeDeviceMethodRequestBodyDeviceMethod;

  /**
   * A JSON encoded string containing the device method request parameters.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "deviceMethodParameters" })
  deviceMethodParameters?: string;
}

export class InvokeDeviceMethodRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  requestBody: InvokeDeviceMethodRequestBody;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Algorithm",
  })
  xAmzAlgorithm?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Content-Sha256",
  })
  xAmzContentSha256?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Credential",
  })
  xAmzCredential?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Date",
  })
  xAmzDate?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Security-Token",
  })
  xAmzSecurityToken?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Signature",
  })
  xAmzSignature?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-SignedHeaders",
  })
  xAmzSignedHeaders?: string;

  /**
   * The unique identifier of the device.
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=deviceId",
  })
  deviceId: string;
}

export class InvokeDeviceMethodResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  /**
   * InternalFailureException
   */
  @SpeakeasyMetadata()
  internalFailureException?: any;

  /**
   * InvalidRequestException
   */
  @SpeakeasyMetadata()
  invalidRequestException?: any;

  /**
   * Success
   */
  @SpeakeasyMetadata()
  invokeDeviceMethodResponse?: shared.InvokeDeviceMethodResponse;

  /**
   * PreconditionFailedException
   */
  @SpeakeasyMetadata()
  preconditionFailedException?: any;

  /**
   * RangeNotSatisfiableException
   */
  @SpeakeasyMetadata()
  rangeNotSatisfiableException?: any;

  /**
   * ResourceConflictException
   */
  @SpeakeasyMetadata()
  resourceConflictException?: any;

  /**
   * ResourceNotFoundException
   */
  @SpeakeasyMetadata()
  resourceNotFoundException?: any;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;
}
