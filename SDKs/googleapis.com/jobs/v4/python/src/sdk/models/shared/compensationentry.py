"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import compensationrange as shared_compensationrange
from ..shared import money as shared_money
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class CompensationEntryTypeEnum(str, Enum):
    r"""Compensation type. Default is CompensationType.COMPENSATION_TYPE_UNSPECIFIED."""
    COMPENSATION_TYPE_UNSPECIFIED = 'COMPENSATION_TYPE_UNSPECIFIED'
    BASE = 'BASE'
    BONUS = 'BONUS'
    SIGNING_BONUS = 'SIGNING_BONUS'
    EQUITY = 'EQUITY'
    PROFIT_SHARING = 'PROFIT_SHARING'
    COMMISSIONS = 'COMMISSIONS'
    TIPS = 'TIPS'
    OTHER_COMPENSATION_TYPE = 'OTHER_COMPENSATION_TYPE'

class CompensationEntryUnitEnum(str, Enum):
    r"""Frequency of the specified amount. Default is CompensationUnit.COMPENSATION_UNIT_UNSPECIFIED."""
    COMPENSATION_UNIT_UNSPECIFIED = 'COMPENSATION_UNIT_UNSPECIFIED'
    HOURLY = 'HOURLY'
    DAILY = 'DAILY'
    WEEKLY = 'WEEKLY'
    MONTHLY = 'MONTHLY'
    YEARLY = 'YEARLY'
    ONE_TIME = 'ONE_TIME'
    OTHER_COMPENSATION_UNIT = 'OTHER_COMPENSATION_UNIT'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CompensationEntry:
    r"""A compensation entry that represents one component of compensation, such as base pay, bonus, or other compensation type. Annualization: One compensation entry can be annualized if - it contains valid amount or range. - and its expected_units_per_year is set or can be derived. Its annualized range is determined as (amount or range) times expected_units_per_year."""
    
    amount: Optional[shared_money.Money] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('amount'), 'exclude': lambda f: f is None }})
    r"""Represents an amount of money with its currency type."""  
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description'), 'exclude': lambda f: f is None }})
    r"""Compensation description. For example, could indicate equity terms or provide additional context to an estimated bonus."""  
    expected_units_per_year: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('expectedUnitsPerYear'), 'exclude': lambda f: f is None }})
    r"""Expected number of units paid each year. If not specified, when Job.employment_types is FULLTIME, a default value is inferred based on unit. Default values: - HOURLY: 2080 - DAILY: 260 - WEEKLY: 52 - MONTHLY: 12 - ANNUAL: 1"""  
    range: Optional[shared_compensationrange.CompensationRange] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('range'), 'exclude': lambda f: f is None }})
    r"""Compensation range."""  
    type: Optional[CompensationEntryTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})
    r"""Compensation type. Default is CompensationType.COMPENSATION_TYPE_UNSPECIFIED."""  
    unit: Optional[CompensationEntryUnitEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('unit'), 'exclude': lambda f: f is None }})
    r"""Frequency of the specified amount. Default is CompensationUnit.COMPENSATION_UNIT_UNSPECIFIED."""  
    