"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import platform as shared_platform
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclasses.dataclass
class DcimPlatformsListRequest:
    
    description: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'description', 'style': 'form', 'explode': True }})  
    description_ic: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'description__ic', 'style': 'form', 'explode': True }})  
    description_ie: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'description__ie', 'style': 'form', 'explode': True }})  
    description_iew: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'description__iew', 'style': 'form', 'explode': True }})  
    description_isw: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'description__isw', 'style': 'form', 'explode': True }})  
    description_n: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'description__n', 'style': 'form', 'explode': True }})  
    description_nic: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'description__nic', 'style': 'form', 'explode': True }})  
    description_nie: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'description__nie', 'style': 'form', 'explode': True }})  
    description_niew: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'description__niew', 'style': 'form', 'explode': True }})  
    description_nisw: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'description__nisw', 'style': 'form', 'explode': True }})  
    id: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'id', 'style': 'form', 'explode': True }})  
    id_gt: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'id__gt', 'style': 'form', 'explode': True }})  
    id_gte: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'id__gte', 'style': 'form', 'explode': True }})  
    id_lt: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'id__lt', 'style': 'form', 'explode': True }})  
    id_lte: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'id__lte', 'style': 'form', 'explode': True }})  
    id_n: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'id__n', 'style': 'form', 'explode': True }})  
    limit: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'limit', 'style': 'form', 'explode': True }})
    r"""Number of results to return per page."""  
    manufacturer: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'manufacturer', 'style': 'form', 'explode': True }})  
    manufacturer_n: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'manufacturer__n', 'style': 'form', 'explode': True }})  
    manufacturer_id: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'manufacturer_id', 'style': 'form', 'explode': True }})  
    manufacturer_id_n: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'manufacturer_id__n', 'style': 'form', 'explode': True }})  
    name: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'name', 'style': 'form', 'explode': True }})  
    name_ic: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'name__ic', 'style': 'form', 'explode': True }})  
    name_ie: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'name__ie', 'style': 'form', 'explode': True }})  
    name_iew: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'name__iew', 'style': 'form', 'explode': True }})  
    name_isw: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'name__isw', 'style': 'form', 'explode': True }})  
    name_n: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'name__n', 'style': 'form', 'explode': True }})  
    name_nic: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'name__nic', 'style': 'form', 'explode': True }})  
    name_nie: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'name__nie', 'style': 'form', 'explode': True }})  
    name_niew: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'name__niew', 'style': 'form', 'explode': True }})  
    name_nisw: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'name__nisw', 'style': 'form', 'explode': True }})  
    napalm_driver: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'napalm_driver', 'style': 'form', 'explode': True }})  
    napalm_driver_ic: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'napalm_driver__ic', 'style': 'form', 'explode': True }})  
    napalm_driver_ie: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'napalm_driver__ie', 'style': 'form', 'explode': True }})  
    napalm_driver_iew: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'napalm_driver__iew', 'style': 'form', 'explode': True }})  
    napalm_driver_isw: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'napalm_driver__isw', 'style': 'form', 'explode': True }})  
    napalm_driver_n: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'napalm_driver__n', 'style': 'form', 'explode': True }})  
    napalm_driver_nic: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'napalm_driver__nic', 'style': 'form', 'explode': True }})  
    napalm_driver_nie: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'napalm_driver__nie', 'style': 'form', 'explode': True }})  
    napalm_driver_niew: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'napalm_driver__niew', 'style': 'form', 'explode': True }})  
    napalm_driver_nisw: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'napalm_driver__nisw', 'style': 'form', 'explode': True }})  
    offset: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'offset', 'style': 'form', 'explode': True }})
    r"""The initial index from which to return the results."""  
    q: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'q', 'style': 'form', 'explode': True }})  
    slug: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'slug', 'style': 'form', 'explode': True }})  
    slug_ic: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'slug__ic', 'style': 'form', 'explode': True }})  
    slug_ie: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'slug__ie', 'style': 'form', 'explode': True }})  
    slug_iew: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'slug__iew', 'style': 'form', 'explode': True }})  
    slug_isw: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'slug__isw', 'style': 'form', 'explode': True }})  
    slug_n: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'slug__n', 'style': 'form', 'explode': True }})  
    slug_nic: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'slug__nic', 'style': 'form', 'explode': True }})  
    slug_nie: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'slug__nie', 'style': 'form', 'explode': True }})  
    slug_niew: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'slug__niew', 'style': 'form', 'explode': True }})  
    slug_nisw: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'slug__nisw', 'style': 'form', 'explode': True }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class DcimPlatformsList200ApplicationJSON:
    
    count: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('count') }})  
    results: list[shared_platform.Platform] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('results') }})  
    next: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('next'), 'exclude': lambda f: f is None }})  
    previous: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('previous'), 'exclude': lambda f: f is None }})  
    

@dataclasses.dataclass
class DcimPlatformsListResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    dcim_platforms_list_200_application_json_object: Optional[DcimPlatformsList200ApplicationJSON] = dataclasses.field(default=None)  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    