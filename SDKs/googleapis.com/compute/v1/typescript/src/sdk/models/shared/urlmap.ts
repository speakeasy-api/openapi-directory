/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { HostRule } from "./hostrule";
import { HttpHeaderAction } from "./httpheaderaction";
import { HttpRedirectAction } from "./httpredirectaction";
import { HttpRouteAction } from "./httprouteaction";
import { PathMatcher } from "./pathmatcher";
import { UrlMapTest } from "./urlmaptest";
import { Expose, Type } from "class-transformer";

/**
 * Represents a URL Map resource. Compute Engine has two URL Map resources: * [Global](/compute/docs/reference/rest/v1/urlMaps) * [Regional](/compute/docs/reference/rest/v1/regionUrlMaps) A URL map resource is a component of certain types of cloud load balancers and Traffic Director: * urlMaps are used by external HTTP(S) load balancers and Traffic Director. * regionUrlMaps are used by internal HTTP(S) load balancers. For a list of supported URL map features by the load balancer type, see the Load balancing features: Routing and traffic management table. For a list of supported URL map features for Traffic Director, see the Traffic Director features: Routing and traffic management table. This resource defines mappings from hostnames and URL paths to either a backend service or a backend bucket. To use the global urlMaps resource, the backend service must have a loadBalancingScheme of either EXTERNAL or INTERNAL_SELF_MANAGED. To use the regionUrlMaps resource, the backend service must have a loadBalancingScheme of INTERNAL_MANAGED. For more information, read URL Map Concepts.
 */
export class UrlMap extends SpeakeasyBase {
  /**
   * [Output Only] Creation timestamp in RFC3339 text format.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "creationTimestamp" })
  creationTimestamp?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "defaultRouteAction" })
  @Type(() => HttpRouteAction)
  defaultRouteAction?: HttpRouteAction;

  /**
   * The full or partial URL of the defaultService resource to which traffic is directed if none of the hostRules match. If defaultRouteAction is also specified, advanced routing actions, such as URL rewrites, take effect before sending the request to the backend. However, if defaultService is specified, defaultRouteAction cannot contain any weightedBackendServices. Conversely, if routeAction specifies any weightedBackendServices, service must not be specified. Only one of defaultService, defaultUrlRedirect , or defaultRouteAction.weightedBackendService must be set. defaultService has no effect when the URL map is bound to a target gRPC proxy that has the validateForProxyless field set to true.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "defaultService" })
  defaultService?: string;

  /**
   * Specifies settings for an HTTP redirect.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "defaultUrlRedirect" })
  @Type(() => HttpRedirectAction)
  defaultUrlRedirect?: HttpRedirectAction;

  /**
   * An optional description of this resource. Provide this property when you create the resource.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "description" })
  description?: string;

  /**
   * Fingerprint of this resource. A hash of the contents stored in this object. This field is used in optimistic locking. This field is ignored when inserting a UrlMap. An up-to-date fingerprint must be provided in order to update the UrlMap, otherwise the request will fail with error 412 conditionNotMet. To see the latest fingerprint, make a get() request to retrieve a UrlMap.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "fingerprint" })
  fingerprint?: string;

  /**
   * The request and response header transformations that take effect before the request is passed along to the selected backendService.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "headerAction" })
  @Type(() => HttpHeaderAction)
  headerAction?: HttpHeaderAction;

  /**
   * The list of host rules to use against the URL.
   */
  @SpeakeasyMetadata({ elemType: HostRule })
  @Expose({ name: "hostRules" })
  @Type(() => HostRule)
  hostRules?: HostRule[];

  /**
   * [Output Only] The unique identifier for the resource. This identifier is defined by the server.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id?: string;

  /**
   * [Output Only] Type of the resource. Always compute#urlMaps for url maps.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "kind" })
  kind?: string;

  /**
   * Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name?: string;

  /**
   * The list of named PathMatchers to use against the URL.
   */
  @SpeakeasyMetadata({ elemType: PathMatcher })
  @Expose({ name: "pathMatchers" })
  @Type(() => PathMatcher)
  pathMatchers?: PathMatcher[];

  /**
   * [Output Only] URL of the region where the regional URL map resides. This field is not applicable to global URL maps. You must specify this field as part of the HTTP request URL. It is not settable as a field in the request body.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "region" })
  region?: string;

  /**
   * [Output Only] Server-defined URL for the resource.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "selfLink" })
  selfLink?: string;

  /**
   * The list of expected URL mapping tests. Request to update the UrlMap succeeds only if all test cases pass. You can specify a maximum of 100 tests per UrlMap. Not supported when the URL map is bound to a target gRPC proxy that has validateForProxyless field set to true.
   */
  @SpeakeasyMetadata({ elemType: UrlMapTest })
  @Expose({ name: "tests" })
  @Type(() => UrlMapTest)
  tests?: UrlMapTest[];
}
