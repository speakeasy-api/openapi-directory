"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import playlistvisibilityfield_enum as shared_playlistvisibilityfield_enum
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PlaylistsResponsePlaylists:
    r"""A playlist"""
    
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description'), 'exclude': lambda f: f is None }})
    r"""Playlist description."""  
    episode_count: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('episode_count'), 'exclude': lambda f: f is None }})
    r"""The number of episodes (including custom audio) in this playlist."""  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""A 11-character playlist id, which can be used to further fetch detailed playlist metadata via `GET /playlists/{id}`."""  
    image: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('image'), 'exclude': lambda f: f is None }})
    r"""High resolution image url of the playlist."""  
    last_timestamp_ms: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('last_timestamp_ms'), 'exclude': lambda f: f is None }})
    r"""Passed to the **last_timestamp_ms** parameter of `GET /playlists/{id}` to paginate through items of that playlist."""  
    listennotes_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('listennotes_url'), 'exclude': lambda f: f is None }})
    r"""The url of this playlist on ListenNotes.com."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""Playlist name."""  
    podcast_count: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('podcast_count'), 'exclude': lambda f: f is None }})
    r"""The number of podcasts in this playlist."""  
    thumbnail: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('thumbnail'), 'exclude': lambda f: f is None }})
    r"""Low resolution image url of the playlist."""  
    total_audio_length_sec: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('total_audio_length_sec'), 'exclude': lambda f: f is None }})
    r"""Total audio length of all episodes in this playlist, in seconds."""  
    visibility: Optional[shared_playlistvisibilityfield_enum.PlaylistVisibilityFieldEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('visibility'), 'exclude': lambda f: f is None }})
    r"""Visibility of this playlist."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PlaylistsResponse:
    r"""OK"""
    
    has_next: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('has_next'), 'exclude': lambda f: f is None }})  
    has_previous: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('has_previous'), 'exclude': lambda f: f is None }})  
    next_page_number: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('next_page_number'), 'exclude': lambda f: f is None }})  
    page_number: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('page_number'), 'exclude': lambda f: f is None }})  
    playlists: Optional[list[PlaylistsResponsePlaylists]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('playlists'), 'exclude': lambda f: f is None }})  
    previous_page_number: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('previous_page_number'), 'exclude': lambda f: f is None }})  
    total: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('total'), 'exclude': lambda f: f is None }})  
    