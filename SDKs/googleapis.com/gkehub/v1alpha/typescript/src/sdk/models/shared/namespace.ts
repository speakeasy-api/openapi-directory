/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { NamespaceLifecycleState } from "./namespacelifecyclestate";
import { Expose, Type } from "class-transformer";

/**
 * Namespace represents a namespace across the Fleet
 */
export class Namespace extends SpeakeasyBase {
  /**
   * Output only. When the namespace was created.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "createTime" })
  createTime?: string;

  /**
   * Output only. When the namespace was deleted.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "deleteTime" })
  deleteTime?: string;

  /**
   * The resource name for the namespace `projects/{project}/locations/{location}/namespaces/{namespace}`
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name?: string;

  /**
   * Required. Scope associated with the namespace
   */
  @SpeakeasyMetadata()
  @Expose({ name: "scope" })
  scope?: string;

  /**
   * NamespaceLifecycleState describes the state of a Namespace resource.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "state" })
  @Type(() => NamespaceLifecycleState)
  state?: NamespaceLifecycleState;

  /**
   * Output only. Google-generated UUID for this resource. This is unique across all namespace resources. If a namespace resource is deleted and another resource with the same name is created, it gets a different uid.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "uid" })
  uid?: string;

  /**
   * Output only. When the namespace was last updated.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "updateTime" })
  updateTime?: string;
}

/**
 * Namespace represents a namespace across the Fleet
 */
export class NamespaceInput extends SpeakeasyBase {
  /**
   * The resource name for the namespace `projects/{project}/locations/{location}/namespaces/{namespace}`
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name?: string;

  /**
   * Required. Scope associated with the namespace
   */
  @SpeakeasyMetadata()
  @Expose({ name: "scope" })
  scope?: string;
}
