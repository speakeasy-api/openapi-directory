/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

public class GetPaymentsForPayoutResponseV3Summary {
    /**
     * The count of payments within the payout which have been confirmed.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("confirmedPayments")
    public Long confirmedPayments;
    public GetPaymentsForPayoutResponseV3Summary withConfirmedPayments(Long confirmedPayments) {
        this.confirmedPayments = confirmedPayments;
        return this;
    }
    
    /**
     * The count of payments within the payout which have failed or been returned.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("failedPayments")
    public Long failedPayments;
    public GetPaymentsForPayoutResponseV3Summary withFailedPayments(Long failedPayments) {
        this.failedPayments = failedPayments;
        return this;
    }
    
    /**
     * The count of payments within the payout which are incomplete.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("incompletePayments")
    public Long incompletePayments;
    public GetPaymentsForPayoutResponseV3Summary withIncompletePayments(Long incompletePayments) {
        this.incompletePayments = incompletePayments;
        return this;
    }
    
    /**
     * The date/time at which the payout was instructed.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("instructedDateTime")
    public OffsetDateTime instructedDateTime;
    public GetPaymentsForPayoutResponseV3Summary withInstructedDateTime(OffsetDateTime instructedDateTime) {
        this.instructedDateTime = instructedDateTime;
        return this;
    }
    
    /**
     * The memo attached to the payout.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("payoutMemo")
    public String payoutMemo;
    public GetPaymentsForPayoutResponseV3Summary withPayoutMemo(String payoutMemo) {
        this.payoutMemo = payoutMemo;
        return this;
    }
    
    /**
     * The current status of the payout. One of the following values: ACCEPTED, REJECTED, SUBMITTED, QUOTED, INSTRUCTED, COMPLETED, INCOMPLETE, CONFIRMED, WITHDRAWN
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("payoutStatus")
    public String payoutStatus;
    public GetPaymentsForPayoutResponseV3Summary withPayoutStatus(String payoutStatus) {
        this.payoutStatus = payoutStatus;
        return this;
    }
    
    /**
     * The count of payments within the payout which have been released.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("releasedPayments")
    public Long releasedPayments;
    public GetPaymentsForPayoutResponseV3Summary withReleasedPayments(Long releasedPayments) {
        this.releasedPayments = releasedPayments;
        return this;
    }
    
    /**
     * The date/time at which the payout was submitted.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("submittedDateTime")
    public OffsetDateTime submittedDateTime;
    public GetPaymentsForPayoutResponseV3Summary withSubmittedDateTime(OffsetDateTime submittedDateTime) {
        this.submittedDateTime = submittedDateTime;
        return this;
    }
    
    /**
     * The count of payments within the payout.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("totalPayments")
    public Long totalPayments;
    public GetPaymentsForPayoutResponseV3Summary withTotalPayments(Long totalPayments) {
        this.totalPayments = totalPayments;
        return this;
    }
    
    /**
     * The date/time at which the payout was withdrawn.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("withdrawnDateTime")
    public OffsetDateTime withdrawnDateTime;
    public GetPaymentsForPayoutResponseV3Summary withWithdrawnDateTime(OffsetDateTime withdrawnDateTime) {
        this.withdrawnDateTime = withdrawnDateTime;
        return this;
    }
    
}
