<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Shared;


/**
 * Value - A message that can hold any of the supported value types and associated metadata.
 * 
 * @package OpenAPI\OpenAPI\Models\Shared
 * @access public
 */
class Value
{
    /**
     * An array value.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\ArrayValue $arrayValue
     */
	#[\JMS\Serializer\Annotation\SerializedName('arrayValue')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\ArrayValue')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?ArrayValue $arrayValue = null;
    
    /**
     * A blob value. May have at most 1,000,000 bytes. When `exclude_from_indexes` is false, may have at most 1500 bytes. In JSON requests, must be base64-encoded.
     * 
     * @var ?string $blobValue
     */
	#[\JMS\Serializer\Annotation\SerializedName('blobValue')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $blobValue = null;
    
    /**
     * A boolean value.
     * 
     * @var ?bool $booleanValue
     */
	#[\JMS\Serializer\Annotation\SerializedName('booleanValue')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $booleanValue = null;
    
    /**
     * A double value.
     * 
     * @var ?float $doubleValue
     */
	#[\JMS\Serializer\Annotation\SerializedName('doubleValue')]
    #[\JMS\Serializer\Annotation\Type('float')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?float $doubleValue = null;
    
    /**
     * A Datastore data object. An entity is limited to 1 megabyte when stored. That _roughly_ corresponds to a limit of 1 megabyte for the serialized form of this message.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\Entity $entityValue
     */
	#[\JMS\Serializer\Annotation\SerializedName('entityValue')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\Entity')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?Entity $entityValue = null;
    
    /**
     * If the value should be excluded from all indexes including those defined explicitly.
     * 
     * @var ?bool $excludeFromIndexes
     */
	#[\JMS\Serializer\Annotation\SerializedName('excludeFromIndexes')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $excludeFromIndexes = null;
    
    /**
     * An object that represents a latitude/longitude pair. This is expressed as a pair of doubles to represent degrees latitude and degrees longitude. Unless specified otherwise, this object must conform to the WGS84 standard. Values must be within normalized ranges.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\LatLng $geoPointValue
     */
	#[\JMS\Serializer\Annotation\SerializedName('geoPointValue')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\LatLng')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?LatLng $geoPointValue = null;
    
    /**
     * An integer value.
     * 
     * @var ?string $integerValue
     */
	#[\JMS\Serializer\Annotation\SerializedName('integerValue')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $integerValue = null;
    
    /**
     * A unique identifier for an entity. If a key's partition ID or any of its path kinds or names are reserved/read-only, the key is reserved/read-only. A reserved/read-only key is forbidden in certain documented contexts.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\Key $keyValue
     */
	#[\JMS\Serializer\Annotation\SerializedName('keyValue')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\Key')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?Key $keyValue = null;
    
    /**
     * The `meaning` field should only be populated for backwards compatibility.
     * 
     * @var ?int $meaning
     */
	#[\JMS\Serializer\Annotation\SerializedName('meaning')]
    #[\JMS\Serializer\Annotation\Type('int')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?int $meaning = null;
    
    /**
     * A null value.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\ValueNullValueEnum $nullValue
     */
	#[\JMS\Serializer\Annotation\SerializedName('nullValue')]
    #[\JMS\Serializer\Annotation\Type('enum<OpenAPI\OpenAPI\Models\Shared\ValueNullValueEnum>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?ValueNullValueEnum $nullValue = null;
    
    /**
     * A UTF-8 encoded string value. When `exclude_from_indexes` is false (it is indexed) , may have at most 1500 bytes. Otherwise, may be set to at most 1,000,000 bytes.
     * 
     * @var ?string $stringValue
     */
	#[\JMS\Serializer\Annotation\SerializedName('stringValue')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $stringValue = null;
    
    /**
     * A timestamp value. When stored in the Datastore, precise only to microseconds; any additional precision is rounded down.
     * 
     * @var ?string $timestampValue
     */
	#[\JMS\Serializer\Annotation\SerializedName('timestampValue')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $timestampValue = null;
    
	public function __construct()
	{
		$this->arrayValue = null;
		$this->blobValue = null;
		$this->booleanValue = null;
		$this->doubleValue = null;
		$this->entityValue = null;
		$this->excludeFromIndexes = null;
		$this->geoPointValue = null;
		$this->integerValue = null;
		$this->keyValue = null;
		$this->meaning = null;
		$this->nullValue = null;
		$this->stringValue = null;
		$this->timestampValue = null;
	}
}
