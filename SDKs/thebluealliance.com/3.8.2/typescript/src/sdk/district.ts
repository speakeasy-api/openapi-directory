/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

/**
 * Calls that return district, or district-related information.
 */
export class District {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Gets a list of events in the given district.
   */
  getDistrictEvents(
    req: operations.GetDistrictEventsRequest,
    security: operations.GetDistrictEventsSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetDistrictEventsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetDistrictEventsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/district/{district_key}/events",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GetDistrictEventsSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };

    const r = client.request({
      url: url,
      method: "get",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetDistrictEventsResponse =
        new operations.GetDistrictEventsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
          headers: utils.getHeadersFromResponse(httpRes.headers),
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.events = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.events = utils.objectToClass(
              httpRes?.data,
              shared.Event,
              resFieldDepth
            );
          }
          break;
        case [304, 401].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Gets a list of event keys for events in the given district.
   */
  getDistrictEventsKeys(
    req: operations.GetDistrictEventsKeysRequest,
    security: operations.GetDistrictEventsKeysSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetDistrictEventsKeysResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetDistrictEventsKeysRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/district/{district_key}/events/keys",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GetDistrictEventsKeysSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };

    const r = client.request({
      url: url,
      method: "get",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetDistrictEventsKeysResponse =
        new operations.GetDistrictEventsKeysResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
          headers: utils.getHeadersFromResponse(httpRes.headers),
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getDistrictEventsKeys200ApplicationJSONStrings =
              utils.objectToClass(httpRes?.data);
          }
          break;
        case [304, 401].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Gets a short-form list of events in the given district.
   */
  getDistrictEventsSimple(
    req: operations.GetDistrictEventsSimpleRequest,
    security: operations.GetDistrictEventsSimpleSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetDistrictEventsSimpleResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetDistrictEventsSimpleRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/district/{district_key}/events/simple",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GetDistrictEventsSimpleSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };

    const r = client.request({
      url: url,
      method: "get",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetDistrictEventsSimpleResponse =
        new operations.GetDistrictEventsSimpleResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
          headers: utils.getHeadersFromResponse(httpRes.headers),
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.eventSimples = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.eventSimples = utils.objectToClass(
              httpRes?.data,
              shared.EventSimple,
              resFieldDepth
            );
          }
          break;
        case [304, 401].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Gets a list of team district rankings for the given district.
   */
  getDistrictRankings(
    req: operations.GetDistrictRankingsRequest,
    security: operations.GetDistrictRankingsSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetDistrictRankingsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetDistrictRankingsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/district/{district_key}/rankings",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GetDistrictRankingsSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };

    const r = client.request({
      url: url,
      method: "get",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetDistrictRankingsResponse =
        new operations.GetDistrictRankingsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
          headers: utils.getHeadersFromResponse(httpRes.headers),
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.districtRankings = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.districtRankings = utils.objectToClass(
              httpRes?.data,
              shared.DistrictRanking,
              resFieldDepth
            );
          }
          break;
        case [304, 401].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Gets a list of `Team` objects that competed in events in the given district.
   */
  getDistrictTeams(
    req: operations.GetDistrictTeamsRequest,
    security: operations.GetDistrictTeamsSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetDistrictTeamsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetDistrictTeamsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/district/{district_key}/teams",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GetDistrictTeamsSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };

    const r = client.request({
      url: url,
      method: "get",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetDistrictTeamsResponse =
        new operations.GetDistrictTeamsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
          headers: utils.getHeadersFromResponse(httpRes.headers),
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.teams = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.teams = utils.objectToClass(
              httpRes?.data,
              shared.Team,
              resFieldDepth
            );
          }
          break;
        case [304, 401].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Gets a list of `Team` objects that competed in events in the given district.
   */
  getDistrictTeamsKeys(
    req: operations.GetDistrictTeamsKeysRequest,
    security: operations.GetDistrictTeamsKeysSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetDistrictTeamsKeysResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetDistrictTeamsKeysRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/district/{district_key}/teams/keys",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GetDistrictTeamsKeysSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };

    const r = client.request({
      url: url,
      method: "get",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetDistrictTeamsKeysResponse =
        new operations.GetDistrictTeamsKeysResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
          headers: utils.getHeadersFromResponse(httpRes.headers),
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getDistrictTeamsKeys200ApplicationJSONStrings =
              utils.objectToClass(httpRes?.data);
          }
          break;
        case [304, 401].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Gets a short-form list of `Team` objects that competed in events in the given district.
   */
  getDistrictTeamsSimple(
    req: operations.GetDistrictTeamsSimpleRequest,
    security: operations.GetDistrictTeamsSimpleSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetDistrictTeamsSimpleResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetDistrictTeamsSimpleRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/district/{district_key}/teams/simple",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GetDistrictTeamsSimpleSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };

    const r = client.request({
      url: url,
      method: "get",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetDistrictTeamsSimpleResponse =
        new operations.GetDistrictTeamsSimpleResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
          headers: utils.getHeadersFromResponse(httpRes.headers),
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.teamSimples = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.teamSimples = utils.objectToClass(
              httpRes?.data,
              shared.TeamSimple,
              resFieldDepth
            );
          }
          break;
        case [304, 401].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Gets a list of districts and their corresponding district key, for the given year.
   */
  getDistrictsByYear(
    req: operations.GetDistrictsByYearRequest,
    security: operations.GetDistrictsByYearSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetDistrictsByYearResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetDistrictsByYearRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/districts/{year}", req);
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GetDistrictsByYearSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };

    const r = client.request({
      url: url,
      method: "get",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetDistrictsByYearResponse =
        new operations.GetDistrictsByYearResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
          headers: utils.getHeadersFromResponse(httpRes.headers),
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.districtLists = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.districtLists = utils.objectToClass(
              httpRes?.data,
              shared.DistrictList,
              resFieldDepth
            );
          }
          break;
        case [304, 401].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Gets a list of team rankings for the Event.
   */
  getEventDistrictPoints(
    req: operations.GetEventDistrictPointsRequest,
    security: operations.GetEventDistrictPointsSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetEventDistrictPointsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetEventDistrictPointsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/event/{event_key}/district_points",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GetEventDistrictPointsSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };

    const r = client.request({
      url: url,
      method: "get",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetEventDistrictPointsResponse =
        new operations.GetEventDistrictPointsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
          headers: utils.getHeadersFromResponse(httpRes.headers),
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.eventDistrictPoints = utils.objectToClass(
              httpRes?.data,
              shared.EventDistrictPoints
            );
          }
          break;
        case [304, 401].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Gets an array of districts representing each year the team was in a district. Will return an empty array if the team was never in a district.
   */
  getTeamDistricts(
    req: operations.GetTeamDistrictsRequest,
    security: operations.GetTeamDistrictsSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetTeamDistrictsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetTeamDistrictsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/team/{team_key}/districts",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GetTeamDistrictsSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };

    const r = client.request({
      url: url,
      method: "get",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetTeamDistrictsResponse =
        new operations.GetTeamDistrictsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
          headers: utils.getHeadersFromResponse(httpRes.headers),
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.districtLists = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.districtLists = utils.objectToClass(
              httpRes?.data,
              shared.DistrictList,
              resFieldDepth
            );
          }
          break;
        case [304, 401].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }
}
