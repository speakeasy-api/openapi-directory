// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// GETSetLoadBalancerListenerSSLCertificateActionEnum
type GETSetLoadBalancerListenerSSLCertificateActionEnum string

const (
	GETSetLoadBalancerListenerSSLCertificateActionEnumSetLoadBalancerListenerSslCertificate GETSetLoadBalancerListenerSSLCertificateActionEnum = "SetLoadBalancerListenerSSLCertificate"
)

func (e *GETSetLoadBalancerListenerSSLCertificateActionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "SetLoadBalancerListenerSSLCertificate":
		*e = GETSetLoadBalancerListenerSSLCertificateActionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GETSetLoadBalancerListenerSSLCertificateActionEnum: %s", s)
	}
}

// GETSetLoadBalancerListenerSSLCertificateVersionEnum
type GETSetLoadBalancerListenerSSLCertificateVersionEnum string

const (
	GETSetLoadBalancerListenerSSLCertificateVersionEnumTwoThousandAndTwelve0601 GETSetLoadBalancerListenerSSLCertificateVersionEnum = "2012-06-01"
)

func (e *GETSetLoadBalancerListenerSSLCertificateVersionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "2012-06-01":
		*e = GETSetLoadBalancerListenerSSLCertificateVersionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GETSetLoadBalancerListenerSSLCertificateVersionEnum: %s", s)
	}
}

type GETSetLoadBalancerListenerSSLCertificateQueryParams struct {
	Action GETSetLoadBalancerListenerSSLCertificateActionEnum `queryParam:"style=form,explode=true,name=Action"`
	// The name of the load balancer.
	LoadBalancerName string `queryParam:"style=form,explode=true,name=LoadBalancerName"`
	// The port that uses the specified SSL certificate.
	LoadBalancerPort int64 `queryParam:"style=form,explode=true,name=LoadBalancerPort"`
	// The Amazon Resource Name (ARN) of the SSL certificate.
	SSLCertificateID string                                              `queryParam:"style=form,explode=true,name=SSLCertificateId"`
	Version          GETSetLoadBalancerListenerSSLCertificateVersionEnum `queryParam:"style=form,explode=true,name=Version"`
}

type GETSetLoadBalancerListenerSSLCertificateHeaders struct {
	XAmzAlgorithm     *string `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
}

type GETSetLoadBalancerListenerSSLCertificateRequest struct {
	QueryParams GETSetLoadBalancerListenerSSLCertificateQueryParams
	Headers     GETSetLoadBalancerListenerSSLCertificateHeaders
}

type GETSetLoadBalancerListenerSSLCertificateResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
