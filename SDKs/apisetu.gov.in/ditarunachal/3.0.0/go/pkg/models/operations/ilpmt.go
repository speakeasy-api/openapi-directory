// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type IlpmtSecurity struct {
	APIKey   string `security:"scheme,type=apiKey,subtype=header,name=X-APISETU-APIKEY"`
	ClientID string `security:"scheme,type=apiKey,subtype=header,name=X-APISETU-CLIENTID"`
}

type IlpmtRequestBodyCertificateParameters struct {
	// Full name
	FullName string `json:"FullName"`
	// Aadhaar number
	UID string `json:"UID"`
	// Application ID
	EILPAppID string `json:"eILPAppId"`
	// Contact Number
	EILPContactNumber string `json:"eILPContactNumber"`
}

// IlpmtRequestBodyFormatEnum - The format of the certificate in response.
type IlpmtRequestBodyFormatEnum string

const (
	IlpmtRequestBodyFormatEnumPdf IlpmtRequestBodyFormatEnum = "pdf"
)

func (e IlpmtRequestBodyFormatEnum) ToPointer() *IlpmtRequestBodyFormatEnum {
	return &e
}

func (e *IlpmtRequestBodyFormatEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "pdf":
		*e = IlpmtRequestBodyFormatEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for IlpmtRequestBodyFormatEnum: %v", v)
	}
}

// IlpmtRequestBody - Request format
type IlpmtRequestBody struct {
	CertificateParameters *IlpmtRequestBodyCertificateParameters `json:"certificateParameters,omitempty"`
	ConsentArtifact       *shared.ConsentArtifactSchema          `json:"consentArtifact,omitempty"`
	// The format of the certificate in response.
	Format IlpmtRequestBodyFormatEnum `json:"format"`
	// A unique transaction id for this request in UUID format. It is used for tracking the request.
	TxnID string `json:"txnId"`
}

type Ilpmt504ApplicationJSONErrorEnum string

const (
	Ilpmt504ApplicationJSONErrorEnumGatewayTimeout Ilpmt504ApplicationJSONErrorEnum = "gateway_timeout"
)

func (e Ilpmt504ApplicationJSONErrorEnum) ToPointer() *Ilpmt504ApplicationJSONErrorEnum {
	return &e
}

func (e *Ilpmt504ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "gateway_timeout":
		*e = Ilpmt504ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Ilpmt504ApplicationJSONErrorEnum: %v", v)
	}
}

type Ilpmt504ApplicationJSONErrorDescriptionEnum string

const (
	Ilpmt504ApplicationJSONErrorDescriptionEnumPublisherServiceDidNotRespondInTime Ilpmt504ApplicationJSONErrorDescriptionEnum = "Publisher service did not respond in time"
)

func (e Ilpmt504ApplicationJSONErrorDescriptionEnum) ToPointer() *Ilpmt504ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Ilpmt504ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Publisher service did not respond in time":
		*e = Ilpmt504ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Ilpmt504ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Ilpmt504ApplicationJSON - Gateway timeout
type Ilpmt504ApplicationJSON struct {
	Error            *Ilpmt504ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Ilpmt504ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Ilpmt503ApplicationJSONErrorEnum string

const (
	Ilpmt503ApplicationJSONErrorEnumServiceUnavailable Ilpmt503ApplicationJSONErrorEnum = "service_unavailable"
)

func (e Ilpmt503ApplicationJSONErrorEnum) ToPointer() *Ilpmt503ApplicationJSONErrorEnum {
	return &e
}

func (e *Ilpmt503ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "service_unavailable":
		*e = Ilpmt503ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Ilpmt503ApplicationJSONErrorEnum: %v", v)
	}
}

type Ilpmt503ApplicationJSONErrorDescriptionEnum string

const (
	Ilpmt503ApplicationJSONErrorDescriptionEnumPublisherServiceIsTemporarilyUnavailable Ilpmt503ApplicationJSONErrorDescriptionEnum = "Publisher service is temporarily unavailable"
)

func (e Ilpmt503ApplicationJSONErrorDescriptionEnum) ToPointer() *Ilpmt503ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Ilpmt503ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Publisher service is temporarily unavailable":
		*e = Ilpmt503ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Ilpmt503ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Ilpmt503ApplicationJSON - Service unavailable
type Ilpmt503ApplicationJSON struct {
	Error            *Ilpmt503ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Ilpmt503ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Ilpmt502ApplicationJSONErrorEnum string

const (
	Ilpmt502ApplicationJSONErrorEnumBadGatewy Ilpmt502ApplicationJSONErrorEnum = "bad_gatewy"
)

func (e Ilpmt502ApplicationJSONErrorEnum) ToPointer() *Ilpmt502ApplicationJSONErrorEnum {
	return &e
}

func (e *Ilpmt502ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "bad_gatewy":
		*e = Ilpmt502ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Ilpmt502ApplicationJSONErrorEnum: %v", v)
	}
}

type Ilpmt502ApplicationJSONErrorDescriptionEnum string

const (
	Ilpmt502ApplicationJSONErrorDescriptionEnumPublisherServiceReturnedAnInvalidResponse Ilpmt502ApplicationJSONErrorDescriptionEnum = "Publisher service returned an invalid response"
)

func (e Ilpmt502ApplicationJSONErrorDescriptionEnum) ToPointer() *Ilpmt502ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Ilpmt502ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Publisher service returned an invalid response":
		*e = Ilpmt502ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Ilpmt502ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Ilpmt502ApplicationJSON - Bad gateway
type Ilpmt502ApplicationJSON struct {
	Error            *Ilpmt502ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Ilpmt502ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Ilpmt500ApplicationJSONErrorEnum string

const (
	Ilpmt500ApplicationJSONErrorEnumInternalServerError Ilpmt500ApplicationJSONErrorEnum = "internal_server_error"
)

func (e Ilpmt500ApplicationJSONErrorEnum) ToPointer() *Ilpmt500ApplicationJSONErrorEnum {
	return &e
}

func (e *Ilpmt500ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "internal_server_error":
		*e = Ilpmt500ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Ilpmt500ApplicationJSONErrorEnum: %v", v)
	}
}

type Ilpmt500ApplicationJSONErrorDescriptionEnum string

const (
	Ilpmt500ApplicationJSONErrorDescriptionEnumInternalServerError Ilpmt500ApplicationJSONErrorDescriptionEnum = "Internal server error"
)

func (e Ilpmt500ApplicationJSONErrorDescriptionEnum) ToPointer() *Ilpmt500ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Ilpmt500ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Internal server error":
		*e = Ilpmt500ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Ilpmt500ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Ilpmt500ApplicationJSON - Internal server error
type Ilpmt500ApplicationJSON struct {
	Error            *Ilpmt500ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Ilpmt500ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Ilpmt404ApplicationJSONErrorEnum string

const (
	Ilpmt404ApplicationJSONErrorEnumRecordNotFound Ilpmt404ApplicationJSONErrorEnum = "record_not_found"
	Ilpmt404ApplicationJSONErrorEnumURLNotFound    Ilpmt404ApplicationJSONErrorEnum = "url_not_found"
)

func (e Ilpmt404ApplicationJSONErrorEnum) ToPointer() *Ilpmt404ApplicationJSONErrorEnum {
	return &e
}

func (e *Ilpmt404ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "record_not_found":
		fallthrough
	case "url_not_found":
		*e = Ilpmt404ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Ilpmt404ApplicationJSONErrorEnum: %v", v)
	}
}

type Ilpmt404ApplicationJSONErrorDescriptionEnum string

const (
	Ilpmt404ApplicationJSONErrorDescriptionEnumNoRecordFound               Ilpmt404ApplicationJSONErrorDescriptionEnum = "No record found"
	Ilpmt404ApplicationJSONErrorDescriptionEnumYourAPIURLOrPathIsIncorrect Ilpmt404ApplicationJSONErrorDescriptionEnum = "Your API url or path is incorrect"
)

func (e Ilpmt404ApplicationJSONErrorDescriptionEnum) ToPointer() *Ilpmt404ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Ilpmt404ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "No record found":
		fallthrough
	case "Your API url or path is incorrect":
		*e = Ilpmt404ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Ilpmt404ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Ilpmt404ApplicationJSON - No record found
type Ilpmt404ApplicationJSON struct {
	Error            *Ilpmt404ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Ilpmt404ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Ilpmt401ApplicationJSONErrorEnum string

const (
	Ilpmt401ApplicationJSONErrorEnumInvalidAuthentication Ilpmt401ApplicationJSONErrorEnum = "invalid_authentication"
	Ilpmt401ApplicationJSONErrorEnumInvalidAuthorization  Ilpmt401ApplicationJSONErrorEnum = "invalid_authorization"
)

func (e Ilpmt401ApplicationJSONErrorEnum) ToPointer() *Ilpmt401ApplicationJSONErrorEnum {
	return &e
}

func (e *Ilpmt401ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "invalid_authentication":
		fallthrough
	case "invalid_authorization":
		*e = Ilpmt401ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Ilpmt401ApplicationJSONErrorEnum: %v", v)
	}
}

type Ilpmt401ApplicationJSONErrorDescriptionEnum string

const (
	Ilpmt401ApplicationJSONErrorDescriptionEnumAuthenticationFailed            Ilpmt401ApplicationJSONErrorDescriptionEnum = "Authentication failed"
	Ilpmt401ApplicationJSONErrorDescriptionEnumYouAreNotAuthorizedToUseThisAPI Ilpmt401ApplicationJSONErrorDescriptionEnum = "You are not authorized to use this API"
)

func (e Ilpmt401ApplicationJSONErrorDescriptionEnum) ToPointer() *Ilpmt401ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Ilpmt401ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Authentication failed":
		fallthrough
	case "You are not authorized to use this API":
		*e = Ilpmt401ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Ilpmt401ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Ilpmt401ApplicationJSON - Unauthorized access
type Ilpmt401ApplicationJSON struct {
	Error            *Ilpmt401ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Ilpmt401ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Ilpmt400ApplicationJSONErrorEnum string

const (
	Ilpmt400ApplicationJSONErrorEnumMissingParameter Ilpmt400ApplicationJSONErrorEnum = "missing_parameter"
	Ilpmt400ApplicationJSONErrorEnumInvalidParameter Ilpmt400ApplicationJSONErrorEnum = "invalid_parameter"
	Ilpmt400ApplicationJSONErrorEnumInvalidFormat    Ilpmt400ApplicationJSONErrorEnum = "invalid_format"
	Ilpmt400ApplicationJSONErrorEnumInvalidTxnid     Ilpmt400ApplicationJSONErrorEnum = "invalid_txnid"
	Ilpmt400ApplicationJSONErrorEnumInvalidConsentid Ilpmt400ApplicationJSONErrorEnum = "invalid_consentid"
)

func (e Ilpmt400ApplicationJSONErrorEnum) ToPointer() *Ilpmt400ApplicationJSONErrorEnum {
	return &e
}

func (e *Ilpmt400ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "missing_parameter":
		fallthrough
	case "invalid_parameter":
		fallthrough
	case "invalid_format":
		fallthrough
	case "invalid_txnid":
		fallthrough
	case "invalid_consentid":
		*e = Ilpmt400ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Ilpmt400ApplicationJSONErrorEnum: %v", v)
	}
}

type Ilpmt400ApplicationJSONErrorDescriptionEnum string

const (
	Ilpmt400ApplicationJSONErrorDescriptionEnumPleaseProvideAllMandatoryParameters     Ilpmt400ApplicationJSONErrorDescriptionEnum = "Please provide all mandatory parameters"
	Ilpmt400ApplicationJSONErrorDescriptionEnumBadRequest                              Ilpmt400ApplicationJSONErrorDescriptionEnum = "Bad request"
	Ilpmt400ApplicationJSONErrorDescriptionEnumTheFormatParameterIsInvalid             Ilpmt400ApplicationJSONErrorDescriptionEnum = "The format parameter is invalid"
	Ilpmt400ApplicationJSONErrorDescriptionEnumTheTxnIDParameterMustBeInUUIDFormat     Ilpmt400ApplicationJSONErrorDescriptionEnum = "The txnId parameter must be in UUID format"
	Ilpmt400ApplicationJSONErrorDescriptionEnumTheConsentIDParameterMustBeInUUIDFormat Ilpmt400ApplicationJSONErrorDescriptionEnum = "The consentId parameter must be in UUID format"
)

func (e Ilpmt400ApplicationJSONErrorDescriptionEnum) ToPointer() *Ilpmt400ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Ilpmt400ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Please provide all mandatory parameters":
		fallthrough
	case "Bad request":
		fallthrough
	case "The format parameter is invalid":
		fallthrough
	case "The txnId parameter must be in UUID format":
		fallthrough
	case "The consentId parameter must be in UUID format":
		*e = Ilpmt400ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Ilpmt400ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Ilpmt400ApplicationJSON - Bad request
type Ilpmt400ApplicationJSON struct {
	Error            *Ilpmt400ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Ilpmt400ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type IlpmtResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Bad request
	Ilpmt400ApplicationJSONObject *Ilpmt400ApplicationJSON
	// Unauthorized access
	Ilpmt401ApplicationJSONObject *Ilpmt401ApplicationJSON
	// No record found
	Ilpmt404ApplicationJSONObject *Ilpmt404ApplicationJSON
	// Internal server error
	Ilpmt500ApplicationJSONObject *Ilpmt500ApplicationJSON
	// Bad gateway
	Ilpmt502ApplicationJSONObject *Ilpmt502ApplicationJSON
	// Service unavailable
	Ilpmt503ApplicationJSONObject *Ilpmt503ApplicationJSON
	// Gateway timeout
	Ilpmt504ApplicationJSONObject *Ilpmt504ApplicationJSON
}
