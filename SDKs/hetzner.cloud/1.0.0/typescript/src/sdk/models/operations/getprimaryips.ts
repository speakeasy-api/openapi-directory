/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

/**
 * Can be used multiple times. Choices id id:asc id:desc created created:asc created:desc
 */
export enum GetPrimaryIpsSortEnum {
  Id = "id",
  IdAsc = "id:asc",
  IdDesc = "id:desc",
  Created = "created",
  CreatedAsc = "created:asc",
  CreatedDesc = "created:desc",
}

export class GetPrimaryIpsRequest extends SpeakeasyBase {
  /**
   * Can be used to filter resources by their ip. The response will only contain the resources matching the specified ip.
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=ip" })
  ip?: string;

  /**
   * Can be used to filter resources by labels. The response will only contain resources matching the label selector.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=label_selector",
  })
  labelSelector?: string;

  /**
   * Can be used to filter resources by their name. The response will only contain the resources matching the specified name
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=name" })
  name?: string;

  /**
   * Can be used multiple times. Choices id id:asc id:desc created created:asc created:desc
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=sort" })
  sort?: GetPrimaryIpsSortEnum;
}

export class GetPrimaryIpsPrimaryIPsResponseMetaPagination extends SpeakeasyBase {
  /**
   * ID of the last page available. Can be null if the current page is the last one.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "last_page" })
  lastPage: number;

  /**
   * ID of the next page. Can be null if the current page is the last one.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "next_page" })
  nextPage: number;

  /**
   * Current page number
   */
  @SpeakeasyMetadata()
  @Expose({ name: "page" })
  page: number;

  /**
   * Maximum number of items shown per page in the response
   */
  @SpeakeasyMetadata()
  @Expose({ name: "per_page" })
  perPage: number;

  /**
   * ID of the previous page. Can be null if the current page is the first one.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "previous_page" })
  previousPage: number;

  /**
   * The total number of entries that exist in the database for this query. Nullable if unknown.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "total_entries" })
  totalEntries: number;
}

export class GetPrimaryIpsPrimaryIPsResponseMeta extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "pagination" })
  @Type(() => GetPrimaryIpsPrimaryIPsResponseMetaPagination)
  pagination: GetPrimaryIpsPrimaryIPsResponseMetaPagination;
}

/**
 * Resource type the Primary IP can be assigned to
 */
export enum GetPrimaryIpsPrimaryIPsResponsePrimaryIPAssigneeTypeEnum {
  Server = "server",
}

export class GetPrimaryIpsPrimaryIPsResponsePrimaryIPDatacenterLocation extends SpeakeasyBase {
  /**
   * City the Location is closest to
   */
  @SpeakeasyMetadata()
  @Expose({ name: "city" })
  city: string;

  /**
   * ISO 3166-1 alpha-2 code of the country the Location resides in
   */
  @SpeakeasyMetadata()
  @Expose({ name: "country" })
  country: string;

  /**
   * Description of the Location
   */
  @SpeakeasyMetadata()
  @Expose({ name: "description" })
  description: string;

  /**
   * ID of the Location
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id: number;

  /**
   * Latitude of the city closest to the Location
   */
  @SpeakeasyMetadata()
  @Expose({ name: "latitude" })
  latitude: number;

  /**
   * Longitude of the city closest to the Location
   */
  @SpeakeasyMetadata()
  @Expose({ name: "longitude" })
  longitude: number;

  /**
   * Unique identifier of the Location
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name: string;

  /**
   * Name of network zone this Location resides in
   */
  @SpeakeasyMetadata()
  @Expose({ name: "network_zone" })
  networkZone: string;
}

/**
 * The Server types the Datacenter can handle
 */
export class GetPrimaryIpsPrimaryIPsResponsePrimaryIPDatacenterServerTypes extends SpeakeasyBase {
  /**
   * IDs of Server types that are supported and for which the Datacenter has enough resources left
   */
  @SpeakeasyMetadata()
  @Expose({ name: "available" })
  available: number[];

  /**
   * IDs of Server types that are supported and for which the Datacenter has enough resources left
   */
  @SpeakeasyMetadata()
  @Expose({ name: "available_for_migration" })
  availableForMigration: number[];

  /**
   * IDs of Server types that are supported in the Datacenter
   */
  @SpeakeasyMetadata()
  @Expose({ name: "supported" })
  supported: number[];
}

/**
 * Datacenter this Primary IP is located at
 */
export class GetPrimaryIpsPrimaryIPsResponsePrimaryIPDatacenter extends SpeakeasyBase {
  /**
   * Description of the Datacenter
   */
  @SpeakeasyMetadata()
  @Expose({ name: "description" })
  description: string;

  /**
   * ID of the Resource
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id: number;

  @SpeakeasyMetadata()
  @Expose({ name: "location" })
  @Type(() => GetPrimaryIpsPrimaryIPsResponsePrimaryIPDatacenterLocation)
  location: GetPrimaryIpsPrimaryIPsResponsePrimaryIPDatacenterLocation;

  /**
   * Unique identifier of the Datacenter
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name: string;

  /**
   * The Server types the Datacenter can handle
   */
  @SpeakeasyMetadata()
  @Expose({ name: "server_types" })
  @Type(() => GetPrimaryIpsPrimaryIPsResponsePrimaryIPDatacenterServerTypes)
  serverTypes: GetPrimaryIpsPrimaryIPsResponsePrimaryIPDatacenterServerTypes;
}

export class GetPrimaryIpsPrimaryIPsResponsePrimaryIPDnsPtr extends SpeakeasyBase {
  /**
   * DNS pointer for the specific IP address
   */
  @SpeakeasyMetadata()
  @Expose({ name: "dns_ptr" })
  dnsPtr: string;

  /**
   * Single IPv4 or IPv6 address
   */
  @SpeakeasyMetadata()
  @Expose({ name: "ip" })
  ip: string;
}

/**
 * Protection configuration for the Resource
 */
export class GetPrimaryIpsPrimaryIPsResponsePrimaryIPProtection extends SpeakeasyBase {
  /**
   * If true, prevents the Resource from being deleted
   */
  @SpeakeasyMetadata()
  @Expose({ name: "delete" })
  delete: boolean;
}

/**
 * Type of the Primary IP
 */
export enum GetPrimaryIpsPrimaryIPsResponsePrimaryIPTypeEnum {
  Ipv4 = "ipv4",
  Ipv6 = "ipv6",
}

export class GetPrimaryIpsPrimaryIPsResponsePrimaryIP extends SpeakeasyBase {
  /**
   * ID of the resource the Primary IP is assigned to, null if it is not assigned at all
   */
  @SpeakeasyMetadata()
  @Expose({ name: "assignee_id" })
  assigneeId: number;

  /**
   * Resource type the Primary IP can be assigned to
   */
  @SpeakeasyMetadata()
  @Expose({ name: "assignee_type" })
  assigneeType: GetPrimaryIpsPrimaryIPsResponsePrimaryIPAssigneeTypeEnum;

  /**
   * Delete this Primary IP when the resource it is assigned to is deleted
   */
  @SpeakeasyMetadata()
  @Expose({ name: "auto_delete" })
  autoDelete: boolean;

  /**
   * Whether the IP is blocked
   */
  @SpeakeasyMetadata()
  @Expose({ name: "blocked" })
  blocked: boolean;

  /**
   * Point in time when the Resource was created (in ISO-8601 format)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "created" })
  created: string;

  /**
   * Datacenter this Primary IP is located at
   */
  @SpeakeasyMetadata()
  @Expose({ name: "datacenter" })
  @Type(() => GetPrimaryIpsPrimaryIPsResponsePrimaryIPDatacenter)
  datacenter: GetPrimaryIpsPrimaryIPsResponsePrimaryIPDatacenter;

  /**
   * Array of reverse DNS entries
   */
  @SpeakeasyMetadata({
    elemType: GetPrimaryIpsPrimaryIPsResponsePrimaryIPDnsPtr,
  })
  @Expose({ name: "dns_ptr" })
  @Type(() => GetPrimaryIpsPrimaryIPsResponsePrimaryIPDnsPtr)
  dnsPtr: GetPrimaryIpsPrimaryIPsResponsePrimaryIPDnsPtr[];

  /**
   * ID of the Resource
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id: number;

  /**
   * IP address
   */
  @SpeakeasyMetadata()
  @Expose({ name: "ip" })
  ip: string;

  /**
   * User-defined labels (key-value pairs)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "labels" })
  labels: Record<string, string>;

  /**
   * Name of the Resource. Must be unique per Project.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name: string;

  /**
   * Protection configuration for the Resource
   */
  @SpeakeasyMetadata()
  @Expose({ name: "protection" })
  @Type(() => GetPrimaryIpsPrimaryIPsResponsePrimaryIPProtection)
  protection: GetPrimaryIpsPrimaryIPsResponsePrimaryIPProtection;

  /**
   * Type of the Primary IP
   */
  @SpeakeasyMetadata()
  @Expose({ name: "type" })
  type: GetPrimaryIpsPrimaryIPsResponsePrimaryIPTypeEnum;
}

/**
 * The `primary_ips` key contains an array of Primary IP objects
 */
export class GetPrimaryIpsPrimaryIPsResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "meta" })
  @Type(() => GetPrimaryIpsPrimaryIPsResponseMeta)
  meta?: GetPrimaryIpsPrimaryIPsResponseMeta;

  @SpeakeasyMetadata({ elemType: GetPrimaryIpsPrimaryIPsResponsePrimaryIP })
  @Expose({ name: "primary_ips" })
  @Type(() => GetPrimaryIpsPrimaryIPsResponsePrimaryIP)
  primaryIps: GetPrimaryIpsPrimaryIPsResponsePrimaryIP[];
}

export class GetPrimaryIpsResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  /**
   * The `primary_ips` key contains an array of Primary IP objects
   */
  @SpeakeasyMetadata()
  primaryIPsResponse?: GetPrimaryIpsPrimaryIPsResponse;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;
}
