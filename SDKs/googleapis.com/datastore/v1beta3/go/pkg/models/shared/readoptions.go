// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// ReadOptionsReadConsistencyEnum - The non-transactional read consistency to use.
type ReadOptionsReadConsistencyEnum string

const (
	ReadOptionsReadConsistencyEnumReadConsistencyUnspecified ReadOptionsReadConsistencyEnum = "READ_CONSISTENCY_UNSPECIFIED"
	ReadOptionsReadConsistencyEnumStrong                     ReadOptionsReadConsistencyEnum = "STRONG"
	ReadOptionsReadConsistencyEnumEventual                   ReadOptionsReadConsistencyEnum = "EVENTUAL"
)

func (e *ReadOptionsReadConsistencyEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "READ_CONSISTENCY_UNSPECIFIED":
		fallthrough
	case "STRONG":
		fallthrough
	case "EVENTUAL":
		*e = ReadOptionsReadConsistencyEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ReadOptionsReadConsistencyEnum: %s", s)
	}
}

// ReadOptions - The options shared by read requests.
type ReadOptions struct {
	// The non-transactional read consistency to use.
	ReadConsistency *ReadOptionsReadConsistencyEnum `json:"readConsistency,omitempty"`
	// Reads entities as they were at the given time. This may not be older than 270 seconds. This value is only supported for Cloud Firestore in Datastore mode.
	ReadTime *string `json:"readTime,omitempty"`
	// The identifier of the transaction in which to read. A transaction identifier is returned by a call to Datastore.BeginTransaction.
	Transaction *string `json:"transaction,omitempty"`
}
