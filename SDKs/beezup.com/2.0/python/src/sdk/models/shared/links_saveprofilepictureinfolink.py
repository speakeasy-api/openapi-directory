"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import beezup_common_httpmethod_enum as shared_beezup_common_httpmethod_enum
from ..shared import beezup_common_infosummaries as shared_beezup_common_infosummaries
from ..shared import beezup_common_linkparameter3 as shared_beezup_common_linkparameter3
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class LinksSaveProfilePictureInfoLink:
    
    href: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('href') }})
    r"""Indicate the relative uri for this link"""  
    all_optional_params_provided: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('allOptionalParamsProvided'), 'exclude': lambda f: f is None }})
    r"""indicates whether all optionals params have been provided"""  
    all_required_params_provided: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('allRequiredParamsProvided'), 'exclude': lambda f: f is None }})
    r"""indicates whether all required params have been provided"""  
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description'), 'exclude': lambda f: f is None }})
    r"""The description of the link"""  
    doc_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('docUrl'), 'exclude': lambda f: f is None }})
    r"""The documentation related to this operation."""  
    info: Optional[shared_beezup_common_infosummaries.BeezUPCommonInfoSummaries] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('info'), 'exclude': lambda f: f is None }})  
    label: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('label'), 'exclude': lambda f: f is None }})
    r"""The label corresponding to the link. This label is automatically translated based on the Accept-Language http header."""  
    method: Optional[shared_beezup_common_httpmethod_enum.BeezUPCommonHTTPMethodEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('method'), 'exclude': lambda f: f is None }})
    r"""Indicate the http method to use on this link"""  
    operation_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('operationId'), 'exclude': lambda f: f is None }})
    r"""The operationId to call."""  
    parameters: Optional[dict[str, shared_beezup_common_linkparameter3.BeezUPCommonLinkParameter3]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('parameters'), 'exclude': lambda f: f is None }})  
    url_templated: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('urlTemplated'), 'exclude': lambda f: f is None }})
    r"""indicates whether the href is templated or not"""  
    