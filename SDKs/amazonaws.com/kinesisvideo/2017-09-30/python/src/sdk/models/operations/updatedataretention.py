"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Any, Optional

class UpdateDataRetentionRequestBodyOperationEnum(str, Enum):
    r"""Indicates whether you want to increase or decrease the retention period."""
    INCREASE_DATA_RETENTION = 'INCREASE_DATA_RETENTION'
    DECREASE_DATA_RETENTION = 'DECREASE_DATA_RETENTION'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateDataRetentionRequestBody:
    
    current_version: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CurrentVersion') }})
    r"""The version of the stream whose retention period you want to change. To get the version, call either the <code>DescribeStream</code> or the <code>ListStreams</code> API."""  
    data_retention_change_in_hours: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DataRetentionChangeInHours') }})
    r"""The retention period, in hours. The value you specify replaces the current value. The maximum value for this parameter is 87600 (ten years)."""  
    operation: UpdateDataRetentionRequestBodyOperationEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Operation') }})
    r"""Indicates whether you want to increase or decrease the retention period."""  
    stream_arn: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('StreamARN'), 'exclude': lambda f: f is None }})
    r"""The Amazon Resource Name (ARN) of the stream whose retention period you want to change."""  
    stream_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('StreamName'), 'exclude': lambda f: f is None }})
    r"""The name of the stream whose retention period you want to change."""  
    

@dataclasses.dataclass
class UpdateDataRetentionRequest:
    
    request_body: UpdateDataRetentionRequestBody = dataclasses.field(metadata={'request': { 'media_type': 'application/json' }})  
    x_amz_algorithm: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Algorithm', 'style': 'simple', 'explode': False }})  
    x_amz_content_sha256: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Content-Sha256', 'style': 'simple', 'explode': False }})  
    x_amz_credential: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Credential', 'style': 'simple', 'explode': False }})  
    x_amz_date: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Date', 'style': 'simple', 'explode': False }})  
    x_amz_security_token: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Security-Token', 'style': 'simple', 'explode': False }})  
    x_amz_signature: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Signature', 'style': 'simple', 'explode': False }})  
    x_amz_signed_headers: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-SignedHeaders', 'style': 'simple', 'explode': False }})  
    

@dataclasses.dataclass
class UpdateDataRetentionResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    client_limit_exceeded_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ClientLimitExceededException"""  
    invalid_argument_exception: Optional[Any] = dataclasses.field(default=None)
    r"""InvalidArgumentException"""  
    not_authorized_exception: Optional[Any] = dataclasses.field(default=None)
    r"""NotAuthorizedException"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    resource_in_use_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ResourceInUseException"""  
    resource_not_found_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ResourceNotFoundException"""  
    update_data_retention_output: Optional[dict[str, Any]] = dataclasses.field(default=None)
    r"""Success"""  
    version_mismatch_exception: Optional[Any] = dataclasses.field(default=None)
    r"""VersionMismatchException"""  
    