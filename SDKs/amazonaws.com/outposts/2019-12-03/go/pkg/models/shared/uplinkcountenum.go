// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type UplinkCountEnum string

const (
	UplinkCountEnumUplinkCount1  UplinkCountEnum = "UPLINK_COUNT_1"
	UplinkCountEnumUplinkCount2  UplinkCountEnum = "UPLINK_COUNT_2"
	UplinkCountEnumUplinkCount3  UplinkCountEnum = "UPLINK_COUNT_3"
	UplinkCountEnumUplinkCount4  UplinkCountEnum = "UPLINK_COUNT_4"
	UplinkCountEnumUplinkCount5  UplinkCountEnum = "UPLINK_COUNT_5"
	UplinkCountEnumUplinkCount6  UplinkCountEnum = "UPLINK_COUNT_6"
	UplinkCountEnumUplinkCount7  UplinkCountEnum = "UPLINK_COUNT_7"
	UplinkCountEnumUplinkCount8  UplinkCountEnum = "UPLINK_COUNT_8"
	UplinkCountEnumUplinkCount12 UplinkCountEnum = "UPLINK_COUNT_12"
	UplinkCountEnumUplinkCount16 UplinkCountEnum = "UPLINK_COUNT_16"
)

func (e *UplinkCountEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "UPLINK_COUNT_1":
		fallthrough
	case "UPLINK_COUNT_2":
		fallthrough
	case "UPLINK_COUNT_3":
		fallthrough
	case "UPLINK_COUNT_4":
		fallthrough
	case "UPLINK_COUNT_5":
		fallthrough
	case "UPLINK_COUNT_6":
		fallthrough
	case "UPLINK_COUNT_7":
		fallthrough
	case "UPLINK_COUNT_8":
		fallthrough
	case "UPLINK_COUNT_12":
		fallthrough
	case "UPLINK_COUNT_16":
		*e = UplinkCountEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UplinkCountEnum: %s", s)
	}
}
