/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import org.openapis.openapi.utils.SpeakeasyMetadata;

public class CreateWorkspaceCreateWorkspaceRequest {
    /**
     * The URL we should call when an event occurs. If provided, the Workspace will publish events to this URL, for example, to collect data for reporting. See [Workspace Events](https://www.twilio.com/docs/taskrouter/api/event) for more information. This parameter supports Twilio's [Webhooks (HTTP callbacks) Connection Overrides](https://www.twilio.com/docs/usage/webhooks/webhooks-connection-overrides).
     */
    @SpeakeasyMetadata("form:name=EventCallbackUrl")
    public String eventCallbackUrl;
    public CreateWorkspaceCreateWorkspaceRequest withEventCallbackUrl(String eventCallbackUrl) {
        this.eventCallbackUrl = eventCallbackUrl;
        return this;
    }
    
    /**
     * The list of Workspace events for which to call event_callback_url. For example, if `EventsFilter=task.created, task.canceled, worker.activity.update`, then TaskRouter will call event_callback_url only when a task is created, canceled, or a Worker activity is updated.
     */
    @SpeakeasyMetadata("form:name=EventsFilter")
    public String eventsFilter;
    public CreateWorkspaceCreateWorkspaceRequest withEventsFilter(String eventsFilter) {
        this.eventsFilter = eventsFilter;
        return this;
    }
    
    /**
     * A descriptive string that you create to describe the Workspace resource. It can be up to 64 characters long. For example: `Customer Support` or `2014 Election Campaign`.
     */
    @SpeakeasyMetadata("form:name=FriendlyName")
    public String friendlyName;
    public CreateWorkspaceCreateWorkspaceRequest withFriendlyName(String friendlyName) {
        this.friendlyName = friendlyName;
        return this;
    }
    
    /**
     * Whether to enable multi-tasking. Can be: `true` to enable multi-tasking, or `false` to disable it. However, all workspaces should be created as multi-tasking. The default is `true`. Multi-tasking allows Workers to handle multiple Tasks simultaneously. When enabled (`true`), each Worker can receive parallel reservations up to the per-channel maximums defined in the Workers section. In single-tasking mode (legacy mode), each Worker will only receive a new reservation when the previous task is completed. Learn more at [Multitasking](https://www.twilio.com/docs/taskrouter/multitasking).
     */
    @SpeakeasyMetadata("form:name=MultiTaskEnabled")
    public Boolean multiTaskEnabled;
    public CreateWorkspaceCreateWorkspaceRequest withMultiTaskEnabled(Boolean multiTaskEnabled) {
        this.multiTaskEnabled = multiTaskEnabled;
        return this;
    }
    
    @SpeakeasyMetadata("form:name=PrioritizeQueueOrder")
    public org.openapis.openapi.models.shared.WorkspaceEnumQueueOrderEnum prioritizeQueueOrder;
    public CreateWorkspaceCreateWorkspaceRequest withPrioritizeQueueOrder(org.openapis.openapi.models.shared.WorkspaceEnumQueueOrderEnum prioritizeQueueOrder) {
        this.prioritizeQueueOrder = prioritizeQueueOrder;
        return this;
    }
    
    /**
     * An available template name. Can be: `NONE` or `FIFO` and the default is `NONE`. Pre-configures the Workspace with the Workflow and Activities specified in the template. `NONE` will create a Workspace with only a set of default activities. `FIFO` will configure TaskRouter with a set of default activities and a single TaskQueue for first-in, first-out distribution, which can be useful when you are getting started with TaskRouter.
     */
    @SpeakeasyMetadata("form:name=Template")
    public String template;
    public CreateWorkspaceCreateWorkspaceRequest withTemplate(String template) {
        this.template = template;
        return this;
    }
    
}
