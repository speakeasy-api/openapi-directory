// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

type UpdateCertificatePathParams struct {
	// The ID of the certificate. (The last part of the certificate ARN contains the certificate ID.)
	CertificateID string `pathParam:"style=simple,explode=false,name=certificateId"`
}

// UpdateCertificateNewStatusEnum - <p>The new status.</p> <p> <b>Note:</b> Setting the status to PENDING_TRANSFER or PENDING_ACTIVATION will result in an exception being thrown. PENDING_TRANSFER and PENDING_ACTIVATION are statuses used internally by IoT. They are not intended for developer use.</p> <p> <b>Note:</b> The status value REGISTER_INACTIVE is deprecated and should not be used.</p>
type UpdateCertificateNewStatusEnum string

const (
	UpdateCertificateNewStatusEnumActive            UpdateCertificateNewStatusEnum = "ACTIVE"
	UpdateCertificateNewStatusEnumInactive          UpdateCertificateNewStatusEnum = "INACTIVE"
	UpdateCertificateNewStatusEnumRevoked           UpdateCertificateNewStatusEnum = "REVOKED"
	UpdateCertificateNewStatusEnumPendingTransfer   UpdateCertificateNewStatusEnum = "PENDING_TRANSFER"
	UpdateCertificateNewStatusEnumRegisterInactive  UpdateCertificateNewStatusEnum = "REGISTER_INACTIVE"
	UpdateCertificateNewStatusEnumPendingActivation UpdateCertificateNewStatusEnum = "PENDING_ACTIVATION"
)

func (e *UpdateCertificateNewStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "ACTIVE":
		fallthrough
	case "INACTIVE":
		fallthrough
	case "REVOKED":
		fallthrough
	case "PENDING_TRANSFER":
		fallthrough
	case "REGISTER_INACTIVE":
		fallthrough
	case "PENDING_ACTIVATION":
		*e = UpdateCertificateNewStatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateCertificateNewStatusEnum: %s", s)
	}
}

type UpdateCertificateQueryParams struct {
	// <p>The new status.</p> <p> <b>Note:</b> Setting the status to PENDING_TRANSFER or PENDING_ACTIVATION will result in an exception being thrown. PENDING_TRANSFER and PENDING_ACTIVATION are statuses used internally by IoT. They are not intended for developer use.</p> <p> <b>Note:</b> The status value REGISTER_INACTIVE is deprecated and should not be used.</p>
	NewStatus UpdateCertificateNewStatusEnum `queryParam:"style=form,explode=true,name=newStatus"`
}

type UpdateCertificateHeaders struct {
	XAmzAlgorithm     *string `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
}

type UpdateCertificateRequest struct {
	PathParams  UpdateCertificatePathParams
	QueryParams UpdateCertificateQueryParams
	Headers     UpdateCertificateHeaders
}

type UpdateCertificateResponse struct {
	// CertificateStateException
	CertificateStateException interface{}
	ContentType               string
	// InternalFailureException
	InternalFailureException interface{}
	// InvalidRequestException
	InvalidRequestException interface{}
	// ResourceNotFoundException
	ResourceNotFoundException interface{}
	// ServiceUnavailableException
	ServiceUnavailableException interface{}
	StatusCode                  int
	RawResponse                 *http.Response
	// ThrottlingException
	ThrottlingException interface{}
	// UnauthorizedException
	UnauthorizedException interface{}
}
