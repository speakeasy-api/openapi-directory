"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Any, Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ActionsCreateWorkflowDispatchRequestBody:
    
    ref: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ref') }})
    r"""The git reference for the workflow. The reference can be a branch or tag name."""  
    inputs: Optional[dict[str, str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('inputs'), 'exclude': lambda f: f is None }})
    r"""Input keys and values configured in the workflow file. The maximum number of properties is 10. Any default properties configured in the workflow file will be used when `inputs` are omitted."""  
    

@dataclasses.dataclass
class ActionsCreateWorkflowDispatchRequest:
    
    owner: str = dataclasses.field(metadata={'path_param': { 'field_name': 'owner', 'style': 'simple', 'explode': False }})  
    repo: str = dataclasses.field(metadata={'path_param': { 'field_name': 'repo', 'style': 'simple', 'explode': False }})  
    request_body: ActionsCreateWorkflowDispatchRequestBody = dataclasses.field(metadata={'request': { 'media_type': 'application/json' }})  
    workflow_id: Any = dataclasses.field(metadata={'path_param': { 'field_name': 'workflow_id', 'style': 'simple', 'explode': False }})
    r"""The ID of the workflow. You can also pass the workflow file name as a string."""  
    

@dataclasses.dataclass
class ActionsCreateWorkflowDispatchResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    