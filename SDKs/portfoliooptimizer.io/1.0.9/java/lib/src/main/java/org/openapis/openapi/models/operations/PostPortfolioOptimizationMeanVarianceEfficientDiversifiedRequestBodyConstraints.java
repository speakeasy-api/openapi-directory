/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

public class PostPortfolioOptimizationMeanVarianceEfficientDiversifiedRequestBodyConstraints {
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("assetsGroups")
    public Long[][] assetsGroups;

    public PostPortfolioOptimizationMeanVarianceEfficientDiversifiedRequestBodyConstraints withAssetsGroups(Long[][] assetsGroups) {
        this.assetsGroups = assetsGroups;
        return this;
    }
    
    /**
     * assetsGroupsMatrix[k][i] is the weight of the asset i in the group of assets k; exclusive with assetsGroups
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("assetsGroupsMatrix")
    public Double[][] assetsGroupsMatrix;

    public PostPortfolioOptimizationMeanVarianceEfficientDiversifiedRequestBodyConstraints withAssetsGroupsMatrix(Double[][] assetsGroupsMatrix) {
        this.assetsGroupsMatrix = assetsGroupsMatrix;
        return this;
    }
    
    /**
     * The relative tolerance over the mean-variance efficient portfolio return
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("deltaReturn")
    public Double deltaReturn;

    public PostPortfolioOptimizationMeanVarianceEfficientDiversifiedRequestBodyConstraints withDeltaReturn(Double deltaReturn) {
        this.deltaReturn = deltaReturn;
        return this;
    }
    
    /**
     * The relative tolerance over the mean-variance efficient portfolio volatility
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("deltaVolatility")
    public Double deltaVolatility;

    public PostPortfolioOptimizationMeanVarianceEfficientDiversifiedRequestBodyConstraints withDeltaVolatility(Double deltaVolatility) {
        this.deltaVolatility = deltaVolatility;
        return this;
    }
    
    /**
     * maximumAssetsGroupsWeights[k] is the maximum weight of the assets group k in the portfolio, in percentage between 0 and 1 if assetsGroups is provided
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("maximumAssetsGroupsWeights")
    public Double[] maximumAssetsGroupsWeights;

    public PostPortfolioOptimizationMeanVarianceEfficientDiversifiedRequestBodyConstraints withMaximumAssetsGroupsWeights(Double[] maximumAssetsGroupsWeights) {
        this.maximumAssetsGroupsWeights = maximumAssetsGroupsWeights;
        return this;
    }
    
    /**
     * maximumAssetsWeights[i] is the maximum weight of the asset i in the portfolio, in percentage
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("maximumAssetsWeights")
    public Double[] maximumAssetsWeights;

    public PostPortfolioOptimizationMeanVarianceEfficientDiversifiedRequestBodyConstraints withMaximumAssetsWeights(Double[] maximumAssetsWeights) {
        this.maximumAssetsWeights = maximumAssetsWeights;
        return this;
    }
    
    /**
     * The maximum portfolio exposure; must be higher than or equal to minimumPortfolioExposure
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("maximumPortfolioExposure")
    public Double maximumPortfolioExposure;

    public PostPortfolioOptimizationMeanVarianceEfficientDiversifiedRequestBodyConstraints withMaximumPortfolioExposure(Double maximumPortfolioExposure) {
        this.maximumPortfolioExposure = maximumPortfolioExposure;
        return this;
    }
    
    /**
     * minimumAssetsWeights[i] is the minimum weight of the asset i in the portfolio, in percentage
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("minimumAssetsWeights")
    public Double[] minimumAssetsWeights;

    public PostPortfolioOptimizationMeanVarianceEfficientDiversifiedRequestBodyConstraints withMinimumAssetsWeights(Double[] minimumAssetsWeights) {
        this.minimumAssetsWeights = minimumAssetsWeights;
        return this;
    }
    
    /**
     * The minimum portfolio exposure; must be lower than or equal to maximumPortfolioExposure
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("minimumPortfolioExposure")
    public Double minimumPortfolioExposure;

    public PostPortfolioOptimizationMeanVarianceEfficientDiversifiedRequestBodyConstraints withMinimumPortfolioExposure(Double minimumPortfolioExposure) {
        this.minimumPortfolioExposure = minimumPortfolioExposure;
        return this;
    }
    
    /**
     * The portfolio return; exclusive with portfolioVolatility and riskTolerance
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("portfolioReturn")
    public Double portfolioReturn;

    public PostPortfolioOptimizationMeanVarianceEfficientDiversifiedRequestBodyConstraints withPortfolioReturn(Double portfolioReturn) {
        this.portfolioReturn = portfolioReturn;
        return this;
    }
    
    /**
     * The portfolio volatility; exclusive with portfolioReturn and riskTolerance
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("portfolioVolatility")
    public Double portfolioVolatility;

    public PostPortfolioOptimizationMeanVarianceEfficientDiversifiedRequestBodyConstraints withPortfolioVolatility(Double portfolioVolatility) {
        this.portfolioVolatility = portfolioVolatility;
        return this;
    }
    
    /**
     * The portfolio risk tolerance; exclusive with portfolioReturn and portfolioVolatility
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("riskTolerance")
    public Double riskTolerance;

    public PostPortfolioOptimizationMeanVarianceEfficientDiversifiedRequestBodyConstraints withRiskTolerance(Double riskTolerance) {
        this.riskTolerance = riskTolerance;
        return this;
    }
    
    public PostPortfolioOptimizationMeanVarianceEfficientDiversifiedRequestBodyConstraints(){}
}
