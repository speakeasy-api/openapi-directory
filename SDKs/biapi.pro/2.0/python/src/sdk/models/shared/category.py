"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Category:
    r"""Successful POST on Category resource"""
    
    color: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('color') }})
    r"""Color of the category"""  
    id: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id') }})
    r"""ID of the category"""  
    id_parent_category: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id_parent_category') }})
    r"""ID of the parent category. If this is a parent category, it will be equal to its own ID"""  
    id_parent_category_in_menu: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id_parent_category_in_menu') }})
    r"""ID of the parent category to be displayed"""  
    name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name') }})
    r"""Name of the category"""  
    refundable: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('refundable') }})
    r"""This category accepts opposite sign of transactions"""  
    id_logo: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id_logo'), 'exclude': lambda f: f is None }})
    r"""ID of the logo"""  
    id_user: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id_user'), 'exclude': lambda f: f is None }})
    r"""If not null, this category is specific to a user"""  
    income: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('income'), 'exclude': lambda f: f is None }})
    r"""Is an income category. If null, this is both an income and an expense category"""  
    name_displayed: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name_displayed'), 'exclude': lambda f: f is None }})
    r"""Displayed name, with HTML tags"""  
    