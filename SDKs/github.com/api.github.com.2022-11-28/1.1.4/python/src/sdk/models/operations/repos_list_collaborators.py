"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import basic_error as shared_basic_error
from ..shared import collaborator as shared_collaborator
from enum import Enum
from typing import Optional

class ReposListCollaboratorsAffiliationEnum(str, Enum):
    r"""Filter collaborators returned by their affiliation. `outside` means all outside collaborators of an organization-owned repository. `direct` means all collaborators with permissions to an organization-owned repository, regardless of organization membership status. `all` means all collaborators the authenticated user can see."""
    OUTSIDE = 'outside'
    DIRECT = 'direct'
    ALL = 'all'

class ReposListCollaboratorsPermissionEnum(str, Enum):
    r"""Filter collaborators by the permissions they have on the repository. If not specified, all collaborators will be returned."""
    PULL = 'pull'
    TRIAGE = 'triage'
    PUSH = 'push'
    MAINTAIN = 'maintain'
    ADMIN = 'admin'


@dataclasses.dataclass
class ReposListCollaboratorsRequest:
    
    owner: str = dataclasses.field(metadata={'path_param': { 'field_name': 'owner', 'style': 'simple', 'explode': False }})
    r"""The account owner of the repository. The name is not case sensitive."""  
    repo: str = dataclasses.field(metadata={'path_param': { 'field_name': 'repo', 'style': 'simple', 'explode': False }})
    r"""The name of the repository. The name is not case sensitive."""  
    affiliation: Optional[ReposListCollaboratorsAffiliationEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'affiliation', 'style': 'form', 'explode': True }})
    r"""Filter collaborators returned by their affiliation. `outside` means all outside collaborators of an organization-owned repository. `direct` means all collaborators with permissions to an organization-owned repository, regardless of organization membership status. `all` means all collaborators the authenticated user can see."""  
    page: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'page', 'style': 'form', 'explode': True }})
    r"""Page number of the results to fetch."""  
    per_page: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'per_page', 'style': 'form', 'explode': True }})
    r"""The number of results per page (max 100)."""  
    permission: Optional[ReposListCollaboratorsPermissionEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'permission', 'style': 'form', 'explode': True }})
    r"""Filter collaborators by the permissions they have on the repository. If not specified, all collaborators will be returned."""  
    

@dataclasses.dataclass
class ReposListCollaboratorsResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    basic_error: Optional[shared_basic_error.BasicError] = dataclasses.field(default=None)
    r"""Resource not found"""  
    collaborators: Optional[list[shared_collaborator.Collaborator]] = dataclasses.field(default=None)
    r"""Response"""  
    headers: Optional[dict[str, list[str]]] = dataclasses.field(default=None)  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    