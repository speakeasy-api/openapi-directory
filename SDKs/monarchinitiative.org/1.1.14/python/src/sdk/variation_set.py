"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class VariationSet:
    r"""Operations related to sets of variants"""
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def delete_variant_set_item(self, request: operations.DeleteVariantSetItemRequest) -> operations.DeleteVariantSetItemResponse:
        r"""Deletes variant set"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteVariantSetItemRequest, base_url, '/variation/set/{id}', request)
        
        
        client = self._client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteVariantSetItemResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def get_variant_analyze(self, request: operations.GetVariantAnalyzeRequest) -> operations.GetVariantAnalyzeResponse:
        r"""Returns list of matches"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetVariantAnalyzeRequest, base_url, '/variation/set/analyze/{id}', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetVariantAnalyzeResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.Association]])
                res.associations = out

        return res

    def get_variant_set_item(self, request: operations.GetVariantSetItemRequest) -> operations.GetVariantSetItemResponse:
        r"""Returns a variant set"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetVariantSetItemRequest, base_url, '/variation/set/{id}', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetVariantSetItemResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.VariantSet])
                res.variant_set = out
        elif http_res.status_code == 404:
            pass

        return res

    def get_variant_sets_archive_collection(self, request: operations.GetVariantSetsArchiveCollectionRequest) -> operations.GetVariantSetsArchiveCollectionResponse:
        r"""Returns list of variant sets from a specified time period"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetVariantSetsArchiveCollectionRequest, base_url, '/variation/set/archive/{year}/{month}/{day}', request)
        
        query_params = utils.get_query_params(operations.GetVariantSetsArchiveCollectionRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetVariantSetsArchiveCollectionResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.PageOfVariantSets])
                res.page_of_variant_sets = out

        return res

    def get_variant_sets_collection(self, request: operations.GetVariantSetsCollectionRequest) -> operations.GetVariantSetsCollectionResponse:
        r"""Returns list of variant sets"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/variation/set/'
        
        query_params = utils.get_query_params(operations.GetVariantSetsCollectionRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetVariantSetsCollectionResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.PageOfVariantSets])
                res.page_of_variant_sets = out

        return res

    def post_variant_sets_collection(self, request: shared.VariantSet) -> operations.PostVariantSetsCollectionResponse:
        r"""Creates a new variant set"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/variation/set/'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostVariantSetsCollectionResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def put_variant_set_item(self, request: operations.PutVariantSetItemRequest) -> operations.PutVariantSetItemResponse:
        r"""Updates a variant set"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PutVariantSetItemRequest, base_url, '/variation/set/{id}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "variant_set", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PutVariantSetItemResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    