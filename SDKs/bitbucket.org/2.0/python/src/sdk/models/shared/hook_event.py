"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class HookEventEventEnum(str, Enum):
    r"""The event identifier."""
    PULLREQUEST_CHANGES_REQUEST_CREATED = 'pullrequest:changes_request_created'
    PULLREQUEST_REJECTED = 'pullrequest:rejected'
    ISSUE_UPDATED = 'issue:updated'
    PULLREQUEST_UNAPPROVED = 'pullrequest:unapproved'
    PULLREQUEST_COMMENT_DELETED = 'pullrequest:comment_deleted'
    REPO_COMMIT_STATUS_UPDATED = 'repo:commit_status_updated'
    PULLREQUEST_CHANGES_REQUEST_REMOVED = 'pullrequest:changes_request_removed'
    PULLREQUEST_COMMENT_CREATED = 'pullrequest:comment_created'
    REPO_TRANSFER = 'repo:transfer'
    PULLREQUEST_FULFILLED = 'pullrequest:fulfilled'
    REPO_COMMIT_COMMENT_CREATED = 'repo:commit_comment_created'
    ISSUE_COMMENT_CREATED = 'issue:comment_created'
    PROJECT_UPDATED = 'project:updated'
    PULLREQUEST_COMMENT_UPDATED = 'pullrequest:comment_updated'
    REPO_CREATED = 'repo:created'
    REPO_FORK = 'repo:fork'
    REPO_UPDATED = 'repo:updated'
    REPO_PUSH = 'repo:push'
    PULLREQUEST_APPROVED = 'pullrequest:approved'
    REPO_DELETED = 'repo:deleted'
    REPO_COMMIT_STATUS_CREATED = 'repo:commit_status_created'
    REPO_IMPORTED = 'repo:imported'
    ISSUE_CREATED = 'issue:created'
    PULLREQUEST_UPDATED = 'pullrequest:updated'
    PULLREQUEST_CREATED = 'pullrequest:created'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class HookEvent:
    r"""An event, associated with a resource or subject type."""
    
    category: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('category'), 'exclude': lambda f: f is None }})
    r"""The category this event belongs to."""  
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description'), 'exclude': lambda f: f is None }})
    r"""More detailed description of the webhook event type."""  
    event: Optional[HookEventEventEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('event'), 'exclude': lambda f: f is None }})
    r"""The event identifier."""  
    label: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('label'), 'exclude': lambda f: f is None }})
    r"""Summary of the webhook event type."""  
    