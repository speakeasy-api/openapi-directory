"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from ..shared import channelmember as shared_channelmember
from ..shared import pendingmessage as shared_pendingmessage
from ..shared import read as shared_read
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from marshmallow import fields
from sdk import utils
from typing import Any, Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ChannelStateResponseFields:
    
    members: list[shared_channelmember.ChannelMember] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('members') }})
    r"""List of channel members"""  
    messages: list[dict[str, Any]] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('messages') }})
    r"""List of channel messages"""  
    pinned_messages: list[dict[str, Any]] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('pinned_messages') }})
    r"""List of pinned messages in the channel"""  
    channel: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('channel'), 'exclude': lambda f: f is None }})
    r"""Represents channel in chat"""  
    hidden: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('hidden'), 'exclude': lambda f: f is None }})
    r"""Whether this channel is hidden or not"""  
    hide_messages_before: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('hide_messages_before'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""Messages before this date are hidden from the user"""  
    membership: Optional[shared_channelmember.ChannelMember] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('membership'), 'exclude': lambda f: f is None }})  
    pending_messages: Optional[list[shared_pendingmessage.PendingMessage]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('pending_messages'), 'exclude': lambda f: f is None }})
    r"""Pending messages that this user has sent"""  
    read: Optional[list[shared_read.Read]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('read'), 'exclude': lambda f: f is None }})
    r"""List of read states"""  
    watcher_count: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('watcher_count'), 'exclude': lambda f: f is None }})
    r"""Number of channel watchers"""  
    watchers: Optional[list[dict[str, Any]]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('watchers'), 'exclude': lambda f: f is None }})
    r"""List of user who is watching the channel"""  
    