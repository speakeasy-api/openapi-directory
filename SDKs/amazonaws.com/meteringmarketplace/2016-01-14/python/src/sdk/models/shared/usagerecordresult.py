"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import usagerecord as shared_usagerecord
from ..shared import usagerecordresultstatus_enum as shared_usagerecordresultstatus_enum
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UsageRecordResult:
    r"""A <code>UsageRecordResult</code> indicates the status of a given <code>UsageRecord</code> processed by <code>BatchMeterUsage</code>."""
    
    metering_record_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('MeteringRecordId'), 'exclude': lambda f: f is None }})  
    status: Optional[shared_usagerecordresultstatus_enum.UsageRecordResultStatusEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Status'), 'exclude': lambda f: f is None }})  
    usage_record: Optional[shared_usagerecord.UsageRecord] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('UsageRecord'), 'exclude': lambda f: f is None }})  
    