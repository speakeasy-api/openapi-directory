// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// DatabaseDumpDatabaseTypeEnum - The type of the database.
type DatabaseDumpDatabaseTypeEnum string

const (
	DatabaseDumpDatabaseTypeEnumDatabaseTypeUnspecified DatabaseDumpDatabaseTypeEnum = "DATABASE_TYPE_UNSPECIFIED"
	DatabaseDumpDatabaseTypeEnumMysql                   DatabaseDumpDatabaseTypeEnum = "MYSQL"
)

func (e DatabaseDumpDatabaseTypeEnum) ToPointer() *DatabaseDumpDatabaseTypeEnum {
	return &e
}

func (e *DatabaseDumpDatabaseTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "DATABASE_TYPE_UNSPECIFIED":
		fallthrough
	case "MYSQL":
		*e = DatabaseDumpDatabaseTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DatabaseDumpDatabaseTypeEnum: %v", v)
	}
}

// DatabaseDumpTypeEnum - Optional. The type of the database dump. If unspecified, defaults to MYSQL.
type DatabaseDumpTypeEnum string

const (
	DatabaseDumpTypeEnumTypeUnspecified DatabaseDumpTypeEnum = "TYPE_UNSPECIFIED"
	DatabaseDumpTypeEnumMysql           DatabaseDumpTypeEnum = "MYSQL"
	DatabaseDumpTypeEnumAvro            DatabaseDumpTypeEnum = "AVRO"
)

func (e DatabaseDumpTypeEnum) ToPointer() *DatabaseDumpTypeEnum {
	return &e
}

func (e *DatabaseDumpTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "TYPE_UNSPECIFIED":
		fallthrough
	case "MYSQL":
		fallthrough
	case "AVRO":
		*e = DatabaseDumpTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DatabaseDumpTypeEnum: %v", v)
	}
}

// DatabaseDump - A specification of the location of and metadata about a database dump from a relational database management system.
type DatabaseDump struct {
	// The type of the database.
	DatabaseType *DatabaseDumpDatabaseTypeEnum `json:"databaseType,omitempty"`
	// A Cloud Storage object or folder URI that specifies the source from which to import metadata. It must begin with gs://.
	GcsURI *string `json:"gcsUri,omitempty"`
	// The name of the source database.
	SourceDatabase *string `json:"sourceDatabase,omitempty"`
	// Optional. The type of the database dump. If unspecified, defaults to MYSQL.
	Type *DatabaseDumpTypeEnum `json:"type,omitempty"`
}
