/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import {
  objectToClass,
  SpeakeasyBase,
  SpeakeasyMetadata,
} from "../../../internal/utils";
import { DateInterval } from "./dateinterval";
import { Group } from "./group";
import { MetricValue } from "./metricvalue";
import { Expose, Transform, Type } from "class-transformer";

/**
 * The result that's associated with a time period.
 */
export class ResultByTime extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "Estimated" })
  estimated?: boolean;

  @SpeakeasyMetadata({ elemType: Group })
  @Expose({ name: "Groups" })
  @Type(() => Group)
  groups?: Group[];

  @SpeakeasyMetadata()
  @Expose({ name: "TimePeriod" })
  @Type(() => DateInterval)
  timePeriod?: DateInterval;

  @SpeakeasyMetadata({ elemType: MetricValue })
  @Expose({ name: "Total" })
  @Transform(
    ({ value }) => {
      const obj: Record<string, MetricValue> = {};
      for (const key in value) {
        obj[key] = objectToClass(value[key], MetricValue);
      }
      return obj;
    },
    { toClassOnly: true }
  )
  total?: Record<string, MetricValue>;
}
