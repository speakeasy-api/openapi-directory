"use strict";
/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CVSSv3 = exports.CVSSv3UserInteractionEnum = exports.CVSSv3ScopeEnum = exports.CVSSv3PrivilegesRequiredEnum = exports.CVSSv3IntegrityImpactEnum = exports.CVSSv3ConfidentialityImpactEnum = exports.CVSSv3AvailabilityImpactEnum = exports.CVSSv3AttackVectorEnum = exports.CVSSv3AttackComplexityEnum = void 0;
var utils_1 = require("../../../internal/utils");
var class_transformer_1 = require("class-transformer");
/**
 * This metric describes the conditions beyond the attacker's control that must exist in order to exploit the vulnerability.
 */
var CVSSv3AttackComplexityEnum;
(function (CVSSv3AttackComplexityEnum) {
    CVSSv3AttackComplexityEnum["AttackComplexityUnspecified"] = "ATTACK_COMPLEXITY_UNSPECIFIED";
    CVSSv3AttackComplexityEnum["AttackComplexityLow"] = "ATTACK_COMPLEXITY_LOW";
    CVSSv3AttackComplexityEnum["AttackComplexityHigh"] = "ATTACK_COMPLEXITY_HIGH";
})(CVSSv3AttackComplexityEnum = exports.CVSSv3AttackComplexityEnum || (exports.CVSSv3AttackComplexityEnum = {}));
/**
 * This metric reflects the context by which vulnerability exploitation is possible.
 */
var CVSSv3AttackVectorEnum;
(function (CVSSv3AttackVectorEnum) {
    CVSSv3AttackVectorEnum["AttackVectorUnspecified"] = "ATTACK_VECTOR_UNSPECIFIED";
    CVSSv3AttackVectorEnum["AttackVectorNetwork"] = "ATTACK_VECTOR_NETWORK";
    CVSSv3AttackVectorEnum["AttackVectorAdjacent"] = "ATTACK_VECTOR_ADJACENT";
    CVSSv3AttackVectorEnum["AttackVectorLocal"] = "ATTACK_VECTOR_LOCAL";
    CVSSv3AttackVectorEnum["AttackVectorPhysical"] = "ATTACK_VECTOR_PHYSICAL";
})(CVSSv3AttackVectorEnum = exports.CVSSv3AttackVectorEnum || (exports.CVSSv3AttackVectorEnum = {}));
/**
 * This metric measures the impact to the availability of the impacted component resulting from a successfully exploited vulnerability.
 */
var CVSSv3AvailabilityImpactEnum;
(function (CVSSv3AvailabilityImpactEnum) {
    CVSSv3AvailabilityImpactEnum["ImpactUnspecified"] = "IMPACT_UNSPECIFIED";
    CVSSv3AvailabilityImpactEnum["ImpactHigh"] = "IMPACT_HIGH";
    CVSSv3AvailabilityImpactEnum["ImpactLow"] = "IMPACT_LOW";
    CVSSv3AvailabilityImpactEnum["ImpactNone"] = "IMPACT_NONE";
})(CVSSv3AvailabilityImpactEnum = exports.CVSSv3AvailabilityImpactEnum || (exports.CVSSv3AvailabilityImpactEnum = {}));
/**
 * This metric measures the impact to the confidentiality of the information resources managed by a software component due to a successfully exploited vulnerability.
 */
var CVSSv3ConfidentialityImpactEnum;
(function (CVSSv3ConfidentialityImpactEnum) {
    CVSSv3ConfidentialityImpactEnum["ImpactUnspecified"] = "IMPACT_UNSPECIFIED";
    CVSSv3ConfidentialityImpactEnum["ImpactHigh"] = "IMPACT_HIGH";
    CVSSv3ConfidentialityImpactEnum["ImpactLow"] = "IMPACT_LOW";
    CVSSv3ConfidentialityImpactEnum["ImpactNone"] = "IMPACT_NONE";
})(CVSSv3ConfidentialityImpactEnum = exports.CVSSv3ConfidentialityImpactEnum || (exports.CVSSv3ConfidentialityImpactEnum = {}));
/**
 * This metric measures the impact to integrity of a successfully exploited vulnerability.
 */
var CVSSv3IntegrityImpactEnum;
(function (CVSSv3IntegrityImpactEnum) {
    CVSSv3IntegrityImpactEnum["ImpactUnspecified"] = "IMPACT_UNSPECIFIED";
    CVSSv3IntegrityImpactEnum["ImpactHigh"] = "IMPACT_HIGH";
    CVSSv3IntegrityImpactEnum["ImpactLow"] = "IMPACT_LOW";
    CVSSv3IntegrityImpactEnum["ImpactNone"] = "IMPACT_NONE";
})(CVSSv3IntegrityImpactEnum = exports.CVSSv3IntegrityImpactEnum || (exports.CVSSv3IntegrityImpactEnum = {}));
/**
 * This metric describes the level of privileges an attacker must possess before successfully exploiting the vulnerability.
 */
var CVSSv3PrivilegesRequiredEnum;
(function (CVSSv3PrivilegesRequiredEnum) {
    CVSSv3PrivilegesRequiredEnum["PrivilegesRequiredUnspecified"] = "PRIVILEGES_REQUIRED_UNSPECIFIED";
    CVSSv3PrivilegesRequiredEnum["PrivilegesRequiredNone"] = "PRIVILEGES_REQUIRED_NONE";
    CVSSv3PrivilegesRequiredEnum["PrivilegesRequiredLow"] = "PRIVILEGES_REQUIRED_LOW";
    CVSSv3PrivilegesRequiredEnum["PrivilegesRequiredHigh"] = "PRIVILEGES_REQUIRED_HIGH";
})(CVSSv3PrivilegesRequiredEnum = exports.CVSSv3PrivilegesRequiredEnum || (exports.CVSSv3PrivilegesRequiredEnum = {}));
/**
 * The Scope metric captures whether a vulnerability in one vulnerable component impacts resources in components beyond its security scope.
 */
var CVSSv3ScopeEnum;
(function (CVSSv3ScopeEnum) {
    CVSSv3ScopeEnum["ScopeUnspecified"] = "SCOPE_UNSPECIFIED";
    CVSSv3ScopeEnum["ScopeUnchanged"] = "SCOPE_UNCHANGED";
    CVSSv3ScopeEnum["ScopeChanged"] = "SCOPE_CHANGED";
})(CVSSv3ScopeEnum = exports.CVSSv3ScopeEnum || (exports.CVSSv3ScopeEnum = {}));
/**
 * This metric captures the requirement for a human user, other than the attacker, to participate in the successful compromise of the vulnerable component.
 */
var CVSSv3UserInteractionEnum;
(function (CVSSv3UserInteractionEnum) {
    CVSSv3UserInteractionEnum["UserInteractionUnspecified"] = "USER_INTERACTION_UNSPECIFIED";
    CVSSv3UserInteractionEnum["UserInteractionNone"] = "USER_INTERACTION_NONE";
    CVSSv3UserInteractionEnum["UserInteractionRequired"] = "USER_INTERACTION_REQUIRED";
})(CVSSv3UserInteractionEnum = exports.CVSSv3UserInteractionEnum || (exports.CVSSv3UserInteractionEnum = {}));
/**
 * Common Vulnerability Scoring System version 3. For details, see https://www.first.org/cvss/specification-document
 */
var CVSSv3 = /** @class */ (function (_super) {
    __extends(CVSSv3, _super);
    function CVSSv3() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "attackComplexity" }),
        __metadata("design:type", String)
    ], CVSSv3.prototype, "attackComplexity", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "attackVector" }),
        __metadata("design:type", String)
    ], CVSSv3.prototype, "attackVector", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "availabilityImpact" }),
        __metadata("design:type", String)
    ], CVSSv3.prototype, "availabilityImpact", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "baseScore" }),
        __metadata("design:type", Number)
    ], CVSSv3.prototype, "baseScore", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "confidentialityImpact" }),
        __metadata("design:type", String)
    ], CVSSv3.prototype, "confidentialityImpact", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "exploitabilityScore" }),
        __metadata("design:type", Number)
    ], CVSSv3.prototype, "exploitabilityScore", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "impactScore" }),
        __metadata("design:type", Number)
    ], CVSSv3.prototype, "impactScore", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "integrityImpact" }),
        __metadata("design:type", String)
    ], CVSSv3.prototype, "integrityImpact", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "privilegesRequired" }),
        __metadata("design:type", String)
    ], CVSSv3.prototype, "privilegesRequired", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "scope" }),
        __metadata("design:type", String)
    ], CVSSv3.prototype, "scope", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "userInteraction" }),
        __metadata("design:type", String)
    ], CVSSv3.prototype, "userInteraction", void 0);
    return CVSSv3;
}(utils_1.SpeakeasyBase));
exports.CVSSv3 = CVSSv3;
