// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

type GetServerTypesIDPathParams struct {
	// ID of Server Type
	ID int64 `pathParam:"style=simple,explode=false,name=id"`
}

type GetServerTypesIDRequest struct {
	PathParams GetServerTypesIDPathParams
}

// GetServerTypesID200ApplicationJSONServerTypeCPUTypeEnum - Type of cpu
type GetServerTypesID200ApplicationJSONServerTypeCPUTypeEnum string

const (
	GetServerTypesID200ApplicationJSONServerTypeCPUTypeEnumShared    GetServerTypesID200ApplicationJSONServerTypeCPUTypeEnum = "shared"
	GetServerTypesID200ApplicationJSONServerTypeCPUTypeEnumDedicated GetServerTypesID200ApplicationJSONServerTypeCPUTypeEnum = "dedicated"
)

func (e *GetServerTypesID200ApplicationJSONServerTypeCPUTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "shared":
		fallthrough
	case "dedicated":
		*e = GetServerTypesID200ApplicationJSONServerTypeCPUTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetServerTypesID200ApplicationJSONServerTypeCPUTypeEnum: %s", s)
	}
}

// GetServerTypesID200ApplicationJSONServerTypePricesPriceHourly - Hourly costs for a Server type in this Location
type GetServerTypesID200ApplicationJSONServerTypePricesPriceHourly struct {
	// Price with VAT added
	Gross string `json:"gross"`
	// Price without VAT
	Net string `json:"net"`
}

// GetServerTypesID200ApplicationJSONServerTypePricesPriceMonthly - Monthly costs for a Server type in this Location
type GetServerTypesID200ApplicationJSONServerTypePricesPriceMonthly struct {
	// Price with VAT added
	Gross string `json:"gross"`
	// Price without VAT
	Net string `json:"net"`
}

type GetServerTypesID200ApplicationJSONServerTypePrices struct {
	// Name of the Location the price is for
	Location string `json:"location"`
	// Hourly costs for a Server type in this Location
	PriceHourly GetServerTypesID200ApplicationJSONServerTypePricesPriceHourly `json:"price_hourly"`
	// Monthly costs for a Server type in this Location
	PriceMonthly GetServerTypesID200ApplicationJSONServerTypePricesPriceMonthly `json:"price_monthly"`
}

// GetServerTypesID200ApplicationJSONServerTypeStorageTypeEnum - Type of Server boot drive. Local has higher speed. Network has better availability.
type GetServerTypesID200ApplicationJSONServerTypeStorageTypeEnum string

const (
	GetServerTypesID200ApplicationJSONServerTypeStorageTypeEnumLocal   GetServerTypesID200ApplicationJSONServerTypeStorageTypeEnum = "local"
	GetServerTypesID200ApplicationJSONServerTypeStorageTypeEnumNetwork GetServerTypesID200ApplicationJSONServerTypeStorageTypeEnum = "network"
)

func (e *GetServerTypesID200ApplicationJSONServerTypeStorageTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "local":
		fallthrough
	case "network":
		*e = GetServerTypesID200ApplicationJSONServerTypeStorageTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetServerTypesID200ApplicationJSONServerTypeStorageTypeEnum: %s", s)
	}
}

type GetServerTypesID200ApplicationJSONServerType struct {
	// Number of cpu cores a Server of this type will have
	Cores float64 `json:"cores"`
	// Type of cpu
	CPUType GetServerTypesID200ApplicationJSONServerTypeCPUTypeEnum `json:"cpu_type"`
	// True if Server type is deprecated
	Deprecated bool `json:"deprecated"`
	// Description of the Server type
	Description string `json:"description"`
	// Disk size a Server of this type will have in GB
	Disk float64 `json:"disk"`
	// ID of the Server type
	ID float64 `json:"id"`
	// Memory a Server of this type will have in GB
	Memory float64 `json:"memory"`
	// Unique identifier of the Server type
	Name string `json:"name"`
	// Prices in different Locations
	Prices []GetServerTypesID200ApplicationJSONServerTypePrices `json:"prices"`
	// Type of Server boot drive. Local has higher speed. Network has better availability.
	StorageType GetServerTypesID200ApplicationJSONServerTypeStorageTypeEnum `json:"storage_type"`
}

// GetServerTypesID200ApplicationJSON - The `server_type` key in the reply contains a Server type object with this structure
type GetServerTypesID200ApplicationJSON struct {
	ServerType GetServerTypesID200ApplicationJSONServerType `json:"server_type"`
}

type GetServerTypesIDResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// The `server_type` key in the reply contains a Server type object with this structure
	GetServerTypesID200ApplicationJSONObject *GetServerTypesID200ApplicationJSON
}
