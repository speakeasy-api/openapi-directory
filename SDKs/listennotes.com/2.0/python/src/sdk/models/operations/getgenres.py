"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import getgenresresponse as shared_getgenresresponse
from enum import Enum
from typing import Optional

class GetGenresTopLevelOnlyEnum(str, Enum):
    r"""Just show top level genres? If 1, yes, just show top level genres. If 0, no, show all genres."""
    ZERO = '0'
    ONE = '1'


@dataclasses.dataclass
class GetGenresRequest:
    
    x_listen_api_key: str = dataclasses.field(metadata={'header': { 'field_name': 'X-ListenAPI-Key', 'style': 'simple', 'explode': False }})
    r"""Get API Key on listennotes.com/api"""  
    top_level_only: Optional[GetGenresTopLevelOnlyEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'top_level_only', 'style': 'form', 'explode': True }})
    r"""Just show top level genres? If 1, yes, just show top level genres. If 0, no, show all genres."""  
    

@dataclasses.dataclass
class GetGenresResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    get_genres_response: Optional[shared_getgenresresponse.GetGenresResponse] = dataclasses.field(default=None)
    r"""OK"""  
    headers: Optional[dict[str, list[str]]] = dataclasses.field(default=None)  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    