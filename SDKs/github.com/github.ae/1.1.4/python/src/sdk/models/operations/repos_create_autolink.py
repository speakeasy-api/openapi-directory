"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import autolink as shared_autolink
from ..shared import validation_error as shared_validation_error
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ReposCreateAutolinkRequestBody:
    
    key_prefix: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('key_prefix') }})
    r"""The prefix appended by a number will generate a link any time it is found in an issue, pull request, or commit."""  
    url_template: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('url_template') }})
    r"""The URL must contain `<num>` for the reference number."""  
    is_alphanumeric: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('is_alphanumeric'), 'exclude': lambda f: f is None }})
    r"""Whether this autolink reference matches alphanumeric characters. If true, the `<num>` parameter of the `url_template` matches alphanumeric characters `A-Z` (case insensitive), `0-9`, and `-`. If false, this autolink reference only matches numeric characters."""  
    

@dataclasses.dataclass
class ReposCreateAutolinkRequest:
    
    owner: str = dataclasses.field(metadata={'path_param': { 'field_name': 'owner', 'style': 'simple', 'explode': False }})
    r"""The account owner of the repository. The name is not case sensitive."""  
    repo: str = dataclasses.field(metadata={'path_param': { 'field_name': 'repo', 'style': 'simple', 'explode': False }})
    r"""The name of the repository. The name is not case sensitive."""  
    request_body: ReposCreateAutolinkRequestBody = dataclasses.field(metadata={'request': { 'media_type': 'application/json' }})  
    

@dataclasses.dataclass
class ReposCreateAutolinkResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    autolink: Optional[shared_autolink.Autolink] = dataclasses.field(default=None)
    r"""response"""  
    headers: Optional[dict[str, list[str]]] = dataclasses.field(default=None)  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    validation_error: Optional[shared_validation_error.ValidationError] = dataclasses.field(default=None)
    r"""Validation failed, or the endpoint has been spammed."""  
    