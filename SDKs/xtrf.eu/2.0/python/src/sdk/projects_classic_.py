"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class ProjectsClassic:
    r"""To change the description use /examples/TagsDescriptions.json"""
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def create_language_combination(self, request: operations.CreateLanguageCombinationRequest) -> operations.CreateLanguageCombinationResponse:
        r"""Creates a new language combination for a given project without creating a task.
        Creates a new language combination for a given project without creating a task.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.CreateLanguageCombinationRequest, base_url, '/projects/{projectId}/languageCombinations', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "common_language_combination_dto", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateLanguageCombinationResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if True:
            if utils.match_content_type(content_type, 'application/vnd.xtrf-v1+json;charset=UTF-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.CommonLanguageCombinationDTO])
                res.common_language_combination_dto = out

        return res

    def create_payable(self, request: operations.CreatePayableRequest) -> operations.CreatePayableResponse:
        r"""Adds a payable to a project.
        Adds a payable to a project.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.CreatePayableRequest, base_url, '/projects/{projectId}/finance/payables', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "payable_create_dto", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreatePayableResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if True:
            if utils.match_content_type(content_type, 'application/json;charset=UTF-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.PayableDTO])
                res.payable_dto = out

        return res

    def create_receivable(self, request: operations.CreateReceivableRequest) -> operations.CreateReceivableResponse:
        r"""Adds a receivable to a project.
        Adds a receivable to a project.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.CreateReceivableRequest, base_url, '/projects/{projectId}/finance/receivables', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "receivable_create_dto", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateReceivableResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if True:
            if utils.match_content_type(content_type, 'application/json;charset=UTF-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ReceivableDTO])
                res.receivable_dto = out

        return res

    def create_task(self, request: operations.CreateTaskRequest) -> operations.CreateTaskResponse:
        r"""Creates a new task for a given project.
        Creates a new task for a given project.<p>
          Required fields:
          <ul>
            <li>languageCombination</li>
            <li>specializationId</li>
            <li>workflowId</li>
          </ul>
        </p>
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.CreateTaskRequest, base_url, '/projects/{projectId}/tasks', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "task_create_dto", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateTaskResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if True:
            if utils.match_content_type(content_type, 'application/vnd.xtrf-v1+json;charset=UTF-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.TaskDTO])
                res.task_dto = out

        return res

    def create_5(self, request: shared.ClassicProjectCreateDTO) -> operations.Create5Response:
        r"""Creates a new Classic Project.
        Creates a new Classic Project. If the specified service ID refers to Smart Project, 400 Bad Request is returned instead.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/projects'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.Create5Response(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if True:
            if utils.match_content_type(content_type, 'application/vnd.xtrf-v1+json;charset=UTF-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ProjectDTOv1])
                res.project_dt_ov1 = out

        return res

    def delete_payable(self, request: operations.DeletePayableRequest) -> operations.DeletePayableResponse:
        r"""Deletes a payable.
        Deletes a payable.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeletePayableRequest, base_url, '/projects/{projectId}/finance/payables/{payableId}', request)
        
        
        client = self._security_client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeletePayableResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def delete_receivable(self, request: operations.DeleteReceivableRequest) -> operations.DeleteReceivableResponse:
        r"""Deletes a receivable.
        Deletes a receivable.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteReceivableRequest, base_url, '/projects/{projectId}/finance/receivables/{receivableId}', request)
        
        
        client = self._security_client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteReceivableResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def delete_12(self, request: operations.Delete12Request) -> operations.Delete12Response:
        r"""Removes a project.
        Removes a project.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.Delete12Request, base_url, '/projects/{projectId}', request)
        
        
        client = self._security_client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.Delete12Response(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def get_all_ids_6(self, request: operations.GetAllIds6Request) -> operations.GetAllIds6Response:
        r"""Returns projects' internal identifiers.
        Returns projects' internal identifiers.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/projects/ids'
        
        query_params = utils.get_query_params(operations.GetAllIds6Request, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetAllIds6Response(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if True:
            if utils.match_content_type(content_type, 'application/vnd.xtrf-v1+json;charset=UTF-8'):
                out = utils.unmarshal_json(http_res.text, Optional[list[int]])
                res.get_all_ids_6_default_application_vnd_xtrf_v1_plus_json_int32_integers = out

        return res

    def get_by_id_7(self, request: operations.GetByID7Request) -> operations.GetByID7Response:
        r"""Returns project details.
        Returns project details. If the specified project ID refers to Smart Project, 400 Bad Request is returned instead.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetByID7Request, base_url, '/projects/{projectId}', request)
        
        query_params = utils.get_query_params(operations.GetByID7Request, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetByID7Response(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if True:
            if utils.match_content_type(content_type, 'application/vnd.xtrf-v1+json;charset=UTF-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ProjectDTOv1])
                res.project_dt_ov1 = out

        return res

    def get_contacts(self, request: operations.GetContactsRequest) -> operations.GetContactsResponse:
        r"""Returns contacts of a given project.
        Returns contacts of a given project.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetContactsRequest, base_url, '/projects/{projectId}/contacts', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetContactsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if True:
            if utils.match_content_type(content_type, 'application/vnd.xtrf-v1+json;charset=UTF-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ContactsDTO])
                res.contacts_dto = out

        return res

    def get_custom_fields_5(self, request: operations.GetCustomFields5Request) -> operations.GetCustomFields5Response:
        r"""Returns custom fields of a given project.
        Returns custom fields of a given project.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetCustomFields5Request, base_url, '/projects/{projectId}/customFields', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetCustomFields5Response(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if True:
            if utils.match_content_type(content_type, 'application/vnd.xtrf-v1+json;charset=UTF-8'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.CustomFieldDTO]])
                res.custom_fields_dto = out

        return res

    def get_dates_1(self, request: operations.GetDates1Request) -> operations.GetDates1Response:
        r"""Returns dates of a given project.
        Returns dates of a given project.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetDates1Request, base_url, '/projects/{projectId}/dates', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetDates1Response(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if True:
            if utils.match_content_type(content_type, 'application/vnd.xtrf-v1+json;charset=UTF-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ProjectDatesDTO])
                res.project_dates_dto = out

        return res

    def get_file_by_id(self, request: operations.GetFileByIDRequest) -> operations.GetFileByIDResponse:
        r"""Downloads a file.
        Downloads a file.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetFileByIDRequest, base_url, '/projects/files/{fileId}/download', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetFileByIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def get_finance(self, request: operations.GetFinanceRequest) -> operations.GetFinanceResponse:
        r"""Returns finance of a given project.
        Returns finance of a given project.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetFinanceRequest, base_url, '/projects/{projectId}/finance', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetFinanceResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if True:
            if utils.match_content_type(content_type, 'application/vnd.xtrf-v1+json;charset=UTF-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.FinanceDTO])
                res.finance_dto = out

        return res

    def get_instructions(self, request: operations.GetInstructionsRequest) -> operations.GetInstructionsResponse:
        r"""Returns instructions of a given project.
        Returns instructions of a given project.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetInstructionsRequest, base_url, '/projects/{projectId}/instructions', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetInstructionsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if True:
            if utils.match_content_type(content_type, 'application/vnd.xtrf-v1+json;charset=UTF-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.InstructionsDTO])
                res.instructions_dto = out

        return res

    def update_contacts(self, request: operations.UpdateContactsRequest) -> operations.UpdateContactsResponse:
        r"""Updates contacts of a given project.
        Updates contacts of a given project.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.UpdateContactsRequest, base_url, '/projects/{projectId}/contacts', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "contacts_dto", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateContactsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if True:
            if utils.match_content_type(content_type, 'application/vnd.xtrf-v1+json;charset=UTF-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ContactsDTO])
                res.contacts_dto = out

        return res

    def update_custom_fields_3(self, request: operations.UpdateCustomFields3Request) -> operations.UpdateCustomFields3Response:
        r"""Updates custom fields of a given project.
        Updates custom fields of a given project.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.UpdateCustomFields3Request, base_url, '/projects/{projectId}/customFields', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateCustomFields3Response(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if True:
            if utils.match_content_type(content_type, 'application/vnd.xtrf-v1+json;charset=UTF-8'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.CustomFieldDTO]])
                res.custom_fields_dto = out

        return res

    def update_dates_1(self, request: operations.UpdateDates1Request) -> operations.UpdateDates1Response:
        r"""Updates dates of a given project.
        Updates dates of a given project.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.UpdateDates1Request, base_url, '/projects/{projectId}/dates', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "project_dates_dto", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateDates1Response(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if True:
            if utils.match_content_type(content_type, 'application/vnd.xtrf-v1+json;charset=UTF-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ProjectDatesDTO])
                res.project_dates_dto = out

        return res

    def update_instructions_1(self, request: operations.UpdateInstructions1Request) -> operations.UpdateInstructions1Response:
        r"""Updates instructions of a given project.
        Updates instructions of a given project.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.UpdateInstructions1Request, base_url, '/projects/{projectId}/instructions', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "instructions_dto", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateInstructions1Response(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if True:
            if utils.match_content_type(content_type, 'application/vnd.xtrf-v1+json;charset=UTF-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.InstructionsDTO])
                res.instructions_dto = out

        return res

    def update_payable(self, request: operations.UpdatePayableRequest) -> operations.UpdatePayableResponse:
        r"""Updates a payable.
        Updates a payable.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.UpdatePayableRequest, base_url, '/projects/{projectId}/finance/payables/{payableId}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "payable_dto", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdatePayableResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if True:
            if utils.match_content_type(content_type, 'application/json;charset=UTF-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.PayableDTO])
                res.payable_dto = out

        return res

    def update_receivable(self, request: operations.UpdateReceivableRequest) -> operations.UpdateReceivableResponse:
        r"""Updates a receivable.
        Updates a receivable.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.UpdateReceivableRequest, base_url, '/projects/{projectId}/finance/receivables/{receivableId}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "receivable_dto", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateReceivableResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if True:
            if utils.match_content_type(content_type, 'application/json;charset=UTF-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ReceivableDTO])
                res.receivable_dto = out

        return res

    