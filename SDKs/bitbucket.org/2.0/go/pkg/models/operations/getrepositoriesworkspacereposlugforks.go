// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type GetRepositoriesWorkspaceRepoSlugForksSecurity struct {
	APIKey *string             `security:"scheme,type=apiKey,subtype=header,name=Authorization"`
	Basic  *shared.SchemeBasic `security:"scheme,type=http,subtype=basic"`
	Oauth2 *string             `security:"scheme,type=oauth2,name=Authorization"`
}

// GetRepositoriesWorkspaceRepoSlugForksRoleEnum - Filters the result based on the authenticated user's role on each repository.
//
// * **member**: returns repositories to which the user has explicit read access
// * **contributor**: returns repositories to which the user has explicit write access
// * **admin**: returns repositories to which the user has explicit administrator access
// * **owner**: returns all repositories owned by the current user
type GetRepositoriesWorkspaceRepoSlugForksRoleEnum string

const (
	GetRepositoriesWorkspaceRepoSlugForksRoleEnumAdmin       GetRepositoriesWorkspaceRepoSlugForksRoleEnum = "admin"
	GetRepositoriesWorkspaceRepoSlugForksRoleEnumContributor GetRepositoriesWorkspaceRepoSlugForksRoleEnum = "contributor"
	GetRepositoriesWorkspaceRepoSlugForksRoleEnumMember      GetRepositoriesWorkspaceRepoSlugForksRoleEnum = "member"
	GetRepositoriesWorkspaceRepoSlugForksRoleEnumOwner       GetRepositoriesWorkspaceRepoSlugForksRoleEnum = "owner"
)

func (e GetRepositoriesWorkspaceRepoSlugForksRoleEnum) ToPointer() *GetRepositoriesWorkspaceRepoSlugForksRoleEnum {
	return &e
}

func (e *GetRepositoriesWorkspaceRepoSlugForksRoleEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "admin":
		fallthrough
	case "contributor":
		fallthrough
	case "member":
		fallthrough
	case "owner":
		*e = GetRepositoriesWorkspaceRepoSlugForksRoleEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetRepositoriesWorkspaceRepoSlugForksRoleEnum: %v", v)
	}
}

type GetRepositoriesWorkspaceRepoSlugForksRequest struct {
	// Query string to narrow down the response as per [filtering and sorting](/cloud/bitbucket/rest/intro/#filtering).
	//
	Q *string `queryParam:"style=form,explode=true,name=q"`
	// This can either be the repository slug or the UUID of the repository,
	// surrounded by curly-braces, for example: `{repository UUID}`.
	//
	RepoSlug string `pathParam:"style=simple,explode=false,name=repo_slug"`
	// Filters the result based on the authenticated user's role on each repository.
	//
	// * **member**: returns repositories to which the user has explicit read access
	// * **contributor**: returns repositories to which the user has explicit write access
	// * **admin**: returns repositories to which the user has explicit administrator access
	// * **owner**: returns all repositories owned by the current user
	//
	Role *GetRepositoriesWorkspaceRepoSlugForksRoleEnum `queryParam:"style=form,explode=true,name=role"`
	// Field by which the results should be sorted as per [filtering and sorting](/cloud/bitbucket/rest/intro/#filtering).
	//
	Sort *string `queryParam:"style=form,explode=true,name=sort"`
	// This can either be the workspace ID (slug) or the workspace UUID
	// surrounded by curly-braces, for example: `{workspace UUID}`.
	//
	Workspace string `pathParam:"style=simple,explode=false,name=workspace"`
}

type GetRepositoriesWorkspaceRepoSlugForksResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// All forks.
	PaginatedRepositories *shared.PaginatedRepositories
}
