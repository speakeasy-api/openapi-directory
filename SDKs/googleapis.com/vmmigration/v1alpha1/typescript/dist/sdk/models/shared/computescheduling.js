"use strict";
/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ComputeScheduling = exports.ComputeSchedulingRestartTypeEnum = exports.ComputeSchedulingOnHostMaintenanceEnum = void 0;
var utils_1 = require("../../../internal/utils");
var schedulingnodeaffinity_1 = require("./schedulingnodeaffinity");
var class_transformer_1 = require("class-transformer");
/**
 * How the instance should behave when the host machine undergoes maintenance that may temporarily impact instance performance.
 */
var ComputeSchedulingOnHostMaintenanceEnum;
(function (ComputeSchedulingOnHostMaintenanceEnum) {
    ComputeSchedulingOnHostMaintenanceEnum["OnHostMaintenanceUnspecified"] = "ON_HOST_MAINTENANCE_UNSPECIFIED";
    ComputeSchedulingOnHostMaintenanceEnum["Terminate"] = "TERMINATE";
    ComputeSchedulingOnHostMaintenanceEnum["Migrate"] = "MIGRATE";
})(ComputeSchedulingOnHostMaintenanceEnum = exports.ComputeSchedulingOnHostMaintenanceEnum || (exports.ComputeSchedulingOnHostMaintenanceEnum = {}));
/**
 * Whether the Instance should be automatically restarted whenever it is terminated by Compute Engine (not terminated by user). This configuration is identical to `automaticRestart` field in Compute Engine create instance under scheduling. It was changed to an enum (instead of a boolean) to match the default value in Compute Engine which is automatic restart.
 */
var ComputeSchedulingRestartTypeEnum;
(function (ComputeSchedulingRestartTypeEnum) {
    ComputeSchedulingRestartTypeEnum["RestartTypeUnspecified"] = "RESTART_TYPE_UNSPECIFIED";
    ComputeSchedulingRestartTypeEnum["AutomaticRestart"] = "AUTOMATIC_RESTART";
    ComputeSchedulingRestartTypeEnum["NoAutomaticRestart"] = "NO_AUTOMATIC_RESTART";
})(ComputeSchedulingRestartTypeEnum = exports.ComputeSchedulingRestartTypeEnum || (exports.ComputeSchedulingRestartTypeEnum = {}));
/**
 * Scheduling information for VM on maintenance/restart behaviour and node allocation in sole tenant nodes.
 */
var ComputeScheduling = /** @class */ (function (_super) {
    __extends(ComputeScheduling, _super);
    function ComputeScheduling() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "automaticRestart" }),
        __metadata("design:type", Boolean)
    ], ComputeScheduling.prototype, "automaticRestart", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "minNodeCpus" }),
        __metadata("design:type", Number)
    ], ComputeScheduling.prototype, "minNodeCpus", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({ elemType: schedulingnodeaffinity_1.SchedulingNodeAffinity }),
        (0, class_transformer_1.Expose)({ name: "nodeAffinities" }),
        (0, class_transformer_1.Type)(function () { return schedulingnodeaffinity_1.SchedulingNodeAffinity; }),
        __metadata("design:type", Array)
    ], ComputeScheduling.prototype, "nodeAffinities", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "onHostMaintenance" }),
        __metadata("design:type", String)
    ], ComputeScheduling.prototype, "onHostMaintenance", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "restartType" }),
        __metadata("design:type", String)
    ], ComputeScheduling.prototype, "restartType", void 0);
    return ComputeScheduling;
}(utils_1.SpeakeasyBase));
exports.ComputeScheduling = ComputeScheduling;
