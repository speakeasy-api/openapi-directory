"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations
from typing import Optional

class Alerting:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def bug_tracker_get_repo_issue_from_crash(self, request: operations.BugTrackerGetRepoIssueFromCrashRequest, security: operations.BugTrackerGetRepoIssueFromCrashSecurity) -> operations.BugTrackerGetRepoIssueFromCrashResponse:
        r"""Get project issue related to a crash group"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.BugTrackerGetRepoIssueFromCrashRequest, base_url, '/v0.1/apps/{owner_name}/{app_name}/bugtracker/crashGroup/{crash_group_id}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.BugTrackerGetRepoIssueFromCrashResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.BugTrackerGetRepoIssueFromCrash200ApplicationJSON])
                res.bug_tracker_get_repo_issue_from_crash_200_application_json_object = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.BugTrackerGetRepoIssueFromCrashDefaultApplicationJSON])
                res.bug_tracker_get_repo_issue_from_crash_default_application_json_object = out

        return res

    def bugtracker_get_settings(self, request: operations.BugtrackerGetSettingsRequest, security: operations.BugtrackerGetSettingsSecurity) -> operations.BugtrackerGetSettingsResponse:
        r"""Get bug tracker settings for a particular app"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.BugtrackerGetSettingsRequest, base_url, '/v0.1/apps/{owner_name}/{app_name}/bugtracker', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.BugtrackerGetSettingsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.BugtrackerGetSettings200ApplicationJSON])
                res.bugtracker_get_settings_200_application_json_object = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.BugtrackerGetSettingsDefaultApplicationJSON])
                res.bugtracker_get_settings_default_application_json_object = out

        return res

    def notifications_get_app_email_settings(self, request: operations.NotificationsGetAppEmailSettingsRequest, security: operations.NotificationsGetAppEmailSettingsSecurity) -> operations.NotificationsGetAppEmailSettingsResponse:
        r"""Get Email notification settings of user for a particular app"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.NotificationsGetAppEmailSettingsRequest, base_url, '/v0.1/apps/{owner_name}/{app_name}/notifications/emailSettings', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.NotificationsGetAppEmailSettingsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.NotificationsGetAppEmailSettings200ApplicationJSON])
                res.notifications_get_app_email_settings_200_application_json_object = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.NotificationsGetAppEmailSettingsDefaultApplicationJSON])
                res.notifications_get_app_email_settings_default_application_json_object = out

        return res

    def notifications_get_user_email_settings(self) -> operations.NotificationsGetUserEmailSettingsResponse:
        r"""Get Default email notification settings for the user"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v0.1/user/notifications/emailSettings'
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.NotificationsGetUserEmailSettingsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.NotificationsGetUserEmailSettings200ApplicationJSON])
                res.notifications_get_user_email_settings_200_application_json_object = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.NotificationsGetUserEmailSettingsDefaultApplicationJSON])
                res.notifications_get_user_email_settings_default_application_json_object = out

        return res

    def webhooks_list(self, request: operations.WebhooksListRequest, security: operations.WebhooksListSecurity) -> operations.WebhooksListResponse:
        r"""Get web hooks configured for a particular app"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.WebhooksListRequest, base_url, '/v0.1/apps/{owner_name}/{app_name}/webhooks', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.WebhooksListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.WebhooksList200ApplicationJSON])
                res.webhooks_list_200_application_json_object = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.WebhooksListDefaultApplicationJSON])
                res.webhooks_list_default_application_json_object = out

        return res

    