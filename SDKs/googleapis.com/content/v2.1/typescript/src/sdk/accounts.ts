/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class Accounts {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Returns information about the authenticated user.
   */
  contentAccountsAuthinfo(
    req: operations.ContentAccountsAuthinfoRequest,
    security: operations.ContentAccountsAuthinfoSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ContentAccountsAuthinfoResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ContentAccountsAuthinfoRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/accounts/authinfo";
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.ContentAccountsAuthinfoSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ContentAccountsAuthinfoResponse =
        new operations.ContentAccountsAuthinfoResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.accountsAuthInfoResponse = utils.objectToClass(
              httpRes?.data,
              shared.AccountsAuthInfoResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Claims the website of a Merchant Center sub-account. Merchant accounts with approved third-party CSSs aren't required to claim a website.
   */
  contentAccountsClaimwebsite(
    req: operations.ContentAccountsClaimwebsiteRequest,
    security: operations.ContentAccountsClaimwebsiteSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ContentAccountsClaimwebsiteResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ContentAccountsClaimwebsiteRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/{merchantId}/accounts/{accountId}/claimwebsite",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.ContentAccountsClaimwebsiteSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ContentAccountsClaimwebsiteResponse =
        new operations.ContentAccountsClaimwebsiteResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.accountsClaimWebsiteResponse = utils.objectToClass(
              httpRes?.data,
              shared.AccountsClaimWebsiteResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Uploads credentials for the Merchant Center account. If credentials already exist for this Merchant Center account and purpose, this method updates them.
   */
  contentAccountsCredentialsCreate(
    req: operations.ContentAccountsCredentialsCreateRequest,
    security: operations.ContentAccountsCredentialsCreateSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ContentAccountsCredentialsCreateResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ContentAccountsCredentialsCreateRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/accounts/{accountId}/credentials",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "accountCredentials",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.ContentAccountsCredentialsCreateSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ContentAccountsCredentialsCreateResponse =
        new operations.ContentAccountsCredentialsCreateResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.accountCredentials = utils.objectToClass(
              httpRes?.data,
              shared.AccountCredentials
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Retrieves, inserts, updates, and deletes multiple Merchant Center (sub-)accounts in a single request.
   */
  contentAccountsCustombatch(
    req: operations.ContentAccountsCustombatchRequest,
    security: operations.ContentAccountsCustombatchSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ContentAccountsCustombatchResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ContentAccountsCustombatchRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/accounts/batch";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "accountsCustomBatchRequestInput",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.ContentAccountsCustombatchSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ContentAccountsCustombatchResponse =
        new operations.ContentAccountsCustombatchResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.accountsCustomBatchResponse = utils.objectToClass(
              httpRes?.data,
              shared.AccountsCustomBatchResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Deletes a Merchant Center sub-account.
   */
  contentAccountsDelete(
    req: operations.ContentAccountsDeleteRequest,
    security: operations.ContentAccountsDeleteSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ContentAccountsDeleteResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ContentAccountsDeleteRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/{merchantId}/accounts/{accountId}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.ContentAccountsDeleteSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ContentAccountsDeleteResponse =
        new operations.ContentAccountsDeleteResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          break;
      }

      return res;
    });
  }

  /**
   * Retrieves a Merchant Center account.
   */
  contentAccountsGet(
    req: operations.ContentAccountsGetRequest,
    security: operations.ContentAccountsGetSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ContentAccountsGetResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ContentAccountsGetRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/{merchantId}/accounts/{accountId}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.ContentAccountsGetSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ContentAccountsGetResponse =
        new operations.ContentAccountsGetResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.account = utils.objectToClass(httpRes?.data, shared.Account);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Creates a Merchant Center sub-account.
   */
  contentAccountsInsert(
    req: operations.ContentAccountsInsertRequest,
    security: operations.ContentAccountsInsertSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ContentAccountsInsertResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ContentAccountsInsertRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/{merchantId}/accounts",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "accountInput",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.ContentAccountsInsertSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ContentAccountsInsertResponse =
        new operations.ContentAccountsInsertResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.account = utils.objectToClass(httpRes?.data, shared.Account);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Creates a new label, not assigned to any account.
   */
  contentAccountsLabelsCreate(
    req: operations.ContentAccountsLabelsCreateRequest,
    security: operations.ContentAccountsLabelsCreateSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ContentAccountsLabelsCreateResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ContentAccountsLabelsCreateRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/accounts/{accountId}/labels",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "accountLabelInput",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.ContentAccountsLabelsCreateSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ContentAccountsLabelsCreateResponse =
        new operations.ContentAccountsLabelsCreateResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.accountLabel = utils.objectToClass(
              httpRes?.data,
              shared.AccountLabel
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Deletes a label and removes it from all accounts to which it was assigned.
   */
  contentAccountsLabelsDelete(
    req: operations.ContentAccountsLabelsDeleteRequest,
    security: operations.ContentAccountsLabelsDeleteSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ContentAccountsLabelsDeleteResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ContentAccountsLabelsDeleteRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/accounts/{accountId}/labels/{labelId}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.ContentAccountsLabelsDeleteSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ContentAccountsLabelsDeleteResponse =
        new operations.ContentAccountsLabelsDeleteResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          break;
      }

      return res;
    });
  }

  /**
   * Lists the labels assigned to an account.
   */
  contentAccountsLabelsList(
    req: operations.ContentAccountsLabelsListRequest,
    security: operations.ContentAccountsLabelsListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ContentAccountsLabelsListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ContentAccountsLabelsListRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/accounts/{accountId}/labels",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.ContentAccountsLabelsListSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ContentAccountsLabelsListResponse =
        new operations.ContentAccountsLabelsListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listAccountLabelsResponse = utils.objectToClass(
              httpRes?.data,
              shared.ListAccountLabelsResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Updates a label.
   */
  contentAccountsLabelsPatch(
    req: operations.ContentAccountsLabelsPatchRequest,
    security: operations.ContentAccountsLabelsPatchSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ContentAccountsLabelsPatchResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ContentAccountsLabelsPatchRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/accounts/{accountId}/labels/{labelId}",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "accountLabelInput",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.ContentAccountsLabelsPatchSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "patch",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ContentAccountsLabelsPatchResponse =
        new operations.ContentAccountsLabelsPatchResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.accountLabel = utils.objectToClass(
              httpRes?.data,
              shared.AccountLabel
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Performs an action on a link between two Merchant Center accounts, namely accountId and linkedAccountId.
   */
  contentAccountsLink(
    req: operations.ContentAccountsLinkRequest,
    security: operations.ContentAccountsLinkSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ContentAccountsLinkResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ContentAccountsLinkRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/{merchantId}/accounts/{accountId}/link",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "accountsLinkRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.ContentAccountsLinkSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ContentAccountsLinkResponse =
        new operations.ContentAccountsLinkResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.accountsLinkResponse = utils.objectToClass(
              httpRes?.data,
              shared.AccountsLinkResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Lists the sub-accounts in your Merchant Center account.
   */
  contentAccountsList(
    req: operations.ContentAccountsListRequest,
    security: operations.ContentAccountsListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ContentAccountsListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ContentAccountsListRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/{merchantId}/accounts",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.ContentAccountsListSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ContentAccountsListResponse =
        new operations.ContentAccountsListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.accountsListResponse = utils.objectToClass(
              httpRes?.data,
              shared.AccountsListResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Returns the list of accounts linked to your Merchant Center account.
   */
  contentAccountsListlinks(
    req: operations.ContentAccountsListlinksRequest,
    security: operations.ContentAccountsListlinksSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ContentAccountsListlinksResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ContentAccountsListlinksRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/{merchantId}/accounts/{accountId}/listlinks",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.ContentAccountsListlinksSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ContentAccountsListlinksResponse =
        new operations.ContentAccountsListlinksResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.accountsListLinksResponse = utils.objectToClass(
              httpRes?.data,
              shared.AccountsListLinksResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Request verification code to start phone verification.
   */
  contentAccountsRequestphoneverification(
    req: operations.ContentAccountsRequestphoneverificationRequest,
    security: operations.ContentAccountsRequestphoneverificationSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ContentAccountsRequestphoneverificationResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ContentAccountsRequestphoneverificationRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/{merchantId}/accounts/{accountId}/requestphoneverification",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestPhoneVerificationRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.ContentAccountsRequestphoneverificationSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ContentAccountsRequestphoneverificationResponse =
        new operations.ContentAccountsRequestphoneverificationResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.requestPhoneVerificationResponse = utils.objectToClass(
              httpRes?.data,
              shared.RequestPhoneVerificationResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Links return carrier to a merchant account.
   */
  contentAccountsReturncarrierCreate(
    req: operations.ContentAccountsReturncarrierCreateRequest,
    security: operations.ContentAccountsReturncarrierCreateSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ContentAccountsReturncarrierCreateResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ContentAccountsReturncarrierCreateRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/accounts/{accountId}/returncarrier",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "accountReturnCarrierInput",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.ContentAccountsReturncarrierCreateSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ContentAccountsReturncarrierCreateResponse =
        new operations.ContentAccountsReturncarrierCreateResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.accountReturnCarrier = utils.objectToClass(
              httpRes?.data,
              shared.AccountReturnCarrier
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Delete a return carrier in the merchant account.
   */
  contentAccountsReturncarrierDelete(
    req: operations.ContentAccountsReturncarrierDeleteRequest,
    security: operations.ContentAccountsReturncarrierDeleteSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ContentAccountsReturncarrierDeleteResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ContentAccountsReturncarrierDeleteRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/accounts/{accountId}/returncarrier/{carrierAccountId}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.ContentAccountsReturncarrierDeleteSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ContentAccountsReturncarrierDeleteResponse =
        new operations.ContentAccountsReturncarrierDeleteResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          break;
      }

      return res;
    });
  }

  /**
   * Lists available return carriers in the merchant account.
   */
  contentAccountsReturncarrierList(
    req: operations.ContentAccountsReturncarrierListRequest,
    security: operations.ContentAccountsReturncarrierListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ContentAccountsReturncarrierListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ContentAccountsReturncarrierListRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/accounts/{accountId}/returncarrier",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.ContentAccountsReturncarrierListSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ContentAccountsReturncarrierListResponse =
        new operations.ContentAccountsReturncarrierListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listAccountReturnCarrierResponse = utils.objectToClass(
              httpRes?.data,
              shared.ListAccountReturnCarrierResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Updates a return carrier in the merchant account.
   */
  contentAccountsReturncarrierPatch(
    req: operations.ContentAccountsReturncarrierPatchRequest,
    security: operations.ContentAccountsReturncarrierPatchSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ContentAccountsReturncarrierPatchResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ContentAccountsReturncarrierPatchRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/accounts/{accountId}/returncarrier/{carrierAccountId}",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "accountReturnCarrierInput",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.ContentAccountsReturncarrierPatchSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "patch",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ContentAccountsReturncarrierPatchResponse =
        new operations.ContentAccountsReturncarrierPatchResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.accountReturnCarrier = utils.objectToClass(
              httpRes?.data,
              shared.AccountReturnCarrier
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Updates a Merchant Center account. Any fields that are not provided are deleted from the resource.
   */
  contentAccountsUpdate(
    req: operations.ContentAccountsUpdateRequest,
    security: operations.ContentAccountsUpdateSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ContentAccountsUpdateResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ContentAccountsUpdateRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/{merchantId}/accounts/{accountId}",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "accountInput",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.ContentAccountsUpdateSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "put",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ContentAccountsUpdateResponse =
        new operations.ContentAccountsUpdateResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.account = utils.objectToClass(httpRes?.data, shared.Account);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Updates labels that are assigned to the Merchant Center account by CSS user.
   */
  contentAccountsUpdatelabels(
    req: operations.ContentAccountsUpdatelabelsRequest,
    security: operations.ContentAccountsUpdatelabelsSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ContentAccountsUpdatelabelsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ContentAccountsUpdatelabelsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/{merchantId}/accounts/{accountId}/updatelabels",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "accountsUpdateLabelsRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.ContentAccountsUpdatelabelsSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ContentAccountsUpdatelabelsResponse =
        new operations.ContentAccountsUpdatelabelsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.accountsUpdateLabelsResponse = utils.objectToClass(
              httpRes?.data,
              shared.AccountsUpdateLabelsResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Validates verification code to verify phone number for the account. If successful this will overwrite the value of `accounts.businessinformation.phoneNumber`. Only verified phone number will replace an existing verified phone number.
   */
  contentAccountsVerifyphonenumber(
    req: operations.ContentAccountsVerifyphonenumberRequest,
    security: operations.ContentAccountsVerifyphonenumberSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ContentAccountsVerifyphonenumberResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ContentAccountsVerifyphonenumberRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/{merchantId}/accounts/{accountId}/verifyphonenumber",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "verifyPhoneNumberRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.ContentAccountsVerifyphonenumberSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ContentAccountsVerifyphonenumberResponse =
        new operations.ContentAccountsVerifyphonenumberResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.verifyPhoneNumberResponse = utils.objectToClass(
              httpRes?.data,
              shared.VerifyPhoneNumberResponse
            );
          }
          break;
      }

      return res;
    });
  }
}
