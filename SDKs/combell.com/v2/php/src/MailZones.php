<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class MailZones 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Configure a alias
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ConfigureAliasRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ConfigureAliasResponse
     */
	public function configureAlias(
        \OpenAPI\OpenAPI\Models\Operations\ConfigureAliasRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ConfigureAliasResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/mailzones/{domainName}/aliases/{emailAddress}', \OpenAPI\OpenAPI\Models\Operations\ConfigureAliasRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "updateAliasRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ConfigureAliasRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ConfigureAliasResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 202) {
        }
        else if ($httpResponse->getStatusCode() === 400) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->badRequestResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BadRequestResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Configure anti-spam for mail zone
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ConfigureAntiSpamRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ConfigureAntiSpamResponse
     */
	public function configureAntiSpam(
        \OpenAPI\OpenAPI\Models\Operations\ConfigureAntiSpamRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ConfigureAntiSpamResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/mailzones/{domainName}/antispam', \OpenAPI\OpenAPI\Models\Operations\ConfigureAntiSpamRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "updateAntiSpamRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ConfigureAntiSpamRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ConfigureAntiSpamResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Configure an extra smtp domain
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ConfigureSmtpDomainRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ConfigureSmtpDomainResponse
     */
	public function configureSmtpDomain(
        \OpenAPI\OpenAPI\Models\Operations\ConfigureSmtpDomainRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ConfigureSmtpDomainResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/mailzones/{domainName}/smtpdomains/{hostname}', \OpenAPI\OpenAPI\Models\Operations\ConfigureSmtpDomainRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "updateSmtpDomainRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ConfigureSmtpDomainRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ConfigureSmtpDomainResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 202) {
        }
        else if ($httpResponse->getStatusCode() === 400) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->badRequestResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BadRequestResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create a new alias
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateAliasRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateAliasResponse
     */
	public function createAlias(
        \OpenAPI\OpenAPI\Models\Operations\CreateAliasRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateAliasResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/mailzones/{domainName}/aliases', \OpenAPI\OpenAPI\Models\Operations\CreateAliasRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "createAliasRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\CreateAliasRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateAliasResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            $response->headers = $httpResponse->getHeaders();
            
        }
        else if ($httpResponse->getStatusCode() === 400) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->badRequestResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BadRequestResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create a catch-all on the mail zone
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateCatchAllRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateCatchAllResponse
     */
	public function createCatchAll(
        \OpenAPI\OpenAPI\Models\Operations\CreateCatchAllRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateCatchAllResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/mailzones/{domainName}/catchall', \OpenAPI\OpenAPI\Models\Operations\CreateCatchAllRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "createCatchAllRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\CreateCatchAllRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateCatchAllResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            $response->headers = $httpResponse->getHeaders();
            
        }

        return $response;
    }
	
    /**
     * Create an extra smtp domain
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateSmtpDomainRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateSmtpDomainResponse
     */
	public function createSmtpDomain(
        \OpenAPI\OpenAPI\Models\Operations\CreateSmtpDomainRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateSmtpDomainResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/mailzones/{domainName}/smtpdomains', \OpenAPI\OpenAPI\Models\Operations\CreateSmtpDomainRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "createSmtpDomainRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\CreateSmtpDomainRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateSmtpDomainResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            $response->headers = $httpResponse->getHeaders();
            
        }
        else if ($httpResponse->getStatusCode() === 400) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->badRequestResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BadRequestResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Delete a alias
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteAliasRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteAliasResponse
     */
	public function deleteAlias(
        \OpenAPI\OpenAPI\Models\Operations\DeleteAliasRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteAliasResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/mailzones/{domainName}/aliases/{emailAddress}', \OpenAPI\OpenAPI\Models\Operations\DeleteAliasRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DeleteAliasRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteAliasResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204 or $httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
	
    /**
     * Delete a catch-all on the mail zone
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteCatchAllRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteCatchAllResponse
     */
	public function deleteCatchAll(
        \OpenAPI\OpenAPI\Models\Operations\DeleteCatchAllRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteCatchAllResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/mailzones/{domainName}/catchall/{emailAddress}', \OpenAPI\OpenAPI\Models\Operations\DeleteCatchAllRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DeleteCatchAllRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteCatchAllResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Delete an extra smtp domain
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteSmtpDomainRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteSmtpDomainResponse
     */
	public function deleteSmtpDomain(
        \OpenAPI\OpenAPI\Models\Operations\DeleteSmtpDomainRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteSmtpDomainResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/mailzones/{domainName}/smtpdomains/{hostname}', \OpenAPI\OpenAPI\Models\Operations\DeleteSmtpDomainRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DeleteSmtpDomainRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteSmtpDomainResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204 or $httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
	
    /**
     * Get the mail zone.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetMailZoneRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetMailZoneResponse
     */
	public function getMailZone(
        \OpenAPI\OpenAPI\Models\Operations\GetMailZoneRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetMailZoneResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/mailzones/{domainName}', \OpenAPI\OpenAPI\Models\Operations\GetMailZoneRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetMailZoneRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetMailZoneResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->mailZone = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\MailZone', 'json');
            }
        }

        return $response;
    }
}