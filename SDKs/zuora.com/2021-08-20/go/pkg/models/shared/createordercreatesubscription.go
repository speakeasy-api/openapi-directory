// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"openapi/pkg/types"
)

// CreateOrderCreateSubscriptionTermsInitialTermPeriodTypeEnum - Unit of time that the first term is measured in. Only applicable if the value of the `termType` field is `TERMED`.
type CreateOrderCreateSubscriptionTermsInitialTermPeriodTypeEnum string

const (
	CreateOrderCreateSubscriptionTermsInitialTermPeriodTypeEnumMonth CreateOrderCreateSubscriptionTermsInitialTermPeriodTypeEnum = "Month"
	CreateOrderCreateSubscriptionTermsInitialTermPeriodTypeEnumYear  CreateOrderCreateSubscriptionTermsInitialTermPeriodTypeEnum = "Year"
	CreateOrderCreateSubscriptionTermsInitialTermPeriodTypeEnumDay   CreateOrderCreateSubscriptionTermsInitialTermPeriodTypeEnum = "Day"
	CreateOrderCreateSubscriptionTermsInitialTermPeriodTypeEnumWeek  CreateOrderCreateSubscriptionTermsInitialTermPeriodTypeEnum = "Week"
)

func (e *CreateOrderCreateSubscriptionTermsInitialTermPeriodTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Month":
		fallthrough
	case "Year":
		fallthrough
	case "Day":
		fallthrough
	case "Week":
		*e = CreateOrderCreateSubscriptionTermsInitialTermPeriodTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateOrderCreateSubscriptionTermsInitialTermPeriodTypeEnum: %s", s)
	}
}

// CreateOrderCreateSubscriptionTermsInitialTermTermTypeEnum - Type of the first term. If the value of this field is `TERMED`, the first term has a predefined duration based on the value of the `period` field. If the value of this field is `EVERGREEN`, the first term does not have a predefined duration.
type CreateOrderCreateSubscriptionTermsInitialTermTermTypeEnum string

const (
	CreateOrderCreateSubscriptionTermsInitialTermTermTypeEnumTermed    CreateOrderCreateSubscriptionTermsInitialTermTermTypeEnum = "TERMED"
	CreateOrderCreateSubscriptionTermsInitialTermTermTypeEnumEvergreen CreateOrderCreateSubscriptionTermsInitialTermTermTypeEnum = "EVERGREEN"
)

func (e *CreateOrderCreateSubscriptionTermsInitialTermTermTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "TERMED":
		fallthrough
	case "EVERGREEN":
		*e = CreateOrderCreateSubscriptionTermsInitialTermTermTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateOrderCreateSubscriptionTermsInitialTermTermTypeEnum: %s", s)
	}
}

// CreateOrderCreateSubscriptionTermsInitialTerm - Information about the first term of the subscription.
type CreateOrderCreateSubscriptionTermsInitialTerm struct {
	// Duration of the first term in months, years, days, or weeks, depending on the value of the `periodType` field. Only applicable if the value of the `termType` field is `TERMED`.
	//
	Period *int64 `json:"period,omitempty"`
	// Unit of time that the first term is measured in. Only applicable if the value of the `termType` field is `TERMED`.
	//
	PeriodType *CreateOrderCreateSubscriptionTermsInitialTermPeriodTypeEnum `json:"periodType,omitempty"`
	// Start date of the first term, in YYYY-MM-DD format.
	//
	StartDate *types.Date `json:"startDate,omitempty"`
	// Type of the first term. If the value of this field is `TERMED`, the first term has a predefined duration based on the value of the `period` field. If the value of this field is `EVERGREEN`, the first term does not have a predefined duration.
	//
	TermType CreateOrderCreateSubscriptionTermsInitialTermTermTypeEnum `json:"termType"`
}

// CreateOrderCreateSubscriptionTermsRenewalSettingEnum - Specifies the type of the terms that follow the first term if the subscription is renewed. Only applicable if the type of the first term is `TERMED`.
//
// * `RENEW_WITH_SPECIFIC_TERM` - Each renewal term has a predefined duration. The first entry in `renewalTerms` specifies the duration of the second term of the subscription, the second entry in `renewalTerms` specifies the duration of the third term of the subscription, and so on. The last entry in `renewalTerms` specifies the ultimate duration of each renewal term.
// * `RENEW_TO_EVERGREEN` - The second term of the subscription does not have a predefined duration.
type CreateOrderCreateSubscriptionTermsRenewalSettingEnum string

const (
	CreateOrderCreateSubscriptionTermsRenewalSettingEnumRenewWithSpecificTerm CreateOrderCreateSubscriptionTermsRenewalSettingEnum = "RENEW_WITH_SPECIFIC_TERM"
	CreateOrderCreateSubscriptionTermsRenewalSettingEnumRenewToEvergreen      CreateOrderCreateSubscriptionTermsRenewalSettingEnum = "RENEW_TO_EVERGREEN"
)

func (e *CreateOrderCreateSubscriptionTermsRenewalSettingEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "RENEW_WITH_SPECIFIC_TERM":
		fallthrough
	case "RENEW_TO_EVERGREEN":
		*e = CreateOrderCreateSubscriptionTermsRenewalSettingEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateOrderCreateSubscriptionTermsRenewalSettingEnum: %s", s)
	}
}

// CreateOrderCreateSubscriptionTerms - Container for the terms and renewal settings of the subscription.
type CreateOrderCreateSubscriptionTerms struct {
	// Specifies whether the subscription automatically renews at the end of the each term. Only applicable if the type of the first term is `TERMED`.
	//
	AutoRenew *bool `json:"autoRenew,omitempty"`
	// Information about the first term of the subscription.
	//
	InitialTerm CreateOrderCreateSubscriptionTermsInitialTerm `json:"initialTerm"`
	// Specifies the type of the terms that follow the first term if the subscription is renewed. Only applicable if the type of the first term is `TERMED`.
	//
	// * `RENEW_WITH_SPECIFIC_TERM` - Each renewal term has a predefined duration. The first entry in `renewalTerms` specifies the duration of the second term of the subscription, the second entry in `renewalTerms` specifies the duration of the third term of the subscription, and so on. The last entry in `renewalTerms` specifies the ultimate duration of each renewal term.
	// * `RENEW_TO_EVERGREEN` - The second term of the subscription does not have a predefined duration.
	//
	RenewalSetting *CreateOrderCreateSubscriptionTermsRenewalSettingEnum `json:"renewalSetting,omitempty"`
	// List of renewal terms of the subscription. Only applicable if the type of the first term is `TERMED` and the value of the `renewalSetting` field is `RENEW_WITH_SPECIFIC_TERM`.
	//
	RenewalTerms []RenewalTerm `json:"renewalTerms,omitempty"`
}

// CreateOrderCreateSubscription - Information about an order action of type `CreateSubscription`.
type CreateOrderCreateSubscription struct {
	// Specifies whether the subscription appears on a separate invoice when Zuora generates invoices.
	//
	InvoiceSeparately           *bool             `json:"invoiceSeparately,omitempty"`
	NewSubscriptionOwnerAccount map[string]string `json:"newSubscriptionOwnerAccount,omitempty"`
	// Notes about the subscription. These notes are only visible to Zuora users.
	//
	Notes *string `json:"notes,omitempty"`
	// List of rate plans associated with the subscription.
	//
	SubscribeToRatePlans []CreateOrderRatePlanOverride `json:"subscribeToRatePlans,omitempty"`
	// Subscription number of the subscription. For example, A-S00000001.
	//
	// If you do not set this field, Zuora will generate the subscription number.
	//
	SubscriptionNumber *string `json:"subscriptionNumber,omitempty"`
	// Account number of an existing account that will own the subscription. For example, A00000001.
	//
	// If you do not set this field or the `newSubscriptionOwnerAccount` field, the account that owns the order will also own the subscription. Zuora will return an error if you set this field and the `newSubscriptionOwnerAccount` field.
	//
	SubscriptionOwnerAccountNumber *string `json:"subscriptionOwnerAccountNumber,omitempty"`
	// Container for the terms and renewal settings of the subscription.
	//
	Terms *CreateOrderCreateSubscriptionTerms `json:"terms,omitempty"`
}
