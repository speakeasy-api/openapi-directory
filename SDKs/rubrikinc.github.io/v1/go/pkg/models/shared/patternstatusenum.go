// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// PatternStatusEnum - Status of the exclusion pattern. The 'Applied' state indicates that a pattern is already in force. The 'Applying' state indicates that the index job that applies the pattern is still running. The 'Queued' state indicates that the indexing job to apply the pattern has not launched yet.
type PatternStatusEnum string

const (
	PatternStatusEnumApplied  PatternStatusEnum = "Applied"
	PatternStatusEnumApplying PatternStatusEnum = "Applying"
	PatternStatusEnumQueued   PatternStatusEnum = "Queued"
)

func (e PatternStatusEnum) ToPointer() *PatternStatusEnum {
	return &e
}

func (e *PatternStatusEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Applied":
		fallthrough
	case "Applying":
		fallthrough
	case "Queued":
		*e = PatternStatusEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PatternStatusEnum: %v", v)
	}
}
