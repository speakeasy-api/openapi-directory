/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { NestedUser } from "./nesteduser";
import { Expose, Transform, Type } from "class-transformer";

export enum ObjectChangeActionEnum {
  One = "1",
  Two = "2",
  Three = "3",
}

export class ObjectChange extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "action" })
  action: ObjectChangeActionEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "changed_object" })
  changedObject?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "content_type" })
  contentType?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "object_data" })
  objectData?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "request_id" })
  requestId?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "time" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  time?: Date;

  @SpeakeasyMetadata()
  @Expose({ name: "user" })
  @Type(() => NestedUser)
  user?: NestedUser;

  @SpeakeasyMetadata()
  @Expose({ name: "user_name" })
  userName?: string;
}
