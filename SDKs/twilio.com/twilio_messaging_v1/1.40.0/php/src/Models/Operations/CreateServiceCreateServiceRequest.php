<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Operations;

use \OpenAPI\OpenAPI\Utils\SpeakeasyMetadata;
class CreateServiceCreateServiceRequest
{
    /**
     * Whether to enable [Area Code Geomatch](https://www.twilio.com/docs/sms/services#area-code-geomatch) on the Service Instance.
     * 
     * @var ?bool $areaCodeGeomatch
     */
	#[SpeakeasyMetadata('form:name=AreaCodeGeomatch')]
    public ?bool $areaCodeGeomatch = null;
    
    /**
     * The HTTP method we should use to call `fallback_url`. Can be: `GET` or `POST`.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Operations\CreateServiceCreateServiceRequestFallbackMethodEnum $fallbackMethod
     */
	#[SpeakeasyMetadata('form:name=FallbackMethod')]
    public ?CreateServiceCreateServiceRequestFallbackMethodEnum $fallbackMethod = null;
    
    /**
     * Whether to enable [Fallback to Long Code](https://www.twilio.com/docs/sms/services#fallback-to-long-code) for messages sent through the Service instance.
     * 
     * @var ?bool $fallbackToLongCode
     */
	#[SpeakeasyMetadata('form:name=FallbackToLongCode')]
    public ?bool $fallbackToLongCode = null;
    
    /**
     * The URL that we call using `fallback_method` if an error occurs while retrieving or executing the TwiML from the Inbound Request URL. If the `use_inbound_webhook_on_number` field is enabled then the webhook url defined on the phone number will override the `fallback_url` defined for the Messaging Service.
     * 
     * @var ?string $fallbackUrl
     */
	#[SpeakeasyMetadata('form:name=FallbackUrl')]
    public ?string $fallbackUrl = null;
    
    /**
     * A descriptive string that you create to describe the resource. It can be up to 64 characters long.
     * 
     * @var string $friendlyName
     */
	#[SpeakeasyMetadata('form:name=FriendlyName')]
    public string $friendlyName;
    
    /**
     * The HTTP method we should use to call `inbound_request_url`. Can be `GET` or `POST` and the default is `POST`.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Operations\CreateServiceCreateServiceRequestInboundMethodEnum $inboundMethod
     */
	#[SpeakeasyMetadata('form:name=InboundMethod')]
    public ?CreateServiceCreateServiceRequestInboundMethodEnum $inboundMethod = null;
    
    /**
     * The URL we call using `inbound_method` when a message is received by any phone number or short code in the Service. When this property is `null`, receiving inbound messages is disabled. All messages sent to the Twilio phone number or short code will not be logged and received on the Account. If the `use_inbound_webhook_on_number` field is enabled then the webhook url defined on the phone number will override the `inbound_request_url` defined for the Messaging Service.
     * 
     * @var ?string $inboundRequestUrl
     */
	#[SpeakeasyMetadata('form:name=InboundRequestUrl')]
    public ?string $inboundRequestUrl = null;
    
    /**
     * Whether to enable the [MMS Converter](https://www.twilio.com/docs/sms/services#mms-converter) for messages sent through the Service instance.
     * 
     * @var ?bool $mmsConverter
     */
	#[SpeakeasyMetadata('form:name=MmsConverter')]
    public ?bool $mmsConverter = null;
    
	#[SpeakeasyMetadata('form:name=ScanMessageContent')]
    public ?\OpenAPI\OpenAPI\Models\Shared\ServiceEnumScanMessageContentEnum $scanMessageContent = null;
    
    /**
     * Whether to enable [Smart Encoding](https://www.twilio.com/docs/sms/services#smart-encoding) for messages sent through the Service instance.
     * 
     * @var ?bool $smartEncoding
     */
	#[SpeakeasyMetadata('form:name=SmartEncoding')]
    public ?bool $smartEncoding = null;
    
    /**
     * The URL we should call to [pass status updates](https://www.twilio.com/docs/sms/api/message-resource#message-status-values) about message delivery.
     * 
     * @var ?string $statusCallback
     */
	#[SpeakeasyMetadata('form:name=StatusCallback')]
    public ?string $statusCallback = null;
    
    /**
     * Whether to enable [Sticky Sender](https://www.twilio.com/docs/sms/services#sticky-sender) on the Service instance.
     * 
     * @var ?bool $stickySender
     */
	#[SpeakeasyMetadata('form:name=StickySender')]
    public ?bool $stickySender = null;
    
    /**
     * Reserved.
     * 
     * @var ?bool $synchronousValidation
     */
	#[SpeakeasyMetadata('form:name=SynchronousValidation')]
    public ?bool $synchronousValidation = null;
    
    /**
     * A boolean value that indicates either the webhook url configured on the phone number will be used or `inbound_request_url`/`fallback_url` url will be called when a message is received from the phone number. If this field is enabled then the webhook url defined on the phone number will override the `inbound_request_url`/`fallback_url` defined for the Messaging Service.
     * 
     * @var ?bool $useInboundWebhookOnNumber
     */
	#[SpeakeasyMetadata('form:name=UseInboundWebhookOnNumber')]
    public ?bool $useInboundWebhookOnNumber = null;
    
    /**
     * A string that describes the scenario in which the Messaging Service will be used. Examples: [notification, marketing, verification, poll ..].
     * 
     * @var ?string $usecase
     */
	#[SpeakeasyMetadata('form:name=Usecase')]
    public ?string $usecase = null;
    
    /**
     * How long, in seconds, messages sent from the Service are valid. Can be an integer from `1` to `14,400`.
     * 
     * @var ?int $validityPeriod
     */
	#[SpeakeasyMetadata('form:name=ValidityPeriod')]
    public ?int $validityPeriod = null;
    
	public function __construct()
	{
		$this->areaCodeGeomatch = null;
		$this->fallbackMethod = null;
		$this->fallbackToLongCode = null;
		$this->fallbackUrl = null;
		$this->friendlyName = "";
		$this->inboundMethod = null;
		$this->inboundRequestUrl = null;
		$this->mmsConverter = null;
		$this->scanMessageContent = null;
		$this->smartEncoding = null;
		$this->statusCallback = null;
		$this->stickySender = null;
		$this->synchronousValidation = null;
		$this->useInboundWebhookOnNumber = null;
		$this->usecase = null;
		$this->validityPeriod = null;
	}
}
