/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

public class Shipment {
    /**
     * Specifies an array of allowed vehicles, i.e. array of vehicle ids. For example, if this shipment can only be conducted EITHER by "technician_peter" OR "technician_stefan" specify this as follows: ["technician_peter","technician_stefan"].
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("allowed_vehicles")
    public String[] allowedVehicles;

    public Shipment withAllowedVehicles(String[] allowedVehicles) {
        this.allowedVehicles = allowedVehicles;
        return this;
    }
    
    @JsonProperty("delivery")
    public Stop delivery;

    public Shipment withDelivery(Stop delivery) {
        this.delivery = delivery;
        return this;
    }
    
    /**
     * Specifies an array of disallowed vehicles, i.e. array of vehicle ids.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("disallowed_vehicles")
    public String[] disallowedVehicles;

    public Shipment withDisallowedVehicles(String[] disallowedVehicles) {
        this.disallowedVehicles = disallowedVehicles;
        return this;
    }
    
    /**
     * Specifies the id of the shipment. Ids need to be unique so there must not be two services/shipments with the same id.
     */
    @JsonProperty("id")
    public String id;

    public Shipment withId(String id) {
        this.id = id;
        return this;
    }
    
    /**
     * Specifies the maximum time in seconds a shipment can stay in the vehicle.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("max_time_in_vehicle")
    public Long maxTimeInVehicle;

    public Shipment withMaxTimeInVehicle(Long maxTimeInVehicle) {
        this.maxTimeInVehicle = maxTimeInVehicle;
        return this;
    }
    
    /**
     * Meaningful name for shipment, e.g. "pickup and deliver pizza to Peter".
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    public String name;

    public Shipment withName(String name) {
        this.name = name;
        return this;
    }
    
    @JsonProperty("pickup")
    public Stop pickup;

    public Shipment withPickup(Stop pickup) {
        this.pickup = pickup;
        return this;
    }
    
    /**
     * Specifies the priority. Can be 1 = high priority to 10 = low priority. Often there are more services/shipments than the available vehicle fleet can handle. Then you can set priorities to differentiate high priority tasks from those that could be left unassigned. I.e. the lower the priority the earlier these tasks are omitted in the solution.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("priority")
    public Integer priority;

    public Shipment withPriority(Integer priority) {
        this.priority = priority;
        return this;
    }
    
    /**
     * Specifies an array of required skills, i.e. array of string (not case sensitive). For example, if this shipment needs to be conducted by a technician having a `drilling_machine` and a `screw_driver` then specify the array as follows: `["drilling_machine","screw_driver"]`. This means that the service can only be done by a vehicle (technician) that has the skills `drilling_machine` AND `screw_driver` in its skill array. Otherwise it remains unassigned.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("required_skills")
    public String[] requiredSkills;

    public Shipment withRequiredSkills(String[] requiredSkills) {
        this.requiredSkills = requiredSkills;
        return this;
    }
    
    /**
     * Size can have multiple dimensions and should be in line with the capacity dimension array of the vehicle type. For example, if the item that needs to be delivered has two size dimension, volume and weight, then specify it as follow [ 20, 5 ] assuming a volume of 20 and a weight of 5.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("size")
    public Integer[] size;

    public Shipment withSize(Integer[] size) {
        this.size = size;
        return this;
    }
    
    public Shipment(@JsonProperty("delivery") Stop delivery, @JsonProperty("id") String id, @JsonProperty("pickup") Stop pickup) {
        this.delivery = delivery;
        this.id = id;
        this.pickup = pickup;
  }
}
