"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import _xgafv_enum as shared__xgafv_enum
from ..shared import alt_enum as shared_alt_enum
from ..shared import channel as shared_channel
from enum import Enum
from typing import Optional


@dataclasses.dataclass
class DirectoryUsersWatchSecurityOption1:
    
    oauth2: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'oauth2', 'field_name': 'Authorization' }})  
    oauth2c: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'oauth2', 'field_name': 'Authorization' }})  
    

@dataclasses.dataclass
class DirectoryUsersWatchSecurityOption2:
    
    oauth2: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'oauth2', 'field_name': 'Authorization' }})  
    oauth2c: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'oauth2', 'field_name': 'Authorization' }})  
    

@dataclasses.dataclass
class DirectoryUsersWatchSecurityOption3:
    
    oauth2: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'oauth2', 'field_name': 'Authorization' }})  
    oauth2c: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'oauth2', 'field_name': 'Authorization' }})  
    

@dataclasses.dataclass
class DirectoryUsersWatchSecurity:
    
    option1: Optional[DirectoryUsersWatchSecurityOption1] = dataclasses.field(default=None, metadata={'security': { 'option': True }})  
    option2: Optional[DirectoryUsersWatchSecurityOption2] = dataclasses.field(default=None, metadata={'security': { 'option': True }})  
    option3: Optional[DirectoryUsersWatchSecurityOption3] = dataclasses.field(default=None, metadata={'security': { 'option': True }})  
    
class DirectoryUsersWatchEventEnum(str, Enum):
    r"""Events to watch for."""
    ADD = 'add'
    DELETE = 'delete'
    MAKE_ADMIN = 'makeAdmin'
    UNDELETE = 'undelete'
    UPDATE = 'update'

class DirectoryUsersWatchOrderByEnum(str, Enum):
    r"""Column to use for sorting results"""
    EMAIL = 'email'
    FAMILY_NAME = 'familyName'
    GIVEN_NAME = 'givenName'

class DirectoryUsersWatchProjectionEnum(str, Enum):
    r"""What subset of fields to fetch for this user."""
    BASIC = 'basic'
    CUSTOM = 'custom'
    FULL = 'full'

class DirectoryUsersWatchSortOrderEnum(str, Enum):
    r"""Whether to return results in ascending or descending order."""
    ASCENDING = 'ASCENDING'
    DESCENDING = 'DESCENDING'

class DirectoryUsersWatchViewTypeEnum(str, Enum):
    r"""Whether to fetch the administrator-only or domain-wide public view of the user. For more information, see [Retrieve a user as a non-administrator](/admin-sdk/directory/v1/guides/manage-users#retrieve_users_non_admin)."""
    ADMIN_VIEW = 'admin_view'
    DOMAIN_PUBLIC = 'domain_public'


@dataclasses.dataclass
class DirectoryUsersWatchRequest:
    
    dollar_xgafv: Optional[shared__xgafv_enum.XgafvEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': '$.xgafv', 'style': 'form', 'explode': True }})
    r"""V1 error format."""  
    access_token: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'access_token', 'style': 'form', 'explode': True }})
    r"""OAuth access token."""  
    alt: Optional[shared_alt_enum.AltEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'alt', 'style': 'form', 'explode': True }})
    r"""Data format for response."""  
    callback: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'callback', 'style': 'form', 'explode': True }})
    r"""JSONP"""  
    channel: Optional[shared_channel.Channel] = dataclasses.field(default=None, metadata={'request': { 'media_type': 'application/json' }})  
    customer: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'customer', 'style': 'form', 'explode': True }})
    r"""Immutable ID of the Google Workspace account. In case of multi-domain, to fetch all users for a customer, fill this field instead of domain."""  
    custom_field_mask: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'customFieldMask', 'style': 'form', 'explode': True }})
    r"""Comma-separated list of schema names. All fields from these schemas are fetched. This should only be set when projection=custom."""  
    domain: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'domain', 'style': 'form', 'explode': True }})
    r"""Name of the domain. Fill this field to get users from only this domain. To return all users in a multi-domain fill customer field instead.\\" """  
    event: Optional[DirectoryUsersWatchEventEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'event', 'style': 'form', 'explode': True }})
    r"""Events to watch for."""  
    fields_: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'fields', 'style': 'form', 'explode': True }})
    r"""Selector specifying which fields to include in a partial response."""  
    key: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'key', 'style': 'form', 'explode': True }})
    r"""API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."""  
    max_results: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'maxResults', 'style': 'form', 'explode': True }})
    r"""Maximum number of results to return."""  
    oauth_token: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'oauth_token', 'style': 'form', 'explode': True }})
    r"""OAuth 2.0 token for the current user."""  
    order_by: Optional[DirectoryUsersWatchOrderByEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'orderBy', 'style': 'form', 'explode': True }})
    r"""Column to use for sorting results"""  
    page_token: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'pageToken', 'style': 'form', 'explode': True }})
    r"""Token to specify next page in the list"""  
    pretty_print: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'prettyPrint', 'style': 'form', 'explode': True }})
    r"""Returns response with indentations and line breaks."""  
    projection: Optional[DirectoryUsersWatchProjectionEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'projection', 'style': 'form', 'explode': True }})
    r"""What subset of fields to fetch for this user."""  
    query: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'query', 'style': 'form', 'explode': True }})
    r"""Query string search. Should be of the form \\"\\". Complete documentation is at https: //developers.google.com/admin-sdk/directory/v1/guides/search-users"""  
    quota_user: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'quotaUser', 'style': 'form', 'explode': True }})
    r"""Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."""  
    show_deleted: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'showDeleted', 'style': 'form', 'explode': True }})
    r"""If set to true, retrieves the list of deleted users. (Default: false)"""  
    sort_order: Optional[DirectoryUsersWatchSortOrderEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'sortOrder', 'style': 'form', 'explode': True }})
    r"""Whether to return results in ascending or descending order."""  
    upload_protocol: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'upload_protocol', 'style': 'form', 'explode': True }})
    r"""Upload protocol for media (e.g. \\"raw\\", \\"multipart\\")."""  
    upload_type: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'uploadType', 'style': 'form', 'explode': True }})
    r"""Legacy upload protocol for media (e.g. \\"media\\", \\"multipart\\")."""  
    view_type: Optional[DirectoryUsersWatchViewTypeEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'viewType', 'style': 'form', 'explode': True }})
    r"""Whether to fetch the administrator-only or domain-wide public view of the user. For more information, see [Retrieve a user as a non-administrator](/admin-sdk/directory/v1/guides/manage-users#retrieve_users_non_admin)."""  
    

@dataclasses.dataclass
class DirectoryUsersWatchResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    channel: Optional[shared_channel.Channel] = dataclasses.field(default=None)
    r"""Successful response"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    