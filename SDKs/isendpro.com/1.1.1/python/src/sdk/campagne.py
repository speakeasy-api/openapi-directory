"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Campagne:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def get_campagne(self, request: operations.GetCampagneRequest) -> operations.GetCampagneResponse:
        r"""Retourne les SMS envoyés sur une période donnée
        Retourne les SMS envoyés sur une période donnée en fonction d'une date de début et d'une date de fin. 
        
        Les dates sont au format YYYY-MM-DD hh:mm. 
        
        Le fichier rapport de campagne est sous la forme d'un fichier zip + contenant un fichier csv contenant le détail des envois.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/campagne'
        
        query_params = utils.get_query_params(operations.GetCampagneRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetCampagneResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[bytes])
                res.get_campagne_200_application_json_binary_string = out
            if utils.match_content_type(content_type, 'file'):
                res.get_campagne_200_file_binary_string = http_res.content
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Erreur])
                res.erreur = out
            if utils.match_content_type(content_type, 'file'):
                res.body = http_res.content

        return res

    