/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { CompositeFilter } from "./compositefilter";
import { FieldFilter } from "./fieldfilter";
import { UnaryFilter } from "./unaryfilter";
import { Expose, Type } from "class-transformer";

/**
 * A filter.
 */
export class Filter extends SpeakeasyBase {
  /**
   * A filter that merges multiple other filters using the given operator.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "compositeFilter" })
  @Type(() => CompositeFilter)
  compositeFilter?: CompositeFilter;

  /**
   * A filter on a specific field.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "fieldFilter" })
  @Type(() => FieldFilter)
  fieldFilter?: FieldFilter;

  /**
   * A filter with a single operand.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "unaryFilter" })
  @Type(() => UnaryFilter)
  unaryFilter?: UnaryFilter;
}
