/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { ClientDetailsApiModel } from "./clientdetailsapimodel";
import { CurrencyDetailsApiModel } from "./currencydetailsapimodel";
import { InvoiceRecurringApiModel } from "./invoicerecurringapimodel";
import { Expose, Transform, Type } from "class-transformer";

/**
 * Indicate the status of the invoice (paid/unpaid/overdue)
 */
export enum InvoiceDetailsApiModelStatusEnum {
  Draft = "Draft",
  Paid = "Paid",
  Unpaid = "Unpaid",
  Overdue = "Overdue",
  Void = "Void",
}

export class InvoiceDetailsApiModel extends SpeakeasyBase {
  /**
   * Security access token used for accessing the invoice anonymously
   */
  @SpeakeasyMetadata()
  @Expose({ name: "AccessToken" })
  accessToken?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "Client" })
  @Type(() => ClientDetailsApiModel)
  client?: ClientDetailsApiModel;

  /**
   * Indicate from which invoice this invoice has been cloned from
   */
  @SpeakeasyMetadata()
  @Expose({ name: "ClonedFromId" })
  clonedFromId?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "Currency" })
  @Type(() => CurrencyDetailsApiModel)
  currency?: CurrencyDetailsApiModel;

  /**
   * Amount that goes as a discount
   */
  @SpeakeasyMetadata()
  @Expose({ name: "DiscountAmount" })
  discountAmount?: number;

  /**
   * Indicates when the invoice will be proclamed as due
   */
  @SpeakeasyMetadata()
  @Expose({ name: "Duedate" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  duedate?: Date;

  /**
   * Indicate that the invoice allows the user to pay the invoice partially
   */
  @SpeakeasyMetadata()
  @Expose({ name: "EnablePartialPayments" })
  enablePartialPayments?: boolean;

  /**
   * Invoice id
   */
  @SpeakeasyMetadata()
  @Expose({ name: "Id" })
  id?: number;

  /**
   * Hold the id of the invoice category
   */
  @SpeakeasyMetadata()
  @Expose({ name: "InvoiceCategoryId" })
  invoiceCategoryId?: number;

  /**
   * Indicates when the invoice was issued
   */
  @SpeakeasyMetadata()
  @Expose({ name: "IssuedOn" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  issuedOn?: Date;

  /**
   * Internal note regarding the invoice
   */
  @SpeakeasyMetadata()
  @Expose({ name: "Notes" })
  notes?: string;

  /**
   * Unique invoice number
   */
  @SpeakeasyMetadata()
  @Expose({ name: "Number" })
  number?: string;

  /**
   * Unique number generated by the buyer
   */
  @SpeakeasyMetadata()
  @Expose({ name: "PoNumber" })
  poNumber?: string;

  /**
   * Definition of invoice recurring profile
   */
  @SpeakeasyMetadata()
  @Expose({ name: "RecurringProfile" })
  @Type(() => InvoiceRecurringApiModel)
  recurringProfile?: InvoiceRecurringApiModel;

  /**
   * Hold the id of the recurring profile
   */
  @SpeakeasyMetadata()
  @Expose({ name: "RecurringProfileId" })
  recurringProfileId?: number;

  /**
   * Should send email reminders to client?
   */
  @SpeakeasyMetadata()
  @Expose({ name: "ShouldSendReminders" })
  shouldSendReminders?: boolean;

  /**
   * Indicate the status of the invoice (paid/unpaid/overdue)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "Status" })
  status?: InvoiceDetailsApiModelStatusEnum;

  /**
   * Total amount of the invoice without tax
   */
  @SpeakeasyMetadata()
  @Expose({ name: "SubTotalAmount" })
  subTotalAmount?: number;

  /**
   * Amount that goes to the tax
   */
  @SpeakeasyMetadata()
  @Expose({ name: "TaxAmount" })
  taxAmount?: number;

  /**
   * Terms of agreement
   */
  @SpeakeasyMetadata()
  @Expose({ name: "Terms" })
  terms?: string;

  /**
   * Total amount of the invoice with tax
   */
  @SpeakeasyMetadata()
  @Expose({ name: "TotalAmount" })
  totalAmount?: number;
}
