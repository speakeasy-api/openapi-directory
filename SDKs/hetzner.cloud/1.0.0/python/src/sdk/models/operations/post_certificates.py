"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Any, Optional

class PostCertificatesCreateCertificateRequestTypeEnum(str, Enum):
    r"""Choose between uploading a Certificate in PEM format or requesting a managed *Let's Encrypt* Certificate. If omitted defaults to `uploaded`."""
    UPLOADED = 'uploaded'
    MANAGED = 'managed'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PostCertificatesCreateCertificateRequest:
    
    name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name') }})
    r"""Name of the Certificate"""  
    certificate: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('certificate'), 'exclude': lambda f: f is None }})
    r"""Certificate and chain in PEM format, in order so that each record directly certifies the one preceding. Required for type `uploaded` Certificates."""  
    domain_names: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('domain_names'), 'exclude': lambda f: f is None }})
    r"""Domains and subdomains that should be contained in the Certificate issued by *Let's Encrypt*. Required for type `managed` Certificates."""  
    labels: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('labels'), 'exclude': lambda f: f is None }})
    r"""User-defined labels (key-value pairs)"""  
    private_key: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('private_key'), 'exclude': lambda f: f is None }})
    r"""Certificate key in PEM format. Required for type `uploaded` Certificates."""  
    type: Optional[PostCertificatesCreateCertificateRequestTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})
    r"""Choose between uploading a Certificate in PEM format or requesting a managed *Let's Encrypt* Certificate. If omitted defaults to `uploaded`."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PostCertificatesCreateCertificateResponseNullableActionError:
    r"""Error message for the Action if error occurred, otherwise null"""
    
    code: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('code') }})
    r"""Fixed machine readable code"""  
    message: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('message') }})
    r"""Humanized error message"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PostCertificatesCreateCertificateResponseNullableActionResources:
    
    id: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id') }})
    r"""ID of the Resource"""  
    type: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type') }})
    r"""Type of resource referenced"""  
    
class PostCertificatesCreateCertificateResponseNullableActionStatusEnum(str, Enum):
    r"""Status of the Action"""
    SUCCESS = 'success'
    RUNNING = 'running'
    ERROR = 'error'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PostCertificatesCreateCertificateResponseNullableAction:
    
    command: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('command') }})
    r"""Command executed in the Action"""  
    error: PostCertificatesCreateCertificateResponseNullableActionError = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('error') }})
    r"""Error message for the Action if error occurred, otherwise null"""  
    finished: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('finished') }})
    r"""Point in time when the Action was finished (in ISO-8601 format). Only set if the Action is finished otherwise null."""  
    id: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id') }})
    r"""ID of the Resource"""  
    progress: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('progress') }})
    r"""Progress of Action in percent"""  
    resources: list[PostCertificatesCreateCertificateResponseNullableActionResources] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('resources') }})
    r"""Resources the Action relates to"""  
    started: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('started') }})
    r"""Point in time when the Action was started (in ISO-8601 format)"""  
    status: PostCertificatesCreateCertificateResponseNullableActionStatusEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status') }})
    r"""Status of the Action"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PostCertificatesCreateCertificateResponseCertificateStatusError:
    r"""If issuance or renewal reports `failed`, this property contains information about what happened"""
    
    code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('code'), 'exclude': lambda f: f is None }})  
    message: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('message'), 'exclude': lambda f: f is None }})  
    
class PostCertificatesCreateCertificateResponseCertificateStatusIssuanceEnum(str, Enum):
    r"""Status of the issuance process of the Certificate"""
    PENDING = 'pending'
    COMPLETED = 'completed'
    FAILED = 'failed'

class PostCertificatesCreateCertificateResponseCertificateStatusRenewalEnum(str, Enum):
    r"""Status of the renewal process of the Certificate."""
    SCHEDULED = 'scheduled'
    PENDING = 'pending'
    FAILED = 'failed'
    UNAVAILABLE = 'unavailable'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PostCertificatesCreateCertificateResponseCertificateStatus:
    r"""Current status of a type `managed` Certificate, always *null* for type `uploaded` Certificates"""
    
    error: Optional[PostCertificatesCreateCertificateResponseCertificateStatusError] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('error'), 'exclude': lambda f: f is None }})
    r"""If issuance or renewal reports `failed`, this property contains information about what happened"""  
    issuance: Optional[PostCertificatesCreateCertificateResponseCertificateStatusIssuanceEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('issuance'), 'exclude': lambda f: f is None }})
    r"""Status of the issuance process of the Certificate"""  
    renewal: Optional[PostCertificatesCreateCertificateResponseCertificateStatusRenewalEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('renewal'), 'exclude': lambda f: f is None }})
    r"""Status of the renewal process of the Certificate."""  
    
class PostCertificatesCreateCertificateResponseCertificateTypeEnum(str, Enum):
    r"""Type of the Certificate"""
    UPLOADED = 'uploaded'
    MANAGED = 'managed'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PostCertificatesCreateCertificateResponseCertificateUsedBy:
    
    id: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id') }})
    r"""ID of resource referenced"""  
    type: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type') }})
    r"""Type of resource referenced"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PostCertificatesCreateCertificateResponseCertificate:
    
    certificate: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('certificate') }})
    r"""Certificate and chain in PEM format, in order so that each record directly certifies the one preceding"""  
    created: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('created') }})
    r"""Point in time when the Resource was created (in ISO-8601 format)"""  
    domain_names: list[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('domain_names') }})
    r"""Domains and subdomains covered by the Certificate"""  
    fingerprint: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('fingerprint') }})
    r"""SHA256 fingerprint of the Certificate"""  
    id: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id') }})
    r"""ID of the Resource"""  
    labels: dict[str, str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('labels') }})
    r"""User-defined labels (key-value pairs)"""  
    name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name') }})
    r"""Name of the Resource. Must be unique per Project."""  
    not_valid_after: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('not_valid_after') }})
    r"""Point in time when the Certificate stops being valid (in ISO-8601 format)"""  
    not_valid_before: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('not_valid_before') }})
    r"""Point in time when the Certificate becomes valid (in ISO-8601 format)"""  
    used_by: list[PostCertificatesCreateCertificateResponseCertificateUsedBy] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('used_by') }})
    r"""Resources currently using the Certificate"""  
    status: Optional[PostCertificatesCreateCertificateResponseCertificateStatus] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status'), 'exclude': lambda f: f is None }})
    r"""Current status of a type `managed` Certificate, always *null* for type `uploaded` Certificates"""  
    type: Optional[PostCertificatesCreateCertificateResponseCertificateTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})
    r"""Type of the Certificate"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PostCertificatesCreateCertificateResponse:
    r"""The `certificate` key contains the Certificate that was just created. For type `managed` Certificates the `action` key contains the Action that allows for tracking the issuance process. For type `uploaded` Certificates the `action` is always null."""
    
    certificate: PostCertificatesCreateCertificateResponseCertificate = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('certificate') }})  
    action: Optional[PostCertificatesCreateCertificateResponseNullableAction] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('action'), 'exclude': lambda f: f is None }})  
    

@dataclasses.dataclass
class PostCertificatesResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    create_certificate_response: Optional[PostCertificatesCreateCertificateResponse] = dataclasses.field(default=None)
    r"""The `certificate` key contains the Certificate that was just created. For type `managed` Certificates the `action` key contains the Action that allows for tracking the issuance process. For type `uploaded` Certificates the `action` is always null."""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    