// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// UnidirectionalEventTypeEnum - Discriminant type for identifying kind of exchange
type UnidirectionalEventTypeEnum string

const (
	UnidirectionalEventTypeEnumReqRespPair UnidirectionalEventTypeEnum = "reqRespPair"
	UnidirectionalEventTypeEnumUnidirEvent UnidirectionalEventTypeEnum = "unidirEvent"
)

func (e UnidirectionalEventTypeEnum) ToPointer() *UnidirectionalEventTypeEnum {
	return &e
}

func (e *UnidirectionalEventTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "reqRespPair":
		fallthrough
	case "unidirEvent":
		*e = UnidirectionalEventTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UnidirectionalEventTypeEnum: %v", v)
	}
}

// UnidirectionalEvent - Abstract bean representing a Service or API Exchange.
type UnidirectionalEvent struct {
	EventMessage EventMessage `json:"eventMessage"`
	// Discriminant type for identifying kind of exchange
	Type UnidirectionalEventTypeEnum `json:"type"`
}
