"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import googlecloudintegrationsv1alphaaccesstoken as shared_googlecloudintegrationsv1alphaaccesstoken
from ..shared import googlecloudintegrationsv1alphaparametermap as shared_googlecloudintegrationsv1alphaparametermap
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class GoogleCloudIntegrationsV1alphaOAuth2ResourceOwnerCredentialsRequestTypeEnum(str, Enum):
    r"""Represent how to pass parameters to fetch access token"""
    REQUEST_TYPE_UNSPECIFIED = 'REQUEST_TYPE_UNSPECIFIED'
    REQUEST_BODY = 'REQUEST_BODY'
    QUERY_PARAMETERS = 'QUERY_PARAMETERS'
    ENCODED_HEADER = 'ENCODED_HEADER'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GoogleCloudIntegrationsV1alphaOAuth2ResourceOwnerCredentials:
    r"""For resource owner credentials grant, the client will ask the user for their authorization credentials (ususally a username and password) and send a POST request to the authorization server. The authorization server will respond with a JSON object containing the access token."""
    
    access_token: Optional[shared_googlecloudintegrationsv1alphaaccesstoken.GoogleCloudIntegrationsV1alphaAccessToken] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('accessToken'), 'exclude': lambda f: f is None }})
    r"""The access token represents the authorization of a specific application to access specific parts of a userâ€™s data."""  
    client_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('clientId'), 'exclude': lambda f: f is None }})
    r"""The client's ID."""  
    client_secret: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('clientSecret'), 'exclude': lambda f: f is None }})
    r"""The client's secret."""  
    password: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('password'), 'exclude': lambda f: f is None }})
    r"""The user's password."""  
    request_type: Optional[GoogleCloudIntegrationsV1alphaOAuth2ResourceOwnerCredentialsRequestTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('requestType'), 'exclude': lambda f: f is None }})
    r"""Represent how to pass parameters to fetch access token"""  
    scope: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('scope'), 'exclude': lambda f: f is None }})
    r"""A space-delimited list of requested scope permissions."""  
    token_endpoint: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tokenEndpoint'), 'exclude': lambda f: f is None }})
    r"""The token endpoint is used by the client to obtain an access token by presenting its authorization grant or refresh token."""  
    token_params: Optional[shared_googlecloudintegrationsv1alphaparametermap.GoogleCloudIntegrationsV1alphaParameterMap] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tokenParams'), 'exclude': lambda f: f is None }})
    r"""A generic multi-map that holds key value pairs. They keys and values can be of any type, unless specified."""  
    username: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('username'), 'exclude': lambda f: f is None }})
    r"""The user's username."""  
    