"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import cookieobject as shared_cookieobject
from ..shared import headerobject as shared_headerobject
from ..shared import querystringobject as shared_querystringobject
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CacheSettings:
    r"""<p>Describes the cache settings of an Amazon Lightsail content delivery network (CDN) distribution.</p> <p>These settings apply only to your distribution's <code>cacheBehaviors</code> (including the <code>defaultCacheBehavior</code>) that have a <code>behavior</code> of <code>cache</code>.</p>"""
    
    allowed_http_methods: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('allowedHTTPMethods'), 'exclude': lambda f: f is None }})  
    cached_http_methods: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cachedHTTPMethods'), 'exclude': lambda f: f is None }})  
    default_ttl: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('defaultTTL'), 'exclude': lambda f: f is None }})  
    forwarded_cookies: Optional[shared_cookieobject.CookieObject] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('forwardedCookies'), 'exclude': lambda f: f is None }})  
    forwarded_headers: Optional[shared_headerobject.HeaderObject] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('forwardedHeaders'), 'exclude': lambda f: f is None }})  
    forwarded_query_strings: Optional[shared_querystringobject.QueryStringObject] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('forwardedQueryStrings'), 'exclude': lambda f: f is None }})  
    maximum_ttl: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('maximumTTL'), 'exclude': lambda f: f is None }})  
    minimum_ttl: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('minimumTTL'), 'exclude': lambda f: f is None }})  
    