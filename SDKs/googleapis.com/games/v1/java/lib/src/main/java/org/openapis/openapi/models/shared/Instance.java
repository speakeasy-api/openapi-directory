/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Instance - The Instance resource.
 */
public class Instance {
    /**
     * URI which shows where a user can acquire this instance.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("acquisitionUri")
    public String acquisitionUri;

    public Instance withAcquisitionUri(String acquisitionUri) {
        this.acquisitionUri = acquisitionUri;
        return this;
    }
    
    /**
     * The Android instance details resource.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("androidInstance")
    public InstanceAndroidDetails androidInstance;

    public Instance withAndroidInstance(InstanceAndroidDetails androidInstance) {
        this.androidInstance = androidInstance;
        return this;
    }
    
    /**
     * The iOS details resource.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("iosInstance")
    public InstanceIosDetails iosInstance;

    public Instance withIosInstance(InstanceIosDetails iosInstance) {
        this.iosInstance = iosInstance;
        return this;
    }
    
    /**
     * Uniquely identifies the type of this resource. Value is always the fixed string `games#instance`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("kind")
    public String kind;

    public Instance withKind(String kind) {
        this.kind = kind;
        return this;
    }
    
    /**
     * Localized display name.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    public String name;

    public Instance withName(String name) {
        this.name = name;
        return this;
    }
    
    /**
     * The platform type.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("platformType")
    public InstancePlatformTypeEnum platformType;

    public Instance withPlatformType(InstancePlatformTypeEnum platformType) {
        this.platformType = platformType;
        return this;
    }
    
    /**
     * Flag to show if this game instance supports realtime play.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("realtimePlay")
    public Boolean realtimePlay;

    public Instance withRealtimePlay(Boolean realtimePlay) {
        this.realtimePlay = realtimePlay;
        return this;
    }
    
    /**
     * Flag to show if this game instance supports turn based play.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("turnBasedPlay")
    public Boolean turnBasedPlay;

    public Instance withTurnBasedPlay(Boolean turnBasedPlay) {
        this.turnBasedPlay = turnBasedPlay;
        return this;
    }
    
    /**
     * The Web details resource.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("webInstance")
    public InstanceWebDetails webInstance;

    public Instance withWebInstance(InstanceWebDetails webInstance) {
        this.webInstance = webInstance;
        return this;
    }
    
    public Instance(){}
}
