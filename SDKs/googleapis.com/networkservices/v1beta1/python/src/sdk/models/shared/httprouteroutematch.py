"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import httprouteheadermatch as shared_httprouteheadermatch
from ..shared import httproutequeryparametermatch as shared_httproutequeryparametermatch
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class HTTPRouteRouteMatch:
    r"""RouteMatch defines specifications used to match requests. If multiple match types are set, this RouteMatch will match if ALL type of matches are matched."""
    
    full_path_match: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('fullPathMatch'), 'exclude': lambda f: f is None }})
    r"""The HTTP request path value should exactly match this value. Only one of full_path_match, prefix_match, or regex_match should be used."""  
    headers: Optional[list[shared_httprouteheadermatch.HTTPRouteHeaderMatch]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('headers'), 'exclude': lambda f: f is None }})
    r"""Specifies a list of HTTP request headers to match against. ALL of the supplied headers must be matched."""  
    ignore_case: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ignoreCase'), 'exclude': lambda f: f is None }})
    r"""Specifies if prefix_match and full_path_match matches are case sensitive. The default value is false."""  
    prefix_match: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('prefixMatch'), 'exclude': lambda f: f is None }})
    r"""The HTTP request path value must begin with specified prefix_match. prefix_match must begin with a /. Only one of full_path_match, prefix_match, or regex_match should be used."""  
    query_parameters: Optional[list[shared_httproutequeryparametermatch.HTTPRouteQueryParameterMatch]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('queryParameters'), 'exclude': lambda f: f is None }})
    r"""Specifies a list of query parameters to match against. ALL of the query parameters must be matched."""  
    regex_match: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('regexMatch'), 'exclude': lambda f: f is None }})
    r"""The HTTP request path value must satisfy the regular expression specified by regex_match after removing any query parameters and anchor supplied with the original URL. For regular expression grammar, please see https://github.com/google/re2/wiki/Syntax Only one of full_path_match, prefix_match, or regex_match should be used."""  
    