// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// CloudStorageEgressWorkloadDestinationContinentEnum - Where the data is sent to.
type CloudStorageEgressWorkloadDestinationContinentEnum string

const (
	CloudStorageEgressWorkloadDestinationContinentEnumDestinationContinentUnspecified  CloudStorageEgressWorkloadDestinationContinentEnum = "DESTINATION_CONTINENT_UNSPECIFIED"
	CloudStorageEgressWorkloadDestinationContinentEnumDestinationContinentAsiaPacific  CloudStorageEgressWorkloadDestinationContinentEnum = "DESTINATION_CONTINENT_ASIA_PACIFIC"
	CloudStorageEgressWorkloadDestinationContinentEnumDestinationContinentAutralia     CloudStorageEgressWorkloadDestinationContinentEnum = "DESTINATION_CONTINENT_AUTRALIA"
	CloudStorageEgressWorkloadDestinationContinentEnumDestinationContinentEurope       CloudStorageEgressWorkloadDestinationContinentEnum = "DESTINATION_CONTINENT_EUROPE"
	CloudStorageEgressWorkloadDestinationContinentEnumDestinationContinentNorthAmerica CloudStorageEgressWorkloadDestinationContinentEnum = "DESTINATION_CONTINENT_NORTH_AMERICA"
	CloudStorageEgressWorkloadDestinationContinentEnumDestinationContinentSouthAmerica CloudStorageEgressWorkloadDestinationContinentEnum = "DESTINATION_CONTINENT_SOUTH_AMERICA"
)

func (e CloudStorageEgressWorkloadDestinationContinentEnum) ToPointer() *CloudStorageEgressWorkloadDestinationContinentEnum {
	return &e
}

func (e *CloudStorageEgressWorkloadDestinationContinentEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "DESTINATION_CONTINENT_UNSPECIFIED":
		fallthrough
	case "DESTINATION_CONTINENT_ASIA_PACIFIC":
		fallthrough
	case "DESTINATION_CONTINENT_AUTRALIA":
		fallthrough
	case "DESTINATION_CONTINENT_EUROPE":
		fallthrough
	case "DESTINATION_CONTINENT_NORTH_AMERICA":
		fallthrough
	case "DESTINATION_CONTINENT_SOUTH_AMERICA":
		*e = CloudStorageEgressWorkloadDestinationContinentEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CloudStorageEgressWorkloadDestinationContinentEnum: %v", v)
	}
}

// CloudStorageEgressWorkloadSourceContinentEnum - Where the data comes from.
type CloudStorageEgressWorkloadSourceContinentEnum string

const (
	CloudStorageEgressWorkloadSourceContinentEnumSourceContinentUnspecified  CloudStorageEgressWorkloadSourceContinentEnum = "SOURCE_CONTINENT_UNSPECIFIED"
	CloudStorageEgressWorkloadSourceContinentEnumSourceContinentAsiaPacific  CloudStorageEgressWorkloadSourceContinentEnum = "SOURCE_CONTINENT_ASIA_PACIFIC"
	CloudStorageEgressWorkloadSourceContinentEnumSourceContinentAustralia    CloudStorageEgressWorkloadSourceContinentEnum = "SOURCE_CONTINENT_AUSTRALIA"
	CloudStorageEgressWorkloadSourceContinentEnumSourceContinentEurope       CloudStorageEgressWorkloadSourceContinentEnum = "SOURCE_CONTINENT_EUROPE"
	CloudStorageEgressWorkloadSourceContinentEnumSourceContinentNorthAmerica CloudStorageEgressWorkloadSourceContinentEnum = "SOURCE_CONTINENT_NORTH_AMERICA"
	CloudStorageEgressWorkloadSourceContinentEnumSourceContinentSouthAmerica CloudStorageEgressWorkloadSourceContinentEnum = "SOURCE_CONTINENT_SOUTH_AMERICA"
)

func (e CloudStorageEgressWorkloadSourceContinentEnum) ToPointer() *CloudStorageEgressWorkloadSourceContinentEnum {
	return &e
}

func (e *CloudStorageEgressWorkloadSourceContinentEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "SOURCE_CONTINENT_UNSPECIFIED":
		fallthrough
	case "SOURCE_CONTINENT_ASIA_PACIFIC":
		fallthrough
	case "SOURCE_CONTINENT_AUSTRALIA":
		fallthrough
	case "SOURCE_CONTINENT_EUROPE":
		fallthrough
	case "SOURCE_CONTINENT_NORTH_AMERICA":
		fallthrough
	case "SOURCE_CONTINENT_SOUTH_AMERICA":
		*e = CloudStorageEgressWorkloadSourceContinentEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CloudStorageEgressWorkloadSourceContinentEnum: %v", v)
	}
}

// CloudStorageEgressWorkload - Specification of a network type. Network egress within Google Cloud applies when you move or copy data from one Cloud Storage bucket to another or when another Google Cloud service accesses data in your Cloud Storage bucket.This includes the network egress within Google Cloud and the general network usage.
type CloudStorageEgressWorkload struct {
	// Where the data is sent to.
	DestinationContinent *CloudStorageEgressWorkloadDestinationContinentEnum `json:"destinationContinent,omitempty"`
	// An amount of usage over a time frame.
	EgressRate *Usage `json:"egressRate,omitempty"`
	// Where the data comes from.
	SourceContinent *CloudStorageEgressWorkloadSourceContinentEnum `json:"sourceContinent,omitempty"`
}
