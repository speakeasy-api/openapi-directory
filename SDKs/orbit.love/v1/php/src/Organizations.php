<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Organizations 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * List organizations in a workspace
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetWorkspaceSlugOrganizationsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetWorkspaceSlugOrganizationsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetWorkspaceSlugOrganizationsResponse
     */
	public function getWorkspaceSlugOrganizations(
        \OpenAPI\OpenAPI\Models\Operations\GetWorkspaceSlugOrganizationsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetWorkspaceSlugOrganizationsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetWorkspaceSlugOrganizationsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{workspace_slug}/organizations', \OpenAPI\OpenAPI\Models\Operations\GetWorkspaceSlugOrganizationsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetWorkspaceSlugOrganizationsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetWorkspaceSlugOrganizationsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Get an organization
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetWorkspaceSlugOrganizationsOrganizationIdRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetWorkspaceSlugOrganizationsOrganizationIdSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetWorkspaceSlugOrganizationsOrganizationIdResponse
     */
	public function getWorkspaceSlugOrganizationsOrganizationId(
        \OpenAPI\OpenAPI\Models\Operations\GetWorkspaceSlugOrganizationsOrganizationIdRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetWorkspaceSlugOrganizationsOrganizationIdSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetWorkspaceSlugOrganizationsOrganizationIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{workspace_slug}/organizations/{organization_id}', \OpenAPI\OpenAPI\Models\Operations\GetWorkspaceSlugOrganizationsOrganizationIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetWorkspaceSlugOrganizationsOrganizationIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Update an organization
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PutWorkspaceSlugOrganizationsOrganizationIdRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PutWorkspaceSlugOrganizationsOrganizationIdSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PutWorkspaceSlugOrganizationsOrganizationIdResponse
     */
	public function putWorkspaceSlugOrganizationsOrganizationId(
        \OpenAPI\OpenAPI\Models\Operations\PutWorkspaceSlugOrganizationsOrganizationIdRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PutWorkspaceSlugOrganizationsOrganizationIdSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PutWorkspaceSlugOrganizationsOrganizationIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{workspace_slug}/organizations/{organization_id}', \OpenAPI\OpenAPI\Models\Operations\PutWorkspaceSlugOrganizationsOrganizationIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "organization", "json");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PutWorkspaceSlugOrganizationsOrganizationIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 422) {
        }

        return $response;
    }
}