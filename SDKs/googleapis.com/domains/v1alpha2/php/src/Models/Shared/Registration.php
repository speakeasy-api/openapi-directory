<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Shared;


/**
 * Registration - The `Registration` resource facilitates managing and configuring domain name registrations. There are several ways to create a new `Registration` resource: To create a new `Registration` resource, find a suitable domain name by calling the `SearchDomains` method with a query to see available domain name options. After choosing a name, call `RetrieveRegisterParameters` to ensure availability and obtain information like pricing, which is needed to build a call to `RegisterDomain`. Another way to create a new `Registration` is to transfer an existing domain from another registrar. First, go to the current registrar to unlock the domain for transfer and retrieve the domain's transfer authorization code. Then call `RetrieveTransferParameters` to confirm that the domain is unlocked and to get values needed to build a call to `TransferDomain`. Finally, you can create a new `Registration` by importing an existing domain managed with [Google Domains](https://domains.google/). First, call `RetrieveImportableDomains` to list domains to which the calling user has sufficient access. Then call `ImportDomain` on any domain names you want to use with Cloud Domains.
 * 
 * @package OpenAPI\OpenAPI\Models\Shared
 * @access public
 */
class Registration
{
    /**
     * Defines the contact information associated with a `Registration`. [ICANN](https://icann.org/) requires all domain names to have associated contact information. The `registrant_contact` is considered the domain's legal owner, and often the other contacts are identical.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\ContactSettings $contactSettings
     */
	#[\JMS\Serializer\Annotation\SerializedName('contactSettings')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\ContactSettings')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?ContactSettings $contactSettings = null;
    
    /**
     * Output only. The creation timestamp of the `Registration` resource.
     * 
     * @var ?string $createTime
     */
	#[\JMS\Serializer\Annotation\SerializedName('createTime')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $createTime = null;
    
    /**
     * Defines the DNS configuration of a `Registration`, including name servers, DNSSEC, and glue records.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\DnsSettings $dnsSettings
     */
	#[\JMS\Serializer\Annotation\SerializedName('dnsSettings')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\DnsSettings')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?DnsSettings $dnsSettings = null;
    
    /**
     * Required. Immutable. The domain name. Unicode domain names must be expressed in Punycode format.
     * 
     * @var ?string $domainName
     */
	#[\JMS\Serializer\Annotation\SerializedName('domainName')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $domainName = null;
    
    /**
     * Output only. The expiration timestamp of the `Registration`.
     * 
     * @var ?string $expireTime
     */
	#[\JMS\Serializer\Annotation\SerializedName('expireTime')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $expireTime = null;
    
    /**
     * Output only. The set of issues with the `Registration` that require attention.
     * 
     * @var ?array<\OpenAPI\OpenAPI\Models\Shared\RegistrationIssuesEnum> $issues
     */
	#[\JMS\Serializer\Annotation\SerializedName('issues')]
    #[\JMS\Serializer\Annotation\Type('array<enum<OpenAPI\OpenAPI\Models\Shared\RegistrationIssuesEnum>>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $issues = null;
    
    /**
     * Set of labels associated with the `Registration`.
     * 
     * @var ?array<string, string> $labels
     */
	#[\JMS\Serializer\Annotation\SerializedName('labels')]
    #[\JMS\Serializer\Annotation\Type('array<string, string>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $labels = null;
    
    /**
     * Defines renewal, billing, and transfer settings for a `Registration`.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\ManagementSettings $managementSettings
     */
	#[\JMS\Serializer\Annotation\SerializedName('managementSettings')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\ManagementSettings')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?ManagementSettings $managementSettings = null;
    
    /**
     * Output only. Name of the `Registration` resource, in the format `projects/* /locations/* /registrations/`.
     * 
     * @var ?string $name
     */
	#[\JMS\Serializer\Annotation\SerializedName('name')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $name = null;
    
    /**
     * Defines the contact information associated with a `Registration`. [ICANN](https://icann.org/) requires all domain names to have associated contact information. The `registrant_contact` is considered the domain's legal owner, and often the other contacts are identical.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\ContactSettings $pendingContactSettings
     */
	#[\JMS\Serializer\Annotation\SerializedName('pendingContactSettings')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\ContactSettings')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?ContactSettings $pendingContactSettings = null;
    
    /**
     * Output only. The reason the domain registration failed. Only set for domains in REGISTRATION_FAILED state.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\RegistrationRegisterFailureReasonEnum $registerFailureReason
     */
	#[\JMS\Serializer\Annotation\SerializedName('registerFailureReason')]
    #[\JMS\Serializer\Annotation\Type('enum<OpenAPI\OpenAPI\Models\Shared\RegistrationRegisterFailureReasonEnum>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?RegistrationRegisterFailureReasonEnum $registerFailureReason = null;
    
    /**
     * Output only. The state of the `Registration`
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\RegistrationStateEnum $state
     */
	#[\JMS\Serializer\Annotation\SerializedName('state')]
    #[\JMS\Serializer\Annotation\Type('enum<OpenAPI\OpenAPI\Models\Shared\RegistrationStateEnum>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?RegistrationStateEnum $state = null;
    
    /**
     * Output only. Set of options for the `contact_settings.privacy` field that this `Registration` supports.
     * 
     * @var ?array<\OpenAPI\OpenAPI\Models\Shared\RegistrationSupportedPrivacyEnum> $supportedPrivacy
     */
	#[\JMS\Serializer\Annotation\SerializedName('supportedPrivacy')]
    #[\JMS\Serializer\Annotation\Type('array<enum<OpenAPI\OpenAPI\Models\Shared\RegistrationSupportedPrivacyEnum>>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $supportedPrivacy = null;
    
    /**
     * Output only. The reason the domain transfer failed. Only set for domains in TRANSFER_FAILED state.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\RegistrationTransferFailureReasonEnum $transferFailureReason
     */
	#[\JMS\Serializer\Annotation\SerializedName('transferFailureReason')]
    #[\JMS\Serializer\Annotation\Type('enum<OpenAPI\OpenAPI\Models\Shared\RegistrationTransferFailureReasonEnum>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?RegistrationTransferFailureReasonEnum $transferFailureReason = null;
    
	public function __construct()
	{
		$this->contactSettings = null;
		$this->createTime = null;
		$this->dnsSettings = null;
		$this->domainName = null;
		$this->expireTime = null;
		$this->issues = null;
		$this->labels = null;
		$this->managementSettings = null;
		$this->name = null;
		$this->pendingContactSettings = null;
		$this->registerFailureReason = null;
		$this->state = null;
		$this->supportedPrivacy = null;
		$this->transferFailureReason = null;
	}
}
