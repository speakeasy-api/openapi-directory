// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

type PepOrderSecurity struct {
	UserKey string `security:"scheme,type=apiKey,subtype=header,name=user_key"`
}

// PepOrderRequestBody - Optional parameters to enhance search
type PepOrderRequestBody struct {
	// Optional parameter for declaring alias names when doing a person search (seperated by commas)
	Aliases *string `form:"name=Aliases"`
	// Optional name of Country to assist in identifying matches based upon location/geography.
	Country *string `form:"name=Country"`
	// Optional parameter for date of birth name when doing a person search
	Dob *string `form:"name=DOB"`
	// Optional parameter for last name when doing a person search
	FamilyName *string `form:"name=FamilyName"`
	// Optional parameter for restricting search when doing a person search (seperated by commas)
	Filters *string `form:"name=Filters"`
	// Optional parameter for first name when doing a person search
	GivenName *string `form:"name=GivenName"`
	// Optional Legal Entity Identifier for additional business identifier verification.
	Lei *string `form:"name=LEI"`
	// Optional name of City or Locale to assist in identifying matches based upon location/geography.
	Locale *string `form:"name=Locale"`
	// Optional parameter for selecting only specific media lists. By default all lists are queried
	Medialists *string `form:"name=Medialists"`
	// Optional parameter for middle name when doing a person search
	MiddleName *string `form:"name=MiddleName"`
	// If this Pep Sanction Check should be continuesly monitored.
	Monitoring *bool `form:"name=Monitoring"`
	// Optional parameter for selecting only specific pep lists. By default all lists are queried
	Peplists *string `form:"name=Peplists"`
	// Optional name of Region or State to assist in identifying matches based upon location/geography.
	Region *string `form:"name=Region"`
	// Optional parameter for enabling SmartMatch to retrieve more results
	SmartMatch *bool `form:"name=SmartMatch"`
	// Optional parameter for selecting only specific watch lists. By default all lists are queried
	Watchlists *string `form:"name=Watchlists"`
	// If Monitoring is enabled this parameter is required. This is where updates will be sent to
	Webhook *string `form:"name=Webhook"`
}

// PepOrderTypeEnum - Type (Business or Person) of the requested Pep Sanction Check
type PepOrderTypeEnum string

const (
	PepOrderTypeEnumUnknown PepOrderTypeEnum = ""
	PepOrderTypeEnumB       PepOrderTypeEnum = "B"
	PepOrderTypeEnumP       PepOrderTypeEnum = "P"
)

func (e *PepOrderTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "":
		fallthrough
	case "B":
		fallthrough
	case "P":
		*e = PepOrderTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PepOrderTypeEnum: %s", s)
	}
}

type PepOrderRequest struct {
	// Optional parameters to enhance search
	RequestBody *PepOrderRequestBody `request:"mediaType=application/x-www-form-urlencoded"`
	// Search string for the Pep Sanction Check
	Search string `pathParam:"style=simple,explode=false,name=search"`
	// Type (Business or Person) of the requested Pep Sanction Check
	Type PepOrderTypeEnum `pathParam:"style=simple,explode=false,name=type"`
}

// PepOrderDefaultApplicationJSON - Detailed information about the error
type PepOrderDefaultApplicationJSON struct {
	Code    int     `json:"code"`
	Fault   *string `json:"fault,omitempty"`
	Message string  `json:"message"`
	Tag     string  `json:"tag"`
}

// PepOrder200ApplicationJSON - Product details
type PepOrder200ApplicationJSON struct {
	Availability string   `json:"availability"`
	Category     string   `json:"category"`
	CountryCode  string   `json:"countryCode"`
	Description  string   `json:"description"`
	HasOptions   bool     `json:"hasOptions"`
	Options      []string `json:"options"`
	Price        float32  `json:"price"`
	Provider     string   `json:"provider"`
	Sku          string   `json:"sku"`
	Type         string   `json:"type"`
}

type PepOrderResponse struct {
	ContentType string
	// Product details
	PepOrder200ApplicationJSONObject *PepOrder200ApplicationJSON
	// Detailed information about the error
	PepOrderDefaultApplicationJSONObject *PepOrderDefaultApplicationJSON
	StatusCode                           int
	RawResponse                          *http.Response
}
