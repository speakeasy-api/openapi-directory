// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"net/http"
	"openapi/pkg/models/shared"
	"time"
)

var ListCompositionServerList = []string{
	"https://video.twilio.com",
}

type ListCompositionSecurity struct {
	AccountSidAuthToken shared.SchemeAccountSidAuthToken `security:"scheme,type=http,subtype=basic"`
}

type ListCompositionQueryParams struct {
	// Read only Composition resources created on or after this [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date-time with time zone.
	DateCreatedAfter *time.Time `queryParam:"style=form,explode=true,name=DateCreatedAfter"`
	// Read only Composition resources created before this ISO 8601 date-time with time zone.
	DateCreatedBefore *time.Time `queryParam:"style=form,explode=true,name=DateCreatedBefore"`
	// The page index. This value is simply for client state.
	Page *int64 `queryParam:"style=form,explode=true,name=Page"`
	// How many resources to return in each list page. The default is 50, and the maximum is 1000.
	PageSize *int64 `queryParam:"style=form,explode=true,name=PageSize"`
	// The page token. This is provided by the API.
	PageToken *string `queryParam:"style=form,explode=true,name=PageToken"`
	// Read only Composition resources with this Room SID.
	RoomSid *string `queryParam:"style=form,explode=true,name=RoomSid"`
	// Read only Composition resources with this status. Can be: `enqueued`, `processing`, `completed`, `deleted`, or `failed`.
	Status *shared.CompositionEnumStatusEnum `queryParam:"style=form,explode=true,name=Status"`
}

type ListCompositionRequest struct {
	QueryParams ListCompositionQueryParams
	Security    ListCompositionSecurity
	ServerURL   *string
}

type ListCompositionListCompositionResponseMeta struct {
	FirstPageURL    *string `json:"first_page_url,omitempty"`
	Key             *string `json:"key,omitempty"`
	NextPageURL     *string `json:"next_page_url,omitempty"`
	Page            *int64  `json:"page,omitempty"`
	PageSize        *int64  `json:"page_size,omitempty"`
	PreviousPageURL *string `json:"previous_page_url,omitempty"`
	URL             *string `json:"url,omitempty"`
}

// ListCompositionListCompositionResponse - OK
type ListCompositionListCompositionResponse struct {
	Compositions []shared.VideoV1Composition                 `json:"compositions,omitempty"`
	Meta         *ListCompositionListCompositionResponseMeta `json:"meta,omitempty"`
}

type ListCompositionResponse struct {
	ContentType string
	// OK
	ListCompositionResponse *ListCompositionListCompositionResponse
	StatusCode              int
	RawResponse             *http.Response
}
