<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Operations;

use \OpenAPI\OpenAPI\Utils\SpeakeasyMetadata;
class PostAnnotateEntitiesRequest
{
    /**
     * The text content to annotate
     * 
     * @var ?string $content
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=content')]
    public ?string $content = null;
    
    /**
     * Categories to exclude for annotation
     * 
     * @var ?array<string> $excludeCategory
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=exclude_category')]
    public ?array $excludeCategory = null;
    
    /**
     * Should abbreviations be included
     * 
     * @var ?bool $includeAbbreviation
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=include_abbreviation')]
    public ?bool $includeAbbreviation = null;
    
    /**
     * Should acronyms be included
     * 
     * @var ?bool $includeAcronym
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=include_acronym')]
    public ?bool $includeAcronym = null;
    
    /**
     * Categories to include for annotation
     * 
     * @var ?array<string> $includeCategory
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=include_category')]
    public ?array $includeCategory = null;
    
    /**
     * Should numbers be included
     * 
     * @var ?bool $includeNumbers
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=include_numbers')]
    public ?bool $includeNumbers = null;
    
    /**
     * Should only the longest entity be returned for an overlapping group
     * 
     * @var ?bool $longestOnly
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=longest_only')]
    public ?bool $longestOnly = null;
    
    /**
     * The minimum number of characters in the annotated entity
     * 
     * @var ?string $minLength
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=min_length')]
    public ?string $minLength = null;
    
	public function __construct()
	{
		$this->content = null;
		$this->excludeCategory = null;
		$this->includeAbbreviation = null;
		$this->includeAcronym = null;
		$this->includeCategory = null;
		$this->includeNumbers = null;
		$this->longestOnly = null;
		$this->minLength = null;
	}
}
