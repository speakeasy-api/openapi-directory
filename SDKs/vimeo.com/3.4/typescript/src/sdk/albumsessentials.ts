/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class AlbumsEssentials {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Create an album
   */
  createAlbum(
    req: operations.CreateAlbumRequest,
    security: operations.CreateAlbumSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.CreateAlbumResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.CreateAlbumRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/users/{user_id}/albums",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.CreateAlbumSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.CreateAlbumResponse =
        new operations.CreateAlbumResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 201:
          if (
            utils.matchContentType(
              contentType,
              `application/vnd.vimeo.album+json`
            )
          ) {
            res.album = utils.objectToClass(httpRes?.data, shared.Album);
          }
          break;
        case [400, 403].includes(httpRes?.status):
          if (
            utils.matchContentType(
              contentType,
              `application/vnd.vimeo.album+json`
            )
          ) {
            res.legacyError = utils.objectToClass(
              httpRes?.data,
              shared.LegacyError
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Create an album
   */
  createAlbumAlt1(
    req: operations.CreateAlbumAlt1RequestBody,
    security: operations.CreateAlbumAlt1Security,
    config?: AxiosRequestConfig
  ): Promise<operations.CreateAlbumAlt1Response> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.CreateAlbumAlt1RequestBody(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/me/albums";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.CreateAlbumAlt1Security(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.CreateAlbumAlt1Response =
        new operations.CreateAlbumAlt1Response({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 201:
          if (
            utils.matchContentType(
              contentType,
              `application/vnd.vimeo.album+json`
            )
          ) {
            res.album = utils.objectToClass(httpRes?.data, shared.Album);
          }
          break;
        case [400, 403].includes(httpRes?.status):
          if (
            utils.matchContentType(
              contentType,
              `application/vnd.vimeo.album+json`
            )
          ) {
            res.legacyError = utils.objectToClass(
              httpRes?.data,
              shared.LegacyError
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Delete an album
   */
  deleteAlbum(
    req: operations.DeleteAlbumRequest,
    security: operations.DeleteAlbumSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DeleteAlbumResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DeleteAlbumRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/users/{user_id}/albums/{album_id}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.DeleteAlbumSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DeleteAlbumResponse =
        new operations.DeleteAlbumResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 204:
          break;
        case [403, 404].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.legacyError = utils.objectToClass(
              httpRes?.data,
              shared.LegacyError
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Delete an album
   */
  deleteAlbumAlt1(
    req: operations.DeleteAlbumAlt1Request,
    security: operations.DeleteAlbumAlt1Security,
    config?: AxiosRequestConfig
  ): Promise<operations.DeleteAlbumAlt1Response> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DeleteAlbumAlt1Request(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/me/albums/{album_id}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.DeleteAlbumAlt1Security(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DeleteAlbumAlt1Response =
        new operations.DeleteAlbumAlt1Response({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 204:
          break;
        case [403, 404].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.legacyError = utils.objectToClass(
              httpRes?.data,
              shared.LegacyError
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Edit an album
   */
  editAlbum(
    req: operations.EditAlbumRequest,
    security: operations.EditAlbumSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.EditAlbumResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.EditAlbumRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/users/{user_id}/albums/{album_id}",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.EditAlbumSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "patch",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.EditAlbumResponse =
        new operations.EditAlbumResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (
            utils.matchContentType(
              contentType,
              `application/vnd.vimeo.album+json`
            )
          ) {
            res.album = utils.objectToClass(httpRes?.data, shared.Album);
          }
          break;
        case [400, 403, 404].includes(httpRes?.status):
          if (
            utils.matchContentType(
              contentType,
              `application/vnd.vimeo.album+json`
            )
          ) {
            res.legacyError = utils.objectToClass(
              httpRes?.data,
              shared.LegacyError
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Edit an album
   */
  editAlbumAlt1(
    req: operations.EditAlbumAlt1Request,
    security: operations.EditAlbumAlt1Security,
    config?: AxiosRequestConfig
  ): Promise<operations.EditAlbumAlt1Response> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.EditAlbumAlt1Request(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/me/albums/{album_id}",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.EditAlbumAlt1Security(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "patch",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.EditAlbumAlt1Response =
        new operations.EditAlbumAlt1Response({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (
            utils.matchContentType(
              contentType,
              `application/vnd.vimeo.album+json`
            )
          ) {
            res.album = utils.objectToClass(httpRes?.data, shared.Album);
          }
          break;
        case [400, 403, 404].includes(httpRes?.status):
          if (
            utils.matchContentType(
              contentType,
              `application/vnd.vimeo.album+json`
            )
          ) {
            res.legacyError = utils.objectToClass(
              httpRes?.data,
              shared.LegacyError
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get a specific album
   */
  getAlbum(
    req: operations.GetAlbumRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetAlbumResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetAlbumRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/users/{user_id}/albums/{album_id}",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetAlbumResponse = new operations.GetAlbumResponse({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
      });
      switch (true) {
        case httpRes?.status == 200:
          if (
            utils.matchContentType(
              contentType,
              `application/vnd.vimeo.album+json`
            )
          ) {
            res.album = utils.objectToClass(httpRes?.data, shared.Album);
          }
          break;
        case httpRes?.status == 404:
          if (
            utils.matchContentType(
              contentType,
              `application/vnd.vimeo.album+json`
            )
          ) {
            res.legacyError = utils.objectToClass(
              httpRes?.data,
              shared.LegacyError
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get a specific album
   */
  getAlbumAlt1(
    req: operations.GetAlbumAlt1Request,
    config?: AxiosRequestConfig
  ): Promise<operations.GetAlbumAlt1Response> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetAlbumAlt1Request(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/me/albums/{album_id}",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetAlbumAlt1Response =
        new operations.GetAlbumAlt1Response({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (
            utils.matchContentType(
              contentType,
              `application/vnd.vimeo.album+json`
            )
          ) {
            res.album = utils.objectToClass(httpRes?.data, shared.Album);
          }
          break;
        case httpRes?.status == 404:
          if (
            utils.matchContentType(
              contentType,
              `application/vnd.vimeo.album+json`
            )
          ) {
            res.legacyError = utils.objectToClass(
              httpRes?.data,
              shared.LegacyError
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get all the albums that belong to a user
   */
  getAlbums(
    req: operations.GetAlbumsRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetAlbumsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetAlbumsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/users/{user_id}/albums",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetAlbumsResponse =
        new operations.GetAlbumsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.albums = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.albums = utils.objectToClass(
              httpRes?.data,
              shared.Album,
              resFieldDepth
            );
          }
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.legacyError = utils.objectToClass(
              httpRes?.data,
              shared.LegacyError
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get all the albums that belong to a user
   */
  getAlbumsAlt1(
    req: operations.GetAlbumsAlt1Request,
    config?: AxiosRequestConfig
  ): Promise<operations.GetAlbumsAlt1Response> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetAlbumsAlt1Request(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/me/albums";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetAlbumsAlt1Response =
        new operations.GetAlbumsAlt1Response({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.albums = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.albums = utils.objectToClass(
              httpRes?.data,
              shared.Album,
              resFieldDepth
            );
          }
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.legacyError = utils.objectToClass(
              httpRes?.data,
              shared.LegacyError
            );
          }
          break;
      }

      return res;
    });
  }
}
