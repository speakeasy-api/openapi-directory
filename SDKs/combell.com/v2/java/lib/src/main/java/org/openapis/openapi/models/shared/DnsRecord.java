/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * DnsRecord - The record to create
 */
public class DnsRecord {
    /**
     * Variable data depending on the record type.
     * &lt;ul&gt;&lt;li&gt;A: the IPv4 address.&lt;/li&gt;&lt;li&gt;CNAME: canonical name of an alias.&lt;/li&gt;&lt;li&gt;MX: fully qualified domain name of a mail host.&lt;/li&gt;&lt;li&gt;SRV: does not apply. Data for the SRV records can be found in specific properties.&lt;/li&gt;&lt;li&gt;TXT: free form text data.&lt;/li&gt;&lt;li&gt;CAA: format should match specific values for flag, tag and ca: "{flag} {tag} {ca}".
     *         &lt;ul&gt;&lt;li&gt;The flag. The values 128 (critical) or 0 (non-critical) are expected, with 0 as the default.&lt;/li&gt;&lt;li&gt;The tag. A tag specifies which actions an authorized CA can take in terms of issuing SSL/TLS certificates.&lt;br /&gt;&lt;ul&gt;&lt;li&gt;The value "issue": explicitly authorizes a single certificate authority to issue a certificate (any type) for the hostname.&lt;/li&gt;&lt;li&gt;The value "issuewild": explicitly authorizes a single certificate authority to issue a wildcard certificate (and only wildcard) for the hostname.&lt;/li&gt;&lt;li&gt;The value "iodef": specifies a URL to which a certificate authority may report policy violations.&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;The ca. This is the domain of the CA (Certification Authority) that has the authority to issue certificates for the domain in question. If the value is a semicolon (;), it means that no CA has the authority to issue a certificate for that domain.&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;ALIAS: canonical name of an alias.&lt;/li&gt;&lt;li&gt;TLSA: format should match specific values for usage, selector, matching type and data: "{usage} {selector} {matching_type} {data}"
     *         &lt;ul&gt;&lt;li&gt;The usage. The first field after the TLSA text in the DNS RR, specifies how to verify the certificate.&lt;br /&gt;&lt;ul&gt;&lt;li&gt;A value of 0 is for what is commonly called CA constraint (and PKIX-TA). The certificate provided when establishing TLS must be issued by the listed root-CA or one of its intermediate CAs, with a valid certification path to a root-CA already trusted by the application doing the verification.&lt;/li&gt;&lt;li&gt;A value of 1 is for what is commonly called Service certificate constraint (and PKIX-EE). The certificate used must match the TLSA record exactly, and it must also pass PKIX certification path validation to a trusted root-CA.&lt;/li&gt;&lt;li&gt;A value of 2 is for what is commonly called Trust Anchor Assertion (and DANE-TA). The certificate used has a valid certification path pointing back to the certificate mention in this record, but there is no need for it to pass the PKIX certification path validation to a trusted root-CA.&lt;/li&gt;&lt;li&gt;A value of 3 is for what is commonly called Domain issued certificate (and DANE-EE). The services uses a self-signed certificate. It is not signed by anyone else, and is exactly this record.&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;The selector. When connecting to the service and a certificate is received, the selector field specifies which parts of it should be checked.&lt;br /&gt;&lt;ul&gt;&lt;li&gt;A value of 0 means to select the entire certificate for matching.&lt;/li&gt;&lt;li&gt;A value of 1 means to select just the public key for certificate matching. Matching the public key is often sufficient, as this is likely to be unique.&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;The matching type.&lt;br /&gt;&lt;ul&gt;&lt;li&gt;A type of 0 means the entire information selected is present in the certificate association data.&lt;/li&gt;&lt;li&gt;A type of 1 means to do a SHA-256 hash of the selected data.&lt;/li&gt;&lt;li&gt;A type of 2 means to do a SHA-512 hash of the selected data.&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;The actual data to be matched given the settings of the other fields. This is a long text string of hexadecimal data.&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("content")
    public String content;
    public DnsRecord withContent(String content) {
        this.content = content;
        return this;
    }
    
    /**
     * The id of the record
     * This value is ignored for creation of new records.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    public String id;
    public DnsRecord withId(String id) {
        this.id = id;
        return this;
    }
    
    /**
     * The port for SRV records.&lt;br /&gt;
     * The value MUST be a positive integer.&lt;br /&gt;
     * Editing the value is not possible. You should add a new SRV record and delete the existing record.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("port")
    public Integer port;
    public DnsRecord withPort(Integer port) {
        this.port = port;
        return this;
    }
    
    /**
     * The priority for MX or SRV records.&lt;br /&gt;
     * A lower value means more preferred.&lt;br /&gt;
     * The value MUST be a positive integer less or equal to 9999.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("priority")
    public Integer priority;
    public DnsRecord withPriority(Integer priority) {
        this.priority = priority;
        return this;
    }
    
    /**
     * Used for the creation of SRV records. Possible options: TCP, UDP, ...&lt;br /&gt;
     * Editing the value is not possible. You should add a new SRV record and delete the existing record.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("protocol")
    public String protocol;
    public DnsRecord withProtocol(String protocol) {
        this.protocol = protocol;
        return this;
    }
    
    /**
     * The name of the record.&lt;br /&gt;
     * This is the host name, alias defined by the record.&lt;br /&gt;
     * An empty record or '@' is equal to the domain name.&lt;br /&gt;
     * Applies to A, MX, CNAME, TXT, CAA, ALIAS and TLSA records.&lt;br /&gt;
     * When type is TLSA the recommended value format is port number, protocol and host: _25._tcp.&lt;br /&gt;
     * Does not apply for SRV records.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("record_name")
    public String recordName;
    public DnsRecord withRecordName(String recordName) {
        this.recordName = recordName;
        return this;
    }
    
    /**
     * The symbolic name of the desired service for SRV records.&lt;br /&gt;
     * Editing the value is not possible. You should add a new SRV record and can delete the existing record.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("service")
    public String service;
    public DnsRecord withService(String service) {
        this.service = service;
        return this;
    }
    
    /**
     * The canonical hostname of the machine providing the service for SRV records.&lt;br /&gt;
     * Editing the value is not possible. You should add a new SRV record and delete the existing record.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("target")
    public String target;
    public DnsRecord withTarget(String target) {
        this.target = target;
        return this;
    }
    
    /**
     * Time to live of the record in seconds.&lt;br /&gt;
     * It defines the time frame that clients can cache the information.&lt;br /&gt;
     * The value MUST be between 60 and 86400. The default value is 3600 (= 1 hour).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ttl")
    public Integer ttl;
    public DnsRecord withTtl(Integer ttl) {
        this.ttl = ttl;
        return this;
    }
    
    /**
     * The type of the record (A, MX, CNAME, SRV, TXT, CAA, ALIAS and TLSA).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("type")
    public String type;
    public DnsRecord withType(String type) {
        this.type = type;
        return this;
    }
    
    /**
     * The weight for SRV records with the same priority.&lt;br /&gt;
     * A higher value means more preferred.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("weight")
    public Integer weight;
    public DnsRecord withWeight(Integer weight) {
        this.weight = weight;
        return this;
    }
    
}
