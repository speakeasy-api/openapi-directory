/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

export class UpdateUserRequestBody extends SpeakeasyBase {
  /**
   * A user who joins a conversation as a member can have one channel per membership type. Channels can be `app`, `phone`, `sip`, `websocket`, or `vbc`
   */
  @SpeakeasyMetadata()
  @Expose({ name: "channels" })
  @Type(() => shared.Channel)
  channels?: shared.Channel;

  /**
   * A string to be displayed as user name. It does not need to be unique
   */
  @SpeakeasyMetadata()
  @Expose({ name: "display_name" })
  displayName?: string;

  /**
   * A link to an image for conversations' and users' avatars
   */
  @SpeakeasyMetadata()
  @Expose({ name: "image_url" })
  imageUrl?: string;

  /**
   * Unique name for a user
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name?: string;
}

export class UpdateUserRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  requestBody?: UpdateUserRequestBody;

  /**
   * User ID
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=user_id",
  })
  userId: string;
}

/**
 * Retrieve a user
 */
export class UpdateUser200ApplicationJSON extends SpeakeasyBase {
  /**
   * A link towards a user included in Conversation API
   */
  @SpeakeasyMetadata()
  @Expose({ name: "href" })
  href?: string;

  /**
   * User ID
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id?: string;
}

export class UpdateUserResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * Retrieve a user
   */
  @SpeakeasyMetadata()
  updateUser200ApplicationJSONObject?: UpdateUser200ApplicationJSON;
}
