"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import addthingstothinggroupparams as shared_addthingstothinggroupparams
from ..shared import enableiotloggingparams as shared_enableiotloggingparams
from ..shared import publishfindingtosnsparams as shared_publishfindingtosnsparams
from ..shared import replacedefaultpolicyversionparams as shared_replacedefaultpolicyversionparams
from ..shared import updatecacertificateparams as shared_updatecacertificateparams
from ..shared import updatedevicecertificateparams as shared_updatedevicecertificateparams
from ..shared import updatemitigationactionresponse as shared_updatemitigationactionresponse
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Any, Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateMitigationActionRequestBodyActionParams:
    r"""The set of parameters for this mitigation action. You can specify only one type of parameter (in other words, you can apply only one action for each defined mitigation action)."""
    
    add_things_to_thing_group_params: Optional[shared_addthingstothinggroupparams.AddThingsToThingGroupParams] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('addThingsToThingGroupParams'), 'exclude': lambda f: f is None }})  
    enable_io_t_logging_params: Optional[shared_enableiotloggingparams.EnableIoTLoggingParams] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('enableIoTLoggingParams'), 'exclude': lambda f: f is None }})  
    publish_finding_to_sns_params: Optional[shared_publishfindingtosnsparams.PublishFindingToSnsParams] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('publishFindingToSnsParams'), 'exclude': lambda f: f is None }})  
    replace_default_policy_version_params: Optional[shared_replacedefaultpolicyversionparams.ReplaceDefaultPolicyVersionParams] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('replaceDefaultPolicyVersionParams'), 'exclude': lambda f: f is None }})  
    update_ca_certificate_params: Optional[shared_updatecacertificateparams.UpdateCACertificateParams] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('updateCACertificateParams'), 'exclude': lambda f: f is None }})  
    update_device_certificate_params: Optional[shared_updatedevicecertificateparams.UpdateDeviceCertificateParams] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('updateDeviceCertificateParams'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateMitigationActionRequestBody:
    
    action_params: Optional[UpdateMitigationActionRequestBodyActionParams] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('actionParams'), 'exclude': lambda f: f is None }})
    r"""The set of parameters for this mitigation action. You can specify only one type of parameter (in other words, you can apply only one action for each defined mitigation action)."""  
    role_arn: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('roleArn'), 'exclude': lambda f: f is None }})
    r"""The ARN of the IAM role that is used to apply the mitigation action."""  
    

@dataclasses.dataclass
class UpdateMitigationActionRequest:
    
    action_name: str = dataclasses.field(metadata={'path_param': { 'field_name': 'actionName', 'style': 'simple', 'explode': False }})
    r"""The friendly name for the mitigation action. You cannot change the name by using <code>UpdateMitigationAction</code>. Instead, you must delete and recreate the mitigation action with the new name."""  
    request_body: UpdateMitigationActionRequestBody = dataclasses.field(metadata={'request': { 'media_type': 'application/json' }})  
    x_amz_algorithm: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Algorithm', 'style': 'simple', 'explode': False }})  
    x_amz_content_sha256: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Content-Sha256', 'style': 'simple', 'explode': False }})  
    x_amz_credential: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Credential', 'style': 'simple', 'explode': False }})  
    x_amz_date: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Date', 'style': 'simple', 'explode': False }})  
    x_amz_security_token: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Security-Token', 'style': 'simple', 'explode': False }})  
    x_amz_signature: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Signature', 'style': 'simple', 'explode': False }})  
    x_amz_signed_headers: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-SignedHeaders', 'style': 'simple', 'explode': False }})  
    

@dataclasses.dataclass
class UpdateMitigationActionResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    internal_failure_exception: Optional[Any] = dataclasses.field(default=None)
    r"""InternalFailureException"""  
    invalid_request_exception: Optional[Any] = dataclasses.field(default=None)
    r"""InvalidRequestException"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    resource_not_found_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ResourceNotFoundException"""  
    throttling_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ThrottlingException"""  
    update_mitigation_action_response: Optional[shared_updatemitigationactionresponse.UpdateMitigationActionResponse] = dataclasses.field(default=None)
    r"""Success"""  
    