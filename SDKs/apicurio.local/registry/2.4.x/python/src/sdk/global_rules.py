"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class GlobalRules:
    r"""Global rules can be configured in the registry to govern how artifact content can
    evolve over time (as artifact content is **updated**). Global rules are applied 
    whenever an artifact is added to the registry, and also whenever an artifact's 
    content is updated (only if that artifact does not have its own specific rules 
    configured). This section describes the operations used to manage the global rules.
    """
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def create_global_rule(self, request: shared.Rule) -> operations.CreateGlobalRuleResponse:
        r"""Create global rule
        Adds a rule to the list of globally configured rules.
        
        This operation can fail for the following reasons:
        
        * The rule type is unknown (HTTP error `400`)
        * The rule already exists (HTTP error `409`)
        * A server error occurred (HTTP error `500`)
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/admin/rules'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateGlobalRuleResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 204:
            pass
        elif http_res.status_code in [400, 409, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out

        return res

    def delete_all_global_rules(self) -> operations.DeleteAllGlobalRulesResponse:
        r"""Delete all global rules
        Deletes all globally configured rules.
        
        This operation can fail for the following reasons:
        
        * A server error occurred (HTTP error `500`)
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/admin/rules'
        
        
        client = self._client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteAllGlobalRulesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 204:
            pass
        elif http_res.status_code == 500:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out

        return res

    def delete_global_rule(self, request: operations.DeleteGlobalRuleRequest) -> operations.DeleteGlobalRuleResponse:
        r"""Delete global rule
        Deletes a single global rule.  If this is the only rule configured, this is the same
        as deleting **all** rules.
        
        This operation can fail for the following reasons:
        
        * Invalid rule name/type (HTTP error `400`)
        * No rule with name/type `rule` exists (HTTP error `404`)
        * Rule cannot be deleted (HTTP error `409`)
        * A server error occurred (HTTP error `500`)
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteGlobalRuleRequest, base_url, '/admin/rules/{rule}', request)
        
        
        client = self._client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteGlobalRuleResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 204:
            pass
        elif http_res.status_code in [404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out

        return res

    def get_global_rule_config(self, request: operations.GetGlobalRuleConfigRequest) -> operations.GetGlobalRuleConfigResponse:
        r"""Get global rule configuration
        Returns information about the named globally configured rule.
        
        This operation can fail for the following reasons:
        
        * Invalid rule name/type (HTTP error `400`)
        * No rule with name/type `rule` exists (HTTP error `404`)
        * A server error occurred (HTTP error `500`)
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetGlobalRuleConfigRequest, base_url, '/admin/rules/{rule}', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetGlobalRuleConfigResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Rule])
                res.rule = out
        elif http_res.status_code in [404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out

        return res

    def list_global_rules(self) -> operations.ListGlobalRulesResponse:
        r"""List global rules
        Gets a list of all the currently configured global rules (if any).
        
        This operation can fail for the following reasons:
        
        * A server error occurred (HTTP error `500`)
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/admin/rules'
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ListGlobalRulesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.RuleTypeEnum]])
                res.rule_types = out
        elif http_res.status_code == 500:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out

        return res

    def update_global_rule_config(self, request: operations.UpdateGlobalRuleConfigRequest) -> operations.UpdateGlobalRuleConfigResponse:
        r"""Update global rule configuration
        Updates the configuration for a globally configured rule.
        
        This operation can fail for the following reasons:
        
        * Invalid rule name/type (HTTP error `400`)
        * No rule with name/type `rule` exists (HTTP error `404`)
        * A server error occurred (HTTP error `500`)
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.UpdateGlobalRuleConfigRequest, base_url, '/admin/rules/{rule}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "rule1", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateGlobalRuleConfigResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Rule])
                res.rule = out
        elif http_res.status_code in [404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out

        return res

    