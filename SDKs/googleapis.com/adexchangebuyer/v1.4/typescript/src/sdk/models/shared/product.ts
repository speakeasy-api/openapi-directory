/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { Buyer } from "./buyer";
import { ContactInformation } from "./contactinformation";
import { DealTerms } from "./dealterms";
import { DeliveryControl } from "./deliverycontrol";
import { MarketplaceLabel } from "./marketplacelabel";
import { PublisherProvidedForecast } from "./publisherprovidedforecast";
import { Seller } from "./seller";
import { SharedTargeting } from "./sharedtargeting";
import { Expose, Type } from "class-transformer";

/**
 * A product is segment of inventory that a seller wishes to sell. It is associated with certain terms and targeting information which helps buyer know more about the inventory. Each field in a product can have one of the following setting:
 *
 * @remarks
 *
 * (readonly) - It is an error to try and set this field. (buyer-readonly) - Only the seller can set this field. (seller-readonly) - Only the buyer can set this field. (updatable) - The field is updatable at all times by either buyer or the seller.
 */
export class Product extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "billedBuyer" })
  @Type(() => Buyer)
  billedBuyer?: Buyer;

  @SpeakeasyMetadata()
  @Expose({ name: "buyer" })
  @Type(() => Buyer)
  buyer?: Buyer;

  /**
   * Creation time in ms. since epoch (readonly)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "creationTimeMs" })
  creationTimeMs?: string;

  /**
   * Optional contact information for the creator of this product. (buyer-readonly)
   */
  @SpeakeasyMetadata({ elemType: ContactInformation })
  @Expose({ name: "creatorContacts" })
  @Type(() => ContactInformation)
  creatorContacts?: ContactInformation[];

  /**
   * The role that created the offer. Set to BUYER for buyer initiated offers.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "creatorRole" })
  creatorRole?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "deliveryControl" })
  @Type(() => DeliveryControl)
  deliveryControl?: DeliveryControl;

  /**
   * The proposed end time for the deal (ms since epoch) (buyer-readonly)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "flightEndTimeMs" })
  flightEndTimeMs?: string;

  /**
   * Inventory availability dates. (times are in ms since epoch) The granularity is generally in the order of seconds. (buyer-readonly)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "flightStartTimeMs" })
  flightStartTimeMs?: string;

  /**
   * If the creator has already signed off on the product, then the buyer can finalize the deal by accepting the product as is. When copying to a proposal, if any of the terms are changed, then auto_finalize is automatically set to false.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "hasCreatorSignedOff" })
  hasCreatorSignedOff?: boolean;

  /**
   * What exchange will provide this inventory (readonly, except on create).
   */
  @SpeakeasyMetadata()
  @Expose({ name: "inventorySource" })
  inventorySource?: string;

  /**
   * Identifies what kind of resource this is. Value: the fixed string "adexchangebuyer#product".
   */
  @SpeakeasyMetadata()
  @Expose({ name: "kind" })
  kind?: string;

  /**
   * Optional List of labels for the product (optional, buyer-readonly).
   */
  @SpeakeasyMetadata({ elemType: MarketplaceLabel })
  @Expose({ name: "labels" })
  @Type(() => MarketplaceLabel)
  labels?: MarketplaceLabel[];

  /**
   * Time of last update in ms. since epoch (readonly)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "lastUpdateTimeMs" })
  lastUpdateTimeMs?: string;

  /**
   * Optional legacy offer id if this offer is a preferred deal offer.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "legacyOfferId" })
  legacyOfferId?: string;

  /**
   * Marketplace publisher profile Id. This Id differs from the regular publisher_profile_id in that 1. This is a new id, the old Id will be deprecated in 2017. 2. This id uniquely identifies a publisher profile by itself.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "marketplacePublisherProfileId" })
  marketplacePublisherProfileId?: string;

  /**
   * The name for this product as set by the seller. (buyer-readonly)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name?: string;

  /**
   * Optional private auction id if this offer is a private auction offer.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "privateAuctionId" })
  privateAuctionId?: string;

  /**
   * The unique id for the product (readonly)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "productId" })
  productId?: string;

  /**
   * Id of the publisher profile for a given seller. A (seller.account_id, publisher_profile_id) pair uniquely identifies a publisher profile. Buyers can call the PublisherProfiles::List endpoint to get a list of publisher profiles for a given seller.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "publisherProfileId" })
  publisherProfileId?: string;

  /**
   * This message carries publisher provided forecasting information.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "publisherProvidedForecast" })
  @Type(() => PublisherProvidedForecast)
  publisherProvidedForecast?: PublisherProvidedForecast;

  /**
   * The revision number of the product. (readonly)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "revisionNumber" })
  revisionNumber?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "seller" })
  @Type(() => Seller)
  seller?: Seller;

  /**
   * Targeting that is shared between the buyer and the seller. Each targeting criteria has a specified key and for each key there is a list of inclusion value or exclusion values. (buyer-readonly)
   */
  @SpeakeasyMetadata({ elemType: SharedTargeting })
  @Expose({ name: "sharedTargetings" })
  @Type(() => SharedTargeting)
  sharedTargetings?: SharedTargeting[];

  /**
   * The state of the product. (buyer-readonly)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "state" })
  state?: string;

  /**
   * The syndication product associated with the deal. (readonly, except on create)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "syndicationProduct" })
  syndicationProduct?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "terms" })
  @Type(() => DealTerms)
  terms?: DealTerms;

  /**
   * The web property code for the seller. This field is meant to be copied over as is when creating deals.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "webPropertyCode" })
  webPropertyCode?: string;
}
