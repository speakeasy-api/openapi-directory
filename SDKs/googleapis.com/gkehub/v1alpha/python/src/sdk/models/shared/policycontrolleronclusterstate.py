"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class PolicyControllerOnClusterStateStateEnum(str, Enum):
    r"""The lifecycle state of this component."""
    LIFECYCLE_STATE_UNSPECIFIED = 'LIFECYCLE_STATE_UNSPECIFIED'
    NOT_INSTALLED = 'NOT_INSTALLED'
    INSTALLING = 'INSTALLING'
    ACTIVE = 'ACTIVE'
    UPDATING = 'UPDATING'
    DECOMMISSIONING = 'DECOMMISSIONING'
    CLUSTER_ERROR = 'CLUSTER_ERROR'
    HUB_ERROR = 'HUB_ERROR'
    SUSPENDED = 'SUSPENDED'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PolicyControllerOnClusterState:
    r"""OnClusterState represents the state of a sub-component of Policy Controller."""
    
    details: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('details'), 'exclude': lambda f: f is None }})
    r"""Surface potential errors or information logs."""  
    state: Optional[PolicyControllerOnClusterStateStateEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('state'), 'exclude': lambda f: f is None }})
    r"""The lifecycle state of this component."""  
    