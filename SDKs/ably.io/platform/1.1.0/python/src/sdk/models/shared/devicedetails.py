"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import recipient as shared_recipient
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Any, Optional

class DeviceDetailsFormFactorEnum(str, Enum):
    r"""Form factor of the push device."""
    PHONE = 'phone'
    TABLET = 'tablet'
    DESKTOP = 'desktop'
    TV = 'tv'
    WATCH = 'watch'
    CAR = 'car'
    EMBEDDED = 'embedded'

class DeviceDetailsPlatformEnum(str, Enum):
    r"""Platform of the push device."""
    IOS = 'ios'
    ANDROID = 'android'

class DeviceDetailsPushStateEnum(str, Enum):
    r"""the current state of the push device."""
    ACTIVE = 'Active'
    FAILING = 'Failing'
    FAILED = 'Failed'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class DeviceDetailsOutput:
    r"""OK"""
    
    client_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('clientId'), 'exclude': lambda f: f is None }})
    r"""Optional trusted client identifier for the device."""  
    device_secret: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('deviceSecret'), 'exclude': lambda f: f is None }})
    r"""Secret value for the device."""  
    form_factor: Optional[DeviceDetailsFormFactorEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('formFactor'), 'exclude': lambda f: f is None }})
    r"""Form factor of the push device."""  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""Unique identifier for the device generated by the device itself."""  
    metadata: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('metadata'), 'exclude': lambda f: f is None }})
    r"""Optional metadata object for this device. The metadata for a device may only be set by clients with push-admin privileges and will be used more extensively in the future with smart notifications."""  
    platform: Optional[DeviceDetailsPlatformEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('platform'), 'exclude': lambda f: f is None }})
    r"""Platform of the push device."""  
    push_recipient: Optional[shared_recipient.RecipientOutput] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('push.recipient'), 'exclude': lambda f: f is None }})
    r"""Push recipient details for a device."""  
    push_state: Optional[DeviceDetailsPushStateEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('push.state'), 'exclude': lambda f: f is None }})
    r"""the current state of the push device."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class DeviceDetailsInput:
    
    client_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('clientId'), 'exclude': lambda f: f is None }, 'form': { 'field_name': 'clientId' }})
    r"""Optional trusted client identifier for the device."""  
    device_secret: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('deviceSecret'), 'exclude': lambda f: f is None }, 'form': { 'field_name': 'deviceSecret' }})
    r"""Secret value for the device."""  
    form_factor: Optional[DeviceDetailsFormFactorEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('formFactor'), 'exclude': lambda f: f is None }, 'form': { 'field_name': 'formFactor' }})
    r"""Form factor of the push device."""  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }, 'form': { 'field_name': 'id' }})
    r"""Unique identifier for the device generated by the device itself."""  
    metadata: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('metadata'), 'exclude': lambda f: f is None }, 'form': { 'field_name': 'metadata', 'json': True }})
    r"""Optional metadata object for this device. The metadata for a device may only be set by clients with push-admin privileges and will be used more extensively in the future with smart notifications."""  
    platform: Optional[DeviceDetailsPlatformEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('platform'), 'exclude': lambda f: f is None }, 'form': { 'field_name': 'platform' }})
    r"""Platform of the push device."""  
    push_recipient: Optional[shared_recipient.Recipient] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('push.recipient'), 'exclude': lambda f: f is None }, 'form': { 'field_name': 'push.recipient', 'json': True }})
    r"""Push recipient details for a device."""  
    