"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class ConnectivityFreeWifiExceptionEnum(str, Enum):
    r"""Free wifi exception."""
    EXCEPTION_UNSPECIFIED = 'EXCEPTION_UNSPECIFIED'
    UNDER_CONSTRUCTION = 'UNDER_CONSTRUCTION'
    DEPENDENT_ON_SEASON = 'DEPENDENT_ON_SEASON'
    DEPENDENT_ON_DAY_OF_WEEK = 'DEPENDENT_ON_DAY_OF_WEEK'

class ConnectivityPublicAreaWifiAvailableExceptionEnum(str, Enum):
    r"""Public area wifi available exception."""
    EXCEPTION_UNSPECIFIED = 'EXCEPTION_UNSPECIFIED'
    UNDER_CONSTRUCTION = 'UNDER_CONSTRUCTION'
    DEPENDENT_ON_SEASON = 'DEPENDENT_ON_SEASON'
    DEPENDENT_ON_DAY_OF_WEEK = 'DEPENDENT_ON_DAY_OF_WEEK'

class ConnectivityPublicInternetTerminalExceptionEnum(str, Enum):
    r"""Public internet terminal exception."""
    EXCEPTION_UNSPECIFIED = 'EXCEPTION_UNSPECIFIED'
    UNDER_CONSTRUCTION = 'UNDER_CONSTRUCTION'
    DEPENDENT_ON_SEASON = 'DEPENDENT_ON_SEASON'
    DEPENDENT_ON_DAY_OF_WEEK = 'DEPENDENT_ON_DAY_OF_WEEK'

class ConnectivityWifiAvailableExceptionEnum(str, Enum):
    r"""Wifi available exception."""
    EXCEPTION_UNSPECIFIED = 'EXCEPTION_UNSPECIFIED'
    UNDER_CONSTRUCTION = 'UNDER_CONSTRUCTION'
    DEPENDENT_ON_SEASON = 'DEPENDENT_ON_SEASON'
    DEPENDENT_ON_DAY_OF_WEEK = 'DEPENDENT_ON_DAY_OF_WEEK'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Connectivity:
    r"""The ways in which the property provides guests with the ability to access the internet."""
    
    free_wifi: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('freeWifi'), 'exclude': lambda f: f is None }})
    r"""Free wifi. The hotel offers guests wifi for free."""  
    free_wifi_exception: Optional[ConnectivityFreeWifiExceptionEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('freeWifiException'), 'exclude': lambda f: f is None }})
    r"""Free wifi exception."""  
    public_area_wifi_available: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('publicAreaWifiAvailable'), 'exclude': lambda f: f is None }})
    r"""Public area wifi available. Guests have the ability to wirelessly connect to the internet in the areas of the hotel accessible to anyone. Can be free or for a fee."""  
    public_area_wifi_available_exception: Optional[ConnectivityPublicAreaWifiAvailableExceptionEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('publicAreaWifiAvailableException'), 'exclude': lambda f: f is None }})
    r"""Public area wifi available exception."""  
    public_internet_terminal: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('publicInternetTerminal'), 'exclude': lambda f: f is None }})
    r"""Public internet terminal. An area of the hotel supplied with computers and designated for the purpose of providing guests with the ability to access the internet."""  
    public_internet_terminal_exception: Optional[ConnectivityPublicInternetTerminalExceptionEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('publicInternetTerminalException'), 'exclude': lambda f: f is None }})
    r"""Public internet terminal exception."""  
    wifi_available: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('wifiAvailable'), 'exclude': lambda f: f is None }})
    r"""Wifi available. The hotel provides the ability for guests to wirelessly connect to the internet. Can be in the public areas of the hotel and/or in the guest rooms. Can be free or for a fee."""  
    wifi_available_exception: Optional[ConnectivityWifiAvailableExceptionEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('wifiAvailableException'), 'exclude': lambda f: f is None }})
    r"""Wifi available exception."""  
    