"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Any, Optional


@dataclasses.dataclass
class ExecuteSellTrasactionSecurity:
    
    api_secret_key: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'apiKey', 'sub_type': 'header', 'field_name': 'x-api-key' }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ExecuteSellTrasactionSellTransactionRequestInstructionBuySell:
    r"""Definition of an single instruction(buy|sell)"""
    
    investment_product_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('investment_product_id') }})  
    client_order_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('client_order_id'), 'exclude': lambda f: f is None }})
    r"""(Optional) Order identifier assigned by the wealth manager"""  
    quantity: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('quantity'), 'exclude': lambda f: f is None }})
    r"""Require if `value` is not available. Must be in correct pattern (eg: 25, 332.34, 1050.0025). For `funds`, upto 4 decimal places. For `equities`, `bonds` and `etf`, 0 decimal places allowed."""  
    value: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('value'), 'exclude': lambda f: f is None }})
    r"""Require if `quantity` is not available. Must be in correct pattern (upto 2 decimal places, eg: 25, 332.3, 1050.25)."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ExecuteSellTrasactionSellTransactionRequest:
    r"""Definition of an sell transaction request"""
    
    pot_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('pot_id') }})  
    request_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('request_id') }})
    r"""Unique request id to ensure idempotency. (ex: UUID)"""  
    sell_instructions: list[ExecuteSellTrasactionSellTransactionRequestInstructionBuySell] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sell_instructions') }})  
    

@dataclasses.dataclass
class ExecuteSellTrasactionRequest:
    
    x_api_key: str = dataclasses.field(metadata={'header': { 'field_name': 'x-api-key', 'style': 'simple', 'explode': False }})
    r"""ApiSecretKey"""  
    request_body: Optional[ExecuteSellTrasactionSellTransactionRequest] = dataclasses.field(default=None, metadata={'request': { 'media_type': 'application/json' }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ExecuteSellTrasaction500ApplicationJSON:
    r"""System error. Retry later. If the error persist, contact WOS support"""
    
    message: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('message') }})
    r"""Human readable description of the error"""  
    error_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('error_code'), 'exclude': lambda f: f is None }})
    r"""Optional error code"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ExecuteSellTrasaction429ApplicationJSON:
    r"""You have sent too many requests to the system. Please retry later. If you need to increase your throtteling limits, please contact WOS support"""
    
    message: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('message') }})
    r"""Human readable description of the error"""  
    error_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('error_code'), 'exclude': lambda f: f is None }})
    r"""Optional error code"""  
    
class ExecuteSellTrasaction409ApplicationJSONStatusEnum(str, Enum):
    r"""Current status of the original request"""
    PROCESSING = 'PROCESSING'
    COMPLETE = 'COMPLETE'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ExecuteSellTrasaction409ApplicationJSON:
    r"""Duplicate request"""
    
    message: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('message') }})
    r"""Human readable description of the error"""  
    status: ExecuteSellTrasaction409ApplicationJSONStatusEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status') }})
    r"""Current status of the original request"""  
    response: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('response'), 'exclude': lambda f: f is None }})
    r"""Stringified original response body if status is `COMPLETE`"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ExecuteSellTrasaction404ApplicationJSON:
    r"""The specified resource was not found"""
    
    message: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('message') }})
    r"""Human readable description of the error"""  
    error_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('error_code'), 'exclude': lambda f: f is None }})
    r"""Optional error code"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ExecuteSellTrasaction403ApplicationJSON:
    r"""Your authentication information is missing or invalid. Please check the keys are properly set and its correct"""
    
    message: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('message') }})
    r"""Human readable description of the error"""  
    error_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('error_code'), 'exclude': lambda f: f is None }})
    r"""Optional error code"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ExecuteSellTrasaction401ApplicationJSON:
    r"""You do not have permissions to access this resource."""
    
    message: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('message') }})
    r"""Human readable description of the error"""  
    error_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('error_code'), 'exclude': lambda f: f is None }})
    r"""Optional error code"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ExecuteSellTrasaction400ApplicationJSON:
    r"""Request is not complete and may have one or more validations errors. Please check the error message and the code"""
    
    message: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('message') }})
    r"""Human readable description of the error"""  
    error_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('error_code'), 'exclude': lambda f: f is None }})
    r"""Optional error code"""  
    
class ExecuteSellTrasaction200ApplicationJSONStatusEnum(str, Enum):
    r"""status of the transaction request
    . `submitted`: All requested transactions submitted
    . `partially_submitted`: Some (but not all) requested transactions submitted
    """
    SUBMITTED = 'submitted'
    PARTIALLY_SUBMITTED = 'partially_submitted'

class ExecuteSellTrasaction200ApplicationJSONTransactionsDirectionEnum(str, Enum):
    r"""in = cash payment or pending buy transaction, out= cash out or pending sell transaction."""
    IN = 'in'
    OUT = 'out'

class ExecuteSellTrasaction200ApplicationJSONTransactionsOriginEnum(str, Enum):
    r"""Origin of the transaction"""
    API = 'api'
    ADMIN_UI = 'admin_ui'
    FILE_UPLOAD = 'file_upload'
    SYSTEM = 'system'

class ExecuteSellTrasaction200ApplicationJSONTransactionsPrimaryTransactionTypeEnum(str, Enum):
    FEES = 'Fees'
    BUY = 'Buy'
    SELL = 'Sell'
    TRANSFERS = 'Transfers'
    INCOME = 'Income'
    TAX = 'Tax'
    CONTRIBUTION = 'Contribution'
    WITHDRAWAL = 'Withdrawal'
    CORPORATE_ACTIONS = 'Corporate actions'

class ExecuteSellTrasaction200ApplicationJSONTransactionsStatusEnum(str, Enum):
    SUBMITTED = 'submitted'
    FAILED = 'failed'

class ExecuteSellTrasaction200ApplicationJSONTransactionsSubTransactionTypeEnum(str, Enum):
    r"""Sub transaction type"""
    DIVIDEND_REINVESTMENT = 'Dividend Reinvestment'
    INTEREST_REINVESTMENT = 'Interest Reinvestment'
    REINVESTMENT = 'Reinvestment'
    BUY = 'Buy'
    SELL_CANCEL = 'Sell Cancel'
    SWITCH_BUY = 'Switch Buy'
    SELL = 'Sell'
    BUY_CANCEL = 'Buy Cancel'
    SWITCH_SELL = 'Switch Sell'
    LUMP_SUM = 'Lump sum'
    EMPLOYER_CONTRIBUTION = 'Employer contribution'
    EMPLOYEE_CONTRIBUTION = 'Employee contribution'
    REGULAR_CONTRIBUTION = 'Regular contribution'
    PAYMENT_IN_FOR_FEES = 'Payment in for fees'
    INTERNAL_TRANSFER_CASH_IN = 'Internal Transfer - Cash In'
    INTERNAL_TRANSFER_STOCK_IN = 'Internal Transfer - Stock In'
    INTERNAL_TRANSFER_CASH_OUT = 'Internal Transfer - Cash Out'
    INTERNAL_TRANSFER_STOCK_OUT = 'Internal Transfer - Stock Out'
    STOCK_TRANSFER_IN = 'Stock Transfer In'
    CASH_TRANSFER_IN = 'Cash Transfer In'
    STOCK_TRANSFER_OUT = 'Stock Transfer Out'
    CASH_TRANSFER_OUT = 'Cash Transfer Out'
    COMMISSION = 'Commission'
    ANCILLARY_FEE = 'Ancillary fee'
    MANAGEMENT_FEE = 'Management fee'
    FEE_CREDIT = 'Fee credit'
    FEE_REBATE = 'Fee rebate'
    ADVISOR_ONGOING_FEE = 'Advisor ongoing fee'
    ONE_OFF_ADVISOR_FEE = 'One-off advisor fee'
    COMMISSION_REBATE = 'Commission rebate'
    CUSTODY_FEES = 'Custody fees'
    DIVIDENDS = 'Dividends'
    DISTRIBUTIONS = 'Distributions'
    INTEREST = 'Interest'
    OTHER_INCOME = 'Other income'
    TAKEOVERS_MERGERS_AND_NAME_CHANGES_CREATE = 'Takeovers, Mergers & Name Changes - Create'
    TAKEOVERS_MERGERS_AND_NAME_CHANGES_EXTINGUISH = 'Takeovers, Mergers & Name Changes - Extinguish'
    RIGHTS_EXPIRY = 'Rights Expiry'
    RIGHTS_EXERCISE = 'Rights Exercise'
    WARRANT_EXERCISE = 'Warrant Exercise'
    FIXED_INCOME_MATURITY_RECEIVE_CAPITAL = 'Fixed Income Maturity - Receive Capital'
    FIXED_INCOME_MATURITY_EXTINGUISH_BOND_UNITS = 'Fixed Income Maturity - Extinguish Bond Units'
    FUND_MERGER_CREATE_NEW_FUND_UNITS = 'Fund Merger - Create New Fund Units'
    FUND_MERGER_EXTINGUISH_OLD_FUND_UNITS = 'Fund Merger - Extinguish Old Fund Units'
    RIGHTS_ISSUE = 'Rights Issue'
    STOCK_DIVIDEND = 'Stock Dividend'
    SPIN_OFF = 'Spin-Off'
    WARRANT_ISSUE = 'Warrant Issue'
    STOCK_SPLIT = 'Stock Split'
    FEE_TAX = 'Fee Tax'
    TAX_RELIEF = 'Tax Relief'
    GST = 'GST'
    HST = 'HST'
    PST = 'PST'
    QST = 'QST'
    WITHHOLDING_TAX = 'Withholding Tax'
    NON_RESIDENT_TAX = 'Non-resident Tax'
    PENALTY = 'Penalty'
    CONTRIBUTION_REFUND = 'Contribution Refund'
    INCOME_WITHDRAWAL = 'Income Withdrawal'
    REVERSAL = 'Reversal'
    WITHDRAWAL = 'Withdrawal'
    MISCELLANEOUS_CORPORATE_ACTION_EXERCISE = 'Miscellaneous Corporate Action Exercise'

class ExecuteSellTrasaction200ApplicationJSONTransactionsSubTypeEnum(str, Enum):
    r"""Sub state of the transaction. instructed, confirmed, priced and scheduled sub_types are applicable for pending state and rejected, cancelled, settled sub_types applicable for archived state"""
    INSTRUCTED = 'instructed'
    CONFIRMED = 'confirmed'
    PRICED = 'priced'
    REJECTED = 'rejected'
    SETTLED = 'settled'
    CANCELLED = 'cancelled'
    SCHEDULED = 'scheduled'

class ExecuteSellTrasaction200ApplicationJSONTransactionsTypeEnum(str, Enum):
    r"""State of the transaction"""
    PENDING = 'pending'
    ARCHIVED = 'archived'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ExecuteSellTrasaction200ApplicationJSONTransactions:
    
    created_at: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('created_at') }})
    r"""Will indicate the date where this record was created"""  
    currency: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('currency') }})
    r"""Currency of the transaction"""  
    direction: ExecuteSellTrasaction200ApplicationJSONTransactionsDirectionEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('direction') }})
    r"""in = cash payment or pending buy transaction, out= cash out or pending sell transaction."""  
    investment_product_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('investment_product_id') }})
    r"""Investment product id of the transaction. Will be 'cash' for cash transaction"""  
    origin: ExecuteSellTrasaction200ApplicationJSONTransactionsOriginEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('origin') }})
    r"""Origin of the transaction"""  
    primary_transaction_type: ExecuteSellTrasaction200ApplicationJSONTransactionsPrimaryTransactionTypeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('primary_transaction_type') }})  
    status: ExecuteSellTrasaction200ApplicationJSONTransactionsStatusEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status') }})  
    sub_transaction_type: ExecuteSellTrasaction200ApplicationJSONTransactionsSubTransactionTypeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sub_transaction_type') }})
    r"""Sub transaction type"""  
    sub_type: ExecuteSellTrasaction200ApplicationJSONTransactionsSubTypeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sub_type') }})
    r"""Sub state of the transaction. instructed, confirmed, priced and scheduled sub_types are applicable for pending state and rejected, cancelled, settled sub_types applicable for archived state"""  
    transaction_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('transaction_id') }})
    r"""transaction_id of successful transaction"""  
    type: ExecuteSellTrasaction200ApplicationJSONTransactionsTypeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type') }})
    r"""State of the transaction"""  
    updated_at: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('updated_at') }})
    r"""Will indicate the date where this record was last changed"""  
    additional_external_details: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('additional_external_details'), 'exclude': lambda f: f is None }})
    r"""Additional external details of the transaction, This may be populated in reconciliation process"""  
    client_order_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('client_order_id'), 'exclude': lambda f: f is None }})
    r"""(optional) Order identifier assigned by the wealth manager"""  
    execution_price: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('execution_price'), 'exclude': lambda f: f is None }})
    r"""Executed price of the buy, sell transaction"""  
    external_transaction_reference: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('external_transaction_reference'), 'exclude': lambda f: f is None }})
    r"""External Transaction Reference"""  
    parent_transaction_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('parent_transaction_id'), 'exclude': lambda f: f is None }})
    r"""parent_transaction_id"""  
    settlement_date: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('settlement_date'), 'exclude': lambda f: f is None }})
    r"""Intended settlement date of the pending transaction or actual the settled day of the transaction"""  
    trade_date: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('trade_date'), 'exclude': lambda f: f is None }})
    r"""Date the transaction was effected"""  
    transaction_quantity: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('transaction_quantity'), 'exclude': lambda f: f is None }})
    r"""(optional) quantity of the investment product, required for unit based orders"""  
    transaction_value: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('transaction_value'), 'exclude': lambda f: f is None }})
    r"""(optional) value of the investment product, required for value based orders"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ExecuteSellTrasaction200ApplicationJSON:
    r"""success"""
    
    pot_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('pot_id') }})  
    status: ExecuteSellTrasaction200ApplicationJSONStatusEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status') }})
    r"""status of the transaction request
    . `submitted`: All requested transactions submitted
    . `partially_submitted`: Some (but not all) requested transactions submitted
    """  
    message: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('message'), 'exclude': lambda f: f is None }})
    r"""error message if status is `failed`"""  
    transactions: Optional[list[ExecuteSellTrasaction200ApplicationJSONTransactions]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('transactions'), 'exclude': lambda f: f is None }})  
    

@dataclasses.dataclass
class ExecuteSellTrasactionResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    execute_sell_trasaction_200_application_json_object: Optional[ExecuteSellTrasaction200ApplicationJSON] = dataclasses.field(default=None)
    r"""success"""  
    execute_sell_trasaction_400_application_json_object: Optional[ExecuteSellTrasaction400ApplicationJSON] = dataclasses.field(default=None)
    r"""Request is not complete and may have one or more validations errors. Please check the error message and the code"""  
    execute_sell_trasaction_401_application_json_object: Optional[ExecuteSellTrasaction401ApplicationJSON] = dataclasses.field(default=None)
    r"""You do not have permissions to access this resource."""  
    execute_sell_trasaction_403_application_json_object: Optional[ExecuteSellTrasaction403ApplicationJSON] = dataclasses.field(default=None)
    r"""Your authentication information is missing or invalid. Please check the keys are properly set and its correct"""  
    execute_sell_trasaction_404_application_json_object: Optional[ExecuteSellTrasaction404ApplicationJSON] = dataclasses.field(default=None)
    r"""The specified resource was not found"""  
    execute_sell_trasaction_409_application_json_object: Optional[ExecuteSellTrasaction409ApplicationJSON] = dataclasses.field(default=None)
    r"""Duplicate request"""  
    execute_sell_trasaction_429_application_json_object: Optional[ExecuteSellTrasaction429ApplicationJSON] = dataclasses.field(default=None)
    r"""You have sent too many requests to the system. Please retry later. If you need to increase your throtteling limits, please contact WOS support"""  
    execute_sell_trasaction_500_application_json_object: Optional[ExecuteSellTrasaction500ApplicationJSON] = dataclasses.field(default=None)
    r"""System error. Retry later. If the error persist, contact WOS support"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    