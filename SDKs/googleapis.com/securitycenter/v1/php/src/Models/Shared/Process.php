<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Shared;


/**
 * Process - Represents an operating system process.
 * 
 * @package OpenAPI\OpenAPI\Models\Shared
 * @access public
 */
class Process
{
    /**
     * Process arguments as JSON encoded strings.
     * 
     * @var ?array<string> $args
     */
	#[\JMS\Serializer\Annotation\SerializedName('args')]
    #[\JMS\Serializer\Annotation\Type('array<string>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $args = null;
    
    /**
     * True if `args` is incomplete.
     * 
     * @var ?bool $argumentsTruncated
     */
	#[\JMS\Serializer\Annotation\SerializedName('argumentsTruncated')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $argumentsTruncated = null;
    
    /**
     * File information about the related binary/library used by an executable, or the script used by a script interpreter
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\File $binary
     */
	#[\JMS\Serializer\Annotation\SerializedName('binary')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\File')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?File $binary = null;
    
    /**
     * Process environment variables.
     * 
     * @var ?array<\OpenAPI\OpenAPI\Models\Shared\EnvironmentVariable> $envVariables
     */
	#[\JMS\Serializer\Annotation\SerializedName('envVariables')]
    #[\JMS\Serializer\Annotation\Type('array<OpenAPI\OpenAPI\Models\Shared\EnvironmentVariable>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $envVariables = null;
    
    /**
     * True if `env_variables` is incomplete.
     * 
     * @var ?bool $envVariablesTruncated
     */
	#[\JMS\Serializer\Annotation\SerializedName('envVariablesTruncated')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $envVariablesTruncated = null;
    
    /**
     * File information for libraries loaded by the process.
     * 
     * @var ?array<\OpenAPI\OpenAPI\Models\Shared\File> $libraries
     */
	#[\JMS\Serializer\Annotation\SerializedName('libraries')]
    #[\JMS\Serializer\Annotation\Type('array<OpenAPI\OpenAPI\Models\Shared\File>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $libraries = null;
    
    /**
     * The process name, as displayed in utilities like `top` and `ps`. This name can be accessed through `/proc/[pid]/comm` and changed with `prctl(PR_SET_NAME)`.
     * 
     * @var ?string $name
     */
	#[\JMS\Serializer\Annotation\SerializedName('name')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $name = null;
    
    /**
     * The parent process ID.
     * 
     * @var ?string $parentPid
     */
	#[\JMS\Serializer\Annotation\SerializedName('parentPid')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $parentPid = null;
    
    /**
     * The process ID.
     * 
     * @var ?string $pid
     */
	#[\JMS\Serializer\Annotation\SerializedName('pid')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $pid = null;
    
    /**
     * File information about the related binary/library used by an executable, or the script used by a script interpreter
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\File $script
     */
	#[\JMS\Serializer\Annotation\SerializedName('script')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\File')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?File $script = null;
    
	public function __construct()
	{
		$this->args = null;
		$this->argumentsTruncated = null;
		$this->binary = null;
		$this->envVariables = null;
		$this->envVariablesTruncated = null;
		$this->libraries = null;
		$this->name = null;
		$this->parentPid = null;
		$this->pid = null;
		$this->script = null;
	}
}
