/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
import { Expose } from "class-transformer";

/**
 * The status of the register certificate request.
 */
export enum RegisterCertificateWithoutCARequestBodyStatusEnum {
  Active = "ACTIVE",
  Inactive = "INACTIVE",
  Revoked = "REVOKED",
  PendingTransfer = "PENDING_TRANSFER",
  RegisterInactive = "REGISTER_INACTIVE",
  PendingActivation = "PENDING_ACTIVATION",
}

export class RegisterCertificateWithoutCARequestBody extends SpeakeasyBase {
  /**
   * The PEM of a certificate.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "certificatePem" })
  certificatePem: string;

  /**
   * The status of the register certificate request.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "status" })
  status?: RegisterCertificateWithoutCARequestBodyStatusEnum;
}

export class RegisterCertificateWithoutCARequest extends SpeakeasyBase {
  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  requestBody: RegisterCertificateWithoutCARequestBody;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Algorithm",
  })
  xAmzAlgorithm?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Content-Sha256",
  })
  xAmzContentSha256?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Credential",
  })
  xAmzCredential?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Date",
  })
  xAmzDate?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Security-Token",
  })
  xAmzSecurityToken?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Signature",
  })
  xAmzSignature?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-SignedHeaders",
  })
  xAmzSignedHeaders?: string;
}

export class RegisterCertificateWithoutCAResponse extends SpeakeasyBase {
  /**
   * CertificateStateException
   */
  @SpeakeasyMetadata()
  certificateStateException?: any;

  /**
   * CertificateValidationException
   */
  @SpeakeasyMetadata()
  certificateValidationException?: any;

  @SpeakeasyMetadata()
  contentType: string;

  /**
   * InternalFailureException
   */
  @SpeakeasyMetadata()
  internalFailureException?: any;

  /**
   * InvalidRequestException
   */
  @SpeakeasyMetadata()
  invalidRequestException?: any;

  /**
   * Success
   */
  @SpeakeasyMetadata()
  registerCertificateWithoutCAResponse?: shared.RegisterCertificateWithoutCAResponse;

  /**
   * ResourceAlreadyExistsException
   */
  @SpeakeasyMetadata()
  resourceAlreadyExistsException?: any;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * ServiceUnavailableException
   */
  @SpeakeasyMetadata()
  serviceUnavailableException?: any;

  /**
   * ThrottlingException
   */
  @SpeakeasyMetadata()
  throttlingException?: any;

  /**
   * UnauthorizedException
   */
  @SpeakeasyMetadata()
  unauthorizedException?: any;
}
