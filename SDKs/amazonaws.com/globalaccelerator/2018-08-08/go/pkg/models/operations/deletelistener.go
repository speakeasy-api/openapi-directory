// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// DeleteListenerXAmzTargetEnum
type DeleteListenerXAmzTargetEnum string

const (
	DeleteListenerXAmzTargetEnumGlobalAcceleratorV20180706DeleteListener DeleteListenerXAmzTargetEnum = "GlobalAccelerator_V20180706.DeleteListener"
)

func (e *DeleteListenerXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "GlobalAccelerator_V20180706.DeleteListener":
		*e = DeleteListenerXAmzTargetEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for DeleteListenerXAmzTargetEnum: %s", s)
	}
}

type DeleteListenerRequest struct {
	DeleteListenerRequest shared.DeleteListenerRequest `request:"mediaType=application/json"`
	XAmzAlgorithm         *string                      `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256     *string                      `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential        *string                      `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate              *string                      `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken     *string                      `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature         *string                      `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders     *string                      `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget            DeleteListenerXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type DeleteListenerResponse struct {
	// AssociatedEndpointGroupFoundException
	AssociatedEndpointGroupFoundException interface{}
	ContentType                           string
	// InternalServiceErrorException
	InternalServiceErrorException interface{}
	// InvalidArgumentException
	InvalidArgumentException interface{}
	// ListenerNotFoundException
	ListenerNotFoundException interface{}
	StatusCode                int
	RawResponse               *http.Response
}
