"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Any, Optional

class Projects:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def networksecurity_projects_locations_authorization_policies_create(self, request: operations.NetworksecurityProjectsLocationsAuthorizationPoliciesCreateRequest, security: operations.NetworksecurityProjectsLocationsAuthorizationPoliciesCreateSecurity) -> operations.NetworksecurityProjectsLocationsAuthorizationPoliciesCreateResponse:
        r"""Creates a new AuthorizationPolicy in a given project and location."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.NetworksecurityProjectsLocationsAuthorizationPoliciesCreateRequest, base_url, '/v1/{parent}/authorizationPolicies', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "authorization_policy_input", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.NetworksecurityProjectsLocationsAuthorizationPoliciesCreateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.NetworksecurityProjectsLocationsAuthorizationPoliciesCreateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Operation])
                res.operation = out

        return res

    def networksecurity_projects_locations_authorization_policies_list(self, request: operations.NetworksecurityProjectsLocationsAuthorizationPoliciesListRequest, security: operations.NetworksecurityProjectsLocationsAuthorizationPoliciesListSecurity) -> operations.NetworksecurityProjectsLocationsAuthorizationPoliciesListResponse:
        r"""Lists AuthorizationPolicies in a given project and location."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.NetworksecurityProjectsLocationsAuthorizationPoliciesListRequest, base_url, '/v1/{parent}/authorizationPolicies', request)
        
        query_params = utils.get_query_params(operations.NetworksecurityProjectsLocationsAuthorizationPoliciesListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.NetworksecurityProjectsLocationsAuthorizationPoliciesListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ListAuthorizationPoliciesResponse])
                res.list_authorization_policies_response = out

        return res

    def networksecurity_projects_locations_client_tls_policies_create(self, request: operations.NetworksecurityProjectsLocationsClientTLSPoliciesCreateRequest, security: operations.NetworksecurityProjectsLocationsClientTLSPoliciesCreateSecurity) -> operations.NetworksecurityProjectsLocationsClientTLSPoliciesCreateResponse:
        r"""Creates a new ClientTlsPolicy in a given project and location."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.NetworksecurityProjectsLocationsClientTLSPoliciesCreateRequest, base_url, '/v1/{parent}/clientTlsPolicies', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "client_tls_policy_input", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.NetworksecurityProjectsLocationsClientTLSPoliciesCreateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.NetworksecurityProjectsLocationsClientTLSPoliciesCreateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Operation])
                res.operation = out

        return res

    def networksecurity_projects_locations_client_tls_policies_list(self, request: operations.NetworksecurityProjectsLocationsClientTLSPoliciesListRequest, security: operations.NetworksecurityProjectsLocationsClientTLSPoliciesListSecurity) -> operations.NetworksecurityProjectsLocationsClientTLSPoliciesListResponse:
        r"""Lists ClientTlsPolicies in a given project and location."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.NetworksecurityProjectsLocationsClientTLSPoliciesListRequest, base_url, '/v1/{parent}/clientTlsPolicies', request)
        
        query_params = utils.get_query_params(operations.NetworksecurityProjectsLocationsClientTLSPoliciesListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.NetworksecurityProjectsLocationsClientTLSPoliciesListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ListClientTLSPoliciesResponse])
                res.list_client_tls_policies_response = out

        return res

    def networksecurity_projects_locations_list(self, request: operations.NetworksecurityProjectsLocationsListRequest, security: operations.NetworksecurityProjectsLocationsListSecurity) -> operations.NetworksecurityProjectsLocationsListResponse:
        r"""Lists information about the supported locations for this service."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.NetworksecurityProjectsLocationsListRequest, base_url, '/v1/{name}/locations', request)
        
        query_params = utils.get_query_params(operations.NetworksecurityProjectsLocationsListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.NetworksecurityProjectsLocationsListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ListLocationsResponse])
                res.list_locations_response = out

        return res

    def networksecurity_projects_locations_operations_cancel(self, request: operations.NetworksecurityProjectsLocationsOperationsCancelRequest, security: operations.NetworksecurityProjectsLocationsOperationsCancelSecurity) -> operations.NetworksecurityProjectsLocationsOperationsCancelResponse:
        r"""Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.NetworksecurityProjectsLocationsOperationsCancelRequest, base_url, '/v1/{name}:cancel', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.NetworksecurityProjectsLocationsOperationsCancelRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.NetworksecurityProjectsLocationsOperationsCancelResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.empty = out

        return res

    def networksecurity_projects_locations_operations_list(self, request: operations.NetworksecurityProjectsLocationsOperationsListRequest, security: operations.NetworksecurityProjectsLocationsOperationsListSecurity) -> operations.NetworksecurityProjectsLocationsOperationsListResponse:
        r"""Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.NetworksecurityProjectsLocationsOperationsListRequest, base_url, '/v1/{name}/operations', request)
        
        query_params = utils.get_query_params(operations.NetworksecurityProjectsLocationsOperationsListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.NetworksecurityProjectsLocationsOperationsListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ListOperationsResponse])
                res.list_operations_response = out

        return res

    def networksecurity_projects_locations_server_tls_policies_create(self, request: operations.NetworksecurityProjectsLocationsServerTLSPoliciesCreateRequest, security: operations.NetworksecurityProjectsLocationsServerTLSPoliciesCreateSecurity) -> operations.NetworksecurityProjectsLocationsServerTLSPoliciesCreateResponse:
        r"""Creates a new ServerTlsPolicy in a given project and location."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.NetworksecurityProjectsLocationsServerTLSPoliciesCreateRequest, base_url, '/v1/{parent}/serverTlsPolicies', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "server_tls_policy_input", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.NetworksecurityProjectsLocationsServerTLSPoliciesCreateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.NetworksecurityProjectsLocationsServerTLSPoliciesCreateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Operation])
                res.operation = out

        return res

    def networksecurity_projects_locations_server_tls_policies_delete(self, request: operations.NetworksecurityProjectsLocationsServerTLSPoliciesDeleteRequest, security: operations.NetworksecurityProjectsLocationsServerTLSPoliciesDeleteSecurity) -> operations.NetworksecurityProjectsLocationsServerTLSPoliciesDeleteResponse:
        r"""Deletes a single ServerTlsPolicy."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.NetworksecurityProjectsLocationsServerTLSPoliciesDeleteRequest, base_url, '/v1/{name}', request)
        
        query_params = utils.get_query_params(operations.NetworksecurityProjectsLocationsServerTLSPoliciesDeleteRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.NetworksecurityProjectsLocationsServerTLSPoliciesDeleteResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Operation])
                res.operation = out

        return res

    def networksecurity_projects_locations_server_tls_policies_get(self, request: operations.NetworksecurityProjectsLocationsServerTLSPoliciesGetRequest, security: operations.NetworksecurityProjectsLocationsServerTLSPoliciesGetSecurity) -> operations.NetworksecurityProjectsLocationsServerTLSPoliciesGetResponse:
        r"""Gets details of a single ServerTlsPolicy."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.NetworksecurityProjectsLocationsServerTLSPoliciesGetRequest, base_url, '/v1/{name}', request)
        
        query_params = utils.get_query_params(operations.NetworksecurityProjectsLocationsServerTLSPoliciesGetRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.NetworksecurityProjectsLocationsServerTLSPoliciesGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ServerTLSPolicy])
                res.server_tls_policy = out

        return res

    def networksecurity_projects_locations_server_tls_policies_get_iam_policy(self, request: operations.NetworksecurityProjectsLocationsServerTLSPoliciesGetIamPolicyRequest, security: operations.NetworksecurityProjectsLocationsServerTLSPoliciesGetIamPolicySecurity) -> operations.NetworksecurityProjectsLocationsServerTLSPoliciesGetIamPolicyResponse:
        r"""Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.NetworksecurityProjectsLocationsServerTLSPoliciesGetIamPolicyRequest, base_url, '/v1/{resource}:getIamPolicy', request)
        
        query_params = utils.get_query_params(operations.NetworksecurityProjectsLocationsServerTLSPoliciesGetIamPolicyRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.NetworksecurityProjectsLocationsServerTLSPoliciesGetIamPolicyResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GoogleIamV1Policy])
                res.google_iam_v1_policy = out

        return res

    def networksecurity_projects_locations_server_tls_policies_list(self, request: operations.NetworksecurityProjectsLocationsServerTLSPoliciesListRequest, security: operations.NetworksecurityProjectsLocationsServerTLSPoliciesListSecurity) -> operations.NetworksecurityProjectsLocationsServerTLSPoliciesListResponse:
        r"""Lists ServerTlsPolicies in a given project and location."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.NetworksecurityProjectsLocationsServerTLSPoliciesListRequest, base_url, '/v1/{parent}/serverTlsPolicies', request)
        
        query_params = utils.get_query_params(operations.NetworksecurityProjectsLocationsServerTLSPoliciesListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.NetworksecurityProjectsLocationsServerTLSPoliciesListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ListServerTLSPoliciesResponse])
                res.list_server_tls_policies_response = out

        return res

    def networksecurity_projects_locations_server_tls_policies_patch(self, request: operations.NetworksecurityProjectsLocationsServerTLSPoliciesPatchRequest, security: operations.NetworksecurityProjectsLocationsServerTLSPoliciesPatchSecurity) -> operations.NetworksecurityProjectsLocationsServerTLSPoliciesPatchResponse:
        r"""Updates the parameters of a single ServerTlsPolicy."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.NetworksecurityProjectsLocationsServerTLSPoliciesPatchRequest, base_url, '/v1/{name}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "server_tls_policy_input", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.NetworksecurityProjectsLocationsServerTLSPoliciesPatchRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PATCH', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.NetworksecurityProjectsLocationsServerTLSPoliciesPatchResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Operation])
                res.operation = out

        return res

    def networksecurity_projects_locations_server_tls_policies_set_iam_policy(self, request: operations.NetworksecurityProjectsLocationsServerTLSPoliciesSetIamPolicyRequest, security: operations.NetworksecurityProjectsLocationsServerTLSPoliciesSetIamPolicySecurity) -> operations.NetworksecurityProjectsLocationsServerTLSPoliciesSetIamPolicyResponse:
        r"""Sets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.NetworksecurityProjectsLocationsServerTLSPoliciesSetIamPolicyRequest, base_url, '/v1/{resource}:setIamPolicy', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "google_iam_v1_set_iam_policy_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.NetworksecurityProjectsLocationsServerTLSPoliciesSetIamPolicyRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.NetworksecurityProjectsLocationsServerTLSPoliciesSetIamPolicyResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GoogleIamV1Policy])
                res.google_iam_v1_policy = out

        return res

    def networksecurity_projects_locations_server_tls_policies_test_iam_permissions(self, request: operations.NetworksecurityProjectsLocationsServerTLSPoliciesTestIamPermissionsRequest, security: operations.NetworksecurityProjectsLocationsServerTLSPoliciesTestIamPermissionsSecurity) -> operations.NetworksecurityProjectsLocationsServerTLSPoliciesTestIamPermissionsResponse:
        r"""Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may \\"fail open\\" without warning."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.NetworksecurityProjectsLocationsServerTLSPoliciesTestIamPermissionsRequest, base_url, '/v1/{resource}:testIamPermissions', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "google_iam_v1_test_iam_permissions_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.NetworksecurityProjectsLocationsServerTLSPoliciesTestIamPermissionsRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.NetworksecurityProjectsLocationsServerTLSPoliciesTestIamPermissionsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GoogleIamV1TestIamPermissionsResponse])
                res.google_iam_v1_test_iam_permissions_response = out

        return res

    