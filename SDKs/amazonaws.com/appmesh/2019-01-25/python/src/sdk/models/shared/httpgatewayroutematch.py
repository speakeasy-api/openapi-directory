"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import gatewayroutehostnamematch as shared_gatewayroutehostnamematch
from ..shared import httpgatewayrouteheader as shared_httpgatewayrouteheader
from ..shared import httpmethod_enum as shared_httpmethod_enum
from ..shared import httppathmatch as shared_httppathmatch
from ..shared import httpqueryparameter as shared_httpqueryparameter
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class HTTPGatewayRouteMatch:
    r"""An object that represents the criteria for determining a request match."""
    
    headers: Optional[list[shared_httpgatewayrouteheader.HTTPGatewayRouteHeader]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('headers'), 'exclude': lambda f: f is None }})  
    hostname: Optional[shared_gatewayroutehostnamematch.GatewayRouteHostnameMatch] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('hostname'), 'exclude': lambda f: f is None }})  
    method: Optional[shared_httpmethod_enum.HTTPMethodEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('method'), 'exclude': lambda f: f is None }})  
    path: Optional[shared_httppathmatch.HTTPPathMatch] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('path'), 'exclude': lambda f: f is None }})  
    port: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('port'), 'exclude': lambda f: f is None }})  
    prefix: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('prefix'), 'exclude': lambda f: f is None }})  
    query_parameters: Optional[list[shared_httpqueryparameter.HTTPQueryParameter]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('queryParameters'), 'exclude': lambda f: f is None }})  
    