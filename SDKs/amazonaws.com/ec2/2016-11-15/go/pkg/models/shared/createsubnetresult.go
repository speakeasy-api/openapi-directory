// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// CreateSubnetResultSubnetIpv6CidrBlockAssociationSetIpv6CidrBlockStateStateEnum - The state of a CIDR block.
type CreateSubnetResultSubnetIpv6CidrBlockAssociationSetIpv6CidrBlockStateStateEnum string

const (
	CreateSubnetResultSubnetIpv6CidrBlockAssociationSetIpv6CidrBlockStateStateEnumAssociating    CreateSubnetResultSubnetIpv6CidrBlockAssociationSetIpv6CidrBlockStateStateEnum = "associating"
	CreateSubnetResultSubnetIpv6CidrBlockAssociationSetIpv6CidrBlockStateStateEnumAssociated     CreateSubnetResultSubnetIpv6CidrBlockAssociationSetIpv6CidrBlockStateStateEnum = "associated"
	CreateSubnetResultSubnetIpv6CidrBlockAssociationSetIpv6CidrBlockStateStateEnumDisassociating CreateSubnetResultSubnetIpv6CidrBlockAssociationSetIpv6CidrBlockStateStateEnum = "disassociating"
	CreateSubnetResultSubnetIpv6CidrBlockAssociationSetIpv6CidrBlockStateStateEnumDisassociated  CreateSubnetResultSubnetIpv6CidrBlockAssociationSetIpv6CidrBlockStateStateEnum = "disassociated"
	CreateSubnetResultSubnetIpv6CidrBlockAssociationSetIpv6CidrBlockStateStateEnumFailing        CreateSubnetResultSubnetIpv6CidrBlockAssociationSetIpv6CidrBlockStateStateEnum = "failing"
	CreateSubnetResultSubnetIpv6CidrBlockAssociationSetIpv6CidrBlockStateStateEnumFailed         CreateSubnetResultSubnetIpv6CidrBlockAssociationSetIpv6CidrBlockStateStateEnum = "failed"
)

func (e CreateSubnetResultSubnetIpv6CidrBlockAssociationSetIpv6CidrBlockStateStateEnum) ToPointer() *CreateSubnetResultSubnetIpv6CidrBlockAssociationSetIpv6CidrBlockStateStateEnum {
	return &e
}

func (e *CreateSubnetResultSubnetIpv6CidrBlockAssociationSetIpv6CidrBlockStateStateEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "associating":
		fallthrough
	case "associated":
		fallthrough
	case "disassociating":
		fallthrough
	case "disassociated":
		fallthrough
	case "failing":
		fallthrough
	case "failed":
		*e = CreateSubnetResultSubnetIpv6CidrBlockAssociationSetIpv6CidrBlockStateStateEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateSubnetResultSubnetIpv6CidrBlockAssociationSetIpv6CidrBlockStateStateEnum: %v", v)
	}
}

// CreateSubnetResultSubnetIpv6CidrBlockAssociationSetIpv6CidrBlockState - The state of the CIDR block.
type CreateSubnetResultSubnetIpv6CidrBlockAssociationSetIpv6CidrBlockState struct {
	State         *CreateSubnetResultSubnetIpv6CidrBlockAssociationSetIpv6CidrBlockStateStateEnum
	StatusMessage *string
}

// CreateSubnetResultSubnetIpv6CidrBlockAssociationSet - Describes an association between a subnet and an IPv6 CIDR block.
type CreateSubnetResultSubnetIpv6CidrBlockAssociationSet struct {
	AssociationID      *string
	Ipv6CidrBlock      *string
	Ipv6CidrBlockState *CreateSubnetResultSubnetIpv6CidrBlockAssociationSetIpv6CidrBlockState
}

// CreateSubnetResultSubnetPrivateDNSNameOptionsOnLaunchHostnameTypeEnum - The type of hostname for EC2 instances. For IPv4 only subnets, an instance DNS name must be based on the instance IPv4 address. For IPv6 only subnets, an instance DNS name must be based on the instance ID. For dual-stack subnets, you can specify whether DNS names use the instance IPv4 address or the instance ID.
type CreateSubnetResultSubnetPrivateDNSNameOptionsOnLaunchHostnameTypeEnum string

const (
	CreateSubnetResultSubnetPrivateDNSNameOptionsOnLaunchHostnameTypeEnumIPName       CreateSubnetResultSubnetPrivateDNSNameOptionsOnLaunchHostnameTypeEnum = "ip-name"
	CreateSubnetResultSubnetPrivateDNSNameOptionsOnLaunchHostnameTypeEnumResourceName CreateSubnetResultSubnetPrivateDNSNameOptionsOnLaunchHostnameTypeEnum = "resource-name"
)

func (e CreateSubnetResultSubnetPrivateDNSNameOptionsOnLaunchHostnameTypeEnum) ToPointer() *CreateSubnetResultSubnetPrivateDNSNameOptionsOnLaunchHostnameTypeEnum {
	return &e
}

func (e *CreateSubnetResultSubnetPrivateDNSNameOptionsOnLaunchHostnameTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ip-name":
		fallthrough
	case "resource-name":
		*e = CreateSubnetResultSubnetPrivateDNSNameOptionsOnLaunchHostnameTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateSubnetResultSubnetPrivateDNSNameOptionsOnLaunchHostnameTypeEnum: %v", v)
	}
}

// CreateSubnetResultSubnetPrivateDNSNameOptionsOnLaunch - The type of hostnames to assign to instances in the subnet at launch. An instance hostname is based on the IPv4 address or ID of the instance.
type CreateSubnetResultSubnetPrivateDNSNameOptionsOnLaunch struct {
	EnableResourceNameDNSAAAARecord *bool
	EnableResourceNameDNSARecord    *bool
	HostnameType                    *CreateSubnetResultSubnetPrivateDNSNameOptionsOnLaunchHostnameTypeEnum
}

// CreateSubnetResultSubnetStateEnum - The current state of the subnet.
type CreateSubnetResultSubnetStateEnum string

const (
	CreateSubnetResultSubnetStateEnumPending   CreateSubnetResultSubnetStateEnum = "pending"
	CreateSubnetResultSubnetStateEnumAvailable CreateSubnetResultSubnetStateEnum = "available"
)

func (e CreateSubnetResultSubnetStateEnum) ToPointer() *CreateSubnetResultSubnetStateEnum {
	return &e
}

func (e *CreateSubnetResultSubnetStateEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "pending":
		fallthrough
	case "available":
		*e = CreateSubnetResultSubnetStateEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateSubnetResultSubnetStateEnum: %v", v)
	}
}

// CreateSubnetResultSubnetTags - Describes a tag.
type CreateSubnetResultSubnetTags struct {
	Key   *string
	Value *string
}

// CreateSubnetResultSubnet - Information about the subnet.
type CreateSubnetResultSubnet struct {
	AssignIpv6AddressOnCreation   *bool
	AvailabilityZone              *string
	AvailabilityZoneID            *string
	AvailableIPAddressCount       *int64
	CidrBlock                     *string
	CustomerOwnedIpv4Pool         *string
	DefaultForAz                  *bool
	EnableDns64                   *bool
	EnableLniAtDeviceIndex        *int64
	Ipv6CidrBlockAssociationSet   []CreateSubnetResultSubnetIpv6CidrBlockAssociationSet
	Ipv6Native                    *bool
	MapCustomerOwnedIPOnLaunch    *bool
	MapPublicIPOnLaunch           *bool
	OutpostArn                    *string
	OwnerID                       *string
	PrivateDNSNameOptionsOnLaunch *CreateSubnetResultSubnetPrivateDNSNameOptionsOnLaunch
	State                         *CreateSubnetResultSubnetStateEnum
	SubnetArn                     *string
	SubnetID                      *string
	Tags                          []CreateSubnetResultSubnetTags
	VpcID                         *string
}

// CreateSubnetResult - Success
type CreateSubnetResult struct {
	Subnet *CreateSubnetResultSubnet
}
