/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class EntityConnections {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Multi-entity: List connections
   *
   * @remarks
   * **Note:** The Multi-entity feature is in **Limited Availability**. If you wish to have access to the feature, submit a request at [Zuora Global Support](http://support.zuora.com/).
   *
   * Retrieves information about certain connections for a specified entity. You can specify the entity to retrieve in the `Zuora-Entity-Ids` request header.
   *
   * You can retrieve:
   *  - Inbound connections
   *  - Outbound connections
   *  - Both inbound and outbound connections
   *
   * ## User Access Permission
   * You can make the call as any entity user.
   *
   */
  getEntityConnections(
    req: operations.GETEntityConnectionsRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GETEntityConnectionsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GETEntityConnectionsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/v1/entity-connections";

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GETEntityConnectionsResponse =
        new operations.GETEntityConnectionsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
          headers: utils.getHeadersFromResponse(httpRes.headers),
        });
      switch (true) {
        case httpRes?.status == 200:
          if (
            utils.matchContentType(
              contentType,
              `application/json; charset=utf-8`
            )
          ) {
            res.getEntityConnectionsResponseType = utils.objectToClass(
              httpRes?.data,
              shared.GETEntityConnectionsResponseType
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Multi-entity: Initiate a connection request
   *
   * @remarks
   * **Note:** The Multi-entity feature is in **Limited Availability**. If you wish to have access to the feature, submit a request at [Zuora Global Support](http://support.zuora.com/).
   *
   * Initiates a connection request from a source entity to a target entity.
   *
   * ## User Access Permission
   * You must make the call as a source entity administrator. Also, this administrator must have permission to access to the target entity.
   *
   */
  postEntityConnections(
    req: operations.POSTEntityConnectionsRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.POSTEntityConnectionsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.POSTEntityConnectionsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/v1/entity-connections";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "postEntityConnectionsType",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._defaultClient;

    const headers = {
      ...utils.getHeadersFromRequest(req),
      ...reqBodyHeaders,
      ...config?.headers,
    };

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.POSTEntityConnectionsResponse =
        new operations.POSTEntityConnectionsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
          headers: utils.getHeadersFromResponse(httpRes.headers),
        });
      switch (true) {
        case httpRes?.status == 200:
          if (
            utils.matchContentType(
              contentType,
              `application/json; charset=utf-8`
            )
          ) {
            res.postEntityConnectionsResponseType = utils.objectToClass(
              httpRes?.data,
              shared.POSTEntityConnectionsResponseType
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Multi-entity: Accept a connection request
   *
   * @remarks
   * **Note:** The Multi-entity feature is in **Limited Availability**. If you wish to have access to the feature, submit a request at [Zuora Global Support](http://support.zuora.com/).
   *
   * Accepts a connection request.
   *
   * ## User Access Permission
   * You must make the call as an entity administrator to accept a connection request.
   *
   */
  putEntityConnectionsAccept(
    req: operations.PUTEntityConnectionsAcceptRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.PUTEntityConnectionsAcceptResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PUTEntityConnectionsAcceptRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/entity-connections/{connection-id}/accept",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };

    const r = client.request({
      url: url,
      method: "put",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PUTEntityConnectionsAcceptResponse =
        new operations.PUTEntityConnectionsAcceptResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
          headers: utils.getHeadersFromResponse(httpRes.headers),
        });
      switch (true) {
        case httpRes?.status == 200:
          if (
            utils.matchContentType(
              contentType,
              `application/json; charset=utf-8`
            )
          ) {
            res.putEntityConnectionsAcceptResponseType = utils.objectToClass(
              httpRes?.data,
              shared.PUTEntityConnectionsAcceptResponseType
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Multi-entity: Deny a connection request
   *
   * @remarks
   * **Note:** The Multi-entity feature is in **Limited Availability**. If you wish to have access to the feature, submit a request at [Zuora Global Support](http://support.zuora.com/).
   *
   * Denies a connection request.
   *
   * ## User Access Permission
   * You must make the call as an entity administrator to deny a connection request.
   *
   */
  putEntityConnectionsDeny(
    req: operations.PUTEntityConnectionsDenyRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.PUTEntityConnectionsDenyResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PUTEntityConnectionsDenyRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/entity-connections/{connection-id}/deny",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };

    const r = client.request({
      url: url,
      method: "put",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PUTEntityConnectionsDenyResponse =
        new operations.PUTEntityConnectionsDenyResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
          headers: utils.getHeadersFromResponse(httpRes.headers),
        });
      switch (true) {
        case httpRes?.status == 200:
          if (
            utils.matchContentType(
              contentType,
              `application/json; charset=utf-8`
            )
          ) {
            res.putEntityConnectionsDenyResponseType = utils.objectToClass(
              httpRes?.data,
              shared.PUTEntityConnectionsDenyResponseType
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Multi-entity: Disconnect a connection
   *
   * @remarks
   * **Note:** The Multi-entity feature is in **Limited Availability**. If you wish to have access to the feature, submit a request at [Zuora Global Support](http://support.zuora.com/).
   *
   * Disconnects an established connection. If you have shared objects from a global entity to a target entity, disconnecting the connection will break the mapping relationship between these entities and cannot be recovered later.
   *
   * ## User Access Permission
   * You must make the call as an administrator of the target entity or source entity.
   *
   */
  putEntityConnectionsDisconnect(
    req: operations.PUTEntityConnectionsDisconnectRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.PUTEntityConnectionsDisconnectResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PUTEntityConnectionsDisconnectRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/entity-connections/{connection-id}/disconnect",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };

    const r = client.request({
      url: url,
      method: "put",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PUTEntityConnectionsDisconnectResponse =
        new operations.PUTEntityConnectionsDisconnectResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
          headers: utils.getHeadersFromResponse(httpRes.headers),
        });
      switch (true) {
        case httpRes?.status == 200:
          if (
            utils.matchContentType(
              contentType,
              `application/json; charset=utf-8`
            )
          ) {
            res.putEntityConnectionsDisconnectResponseType =
              utils.objectToClass(
                httpRes?.data,
                shared.PUTEntityConnectionsDisconnectResponseType
              );
          }
          break;
      }

      return res;
    });
  }
}
