"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from enum import Enum
from typing import Optional

class GetExportThermalPrintBelegeBelegUUIDDialectEnum(str, Enum):
    r"""The thermal printer dialect."""
    ESCPOS = 'escpos'
    ESCPOSLITE = 'escposlite'
    STAR = 'star'
    TEXT = 'text'

class GetExportThermalPrintBelegeBelegUUIDEncodingEnum(str, Enum):
    r"""The encoding of the binary data."""
    RAW = 'raw'
    BASE64 = 'base64'


@dataclasses.dataclass
class GetExportThermalPrintBelegeBelegUUIDRequest:
    
    beleg_uuid: str = dataclasses.field(metadata={'path_param': { 'field_name': 'belegUuid', 'style': 'simple', 'explode': False }})
    r"""The `_uuid` of a particular `Beleg` to export."""  
    dialect: Optional[GetExportThermalPrintBelegeBelegUUIDDialectEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'dialect', 'style': 'form', 'explode': True }})
    r"""The thermal printer dialect."""  
    encoding: Optional[GetExportThermalPrintBelegeBelegUUIDEncodingEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'encoding', 'style': 'form', 'explode': True }})
    r"""The encoding of the binary data."""  
    qr: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'qr', 'style': 'form', 'explode': True }})
    r"""Should the RKSV QR code should be rendered?"""  
    width: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'width', 'style': 'form', 'explode': True }})
    r"""Number of characters per line."""  
    

@dataclasses.dataclass
class GetExportThermalPrintBelegeBelegUUIDResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    