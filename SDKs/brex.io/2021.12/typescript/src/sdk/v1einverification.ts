/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

/**
 * US EIN tax number methods
 */
export class V1EinVerification {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Verifies an EIN number
   *
   * @remarks
   * Performs a basic verification check of a given EIN tax number.
   */
  einVerificationBasic(
    req: operations.EinVerificationBasicRequest,
    security: operations.EinVerificationBasicSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.EinVerificationBasicResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.EinVerificationBasicRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/api/v1/ein-verification/basic-check";
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.EinVerificationBasicSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.EinVerificationBasicResponse =
        new operations.EinVerificationBasicResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.einVerificationBasic200ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.EinVerificationBasic200ApplicationJSON
              );
          }
          break;
        default:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.einVerificationBasicDefaultApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.EinVerificationBasicDefaultApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Verifies EIN number and retrieves company data
   *
   * @remarks
   * Comprehensive verification of a given EIN number. Additionally to the basic verification it will lookup company details
   */
  einVerificationComprehensive(
    req: operations.EinVerificationComprehensiveRequest,
    security: operations.EinVerificationComprehensiveSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.EinVerificationComprehensiveResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.EinVerificationComprehensiveRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") +
      "/api/v1/ein-verification/comprehensive-check";
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.EinVerificationComprehensiveSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.EinVerificationComprehensiveResponse =
        new operations.EinVerificationComprehensiveResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.einVerificationComprehensive200ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.EinVerificationComprehensive200ApplicationJSON
              );
          }
          break;
        default:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.einVerificationComprehensiveDefaultApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.EinVerificationComprehensiveDefaultApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Retrieves a list of EIN numbers
   *
   * @remarks
   * Lookup EIN number for a company by its company name
   */
  einVerificationLookup(
    req: operations.EinVerificationLookupRequest,
    security: operations.EinVerificationLookupSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.EinVerificationLookupResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.EinVerificationLookupRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/api/v1/ein-verification/lookup";
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.EinVerificationLookupSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.EinVerificationLookupResponse =
        new operations.EinVerificationLookupResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.einVerificationLookup200ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.EinVerificationLookup200ApplicationJSON
              );
          }
          break;
        default:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.einVerificationLookupDefaultApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.EinVerificationLookupDefaultApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }
}
