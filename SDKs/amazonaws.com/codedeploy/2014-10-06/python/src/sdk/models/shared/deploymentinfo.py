"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from ..shared import alarmconfiguration as shared_alarmconfiguration
from ..shared import autorollbackconfiguration as shared_autorollbackconfiguration
from ..shared import bluegreendeploymentconfiguration as shared_bluegreendeploymentconfiguration
from ..shared import computeplatform_enum as shared_computeplatform_enum
from ..shared import deploymentcreator_enum as shared_deploymentcreator_enum
from ..shared import deploymentoverview as shared_deploymentoverview
from ..shared import deploymentstatus_enum as shared_deploymentstatus_enum
from ..shared import deploymentstyle as shared_deploymentstyle
from ..shared import errorinformation as shared_errorinformation
from ..shared import fileexistsbehavior_enum as shared_fileexistsbehavior_enum
from ..shared import loadbalancerinfo as shared_loadbalancerinfo
from ..shared import relateddeployments as shared_relateddeployments
from ..shared import revisionlocation as shared_revisionlocation
from ..shared import rollbackinfo as shared_rollbackinfo
from ..shared import targetinstances as shared_targetinstances
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from marshmallow import fields
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class DeploymentInfo:
    r"""Information about a deployment."""
    
    additional_deployment_status_info: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('additionalDeploymentStatusInfo'), 'exclude': lambda f: f is None }})  
    application_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('applicationName'), 'exclude': lambda f: f is None }})  
    auto_rollback_configuration: Optional[shared_autorollbackconfiguration.AutoRollbackConfiguration] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('autoRollbackConfiguration'), 'exclude': lambda f: f is None }})  
    blue_green_deployment_configuration: Optional[shared_bluegreendeploymentconfiguration.BlueGreenDeploymentConfiguration] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('blueGreenDeploymentConfiguration'), 'exclude': lambda f: f is None }})  
    complete_time: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('completeTime'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})  
    compute_platform: Optional[shared_computeplatform_enum.ComputePlatformEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('computePlatform'), 'exclude': lambda f: f is None }})  
    create_time: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('createTime'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})  
    creator: Optional[shared_deploymentcreator_enum.DeploymentCreatorEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('creator'), 'exclude': lambda f: f is None }})  
    deployment_config_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('deploymentConfigName'), 'exclude': lambda f: f is None }})  
    deployment_group_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('deploymentGroupName'), 'exclude': lambda f: f is None }})  
    deployment_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('deploymentId'), 'exclude': lambda f: f is None }})  
    deployment_overview: Optional[shared_deploymentoverview.DeploymentOverview] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('deploymentOverview'), 'exclude': lambda f: f is None }})  
    deployment_status_messages: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('deploymentStatusMessages'), 'exclude': lambda f: f is None }})  
    deployment_style: Optional[shared_deploymentstyle.DeploymentStyle] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('deploymentStyle'), 'exclude': lambda f: f is None }})  
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description'), 'exclude': lambda f: f is None }})  
    error_information: Optional[shared_errorinformation.ErrorInformation] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('errorInformation'), 'exclude': lambda f: f is None }})  
    external_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('externalId'), 'exclude': lambda f: f is None }})  
    file_exists_behavior: Optional[shared_fileexistsbehavior_enum.FileExistsBehaviorEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('fileExistsBehavior'), 'exclude': lambda f: f is None }})  
    ignore_application_stop_failures: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ignoreApplicationStopFailures'), 'exclude': lambda f: f is None }})  
    instance_termination_wait_time_started: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('instanceTerminationWaitTimeStarted'), 'exclude': lambda f: f is None }})  
    load_balancer_info: Optional[shared_loadbalancerinfo.LoadBalancerInfo] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('loadBalancerInfo'), 'exclude': lambda f: f is None }})  
    override_alarm_configuration: Optional[shared_alarmconfiguration.AlarmConfiguration] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('overrideAlarmConfiguration'), 'exclude': lambda f: f is None }})
    r"""Information about alarms associated with a deployment or deployment group."""  
    previous_revision: Optional[shared_revisionlocation.RevisionLocation] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('previousRevision'), 'exclude': lambda f: f is None }})  
    related_deployments: Optional[shared_relateddeployments.RelatedDeployments] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('relatedDeployments'), 'exclude': lambda f: f is None }})
    r"""Information about deployments related to the specified deployment."""  
    revision: Optional[shared_revisionlocation.RevisionLocation] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('revision'), 'exclude': lambda f: f is None }})  
    rollback_info: Optional[shared_rollbackinfo.RollbackInfo] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('rollbackInfo'), 'exclude': lambda f: f is None }})  
    start_time: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('startTime'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})  
    status: Optional[shared_deploymentstatus_enum.DeploymentStatusEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status'), 'exclude': lambda f: f is None }})  
    target_instances: Optional[shared_targetinstances.TargetInstances] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('targetInstances'), 'exclude': lambda f: f is None }})  
    update_outdated_instances_only: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('updateOutdatedInstancesOnly'), 'exclude': lambda f: f is None }})  
    