// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// RotatePagesV1RequestBodyAngleEnum - The angle of rotation of the pages. Positive angles rotate the pages clockwise. Negative angles rotate the pages counter-clockwise.
type RotatePagesV1RequestBodyAngleEnum int

const (
	RotatePagesV1RequestBodyAngleEnumZero                 RotatePagesV1RequestBodyAngleEnum = 0
	RotatePagesV1RequestBodyAngleEnumNinety               RotatePagesV1RequestBodyAngleEnum = 90
	RotatePagesV1RequestBodyAngleEnumOneHundredAndEighty  RotatePagesV1RequestBodyAngleEnum = 180
	RotatePagesV1RequestBodyAngleEnumTwoHundredAndSeventy RotatePagesV1RequestBodyAngleEnum = 270
	RotatePagesV1RequestBodyAngleEnumMinus90              RotatePagesV1RequestBodyAngleEnum = -90
	RotatePagesV1RequestBodyAngleEnumMinus180             RotatePagesV1RequestBodyAngleEnum = -180
	RotatePagesV1RequestBodyAngleEnumMinus270             RotatePagesV1RequestBodyAngleEnum = -270
)

func (e RotatePagesV1RequestBodyAngleEnum) ToPointer() *RotatePagesV1RequestBodyAngleEnum {
	return &e
}

func (e *RotatePagesV1RequestBodyAngleEnum) UnmarshalJSON(data []byte) error {
	var v int
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case 0:
		fallthrough
	case 90:
		fallthrough
	case 180:
		fallthrough
	case 270:
		fallthrough
	case -90:
		fallthrough
	case -180:
		fallthrough
	case -270:
		*e = RotatePagesV1RequestBodyAngleEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RotatePagesV1RequestBodyAngleEnum: %v", v)
	}
}

type RotatePagesV1RequestBodyFile struct {
	Content []byte `multipartForm:"content"`
	File    string `multipartForm:"name=file"`
}

type RotatePagesV1RequestBody struct {
	// The angle of rotation of the pages. Positive angles rotate the pages clockwise. Negative angles rotate the pages counter-clockwise.
	Angle RotatePagesV1RequestBodyAngleEnum `multipartForm:"name=angle"`
	// The input PDF document
	File RotatePagesV1RequestBodyFile `multipartForm:"file"`
	// The first page of the range to rotate in the PDF document. If empty, it defaults to the first page of the document.
	FirstPage *int `multipartForm:"name=first_page"`
	// The last page of the range to rotate in the PDF document. If empty, it defaults to the last page of the document.
	LastPage *int `multipartForm:"name=last_page"`
}

// RotatePagesV14XXApplicationProblemPlusJSON - Error
type RotatePagesV14XXApplicationProblemPlusJSON struct {
	Errors map[string]interface{} `json:"errors,omitempty"`
	Status *int64                 `json:"status,omitempty"`
	Title  *string                `json:"title,omitempty"`
	Type   *string                `json:"type,omitempty"`
}

type RotatePagesV1Response struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// The document was processed succesfully.
	RotatePagesV1200ApplicationPdfBinaryString []byte
	// Error
	RotatePagesV14XXApplicationProblemPlusJSONObject *RotatePagesV14XXApplicationProblemPlusJSON
}
