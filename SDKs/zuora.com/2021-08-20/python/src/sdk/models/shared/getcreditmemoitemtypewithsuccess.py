"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from ..shared import getcmtaxitemtype as shared_getcmtaxitemtype
from ..shared import getcmtaxitemtypenew as shared_getcmtaxitemtypenew
from dataclasses_json import Undefined, dataclass_json
from datetime import date, datetime
from enum import Enum
from marshmallow import fields
from sdk import utils
from typing import Optional

class GETCreditMemoItemTypewithSuccessCreditFromItemSourceEnum(str, Enum):
    r"""The type of the credit from item."""
    INVOICE_ITEM = 'InvoiceItem'
    CREDIT_MEMO_ITEM = 'CreditMemoItem'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GETCreditMemoItemTypewithSuccessFinanceInformation:
    r"""Container for the finance information related to the credit memo item."""
    
    deferred_revenue_accounting_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('deferredRevenueAccountingCode'), 'exclude': lambda f: f is None }})
    r"""The accounting code for the deferred revenue, such as Monthly Recurring Liability."""  
    deferred_revenue_accounting_code_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('deferredRevenueAccountingCodeType'), 'exclude': lambda f: f is None }})
    r"""The type of the deferred revenue accounting code, such as Deferred Revenue."""  
    on_account_accounting_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('onAccountAccountingCode'), 'exclude': lambda f: f is None }})
    r"""The accounting code that maps to an on account in your accounting system."""  
    on_account_accounting_code_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('onAccountAccountingCodeType'), 'exclude': lambda f: f is None }})
    r"""The type of the accounting code that maps to an on account in your accounting system."""  
    recognized_revenue_accounting_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('recognizedRevenueAccountingCode'), 'exclude': lambda f: f is None }})
    r"""The accounting code for the recognized revenue, such as Monthly Recurring Charges or Overage Charges."""  
    recognized_revenue_accounting_code_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('recognizedRevenueAccountingCodeType'), 'exclude': lambda f: f is None }})
    r"""The type of the recognized revenue accounting code, such as Sales Revenue or Sales Discount."""  
    revenue_recognition_rule_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('revenueRecognitionRuleName'), 'exclude': lambda f: f is None }})
    r"""The name of the revenue recognition rule governing the revenue schedule."""  
    revenue_schedule_number: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('revenueScheduleNumber'), 'exclude': lambda f: f is None }})
    r"""Revenue schedule number. The revenue schedule number is always prefixed with \\"RS\\", for example, RS-00000001."""  
    
class GETCreditMemoItemTypewithSuccessSourceItemTypeEnum(str, Enum):
    r"""The type of the source item.
    
    - If a credit memo is not created from an invoice or a product rate plan charge, the value of this field is `SubscriptionComponent`. 
    - If a credit memo is created from an invoice, the value of this field is `InvoiceDetail`.
    - If a credit memo is created from a product rate plan charge, the value of this field is `ProductRatePlanCharge`.
    """
    SUBSCRIPTION_COMPONENT = 'SubscriptionComponent'
    INVOICE_DETAIL = 'InvoiceDetail'
    PRODUCT_RATE_PLAN_CHARGE = 'ProductRatePlanCharge'

class GETCreditMemoItemTypewithSuccessTaxModeEnum(str, Enum):
    r"""The tax mode of the credit memo item, indicating whether the amount of the credit memo item includes tax."""
    TAX_EXCLUSIVE = 'TaxExclusive'
    TAX_INCLUSIVE = 'TaxInclusive'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GETCreditMemoItemTypewithSuccessTaxationItems:
    r"""Container for the taxation items of the credit memo item.
    
    **Note**: This field is only available if you set the `zuora-version` request header to `239.0` or later.
    """
    
    data: Optional[list[shared_getcmtaxitemtypenew.GETCMTaxItemTypeNew]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('data'), 'exclude': lambda f: f is None }})
    r"""List of taxation items."""  
    next_page: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('nextPage'), 'exclude': lambda f: f is None }})
    r"""URL to retrieve the next page of the response if it exists; otherwise absent."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GETCreditMemoItemTypewithSuccess:
    r"""Container for custom fields of a Credit Memo Item object."""
    
    amount: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('amount'), 'exclude': lambda f: f is None }})
    r"""The amount of the credit memo item. For tax-inclusive credit memo items, the amount indicates the credit memo item amount including tax. For tax-exclusive credit memo items, the amount indicates the credit memo item amount excluding tax."""  
    amount_without_tax: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('amountWithoutTax'), 'exclude': lambda f: f is None }})
    r"""The credit memo item amount excluding tax."""  
    applied_amount: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('appliedAmount'), 'exclude': lambda f: f is None }})
    r"""The applied amount of the credit memo item."""  
    applied_to_item_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('appliedToItemId'), 'exclude': lambda f: f is None }})
    r"""The unique ID of the credit memo item that the discount charge is applied to."""  
    comment: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('comment'), 'exclude': lambda f: f is None }})
    r"""Comments about the credit memo item.
    
    **Note**: This field is not available if you set the `zuora-version` request header to `257.0` or later.
    """  
    created_by_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('createdById'), 'exclude': lambda f: f is None }})
    r"""The ID of the Zuora user who created the credit memo item."""  
    created_date: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('createdDate'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""The date and time when the credit memo item was created, in `yyyy-mm-dd hh:mm:ss` format. For example, 2017-03-01 15:31:10."""  
    credit_from_item_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('creditFromItemId'), 'exclude': lambda f: f is None }})
    r"""The ID of the credit from item."""  
    credit_from_item_source: Optional[GETCreditMemoItemTypewithSuccessCreditFromItemSourceEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('creditFromItemSource'), 'exclude': lambda f: f is None }})
    r"""The type of the credit from item."""  
    credit_tax_items: Optional[list[shared_getcmtaxitemtype.GETCMTaxItemType]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('creditTaxItems'), 'exclude': lambda f: f is None }})
    r"""Container for the taxation items of the credit memo item.
    
    **Note**: This field is not available if you set the `zuora-version` request header to `239.0` or later.
    """  
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description'), 'exclude': lambda f: f is None }})
    r"""The description of the credit memo item.
    
    **Note**: This field is only available if you set the `zuora-version` request header to `257.0` or later.
    """  
    finance_information: Optional[GETCreditMemoItemTypewithSuccessFinanceInformation] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('financeInformation'), 'exclude': lambda f: f is None }})
    r"""Container for the finance information related to the credit memo item."""  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""The ID of the credit memo item."""  
    processing_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('processingType'), 'exclude': lambda f: f is None }})
    r"""The kind of the charge for the credit memo item. Its possible values are `Charge` and `Discount`."""  
    quantity: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('quantity'), 'exclude': lambda f: f is None }})
    r"""The number of units for the credit memo item."""  
    refund_amount: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('refundAmount'), 'exclude': lambda f: f is None }})
    r"""The amount of the refund on the credit memo item."""  
    service_end_date: Optional[date] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('serviceEndDate'), 'encoder': utils.dateisoformat(True), 'decoder': utils.datefromisoformat, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""The service end date of the credit memo item."""  
    service_start_date: Optional[date] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('serviceStartDate'), 'encoder': utils.dateisoformat(True), 'decoder': utils.datefromisoformat, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""The service start date of the credit memo item."""  
    sku: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sku'), 'exclude': lambda f: f is None }})
    r"""The SKU for the product associated with the credit memo item."""  
    sku_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('skuName'), 'exclude': lambda f: f is None }})
    r"""The name of the SKU."""  
    source_item_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sourceItemId'), 'exclude': lambda f: f is None }})
    r"""The ID of the source item.
    
    - If the value of the `sourceItemType` field is `SubscriptionComponent` , the value of this field is the ID of the corresponding rate plan charge.
    - If the value of the `sourceItemType` field is `InvoiceDetail`, the value of this field is the ID of the corresponding invoice item.
    - If the value of the `sourceItemType` field is `ProductRatePlanCharge` , the value of this field is the ID of the corresponding product rate plan charge.
    """  
    source_item_type: Optional[GETCreditMemoItemTypewithSuccessSourceItemTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sourceItemType'), 'exclude': lambda f: f is None }})
    r"""The type of the source item.
    
    - If a credit memo is not created from an invoice or a product rate plan charge, the value of this field is `SubscriptionComponent`. 
    - If a credit memo is created from an invoice, the value of this field is `InvoiceDetail`.
    - If a credit memo is created from a product rate plan charge, the value of this field is `ProductRatePlanCharge`.
    """  
    subscription_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('subscriptionId'), 'exclude': lambda f: f is None }})
    r"""The ID of the subscription associated with the credit memo item."""  
    taxation_items: Optional[GETCreditMemoItemTypewithSuccessTaxationItems] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('taxationItems'), 'exclude': lambda f: f is None }})
    r"""Container for the taxation items of the credit memo item.
    
    **Note**: This field is only available if you set the `zuora-version` request header to `239.0` or later.
    """  
    tax_mode: Optional[GETCreditMemoItemTypewithSuccessTaxModeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('taxMode'), 'exclude': lambda f: f is None }})
    r"""The tax mode of the credit memo item, indicating whether the amount of the credit memo item includes tax."""  
    unapplied_amount: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('unappliedAmount'), 'exclude': lambda f: f is None }})
    r"""The unapplied amount of the credit memo item."""  
    unit_of_measure: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('unitOfMeasure'), 'exclude': lambda f: f is None }})
    r"""The units to measure usage."""  
    unit_price: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('unitPrice'), 'exclude': lambda f: f is None }})
    r"""The per-unit price of the credit memo item."""  
    updated_by_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('updatedById'), 'exclude': lambda f: f is None }})
    r"""The ID of the Zuora user who last updated the credit memo item."""  
    updated_date: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('updatedDate'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""The date and time when the credit memo item was last updated, in `yyyy-mm-dd hh:mm:ss` format. For example, 2017-03-02 15:36:10."""  
    