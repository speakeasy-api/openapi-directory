// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// EventTagSiteFilterTypeEnum - Site filter type for this event tag. If no type is specified then the event tag will be applied to all sites.
type EventTagSiteFilterTypeEnum string

const (
	EventTagSiteFilterTypeEnumAllowlist EventTagSiteFilterTypeEnum = "ALLOWLIST"
	EventTagSiteFilterTypeEnumBlocklist EventTagSiteFilterTypeEnum = "BLOCKLIST"
)

func (e *EventTagSiteFilterTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "ALLOWLIST":
		fallthrough
	case "BLOCKLIST":
		*e = EventTagSiteFilterTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for EventTagSiteFilterTypeEnum: %s", s)
	}
}

// EventTagStatusEnum - Status of this event tag. Must be ENABLED for this event tag to fire. This is a required field.
type EventTagStatusEnum string

const (
	EventTagStatusEnumEnabled  EventTagStatusEnum = "ENABLED"
	EventTagStatusEnumDisabled EventTagStatusEnum = "DISABLED"
)

func (e *EventTagStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "ENABLED":
		fallthrough
	case "DISABLED":
		*e = EventTagStatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for EventTagStatusEnum: %s", s)
	}
}

// EventTagTypeEnum - Event tag type. Can be used to specify whether to use a third-party pixel, a third-party JavaScript URL, or a third-party click-through URL for either impression or click tracking. This is a required field.
type EventTagTypeEnum string

const (
	EventTagTypeEnumImpressionImageEventTag      EventTagTypeEnum = "IMPRESSION_IMAGE_EVENT_TAG"
	EventTagTypeEnumImpressionJavascriptEventTag EventTagTypeEnum = "IMPRESSION_JAVASCRIPT_EVENT_TAG"
	EventTagTypeEnumClickThroughEventTag         EventTagTypeEnum = "CLICK_THROUGH_EVENT_TAG"
)

func (e *EventTagTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "IMPRESSION_IMAGE_EVENT_TAG":
		fallthrough
	case "IMPRESSION_JAVASCRIPT_EVENT_TAG":
		fallthrough
	case "CLICK_THROUGH_EVENT_TAG":
		*e = EventTagTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for EventTagTypeEnum: %s", s)
	}
}

// EventTag - Contains properties of an event tag.
type EventTag struct {
	// Account ID of this event tag. This is a read-only field that can be left blank.
	AccountID *string `json:"accountId,omitempty"`
	// Advertiser ID of this event tag. This field or the campaignId field is required on insertion.
	AdvertiserID *string `json:"advertiserId,omitempty"`
	// Represents a DimensionValue resource.
	AdvertiserIDDimensionValue *DimensionValue `json:"advertiserIdDimensionValue,omitempty"`
	// Campaign ID of this event tag. This field or the advertiserId field is required on insertion.
	CampaignID *string `json:"campaignId,omitempty"`
	// Represents a DimensionValue resource.
	CampaignIDDimensionValue *DimensionValue `json:"campaignIdDimensionValue,omitempty"`
	// Whether this event tag should be automatically enabled for all of the advertiser's campaigns and ads.
	EnabledByDefault *bool `json:"enabledByDefault,omitempty"`
	// Whether to remove this event tag from ads that are trafficked through Display & Video 360 to Ad Exchange. This may be useful if the event tag uses a pixel that is unapproved for Ad Exchange bids on one or more networks, such as the Google Display Network.
	ExcludeFromAdxRequests *bool `json:"excludeFromAdxRequests,omitempty"`
	// ID of this event tag. This is a read-only, auto-generated field.
	ID *string `json:"id,omitempty"`
	// Identifies what kind of resource this is. Value: the fixed string "dfareporting#eventTag".
	Kind *string `json:"kind,omitempty"`
	// Name of this event tag. This is a required field and must be less than 256 characters long.
	Name *string `json:"name,omitempty"`
	// Site filter type for this event tag. If no type is specified then the event tag will be applied to all sites.
	SiteFilterType *EventTagSiteFilterTypeEnum `json:"siteFilterType,omitempty"`
	// Filter list of site IDs associated with this event tag. The siteFilterType determines whether this is a allowlist or blocklist filter.
	SiteIds []string `json:"siteIds,omitempty"`
	// Whether this tag is SSL-compliant or not. This is a read-only field.
	SslCompliant *bool `json:"sslCompliant,omitempty"`
	// Status of this event tag. Must be ENABLED for this event tag to fire. This is a required field.
	Status *EventTagStatusEnum `json:"status,omitempty"`
	// Subaccount ID of this event tag. This is a read-only field that can be left blank.
	SubaccountID *string `json:"subaccountId,omitempty"`
	// Event tag type. Can be used to specify whether to use a third-party pixel, a third-party JavaScript URL, or a third-party click-through URL for either impression or click tracking. This is a required field.
	Type *EventTagTypeEnum `json:"type,omitempty"`
	// Payload URL for this event tag. The URL on a click-through event tag should have a landing page URL appended to the end of it. This field is required on insertion.
	URL *string `json:"url,omitempty"`
	// Number of times the landing page URL should be URL-escaped before being appended to the click-through event tag URL. Only applies to click-through event tags as specified by the event tag type.
	URLEscapeLevels *int `json:"urlEscapeLevels,omitempty"`
}
