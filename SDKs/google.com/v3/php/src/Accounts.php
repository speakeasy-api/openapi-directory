<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Accounts 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Creates a new account link between a Hotel Center account and a Google Ads account.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\TravelpartnerAccountsAccountLinksCreateRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\TravelpartnerAccountsAccountLinksCreateResponse
     */
	public function travelpartnerAccountsAccountLinksCreate(
        \OpenAPI\OpenAPI\Models\Operations\TravelpartnerAccountsAccountLinksCreateRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\TravelpartnerAccountsAccountLinksCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v3/{parent}/accountLinks', \OpenAPI\OpenAPI\Models\Operations\TravelpartnerAccountsAccountLinksCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "accountLink", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\TravelpartnerAccountsAccountLinksCreateRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\TravelpartnerAccountsAccountLinksCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->accountLink = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\AccountLink', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Deletes an account link.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\TravelpartnerAccountsAccountLinksDeleteRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\TravelpartnerAccountsAccountLinksDeleteResponse
     */
	public function travelpartnerAccountsAccountLinksDelete(
        \OpenAPI\OpenAPI\Models\Operations\TravelpartnerAccountsAccountLinksDeleteRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\TravelpartnerAccountsAccountLinksDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v3/{name}', \OpenAPI\OpenAPI\Models\Operations\TravelpartnerAccountsAccountLinksDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\TravelpartnerAccountsAccountLinksDeleteRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\TravelpartnerAccountsAccountLinksDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->empty = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns the account links for a Hotel Center account.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\TravelpartnerAccountsAccountLinksListRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\TravelpartnerAccountsAccountLinksListResponse
     */
	public function travelpartnerAccountsAccountLinksList(
        \OpenAPI\OpenAPI\Models\Operations\TravelpartnerAccountsAccountLinksListRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\TravelpartnerAccountsAccountLinksListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v3/{parent}/accountLinks', \OpenAPI\OpenAPI\Models\Operations\TravelpartnerAccountsAccountLinksListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\TravelpartnerAccountsAccountLinksListRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\TravelpartnerAccountsAccountLinksListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listAccountLinksResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListAccountLinksResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a new brand. Because Google detects brands from your existing properties, you only need this operation when you want to configure a brand before you send its properties to Google. Note that it might take a couple of days after your listing feed first provides a brand for the brand to appear.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\TravelpartnerAccountsBrandsCreateRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\TravelpartnerAccountsBrandsCreateResponse
     */
	public function travelpartnerAccountsBrandsCreate(
        \OpenAPI\OpenAPI\Models\Operations\TravelpartnerAccountsBrandsCreateRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\TravelpartnerAccountsBrandsCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v3/{parent}/brands', \OpenAPI\OpenAPI\Models\Operations\TravelpartnerAccountsBrandsCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "brandInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\TravelpartnerAccountsBrandsCreateRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\TravelpartnerAccountsBrandsCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->brand = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Brand', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns the brands for a partner account.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\TravelpartnerAccountsBrandsListRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\TravelpartnerAccountsBrandsListResponse
     */
	public function travelpartnerAccountsBrandsList(
        \OpenAPI\OpenAPI\Models\Operations\TravelpartnerAccountsBrandsListRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\TravelpartnerAccountsBrandsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v3/{parent}/brands', \OpenAPI\OpenAPI\Models\Operations\TravelpartnerAccountsBrandsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\TravelpartnerAccountsBrandsListRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\TravelpartnerAccountsBrandsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listBrandsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListBrandsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates a brand.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\TravelpartnerAccountsBrandsPatchRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\TravelpartnerAccountsBrandsPatchResponse
     */
	public function travelpartnerAccountsBrandsPatch(
        \OpenAPI\OpenAPI\Models\Operations\TravelpartnerAccountsBrandsPatchRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\TravelpartnerAccountsBrandsPatchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v3/{name}', \OpenAPI\OpenAPI\Models\Operations\TravelpartnerAccountsBrandsPatchRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "brandInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\TravelpartnerAccountsBrandsPatchRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\TravelpartnerAccountsBrandsPatchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->brand = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Brand', 'json');
            }
        }

        return $response;
    }
	
    /**
     * **DEPRECATED:** Use PropertyPerformanceReportService.QueryPropertyPerformanceReport, which also has impression reporting, instead. Provides the ability to query (get, filter, and segment) a free booking links report for a specific account.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\TravelpartnerAccountsFreeBookingLinksReportViewsQueryRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\TravelpartnerAccountsFreeBookingLinksReportViewsQueryResponse
     */
	public function travelpartnerAccountsFreeBookingLinksReportViewsQuery(
        \OpenAPI\OpenAPI\Models\Operations\TravelpartnerAccountsFreeBookingLinksReportViewsQueryRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\TravelpartnerAccountsFreeBookingLinksReportViewsQueryResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v3/{name}/freeBookingLinksReportViews:query', \OpenAPI\OpenAPI\Models\Operations\TravelpartnerAccountsFreeBookingLinksReportViewsQueryRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\TravelpartnerAccountsFreeBookingLinksReportViewsQueryRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\TravelpartnerAccountsFreeBookingLinksReportViewsQueryResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->queryFreeBookingLinksReportResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\QueryFreeBookingLinksReportResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns the list of hotel views.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\TravelpartnerAccountsHotelViewsListRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\TravelpartnerAccountsHotelViewsListResponse
     */
	public function travelpartnerAccountsHotelViewsList(
        \OpenAPI\OpenAPI\Models\Operations\TravelpartnerAccountsHotelViewsListRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\TravelpartnerAccountsHotelViewsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v3/{parent}/hotelViews', \OpenAPI\OpenAPI\Models\Operations\TravelpartnerAccountsHotelViewsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\TravelpartnerAccountsHotelViewsListRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\TravelpartnerAccountsHotelViewsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listHotelViewsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListHotelViewsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns summarized information about hotels.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\TravelpartnerAccountsHotelViewsSummarizeRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\TravelpartnerAccountsHotelViewsSummarizeResponse
     */
	public function travelpartnerAccountsHotelViewsSummarize(
        \OpenAPI\OpenAPI\Models\Operations\TravelpartnerAccountsHotelViewsSummarizeRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\TravelpartnerAccountsHotelViewsSummarizeResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v3/{parent}/hotelViews:summarize', \OpenAPI\OpenAPI\Models\Operations\TravelpartnerAccountsHotelViewsSummarizeRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\TravelpartnerAccountsHotelViewsSummarizeRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\TravelpartnerAccountsHotelViewsSummarizeResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->summarizeHotelViewsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\SummarizeHotelViewsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Collection-level custom method to update the Live on Google status for multiple properties. Each call can turn on or off multiple hotels. To turn some hotels on and turn some hotels off, you will have to make multiple calls.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\TravelpartnerAccountsHotelsSetLiveOnGoogleRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\TravelpartnerAccountsHotelsSetLiveOnGoogleResponse
     */
	public function travelpartnerAccountsHotelsSetLiveOnGoogle(
        \OpenAPI\OpenAPI\Models\Operations\TravelpartnerAccountsHotelsSetLiveOnGoogleRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\TravelpartnerAccountsHotelsSetLiveOnGoogleResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v3/{account}/hotels:setLiveOnGoogle', \OpenAPI\OpenAPI\Models\Operations\TravelpartnerAccountsHotelsSetLiveOnGoogleRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "setLiveOnGoogleRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\TravelpartnerAccountsHotelsSetLiveOnGoogleRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\TravelpartnerAccountsHotelsSetLiveOnGoogleResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->setLiveOnGoogleResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\SetLiveOnGoogleResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Uploads a new icon and starts its review process. Generates an `icon_id` and includes it in the icon's resource name, which is the format `accounts/{account_id}/icons/{icon_id}` Returns HTTP status 400 and doesn't trigger the review process if the icon has any of these conditions: * Image is not in PNG format, or not convertible to PNG format. * Size less than 72 pixels * Size greater than 1200 pixels * Aspect ratio other than 1:1
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\TravelpartnerAccountsIconsCreateRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\TravelpartnerAccountsIconsCreateResponse
     */
	public function travelpartnerAccountsIconsCreate(
        \OpenAPI\OpenAPI\Models\Operations\TravelpartnerAccountsIconsCreateRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\TravelpartnerAccountsIconsCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v3/{parent}/icons', \OpenAPI\OpenAPI\Models\Operations\TravelpartnerAccountsIconsCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "iconInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\TravelpartnerAccountsIconsCreateRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\TravelpartnerAccountsIconsCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->icon = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Icon', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns the `Icon`s for a partner account.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\TravelpartnerAccountsIconsListRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\TravelpartnerAccountsIconsListResponse
     */
	public function travelpartnerAccountsIconsList(
        \OpenAPI\OpenAPI\Models\Operations\TravelpartnerAccountsIconsListRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\TravelpartnerAccountsIconsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v3/{parent}/icons', \OpenAPI\OpenAPI\Models\Operations\TravelpartnerAccountsIconsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\TravelpartnerAccountsIconsListRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\TravelpartnerAccountsIconsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listIconsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListIconsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * returns verified listings with data issues and serving eligibilities
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\TravelpartnerAccountsListingsVerifyRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\TravelpartnerAccountsListingsVerifyResponse
     */
	public function travelpartnerAccountsListingsVerify(
        \OpenAPI\OpenAPI\Models\Operations\TravelpartnerAccountsListingsVerifyRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\TravelpartnerAccountsListingsVerifyResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v3/{parent}/listings:verify', \OpenAPI\OpenAPI\Models\Operations\TravelpartnerAccountsListingsVerifyRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "verifyListingsRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\TravelpartnerAccountsListingsVerifyRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\TravelpartnerAccountsListingsVerifyResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->verifyListingsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\VerifyListingsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Provides the ability to query (get, filter, and segment) a participation report for a particular account.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\TravelpartnerAccountsParticipationReportViewsQueryRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\TravelpartnerAccountsParticipationReportViewsQueryResponse
     */
	public function travelpartnerAccountsParticipationReportViewsQuery(
        \OpenAPI\OpenAPI\Models\Operations\TravelpartnerAccountsParticipationReportViewsQueryRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\TravelpartnerAccountsParticipationReportViewsQueryResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v3/{name}/participationReportViews:query', \OpenAPI\OpenAPI\Models\Operations\TravelpartnerAccountsParticipationReportViewsQueryRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\TravelpartnerAccountsParticipationReportViewsQueryRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\TravelpartnerAccountsParticipationReportViewsQueryResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->queryParticipationReportResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\QueryParticipationReportResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists the available price accuracy views.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\TravelpartnerAccountsPriceAccuracyViewsListRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\TravelpartnerAccountsPriceAccuracyViewsListResponse
     */
	public function travelpartnerAccountsPriceAccuracyViewsList(
        \OpenAPI\OpenAPI\Models\Operations\TravelpartnerAccountsPriceAccuracyViewsListRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\TravelpartnerAccountsPriceAccuracyViewsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v3/{parent}/priceAccuracyViews', \OpenAPI\OpenAPI\Models\Operations\TravelpartnerAccountsPriceAccuracyViewsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\TravelpartnerAccountsPriceAccuracyViewsListRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\TravelpartnerAccountsPriceAccuracyViewsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listPriceAccuracyViewsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListPriceAccuracyViewsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns the price accuracy summary.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\TravelpartnerAccountsPriceAccuracyViewsSummarizeRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\TravelpartnerAccountsPriceAccuracyViewsSummarizeResponse
     */
	public function travelpartnerAccountsPriceAccuracyViewsSummarize(
        \OpenAPI\OpenAPI\Models\Operations\TravelpartnerAccountsPriceAccuracyViewsSummarizeRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\TravelpartnerAccountsPriceAccuracyViewsSummarizeResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v3/{parent}/priceAccuracyViews:summarize', \OpenAPI\OpenAPI\Models\Operations\TravelpartnerAccountsPriceAccuracyViewsSummarizeRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\TravelpartnerAccountsPriceAccuracyViewsSummarizeRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\TravelpartnerAccountsPriceAccuracyViewsSummarizeResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->summarizePriceAccuracyResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\SummarizePriceAccuracyResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns the latest price coverage view in full detail.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\TravelpartnerAccountsPriceCoverageViewsGetLatestRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\TravelpartnerAccountsPriceCoverageViewsGetLatestResponse
     */
	public function travelpartnerAccountsPriceCoverageViewsGetLatest(
        \OpenAPI\OpenAPI\Models\Operations\TravelpartnerAccountsPriceCoverageViewsGetLatestRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\TravelpartnerAccountsPriceCoverageViewsGetLatestResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v3/{parent}/priceCoverageViews:latest', \OpenAPI\OpenAPI\Models\Operations\TravelpartnerAccountsPriceCoverageViewsGetLatestRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\TravelpartnerAccountsPriceCoverageViewsGetLatestRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\TravelpartnerAccountsPriceCoverageViewsGetLatestResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->priceCoverageView = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PriceCoverageView', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns the entire price coverage history.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\TravelpartnerAccountsPriceCoverageViewsListRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\TravelpartnerAccountsPriceCoverageViewsListResponse
     */
	public function travelpartnerAccountsPriceCoverageViewsList(
        \OpenAPI\OpenAPI\Models\Operations\TravelpartnerAccountsPriceCoverageViewsListRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\TravelpartnerAccountsPriceCoverageViewsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v3/{parent}/priceCoverageViews', \OpenAPI\OpenAPI\Models\Operations\TravelpartnerAccountsPriceCoverageViewsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\TravelpartnerAccountsPriceCoverageViewsListRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\TravelpartnerAccountsPriceCoverageViewsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listPriceCoverageViewsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListPriceCoverageViewsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Provides the ability to query (get, filter, and segment) a property performance links report for a specific account.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\TravelpartnerAccountsPropertyPerformanceReportViewsQueryRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\TravelpartnerAccountsPropertyPerformanceReportViewsQueryResponse
     */
	public function travelpartnerAccountsPropertyPerformanceReportViewsQuery(
        \OpenAPI\OpenAPI\Models\Operations\TravelpartnerAccountsPropertyPerformanceReportViewsQueryRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\TravelpartnerAccountsPropertyPerformanceReportViewsQueryResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v3/{name}/propertyPerformanceReportViews:query', \OpenAPI\OpenAPI\Models\Operations\TravelpartnerAccountsPropertyPerformanceReportViewsQueryRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\TravelpartnerAccountsPropertyPerformanceReportViewsQueryRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\TravelpartnerAccountsPropertyPerformanceReportViewsQueryResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->queryPropertyPerformanceReportResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\QueryPropertyPerformanceReportResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a reconciliation report and uploads it to Google.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\TravelpartnerAccountsReconciliationReportsCreateRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\TravelpartnerAccountsReconciliationReportsCreateResponse
     */
	public function travelpartnerAccountsReconciliationReportsCreate(
        \OpenAPI\OpenAPI\Models\Operations\TravelpartnerAccountsReconciliationReportsCreateRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\TravelpartnerAccountsReconciliationReportsCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v3/{parent}/reconciliationReports', \OpenAPI\OpenAPI\Models\Operations\TravelpartnerAccountsReconciliationReportsCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "reconciliationReport", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\TravelpartnerAccountsReconciliationReportsCreateRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\TravelpartnerAccountsReconciliationReportsCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->createReconciliationReportResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CreateReconciliationReportResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns a reconciliation report.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\TravelpartnerAccountsReconciliationReportsGetRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\TravelpartnerAccountsReconciliationReportsGetResponse
     */
	public function travelpartnerAccountsReconciliationReportsGet(
        \OpenAPI\OpenAPI\Models\Operations\TravelpartnerAccountsReconciliationReportsGetRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\TravelpartnerAccountsReconciliationReportsGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v3/{name}', \OpenAPI\OpenAPI\Models\Operations\TravelpartnerAccountsReconciliationReportsGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\TravelpartnerAccountsReconciliationReportsGetRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\TravelpartnerAccountsReconciliationReportsGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->reconciliationReport = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ReconciliationReport', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns a list of the names of created reconciliation reports.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\TravelpartnerAccountsReconciliationReportsListRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\TravelpartnerAccountsReconciliationReportsListResponse
     */
	public function travelpartnerAccountsReconciliationReportsList(
        \OpenAPI\OpenAPI\Models\Operations\TravelpartnerAccountsReconciliationReportsListRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\TravelpartnerAccountsReconciliationReportsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v3/{parent}/reconciliationReports', \OpenAPI\OpenAPI\Models\Operations\TravelpartnerAccountsReconciliationReportsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\TravelpartnerAccountsReconciliationReportsListRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\TravelpartnerAccountsReconciliationReportsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listReconciliationReportsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListReconciliationReportsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Validates a reconciliation report.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\TravelpartnerAccountsReconciliationReportsValidateRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\TravelpartnerAccountsReconciliationReportsValidateResponse
     */
	public function travelpartnerAccountsReconciliationReportsValidate(
        \OpenAPI\OpenAPI\Models\Operations\TravelpartnerAccountsReconciliationReportsValidateRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\TravelpartnerAccountsReconciliationReportsValidateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v3/{parent}/reconciliationReports:validate', \OpenAPI\OpenAPI\Models\Operations\TravelpartnerAccountsReconciliationReportsValidateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "reconciliationReport", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\TravelpartnerAccountsReconciliationReportsValidateRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\TravelpartnerAccountsReconciliationReportsValidateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->validateReconciliationReportResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ValidateReconciliationReportResponse', 'json');
            }
        }

        return $response;
    }
}