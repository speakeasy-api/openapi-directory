/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import {
  objectToClass,
  SpeakeasyBase,
  SpeakeasyMetadata,
} from "../../../internal/utils";
import { DiskResourceStatusAsyncReplicationStatus } from "./diskresourcestatusasyncreplicationstatus";
import { Expose, Transform, Type } from "class-transformer";

export class DiskResourceStatus extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "asyncPrimaryDisk" })
  @Type(() => DiskResourceStatusAsyncReplicationStatus)
  asyncPrimaryDisk?: DiskResourceStatusAsyncReplicationStatus;

  /**
   * Key: disk, value: AsyncReplicationStatus message
   */
  @SpeakeasyMetadata({ elemType: DiskResourceStatusAsyncReplicationStatus })
  @Expose({ name: "asyncSecondaryDisks" })
  @Transform(
    ({ value }) => {
      const obj: Record<string, DiskResourceStatusAsyncReplicationStatus> = {};
      for (const key in value) {
        obj[key] = objectToClass(
          value[key],
          DiskResourceStatusAsyncReplicationStatus
        );
      }
      return obj;
    },
    { toClassOnly: true }
  )
  asyncSecondaryDisks?: Record<
    string,
    DiskResourceStatusAsyncReplicationStatus
  >;
}
