"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import basic_error as shared_basic_error
from ..shared import group_mapping as shared_group_mapping
from ..shared import validation_error as shared_validation_error
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class TeamsCreateOrUpdateIdpGroupConnectionsLegacyRequestBodyGroups:
    
    group_description: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('group_description') }})
    r"""Description of the IdP group."""  
    group_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('group_id') }})
    r"""ID of the IdP group."""  
    group_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('group_name') }})
    r"""Name of the IdP group."""  
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description'), 'exclude': lambda f: f is None }})  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class TeamsCreateOrUpdateIdpGroupConnectionsLegacyRequestBody:
    
    groups: list[TeamsCreateOrUpdateIdpGroupConnectionsLegacyRequestBodyGroups] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('groups') }})
    r"""The IdP groups you want to connect to a GitHub team. When updating, the new `groups` object will replace the original one. You must include any existing groups that you don't want to remove."""  
    synced_at: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('synced_at'), 'exclude': lambda f: f is None }})  
    

@dataclasses.dataclass
class TeamsCreateOrUpdateIdpGroupConnectionsLegacyRequest:
    
    request_body: TeamsCreateOrUpdateIdpGroupConnectionsLegacyRequestBody = dataclasses.field(metadata={'request': { 'media_type': 'application/json' }})  
    team_id: int = dataclasses.field(metadata={'path_param': { 'field_name': 'team_id', 'style': 'simple', 'explode': False }})
    r"""The unique identifier of the team."""  
    

@dataclasses.dataclass
class TeamsCreateOrUpdateIdpGroupConnectionsLegacyResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    basic_error: Optional[shared_basic_error.BasicError] = dataclasses.field(default=None)
    r"""Forbidden"""  
    group_mapping: Optional[shared_group_mapping.GroupMapping] = dataclasses.field(default=None)
    r"""Response"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    validation_error: Optional[shared_validation_error.ValidationError] = dataclasses.field(default=None)
    r"""Validation failed, or the endpoint has been spammed."""  
    