"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from datetime import date
from enum import Enum
from marshmallow import fields
from sdk import utils
from typing import Optional

class CreateAnAchTransferParametersFundingEnum(str, Enum):
    r"""The type of the account to which the transfer will be sent."""
    CHECKING = 'checking'
    SAVINGS = 'savings'

class CreateAnAchTransferParametersStandardEntryClassCodeEnum(str, Enum):
    r"""The Standard Entry Class (SEC) code to use for the transfer."""
    CORPORATE_CREDIT_OR_DEBIT = 'corporate_credit_or_debit'
    PREARRANGED_PAYMENTS_AND_DEPOSIT = 'prearranged_payments_and_deposit'
    INTERNET_INITIATED = 'internet_initiated'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateAnAchTransferParameters:
    
    account_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('account_id') }})
    r"""The Increase identifier for the account that will send the transfer."""  
    amount: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('amount') }})
    r"""The transfer amount in cents. A positive amount originates a credit transfer pushing funds to the receiving account. A negative amount originates a debit transfer pulling funds from the receiving account."""  
    statement_descriptor: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('statement_descriptor') }})
    r"""A description you choose to give the transfer. This will be saved with the transfer details, displayed in the dashboard, and returned by the API. If `individual_name` and `company_name` are not explicitly set by this API, the `statement_descriptor` will be sent in those fields to the receiving bank to help the customer recognize the transfer. You are highly encouraged to pass `individual_name` and `company_name` instead of relying on this fallback."""  
    account_number: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('account_number'), 'exclude': lambda f: f is None }})
    r"""The account number for the destination account."""  
    addendum: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('addendum'), 'exclude': lambda f: f is None }})
    r"""Additional information that will be sent to the recipient. This is included in the transfer data sent to the receiving bank."""  
    company_descriptive_date: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('company_descriptive_date'), 'exclude': lambda f: f is None }})
    r"""The description of the date of the transfer, usually in the format `YYYYMMDD`. This is included in the transfer data sent to the receiving bank."""  
    company_discretionary_data: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('company_discretionary_data'), 'exclude': lambda f: f is None }})
    r"""The data you choose to associate with the transfer. This is included in the transfer data sent to the receiving bank."""  
    company_entry_description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('company_entry_description'), 'exclude': lambda f: f is None }})
    r"""A description of the transfer. This is included in the transfer data sent to the receiving bank."""  
    company_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('company_name'), 'exclude': lambda f: f is None }})
    r"""The name by which the recipient knows you. This is included in the transfer data sent to the receiving bank."""  
    effective_date: Optional[date] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('effective_date'), 'encoder': utils.dateisoformat(True), 'decoder': utils.datefromisoformat, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""The transfer effective date in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format."""  
    external_account_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('external_account_id'), 'exclude': lambda f: f is None }})
    r"""The ID of an External Account to initiate a transfer to. If this parameter is provided, `account_number`, `routing_number`, and `funding` must be absent."""  
    funding: Optional[CreateAnAchTransferParametersFundingEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('funding'), 'exclude': lambda f: f is None }})
    r"""The type of the account to which the transfer will be sent."""  
    individual_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('individual_id'), 'exclude': lambda f: f is None }})
    r"""Your identifer for the transfer recipient."""  
    individual_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('individual_name'), 'exclude': lambda f: f is None }})
    r"""The name of the transfer recipient. This value is informational and not verified by the recipient's bank."""  
    require_approval: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('require_approval'), 'exclude': lambda f: f is None }})
    r"""Whether the transfer requires explicit approval via the dashboard or API."""  
    routing_number: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('routing_number'), 'exclude': lambda f: f is None }})
    r"""The American Bankers' Association (ABA) Routing Transit Number (RTN) for the destination account."""  
    standard_entry_class_code: Optional[CreateAnAchTransferParametersStandardEntryClassCodeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('standard_entry_class_code'), 'exclude': lambda f: f is None }})
    r"""The Standard Entry Class (SEC) code to use for the transfer."""  
    