/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;



/**
 * UserSettings200ApplicationXMLUserSettingsUserSettingsMeetingSettingsMeetingPasswordRequirement - Account wide meeting/webinar [passcode requirements](https://support.zoom.us/hc/en-us/articles/360033559832-Meeting-and-webinar-passwords#h_a427384b-e383-4f80-864d-794bf0a37604).
 */
public class UserSettings200ApplicationXMLUserSettingsUserSettingsMeetingSettingsMeetingPasswordRequirement {
    
    public UserSettings200ApplicationXMLUserSettingsUserSettingsMeetingSettingsMeetingPasswordRequirementConsecutiveCharactersLengthEnum consecutiveCharactersLength;
    public UserSettings200ApplicationXMLUserSettingsUserSettingsMeetingSettingsMeetingPasswordRequirement withConsecutiveCharactersLength(UserSettings200ApplicationXMLUserSettingsUserSettingsMeetingSettingsMeetingPasswordRequirementConsecutiveCharactersLengthEnum consecutiveCharactersLength) {
        this.consecutiveCharactersLength = consecutiveCharactersLength;
        return this;
    }
    
    /**
     * If set to `true`, the passcode must contain at least 1 letter (such as a,b,c...).
     * 
     */
    
    public Boolean haveLetter;
    public UserSettings200ApplicationXMLUserSettingsUserSettingsMeetingSettingsMeetingPasswordRequirement withHaveLetter(Boolean haveLetter) {
        this.haveLetter = haveLetter;
        return this;
    }
    
    /**
     * If set to `true`, the passcode must contain at least 1 number (such as 1,2,3...).
     */
    
    public Boolean haveNumber;
    public UserSettings200ApplicationXMLUserSettingsUserSettingsMeetingSettingsMeetingPasswordRequirement withHaveNumber(Boolean haveNumber) {
        this.haveNumber = haveNumber;
        return this;
    }
    
    /**
     * If set to `true`, the passcode must have at least 1 special character (!,@,#...).
     */
    
    public Boolean haveSpecialCharacter;
    public UserSettings200ApplicationXMLUserSettingsUserSettingsMeetingSettingsMeetingPasswordRequirement withHaveSpecialCharacter(Boolean haveSpecialCharacter) {
        this.haveSpecialCharacter = haveSpecialCharacter;
        return this;
    }
    
    /**
     * If set to `true`, the passcode must include both uppercase and lowercase characters.
     */
    
    public Boolean haveUpperAndLowerCharacters;
    public UserSettings200ApplicationXMLUserSettingsUserSettingsMeetingSettingsMeetingPasswordRequirement withHaveUpperAndLowerCharacters(Boolean haveUpperAndLowerCharacters) {
        this.haveUpperAndLowerCharacters = haveUpperAndLowerCharacters;
        return this;
    }
    
    /**
     * The minimum length that the meeting/webinar passcode needs to have.
     */
    
    public Long length;
    public UserSettings200ApplicationXMLUserSettingsUserSettingsMeetingSettingsMeetingPasswordRequirement withLength(Long length) {
        this.length = length;
        return this;
    }
    
    /**
     * If set to `true`, the passcode must only contain numbers and no other characters.
     */
    
    public Boolean onlyAllowNumeric;
    public UserSettings200ApplicationXMLUserSettingsUserSettingsMeetingSettingsMeetingPasswordRequirement withOnlyAllowNumeric(Boolean onlyAllowNumeric) {
        this.onlyAllowNumeric = onlyAllowNumeric;
        return this;
    }
    
    /**
     * If set to `true`, users will be informed if the provided passcode is weak.
     */
    
    public Boolean weakEnhanceDetection;
    public UserSettings200ApplicationXMLUserSettingsUserSettingsMeetingSettingsMeetingPasswordRequirement withWeakEnhanceDetection(Boolean weakEnhanceDetection) {
        this.weakEnhanceDetection = weakEnhanceDetection;
        return this;
    }
    
}
