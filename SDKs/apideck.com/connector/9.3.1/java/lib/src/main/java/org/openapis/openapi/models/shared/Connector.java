/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

public class Connector {
    /**
     * Indicates whether a connector only supports authentication. In this case the connector is not mapped to a Unified API, but can be used with the Proxy API
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("auth_only")
    public Boolean authOnly;

    public Connector withAuthOnly(Boolean authOnly) {
        this.authOnly = authOnly;
        return this;
    }
    
    /**
     * Type of authorization used by the connector
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("auth_type")
    public ConnectorAuthTypeEnum authType;

    public Connector withAuthType(ConnectorAuthTypeEnum authType) {
        this.authType = authType;
        return this;
    }
    
    /**
     * Set to `true` when connector was implemented from downstream docs only and without API access. This state indicates that integration will require Apideck support, and access to downstream API to validate mapping quality.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("blind_mapped")
    public Boolean blindMapped;

    public Connector withBlindMapped(Boolean blindMapped) {
        this.blindMapped = blindMapped;
        return this;
    }
    
    /**
     * List of resources that have settings that can be configured.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("configurable_resources")
    public String[] configurableResources;

    public Connector withConfigurableResources(String[] configurableResources) {
        this.configurableResources = configurableResources;
        return this;
    }
    
    /**
     * Set to `true` when connector allows the definition of custom scopes.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("custom_scopes")
    public Boolean customScopes;

    public Connector withCustomScopes(Boolean customScopes) {
        this.customScopes = customScopes;
        return this;
    }
    
    /**
     * A description of the object.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    public String description;

    public Connector withDescription(String description) {
        this.description = description;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("docs")
    public ConnectorDoc[] docs;

    public Connector withDocs(ConnectorDoc[] docs) {
        this.docs = docs;
        return this;
    }
    
    /**
     * Set to `true` when the connector offers a free trial. Use `signup_url` to sign up for a free trial
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("free_trial_available")
    public Boolean freeTrialAvailable;

    public Connector withFreeTrialAvailable(Boolean freeTrialAvailable) {
        this.freeTrialAvailable = freeTrialAvailable;
        return this;
    }
    
    /**
     * Indicates whether Apideck Sandbox OAuth credentials are available.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("has_sandbox_credentials")
    public Boolean hasSandboxCredentials;

    public Connector withHasSandboxCredentials(Boolean hasSandboxCredentials) {
        this.hasSandboxCredentials = hasSandboxCredentials;
        return this;
    }
    
    /**
     * Link to a small square icon for the connector.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("icon_url")
    public String iconUrl;

    public Connector withIconUrl(String iconUrl) {
        this.iconUrl = iconUrl;
        return this;
    }
    
    /**
     * ID of the connector.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    public String id;

    public Connector withId(String id) {
        this.id = id;
        return this;
    }
    
    /**
     * Link to the full logo for the connector.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("logo_url")
    public String logoUrl;

    public Connector withLogoUrl(String logoUrl) {
        this.logoUrl = logoUrl;
        return this;
    }
    
    /**
     * Name of the connector.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    public String name;

    public Connector withName(String name) {
        this.name = name;
        return this;
    }
    
    /**
     * Location of the OAuth client credentials. For most connectors the OAuth client credentials are stored on integration and managed by the application owner. For others they are stored on connection and managed by the consumer in Vault.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("oauth_credentials_source")
    public ConnectorOauthCredentialsSourceEnum oauthCredentialsSource;

    public Connector withOauthCredentialsSource(ConnectorOauthCredentialsSourceEnum oauthCredentialsSource) {
        this.oauthCredentialsSource = oauthCredentialsSource;
        return this;
    }
    
    /**
     * OAuth grant type used by the connector. More info: https://oauth.net/2/grant-types
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("oauth_grant_type")
    public ConnectorOauthGrantTypeEnum oauthGrantType;

    public Connector withOauthGrantType(ConnectorOauthGrantTypeEnum oauthGrantType) {
        this.oauthGrantType = oauthGrantType;
        return this;
    }
    
    /**
     * List of OAuth Scopes available for this connector.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("oauth_scopes")
    public ConnectorOauthScopes[] oauthScopes;

    public Connector withOauthScopes(ConnectorOauthScopes[] oauthScopes) {
        this.oauthScopes = oauthScopes;
        return this;
    }
    
    /**
     * Service provider identifier
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("service_id")
    public String serviceId;

    public Connector withServiceId(String serviceId) {
        this.serviceId = serviceId;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("settings")
    public ConnectorSetting[] settings;

    public Connector withSettings(ConnectorSetting[] settings) {
        this.settings = settings;
        return this;
    }
    
    /**
     * Link to the connector's signup page.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("signup_url")
    public String signupUrl;

    public Connector withSignupUrl(String signupUrl) {
        this.signupUrl = signupUrl;
        return this;
    }
    
    /**
     * Status of the connector. Connectors with status live or beta are callable.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("status")
    public ConnectorStatusEnum status;

    public Connector withStatus(ConnectorStatusEnum status) {
        this.status = status;
        return this;
    }
    
    /**
     * List of events that are supported on the connector across all Unified APIs.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("supported_events")
    public ConnectorEvent[] supportedEvents;

    public Connector withSupportedEvents(ConnectorEvent[] supportedEvents) {
        this.supportedEvents = supportedEvents;
        return this;
    }
    
    /**
     * List of resources that are supported on the connector.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("supported_resources")
    public LinkedConnectorResource[] supportedResources;

    public Connector withSupportedResources(LinkedConnectorResource[] supportedResources) {
        this.supportedResources = supportedResources;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tls_support")
    public ConnectorTlsSupport tlsSupport;

    public Connector withTlsSupport(ConnectorTlsSupport tlsSupport) {
        this.tlsSupport = tlsSupport;
        return this;
    }
    
    /**
     * List of Unified APIs that feature this connector.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("unified_apis")
    public ConnectorUnifiedApis[] unifiedApis;

    public Connector withUnifiedApis(ConnectorUnifiedApis[] unifiedApis) {
        this.unifiedApis = unifiedApis;
        return this;
    }
    
    /**
     * How webhooks are supported for the connector. Sometimes the connector natively supports webhooks, other times Apideck virtualizes them based on polling.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("webhook_support")
    public WebhookSupport webhookSupport;

    public Connector withWebhookSupport(WebhookSupport webhookSupport) {
        this.webhookSupport = webhookSupport;
        return this;
    }
    
    /**
     * Link to the connector's website.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("website_url")
    public String websiteUrl;

    public Connector withWebsiteUrl(String websiteUrl) {
        this.websiteUrl = websiteUrl;
        return this;
    }
    
    public Connector(){}
}
