// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// ModifyInstanceEventWindowResultInstanceEventWindowAssociationTargetTags - Describes a tag.
type ModifyInstanceEventWindowResultInstanceEventWindowAssociationTargetTags struct {
	Key   *string
	Value *string
}

// ModifyInstanceEventWindowResultInstanceEventWindowAssociationTarget - One or more targets associated with the event window.
type ModifyInstanceEventWindowResultInstanceEventWindowAssociationTarget struct {
	DedicatedHostIds []string
	InstanceIds      []string
	Tags             []ModifyInstanceEventWindowResultInstanceEventWindowAssociationTargetTags
}

// ModifyInstanceEventWindowResultInstanceEventWindowStateEnum - The current state of the event window.
type ModifyInstanceEventWindowResultInstanceEventWindowStateEnum string

const (
	ModifyInstanceEventWindowResultInstanceEventWindowStateEnumCreating ModifyInstanceEventWindowResultInstanceEventWindowStateEnum = "creating"
	ModifyInstanceEventWindowResultInstanceEventWindowStateEnumDeleting ModifyInstanceEventWindowResultInstanceEventWindowStateEnum = "deleting"
	ModifyInstanceEventWindowResultInstanceEventWindowStateEnumActive   ModifyInstanceEventWindowResultInstanceEventWindowStateEnum = "active"
	ModifyInstanceEventWindowResultInstanceEventWindowStateEnumDeleted  ModifyInstanceEventWindowResultInstanceEventWindowStateEnum = "deleted"
)

func (e ModifyInstanceEventWindowResultInstanceEventWindowStateEnum) ToPointer() *ModifyInstanceEventWindowResultInstanceEventWindowStateEnum {
	return &e
}

func (e *ModifyInstanceEventWindowResultInstanceEventWindowStateEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "creating":
		fallthrough
	case "deleting":
		fallthrough
	case "active":
		fallthrough
	case "deleted":
		*e = ModifyInstanceEventWindowResultInstanceEventWindowStateEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ModifyInstanceEventWindowResultInstanceEventWindowStateEnum: %v", v)
	}
}

// ModifyInstanceEventWindowResultInstanceEventWindowTags - Describes a tag.
type ModifyInstanceEventWindowResultInstanceEventWindowTags struct {
	Key   *string
	Value *string
}

// ModifyInstanceEventWindowResultInstanceEventWindowTimeRangesEndWeekDayEnum - The day on which the time range ends.
type ModifyInstanceEventWindowResultInstanceEventWindowTimeRangesEndWeekDayEnum string

const (
	ModifyInstanceEventWindowResultInstanceEventWindowTimeRangesEndWeekDayEnumSunday    ModifyInstanceEventWindowResultInstanceEventWindowTimeRangesEndWeekDayEnum = "sunday"
	ModifyInstanceEventWindowResultInstanceEventWindowTimeRangesEndWeekDayEnumMonday    ModifyInstanceEventWindowResultInstanceEventWindowTimeRangesEndWeekDayEnum = "monday"
	ModifyInstanceEventWindowResultInstanceEventWindowTimeRangesEndWeekDayEnumTuesday   ModifyInstanceEventWindowResultInstanceEventWindowTimeRangesEndWeekDayEnum = "tuesday"
	ModifyInstanceEventWindowResultInstanceEventWindowTimeRangesEndWeekDayEnumWednesday ModifyInstanceEventWindowResultInstanceEventWindowTimeRangesEndWeekDayEnum = "wednesday"
	ModifyInstanceEventWindowResultInstanceEventWindowTimeRangesEndWeekDayEnumThursday  ModifyInstanceEventWindowResultInstanceEventWindowTimeRangesEndWeekDayEnum = "thursday"
	ModifyInstanceEventWindowResultInstanceEventWindowTimeRangesEndWeekDayEnumFriday    ModifyInstanceEventWindowResultInstanceEventWindowTimeRangesEndWeekDayEnum = "friday"
	ModifyInstanceEventWindowResultInstanceEventWindowTimeRangesEndWeekDayEnumSaturday  ModifyInstanceEventWindowResultInstanceEventWindowTimeRangesEndWeekDayEnum = "saturday"
)

func (e ModifyInstanceEventWindowResultInstanceEventWindowTimeRangesEndWeekDayEnum) ToPointer() *ModifyInstanceEventWindowResultInstanceEventWindowTimeRangesEndWeekDayEnum {
	return &e
}

func (e *ModifyInstanceEventWindowResultInstanceEventWindowTimeRangesEndWeekDayEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "sunday":
		fallthrough
	case "monday":
		fallthrough
	case "tuesday":
		fallthrough
	case "wednesday":
		fallthrough
	case "thursday":
		fallthrough
	case "friday":
		fallthrough
	case "saturday":
		*e = ModifyInstanceEventWindowResultInstanceEventWindowTimeRangesEndWeekDayEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ModifyInstanceEventWindowResultInstanceEventWindowTimeRangesEndWeekDayEnum: %v", v)
	}
}

// ModifyInstanceEventWindowResultInstanceEventWindowTimeRangesStartWeekDayEnum - The day on which the time range begins.
type ModifyInstanceEventWindowResultInstanceEventWindowTimeRangesStartWeekDayEnum string

const (
	ModifyInstanceEventWindowResultInstanceEventWindowTimeRangesStartWeekDayEnumSunday    ModifyInstanceEventWindowResultInstanceEventWindowTimeRangesStartWeekDayEnum = "sunday"
	ModifyInstanceEventWindowResultInstanceEventWindowTimeRangesStartWeekDayEnumMonday    ModifyInstanceEventWindowResultInstanceEventWindowTimeRangesStartWeekDayEnum = "monday"
	ModifyInstanceEventWindowResultInstanceEventWindowTimeRangesStartWeekDayEnumTuesday   ModifyInstanceEventWindowResultInstanceEventWindowTimeRangesStartWeekDayEnum = "tuesday"
	ModifyInstanceEventWindowResultInstanceEventWindowTimeRangesStartWeekDayEnumWednesday ModifyInstanceEventWindowResultInstanceEventWindowTimeRangesStartWeekDayEnum = "wednesday"
	ModifyInstanceEventWindowResultInstanceEventWindowTimeRangesStartWeekDayEnumThursday  ModifyInstanceEventWindowResultInstanceEventWindowTimeRangesStartWeekDayEnum = "thursday"
	ModifyInstanceEventWindowResultInstanceEventWindowTimeRangesStartWeekDayEnumFriday    ModifyInstanceEventWindowResultInstanceEventWindowTimeRangesStartWeekDayEnum = "friday"
	ModifyInstanceEventWindowResultInstanceEventWindowTimeRangesStartWeekDayEnumSaturday  ModifyInstanceEventWindowResultInstanceEventWindowTimeRangesStartWeekDayEnum = "saturday"
)

func (e ModifyInstanceEventWindowResultInstanceEventWindowTimeRangesStartWeekDayEnum) ToPointer() *ModifyInstanceEventWindowResultInstanceEventWindowTimeRangesStartWeekDayEnum {
	return &e
}

func (e *ModifyInstanceEventWindowResultInstanceEventWindowTimeRangesStartWeekDayEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "sunday":
		fallthrough
	case "monday":
		fallthrough
	case "tuesday":
		fallthrough
	case "wednesday":
		fallthrough
	case "thursday":
		fallthrough
	case "friday":
		fallthrough
	case "saturday":
		*e = ModifyInstanceEventWindowResultInstanceEventWindowTimeRangesStartWeekDayEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ModifyInstanceEventWindowResultInstanceEventWindowTimeRangesStartWeekDayEnum: %v", v)
	}
}

// ModifyInstanceEventWindowResultInstanceEventWindowTimeRanges - The start day and time and the end day and time of the time range, in UTC.
type ModifyInstanceEventWindowResultInstanceEventWindowTimeRanges struct {
	EndHour      *int64
	EndWeekDay   *ModifyInstanceEventWindowResultInstanceEventWindowTimeRangesEndWeekDayEnum
	StartHour    *int64
	StartWeekDay *ModifyInstanceEventWindowResultInstanceEventWindowTimeRangesStartWeekDayEnum
}

// ModifyInstanceEventWindowResultInstanceEventWindow - Information about the event window.
type ModifyInstanceEventWindowResultInstanceEventWindow struct {
	AssociationTarget     *ModifyInstanceEventWindowResultInstanceEventWindowAssociationTarget
	CronExpression        *string
	InstanceEventWindowID *string
	Name                  *string
	State                 *ModifyInstanceEventWindowResultInstanceEventWindowStateEnum
	Tags                  []ModifyInstanceEventWindowResultInstanceEventWindowTags
	TimeRanges            []ModifyInstanceEventWindowResultInstanceEventWindowTimeRanges
}

// ModifyInstanceEventWindowResult - Success
type ModifyInstanceEventWindowResult struct {
	InstanceEventWindow *ModifyInstanceEventWindowResultInstanceEventWindow
}
