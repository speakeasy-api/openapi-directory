"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Component:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def delete_realm_components_id_(self, request: operations.DeleteRealmComponentsIDRequest) -> operations.DeleteRealmComponentsIDResponse:
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteRealmComponentsIDRequest, base_url, '/{realm}/components/{id}', request)
        
        
        client = self._security_client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteRealmComponentsIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def get_realm_components(self, request: operations.GetRealmComponentsRequest) -> operations.GetRealmComponentsResponse:
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetRealmComponentsRequest, base_url, '/{realm}/components', request)
        
        query_params = utils.get_query_params(operations.GetRealmComponentsRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetRealmComponentsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code >= 200 and http_res.status_code < 300:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.ComponentRepresentation]])
                res.component_representations = out

        return res

    def get_realm_components_id_(self, request: operations.GetRealmComponentsIDRequest) -> operations.GetRealmComponentsIDResponse:
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetRealmComponentsIDRequest, base_url, '/{realm}/components/{id}', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetRealmComponentsIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code >= 200 and http_res.status_code < 300:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ComponentRepresentation])
                res.component_representation = out

        return res

    def get_realm_components_id_sub_component_types(self, request: operations.GetRealmComponentsIDSubComponentTypesRequest) -> operations.GetRealmComponentsIDSubComponentTypesResponse:
        r"""List of subcomponent types that are available to configure for a particular parent component."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetRealmComponentsIDSubComponentTypesRequest, base_url, '/{realm}/components/{id}/sub-component-types', request)
        
        query_params = utils.get_query_params(operations.GetRealmComponentsIDSubComponentTypesRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetRealmComponentsIDSubComponentTypesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code >= 200 and http_res.status_code < 300:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.ComponentTypeRepresentation]])
                res.component_type_representations = out

        return res

    def post_realm_components(self, request: operations.PostRealmComponentsRequest) -> operations.PostRealmComponentsResponse:
        base_url = self._server_url
        
        url = utils.generate_url(operations.PostRealmComponentsRequest, base_url, '/{realm}/components', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "component_representation", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostRealmComponentsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def put_realm_components_id_(self, request: operations.PutRealmComponentsIDRequest) -> operations.PutRealmComponentsIDResponse:
        base_url = self._server_url
        
        url = utils.generate_url(operations.PutRealmComponentsIDRequest, base_url, '/{realm}/components/{id}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "component_representation", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PutRealmComponentsIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    