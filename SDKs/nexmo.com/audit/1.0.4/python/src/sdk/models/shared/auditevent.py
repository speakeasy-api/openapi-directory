"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import eventlink as shared_eventlink
from ..shared import eventtypes_enum as shared_eventtypes_enum
from dataclasses_json import Undefined, dataclass_json
from datetime import date
from enum import Enum
from marshmallow import fields
from sdk import utils
from typing import Any, Optional

class AuditEventSourceEnum(str, Enum):
    r"""The source of the event.
    CD: Customer Dashboard DEVAPI: via Developer API
    """
    CD = 'CD'
    DEVAPI = 'DEVAPI'

class AuditEventSourceDescriptionEnum(str, Enum):
    r"""Description of the audit event source."""
    CUSTOMER_DASHBOARD = 'Customer Dashboard'
    DEVELOPER_API = 'Developer API'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class AuditEvent:
    r"""OK"""
    
    links: Optional[shared_eventlink.EventLink] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('_links'), 'exclude': lambda f: f is None }})
    r"""A link to this audit event object if you were to retrieve it individually."""  
    account_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('account_id'), 'exclude': lambda f: f is None }})
    r"""The NEXMO_API_KEY of the Vonage API account that the audit event is associated with."""  
    context: Optional[Any] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('context'), 'exclude': lambda f: f is None }})
    r"""A valid JSON object with information detailing the context of the audit event."""  
    created_at: Optional[date] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('created_at'), 'encoder': utils.dateisoformat(True), 'decoder': utils.datefromisoformat, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""When the audit event was created."""  
    event_type: Optional[shared_eventtypes_enum.EventTypesEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('event_type'), 'exclude': lambda f: f is None }})
    r"""The type of the audit event."""  
    event_type_description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('event_type_description'), 'exclude': lambda f: f is None }})
    r"""A description of the event type"""  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""UUID of the audit event"""  
    source: Optional[AuditEventSourceEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('source'), 'exclude': lambda f: f is None }})
    r"""The source of the event.
    CD: Customer Dashboard DEVAPI: via Developer API
    """  
    source_country: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('source_country'), 'exclude': lambda f: f is None }})
    r"""ISO 3166-1 Alpha-2 country code recorded for the event."""  
    source_description: Optional[AuditEventSourceDescriptionEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('source_description'), 'exclude': lambda f: f is None }})
    r"""Description of the audit event source."""  
    source_ip: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('source_ip'), 'exclude': lambda f: f is None }})
    r"""The IP address used to make the account change."""  
    user_email: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('user_email'), 'exclude': lambda f: f is None }})
    r"""Email of the user whose account the audit event is associated with."""  
    user_id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('user_id'), 'exclude': lambda f: f is None }})
    r"""The ID of the user that the audit event is associated with."""  
    