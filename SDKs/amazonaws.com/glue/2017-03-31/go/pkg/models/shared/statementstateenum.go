// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type StatementStateEnum string

const (
	StatementStateEnumWaiting    StatementStateEnum = "WAITING"
	StatementStateEnumRunning    StatementStateEnum = "RUNNING"
	StatementStateEnumAvailable  StatementStateEnum = "AVAILABLE"
	StatementStateEnumCancelling StatementStateEnum = "CANCELLING"
	StatementStateEnumCancelled  StatementStateEnum = "CANCELLED"
	StatementStateEnumError      StatementStateEnum = "ERROR"
)

func (e StatementStateEnum) ToPointer() *StatementStateEnum {
	return &e
}

func (e *StatementStateEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "WAITING":
		fallthrough
	case "RUNNING":
		fallthrough
	case "AVAILABLE":
		fallthrough
	case "CANCELLING":
		fallthrough
	case "CANCELLED":
		fallthrough
	case "ERROR":
		*e = StatementStateEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for StatementStateEnum: %v", v)
	}
}
