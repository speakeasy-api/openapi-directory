// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// ReactionsCreateForIssueCommentRequestBodyContentEnum - The [reaction type](https://docs.github.com/enterprise-server@2.20/rest/reference/reactions#reaction-types) to add to the issue comment.
type ReactionsCreateForIssueCommentRequestBodyContentEnum string

const (
	ReactionsCreateForIssueCommentRequestBodyContentEnumPlus1    ReactionsCreateForIssueCommentRequestBodyContentEnum = "+1"
	ReactionsCreateForIssueCommentRequestBodyContentEnumMinus1   ReactionsCreateForIssueCommentRequestBodyContentEnum = "-1"
	ReactionsCreateForIssueCommentRequestBodyContentEnumLaugh    ReactionsCreateForIssueCommentRequestBodyContentEnum = "laugh"
	ReactionsCreateForIssueCommentRequestBodyContentEnumConfused ReactionsCreateForIssueCommentRequestBodyContentEnum = "confused"
	ReactionsCreateForIssueCommentRequestBodyContentEnumHeart    ReactionsCreateForIssueCommentRequestBodyContentEnum = "heart"
	ReactionsCreateForIssueCommentRequestBodyContentEnumHooray   ReactionsCreateForIssueCommentRequestBodyContentEnum = "hooray"
	ReactionsCreateForIssueCommentRequestBodyContentEnumRocket   ReactionsCreateForIssueCommentRequestBodyContentEnum = "rocket"
	ReactionsCreateForIssueCommentRequestBodyContentEnumEyes     ReactionsCreateForIssueCommentRequestBodyContentEnum = "eyes"
)

func (e *ReactionsCreateForIssueCommentRequestBodyContentEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "+1":
		fallthrough
	case "-1":
		fallthrough
	case "laugh":
		fallthrough
	case "confused":
		fallthrough
	case "heart":
		fallthrough
	case "hooray":
		fallthrough
	case "rocket":
		fallthrough
	case "eyes":
		*e = ReactionsCreateForIssueCommentRequestBodyContentEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ReactionsCreateForIssueCommentRequestBodyContentEnum: %s", s)
	}
}

type ReactionsCreateForIssueCommentRequestBody struct {
	// The [reaction type](https://docs.github.com/enterprise-server@2.20/rest/reference/reactions#reaction-types) to add to the issue comment.
	Content ReactionsCreateForIssueCommentRequestBodyContentEnum `json:"content"`
}

type ReactionsCreateForIssueCommentRequest struct {
	RequestBody ReactionsCreateForIssueCommentRequestBody `request:"mediaType=application/json"`
	// comment_id parameter
	CommentID int64  `pathParam:"style=simple,explode=false,name=comment_id"`
	Owner     string `pathParam:"style=simple,explode=false,name=owner"`
	Repo      string `pathParam:"style=simple,explode=false,name=repo"`
}

// ReactionsCreateForIssueComment415ApplicationJSON - Preview header missing
type ReactionsCreateForIssueComment415ApplicationJSON struct {
	DocumentationURL string `json:"documentation_url"`
	Message          string `json:"message"`
}

type ReactionsCreateForIssueCommentResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Reaction exists
	Reaction *shared.Reaction
	// Preview header missing
	ReactionsCreateForIssueComment415ApplicationJSONObject *ReactionsCreateForIssueComment415ApplicationJSON
	// Validation failed
	ValidationError *shared.ValidationError
}
