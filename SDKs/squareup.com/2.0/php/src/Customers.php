<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Customers 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * AddGroupToCustomer
     * 
     * Adds a group membership to a customer.
     * 
     * The customer is identified by the `customer_id` value
     * and the customer group is identified by the `group_id` value.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AddGroupToCustomerRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AddGroupToCustomerSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AddGroupToCustomerResponse
     */
	public function addGroupToCustomer(
        \OpenAPI\OpenAPI\Models\Operations\AddGroupToCustomerRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AddGroupToCustomerSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AddGroupToCustomerResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/customers/{customer_id}/groups/{group_id}', \OpenAPI\OpenAPI\Models\Operations\AddGroupToCustomerRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AddGroupToCustomerResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->addGroupToCustomerResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\AddGroupToCustomerResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * CreateCustomer
     * 
     * Creates a new customer for a business.
     * 
     * You must provide at least one of the following values in your request to this
     * endpoint:
     * 
     * - `given_name`
     * - `family_name`
     * - `company_name`
     * - `email_address`
     * - `phone_number`
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\CreateCustomerRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateCustomerSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateCustomerResponse
     */
	public function createCustomer(
        \OpenAPI\OpenAPI\Models\Shared\CreateCustomerRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CreateCustomerSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateCustomerResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/customers');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateCustomerResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->createCustomerResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CreateCustomerResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * CreateCustomerCard
     * 
     * Adds a card on file to an existing customer.
     * 
     * As with charges, calls to `CreateCustomerCard` are idempotent. Multiple
     * calls with the same card nonce return the same card record that was created
     * with the provided nonce during the _first_ call.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateCustomerCardRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateCustomerCardSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateCustomerCardResponse
     */
	public function createCustomerCard(
        \OpenAPI\OpenAPI\Models\Operations\CreateCustomerCardRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CreateCustomerCardSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateCustomerCardResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/customers/{customer_id}/cards', \OpenAPI\OpenAPI\Models\Operations\CreateCustomerCardRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "createCustomerCardRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateCustomerCardResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->createCustomerCardResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CreateCustomerCardResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * DeleteCustomer
     * 
     * Deletes a customer profile from a business. This operation also unlinks any associated cards on file. 
     * 
     * As a best practice, you should include the `version` field in the request to enable [optimistic concurrency](https://developer.squareup.com/docs/working-with-apis/optimistic-concurrency) control. The value must be set to the current version of the customer profile. 
     * 
     * To delete a customer profile that was created by merging existing profiles, you must use the ID of the newly created profile.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteCustomerRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteCustomerSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteCustomerResponse
     */
	public function deleteCustomer(
        \OpenAPI\OpenAPI\Models\Operations\DeleteCustomerRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeleteCustomerSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteCustomerResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/customers/{customer_id}', \OpenAPI\OpenAPI\Models\Operations\DeleteCustomerRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DeleteCustomerRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteCustomerResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->deleteCustomerResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\DeleteCustomerResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * DeleteCustomerCard
     * 
     * Removes a card on file from a customer.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteCustomerCardRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteCustomerCardSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteCustomerCardResponse
     */
	public function deleteCustomerCard(
        \OpenAPI\OpenAPI\Models\Operations\DeleteCustomerCardRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeleteCustomerCardSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteCustomerCardResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/customers/{customer_id}/cards/{card_id}', \OpenAPI\OpenAPI\Models\Operations\DeleteCustomerCardRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteCustomerCardResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->deleteCustomerCardResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\DeleteCustomerCardResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * ListCustomers
     * 
     * Lists customer profiles associated with a Square account.
     * 
     * Under normal operating conditions, newly created or updated customer profiles become available
     * for the listing operation in well under 30 seconds. Occasionally, propagation of the new or updated
     * profiles can take closer to one minute or longer, especially during network incidents and outages.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListCustomersRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListCustomersSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ListCustomersResponse
     */
	public function listCustomers(
        \OpenAPI\OpenAPI\Models\Operations\ListCustomersRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListCustomersSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ListCustomersResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/customers');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListCustomersRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListCustomersResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listCustomersResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListCustomersResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * RemoveGroupFromCustomer
     * 
     * Removes a group membership from a customer.
     * 
     * The customer is identified by the `customer_id` value
     * and the customer group is identified by the `group_id` value.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\RemoveGroupFromCustomerRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\RemoveGroupFromCustomerSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\RemoveGroupFromCustomerResponse
     */
	public function removeGroupFromCustomer(
        \OpenAPI\OpenAPI\Models\Operations\RemoveGroupFromCustomerRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\RemoveGroupFromCustomerSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\RemoveGroupFromCustomerResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/customers/{customer_id}/groups/{group_id}', \OpenAPI\OpenAPI\Models\Operations\RemoveGroupFromCustomerRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\RemoveGroupFromCustomerResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->removeGroupFromCustomerResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\RemoveGroupFromCustomerResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * RetrieveCustomer
     * 
     * Returns details for a single customer.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\RetrieveCustomerRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\RetrieveCustomerSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\RetrieveCustomerResponse
     */
	public function retrieveCustomer(
        \OpenAPI\OpenAPI\Models\Operations\RetrieveCustomerRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\RetrieveCustomerSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\RetrieveCustomerResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/customers/{customer_id}', \OpenAPI\OpenAPI\Models\Operations\RetrieveCustomerRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\RetrieveCustomerResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->retrieveCustomerResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\RetrieveCustomerResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * SearchCustomers
     * 
     * Searches the customer profiles associated with a Square account using a supported query filter.
     * 
     * Calling `SearchCustomers` without any explicit query filter returns all
     * customer profiles ordered alphabetically based on `given_name` and
     * `family_name`.
     * 
     * Under normal operating conditions, newly created or updated customer profiles become available
     * for the search operation in well under 30 seconds. Occasionally, propagation of the new or updated
     * profiles can take closer to one minute or longer, especially during network incidents and outages.
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\SearchCustomersRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\SearchCustomersSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\SearchCustomersResponse
     */
	public function searchCustomers(
        \OpenAPI\OpenAPI\Models\Shared\SearchCustomersRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\SearchCustomersSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\SearchCustomersResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/customers/search');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\SearchCustomersResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->searchCustomersResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\SearchCustomersResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * UpdateCustomer
     * 
     * Updates a customer profile. To change an attribute, specify the new value. To remove an attribute, specify the value as an empty string or empty object.
     * 
     * As a best practice, you should include the `version` field in the request to enable [optimistic concurrency](https://developer.squareup.com/docs/working-with-apis/optimistic-concurrency) control. The value must be set to the current version of the customer profile.
     * 
     * To update a customer profile that was created by merging existing profiles, you must use the ID of the newly created profile.
     * 
     * You cannot use this endpoint to change cards on file. To make changes, use the [Cards API](https://developer.squareup.com/reference/square_2021-08-18/cards-api) or [Gift Cards API](https://developer.squareup.com/reference/square_2021-08-18/gift-cards-api).
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateCustomerRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateCustomerSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateCustomerResponse
     */
	public function updateCustomer(
        \OpenAPI\OpenAPI\Models\Operations\UpdateCustomerRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\UpdateCustomerSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateCustomerResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/customers/{customer_id}', \OpenAPI\OpenAPI\Models\Operations\UpdateCustomerRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "updateCustomerRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateCustomerResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateCustomerResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\UpdateCustomerResponse', 'json');
            }
        }

        return $response;
    }
}