// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"time"
)

// ExternalEventEntityEventTypeEnum - Type of event being recorded.
type ExternalEventEntityEventTypeEnum string

const (
	ExternalEventEntityEventTypeEnumLdapSync         ExternalEventEntityEventTypeEnum = "ldap_sync"
	ExternalEventEntityEventTypeEnumRemoteServerSync ExternalEventEntityEventTypeEnum = "remote_server_sync"
	ExternalEventEntityEventTypeEnumLockout          ExternalEventEntityEventTypeEnum = "lockout"
	ExternalEventEntityEventTypeEnumLdapLogin        ExternalEventEntityEventTypeEnum = "ldap_login"
	ExternalEventEntityEventTypeEnumSamlLogin        ExternalEventEntityEventTypeEnum = "saml_login"
	ExternalEventEntityEventTypeEnumClientLog        ExternalEventEntityEventTypeEnum = "client_log"
	ExternalEventEntityEventTypeEnumPendingWork      ExternalEventEntityEventTypeEnum = "pending_work"
)

func (e ExternalEventEntityEventTypeEnum) ToPointer() *ExternalEventEntityEventTypeEnum {
	return &e
}

func (e *ExternalEventEntityEventTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ldap_sync":
		fallthrough
	case "remote_server_sync":
		fallthrough
	case "lockout":
		fallthrough
	case "ldap_login":
		fallthrough
	case "saml_login":
		fallthrough
	case "client_log":
		fallthrough
	case "pending_work":
		*e = ExternalEventEntityEventTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ExternalEventEntityEventTypeEnum: %v", v)
	}
}

// ExternalEventEntityStatusEnum - Status of event.
type ExternalEventEntityStatusEnum string

const (
	ExternalEventEntityStatusEnumSuccess        ExternalEventEntityStatusEnum = "success"
	ExternalEventEntityStatusEnumFailure        ExternalEventEntityStatusEnum = "failure"
	ExternalEventEntityStatusEnumPartialFailure ExternalEventEntityStatusEnum = "partial_failure"
	ExternalEventEntityStatusEnumInProgress     ExternalEventEntityStatusEnum = "in_progress"
	ExternalEventEntityStatusEnumSkipped        ExternalEventEntityStatusEnum = "skipped"
)

func (e ExternalEventEntityStatusEnum) ToPointer() *ExternalEventEntityStatusEnum {
	return &e
}

func (e *ExternalEventEntityStatusEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "success":
		fallthrough
	case "failure":
		fallthrough
	case "partial_failure":
		fallthrough
	case "in_progress":
		fallthrough
	case "skipped":
		*e = ExternalEventEntityStatusEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ExternalEventEntityStatusEnum: %v", v)
	}
}

// ExternalEventEntity - List External Events
type ExternalEventEntity struct {
	// Event body
	Body *string `json:"body,omitempty"`
	// Link to log file.
	BodyURL *string `json:"body_url,omitempty"`
	// For sync events, the total number of bytes synced.
	BytesSynced *int `json:"bytes_synced,omitempty"`
	// External event create date/time
	CreatedAt *time.Time `json:"created_at,omitempty"`
	// For sync events, the number of files that encountered errors.
	ErroredFiles *int `json:"errored_files,omitempty"`
	// Type of event being recorded.
	EventType *ExternalEventEntityEventTypeEnum `json:"event_type,omitempty"`
	// Folder Behavior ID
	FolderBehaviorID *int `json:"folder_behavior_id,omitempty"`
	// Event ID
	ID *int `json:"id,omitempty"`
	// Associated Remote Server type, if any
	RemoteServerType *string `json:"remote_server_type,omitempty"`
	// Status of event.
	Status *ExternalEventEntityStatusEnum `json:"status,omitempty"`
	// For sync events, the number of files handled successfully.
	SuccessfulFiles *int `json:"successful_files,omitempty"`
}
