"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import googleanalyticsmetadata as shared_googleanalyticsmetadata
from ..shared import honeycodemetadata as shared_honeycodemetadata
from ..shared import salesforcemetadata as shared_salesforcemetadata
from ..shared import slackmetadata as shared_slackmetadata
from ..shared import snowflakemetadata as shared_snowflakemetadata
from ..shared import zendeskmetadata as shared_zendeskmetadata
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Any, Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ConnectorMetadata:
    r"""A structure to specify connector-specific metadata such as <code>oAuthScopes</code>, <code>supportedRegions</code>, <code>privateLinkServiceUrl</code>, and so on."""
    
    amplitude: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Amplitude'), 'exclude': lambda f: f is None }})  
    customer_profiles: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CustomerProfiles'), 'exclude': lambda f: f is None }})  
    datadog: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Datadog'), 'exclude': lambda f: f is None }})  
    dynatrace: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Dynatrace'), 'exclude': lambda f: f is None }})  
    event_bridge: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('EventBridge'), 'exclude': lambda f: f is None }})  
    google_analytics: Optional[shared_googleanalyticsmetadata.GoogleAnalyticsMetadata] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('GoogleAnalytics'), 'exclude': lambda f: f is None }})  
    honeycode: Optional[shared_honeycodemetadata.HoneycodeMetadata] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Honeycode'), 'exclude': lambda f: f is None }})  
    infor_nexus: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('InforNexus'), 'exclude': lambda f: f is None }})  
    marketo: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Marketo'), 'exclude': lambda f: f is None }})  
    pardot: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Pardot'), 'exclude': lambda f: f is None }})  
    redshift: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Redshift'), 'exclude': lambda f: f is None }})  
    s3: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('S3'), 'exclude': lambda f: f is None }})  
    salesforce: Optional[shared_salesforcemetadata.SalesforceMetadata] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Salesforce'), 'exclude': lambda f: f is None }})  
    sapo_data: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SAPOData'), 'exclude': lambda f: f is None }})
    r"""The connector metadata specific to SAPOData."""  
    service_now: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ServiceNow'), 'exclude': lambda f: f is None }})  
    singular: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Singular'), 'exclude': lambda f: f is None }})  
    slack: Optional[shared_slackmetadata.SlackMetadata] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Slack'), 'exclude': lambda f: f is None }})  
    snowflake: Optional[shared_snowflakemetadata.SnowflakeMetadata] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Snowflake'), 'exclude': lambda f: f is None }})  
    trendmicro: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Trendmicro'), 'exclude': lambda f: f is None }})  
    upsolver: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Upsolver'), 'exclude': lambda f: f is None }})  
    veeva: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Veeva'), 'exclude': lambda f: f is None }})  
    zendesk: Optional[shared_zendeskmetadata.ZendeskMetadata] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Zendesk'), 'exclude': lambda f: f is None }})  
    