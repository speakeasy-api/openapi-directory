"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import episode as shared_episode
from ..shared import links as shared_links
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from enum import Enum
from sdk import utils
from typing import Optional


@dataclasses.dataclass
class GetEpisodesSecurity:
    
    api_key: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'apiKey', 'sub_type': 'header', 'field_name': 'Authorization' }})  
    
class GetEpisodesSortEnum(str, Enum):
    CREATED_AT = 'created_at'
    EARLIEST_RELEASED_AT = 'earliest_released_at'
    RELEASED_AT = 'released_at'
    RELEASED_OR_CREATED_AT = 'released_or_created_at'
    SORT_TITLE = 'sort_title'
    TITLE = 'title'
    UPDATED_AT = 'updated_at'


@dataclasses.dataclass
class GetEpisodesRequest:
    
    page_number: int = dataclasses.field(metadata={'query_param': { 'field_name': 'page[number]', 'style': 'form', 'explode': True }})
    r"""Select which page number to receive results for. Pages are numbered starting at 1."""  
    page_size: int = dataclasses.field(metadata={'query_param': { 'field_name': 'page[size]', 'style': 'form', 'explode': True }})
    r"""Indicate how many records to return per page. The maximum is 100."""  
    ids: Optional[list[str]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'ids[]', 'style': 'form', 'explode': True }})
    r"""The list of IDs to filter by. Repeat this parameter for each ID you want to include in the filter.
    The brackets *MUST* be percent-encoded, per the requirements in
    [RFC 3986 § 3.4](https://tools.ietf.org/html/rfc3986#section-3.4).
    """  
    included_in_inventory_calendar: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'included_in_inventory_calendar', 'style': 'form', 'explode': True }})
    r"""Limit the result to episodes usable with an inventory management calendar for the provided AdDeal ID."""  
    month: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'month', 'style': 'form', 'explode': True }})
    r"""Limit the result to episodes released in this month."""  
    published: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'published', 'style': 'form', 'explode': True }})
    r"""If `true`, limit the result to published episodes only.
    If `false`, limit the result to _unpublished_ episodes only.
    """  
    q: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'q', 'style': 'form', 'explode': True }})
    r"""Limit the result to episodes with a title containing this parameter in a case-insensitive way."""  
    released_after: Optional[datetime] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'released_after', 'style': 'form', 'explode': True }})
    r"""Limit the result to episodes released after this timestamp."""  
    released_before: Optional[datetime] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'released_before', 'style': 'form', 'explode': True }})
    r"""Limit the result to episodes released before this timestamp."""  
    rss: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'rss', 'style': 'form', 'explode': True }})
    r"""If `true`, limit the result to published and released episodes holding an available media file.
    If this is `true`, it also changes the default sort order to `-released_at`.
    """  
    season_id: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'season_id', 'style': 'form', 'explode': True }})
    r"""Limit result to episodes linked to this season."""  
    series_id: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'series_id', 'style': 'form', 'explode': True }})
    r"""Limit the result to episodes linked to this series."""  
    sort: Optional[list[GetEpisodesSortEnum]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'sort', 'style': 'form', 'explode': False }})
    r"""Specify how to sort the result. Please refer to either the top section or the
    [JSON:API specification](https://jsonapi.org/format/#fetching-sorting) on how sorting works in general.
    """  
    year: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'year', 'style': 'form', 'explode': True }})
    r"""Limit the result to episodes released in this year."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetEpisodes400ApplicationVndAPIPlusJSONErrorsSource:
    r"""An object containing references to the source of the error, optionally including any of the following members."""
    
    parameter: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('parameter'), 'exclude': lambda f: f is None }})
    r"""A string indicating which URI query parameter caused the error."""  
    pointer: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('pointer'), 'exclude': lambda f: f is None }})
    r"""A JSON Pointer [RFC6901](https://tools.ietf.org/html/rfc6901) to the associated entity in the request document (e.g. `/data` for a primary data object, or `/data/attributes/title` for a specific attribute)."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetEpisodes400ApplicationVndAPIPlusJSONErrors:
    
    code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('code'), 'exclude': lambda f: f is None }})
    r"""An application-specific error code, expressed as a string value"""  
    detail: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('detail'), 'exclude': lambda f: f is None }})
    r"""A human-readable explanation specific to this occurrence of the problem. Like title, this field’s value can be localized."""  
    source: Optional[GetEpisodes400ApplicationVndAPIPlusJSONErrorsSource] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('source'), 'exclude': lambda f: f is None }})
    r"""An object containing references to the source of the error, optionally including any of the following members."""  
    status: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status'), 'exclude': lambda f: f is None }})
    r"""The HTTP status code applicable to this problem, expressed as a string value: 400"""  
    title: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('title'), 'exclude': lambda f: f is None }})
    r"""A short, human-readable summary of the problem that SHOULD NOT change from occurrence to occurrence of the
    problem, except for purposes of localization.
    """  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetEpisodes400ApplicationVndAPIPlusJSON:
    r"""Bad Request
    
    Parameters requiring a specific format must adhere to that format.
    Pagination must be present and have a positive page number and a page size no larger than 100. One initial filter must be provided (`ids`, `series_id`, or `season_id`).
    """
    
    errors: Optional[list[GetEpisodes400ApplicationVndAPIPlusJSONErrors]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('errors'), 'exclude': lambda f: f is None }})
    r"""An error object describing the problem. Please check out the
    [JSON:API Error document reference](https://jsonapi.org/format/#error-objects) for a full
    description of the returned object.
    """  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetEpisodes200ApplicationVndAPIPlusJSON:
    r"""Success"""
    
    data: Optional[list[shared_episode.Episode]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('data'), 'exclude': lambda f: f is None }})  
    links: Optional[shared_links.Links] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('links'), 'exclude': lambda f: f is None }})  
    

@dataclasses.dataclass
class GetEpisodesResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    get_episodes_200_application_vnd_api_plus_json_object: Optional[GetEpisodes200ApplicationVndAPIPlusJSON] = dataclasses.field(default=None)
    r"""Success"""  
    get_episodes_400_application_vnd_api_plus_json_object: Optional[GetEpisodes400ApplicationVndAPIPlusJSON] = dataclasses.field(default=None)
    r"""Bad Request
    
    Parameters requiring a specific format must adhere to that format.
    Pagination must be present and have a positive page number and a page size no larger than 100. One initial filter must be provided (`ids`, `series_id`, or `season_id`).
    """  
    headers: Optional[dict[str, list[str]]] = dataclasses.field(default=None)  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    