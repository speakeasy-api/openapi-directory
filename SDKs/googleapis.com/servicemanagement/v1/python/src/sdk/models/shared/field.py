"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import option as shared_option
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class FieldCardinalityEnum(str, Enum):
    r"""The field cardinality."""
    CARDINALITY_UNKNOWN = 'CARDINALITY_UNKNOWN'
    CARDINALITY_OPTIONAL = 'CARDINALITY_OPTIONAL'
    CARDINALITY_REQUIRED = 'CARDINALITY_REQUIRED'
    CARDINALITY_REPEATED = 'CARDINALITY_REPEATED'

class FieldKindEnum(str, Enum):
    r"""The field type."""
    TYPE_UNKNOWN = 'TYPE_UNKNOWN'
    TYPE_DOUBLE = 'TYPE_DOUBLE'
    TYPE_FLOAT = 'TYPE_FLOAT'
    TYPE_INT64 = 'TYPE_INT64'
    TYPE_UINT64 = 'TYPE_UINT64'
    TYPE_INT32 = 'TYPE_INT32'
    TYPE_FIXED64 = 'TYPE_FIXED64'
    TYPE_FIXED32 = 'TYPE_FIXED32'
    TYPE_BOOL = 'TYPE_BOOL'
    TYPE_STRING = 'TYPE_STRING'
    TYPE_GROUP = 'TYPE_GROUP'
    TYPE_MESSAGE = 'TYPE_MESSAGE'
    TYPE_BYTES = 'TYPE_BYTES'
    TYPE_UINT32 = 'TYPE_UINT32'
    TYPE_ENUM = 'TYPE_ENUM'
    TYPE_SFIXED32 = 'TYPE_SFIXED32'
    TYPE_SFIXED64 = 'TYPE_SFIXED64'
    TYPE_SINT32 = 'TYPE_SINT32'
    TYPE_SINT64 = 'TYPE_SINT64'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Field:
    r"""A single field of a message type."""
    
    cardinality: Optional[FieldCardinalityEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cardinality'), 'exclude': lambda f: f is None }})
    r"""The field cardinality."""  
    default_value: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('defaultValue'), 'exclude': lambda f: f is None }})
    r"""The string value of the default value of this field. Proto2 syntax only."""  
    json_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('jsonName'), 'exclude': lambda f: f is None }})
    r"""The field JSON name."""  
    kind: Optional[FieldKindEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('kind'), 'exclude': lambda f: f is None }})
    r"""The field type."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""The field name."""  
    number: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('number'), 'exclude': lambda f: f is None }})
    r"""The field number."""  
    oneof_index: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('oneofIndex'), 'exclude': lambda f: f is None }})
    r"""The index of the field type in `Type.oneofs`, for message or enumeration types. The first type has index 1; zero means the type is not in the list."""  
    options: Optional[list[shared_option.Option]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('options'), 'exclude': lambda f: f is None }})
    r"""The protocol buffer options."""  
    packed: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('packed'), 'exclude': lambda f: f is None }})
    r"""Whether to use alternative packed wire representation."""  
    type_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('typeUrl'), 'exclude': lambda f: f is None }})
    r"""The field type URL, without the scheme, for message or enumeration types. Example: `\\"type.googleapis.com/google.protobuf.Timestamp\\"`."""  
    