/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.time.LocalDate;

public class CommitteeHistoryProfile {
    /**
     * Affiliated committee or connected organization
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("affiliated_committee_name")
    public String affiliatedCommitteeName;
    public CommitteeHistoryProfile withAffiliatedCommitteeName(String affiliatedCommitteeName) {
        this.affiliatedCommitteeName = affiliatedCommitteeName;
        return this;
    }
    
    /**
     * A unique identifier assigned to each candidate registered with the FEC.
     * If a person runs for several offices, that person will have separate candidate IDs for each office.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("candidate_ids")
    public String[] candidateIds;
    public CommitteeHistoryProfile withCandidateIds(String[] candidateIds) {
        this.candidateIds = candidateIds;
        return this;
    }
    
    /**
     * City of committee as reported on the Form 1
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("city")
    public String city;
    public CommitteeHistoryProfile withCity(String city) {
        this.city = city;
        return this;
    }
    
    /**
     * A unique identifier assigned to each committee or filer registered with the FEC. In general committee id's begin with the letter C which is followed by eight digits.
     * 
     */
    @JsonProperty("committee_id")
    public String committeeId;
    public CommitteeHistoryProfile withCommitteeId(String committeeId) {
        this.committeeId = committeeId;
        return this;
    }
    
    /**
     * Display the label of committee based on committee type, designation and organization type
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("committee_label")
    public String committeeLabel;
    public CommitteeHistoryProfile withCommitteeLabel(String committeeLabel) {
        this.committeeLabel = committeeLabel;
        return this;
    }
    
    /**
     * The one-letter type code of the organization:
     *         - C communication cost
     *         - D delegate
     *         - E electioneering communication
     *         - H House
     *         - I independent expenditure filer (not a committee)
     *         - N PAC - nonqualified
     *         - O independent expenditure-only (super PACs)
     *         - P presidential
     *         - Q PAC - qualified
     *         - S Senate
     *         - U single candidate independent expenditure
     *         - V PAC with non-contribution account, nonqualified
     *         - W PAC with non-contribution account, qualified
     *         - X party, nonqualified
     *         - Y party, qualified
     *         - Z national party non-federal account
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("committee_type")
    public String committeeType;
    public CommitteeHistoryProfile withCommitteeType(String committeeType) {
        this.committeeType = committeeType;
        return this;
    }
    
    /**
     * The one-letter type code of the organization:
     *         - C communication cost
     *         - D delegate
     *         - E electioneering communication
     *         - H House
     *         - I independent expenditure filer (not a committee)
     *         - N PAC - nonqualified
     *         - O independent expenditure-only (super PACs)
     *         - P presidential
     *         - Q PAC - qualified
     *         - S Senate
     *         - U single candidate independent expenditure
     *         - V PAC with non-contribution account, nonqualified
     *         - W PAC with non-contribution account, qualified
     *         - X party, nonqualified
     *         - Y party, qualified
     *         - Z national party non-federal account
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("committee_type_full")
    public String committeeTypeFull;
    public CommitteeHistoryProfile withCommitteeTypeFull(String committeeTypeFull) {
        this.committeeTypeFull = committeeTypeFull;
        return this;
    }
    
    /**
     * True indicates that a candidate committee had been converted to a PAC
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("convert_to_pac_flag")
    public Boolean convertToPacFlag;
    public CommitteeHistoryProfile withConvertToPacFlag(Boolean convertToPacFlag) {
        this.convertToPacFlag = convertToPacFlag;
        return this;
    }
    
    /**
     * A two year election cycle that the committee was active- (after original registration
     * date but before expiration date in Form 1s) The cycle begins with
     * an odd year and is named for its ending, even year.
     * 
     */
    @JsonProperty("cycle")
    public Integer cycle;
    public CommitteeHistoryProfile withCycle(Integer cycle) {
        this.cycle = cycle;
        return this;
    }
    
    /**
     * A two year election cycle that the committee was active- (after original registration
     * date but before expiration date in Form 1s) The cycle begins with
     * an odd year and is named for its ending, even year.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("cycles")
    public Integer[] cycles;
    public CommitteeHistoryProfile withCycles(Integer[] cycles) {
        this.cycles = cycles;
        return this;
    }
    
    /**
     * A two year election cycle that the committee was active- (after original registration
     * date but before expiration date in Form 1), and the committee has filling activity during the cycle
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("cycles_has_activity")
    public Integer[] cyclesHasActivity;
    public CommitteeHistoryProfile withCyclesHasActivity(Integer[] cyclesHasActivity) {
        this.cyclesHasActivity = cyclesHasActivity;
        return this;
    }
    
    /**
     * A two year election cycle that the committee was active- (after original registration
     * date but before expiration date in Form 1s), and the committee files the financial reports
     * ('F3', 'F3X', 'F3P', 'F3L', 'F4', 'F5', 'F7', 'F13') during this cycle.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("cycles_has_financial")
    public Integer[] cyclesHasFinancial;
    public CommitteeHistoryProfile withCyclesHasFinancial(Integer[] cyclesHasFinancial) {
        this.cyclesHasFinancial = cyclesHasFinancial;
        return this;
    }
    
    /**
     * The one-letter designation code of the organization:
     *          - A authorized by a candidate
     *          - J joint fundraising committee
     *          - P principal campaign committee of a candidate
     *          - U unauthorized
     *          - B lobbyist/registrant PAC
     *          - D leadership PAC
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("designation")
    public String designation;
    public CommitteeHistoryProfile withDesignation(String designation) {
        this.designation = designation;
        return this;
    }
    
    /**
     * The one-letter designation code of the organization:
     *          - A authorized by a candidate
     *          - J joint fundraising committee
     *          - P principal campaign committee of a candidate
     *          - U unauthorized
     *          - B lobbyist/registrant PAC
     *          - D leadership PAC
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("designation_full")
    public String designationFull;
    public CommitteeHistoryProfile withDesignationFull(String designationFull) {
        this.designationFull = designationFull;
        return this;
    }
    
    /**
     * The one-letter 
     *     code of the filing frequency:
     *          - A Administratively terminated
     *          - D Debt
     *          - M Monthly filer
     *          - Q Quarterly filer
     *          - T Terminated
     *          - W Waived
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("filing_frequency")
    public String filingFrequency;
    public CommitteeHistoryProfile withFilingFrequency(String filingFrequency) {
        this.filingFrequency = filingFrequency;
        return this;
    }
    
    /**
     * The day the FEC received the committee's first Form 1
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd")
    @JsonProperty("first_f1_date")
    public LocalDate firstF1Date;
    public CommitteeHistoryProfile withFirstF1Date(LocalDate firstF1Date) {
        this.firstF1Date = firstF1Date;
        return this;
    }
    
    /**
     * The day the FEC received the committee's first filing. This is usually a Form 1 committee registration.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd")
    @JsonProperty("first_file_date")
    public LocalDate firstFileDate;
    public CommitteeHistoryProfile withFirstFileDate(LocalDate firstFileDate) {
        this.firstFileDate = firstFileDate;
        return this;
    }
    
    /**
     * Year a candidate runs for federal office.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("former_candidate_election_year")
    public Integer formerCandidateElectionYear;
    public CommitteeHistoryProfile withFormerCandidateElectionYear(Integer formerCandidateElectionYear) {
        this.formerCandidateElectionYear = formerCandidateElectionYear;
        return this;
    }
    
    /**
     * A unique identifier assigned to each candidate registered with the FEC.
     * If a person runs for several offices, that person will have separate candidate IDs for each office.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("former_candidate_id")
    public String formerCandidateId;
    public CommitteeHistoryProfile withFormerCandidateId(String formerCandidateId) {
        this.formerCandidateId = formerCandidateId;
        return this;
    }
    
    /**
     * Name of candidate running for office
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("former_candidate_name")
    public String formerCandidateName;
    public CommitteeHistoryProfile withFormerCandidateName(String formerCandidateName) {
        this.formerCandidateName = formerCandidateName;
        return this;
    }
    
    /**
     * The name of the committee. If a committee changes its name,     the most recent name will be shown. Committee names are not unique. Use committee_id     for looking up records.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("former_committee_name")
    public String formerCommitteeName;
    public CommitteeHistoryProfile withFormerCommitteeName(String formerCommitteeName) {
        this.formerCommitteeName = formerCommitteeName;
        return this;
    }
    
    /**
     * True indicates that a committee is active.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("is_active")
    public Boolean isActive;
    public CommitteeHistoryProfile withIsActive(Boolean isActive) {
        this.isActive = isActive;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("jfc_committee")
    public CommitteeHistoryProfileJfcCommittee[] jfcCommittee;
    public CommitteeHistoryProfile withJfcCommittee(CommitteeHistoryProfileJfcCommittee[] jfcCommittee) {
        this.jfcCommittee = jfcCommittee;
        return this;
    }
    
    /**
     * The latest two year election cycle that the committee has filings
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("last_cycle_has_activity")
    public Integer lastCycleHasActivity;
    public CommitteeHistoryProfile withLastCycleHasActivity(Integer lastCycleHasActivity) {
        this.lastCycleHasActivity = lastCycleHasActivity;
        return this;
    }
    
    /**
     * The latest two year election cycle that the committee files the financial reports
     * ('F3', 'F3X', 'F3P', 'F3L', 'F4', 'F5', 'F7', 'F13').
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("last_cycle_has_financial")
    public Integer lastCycleHasFinancial;
    public CommitteeHistoryProfile withLastCycleHasFinancial(Integer lastCycleHasFinancial) {
        this.lastCycleHasFinancial = lastCycleHasFinancial;
        return this;
    }
    
    /**
     * The day the FEC received the committee's most recent Form 1
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd")
    @JsonProperty("last_f1_date")
    public LocalDate lastF1Date;
    public CommitteeHistoryProfile withLastF1Date(LocalDate lastF1Date) {
        this.lastF1Date = lastF1Date;
        return this;
    }
    
    /**
     * The day the FEC received the committee's most recent filing
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd")
    @JsonProperty("last_file_date")
    public LocalDate lastFileDate;
    public CommitteeHistoryProfile withLastFileDate(LocalDate lastFileDate) {
        this.lastFileDate = lastFileDate;
        return this;
    }
    
    /**
     * The name of the committee. If a committee changes its name,     the most recent name will be shown. Committee names are not unique. Use committee_id     for looking up records.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    public String name;
    public CommitteeHistoryProfile withName(String name) {
        this.name = name;
        return this;
    }
    
    /**
     * The one-letter code for the kind for organization:
     *         - C corporation
     *         - L labor organization
     *         - M membership organization
     *         - T trade association
     *         - V cooperative
     *         - W corporation without capital stock
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("organization_type")
    public String organizationType;
    public CommitteeHistoryProfile withOrganizationType(String organizationType) {
        this.organizationType = organizationType;
        return this;
    }
    
    /**
     * The one-letter code for the kind for organization:
     *         - C corporation
     *         - L labor organization
     *         - M membership organization
     *         - T trade association
     *         - V cooperative
     *         - W corporation without capital stock
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("organization_type_full")
    public String organizationTypeFull;
    public CommitteeHistoryProfile withOrganizationTypeFull(String organizationTypeFull) {
        this.organizationTypeFull = organizationTypeFull;
        return this;
    }
    
    /**
     * Three-letter code for the party affiliated with a candidate or committee. For example, DEM for Democratic Party and REP for Republican Party.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("party")
    public String party;
    public CommitteeHistoryProfile withParty(String party) {
        this.party = party;
        return this;
    }
    
    /**
     * Three-letter code for the party affiliated with a candidate or committee. For example, DEM for Democratic Party and REP for Republican Party.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("party_full")
    public String partyFull;
    public CommitteeHistoryProfile withPartyFull(String partyFull) {
        this.partyFull = partyFull;
        return this;
    }
    
    /**
     * A unique identifier assigned to each candidate registered with the FEC.
     * If a person runs for several offices, that person will have separate candidate IDs for each office. This is a filter for Leadership PAC sponsor.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sponsor_candidate_ids")
    public String[] sponsorCandidateIds;
    public CommitteeHistoryProfile withSponsorCandidateIds(String[] sponsorCandidateIds) {
        this.sponsorCandidateIds = sponsorCandidateIds;
        return this;
    }
    
    /**
     * State of the committee's address as filed on the Form 1
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("state")
    public String state;
    public CommitteeHistoryProfile withState(String state) {
        this.state = state;
        return this;
    }
    
    /**
     * State of committee as reported on the Form 1
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("state_full")
    public String stateFull;
    public CommitteeHistoryProfile withStateFull(String stateFull) {
        this.stateFull = stateFull;
        return this;
    }
    
    /**
     * Street address of committee as reported on the Form 1
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("street_1")
    public String street1;
    public CommitteeHistoryProfile withStreet1(String street1) {
        this.street1 = street1;
        return this;
    }
    
    /**
     * Second line of street address of committee as reported on the Form 1
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("street_2")
    public String street2;
    public CommitteeHistoryProfile withStreet2(String street2) {
        this.street2 = street2;
        return this;
    }
    
    /**
     * Name of the Committee's treasurer. If multiple treasurers for the committee, the most recent treasurer will be shown.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("treasurer_name")
    public String treasurerName;
    public CommitteeHistoryProfile withTreasurerName(String treasurerName) {
        this.treasurerName = treasurerName;
        return this;
    }
    
    /**
     * Zip code of committee as reported on the Form 1
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("zip")
    public String zip;
    public CommitteeHistoryProfile withZip(String zip) {
        this.zip = zip;
        return this;
    }
    
}
