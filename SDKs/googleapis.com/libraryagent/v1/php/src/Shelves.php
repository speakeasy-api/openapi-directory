<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Shelves 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Borrow a book from the library. Returns the book if it is borrowed successfully. Returns NOT_FOUND if the book does not exist in the library. Returns quota exceeded error if the amount of books borrowed exceeds allocation quota in any dimensions.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\LibraryagentShelvesBooksBorrowRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\LibraryagentShelvesBooksBorrowSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\LibraryagentShelvesBooksBorrowResponse
     */
	public function libraryagentShelvesBooksBorrow(
        \OpenAPI\OpenAPI\Models\Operations\LibraryagentShelvesBooksBorrowRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\LibraryagentShelvesBooksBorrowSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\LibraryagentShelvesBooksBorrowResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{name}:borrow', \OpenAPI\OpenAPI\Models\Operations\LibraryagentShelvesBooksBorrowRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\LibraryagentShelvesBooksBorrowRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\LibraryagentShelvesBooksBorrowResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleExampleLibraryagentV1Book = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleExampleLibraryagentV1Book', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets a book. Returns NOT_FOUND if the book does not exist.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\LibraryagentShelvesBooksGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\LibraryagentShelvesBooksGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\LibraryagentShelvesBooksGetResponse
     */
	public function libraryagentShelvesBooksGet(
        \OpenAPI\OpenAPI\Models\Operations\LibraryagentShelvesBooksGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\LibraryagentShelvesBooksGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\LibraryagentShelvesBooksGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{name}', \OpenAPI\OpenAPI\Models\Operations\LibraryagentShelvesBooksGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\LibraryagentShelvesBooksGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\LibraryagentShelvesBooksGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleExampleLibraryagentV1Book = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleExampleLibraryagentV1Book', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists books in a shelf. The order is unspecified but deterministic. Newly created books will not necessarily be added to the end of this list. Returns NOT_FOUND if the shelf does not exist.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\LibraryagentShelvesBooksListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\LibraryagentShelvesBooksListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\LibraryagentShelvesBooksListResponse
     */
	public function libraryagentShelvesBooksList(
        \OpenAPI\OpenAPI\Models\Operations\LibraryagentShelvesBooksListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\LibraryagentShelvesBooksListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\LibraryagentShelvesBooksListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}/books', \OpenAPI\OpenAPI\Models\Operations\LibraryagentShelvesBooksListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\LibraryagentShelvesBooksListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\LibraryagentShelvesBooksListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleExampleLibraryagentV1ListBooksResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleExampleLibraryagentV1ListBooksResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Return a book to the library. Returns the book if it is returned to the library successfully. Returns error if the book does not belong to the library or the users didn't borrow before.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\LibraryagentShelvesBooksReturnRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\LibraryagentShelvesBooksReturnSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\LibraryagentShelvesBooksReturnResponse
     */
	public function libraryagentShelvesBooksReturn(
        \OpenAPI\OpenAPI\Models\Operations\LibraryagentShelvesBooksReturnRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\LibraryagentShelvesBooksReturnSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\LibraryagentShelvesBooksReturnResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{name}:return', \OpenAPI\OpenAPI\Models\Operations\LibraryagentShelvesBooksReturnRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\LibraryagentShelvesBooksReturnRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\LibraryagentShelvesBooksReturnResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleExampleLibraryagentV1Book = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleExampleLibraryagentV1Book', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists shelves. The order is unspecified but deterministic. Newly created shelves will not necessarily be added to the end of this list.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\LibraryagentShelvesListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\LibraryagentShelvesListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\LibraryagentShelvesListResponse
     */
	public function libraryagentShelvesList(
        \OpenAPI\OpenAPI\Models\Operations\LibraryagentShelvesListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\LibraryagentShelvesListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\LibraryagentShelvesListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/shelves');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\LibraryagentShelvesListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\LibraryagentShelvesListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleExampleLibraryagentV1ListShelvesResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleExampleLibraryagentV1ListShelvesResponse', 'json');
            }
        }

        return $response;
    }
}