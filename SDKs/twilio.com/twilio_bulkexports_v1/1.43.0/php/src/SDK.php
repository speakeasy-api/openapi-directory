<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

/**
 * SDK - This is the public Twilio REST API.
 * 
 * @package OpenAPI\OpenAPI
 * @access public
 */
class SDK
{
	public const SERVERS = [
		'https://bulkexports.twilio.com',
	];
	
	public const CREATE_EXPORT_CUSTOM_JOB_SERVERS = [
		'https://bulkexports.twilio.com',
	];
	
	public const DELETE_JOB_SERVERS = [
		'https://bulkexports.twilio.com',
	];
	
	public const FETCH_DAY_SERVERS = [
		'https://bulkexports.twilio.com',
	];
	
	public const FETCH_EXPORT_SERVERS = [
		'https://bulkexports.twilio.com',
	];
	
	public const FETCH_EXPORT_CONFIGURATION_SERVERS = [
		'https://bulkexports.twilio.com',
	];
	
	public const FETCH_JOB_SERVERS = [
		'https://bulkexports.twilio.com',
	];
	
	public const LIST_DAY_SERVERS = [
		'https://bulkexports.twilio.com',
	];
	
	public const LIST_EXPORT_CUSTOM_JOB_SERVERS = [
		'https://bulkexports.twilio.com',
	];
	
	public const UPDATE_EXPORT_CONFIGURATION_SERVERS = [
		'https://bulkexports.twilio.com',
	];
  		
	// SDK private variables namespaced with _ to avoid conflicts with API models
	private ?\GuzzleHttp\ClientInterface $_defaultClient;
	private ?\GuzzleHttp\ClientInterface $_securityClient;
	
	private string $_serverUrl;
	private string $_language = 'php';
	private string $_sdkVersion = '0.0.1';
	private string $_genVersion = 'internal';

	/**
	 * Returns a new instance of the SDK builder used to configure and create the SDK instance.
	 * 
	 * @return SDKBuilder
	 */
	public static function builder(): SDKBuilder
	{
		return new SDKBuilder();
	}

	/**
	 * @param \GuzzleHttp\ClientInterface|null $client
	 * @param string $serverUrl
	 * @param array<string, string>|null $params
	 */
	public function __construct(?\GuzzleHttp\ClientInterface $client, string $serverUrl, ?array $params)
	{
		$this->_defaultClient = $client;
		
		if ($this->_defaultClient === null) {
			$this->_defaultClient = new \GuzzleHttp\Client([
				'timeout' => 60,
			]);
		}

		$this->_securityClient = null;
		if ($this->_securityClient === null) {
			$this->_securityClient = $this->_defaultClient;
		}

		if (!empty($serverUrl)) {
			$this->_serverUrl = Utils\Utils::templateUrl($serverUrl, $params);
		}
		
		if (empty($this->_serverUrl)) {
			$this->_serverUrl = $this::SERVERS[0];
		}
	}
	
    /**
     * createExportCustomJob
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateExportCustomJobRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateExportCustomJobSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateExportCustomJobResponse
     */
	public function createExportCustomJob(
        \OpenAPI\OpenAPI\Models\Operations\CreateExportCustomJobRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CreateExportCustomJobSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateExportCustomJobResponse
    {
        $baseUrl = SDK::CREATE_EXPORT_CUSTOM_JOB_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Exports/{ResourceType}/Jobs', \OpenAPI\OpenAPI\Models\Operations\CreateExportCustomJobRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateExportCustomJobResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->bulkexportsV1ExportExportCustomJob = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BulkexportsV1ExportExportCustomJob', 'json');
            }
        }

        return $response;
    }
	
    /**
     * deleteJob
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteJobRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteJobSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteJobResponse
     */
	public function deleteJob(
        \OpenAPI\OpenAPI\Models\Operations\DeleteJobRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeleteJobSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteJobResponse
    {
        $baseUrl = SDK::DELETE_JOB_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Exports/Jobs/{JobSid}', \OpenAPI\OpenAPI\Models\Operations\DeleteJobRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteJobResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Fetch a specific Day.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchDayRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchDaySecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\FetchDayResponse
     */
	public function fetchDay(
        \OpenAPI\OpenAPI\Models\Operations\FetchDayRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FetchDaySecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\FetchDayResponse
    {
        $baseUrl = SDK::FETCH_DAY_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Exports/{ResourceType}/Days/{Day}', \OpenAPI\OpenAPI\Models\Operations\FetchDayRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FetchDayResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 307) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->bulkexportsV1ExportDayInstance = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BulkexportsV1ExportDayInstance', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Fetch a specific Export.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchExportRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchExportSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\FetchExportResponse
     */
	public function fetchExport(
        \OpenAPI\OpenAPI\Models\Operations\FetchExportRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FetchExportSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\FetchExportResponse
    {
        $baseUrl = SDK::FETCH_EXPORT_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Exports/{ResourceType}', \OpenAPI\OpenAPI\Models\Operations\FetchExportRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FetchExportResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->bulkexportsV1Export = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BulkexportsV1Export', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Fetch a specific Export Configuration.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchExportConfigurationRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchExportConfigurationSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\FetchExportConfigurationResponse
     */
	public function fetchExportConfiguration(
        \OpenAPI\OpenAPI\Models\Operations\FetchExportConfigurationRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FetchExportConfigurationSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\FetchExportConfigurationResponse
    {
        $baseUrl = SDK::FETCH_EXPORT_CONFIGURATION_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Exports/{ResourceType}/Configuration', \OpenAPI\OpenAPI\Models\Operations\FetchExportConfigurationRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FetchExportConfigurationResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->bulkexportsV1ExportConfiguration = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BulkexportsV1ExportConfiguration', 'json');
            }
        }

        return $response;
    }
	
    /**
     * fetchJob
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchJobRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchJobSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\FetchJobResponse
     */
	public function fetchJob(
        \OpenAPI\OpenAPI\Models\Operations\FetchJobRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FetchJobSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\FetchJobResponse
    {
        $baseUrl = SDK::FETCH_JOB_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Exports/Jobs/{JobSid}', \OpenAPI\OpenAPI\Models\Operations\FetchJobRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FetchJobResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->bulkexportsV1ExportJob = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BulkexportsV1ExportJob', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieve a list of all Days for a resource.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListDayRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListDaySecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\ListDayResponse
     */
	public function listDay(
        \OpenAPI\OpenAPI\Models\Operations\ListDayRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListDaySecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\ListDayResponse
    {
        $baseUrl = SDK::LIST_DAY_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Exports/{ResourceType}/Days', \OpenAPI\OpenAPI\Models\Operations\ListDayRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListDayRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListDayResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listDayResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ListDayListDayResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * listExportCustomJob
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListExportCustomJobRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListExportCustomJobSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\ListExportCustomJobResponse
     */
	public function listExportCustomJob(
        \OpenAPI\OpenAPI\Models\Operations\ListExportCustomJobRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListExportCustomJobSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\ListExportCustomJobResponse
    {
        $baseUrl = SDK::LIST_EXPORT_CUSTOM_JOB_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Exports/{ResourceType}/Jobs', \OpenAPI\OpenAPI\Models\Operations\ListExportCustomJobRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListExportCustomJobRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListExportCustomJobResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listExportCustomJobResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ListExportCustomJobListExportCustomJobResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update a specific Export Configuration.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateExportConfigurationRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateExportConfigurationSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateExportConfigurationResponse
     */
	public function updateExportConfiguration(
        \OpenAPI\OpenAPI\Models\Operations\UpdateExportConfigurationRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\UpdateExportConfigurationSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateExportConfigurationResponse
    {
        $baseUrl = SDK::UPDATE_EXPORT_CONFIGURATION_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Exports/{ResourceType}/Configuration', \OpenAPI\OpenAPI\Models\Operations\UpdateExportConfigurationRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateExportConfigurationResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->bulkexportsV1ExportConfiguration = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BulkexportsV1ExportConfiguration', 'json');
            }
        }

        return $response;
    }
}