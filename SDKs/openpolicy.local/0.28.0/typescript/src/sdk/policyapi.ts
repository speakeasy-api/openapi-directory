/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

/**
 * Allows you to add, remove and modify policy modules. *Policy module identifiers are only used for management purposes. They are not used outside the Policy API.*
 */
export class PolicyAPI {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Delete a policy module
   *
   * @remarks
   * This API endpoint removes an existing policy module from the server
   */
  deletePolicyModule(
    req: operations.DeletePolicyModuleRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.DeletePolicyModuleResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DeletePolicyModuleRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/v1/policies/{id}", req);

    const client: AxiosInstance = this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DeletePolicyModuleResponse =
        new operations.DeletePolicyModuleResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.deletePolicyModule200ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.DeletePolicyModule200ApplicationJSON
              );
          }
          break;
        case [400, 500].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.fourHundred = utils.objectToClass(
              httpRes?.data,
              shared.FourHundred
            );
          }
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.fourHundredAndFour = utils.objectToClass(
              httpRes?.data,
              shared.FourHundredAndFour
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * List policies
   *
   * @remarks
   * This API endpoint responds with a list of all policy modules on the server (result response)
   */
  getPolicies(
    req: operations.GetPoliciesRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetPoliciesResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetPoliciesRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/v1/policies";

    const client: AxiosInstance = this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetPoliciesResponse =
        new operations.GetPoliciesResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.twoHundredResult = utils.objectToClass(
              httpRes?.data,
              shared.TwoHundredResult
            );
          }
          break;
        case httpRes?.status == 500:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.fourHundred = utils.objectToClass(
              httpRes?.data,
              shared.FourHundred
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get a policy module
   *
   * @remarks
   * This API endpoint returns the details of the specified policy module (`{id}`)
   */
  getPolicyModule(
    req: operations.GetPolicyModuleRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetPolicyModuleResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetPolicyModuleRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/v1/policies/{id}", req);

    const client: AxiosInstance = this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetPolicyModuleResponse =
        new operations.GetPolicyModuleResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.twoHundredResult = utils.objectToClass(
              httpRes?.data,
              shared.TwoHundredResult
            );
          }
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.fourHundredAndFour = utils.objectToClass(
              httpRes?.data,
              shared.FourHundredAndFour
            );
          }
          break;
        case httpRes?.status == 500:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.fourHundred = utils.objectToClass(
              httpRes?.data,
              shared.FourHundred
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Create or update a policy module
   *
   * @remarks
   * - If the policy module does not exist, it is created.
   * - If the policy module already exists, it is replaced.
   *
   * If the policy module isn't correctly defined, a *bad request* (400) response is returned.
   *
   * ### Example policy module
   * ```yaml
   * package opa.examples
   *
   * import data.servers
   * import data.networks
   * import data.ports
   *
   * public_servers[server] {
   *   some k, m
   *   	server := servers[_]
   *   	server.ports[_] == ports[k].id
   *   	ports[k].networks[_] == networks[m].id
   *   	networks[m].public == true
   * }
   * ```
   */
  putPolicyModule(
    req: operations.PutPolicyModuleRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.PutPolicyModuleResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PutPolicyModuleRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/v1/policies/{id}", req);

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "string"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url + queryParams,
      method: "put",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PutPolicyModuleResponse =
        new operations.PutPolicyModuleResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.twoHundredResult = utils.objectToClass(
              httpRes?.data,
              shared.TwoHundredResult
            );
          }
          break;
        case [400, 500].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.fourHundred = utils.objectToClass(
              httpRes?.data,
              shared.FourHundred
            );
          }
          break;
      }

      return res;
    });
  }
}
