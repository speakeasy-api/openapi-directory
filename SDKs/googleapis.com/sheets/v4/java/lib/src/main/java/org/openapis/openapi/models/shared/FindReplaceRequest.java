/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * FindReplaceRequest - Finds and replaces data in cells over a range, sheet, or all sheets.
 */
public class FindReplaceRequest {
    /**
     * True to find/replace over all sheets.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("allSheets")
    public Boolean allSheets;

    public FindReplaceRequest withAllSheets(Boolean allSheets) {
        this.allSheets = allSheets;
        return this;
    }
    
    /**
     * The value to search.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("find")
    public String find;

    public FindReplaceRequest withFind(String find) {
        this.find = find;
        return this;
    }
    
    /**
     * True if the search should include cells with formulas. False to skip cells with formulas.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("includeFormulas")
    public Boolean includeFormulas;

    public FindReplaceRequest withIncludeFormulas(Boolean includeFormulas) {
        this.includeFormulas = includeFormulas;
        return this;
    }
    
    /**
     * True if the search is case sensitive.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("matchCase")
    public Boolean matchCase;

    public FindReplaceRequest withMatchCase(Boolean matchCase) {
        this.matchCase = matchCase;
        return this;
    }
    
    /**
     * True if the find value should match the entire cell.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("matchEntireCell")
    public Boolean matchEntireCell;

    public FindReplaceRequest withMatchEntireCell(Boolean matchEntireCell) {
        this.matchEntireCell = matchEntireCell;
        return this;
    }
    
    /**
     * A range on a sheet. All indexes are zero-based. Indexes are half open, i.e. the start index is inclusive and the end index is exclusive -- [start_index, end_index). Missing indexes indicate the range is unbounded on that side. For example, if `"Sheet1"` is sheet ID 123456, then: `Sheet1!A1:A1 == sheet_id: 123456, start_row_index: 0, end_row_index: 1, start_column_index: 0, end_column_index: 1` `Sheet1!A3:B4 == sheet_id: 123456, start_row_index: 2, end_row_index: 4, start_column_index: 0, end_column_index: 2` `Sheet1!A:B == sheet_id: 123456, start_column_index: 0, end_column_index: 2` `Sheet1!A5:B == sheet_id: 123456, start_row_index: 4, start_column_index: 0, end_column_index: 2` `Sheet1 == sheet_id: 123456` The start index must always be less than or equal to the end index. If the start index equals the end index, then the range is empty. Empty ranges are typically not meaningful and are usually rendered in the UI as `#REF!`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("range")
    public GridRange range;

    public FindReplaceRequest withRange(GridRange range) {
        this.range = range;
        return this;
    }
    
    /**
     * The value to use as the replacement.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("replacement")
    public String replacement;

    public FindReplaceRequest withReplacement(String replacement) {
        this.replacement = replacement;
        return this;
    }
    
    /**
     * True if the find value is a regex. The regular expression and replacement should follow Java regex rules at https://docs.oracle.com/javase/8/docs/api/java/util/regex/Pattern.html. The replacement string is allowed to refer to capturing groups. For example, if one cell has the contents `"Google Sheets"` and another has `"Google Docs"`, then searching for `"o.* (.*)"` with a replacement of `"$1 Rocks"` would change the contents of the cells to `"GSheets Rocks"` and `"GDocs Rocks"` respectively.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("searchByRegex")
    public Boolean searchByRegex;

    public FindReplaceRequest withSearchByRegex(Boolean searchByRegex) {
        this.searchByRegex = searchByRegex;
        return this;
    }
    
    /**
     * The sheet to find/replace over.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sheetId")
    public Integer sheetId;

    public FindReplaceRequest withSheetId(Integer sheetId) {
        this.sheetId = sheetId;
        return this;
    }
    
    public FindReplaceRequest(){}
}
