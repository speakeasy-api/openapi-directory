// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// POSTListReceiptFiltersActionEnum
type POSTListReceiptFiltersActionEnum string

const (
	POSTListReceiptFiltersActionEnumListReceiptFilters POSTListReceiptFiltersActionEnum = "ListReceiptFilters"
)

func (e *POSTListReceiptFiltersActionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "ListReceiptFilters":
		*e = POSTListReceiptFiltersActionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for POSTListReceiptFiltersActionEnum: %s", s)
	}
}

// POSTListReceiptFiltersVersionEnum
type POSTListReceiptFiltersVersionEnum string

const (
	POSTListReceiptFiltersVersionEnumTwoThousandAndTen1201 POSTListReceiptFiltersVersionEnum = "2010-12-01"
)

func (e *POSTListReceiptFiltersVersionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "2010-12-01":
		*e = POSTListReceiptFiltersVersionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for POSTListReceiptFiltersVersionEnum: %s", s)
	}
}

type POSTListReceiptFiltersQueryParams struct {
	Action  POSTListReceiptFiltersActionEnum  `queryParam:"style=form,explode=true,name=Action"`
	Version POSTListReceiptFiltersVersionEnum `queryParam:"style=form,explode=true,name=Version"`
}

type POSTListReceiptFiltersHeaders struct {
	XAmzAlgorithm     *string `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
}

type POSTListReceiptFiltersRequest struct {
	QueryParams POSTListReceiptFiltersQueryParams
	Headers     POSTListReceiptFiltersHeaders
	Request     []byte `request:"mediaType=text/xml"`
}

type POSTListReceiptFiltersResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
