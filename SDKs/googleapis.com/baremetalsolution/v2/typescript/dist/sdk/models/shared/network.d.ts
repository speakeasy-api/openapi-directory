import { SpeakeasyBase } from "../../../internal/utils";
import { NetworkAddressReservation } from "./networkaddressreservation";
import { NetworkMountPoint } from "./networkmountpoint";
import { Vrf } from "./vrf";
/**
 * The Network state.
 */
export declare enum NetworkStateEnum {
    StateUnspecified = "STATE_UNSPECIFIED",
    Provisioning = "PROVISIONING",
    Provisioned = "PROVISIONED",
    Deprovisioning = "DEPROVISIONING",
    Updating = "UPDATING"
}
/**
 * The type of this network.
 */
export declare enum NetworkTypeEnum {
    TypeUnspecified = "TYPE_UNSPECIFIED",
    Client = "CLIENT",
    Private = "PRIVATE"
}
/**
 * A Network.
 */
export declare class Network extends SpeakeasyBase {
    /**
     * The cidr of the Network.
     */
    cidr?: string;
    /**
     * Output only. Gateway ip address.
     */
    gatewayIp?: string;
    /**
     * An identifier for the `Network`, generated by the backend.
     */
    id?: string;
    /**
     * IP address configured.
     */
    ipAddress?: string;
    /**
     * Whether network uses standard frames or jumbo ones.
     */
    jumboFramesEnabled?: boolean;
    /**
     * Labels as key value pairs.
     */
    labels?: Record<string, string>;
    /**
     * List of physical interfaces.
     */
    macAddress?: string[];
    /**
     * Input only. List of mount points to attach the network to.
     */
    mountPoints?: NetworkMountPoint[];
    /**
     * Output only. The resource name of this `Network`. Resource names are schemeless URIs that follow the conventions in https://cloud.google.com/apis/design/resource_names. Format: `projects/{project}/locations/{location}/networks/{network}`
     */
    name?: string;
    /**
     * Output only. Pod name.
     */
    pod?: string;
    /**
     * List of IP address reservations in this network. When updating this field, an error will be generated if a reservation conflicts with an IP address already allocated to a physical server.
     */
    reservations?: NetworkAddressReservation[];
    /**
     * IP range for reserved for services (e.g. NFS).
     */
    servicesCidr?: string;
    /**
     * The Network state.
     */
    state?: NetworkStateEnum;
    /**
     * The type of this network.
     */
    type?: NetworkTypeEnum;
    /**
     * The vlan id of the Network.
     */
    vlanId?: string;
    /**
     * A network VRF.
     */
    vrf?: Vrf;
}
