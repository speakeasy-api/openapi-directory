/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import {
  objectToClass,
  SpeakeasyBase,
  SpeakeasyMetadata,
} from "../../../internal/utils";
import { BucketInfo } from "./bucketinfo";
import { FieldStats } from "./fieldstats";
import { Hits } from "./hits";
import { SearchStatus } from "./searchstatus";
import { Expose, Transform, Type } from "class-transformer";

/**
 * The result of a <code>Search</code> request. Contains the documents that match the specified search criteria and any requested fields, highlights, and facet information.
 */
export class SearchResponse extends SpeakeasyBase {
  @SpeakeasyMetadata({ elemType: BucketInfo })
  @Expose({ name: "facets" })
  @Transform(
    ({ value }) => {
      const obj: Record<string, BucketInfo> = {};
      for (const key in value) {
        obj[key] = objectToClass(value[key], BucketInfo);
      }
      return obj;
    },
    { toClassOnly: true }
  )
  facets?: Record<string, BucketInfo>;

  @SpeakeasyMetadata()
  @Expose({ name: "hits" })
  @Type(() => Hits)
  hits?: Hits;

  @SpeakeasyMetadata({ elemType: FieldStats })
  @Expose({ name: "stats" })
  @Transform(
    ({ value }) => {
      const obj: Record<string, FieldStats> = {};
      for (const key in value) {
        obj[key] = objectToClass(value[key], FieldStats);
      }
      return obj;
    },
    { toClassOnly: true }
  )
  stats?: Record<string, FieldStats>;

  @SpeakeasyMetadata()
  @Expose({ name: "status" })
  @Type(() => SearchStatus)
  status?: SearchStatus;
}
