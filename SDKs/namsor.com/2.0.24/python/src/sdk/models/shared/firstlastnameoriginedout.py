"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class FirstLastNameOriginedOut:
    r"""Represents the output of inferring the LIKELY country of Origin from a personal name."""
    
    countries_origin_top: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('countriesOriginTop'), 'exclude': lambda f: f is None }})
    r"""List countries of Origin (top 10)"""  
    country_origin: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('countryOrigin'), 'exclude': lambda f: f is None }})
    r"""Most likely country of Origin"""  
    country_origin_alt: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('countryOriginAlt'), 'exclude': lambda f: f is None }})
    r"""Second best alternative : country of Origin"""  
    first_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('firstName'), 'exclude': lambda f: f is None }})
    r"""The first name (also known as given name)"""  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})  
    last_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lastName'), 'exclude': lambda f: f is None }})
    r"""The last name (also known as family name, or surname)"""  
    probability_alt_calibrated: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('probabilityAltCalibrated'), 'exclude': lambda f: f is None }})
    r"""The calibrated probability for countryOrigin OR countryOriginAlt to have been guessed correctly. -1 = still calibrating."""  
    probability_calibrated: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('probabilityCalibrated'), 'exclude': lambda f: f is None }})
    r"""The calibrated probability for countryOrigin to have been guessed correctly. -1 = still calibrating."""  
    region_origin: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('regionOrigin'), 'exclude': lambda f: f is None }})
    r"""Most likely region of Origin (based on countryOrigin ISO2 code)"""  
    score: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('score'), 'exclude': lambda f: f is None }})
    r"""Compatibility to NamSor_v1 Origin score value. Higher score is better, but score is not normalized. Use calibratedProbability if available."""  
    script: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('script'), 'exclude': lambda f: f is None }})  
    sub_region_origin: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('subRegionOrigin'), 'exclude': lambda f: f is None }})
    r"""Most likely sub region of Origin (based on countryOrigin ISO2 code)"""  
    top_region_origin: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('topRegionOrigin'), 'exclude': lambda f: f is None }})
    r"""Most likely top region of Origin (based on countryOrigin ISO2 code)"""  
    