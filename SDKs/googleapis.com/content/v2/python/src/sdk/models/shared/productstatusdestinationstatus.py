"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ProductStatusDestinationStatus:
    
    approval_pending: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('approvalPending'), 'exclude': lambda f: f is None }})
    r"""Whether the approval status might change due to further processing."""  
    approval_status: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('approvalStatus'), 'exclude': lambda f: f is None }})
    r"""The destination's approval status. Acceptable values are: - \\"`approved`\\" - \\"`disapproved`\\" """  
    destination: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('destination'), 'exclude': lambda f: f is None }})
    r"""The name of the destination"""  
    intention: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('intention'), 'exclude': lambda f: f is None }})
    r"""Provided for backward compatibility only. Always set to \\"required\\". Acceptable values are: - \\"`default`\\" - \\"`excluded`\\" - \\"`optional`\\" - \\"`required`\\" """  
    