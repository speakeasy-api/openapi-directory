/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import axios, { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

/**
 * Contains the list of servers available to the SDK
 */
export const ServerList = ["https://circleci.com/api/v1"] as const;

/**
 * The available configuration options for the SDK
 */
export type SDKProps = {
  /**
   * The security details required to authenticate the SDK
   */
  security?: shared.Security;
  /**
   * Allows overriding the default axios client used by the SDK
   */
  defaultClient?: AxiosInstance;
  /**
   * Allows overriding the default server URL used by the SDK
   */
  serverURL?: string;
};

/**
 * The CircleCI API is a RESTful, fully-featured API that allows you to do almost anything in CircleCI.
 *
 * @remarks
 * You can access all information and trigger all actions.
 * The only thing we donâ€™t provide access to is billing functions, which must be done from the CircleCI web UI.
 *
 */
export class SDK {
  public _defaultClient: AxiosInstance;
  public _securityClient: AxiosInstance;
  public _serverURL: string;
  private _language = "typescript";
  private _sdkVersion = "0.0.1";
  private _genVersion = "internal";
  private _globals: any;

  constructor(props?: SDKProps) {
    this._serverURL = props?.serverURL ?? ServerList[0];

    this._defaultClient =
      props?.defaultClient ?? axios.create({ baseURL: this._serverURL });
    if (props?.security) {
      let security: shared.Security = props.security;
      if (!(props.security instanceof utils.SpeakeasyBase))
        security = new shared.Security(props.security);
      this._securityClient = utils.createSecurityClient(
        this._defaultClient,
        security
      );
    } else {
      this._securityClient = this._defaultClient;
    }
  }

  /**
   * Clears the cache for a project.
   *
   */
  deleteProjectUsernameProjectBuildCache(
    req: operations.DeleteProjectUsernameProjectBuildCacheRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.DeleteProjectUsernameProjectBuildCacheResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DeleteProjectUsernameProjectBuildCacheRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/project/{username}/{project}/build-cache",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DeleteProjectUsernameProjectBuildCacheResponse =
        new operations.DeleteProjectUsernameProjectBuildCacheResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.deleteProjectUsernameProjectBuildCache200ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.DeleteProjectUsernameProjectBuildCache200ApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Delete a checkout key.
   *
   */
  deleteProjectUsernameProjectCheckoutKeyFingerprint(
    req: operations.DeleteProjectUsernameProjectCheckoutKeyFingerprintRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.DeleteProjectUsernameProjectCheckoutKeyFingerprintResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.DeleteProjectUsernameProjectCheckoutKeyFingerprintRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/project/{username}/{project}/checkout-key/{fingerprint}",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DeleteProjectUsernameProjectCheckoutKeyFingerprintResponse =
        new operations.DeleteProjectUsernameProjectCheckoutKeyFingerprintResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.deleteProjectUsernameProjectCheckoutKeyFingerprint200ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.DeleteProjectUsernameProjectCheckoutKeyFingerprint200ApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Deletes the environment variable named ':name'
   *
   */
  deleteProjectUsernameProjectEnvvarName(
    req: operations.DeleteProjectUsernameProjectEnvvarNameRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.DeleteProjectUsernameProjectEnvvarNameResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DeleteProjectUsernameProjectEnvvarNameRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/project/{username}/{project}/envvar/{name}",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DeleteProjectUsernameProjectEnvvarNameResponse =
        new operations.DeleteProjectUsernameProjectEnvvarNameResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.deleteProjectUsernameProjectEnvvarName200ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.DeleteProjectUsernameProjectEnvvarName200ApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Provides information about the signed in user.
   *
   */
  getMe(config?: AxiosRequestConfig): Promise<operations.GetMeResponse> {
    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/me";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetMeResponse = new operations.GetMeResponse({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
      });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.user = utils.objectToClass(httpRes?.data, shared.User);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Build summary for each of the last 30 builds for a single git repo.
   *
   */
  getProjectUsernameProject(
    req: operations.GetProjectUsernameProjectRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetProjectUsernameProjectResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetProjectUsernameProjectRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/project/{username}/{project}",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetProjectUsernameProjectResponse =
        new operations.GetProjectUsernameProjectResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.builds = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.builds = utils.objectToClass(
              httpRes?.data,
              shared.Build,
              resFieldDepth
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Lists checkout keys.
   *
   */
  getProjectUsernameProjectCheckoutKey(
    req: operations.GetProjectUsernameProjectCheckoutKeyRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetProjectUsernameProjectCheckoutKeyResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetProjectUsernameProjectCheckoutKeyRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/project/{username}/{project}/checkout-key",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetProjectUsernameProjectCheckoutKeyResponse =
        new operations.GetProjectUsernameProjectCheckoutKeyResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.keys = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.keys = utils.objectToClass(
              httpRes?.data,
              shared.Key,
              resFieldDepth
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get a checkout key.
   *
   */
  getProjectUsernameProjectCheckoutKeyFingerprint(
    req: operations.GetProjectUsernameProjectCheckoutKeyFingerprintRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetProjectUsernameProjectCheckoutKeyFingerprintResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.GetProjectUsernameProjectCheckoutKeyFingerprintRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/project/{username}/{project}/checkout-key/{fingerprint}",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetProjectUsernameProjectCheckoutKeyFingerprintResponse =
        new operations.GetProjectUsernameProjectCheckoutKeyFingerprintResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.key = utils.objectToClass(httpRes?.data, shared.Key);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Lists the environment variables for :project
   *
   */
  getProjectUsernameProjectEnvvar(
    req: operations.GetProjectUsernameProjectEnvvarRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetProjectUsernameProjectEnvvarResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetProjectUsernameProjectEnvvarRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/project/{username}/{project}/envvar",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetProjectUsernameProjectEnvvarResponse =
        new operations.GetProjectUsernameProjectEnvvarResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.envvars = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.envvars = utils.objectToClass(
              httpRes?.data,
              shared.Envvar,
              resFieldDepth
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Gets the hidden value of environment variable :name
   *
   */
  getProjectUsernameProjectEnvvarName(
    req: operations.GetProjectUsernameProjectEnvvarNameRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetProjectUsernameProjectEnvvarNameResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetProjectUsernameProjectEnvvarNameRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/project/{username}/{project}/envvar/{name}",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetProjectUsernameProjectEnvvarNameResponse =
        new operations.GetProjectUsernameProjectEnvvarNameResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.envvar = utils.objectToClass(httpRes?.data, shared.Envvar);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Full details for a single build. The response includes all of the fields from the build summary.
   * This is also the payload for the [notification webhooks](/docs/configuration/#notify), in which case this object is the value to a key named 'payload'.
   *
   */
  getProjectUsernameProjectBuildNum(
    req: operations.GetProjectUsernameProjectBuildNumRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetProjectUsernameProjectBuildNumResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetProjectUsernameProjectBuildNumRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/project/{username}/{project}/{build_num}",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetProjectUsernameProjectBuildNumResponse =
        new operations.GetProjectUsernameProjectBuildNumResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.buildDetail = utils.objectToClass(
              httpRes?.data,
              shared.BuildDetail
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * List the artifacts produced by a given build.
   *
   */
  getProjectUsernameProjectBuildNumArtifacts(
    req: operations.GetProjectUsernameProjectBuildNumArtifactsRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetProjectUsernameProjectBuildNumArtifactsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetProjectUsernameProjectBuildNumArtifactsRequest(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/project/{username}/{project}/{build_num}/artifacts",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetProjectUsernameProjectBuildNumArtifactsResponse =
        new operations.GetProjectUsernameProjectBuildNumArtifactsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.artifacts = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.artifacts = utils.objectToClass(
              httpRes?.data,
              shared.Artifact,
              resFieldDepth
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Provides test metadata for a build
   * Note: [Learn how to set up your builds to collect test metadata](https://circleci.com/docs/test-metadata/)
   *
   */
  getProjectUsernameProjectBuildNumTests(
    req: operations.GetProjectUsernameProjectBuildNumTestsRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetProjectUsernameProjectBuildNumTestsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetProjectUsernameProjectBuildNumTestsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/project/{username}/{project}/{build_num}/tests",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetProjectUsernameProjectBuildNumTestsResponse =
        new operations.GetProjectUsernameProjectBuildNumTestsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.tests = utils.objectToClass(httpRes?.data, shared.Tests);
          }
          break;
      }

      return res;
    });
  }

  /**
   * List of all the projects you're following on CircleCI, with build information organized by branch.
   *
   */
  getProjects(
    config?: AxiosRequestConfig
  ): Promise<operations.GetProjectsResponse> {
    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/projects";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetProjectsResponse =
        new operations.GetProjectsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.projects = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.projects = utils.objectToClass(
              httpRes?.data,
              shared.Project,
              resFieldDepth
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Build summary for each of the last 30 recent builds, ordered by build_num.
   *
   */
  getRecentBuilds(
    req: operations.GetRecentBuildsRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetRecentBuildsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetRecentBuildsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/recent-builds";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetRecentBuildsResponse =
        new operations.GetRecentBuildsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.builds = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.builds = utils.objectToClass(
              httpRes?.data,
              shared.Build,
              resFieldDepth
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Triggers a new build, returns a summary of the build.
   *
   */
  postProjectUsernameProject(
    req: operations.PostProjectUsernameProjectRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.PostProjectUsernameProjectResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PostProjectUsernameProjectRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/project/{username}/{project}",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PostProjectUsernameProjectResponse =
        new operations.PostProjectUsernameProjectResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 201:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.buildSummary = utils.objectToClass(
              httpRes?.data,
              shared.BuildSummary
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Creates a new checkout key.
   * Only usable with a user API token.
   *
   */
  postProjectUsernameProjectCheckoutKey(
    req: operations.PostProjectUsernameProjectCheckoutKeyRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.PostProjectUsernameProjectCheckoutKeyResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PostProjectUsernameProjectCheckoutKeyRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/project/{username}/{project}/checkout-key",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PostProjectUsernameProjectCheckoutKeyResponse =
        new operations.PostProjectUsernameProjectCheckoutKeyResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.key = utils.objectToClass(httpRes?.data, shared.Key);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Creates a new environment variable
   *
   */
  postProjectUsernameProjectEnvvar(
    req: operations.PostProjectUsernameProjectEnvvarRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.PostProjectUsernameProjectEnvvarResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PostProjectUsernameProjectEnvvarRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/project/{username}/{project}/envvar",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "post",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PostProjectUsernameProjectEnvvarResponse =
        new operations.PostProjectUsernameProjectEnvvarResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.envvar = utils.objectToClass(httpRes?.data, shared.Envvar);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Create an ssh key used to access external systems that require SSH key-based authentication
   *
   */
  postProjectUsernameProjectSshKey(
    req: operations.PostProjectUsernameProjectSshKeyRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.PostProjectUsernameProjectSshKeyResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PostProjectUsernameProjectSshKeyRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/project/{username}/{project}/ssh-key",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = {
      ...utils.getHeadersFromRequest(req),
      ...reqBodyHeaders,
      ...config?.headers,
    };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PostProjectUsernameProjectSshKeyResponse =
        new operations.PostProjectUsernameProjectSshKeyResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        default:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.postProjectUsernameProjectSshKeyDefaultApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.PostProjectUsernameProjectSshKeyDefaultApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Triggers a new build, returns a summary of the build.
   * Optional build parameters can be set using an experimental API.
   *
   * Note: For more about build parameters, read about [using parameterized builds](https://circleci.com/docs/parameterized-builds/)
   *
   */
  postProjectUsernameProjectTreeBranch(
    req: operations.PostProjectUsernameProjectTreeBranchRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.PostProjectUsernameProjectTreeBranchResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PostProjectUsernameProjectTreeBranchRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/project/{username}/{project}/tree/{branch}",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PostProjectUsernameProjectTreeBranchResponse =
        new operations.PostProjectUsernameProjectTreeBranchResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
          headers: utils.getHeadersFromResponse(httpRes.headers),
        });
      switch (true) {
        case httpRes?.status == 201:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.build = utils.objectToClass(httpRes?.data, shared.Build);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Cancels the build, returns a summary of the build.
   *
   */
  postProjectUsernameProjectBuildNumCancel(
    req: operations.PostProjectUsernameProjectBuildNumCancelRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.PostProjectUsernameProjectBuildNumCancelResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PostProjectUsernameProjectBuildNumCancelRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/project/{username}/{project}/{build_num}/cancel",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "post",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PostProjectUsernameProjectBuildNumCancelResponse =
        new operations.PostProjectUsernameProjectBuildNumCancelResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.build = utils.objectToClass(httpRes?.data, shared.Build);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Retries the build, returns a summary of the new build.
   *
   */
  postProjectUsernameProjectBuildNumRetry(
    req: operations.PostProjectUsernameProjectBuildNumRetryRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.PostProjectUsernameProjectBuildNumRetryResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PostProjectUsernameProjectBuildNumRetryRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/project/{username}/{project}/{build_num}/retry",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "post",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PostProjectUsernameProjectBuildNumRetryResponse =
        new operations.PostProjectUsernameProjectBuildNumRetryResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.build = utils.objectToClass(httpRes?.data, shared.Build);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Adds your Heroku API key to CircleCI, takes apikey as form param name.
   *
   */
  postUserHerokuKey(
    config?: AxiosRequestConfig
  ): Promise<operations.PostUserHerokuKeyResponse> {
    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/user/heroku-key";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "post",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PostUserHerokuKeyResponse =
        new operations.PostUserHerokuKeyResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 403:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.postUserHerokuKey403ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.PostUserHerokuKey403ApplicationJSON
            );
          }
          break;
      }

      return res;
    });
  }
}
