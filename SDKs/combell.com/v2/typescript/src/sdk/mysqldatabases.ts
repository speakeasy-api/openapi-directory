/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

/**
 * Manage your MySql databases.
 */
export class MySqlDatabases {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Change password for mysql user
   */
  changeDatabaseUserPassword(
    req: operations.ChangeDatabaseUserPasswordRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.ChangeDatabaseUserPasswordResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ChangeDatabaseUserPasswordRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/mysqldatabases/{databaseName}/users/{userName}/password",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "updateUserPasswordRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "put",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ChangeDatabaseUserPasswordResponse =
        new operations.ChangeDatabaseUserPasswordResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 204:
          break;
      }

      return res;
    });
  }

  /**
   * Enable/disable mysql user
   */
  changeDatabaseUserStatus(
    req: operations.ChangeDatabaseUserStatusRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.ChangeDatabaseUserStatusResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ChangeDatabaseUserStatusRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/mysqldatabases/{databaseName}/users/{userName}/status",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "updateUserStatusRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "put",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ChangeDatabaseUserStatusResponse =
        new operations.ChangeDatabaseUserStatusResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 204:
          break;
      }

      return res;
    });
  }

  /**
   * Create a new mysql database
   */
  createMySqlDatabase(
    req: shared.CreateMySqlDatabase,
    config?: AxiosRequestConfig
  ): Promise<operations.CreateMySqlDatabaseResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new shared.CreateMySqlDatabase(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/mysqldatabases";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.CreateMySqlDatabaseResponse =
        new operations.CreateMySqlDatabaseResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 202:
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.badRequestResponse = utils.objectToClass(
              httpRes?.data,
              shared.BadRequestResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Create a new mysql user
   *
   * @remarks
   * The creation of a new mysql user will result in a user with read_only rights.
   */
  createMySqlUser(
    req: operations.CreateMySqlUserRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.CreateMySqlUserResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.CreateMySqlUserRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/mysqldatabases/{databaseName}/users",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "createMySqlUser",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.CreateMySqlUserResponse =
        new operations.CreateMySqlUserResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 202:
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.badRequestResponse = utils.objectToClass(
              httpRes?.data,
              shared.BadRequestResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Delete a mysql database
   */
  deleteDatabase(
    req: operations.DeleteDatabaseRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.DeleteDatabaseResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DeleteDatabaseRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/mysqldatabases/{databaseName}",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DeleteDatabaseResponse =
        new operations.DeleteDatabaseResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case [204, 400].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Delete a mysql user
   *
   * @remarks
   * The deletion of a mysql user is allowed for users with read_only rights.
   */
  deleteDatabaseUser(
    req: operations.DeleteDatabaseUserRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.DeleteDatabaseUserResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DeleteDatabaseUserRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/mysqldatabases/{databaseName}/users/{userName}",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DeleteDatabaseUserResponse =
        new operations.DeleteDatabaseUserResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case [204, 400].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Overview of mysql users
   */
  getDatabaseUsers(
    req: operations.GetDatabaseUsersRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetDatabaseUsersResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetDatabaseUsersRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/mysqldatabases/{databaseName}/users",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetDatabaseUsersResponse =
        new operations.GetDatabaseUsersResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.mySqlUsers = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.mySqlUsers = utils.objectToClass(
              httpRes?.data,
              shared.MySqlUser,
              resFieldDepth
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get a specific database
   */
  getMySqlDatabase(
    req: operations.GetMySqlDatabaseRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetMySqlDatabaseResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetMySqlDatabaseRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/mysqldatabases/{databaseName}",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetMySqlDatabaseResponse =
        new operations.GetMySqlDatabaseResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.mySqlDatabase = utils.objectToClass(
              httpRes?.data,
              shared.MySqlDatabase
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Overview of mysql databases
   */
  getMySqlDatabases(
    req: operations.GetMySqlDatabasesRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetMySqlDatabasesResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetMySqlDatabasesRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/mysqldatabases";

    const client: AxiosInstance = this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetMySqlDatabasesResponse =
        new operations.GetMySqlDatabasesResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
          headers: utils.getHeadersFromResponse(httpRes.headers),
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.mySqlDatabases = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.mySqlDatabases = utils.objectToClass(
              httpRes?.data,
              shared.MySqlDatabase,
              resFieldDepth
            );
          }
          break;
      }

      return res;
    });
  }
}
