"use strict";
/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PatchDeploymentInput = exports.PatchDeployment = exports.PatchDeploymentStateEnum = void 0;
var utils_1 = require("../../../internal/utils");
var onetimeschedule_1 = require("./onetimeschedule");
var patchconfig_1 = require("./patchconfig");
var patchinstancefilter_1 = require("./patchinstancefilter");
var patchrollout_1 = require("./patchrollout");
var recurringschedule_1 = require("./recurringschedule");
var class_transformer_1 = require("class-transformer");
/**
 * Output only. Current state of the patch deployment.
 */
var PatchDeploymentStateEnum;
(function (PatchDeploymentStateEnum) {
    PatchDeploymentStateEnum["StateUnspecified"] = "STATE_UNSPECIFIED";
    PatchDeploymentStateEnum["Active"] = "ACTIVE";
    PatchDeploymentStateEnum["Paused"] = "PAUSED";
})(PatchDeploymentStateEnum = exports.PatchDeploymentStateEnum || (exports.PatchDeploymentStateEnum = {}));
/**
 * Patch deployments are configurations that individual patch jobs use to complete a patch. These configurations include instance filter, package repository settings, and a schedule. For more information about creating and managing patch deployments, see [Scheduling patch jobs](https://cloud.google.com/compute/docs/os-patch-management/schedule-patch-jobs).
 */
var PatchDeployment = /** @class */ (function (_super) {
    __extends(PatchDeployment, _super);
    function PatchDeployment() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "createTime" }),
        __metadata("design:type", String)
    ], PatchDeployment.prototype, "createTime", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "description" }),
        __metadata("design:type", String)
    ], PatchDeployment.prototype, "description", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "duration" }),
        __metadata("design:type", String)
    ], PatchDeployment.prototype, "duration", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "instanceFilter" }),
        (0, class_transformer_1.Type)(function () { return patchinstancefilter_1.PatchInstanceFilter; }),
        __metadata("design:type", patchinstancefilter_1.PatchInstanceFilter)
    ], PatchDeployment.prototype, "instanceFilter", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "lastExecuteTime" }),
        __metadata("design:type", String)
    ], PatchDeployment.prototype, "lastExecuteTime", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "name" }),
        __metadata("design:type", String)
    ], PatchDeployment.prototype, "name", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "oneTimeSchedule" }),
        (0, class_transformer_1.Type)(function () { return onetimeschedule_1.OneTimeSchedule; }),
        __metadata("design:type", onetimeschedule_1.OneTimeSchedule)
    ], PatchDeployment.prototype, "oneTimeSchedule", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "patchConfig" }),
        (0, class_transformer_1.Type)(function () { return patchconfig_1.PatchConfig; }),
        __metadata("design:type", patchconfig_1.PatchConfig)
    ], PatchDeployment.prototype, "patchConfig", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "recurringSchedule" }),
        (0, class_transformer_1.Type)(function () { return recurringschedule_1.RecurringSchedule; }),
        __metadata("design:type", recurringschedule_1.RecurringSchedule)
    ], PatchDeployment.prototype, "recurringSchedule", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "rollout" }),
        (0, class_transformer_1.Type)(function () { return patchrollout_1.PatchRollout; }),
        __metadata("design:type", patchrollout_1.PatchRollout)
    ], PatchDeployment.prototype, "rollout", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "state" }),
        __metadata("design:type", String)
    ], PatchDeployment.prototype, "state", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "updateTime" }),
        __metadata("design:type", String)
    ], PatchDeployment.prototype, "updateTime", void 0);
    return PatchDeployment;
}(utils_1.SpeakeasyBase));
exports.PatchDeployment = PatchDeployment;
/**
 * Patch deployments are configurations that individual patch jobs use to complete a patch. These configurations include instance filter, package repository settings, and a schedule. For more information about creating and managing patch deployments, see [Scheduling patch jobs](https://cloud.google.com/compute/docs/os-patch-management/schedule-patch-jobs).
 */
var PatchDeploymentInput = /** @class */ (function (_super) {
    __extends(PatchDeploymentInput, _super);
    function PatchDeploymentInput() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "description" }),
        __metadata("design:type", String)
    ], PatchDeploymentInput.prototype, "description", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "duration" }),
        __metadata("design:type", String)
    ], PatchDeploymentInput.prototype, "duration", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "instanceFilter" }),
        (0, class_transformer_1.Type)(function () { return patchinstancefilter_1.PatchInstanceFilter; }),
        __metadata("design:type", patchinstancefilter_1.PatchInstanceFilter)
    ], PatchDeploymentInput.prototype, "instanceFilter", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "name" }),
        __metadata("design:type", String)
    ], PatchDeploymentInput.prototype, "name", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "oneTimeSchedule" }),
        (0, class_transformer_1.Type)(function () { return onetimeschedule_1.OneTimeSchedule; }),
        __metadata("design:type", onetimeschedule_1.OneTimeSchedule)
    ], PatchDeploymentInput.prototype, "oneTimeSchedule", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "patchConfig" }),
        (0, class_transformer_1.Type)(function () { return patchconfig_1.PatchConfig; }),
        __metadata("design:type", patchconfig_1.PatchConfig)
    ], PatchDeploymentInput.prototype, "patchConfig", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "recurringSchedule" }),
        (0, class_transformer_1.Type)(function () { return recurringschedule_1.RecurringScheduleInput; }),
        __metadata("design:type", recurringschedule_1.RecurringScheduleInput)
    ], PatchDeploymentInput.prototype, "recurringSchedule", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "rollout" }),
        (0, class_transformer_1.Type)(function () { return patchrollout_1.PatchRollout; }),
        __metadata("design:type", patchrollout_1.PatchRollout)
    ], PatchDeploymentInput.prototype, "rollout", void 0);
    return PatchDeploymentInput;
}(utils_1.SpeakeasyBase));
exports.PatchDeploymentInput = PatchDeploymentInput;
