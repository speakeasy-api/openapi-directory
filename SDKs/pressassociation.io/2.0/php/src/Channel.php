<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Channel 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Channel Detail
     * 
     * Return the content of the selected channel.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetChannelRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetChannelSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetChannelResponse
     */
	public function getChannel(
        \OpenAPI\OpenAPI\Models\Operations\GetChannelRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetChannelSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetChannelResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/channel/{channelId}', \OpenAPI\OpenAPI\Models\Operations\GetChannelRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetChannelRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetChannelResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getChannel200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Channel Collection
     * 
     * If you are interested in a list of channels that have had there schedule updated you can filter by the following query params.
     *  - scheduleStart
     *  - scheduleEnd
     *  - scheduleUpdatedSince
     * 
     * adding these query params will filter the channel collection to only return channels that have been updated within the given range, updatedSince stores the state of your previous call.
     * 
     * Example Usage: Every 10 minutes get me the channels that have updated schedules for the next 2 weeks.
     * 
     * /channel?platform={uuid}&scheduleStart={today}&scheduleEnd={today + 2 weeks}&updatedSince={10 minutes ago}
     * 
     * Also please note epg numbers are only exposed when a platform and region are passed to the query.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListChannelsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListChannelsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ListChannelsResponse
     */
	public function listChannels(
        \OpenAPI\OpenAPI\Models\Operations\ListChannelsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListChannelsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ListChannelsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/channel');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListChannelsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListChannelsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listChannels200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
}