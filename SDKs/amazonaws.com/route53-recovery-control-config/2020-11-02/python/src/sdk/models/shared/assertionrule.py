"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import ruleconfig as shared_ruleconfig
from ..shared import status_enum as shared_status_enum
from dataclasses_json import Undefined, dataclass_json
from sdk import utils


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class AssertionRule:
    r"""An assertion rule enforces that, when you change a routing control state, that the criteria that you set in the rule configuration is met. Otherwise, the change to the routing control is not accepted. For example, the criteria might be that at least one routing control state is On after the transaction so that traffic continues to flow to at least one cell for the application. This ensures that you avoid a fail-open scenario."""
    
    asserted_controls: list[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AssertedControls') }})  
    control_panel_arn: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ControlPanelArn') }})  
    name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Name') }})  
    rule_config: shared_ruleconfig.RuleConfig = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('RuleConfig') }})  
    safety_rule_arn: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SafetyRuleArn') }})  
    status: shared_status_enum.StatusEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Status') }})  
    wait_period_ms: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('WaitPeriodMs') }})  
    