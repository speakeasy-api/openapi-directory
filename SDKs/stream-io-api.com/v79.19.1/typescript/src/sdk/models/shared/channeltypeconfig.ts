/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { Command } from "./command";
import { PolicyRequest1 } from "./policyrequest1";
import { Thresholds } from "./thresholds";
import { Expose, Transform, Type } from "class-transformer";

export enum ChannelTypeConfigAutomodEnum {
  Disabled = "disabled",
  Simple = "simple",
  Ai = "AI",
}

export enum ChannelTypeConfigAutomodBehaviorEnum {
  Flag = "flag",
  Block = "block",
}

export enum ChannelTypeConfigBlocklistBehaviorEnum {
  Flag = "flag",
  Block = "block",
}

export class ChannelTypeConfig extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "automod" })
  automod: ChannelTypeConfigAutomodEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "automod_behavior" })
  automodBehavior: ChannelTypeConfigAutomodBehaviorEnum;

  /**
   * Sets thresholds for AI moderation
   */
  @SpeakeasyMetadata()
  @Expose({ name: "automod_thresholds" })
  @Type(() => Thresholds)
  automodThresholds?: Thresholds;

  @SpeakeasyMetadata()
  @Expose({ name: "blocklist" })
  blocklist?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "blocklist_behavior" })
  blocklistBehavior?: ChannelTypeConfigBlocklistBehaviorEnum;

  /**
   * List of commands that channel supports
   */
  @SpeakeasyMetadata({ elemType: Command })
  @Expose({ name: "commands" })
  @Type(() => Command)
  commands: Command[];

  @SpeakeasyMetadata()
  @Expose({ name: "connect_events" })
  connectEvents: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "created_at" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  createdAt: Date;

  @SpeakeasyMetadata()
  @Expose({ name: "custom_events" })
  customEvents: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "grants" })
  grants: Record<string, string[]>;

  @SpeakeasyMetadata()
  @Expose({ name: "max_message_length" })
  maxMessageLength: number;

  @SpeakeasyMetadata()
  @Expose({ name: "message_retention" })
  messageRetention: string;

  @SpeakeasyMetadata()
  @Expose({ name: "mutes" })
  mutes: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name: string;

  @SpeakeasyMetadata({ elemType: PolicyRequest1 })
  @Expose({ name: "permissions" })
  @Type(() => PolicyRequest1)
  permissions: PolicyRequest1[];

  @SpeakeasyMetadata()
  @Expose({ name: "push_notifications" })
  pushNotifications: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "quotes" })
  quotes: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "reactions" })
  reactions: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "read_events" })
  readEvents: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "reminders" })
  reminders: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "replies" })
  replies: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "search" })
  search: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "typing_events" })
  typingEvents: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "updated_at" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  updatedAt: Date;

  @SpeakeasyMetadata()
  @Expose({ name: "uploads" })
  uploads: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "url_enrichment" })
  urlEnrichment: boolean;
}
