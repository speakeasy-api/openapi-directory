// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// StoryRequestStickerNameEnum - The name of the sticker in this story. `null` if there is no sticker.
type StoryRequestStickerNameEnum string

const (
	StoryRequestStickerNameEnumGreenCheckmark       StoryRequestStickerNameEnum = "green_checkmark"
	StoryRequestStickerNameEnumPeopleDancing        StoryRequestStickerNameEnum = "people_dancing"
	StoryRequestStickerNameEnumDancingUnicorn       StoryRequestStickerNameEnum = "dancing_unicorn"
	StoryRequestStickerNameEnumHeart                StoryRequestStickerNameEnum = "heart"
	StoryRequestStickerNameEnumPartyPopper          StoryRequestStickerNameEnum = "party_popper"
	StoryRequestStickerNameEnumPeopleWavingFlags    StoryRequestStickerNameEnum = "people_waving_flags"
	StoryRequestStickerNameEnumSplashingNarwhal     StoryRequestStickerNameEnum = "splashing_narwhal"
	StoryRequestStickerNameEnumTrophy               StoryRequestStickerNameEnum = "trophy"
	StoryRequestStickerNameEnumYetiRidingUnicorn    StoryRequestStickerNameEnum = "yeti_riding_unicorn"
	StoryRequestStickerNameEnumCelebratingPeople    StoryRequestStickerNameEnum = "celebrating_people"
	StoryRequestStickerNameEnumDeterminedClimbers   StoryRequestStickerNameEnum = "determined_climbers"
	StoryRequestStickerNameEnumPhoenixSpreadingLove StoryRequestStickerNameEnum = "phoenix_spreading_love"
)

func (e *StoryRequestStickerNameEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "green_checkmark":
		fallthrough
	case "people_dancing":
		fallthrough
	case "dancing_unicorn":
		fallthrough
	case "heart":
		fallthrough
	case "party_popper":
		fallthrough
	case "people_waving_flags":
		fallthrough
	case "splashing_narwhal":
		fallthrough
	case "trophy":
		fallthrough
	case "yeti_riding_unicorn":
		fallthrough
	case "celebrating_people":
		fallthrough
	case "determined_climbers":
		fallthrough
	case "phoenix_spreading_love":
		*e = StoryRequestStickerNameEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for StoryRequestStickerNameEnum: %s", s)
	}
}

// StoryRequestInput - A story represents an activity associated with an object in the Asana system.
type StoryRequestInput struct {
	// [Opt In](/docs/input-output-options). HTML formatted text for a comment. This will not include the name of the creator.
	HTMLText *string `json:"html_text,omitempty"`
	// *Conditional*. Whether the story should be pinned on the resource.
	IsPinned *bool `json:"is_pinned,omitempty"`
	// The name of the sticker in this story. `null` if there is no sticker.
	StickerName *StoryRequestStickerNameEnum `json:"sticker_name,omitempty"`
	// The plain text of the comment to add. Cannot be used with html_text.
	Text *string `json:"text,omitempty"`
}
