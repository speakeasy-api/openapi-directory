// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type DpcerSecurity struct {
	APIKey   string `security:"scheme,type=apiKey,subtype=header,name=X-APISETU-APIKEY"`
	ClientID string `security:"scheme,type=apiKey,subtype=header,name=X-APISETU-CLIENTID"`
}

type DpcerRequestBodyCertificateParameters struct {
	// Full name
	FullName string `json:"FullName"`
	// Aadhaar number
	UID string `json:"UID"`
	// Certificate No
	CertNo string `json:"certNo"`
}

// DpcerRequestBodyFormatEnum - The format of the certificate in response.
type DpcerRequestBodyFormatEnum string

const (
	DpcerRequestBodyFormatEnumPdf DpcerRequestBodyFormatEnum = "pdf"
)

func (e *DpcerRequestBodyFormatEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "pdf":
		*e = DpcerRequestBodyFormatEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for DpcerRequestBodyFormatEnum: %s", s)
	}
}

// DpcerRequestBody - Request format
type DpcerRequestBody struct {
	CertificateParameters *DpcerRequestBodyCertificateParameters `json:"certificateParameters,omitempty"`
	ConsentArtifact       *shared.ConsentArtifactSchema          `json:"consentArtifact,omitempty"`
	// The format of the certificate in response.
	Format DpcerRequestBodyFormatEnum `json:"format"`
	// A unique transaction id for this request in UUID format. It is used for tracking the request.
	TxnID string `json:"txnId"`
}

type Dpcer504ApplicationJSONErrorEnum string

const (
	Dpcer504ApplicationJSONErrorEnumGatewayTimeout Dpcer504ApplicationJSONErrorEnum = "gateway_timeout"
)

func (e *Dpcer504ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "gateway_timeout":
		*e = Dpcer504ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Dpcer504ApplicationJSONErrorEnum: %s", s)
	}
}

type Dpcer504ApplicationJSONErrorDescriptionEnum string

const (
	Dpcer504ApplicationJSONErrorDescriptionEnumPublisherServiceDidNotRespondInTime Dpcer504ApplicationJSONErrorDescriptionEnum = "Publisher service did not respond in time"
)

func (e *Dpcer504ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Publisher service did not respond in time":
		*e = Dpcer504ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Dpcer504ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Dpcer504ApplicationJSON - Gateway timeout
type Dpcer504ApplicationJSON struct {
	Error            *Dpcer504ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Dpcer504ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Dpcer503ApplicationJSONErrorEnum string

const (
	Dpcer503ApplicationJSONErrorEnumServiceUnavailable Dpcer503ApplicationJSONErrorEnum = "service_unavailable"
)

func (e *Dpcer503ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "service_unavailable":
		*e = Dpcer503ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Dpcer503ApplicationJSONErrorEnum: %s", s)
	}
}

type Dpcer503ApplicationJSONErrorDescriptionEnum string

const (
	Dpcer503ApplicationJSONErrorDescriptionEnumPublisherServiceIsTemporarilyUnavailable Dpcer503ApplicationJSONErrorDescriptionEnum = "Publisher service is temporarily unavailable"
)

func (e *Dpcer503ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Publisher service is temporarily unavailable":
		*e = Dpcer503ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Dpcer503ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Dpcer503ApplicationJSON - Service unavailable
type Dpcer503ApplicationJSON struct {
	Error            *Dpcer503ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Dpcer503ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Dpcer502ApplicationJSONErrorEnum string

const (
	Dpcer502ApplicationJSONErrorEnumBadGatewy Dpcer502ApplicationJSONErrorEnum = "bad_gatewy"
)

func (e *Dpcer502ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "bad_gatewy":
		*e = Dpcer502ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Dpcer502ApplicationJSONErrorEnum: %s", s)
	}
}

type Dpcer502ApplicationJSONErrorDescriptionEnum string

const (
	Dpcer502ApplicationJSONErrorDescriptionEnumPublisherServiceReturnedAnInvalidResponse Dpcer502ApplicationJSONErrorDescriptionEnum = "Publisher service returned an invalid response"
)

func (e *Dpcer502ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Publisher service returned an invalid response":
		*e = Dpcer502ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Dpcer502ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Dpcer502ApplicationJSON - Bad gateway
type Dpcer502ApplicationJSON struct {
	Error            *Dpcer502ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Dpcer502ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Dpcer500ApplicationJSONErrorEnum string

const (
	Dpcer500ApplicationJSONErrorEnumInternalServerError Dpcer500ApplicationJSONErrorEnum = "internal_server_error"
)

func (e *Dpcer500ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "internal_server_error":
		*e = Dpcer500ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Dpcer500ApplicationJSONErrorEnum: %s", s)
	}
}

type Dpcer500ApplicationJSONErrorDescriptionEnum string

const (
	Dpcer500ApplicationJSONErrorDescriptionEnumInternalServerError Dpcer500ApplicationJSONErrorDescriptionEnum = "Internal server error"
)

func (e *Dpcer500ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Internal server error":
		*e = Dpcer500ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Dpcer500ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Dpcer500ApplicationJSON - Internal server error
type Dpcer500ApplicationJSON struct {
	Error            *Dpcer500ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Dpcer500ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Dpcer404ApplicationJSONErrorEnum string

const (
	Dpcer404ApplicationJSONErrorEnumRecordNotFound Dpcer404ApplicationJSONErrorEnum = "record_not_found"
	Dpcer404ApplicationJSONErrorEnumURLNotFound    Dpcer404ApplicationJSONErrorEnum = "url_not_found"
)

func (e *Dpcer404ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "record_not_found":
		fallthrough
	case "url_not_found":
		*e = Dpcer404ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Dpcer404ApplicationJSONErrorEnum: %s", s)
	}
}

type Dpcer404ApplicationJSONErrorDescriptionEnum string

const (
	Dpcer404ApplicationJSONErrorDescriptionEnumNoRecordFound               Dpcer404ApplicationJSONErrorDescriptionEnum = "No record found"
	Dpcer404ApplicationJSONErrorDescriptionEnumYourAPIURLOrPathIsIncorrect Dpcer404ApplicationJSONErrorDescriptionEnum = "Your API url or path is incorrect"
)

func (e *Dpcer404ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "No record found":
		fallthrough
	case "Your API url or path is incorrect":
		*e = Dpcer404ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Dpcer404ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Dpcer404ApplicationJSON - No record found
type Dpcer404ApplicationJSON struct {
	Error            *Dpcer404ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Dpcer404ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Dpcer401ApplicationJSONErrorEnum string

const (
	Dpcer401ApplicationJSONErrorEnumInvalidAuthentication Dpcer401ApplicationJSONErrorEnum = "invalid_authentication"
	Dpcer401ApplicationJSONErrorEnumInvalidAuthorization  Dpcer401ApplicationJSONErrorEnum = "invalid_authorization"
)

func (e *Dpcer401ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "invalid_authentication":
		fallthrough
	case "invalid_authorization":
		*e = Dpcer401ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Dpcer401ApplicationJSONErrorEnum: %s", s)
	}
}

type Dpcer401ApplicationJSONErrorDescriptionEnum string

const (
	Dpcer401ApplicationJSONErrorDescriptionEnumAuthenticationFailed            Dpcer401ApplicationJSONErrorDescriptionEnum = "Authentication failed"
	Dpcer401ApplicationJSONErrorDescriptionEnumYouAreNotAuthorizedToUseThisAPI Dpcer401ApplicationJSONErrorDescriptionEnum = "You are not authorized to use this API"
)

func (e *Dpcer401ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Authentication failed":
		fallthrough
	case "You are not authorized to use this API":
		*e = Dpcer401ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Dpcer401ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Dpcer401ApplicationJSON - Unauthorized access
type Dpcer401ApplicationJSON struct {
	Error            *Dpcer401ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Dpcer401ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Dpcer400ApplicationJSONErrorEnum string

const (
	Dpcer400ApplicationJSONErrorEnumMissingParameter Dpcer400ApplicationJSONErrorEnum = "missing_parameter"
	Dpcer400ApplicationJSONErrorEnumInvalidParameter Dpcer400ApplicationJSONErrorEnum = "invalid_parameter"
	Dpcer400ApplicationJSONErrorEnumInvalidFormat    Dpcer400ApplicationJSONErrorEnum = "invalid_format"
	Dpcer400ApplicationJSONErrorEnumInvalidTxnid     Dpcer400ApplicationJSONErrorEnum = "invalid_txnid"
	Dpcer400ApplicationJSONErrorEnumInvalidConsentid Dpcer400ApplicationJSONErrorEnum = "invalid_consentid"
)

func (e *Dpcer400ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "missing_parameter":
		fallthrough
	case "invalid_parameter":
		fallthrough
	case "invalid_format":
		fallthrough
	case "invalid_txnid":
		fallthrough
	case "invalid_consentid":
		*e = Dpcer400ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Dpcer400ApplicationJSONErrorEnum: %s", s)
	}
}

type Dpcer400ApplicationJSONErrorDescriptionEnum string

const (
	Dpcer400ApplicationJSONErrorDescriptionEnumPleaseProvideAllMandatoryParameters     Dpcer400ApplicationJSONErrorDescriptionEnum = "Please provide all mandatory parameters"
	Dpcer400ApplicationJSONErrorDescriptionEnumBadRequest                              Dpcer400ApplicationJSONErrorDescriptionEnum = "Bad request"
	Dpcer400ApplicationJSONErrorDescriptionEnumTheFormatParameterIsInvalid             Dpcer400ApplicationJSONErrorDescriptionEnum = "The format parameter is invalid"
	Dpcer400ApplicationJSONErrorDescriptionEnumTheTxnIDParameterMustBeInUUIDFormat     Dpcer400ApplicationJSONErrorDescriptionEnum = "The txnId parameter must be in UUID format"
	Dpcer400ApplicationJSONErrorDescriptionEnumTheConsentIDParameterMustBeInUUIDFormat Dpcer400ApplicationJSONErrorDescriptionEnum = "The consentId parameter must be in UUID format"
)

func (e *Dpcer400ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Please provide all mandatory parameters":
		fallthrough
	case "Bad request":
		fallthrough
	case "The format parameter is invalid":
		fallthrough
	case "The txnId parameter must be in UUID format":
		fallthrough
	case "The consentId parameter must be in UUID format":
		*e = Dpcer400ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Dpcer400ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Dpcer400ApplicationJSON - Bad request
type Dpcer400ApplicationJSON struct {
	Error            *Dpcer400ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Dpcer400ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type DpcerResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Bad request
	Dpcer400ApplicationJSONObject *Dpcer400ApplicationJSON
	// Unauthorized access
	Dpcer401ApplicationJSONObject *Dpcer401ApplicationJSON
	// No record found
	Dpcer404ApplicationJSONObject *Dpcer404ApplicationJSON
	// Internal server error
	Dpcer500ApplicationJSONObject *Dpcer500ApplicationJSON
	// Bad gateway
	Dpcer502ApplicationJSONObject *Dpcer502ApplicationJSON
	// Service unavailable
	Dpcer503ApplicationJSONObject *Dpcer503ApplicationJSON
	// Gateway timeout
	Dpcer504ApplicationJSONObject *Dpcer504ApplicationJSON
}
