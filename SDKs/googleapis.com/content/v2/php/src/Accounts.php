<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Accounts 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Returns information about the authenticated user.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ContentAccountsAuthinfoRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ContentAccountsAuthinfoSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ContentAccountsAuthinfoResponse
     */
	public function contentAccountsAuthinfo(
        \OpenAPI\OpenAPI\Models\Operations\ContentAccountsAuthinfoRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ContentAccountsAuthinfoSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ContentAccountsAuthinfoResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/accounts/authinfo');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ContentAccountsAuthinfoRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ContentAccountsAuthinfoResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->accountsAuthInfoResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\AccountsAuthInfoResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Claims the website of a Merchant Center sub-account.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ContentAccountsClaimwebsiteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ContentAccountsClaimwebsiteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ContentAccountsClaimwebsiteResponse
     */
	public function contentAccountsClaimwebsite(
        \OpenAPI\OpenAPI\Models\Operations\ContentAccountsClaimwebsiteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ContentAccountsClaimwebsiteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ContentAccountsClaimwebsiteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{merchantId}/accounts/{accountId}/claimwebsite', \OpenAPI\OpenAPI\Models\Operations\ContentAccountsClaimwebsiteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ContentAccountsClaimwebsiteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ContentAccountsClaimwebsiteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->accountsClaimWebsiteResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\AccountsClaimWebsiteResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieves, inserts, updates, and deletes multiple Merchant Center (sub-)accounts in a single request.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ContentAccountsCustombatchRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ContentAccountsCustombatchSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ContentAccountsCustombatchResponse
     */
	public function contentAccountsCustombatch(
        \OpenAPI\OpenAPI\Models\Operations\ContentAccountsCustombatchRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ContentAccountsCustombatchSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ContentAccountsCustombatchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/accounts/batch');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "accountsCustomBatchRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ContentAccountsCustombatchRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ContentAccountsCustombatchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->accountsCustomBatchResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\AccountsCustomBatchResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Deletes a Merchant Center sub-account.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ContentAccountsDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ContentAccountsDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ContentAccountsDeleteResponse
     */
	public function contentAccountsDelete(
        \OpenAPI\OpenAPI\Models\Operations\ContentAccountsDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ContentAccountsDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ContentAccountsDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{merchantId}/accounts/{accountId}', \OpenAPI\OpenAPI\Models\Operations\ContentAccountsDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ContentAccountsDeleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ContentAccountsDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Retrieves a Merchant Center account.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ContentAccountsGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ContentAccountsGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ContentAccountsGetResponse
     */
	public function contentAccountsGet(
        \OpenAPI\OpenAPI\Models\Operations\ContentAccountsGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ContentAccountsGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ContentAccountsGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{merchantId}/accounts/{accountId}', \OpenAPI\OpenAPI\Models\Operations\ContentAccountsGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ContentAccountsGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ContentAccountsGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->account = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Account', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a Merchant Center sub-account.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ContentAccountsInsertRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ContentAccountsInsertSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ContentAccountsInsertResponse
     */
	public function contentAccountsInsert(
        \OpenAPI\OpenAPI\Models\Operations\ContentAccountsInsertRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ContentAccountsInsertSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ContentAccountsInsertResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{merchantId}/accounts', \OpenAPI\OpenAPI\Models\Operations\ContentAccountsInsertRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "account", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ContentAccountsInsertRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ContentAccountsInsertResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->account = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Account', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Performs an action on a link between two Merchant Center accounts, namely accountId and linkedAccountId.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ContentAccountsLinkRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ContentAccountsLinkSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ContentAccountsLinkResponse
     */
	public function contentAccountsLink(
        \OpenAPI\OpenAPI\Models\Operations\ContentAccountsLinkRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ContentAccountsLinkSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ContentAccountsLinkResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{merchantId}/accounts/{accountId}/link', \OpenAPI\OpenAPI\Models\Operations\ContentAccountsLinkRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "accountsLinkRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ContentAccountsLinkRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ContentAccountsLinkResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->accountsLinkResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\AccountsLinkResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists the sub-accounts in your Merchant Center account.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ContentAccountsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ContentAccountsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ContentAccountsListResponse
     */
	public function contentAccountsList(
        \OpenAPI\OpenAPI\Models\Operations\ContentAccountsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ContentAccountsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ContentAccountsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{merchantId}/accounts', \OpenAPI\OpenAPI\Models\Operations\ContentAccountsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ContentAccountsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ContentAccountsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->accountsListResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\AccountsListResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates a Merchant Center account. Any fields that are not provided are deleted from the resource.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ContentAccountsUpdateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ContentAccountsUpdateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ContentAccountsUpdateResponse
     */
	public function contentAccountsUpdate(
        \OpenAPI\OpenAPI\Models\Operations\ContentAccountsUpdateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ContentAccountsUpdateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ContentAccountsUpdateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{merchantId}/accounts/{accountId}', \OpenAPI\OpenAPI\Models\Operations\ContentAccountsUpdateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "account", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ContentAccountsUpdateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ContentAccountsUpdateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->account = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Account', 'json');
            }
        }

        return $response;
    }
}