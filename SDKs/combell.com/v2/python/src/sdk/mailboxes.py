"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Mailboxes:
    r"""Manage your mailboxes."""
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def change_mailbox_password(self, request: operations.ChangeMailboxPasswordRequest) -> operations.ChangeMailboxPasswordResponse:
        r"""Change password for mailbox"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ChangeMailboxPasswordRequest, base_url, '/mailboxes/{mailboxName}/password', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "update_mailbox_password_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.ChangeMailboxPasswordRequest, request)
        
        client = self._client
        
        http_res = client.request('PUT', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ChangeMailboxPasswordResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def configure_mailbox_auto_forward(self, request: operations.ConfigureMailboxAutoForwardRequest) -> operations.ConfigureMailboxAutoForwardResponse:
        r"""Configure auto-forward for mailbox"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ConfigureMailboxAutoForwardRequest, base_url, '/mailboxes/{mailboxName}/autoforward', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "auto_forward", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.ConfigureMailboxAutoForwardRequest, request)
        
        client = self._client
        
        http_res = client.request('PUT', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ConfigureMailboxAutoForwardResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def configure_mailbox_auto_reply(self, request: operations.ConfigureMailboxAutoReplyRequest) -> operations.ConfigureMailboxAutoReplyResponse:
        r"""Configure auto-reply for mailbox"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ConfigureMailboxAutoReplyRequest, base_url, '/mailboxes/{mailboxName}/autoreply', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "auto_reply", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.ConfigureMailboxAutoReplyRequest, request)
        
        client = self._client
        
        http_res = client.request('PUT', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ConfigureMailboxAutoReplyResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def create_mailbox(self, request: shared.CreateMailboxRequest) -> operations.CreateMailboxResponse:
        r"""Create a new mailbox."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/mailboxes'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateMailboxResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            res.headers = http_res.headers
            

        return res

    def delete_mailbox(self, request: operations.DeleteMailboxRequest) -> operations.DeleteMailboxResponse:
        r"""Delete a mailbox"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteMailboxRequest, base_url, '/mailboxes/{mailboxName}', request)
        
        query_params = utils.get_query_params(operations.DeleteMailboxRequest, request)
        
        client = self._client
        
        http_res = client.request('DELETE', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteMailboxResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def get_mailbox(self, request: operations.GetMailboxRequest) -> operations.GetMailboxResponse:
        r"""Get a specific mailbox"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetMailboxRequest, base_url, '/mailboxes/{mailboxName}', request)
        
        query_params = utils.get_query_params(operations.GetMailboxRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetMailboxResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.MailboxDetail])
                res.mailbox_detail = out

        return res

    def get_mailboxes(self, request: operations.GetMailboxesRequest) -> operations.GetMailboxesResponse:
        r"""Gets your mailboxes.
        Currently only supports getting the mailboxes filtered by domain name.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/mailboxes'
        
        query_params = utils.get_query_params(operations.GetMailboxesRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetMailboxesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.Mailbox]])
                res.mailboxes = out

        return res

    