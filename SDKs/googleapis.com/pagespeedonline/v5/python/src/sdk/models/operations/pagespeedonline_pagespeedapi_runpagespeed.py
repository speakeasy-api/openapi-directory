"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import _xgafv_enum as shared__xgafv_enum
from ..shared import alt_enum as shared_alt_enum
from ..shared import pagespeedapipagespeedresponsev5 as shared_pagespeedapipagespeedresponsev5
from enum import Enum
from typing import Optional


@dataclasses.dataclass
class PagespeedonlinePagespeedapiRunpagespeedSecurity:
    
    oauth2: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'oauth2', 'field_name': 'Authorization' }})  
    oauth2c: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'oauth2', 'field_name': 'Authorization' }})  
    
class PagespeedonlinePagespeedapiRunpagespeedCategoryEnum(str, Enum):
    CATEGORY_UNSPECIFIED = 'CATEGORY_UNSPECIFIED'
    ACCESSIBILITY = 'ACCESSIBILITY'
    BEST_PRACTICES = 'BEST_PRACTICES'
    PERFORMANCE = 'PERFORMANCE'
    PWA = 'PWA'
    SEO = 'SEO'

class PagespeedonlinePagespeedapiRunpagespeedStrategyEnum(str, Enum):
    r"""The analysis strategy (desktop or mobile) to use, and desktop is the default"""
    STRATEGY_UNSPECIFIED = 'STRATEGY_UNSPECIFIED'
    DESKTOP = 'DESKTOP'
    MOBILE = 'MOBILE'


@dataclasses.dataclass
class PagespeedonlinePagespeedapiRunpagespeedRequest:
    
    url: str = dataclasses.field(metadata={'query_param': { 'field_name': 'url', 'style': 'form', 'explode': True }})
    r"""Required. The URL to fetch and analyze"""  
    dollar_xgafv: Optional[shared__xgafv_enum.XgafvEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': '$.xgafv', 'style': 'form', 'explode': True }})
    r"""V1 error format."""  
    access_token: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'access_token', 'style': 'form', 'explode': True }})
    r"""OAuth access token."""  
    alt: Optional[shared_alt_enum.AltEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'alt', 'style': 'form', 'explode': True }})
    r"""Data format for response."""  
    callback: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'callback', 'style': 'form', 'explode': True }})
    r"""JSONP"""  
    captcha_token: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'captchaToken', 'style': 'form', 'explode': True }})
    r"""The captcha token passed when filling out a captcha."""  
    category: Optional[list[PagespeedonlinePagespeedapiRunpagespeedCategoryEnum]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'category', 'style': 'form', 'explode': True }})
    r"""A Lighthouse category to run; if none are given, only Performance category will be run"""  
    fields_: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'fields', 'style': 'form', 'explode': True }})
    r"""Selector specifying which fields to include in a partial response."""  
    key: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'key', 'style': 'form', 'explode': True }})
    r"""API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."""  
    locale: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'locale', 'style': 'form', 'explode': True }})
    r"""The locale used to localize formatted results"""  
    oauth_token: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'oauth_token', 'style': 'form', 'explode': True }})
    r"""OAuth 2.0 token for the current user."""  
    pretty_print: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'prettyPrint', 'style': 'form', 'explode': True }})
    r"""Returns response with indentations and line breaks."""  
    quota_user: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'quotaUser', 'style': 'form', 'explode': True }})
    r"""Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."""  
    strategy: Optional[PagespeedonlinePagespeedapiRunpagespeedStrategyEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'strategy', 'style': 'form', 'explode': True }})
    r"""The analysis strategy (desktop or mobile) to use, and desktop is the default"""  
    upload_protocol: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'upload_protocol', 'style': 'form', 'explode': True }})
    r"""Upload protocol for media (e.g. \\"raw\\", \\"multipart\\")."""  
    upload_type: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'uploadType', 'style': 'form', 'explode': True }})
    r"""Legacy upload protocol for media (e.g. \\"media\\", \\"multipart\\")."""  
    utm_campaign: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'utm_campaign', 'style': 'form', 'explode': True }})
    r"""Campaign name for analytics."""  
    utm_source: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'utm_source', 'style': 'form', 'explode': True }})
    r"""Campaign source for analytics."""  
    

@dataclasses.dataclass
class PagespeedonlinePagespeedapiRunpagespeedResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    pagespeed_api_pagespeed_response_v5: Optional[shared_pagespeedapipagespeedresponsev5.PagespeedAPIPagespeedResponseV5] = dataclasses.field(default=None)
    r"""Successful response"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    