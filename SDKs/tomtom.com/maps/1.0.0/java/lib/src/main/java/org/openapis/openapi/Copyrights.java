/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi;

import java.net.http.HttpResponse;
import org.apache.http.NameValuePair;
import org.openapis.openapi.utils.HTTPClient;
import org.openapis.openapi.utils.HTTPRequest;

public class Copyrights {
	
	private HTTPClient _defaultClient;
	private HTTPClient _securityClient;
	private String _serverUrl;
	private String _language;
	private String _sdkVersion;
	private String _genVersion;

	public Copyrights(HTTPClient defaultClient, HTTPClient securityClient, String serverUrl, String language, String sdkVersion, String genVersion) {
		this._defaultClient = defaultClient;
		this._securityClient = securityClient;
		this._serverUrl = serverUrl;
		this._language = language;
		this._sdkVersion = sdkVersion;
		this._genVersion = genVersion;
	}

    /**
     * Copyrights whole world
     * The Copyrights API returns copyright information for
     * the Maps API Raster Tile Service in JSON, JSONP, or XML format.
     * This call returns copyright information for the whole world.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetMapVersionNumberCopyrightsFormatResponse getMapVersionNumberCopyrightsFormat(org.openapis.openapi.models.operations.GetMapVersionNumberCopyrightsFormatRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetMapVersionNumberCopyrightsFormatRequest.class, baseUrl, "/map/{versionNumber}/copyrights.{format}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.GetMapVersionNumberCopyrightsFormatRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetMapVersionNumberCopyrightsFormatResponse res = new org.openapis.openapi.models.operations.GetMapVersionNumberCopyrightsFormatResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200 || httpRes.statusCode() == 304 || httpRes.statusCode() == 400 || httpRes.statusCode() == 403 || httpRes.statusCode() == 410 || httpRes.statusCode() == 500) {
        }

        return res;
    }

    /**
     * Captions
     * This API returns copyright captions for the map service.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetMapVersionNumberCopyrightsCaptionFormatResponse getMapVersionNumberCopyrightsCaptionFormat(org.openapis.openapi.models.operations.GetMapVersionNumberCopyrightsCaptionFormatRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetMapVersionNumberCopyrightsCaptionFormatRequest.class, baseUrl, "/map/{versionNumber}/copyrights/caption.{format}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.GetMapVersionNumberCopyrightsCaptionFormatRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetMapVersionNumberCopyrightsCaptionFormatResponse res = new org.openapis.openapi.models.operations.GetMapVersionNumberCopyrightsCaptionFormatResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200 || httpRes.statusCode() == 304 || httpRes.statusCode() == 400 || httpRes.statusCode() == 403 || httpRes.statusCode() == 410 || httpRes.statusCode() == 500) {
        }

        return res;
    }

    /**
     * Copyrights bounding box
     * The Copyrights API returns copyright information for
     * the Maps API Raster Tile Service in JSON, JSONP, or XML format.
     * This call returns copyright information for a specific bounding box.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetMapVersionNumberCopyrightsMinLonMinLatMaxLonMaxLatFormatResponse getMapVersionNumberCopyrightsMinLonMinLatMaxLonMaxLatFormat(org.openapis.openapi.models.operations.GetMapVersionNumberCopyrightsMinLonMinLatMaxLonMaxLatFormatRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetMapVersionNumberCopyrightsMinLonMinLatMaxLonMaxLatFormatRequest.class, baseUrl, "/map/{versionNumber}/copyrights/{minLon}/{minLat}/{maxLon}/{maxLat}.{format}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.GetMapVersionNumberCopyrightsMinLonMinLatMaxLonMaxLatFormatRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetMapVersionNumberCopyrightsMinLonMinLatMaxLonMaxLatFormatResponse res = new org.openapis.openapi.models.operations.GetMapVersionNumberCopyrightsMinLonMinLatMaxLonMaxLatFormatResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200 || httpRes.statusCode() == 304 || httpRes.statusCode() == 400 || httpRes.statusCode() == 401 || httpRes.statusCode() == 403 || httpRes.statusCode() == 410 || httpRes.statusCode() == 500) {
        }

        return res;
    }

    /**
     * Copyrights tile
     * The Copyrights API returns copyright information for
     * the Maps API Raster Tile Service in JSON, JSONP, or XML format.
     * This call returns copyright information for the a specific map tile.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetMapVersionNumberCopyrightsZoomXYFormatResponse getMapVersionNumberCopyrightsZoomXYFormat(org.openapis.openapi.models.operations.GetMapVersionNumberCopyrightsZoomXYFormatRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetMapVersionNumberCopyrightsZoomXYFormatRequest.class, baseUrl, "/map/{versionNumber}/copyrights/{zoom}/{X}/{Y}.{format}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.GetMapVersionNumberCopyrightsZoomXYFormatRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetMapVersionNumberCopyrightsZoomXYFormatResponse res = new org.openapis.openapi.models.operations.GetMapVersionNumberCopyrightsZoomXYFormatResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200 || httpRes.statusCode() == 304 || httpRes.statusCode() == 400 || httpRes.statusCode() == 401 || httpRes.statusCode() == 403 || httpRes.statusCode() == 410 || httpRes.statusCode() == 500) {
        }

        return res;
    }
}