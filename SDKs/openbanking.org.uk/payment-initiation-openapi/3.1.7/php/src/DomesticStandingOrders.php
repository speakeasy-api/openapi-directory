<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class DomesticStandingOrders 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Create Domestic Standing Order Consents
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateDomesticStandingOrderConsentsJsonRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateDomesticStandingOrderConsentsJsonSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateDomesticStandingOrderConsentsJsonResponse
     */
	public function createDomesticStandingOrderConsentsJson(
        \OpenAPI\OpenAPI\Models\Operations\CreateDomesticStandingOrderConsentsJsonRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CreateDomesticStandingOrderConsentsJsonSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateDomesticStandingOrderConsentsJsonResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/domestic-standing-order-consents');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "obWriteDomesticStandingOrderConsent5", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateDomesticStandingOrderConsentsJsonResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/jose+jwe')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->obWriteDomesticStandingOrderConsentResponse6 = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\OBWriteDomesticStandingOrderConsentResponse6', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'application/json; charset=utf-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->obWriteDomesticStandingOrderConsentResponse6 = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\OBWriteDomesticStandingOrderConsentResponse6', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/jose+jwe')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->obErrorResponse1 = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\OBErrorResponse1', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'application/json; charset=utf-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->obErrorResponse1 = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\OBErrorResponse1', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 405 or $httpResponse->getStatusCode() === 406 or $httpResponse->getStatusCode() === 415) {
        }
        else if ($httpResponse->getStatusCode() === 429) {
            $response->headers = $httpResponse->getHeaders();
            
        }

        return $response;
    }
	
    /**
     * Create Domestic Standing Order Consents
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateDomesticStandingOrderConsentsRawRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateDomesticStandingOrderConsentsRawSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateDomesticStandingOrderConsentsRawResponse
     */
	public function createDomesticStandingOrderConsentsRaw(
        \OpenAPI\OpenAPI\Models\Operations\CreateDomesticStandingOrderConsentsRawRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CreateDomesticStandingOrderConsentsRawSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateDomesticStandingOrderConsentsRawResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/domestic-standing-order-consents');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "raw");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateDomesticStandingOrderConsentsRawResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/jose+jwe')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->obWriteDomesticStandingOrderConsentResponse6 = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\OBWriteDomesticStandingOrderConsentResponse6', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'application/json; charset=utf-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->obWriteDomesticStandingOrderConsentResponse6 = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\OBWriteDomesticStandingOrderConsentResponse6', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/jose+jwe')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->obErrorResponse1 = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\OBErrorResponse1', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'application/json; charset=utf-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->obErrorResponse1 = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\OBErrorResponse1', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 405 or $httpResponse->getStatusCode() === 406 or $httpResponse->getStatusCode() === 415) {
        }
        else if ($httpResponse->getStatusCode() === 429) {
            $response->headers = $httpResponse->getHeaders();
            
        }

        return $response;
    }
	
    /**
     * Create Domestic Standing Orders
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateDomesticStandingOrdersJsonRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateDomesticStandingOrdersJsonSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateDomesticStandingOrdersJsonResponse
     */
	public function createDomesticStandingOrdersJson(
        \OpenAPI\OpenAPI\Models\Operations\CreateDomesticStandingOrdersJsonRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CreateDomesticStandingOrdersJsonSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateDomesticStandingOrdersJsonResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/domestic-standing-orders');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "obWriteDomesticStandingOrder3", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateDomesticStandingOrdersJsonResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/jose+jwe')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->obWriteDomesticStandingOrderResponse6 = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\OBWriteDomesticStandingOrderResponse6', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'application/json; charset=utf-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->obWriteDomesticStandingOrderResponse6 = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\OBWriteDomesticStandingOrderResponse6', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/jose+jwe')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->obErrorResponse1 = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\OBErrorResponse1', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'application/json; charset=utf-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->obErrorResponse1 = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\OBErrorResponse1', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 405 or $httpResponse->getStatusCode() === 406 or $httpResponse->getStatusCode() === 415) {
        }
        else if ($httpResponse->getStatusCode() === 429) {
            $response->headers = $httpResponse->getHeaders();
            
        }

        return $response;
    }
	
    /**
     * Create Domestic Standing Orders
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateDomesticStandingOrdersRawRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateDomesticStandingOrdersRawSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateDomesticStandingOrdersRawResponse
     */
	public function createDomesticStandingOrdersRaw(
        \OpenAPI\OpenAPI\Models\Operations\CreateDomesticStandingOrdersRawRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CreateDomesticStandingOrdersRawSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateDomesticStandingOrdersRawResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/domestic-standing-orders');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "raw");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateDomesticStandingOrdersRawResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/jose+jwe')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->obWriteDomesticStandingOrderResponse6 = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\OBWriteDomesticStandingOrderResponse6', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'application/json; charset=utf-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->obWriteDomesticStandingOrderResponse6 = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\OBWriteDomesticStandingOrderResponse6', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/jose+jwe')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->obErrorResponse1 = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\OBErrorResponse1', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'application/json; charset=utf-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->obErrorResponse1 = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\OBErrorResponse1', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 405 or $httpResponse->getStatusCode() === 406 or $httpResponse->getStatusCode() === 415) {
        }
        else if ($httpResponse->getStatusCode() === 429) {
            $response->headers = $httpResponse->getHeaders();
            
        }

        return $response;
    }
	
    /**
     * Get Domestic Standing Order Consents
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetDomesticStandingOrderConsentsConsentIdRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetDomesticStandingOrderConsentsConsentIdSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetDomesticStandingOrderConsentsConsentIdResponse
     */
	public function getDomesticStandingOrderConsentsConsentId(
        \OpenAPI\OpenAPI\Models\Operations\GetDomesticStandingOrderConsentsConsentIdRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetDomesticStandingOrderConsentsConsentIdSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetDomesticStandingOrderConsentsConsentIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/domestic-standing-order-consents/{ConsentId}', \OpenAPI\OpenAPI\Models\Operations\GetDomesticStandingOrderConsentsConsentIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetDomesticStandingOrderConsentsConsentIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/jose+jwe')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->obWriteDomesticStandingOrderConsentResponse6 = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\OBWriteDomesticStandingOrderConsentResponse6', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'application/json; charset=utf-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->obWriteDomesticStandingOrderConsentResponse6 = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\OBWriteDomesticStandingOrderConsentResponse6', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/jose+jwe')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->obErrorResponse1 = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\OBErrorResponse1', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'application/json; charset=utf-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->obErrorResponse1 = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\OBErrorResponse1', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 405 or $httpResponse->getStatusCode() === 406) {
        }
        else if ($httpResponse->getStatusCode() === 429) {
            $response->headers = $httpResponse->getHeaders();
            
        }

        return $response;
    }
	
    /**
     * Get Domestic Standing Orders
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetDomesticStandingOrdersDomesticStandingOrderIdRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetDomesticStandingOrdersDomesticStandingOrderIdSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetDomesticStandingOrdersDomesticStandingOrderIdResponse
     */
	public function getDomesticStandingOrdersDomesticStandingOrderId(
        \OpenAPI\OpenAPI\Models\Operations\GetDomesticStandingOrdersDomesticStandingOrderIdRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetDomesticStandingOrdersDomesticStandingOrderIdSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetDomesticStandingOrdersDomesticStandingOrderIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/domestic-standing-orders/{DomesticStandingOrderId}', \OpenAPI\OpenAPI\Models\Operations\GetDomesticStandingOrdersDomesticStandingOrderIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetDomesticStandingOrdersDomesticStandingOrderIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/jose+jwe')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->obWriteDomesticStandingOrderResponse6 = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\OBWriteDomesticStandingOrderResponse6', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'application/json; charset=utf-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->obWriteDomesticStandingOrderResponse6 = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\OBWriteDomesticStandingOrderResponse6', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/jose+jwe')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->obErrorResponse1 = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\OBErrorResponse1', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'application/json; charset=utf-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->obErrorResponse1 = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\OBErrorResponse1', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 405 or $httpResponse->getStatusCode() === 406) {
        }
        else if ($httpResponse->getStatusCode() === 429) {
            $response->headers = $httpResponse->getHeaders();
            
        }

        return $response;
    }
}