/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import {
  objectToClass,
  SpeakeasyBase,
  SpeakeasyMetadata,
} from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
import { Expose, Transform, Type } from "class-transformer";

/**
 * Specifies criteria for sorting the results of a query for information about S3 buckets.
 */
export class DescribeBucketsRequestBodySortCriteria extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "attributeName" })
  attributeName?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "orderBy" })
  orderBy?: shared.OrderByEnum;
}

export class DescribeBucketsRequestBody extends SpeakeasyBase {
  /**
   * Specifies, as a map, one or more property-based conditions that filter the results of a query for information about S3 buckets.
   */
  @SpeakeasyMetadata({ elemType: shared.BucketCriteriaAdditionalProperties })
  @Expose({ name: "criteria" })
  @Transform(
    ({ value }) => {
      const obj: Record<string, shared.BucketCriteriaAdditionalProperties> = {};
      for (const key in value) {
        obj[key] = objectToClass(
          value[key],
          shared.BucketCriteriaAdditionalProperties
        );
      }
      return obj;
    },
    { toClassOnly: true }
  )
  criteria?: Record<string, shared.BucketCriteriaAdditionalProperties>;

  /**
   * The maximum number of items to include in each page of the response. The default value is 50.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "maxResults" })
  maxResults?: number;

  /**
   * The nextToken string that specifies which page of results to return in a paginated response.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "nextToken" })
  nextToken?: string;

  /**
   * Specifies criteria for sorting the results of a query for information about S3 buckets.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "sortCriteria" })
  @Type(() => DescribeBucketsRequestBodySortCriteria)
  sortCriteria?: DescribeBucketsRequestBodySortCriteria;
}

export class DescribeBucketsRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  requestBody: DescribeBucketsRequestBody;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Algorithm",
  })
  xAmzAlgorithm?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Content-Sha256",
  })
  xAmzContentSha256?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Credential",
  })
  xAmzCredential?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Date",
  })
  xAmzDate?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Security-Token",
  })
  xAmzSecurityToken?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Signature",
  })
  xAmzSignature?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-SignedHeaders",
  })
  xAmzSignedHeaders?: string;

  /**
   * Pagination limit
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=maxResults",
  })
  maxResults?: string;

  /**
   * Pagination token
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=nextToken",
  })
  nextToken?: string;
}

export class DescribeBucketsResponse extends SpeakeasyBase {
  /**
   * AccessDeniedException
   */
  @SpeakeasyMetadata()
  accessDeniedException?: any;

  /**
   * ConflictException
   */
  @SpeakeasyMetadata()
  conflictException?: any;

  @SpeakeasyMetadata()
  contentType: string;

  /**
   * Success
   */
  @SpeakeasyMetadata()
  describeBucketsResponse?: shared.DescribeBucketsResponse;

  /**
   * InternalServerException
   */
  @SpeakeasyMetadata()
  internalServerException?: any;

  /**
   * ResourceNotFoundException
   */
  @SpeakeasyMetadata()
  resourceNotFoundException?: any;

  /**
   * ServiceQuotaExceededException
   */
  @SpeakeasyMetadata()
  serviceQuotaExceededException?: any;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * ThrottlingException
   */
  @SpeakeasyMetadata()
  throttlingException?: any;

  /**
   * ValidationException
   */
  @SpeakeasyMetadata()
  validationException?: any;
}
