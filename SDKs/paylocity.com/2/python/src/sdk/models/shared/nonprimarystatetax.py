"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class NonPrimaryStateTax:
    r"""The Non-Primary State Tax model"""
    
    amount: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('amount'), 'exclude': lambda f: f is None }})
    r"""State tax code.<br  /> Max length: 50"""  
    deductions_amount: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('deductionsAmount'), 'exclude': lambda f: f is None }})
    r"""Box 4(b) on form W4 (year 2020 or later): Deductions amount. <br  />Decimal (12,2)"""  
    dependents_amount: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dependentsAmount'), 'exclude': lambda f: f is None }})
    r"""Box 3 on form W4 (year 2020 or later): Total dependents amount. <br  />Decimal (12,2)"""  
    exemptions: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('exemptions'), 'exclude': lambda f: f is None }})
    r"""State tax exemptions value.<br  />Decimal (12,2)"""  
    exemptions2: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('exemptions2'), 'exclude': lambda f: f is None }})
    r"""State tax exemptions 2 value.<br  />Decimal (12,2)"""  
    filing_status: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('filingStatus'), 'exclude': lambda f: f is None }})
    r"""Employee state tax filing status. Common values are *S* (Single), *M* (Married).<br  />Max length: 50"""  
    higher_rate: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('higherRate'), 'exclude': lambda f: f is None }})
    r"""Box 2(c) on form W4 (year 2020 or later): Multiple Jobs or Spouse Works. <br  />Boolean"""  
    other_income_amount: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('otherIncomeAmount'), 'exclude': lambda f: f is None }})
    r"""Box 4(a) on form W4 (year 2020 or later): Other income amount. <br  />Decimal (12,2)"""  
    percentage: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('percentage'), 'exclude': lambda f: f is None }})
    r"""State Tax percentage. <br  />Decimal (12,2)"""  
    reciprocity_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('reciprocityCode'), 'exclude': lambda f: f is None }})
    r"""Non-primary state tax reciprocity code.<br  /> Max length: 50"""  
    special_check_calc: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('specialCheckCalc'), 'exclude': lambda f: f is None }})
    r"""Supplemental check calculation code. Common values are *Blocked* (Taxes blocked on Supplemental checks), *Supp* (Use supplemental Tax Rate-Code). <br  />Max length: 10"""  
    tax_calculation_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('taxCalculationCode'), 'exclude': lambda f: f is None }})
    r"""Tax calculation code. Common values are *F* (Flat), *P* (Percentage), *FDFP* (Flat Dollar Amount plus Fixed Percentage). <br  />Max length: 10"""  
    tax_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('taxCode'), 'exclude': lambda f: f is None }})
    r"""State tax code.<br  /> Max length: 50"""  
    w4_form_year: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('w4FormYear'), 'exclude': lambda f: f is None }})
    r"""The state W4 form year <br  />Integer"""  
    