/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import org.openapis.openapi.utils.SpeakeasyMetadata;

/**
 * FolderSettings - Container for the folder settings
 */
public class FolderSettings {
    /**
     * The Description of the folder or meter
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Description")
    @SpeakeasyMetadata("form:name=Description")
    public String description;

    public FolderSettings withDescription(String description) {
        this.description = description;
        return this;
    }
    
    /**
     * Flag if the meter is enabled (folder not supported yet)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Enable")
    @SpeakeasyMetadata("form:name=Enable")
    public Boolean enable;

    public FolderSettings withEnable(Boolean enable) {
        this.enable = enable;
        return this;
    }
    
    /**
     * The Type of the folder
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("FolderType")
    @SpeakeasyMetadata("form:name=FolderType")
    public FolderSettingsFolderTypeEnum folderType;

    public FolderSettings withFolderType(FolderSettingsFolderTypeEnum folderType) {
        this.folderType = folderType;
        return this;
    }
    
    /**
     * The Name of the folder or meter
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Name")
    @SpeakeasyMetadata("form:name=Name")
    public String name;

    public FolderSettings withName(String name) {
        this.name = name;
        return this;
    }
    
    /**
     * The parent folder ID of this item
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ParentFolderId")
    @SpeakeasyMetadata("form:name=ParentFolderId")
    public String parentFolderId;

    public FolderSettings withParentFolderId(String parentFolderId) {
        this.parentFolderId = parentFolderId;
        return this;
    }
    
    /**
     * The serial number (meter only)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("SerialNumber")
    @SpeakeasyMetadata("form:name=SerialNumber")
    public Long serialNumber;

    public FolderSettings withSerialNumber(Long serialNumber) {
        this.serialNumber = serialNumber;
        return this;
    }
    
    /**
     * Flag if the meter is usable for virtual billing meters (e.g. washroom)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("UseableForVirtualBillingMeters")
    @SpeakeasyMetadata("form:name=UseableForVirtualBillingMeters")
    public Boolean useableForVirtualBillingMeters;

    public FolderSettings withUseableForVirtualBillingMeters(Boolean useableForVirtualBillingMeters) {
        this.useableForVirtualBillingMeters = useableForVirtualBillingMeters;
        return this;
    }
    
    /**
     * The value correction on this meter
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ValueCorrection")
    @SpeakeasyMetadata("form:name=ValueCorrection")
    public Double valueCorrection;

    public FolderSettings withValueCorrection(Double valueCorrection) {
        this.valueCorrection = valueCorrection;
        return this;
    }
    
    /**
     * The value correction on all parent folders. but not on the meter itself
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ValueCorrectionParentFolder")
    @SpeakeasyMetadata("form:name=ValueCorrectionParentFolder")
    public Double valueCorrectionParentFolder;

    public FolderSettings withValueCorrectionParentFolder(Double valueCorrectionParentFolder) {
        this.valueCorrectionParentFolder = valueCorrectionParentFolder;
        return this;
    }
    
    /**
     * The name of the visualization of the folder
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("VisualizationName")
    @SpeakeasyMetadata("form:name=VisualizationName")
    public String visualizationName;

    public FolderSettings withVisualizationName(String visualizationName) {
        this.visualizationName = visualizationName;
        return this;
    }
    
    public FolderSettings(){}
}
