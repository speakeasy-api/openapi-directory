"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import userentity as shared_userentity
from datetime import datetime
from enum import Enum
from typing import Optional

class PostGroupsGroupIDUsersRequestBodyAuthenticationMethodEnum(str, Enum):
    r"""How is this user authenticated?"""
    PASSWORD = 'password'
    UNUSED_FORMER_LDAP = 'unused_former_ldap'
    SSO = 'sso'
    NONE = 'none'
    EMAIL_SIGNUP = 'email_signup'
    PASSWORD_WITH_IMPORTED_HASH = 'password_with_imported_hash'


@dataclasses.dataclass
class PostGroupsGroupIDUsersRequestBodyAvatarFile:
    
    avatar_file: str = dataclasses.field(metadata={'multipart_form': { 'field_name': 'avatar_file' }})  
    content: bytes = dataclasses.field(metadata={'multipart_form': { 'content': True }})  
    
class PostGroupsGroupIDUsersRequestBodyRequire2faEnum(str, Enum):
    r"""2FA required setting"""
    USE_SYSTEM_SETTING = 'use_system_setting'
    ALWAYS_REQUIRE = 'always_require'
    NEVER_REQUIRE = 'never_require'

class PostGroupsGroupIDUsersRequestBodySslRequiredEnum(str, Enum):
    r"""SSL required setting"""
    USE_SYSTEM_SETTING = 'use_system_setting'
    ALWAYS_REQUIRE = 'always_require'
    NEVER_REQUIRE = 'never_require'


@dataclasses.dataclass
class PostGroupsGroupIDUsersRequestBody:
    
    allowed_ips: Optional[str] = dataclasses.field(default=None, metadata={'multipart_form': { 'field_name': 'allowed_ips' }})
    r"""A list of allowed IPs if applicable.  Newline delimited"""  
    announcements_read: Optional[bool] = dataclasses.field(default=None, metadata={'multipart_form': { 'field_name': 'announcements_read' }})
    r"""Signifies that the user has read all the announcements in the UI."""  
    attachments_permission: Optional[bool] = dataclasses.field(default=None, metadata={'multipart_form': { 'field_name': 'attachments_permission' }})
    r"""DEPRECATED: Can the user create Bundles (aka Share Links)? Use the bundle permission instead."""  
    authenticate_until: Optional[datetime] = dataclasses.field(default=None, metadata={'multipart_form': { 'field_name': 'authenticate_until' }})
    r"""Scheduled Date/Time at which user will be deactivated"""  
    authentication_method: Optional[PostGroupsGroupIDUsersRequestBodyAuthenticationMethodEnum] = dataclasses.field(default=None, metadata={'multipart_form': { 'field_name': 'authentication_method' }})
    r"""How is this user authenticated?"""  
    avatar_delete: Optional[bool] = dataclasses.field(default=None, metadata={'multipart_form': { 'field_name': 'avatar_delete' }})
    r"""If true, the avatar will be deleted."""  
    avatar_file: Optional[PostGroupsGroupIDUsersRequestBodyAvatarFile] = dataclasses.field(default=None, metadata={'multipart_form': { 'file': True }})
    r"""An image file for your user avatar."""  
    billing_permission: Optional[bool] = dataclasses.field(default=None, metadata={'multipart_form': { 'field_name': 'billing_permission' }})
    r"""Allow this user to perform operations on the account, payments, and invoices?"""  
    bypass_inactive_disable: Optional[bool] = dataclasses.field(default=None, metadata={'multipart_form': { 'field_name': 'bypass_inactive_disable' }})
    r"""Exempt this user from being disabled based on inactivity?"""  
    bypass_site_allowed_ips: Optional[bool] = dataclasses.field(default=None, metadata={'multipart_form': { 'field_name': 'bypass_site_allowed_ips' }})
    r"""Allow this user to skip site-wide IP blacklists?"""  
    change_password: Optional[str] = dataclasses.field(default=None, metadata={'multipart_form': { 'field_name': 'change_password' }})
    r"""Used for changing a password on an existing user."""  
    change_password_confirmation: Optional[str] = dataclasses.field(default=None, metadata={'multipart_form': { 'field_name': 'change_password_confirmation' }})
    r"""Optional, but if provided, we will ensure that it matches the value sent in `change_password`."""  
    company: Optional[str] = dataclasses.field(default=None, metadata={'multipart_form': { 'field_name': 'company' }})
    r"""User's company"""  
    dav_permission: Optional[bool] = dataclasses.field(default=None, metadata={'multipart_form': { 'field_name': 'dav_permission' }})
    r"""Can the user connect with WebDAV?"""  
    disabled: Optional[bool] = dataclasses.field(default=None, metadata={'multipart_form': { 'field_name': 'disabled' }})
    r"""Is user disabled? Disabled users cannot log in, and do not count for billing purposes.  Users can be automatically disabled after an inactivity period via a Site setting."""  
    email: Optional[str] = dataclasses.field(default=None, metadata={'multipart_form': { 'field_name': 'email' }})
    r"""User's email."""  
    ftp_permission: Optional[bool] = dataclasses.field(default=None, metadata={'multipart_form': { 'field_name': 'ftp_permission' }})
    r"""Can the user access with FTP/FTPS?"""  
    grant_permission: Optional[str] = dataclasses.field(default=None, metadata={'multipart_form': { 'field_name': 'grant_permission' }})
    r"""Permission to grant on the user root.  Can be blank or `full`, `read`, `write`, `list`, or `history`."""  
    group_ids: Optional[str] = dataclasses.field(default=None, metadata={'multipart_form': { 'field_name': 'group_ids' }})
    r"""A list of group ids to associate this user with.  Comma delimited."""  
    header_text: Optional[str] = dataclasses.field(default=None, metadata={'multipart_form': { 'field_name': 'header_text' }})
    r"""Text to display to the user in the header of the UI"""  
    imported_password_hash: Optional[str] = dataclasses.field(default=None, metadata={'multipart_form': { 'field_name': 'imported_password_hash' }})
    r"""Pre-calculated hash of the user's password. If supplied, this will be used to authenticate the user on first login. Supported hash menthods are MD5, SHA1, and SHA256."""  
    language: Optional[str] = dataclasses.field(default=None, metadata={'multipart_form': { 'field_name': 'language' }})
    r"""Preferred language"""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'multipart_form': { 'field_name': 'name' }})
    r"""User's full name"""  
    notes: Optional[str] = dataclasses.field(default=None, metadata={'multipart_form': { 'field_name': 'notes' }})
    r"""Any internal notes on the user"""  
    notification_daily_send_time: Optional[int] = dataclasses.field(default=None, metadata={'multipart_form': { 'field_name': 'notification_daily_send_time' }})
    r"""Hour of the day at which daily notifications should be sent. Can be in range 0 to 23"""  
    office_integration_enabled: Optional[bool] = dataclasses.field(default=None, metadata={'multipart_form': { 'field_name': 'office_integration_enabled' }})
    r"""Enable integration with Office for the web?"""  
    password: Optional[str] = dataclasses.field(default=None, metadata={'multipart_form': { 'field_name': 'password' }})
    r"""User password."""  
    password_confirmation: Optional[str] = dataclasses.field(default=None, metadata={'multipart_form': { 'field_name': 'password_confirmation' }})
    r"""Optional, but if provided, we will ensure that it matches the value sent in `password`."""  
    password_validity_days: Optional[int] = dataclasses.field(default=None, metadata={'multipart_form': { 'field_name': 'password_validity_days' }})
    r"""Number of days to allow user to use the same password"""  
    receive_admin_alerts: Optional[bool] = dataclasses.field(default=None, metadata={'multipart_form': { 'field_name': 'receive_admin_alerts' }})
    r"""Should the user receive admin alerts such a certificate expiration notifications and overages?"""  
    require_2fa: Optional[PostGroupsGroupIDUsersRequestBodyRequire2faEnum] = dataclasses.field(default=None, metadata={'multipart_form': { 'field_name': 'require_2fa' }})
    r"""2FA required setting"""  
    require_password_change: Optional[bool] = dataclasses.field(default=None, metadata={'multipart_form': { 'field_name': 'require_password_change' }})
    r"""Is a password change required upon next user login?"""  
    restapi_permission: Optional[bool] = dataclasses.field(default=None, metadata={'multipart_form': { 'field_name': 'restapi_permission' }})
    r"""Can this user access the REST API?"""  
    self_managed: Optional[bool] = dataclasses.field(default=None, metadata={'multipart_form': { 'field_name': 'self_managed' }})
    r"""Does this user manage it's own credentials or is it a shared/bot user?"""  
    sftp_permission: Optional[bool] = dataclasses.field(default=None, metadata={'multipart_form': { 'field_name': 'sftp_permission' }})
    r"""Can the user access with SFTP?"""  
    site_admin: Optional[bool] = dataclasses.field(default=None, metadata={'multipart_form': { 'field_name': 'site_admin' }})
    r"""Is the user an administrator for this site?"""  
    skip_welcome_screen: Optional[bool] = dataclasses.field(default=None, metadata={'multipart_form': { 'field_name': 'skip_welcome_screen' }})
    r"""Skip Welcome page in the UI?"""  
    ssl_required: Optional[PostGroupsGroupIDUsersRequestBodySslRequiredEnum] = dataclasses.field(default=None, metadata={'multipart_form': { 'field_name': 'ssl_required' }})
    r"""SSL required setting"""  
    sso_strategy_id: Optional[int] = dataclasses.field(default=None, metadata={'multipart_form': { 'field_name': 'sso_strategy_id' }})
    r"""SSO (Single Sign On) strategy ID for the user, if applicable."""  
    subscribe_to_newsletter: Optional[bool] = dataclasses.field(default=None, metadata={'multipart_form': { 'field_name': 'subscribe_to_newsletter' }})
    r"""Is the user subscribed to the newsletter?"""  
    time_zone: Optional[str] = dataclasses.field(default=None, metadata={'multipart_form': { 'field_name': 'time_zone' }})
    r"""User time zone"""  
    user_root: Optional[str] = dataclasses.field(default=None, metadata={'multipart_form': { 'field_name': 'user_root' }})
    r"""Root folder for FTP (and optionally SFTP if the appropriate site-wide setting is set.)  Note that this is not used for API, Desktop, or Web interface."""  
    username: Optional[str] = dataclasses.field(default=None, metadata={'multipart_form': { 'field_name': 'username' }})
    r"""User's username"""  
    

@dataclasses.dataclass
class PostGroupsGroupIDUsersRequest:
    
    group_id: int = dataclasses.field(metadata={'path_param': { 'field_name': 'group_id', 'style': 'simple', 'explode': False }})
    r"""Group ID to associate this user with."""  
    request_body: Optional[PostGroupsGroupIDUsersRequestBody] = dataclasses.field(default=None, metadata={'request': { 'media_type': 'multipart/form-data' }})  
    

@dataclasses.dataclass
class PostGroupsGroupIDUsersResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    user_entity: Optional[shared_userentity.UserEntity] = dataclasses.field(default=None)
    r"""The Users object."""  
    