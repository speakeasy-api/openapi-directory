"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from enum import Enum
from marshmallow import fields
from sdk import utils

class CheckTransferCurrencyEnum(str, Enum):
    r"""The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the check's currency."""
    CAD = 'CAD'
    CHF = 'CHF'
    EUR = 'EUR'
    GBP = 'GBP'
    JPY = 'JPY'
    USD = 'USD'

class CheckTransferCheckTransferDepositTypeEnum(str, Enum):
    r"""A constant representing the object's type. For this resource it will always be `check_transfer_deposit`."""
    CHECK_TRANSFER_DEPOSIT = 'check_transfer_deposit'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CheckTransferCheckTransferDeposit:
    r"""After a check transfer is deposited, this will contain supplemental details."""
    
    back_image_file_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('back_image_file_id') }})
    r"""The ID for the File containing the image of the rear of the check."""  
    front_image_file_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('front_image_file_id') }})
    r"""The ID for the File containing the image of the front of the check."""  
    type: CheckTransferCheckTransferDepositTypeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type') }})
    r"""A constant representing the object's type. For this resource it will always be `check_transfer_deposit`."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CheckTransferReturnAddress:
    r"""The return address to be printed on the check."""
    
    city: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('city') }})
    r"""The city of the address."""  
    line1: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('line1') }})
    r"""The first line of the address."""  
    line2: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('line2') }})
    r"""The second line of the address."""  
    name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name') }})
    r"""The name of the address."""  
    state: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('state') }})
    r"""The US state of the address."""  
    zip: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('zip') }})
    r"""The postal code of the address."""  
    
class CheckTransferStatusEnum(str, Enum):
    r"""The lifecycle status of the transfer."""
    PENDING_APPROVAL = 'pending_approval'
    PENDING_SUBMISSION = 'pending_submission'
    SUBMITTING = 'submitting'
    SUBMITTED = 'submitted'
    PENDING_MAILING = 'pending_mailing'
    MAILED = 'mailed'
    CANCELED = 'canceled'
    DEPOSITED = 'deposited'
    STOPPED = 'stopped'
    RETURNED = 'returned'
    REJECTED = 'rejected'
    REQUIRES_ATTENTION = 'requires_attention'

class CheckTransferCheckTransferStopPaymentRequestTypeEnum(str, Enum):
    r"""A constant representing the object's type. For this resource it will always be `check_transfer_stop_payment_request`."""
    CHECK_TRANSFER_STOP_PAYMENT_REQUEST = 'check_transfer_stop_payment_request'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CheckTransferCheckTransferStopPaymentRequest:
    r"""After a stop-payment is requested on the check, this will contain supplemental details."""
    
    requested_at: datetime = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('requested_at'), 'encoder': utils.datetimeisoformat(False), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso') }})
    r"""The time the stop-payment was requested."""  
    transaction_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('transaction_id') }})
    r"""The transaction ID of the corresponding credit transaction."""  
    transfer_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('transfer_id') }})
    r"""The ID of the check transfer that was stopped."""  
    type: CheckTransferCheckTransferStopPaymentRequestTypeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type') }})
    r"""A constant representing the object's type. For this resource it will always be `check_transfer_stop_payment_request`."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CheckTransferCheckTransferSubmission:
    r"""After the transfer is submitted, this will contain supplemental details."""
    
    check_number: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('check_number') }})
    r"""The identitying number of the check."""  
    
class CheckTransferTypeEnum(str, Enum):
    r"""A constant representing the object's type. For this resource it will always be `check_transfer`."""
    CHECK_TRANSFER = 'check_transfer'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CheckTransfer:
    r"""Check Transfers move funds from your Increase account by mailing a physical check."""
    
    account_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('account_id') }})
    r"""The identifier of the Account from which funds will be transferred."""  
    address_city: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('address_city') }})
    r"""The city of the check's destination."""  
    address_line1: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('address_line1') }})
    r"""The street address of the check's destination."""  
    address_line2: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('address_line2') }})
    r"""The second line of the address of the check's destination."""  
    address_state: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('address_state') }})
    r"""The state of the check's destination."""  
    address_zip: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('address_zip') }})
    r"""The postal code of the check's destination."""  
    amount: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('amount') }})
    r"""The transfer amount in USD cents."""  
    created_at: datetime = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('created_at'), 'encoder': utils.datetimeisoformat(False), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso') }})
    r"""The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the transfer was created."""  
    currency: CheckTransferCurrencyEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('currency') }})
    r"""The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the check's currency."""  
    deposit: CheckTransferCheckTransferDeposit = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('deposit') }})
    r"""After a check transfer is deposited, this will contain supplemental details."""  
    id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id') }})
    r"""The Check transfer's identifier."""  
    mailed_at: datetime = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('mailed_at'), 'encoder': utils.datetimeisoformat(False), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso') }})
    r"""The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the check was mailed."""  
    message: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('message') }})
    r"""The descriptor that will be printed on the memo field on the check."""  
    note: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('note') }})
    r"""The descriptor that will be printed on the letter included with the check."""  
    recipient_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('recipient_name') }})
    r"""The name that will be printed on the check."""  
    return_address: CheckTransferReturnAddress = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('return_address') }})
    r"""The return address to be printed on the check."""  
    status: CheckTransferStatusEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status') }})
    r"""The lifecycle status of the transfer."""  
    stop_payment_request: CheckTransferCheckTransferStopPaymentRequest = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('stop_payment_request') }})
    r"""After a stop-payment is requested on the check, this will contain supplemental details."""  
    submission: CheckTransferCheckTransferSubmission = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('submission') }})
    r"""After the transfer is submitted, this will contain supplemental details."""  
    submitted_at: datetime = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('submitted_at'), 'encoder': utils.datetimeisoformat(False), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso') }})
    r"""The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the check was submitted."""  
    template_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('template_id') }})
    r"""If the transfer was created from a template, this will be the template's ID."""  
    transaction_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('transaction_id') }})
    r"""The ID for the transaction caused by the transfer."""  
    type: CheckTransferTypeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type') }})
    r"""A constant representing the object's type. For this resource it will always be `check_transfer`."""  
    