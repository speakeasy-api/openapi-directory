// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// PostPortfolioOptimizationHierarchicalRiskParityRequestBodyClusteringMethodEnum - The hierarchical clustering method to use
type PostPortfolioOptimizationHierarchicalRiskParityRequestBodyClusteringMethodEnum string

const (
	PostPortfolioOptimizationHierarchicalRiskParityRequestBodyClusteringMethodEnumSingleLinkage   PostPortfolioOptimizationHierarchicalRiskParityRequestBodyClusteringMethodEnum = "singleLinkage"
	PostPortfolioOptimizationHierarchicalRiskParityRequestBodyClusteringMethodEnumAverageLinkage  PostPortfolioOptimizationHierarchicalRiskParityRequestBodyClusteringMethodEnum = "averageLinkage"
	PostPortfolioOptimizationHierarchicalRiskParityRequestBodyClusteringMethodEnumCompleteLinkage PostPortfolioOptimizationHierarchicalRiskParityRequestBodyClusteringMethodEnum = "completeLinkage"
	PostPortfolioOptimizationHierarchicalRiskParityRequestBodyClusteringMethodEnumWardLinkage     PostPortfolioOptimizationHierarchicalRiskParityRequestBodyClusteringMethodEnum = "wardLinkage"
)

func (e *PostPortfolioOptimizationHierarchicalRiskParityRequestBodyClusteringMethodEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "singleLinkage":
		fallthrough
	case "averageLinkage":
		fallthrough
	case "completeLinkage":
		fallthrough
	case "wardLinkage":
		*e = PostPortfolioOptimizationHierarchicalRiskParityRequestBodyClusteringMethodEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PostPortfolioOptimizationHierarchicalRiskParityRequestBodyClusteringMethodEnum: %s", s)
	}
}

// PostPortfolioOptimizationHierarchicalRiskParityRequestBodyClusteringOrderingEnum - The order to impose on the hierarchical clustering tree leaves
type PostPortfolioOptimizationHierarchicalRiskParityRequestBodyClusteringOrderingEnum string

const (
	PostPortfolioOptimizationHierarchicalRiskParityRequestBodyClusteringOrderingEnumRHclust PostPortfolioOptimizationHierarchicalRiskParityRequestBodyClusteringOrderingEnum = "r-hclust"
	PostPortfolioOptimizationHierarchicalRiskParityRequestBodyClusteringOrderingEnumOptimal PostPortfolioOptimizationHierarchicalRiskParityRequestBodyClusteringOrderingEnum = "optimal"
)

func (e *PostPortfolioOptimizationHierarchicalRiskParityRequestBodyClusteringOrderingEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "r-hclust":
		fallthrough
	case "optimal":
		*e = PostPortfolioOptimizationHierarchicalRiskParityRequestBodyClusteringOrderingEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PostPortfolioOptimizationHierarchicalRiskParityRequestBodyClusteringOrderingEnum: %s", s)
	}
}

type PostPortfolioOptimizationHierarchicalRiskParityRequestBodyConstraints struct {
	// maximumAssetsWeights[i] is the maximum weight of the asset i in the portfolio, in percentage
	MaximumAssetsWeights []float64 `json:"maximumAssetsWeights,omitempty"`
	// The maximum portfolio exposure; must be higher than or equal to minimumPortfolioExposure
	MaximumPortfolioExposure *float64 `json:"maximumPortfolioExposure,omitempty"`
	// minimumAssetsWeights[i] is the minimum weight of the asset i in the portfolio, in percentage
	MinimumAssetsWeights []float64 `json:"minimumAssetsWeights,omitempty"`
	// The minimum portfolio exposure; must be lower than or equal to maximumPortfolioExposure
	MinimumPortfolioExposure *float64 `json:"minimumPortfolioExposure,omitempty"`
}

type PostPortfolioOptimizationHierarchicalRiskParityRequestBody struct {
	// The number of assets
	Assets int64 `json:"assets"`
	// assetsCovarianceMatrix[i][j] is the covariance between the asset i and the asset j
	AssetsCovarianceMatrix [][]float64 `json:"assetsCovarianceMatrix"`
	// The hierarchical clustering method to use
	ClusteringMethod *PostPortfolioOptimizationHierarchicalRiskParityRequestBodyClusteringMethodEnum `json:"clusteringMethod,omitempty"`
	// The order to impose on the hierarchical clustering tree leaves
	ClusteringOrdering *PostPortfolioOptimizationHierarchicalRiskParityRequestBodyClusteringOrderingEnum `json:"clusteringOrdering,omitempty"`
	Constraints        *PostPortfolioOptimizationHierarchicalRiskParityRequestBodyConstraints            `json:"constraints,omitempty"`
}

type PostPortfolioOptimizationHierarchicalRiskParityRequest struct {
	Request PostPortfolioOptimizationHierarchicalRiskParityRequestBody `request:"mediaType=application/json"`
}

// PostPortfolioOptimizationHierarchicalRiskParity200ApplicationJSON - OK
type PostPortfolioOptimizationHierarchicalRiskParity200ApplicationJSON struct {
	// assetsWeights[i] is the weight of the asset i in the portfolio, in percentage
	AssetsWeights []float64 `json:"assetsWeights"`
}

type PostPortfolioOptimizationHierarchicalRiskParityResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// OK
	PostPortfolioOptimizationHierarchicalRiskParity200ApplicationJSONObject *PostPortfolioOptimizationHierarchicalRiskParity200ApplicationJSON
}
