"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import googleappscardv1buttonlist as shared_googleappscardv1buttonlist
from ..shared import googleappscardv1datetimepicker as shared_googleappscardv1datetimepicker
from ..shared import googleappscardv1decoratedtext as shared_googleappscardv1decoratedtext
from ..shared import googleappscardv1grid as shared_googleappscardv1grid
from ..shared import googleappscardv1image as shared_googleappscardv1image
from ..shared import googleappscardv1selectioninput as shared_googleappscardv1selectioninput
from ..shared import googleappscardv1textinput as shared_googleappscardv1textinput
from ..shared import googleappscardv1textparagraph as shared_googleappscardv1textparagraph
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Any, Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GoogleAppsCardV1Widget:
    r"""Each card is made up of widgets. A widget is a composite object that can represent one of text, images, buttons, and other object types."""
    
    button_list: Optional[shared_googleappscardv1buttonlist.GoogleAppsCardV1ButtonList] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('buttonList'), 'exclude': lambda f: f is None }})
    r"""A list of buttons layed out horizontally."""  
    date_time_picker: Optional[shared_googleappscardv1datetimepicker.GoogleAppsCardV1DateTimePicker] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dateTimePicker'), 'exclude': lambda f: f is None }})
    r"""Lets users specify a date, a time, or both a date and a time. Accepts text input from users, but features an interactive date and time selector that helps users enter correctly-formatted dates and times. If users enter a date or time incorrectly, the widget shows an error that prompts users to enter the correct format. Not supported by Chat apps. Support by Chat apps coming soon."""  
    decorated_text: Optional[shared_googleappscardv1decoratedtext.GoogleAppsCardV1DecoratedText] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('decoratedText'), 'exclude': lambda f: f is None }})
    r"""A widget that displays text with optional decorations such as a label above or below the text, an icon in front of the text, a selection widget or a button after the text."""  
    divider: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('divider'), 'exclude': lambda f: f is None }})
    r"""Displays a divider between widgets, a horizontal line. For example, the following JSON creates a divider: ``` \\"divider\\": {} ```"""  
    grid: Optional[shared_googleappscardv1grid.GoogleAppsCardV1Grid] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('grid'), 'exclude': lambda f: f is None }})
    r"""Displays a grid with a collection of items. A grid supports any number of columns and items. The number of rows is determined by items divided by columns. A grid with 10 items and 2 columns has 5 rows. A grid with 11 items and 2 columns has 6 rows. For example, the following JSON creates a 2 column grid with a single item: ``` \\"grid\\": { \\"title\\": \\"A fine collection of items\\", \\"columnCount\\": 2, \\"borderStyle\\": { \\"type\\": \\"STROKE\\", \\"cornerRadius\\": 4 }, \\"items\\": [ { \\"image\\": { \\"imageUri\\": \\"https://www.example.com/image.png\\", \\"cropStyle\\": { \\"type\\": \\"SQUARE\\" }, \\"borderStyle\\": { \\"type\\": \\"STROKE\\" } }, \\"title\\": \\"An item\\", \\"textAlignment\\": \\"CENTER\\" } ], \\"onClick\\": { \\"openLink\\": { \\"url\\": \\"https://www.example.com\\" } } } ```"""  
    image: Optional[shared_googleappscardv1image.GoogleAppsCardV1Image] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('image'), 'exclude': lambda f: f is None }})
    r"""An image that is specified by a URL and can have an `onClick` action."""  
    selection_input: Optional[shared_googleappscardv1selectioninput.GoogleAppsCardV1SelectionInput] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('selectionInput'), 'exclude': lambda f: f is None }})
    r"""A widget that creates a UI item with options for users to select. For example, a dropdown menu or check list. Chat apps receive and can process the value of entered text during form input events. For details about working with form inputs, see [Receive form data](https://developers.google.com/chat/how-tos/dialogs#receive_form_data_from_dialogs). When you need to collect data from users that matches options you set, use a selection input. To collect abstract data from users, use the text input widget instead."""  
    text_input: Optional[shared_googleappscardv1textinput.GoogleAppsCardV1TextInput] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('textInput'), 'exclude': lambda f: f is None }})
    r"""A field in which users can enter text. Supports suggestions and on-change actions. Chat apps receive and can process the value of entered text during form input events. For details about working with form inputs, see [Receive form data](https://developers.google.com/chat/how-tos/dialogs#receive_form_data_from_dialogs). When you need to collect abstract data from users, use a text input. To collect defined data from users, use the selection input widget instead."""  
    text_paragraph: Optional[shared_googleappscardv1textparagraph.GoogleAppsCardV1TextParagraph] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('textParagraph'), 'exclude': lambda f: f is None }})
    r"""A paragraph of text that supports formatting. See [Text formatting](https://developers.google.com/workspace/add-ons/concepts/widgets#text_formatting) for details."""  
    