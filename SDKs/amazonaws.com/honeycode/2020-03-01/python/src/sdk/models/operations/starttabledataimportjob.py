"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import delimitedtextimportoptions as shared_delimitedtextimportoptions
from ..shared import destinationoptions as shared_destinationoptions
from ..shared import importdatasourceconfig as shared_importdatasourceconfig
from ..shared import starttabledataimportjobresult as shared_starttabledataimportjobresult
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Any, Optional

class StartTableDataImportJobRequestBodyDataFormatEnum(str, Enum):
    r"""The format of the data that is being imported. Currently the only option supported is \\"DELIMITED_TEXT\\"."""
    DELIMITED_TEXT = 'DELIMITED_TEXT'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class StartTableDataImportJobRequestBodyDataSource:
    r"""An object that has details about the source of the data that was submitted for import."""
    
    data_source_config: Optional[shared_importdatasourceconfig.ImportDataSourceConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dataSourceConfig'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class StartTableDataImportJobRequestBodyImportOptions:
    r"""An object that contains the options specified by the sumitter of the import request."""
    
    delimited_text_options: Optional[shared_delimitedtextimportoptions.DelimitedTextImportOptions] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('delimitedTextOptions'), 'exclude': lambda f: f is None }})  
    destination_options: Optional[shared_destinationoptions.DestinationOptions] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('destinationOptions'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class StartTableDataImportJobRequestBody:
    
    client_request_token: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('clientRequestToken') }})
    r"""<p> The request token for performing the update action. Request tokens help to identify duplicate requests. If a call times out or fails due to a transient error like a failed network connection, you can retry the call with the same request token. The service ensures that if the first call using that request token is successfully performed, the second call will not perform the action again. </p> <p> Note that request tokens are valid only for a few minutes. You cannot use request tokens to dedupe requests spanning hours or days. </p>"""  
    data_format: StartTableDataImportJobRequestBodyDataFormatEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dataFormat') }})
    r"""The format of the data that is being imported. Currently the only option supported is \\"DELIMITED_TEXT\\"."""  
    data_source: StartTableDataImportJobRequestBodyDataSource = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dataSource') }})
    r"""An object that has details about the source of the data that was submitted for import."""  
    import_options: StartTableDataImportJobRequestBodyImportOptions = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('importOptions') }})
    r"""An object that contains the options specified by the sumitter of the import request."""  
    

@dataclasses.dataclass
class StartTableDataImportJobRequest:
    
    request_body: StartTableDataImportJobRequestBody = dataclasses.field(metadata={'request': { 'media_type': 'application/json' }})  
    table_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'tableId', 'style': 'simple', 'explode': False }})
    r"""<p>The ID of the table where the rows are being imported.</p> <p> If a table with the specified id could not be found, this API throws ResourceNotFoundException. </p>"""  
    workbook_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'workbookId', 'style': 'simple', 'explode': False }})
    r"""<p>The ID of the workbook where the rows are being imported.</p> <p> If a workbook with the specified id could not be found, this API throws ResourceNotFoundException. </p>"""  
    x_amz_algorithm: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Algorithm', 'style': 'simple', 'explode': False }})  
    x_amz_content_sha256: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Content-Sha256', 'style': 'simple', 'explode': False }})  
    x_amz_credential: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Credential', 'style': 'simple', 'explode': False }})  
    x_amz_date: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Date', 'style': 'simple', 'explode': False }})  
    x_amz_security_token: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Security-Token', 'style': 'simple', 'explode': False }})  
    x_amz_signature: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Signature', 'style': 'simple', 'explode': False }})  
    x_amz_signed_headers: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-SignedHeaders', 'style': 'simple', 'explode': False }})  
    

@dataclasses.dataclass
class StartTableDataImportJobResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    access_denied_exception: Optional[Any] = dataclasses.field(default=None)
    r"""AccessDeniedException"""  
    internal_server_exception: Optional[Any] = dataclasses.field(default=None)
    r"""InternalServerException"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    request_timeout_exception: Optional[Any] = dataclasses.field(default=None)
    r"""RequestTimeoutException"""  
    resource_not_found_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ResourceNotFoundException"""  
    service_quota_exceeded_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ServiceQuotaExceededException"""  
    service_unavailable_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ServiceUnavailableException"""  
    start_table_data_import_job_result: Optional[shared_starttabledataimportjobresult.StartTableDataImportJobResult] = dataclasses.field(default=None)
    r"""Success"""  
    throttling_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ThrottlingException"""  
    validation_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ValidationException"""  
    