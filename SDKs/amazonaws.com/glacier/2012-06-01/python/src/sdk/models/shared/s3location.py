"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import cannedacl_enum as shared_cannedacl_enum
from ..shared import encryption as shared_encryption
from ..shared import grant as shared_grant
from ..shared import storageclass_enum as shared_storageclass_enum
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class S3Location:
    r"""Contains information about the location in Amazon S3 where the select job results are stored."""
    
    access_control_list: Optional[list[shared_grant.Grant]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AccessControlList'), 'exclude': lambda f: f is None }})  
    bucket_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('BucketName'), 'exclude': lambda f: f is None }})  
    canned_acl: Optional[shared_cannedacl_enum.CannedACLEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CannedACL'), 'exclude': lambda f: f is None }})  
    encryption: Optional[shared_encryption.Encryption] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Encryption'), 'exclude': lambda f: f is None }})  
    prefix: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Prefix'), 'exclude': lambda f: f is None }})  
    storage_class: Optional[shared_storageclass_enum.StorageClassEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('StorageClass'), 'exclude': lambda f: f is None }})  
    tagging: Optional[dict[str, str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Tagging'), 'exclude': lambda f: f is None }})  
    user_metadata: Optional[dict[str, str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('UserMetadata'), 'exclude': lambda f: f is None }})  
    