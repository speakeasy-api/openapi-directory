"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from .templates import Templates
from sdk.models import operations, shared
from typing import Any, Optional

SERVERS = [
    "https://api.doqs.dev/v1",
]
"""Contains the list of servers available to the SDK"""

class SDK:
    templates: Templates

    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str = SERVERS[0]
    _language: str = "python"
    _sdk_version: str = "0.0.1"
    _gen_version: str = "internal"

    def __init__(self,
                 security: shared.Security = None,
                 server_url: str = None,
                 url_params: dict[str, str] = None,
                 client: requests_http.Session = None
                 ) -> None:
        """Instantiates the SDK configuring it with the provided parameters.
        
        :param security: The security details required for authentication
        :type security: shared.Security
        :param server_url: The server URL to use for all operations
        :type server_url: str
        :param url_params: Parameters to optionally template the server URL with
        :type url_params: dict[str, str]
        :param client: The requests.Session HTTP client to use for all operations
        :type client: requests_http.Session        
        """
        self._client = requests_http.Session()
        
        
        if server_url is not None:
            if url_params is not None:
                self._server_url = utils.template_url(server_url, url_params)
            else:
                self._server_url = server_url

        if client is not None:
            self._client = client
        
        self._security_client = utils.configure_security_client(self._client, security)
        

        self._init_sdks()
    
    def _init_sdks(self):
        self.templates = Templates(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
    def create_template_designer_templates_post(self, request: shared.CreateOrUpdateTemplateRequest) -> operations.CreateTemplateDesignerTemplatesPostResponse:
        r"""Create Template"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/designer/templates/'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateTemplateDesignerTemplatesPostResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ResponseOkDesignerTemplate])
                res.response_ok_designer_template = out
        elif http_res.status_code >= 400 and http_res.status_code < 500 or http_res.status_code >= 500 and http_res.status_code < 600:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ResponseError])
                res.response_error = out

        return res

    def delete_designer_templates_id_delete(self, request: operations.DeleteDesignerTemplatesIDDeleteRequest) -> operations.DeleteDesignerTemplatesIDDeleteResponse:
        r"""Delete"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteDesignerTemplatesIDDeleteRequest, base_url, '/designer/templates/{id}', request)
        
        
        client = self._security_client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteDesignerTemplatesIDDeleteResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ResponseOkNoneType])
                res.response_ok_none_type = out
        elif http_res.status_code >= 400 and http_res.status_code < 500 or http_res.status_code >= 500 and http_res.status_code < 600:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ResponseError])
                res.response_error = out

        return res

    def generate_pdf_designer_templates_id_generate_post(self, request: operations.GeneratePdfDesignerTemplatesIDGeneratePostRequest) -> operations.GeneratePdfDesignerTemplatesIDGeneratePostResponse:
        r"""Generate Pdf"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GeneratePdfDesignerTemplatesIDGeneratePostRequest, base_url, '/designer/templates/{id}/generate', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "generate_pdf_payload", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GeneratePdfDesignerTemplatesIDGeneratePostResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[Any])
                res.generate_pdf_designer_templates_id_generate_post_200_application_json_any = out
        elif http_res.status_code >= 400 and http_res.status_code < 500 or http_res.status_code >= 500 and http_res.status_code < 600:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ResponseError])
                res.response_error = out

        return res

    def list_templates_designer_templates_get(self, request: operations.ListTemplatesDesignerTemplatesGetRequest) -> operations.ListTemplatesDesignerTemplatesGetResponse:
        r"""List Templates"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/designer/templates/'
        
        query_params = utils.get_query_params(operations.ListTemplatesDesignerTemplatesGetRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ListTemplatesDesignerTemplatesGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ResponseOkListFillrEntitiesDesignerTemplateDesignerTemplate])
                res.response_ok_list_fillr_entities_designer_template_designer_template = out
        elif http_res.status_code >= 400 and http_res.status_code < 500 or http_res.status_code >= 500 and http_res.status_code < 600:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ResponseError])
                res.response_error = out

        return res

    def list_templates_designer_templates_id_get(self, request: operations.ListTemplatesDesignerTemplatesIDGetRequest) -> operations.ListTemplatesDesignerTemplatesIDGetResponse:
        r"""List Templates"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ListTemplatesDesignerTemplatesIDGetRequest, base_url, '/designer/templates/{id}', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ListTemplatesDesignerTemplatesIDGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ResponseOkDesignerTemplate])
                res.response_ok_designer_template = out
        elif http_res.status_code >= 400 and http_res.status_code < 500 or http_res.status_code >= 500 and http_res.status_code < 600:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ResponseError])
                res.response_error = out

        return res

    def preview_designer_templates_preview_post(self, request: shared.PreviewModel) -> operations.PreviewDesignerTemplatesPreviewPostResponse:
        r"""Preview"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/designer/templates/preview'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PreviewDesignerTemplatesPreviewPostResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ResponseOkPreviewResponse])
                res.response_ok_preview_response = out
        elif http_res.status_code >= 400 and http_res.status_code < 500 or http_res.status_code >= 500 and http_res.status_code < 600:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ResponseError])
                res.response_error = out

        return res

    def update_template_designer_templates_id_put(self, request: operations.UpdateTemplateDesignerTemplatesIDPutRequest) -> operations.UpdateTemplateDesignerTemplatesIDPutResponse:
        r"""Update Template"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.UpdateTemplateDesignerTemplatesIDPutRequest, base_url, '/designer/templates/{id}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "create_or_update_template_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateTemplateDesignerTemplatesIDPutResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ResponseOkDesignerTemplate])
                res.response_ok_designer_template = out
        elif http_res.status_code >= 400 and http_res.status_code < 500 or http_res.status_code >= 500 and http_res.status_code < 600:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ResponseError])
                res.response_error = out

        return res

    