/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJsonDataDetailsCommercialCreditCardItem - Commercial Credit Card Item 
 */
public class GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJsonDataDetailsCommercialCreditCardItem {
    /**
     * Annual Percentage Rate
     */
    @JsonProperty("APRRate")
    public String aprRate;

    public GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJsonDataDetailsCommercialCreditCardItem withAPRRate(String aprRate) {
        this.aprRate = aprRate;
        return this;
    }
    
    /**
     * The ability to set separate limts on different cards in one account
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("AbilityToSetIndividualLimits")
    public Boolean abilityToSetIndividualLimits;

    public GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJsonDataDetailsCommercialCreditCardItem withAbilityToSetIndividualLimits(Boolean abilityToSetIndividualLimits) {
        this.abilityToSetIndividualLimits = abilityToSetIndividualLimits;
        return this;
    }
    
    /**
     * Describes whether the account have access to an online tool for reprting on expenditure
     */
    @JsonProperty("AccessToOnlineDataReportingTool")
    public Boolean accessToOnlineDataReportingTool;

    public GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJsonDataDetailsCommercialCreditCardItem withAccessToOnlineDataReportingTool(Boolean accessToOnlineDataReportingTool) {
        this.accessToOnlineDataReportingTool = accessToOnlineDataReportingTool;
        return this;
    }
    
    /**
     * Allocation rules for repayment
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("AllocationofRepayment")
    public String allocationofRepayment;

    public GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJsonDataDetailsCommercialCreditCardItem withAllocationofRepayment(String allocationofRepayment) {
        this.allocationofRepayment = allocationofRepayment;
        return this;
    }
    
    /**
     * Details on annual account fee, such as non payable when there is a turnover above a certain sum
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("AnnualAccountFeeType")
    public String annualAccountFeeType;

    public GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJsonDataDetailsCommercialCreditCardItem withAnnualAccountFeeType(String annualAccountFeeType) {
        this.annualAccountFeeType = annualAccountFeeType;
        return this;
    }
    
    /**
     * Standard fee on the card
     */
    @JsonProperty("AnnualFeeAmount")
    public String annualFeeAmount;

    public GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJsonDataDetailsCommercialCreditCardItem withAnnualFeeAmount(String annualFeeAmount) {
        this.annualFeeAmount = annualFeeAmount;
        return this;
    }
    
    /**
     * The period used to define the specific interest rate for balance transfers
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("BalanceTransferInterestRatePeriod")
    public GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJsonDataDetailsCommercialCreditCardItemBalanceTransferInterestRatePeriodEnum balanceTransferInterestRatePeriod;

    public GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJsonDataDetailsCommercialCreditCardItem withBalanceTransferInterestRatePeriod(GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJsonDataDetailsCommercialCreditCardItemBalanceTransferInterestRatePeriodEnum balanceTransferInterestRatePeriod) {
        this.balanceTransferInterestRatePeriod = balanceTransferInterestRatePeriod;
        return this;
    }
    
    /**
     * Balance transfer rate
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("BalanceTransferRate")
    public String balanceTransferRate;

    public GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJsonDataDetailsCommercialCreditCardItem withBalanceTransferRate(String balanceTransferRate) {
        this.balanceTransferRate = balanceTransferRate;
        return this;
    }
    
    /**
     * Card Scheme Code
     */
    @JsonProperty("CardScheme")
    public GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJsonDataDetailsCommercialCreditCardItemCardSchemeEnum cardScheme;

    public GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJsonDataDetailsCommercialCreditCardItem withCardScheme(GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJsonDataDetailsCommercialCreditCardItemCardSchemeEnum cardScheme) {
        this.cardScheme = cardScheme;
        return this;
    }
    
    /**
     * Cash advance rate
     */
    @JsonProperty("CashAdvanceRate")
    public String cashAdvanceRate;

    public GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJsonDataDetailsCommercialCreditCardItem withCashAdvanceRate(String cashAdvanceRate) {
        this.cashAdvanceRate = cashAdvanceRate;
        return this;
    }
    
    /**
     * Describes whether cash withdrawals are allowed
     */
    @JsonProperty("CashWithdrawalsAllowed")
    public Boolean cashWithdrawalsAllowed;

    public GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJsonDataDetailsCommercialCreditCardItem withCashWithdrawalsAllowed(Boolean cashWithdrawalsAllowed) {
        this.cashWithdrawalsAllowed = cashWithdrawalsAllowed;
        return this;
    }
    
    /**
     * Percent of cashback on amount spend
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("CashbackPercent")
    public String cashbackPercent;

    public GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJsonDataDetailsCommercialCreditCardItem withCashbackPercent(String cashbackPercent) {
        this.cashbackPercent = cashbackPercent;
        return this;
    }
    
    /**
     * Percentage fee on convenience cheques
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ChequeFeePercent")
    public String chequeFeePercent;

    public GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJsonDataDetailsCommercialCreditCardItem withChequeFeePercent(String chequeFeePercent) {
        this.chequeFeePercent = chequeFeePercent;
        return this;
    }
    
    /**
     * Describes whether the card account allow convenience cheques
     */
    @JsonProperty("ConvenienceCheque")
    public Boolean convenienceCheque;

    public GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJsonDataDetailsCommercialCreditCardItem withConvenienceCheque(Boolean convenienceCheque) {
        this.convenienceCheque = convenienceCheque;
        return this;
    }
    
    /**
     * Date of the change if it refers to future terms
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("DateOfChange")
    public String dateOfChange;

    public GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJsonDataDetailsCommercialCreditCardItem withDateOfChange(String dateOfChange) {
        this.dateOfChange = dateOfChange;
        return this;
    }
    
    /**
     * Describes how many interest free days are given if the card is fully paid at each term
     */
    @JsonProperty("DaysInterestFreeCreditIfPaymentFull")
    public Long daysInterestFreeCreditIfPaymentFull;

    public GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJsonDataDetailsCommercialCreditCardItem withDaysInterestFreeCreditIfPaymentFull(Long daysInterestFreeCreditIfPaymentFull) {
        this.daysInterestFreeCreditIfPaymentFull = daysInterestFreeCreditIfPaymentFull;
        return this;
    }
    
    /**
     * The margin added, by certain card issuers, to the scheme rate in order to arrive at the exchange rate qouted as the reference exchange rate to the cardholder
     */
    @JsonProperty("ExchangeRateAdjustment")
    public String exchangeRateAdjustment;

    public GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJsonDataDetailsCommercialCreditCardItem withExchangeRateAdjustment(String exchangeRateAdjustment) {
        this.exchangeRateAdjustment = exchangeRateAdjustment;
        return this;
    }
    
    /**
     * Percentage fee on a convenince cheques
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("FeesOnCheque")
    public String feesOnCheque;

    public GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJsonDataDetailsCommercialCreditCardItem withFeesOnCheque(String feesOnCheque) {
        this.feesOnCheque = feesOnCheque;
        return this;
    }
    
    /**
     * Additional card fee applied to sterling cash withdrawal made abroad
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ForeignCashFee")
    public String foreignCashFee;

    public GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJsonDataDetailsCommercialCreditCardItem withForeignCashFee(String foreignCashFee) {
        this.foreignCashFee = foreignCashFee;
        return this;
    }
    
    /**
     * Additional card fee rate applied to sterling cash withdrawal made abroad
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ForeignCashFeeRate")
    public String foreignCashFeeRate;

    public GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJsonDataDetailsCommercialCreditCardItem withForeignCashFeeRate(String foreignCashFeeRate) {
        this.foreignCashFeeRate = foreignCashFeeRate;
        return this;
    }
    
    /**
     * Additional card fee applied to sterling retail transactions made abroad
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ForeignPurchaseFee")
    public String foreignPurchaseFee;

    public GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJsonDataDetailsCommercialCreditCardItem withForeignPurchaseFee(String foreignPurchaseFee) {
        this.foreignPurchaseFee = foreignPurchaseFee;
        return this;
    }
    
    /**
     * Additional card fee rate applied to sterling retail transactions made abroad
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ForeignPurchaseFeeRate")
    public String foreignPurchaseFeeRate;

    public GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJsonDataDetailsCommercialCreditCardItem withForeignPurchaseFeeRate(String foreignPurchaseFeeRate) {
        this.foreignPurchaseFeeRate = foreignPurchaseFeeRate;
        return this;
    }
    
    /**
     * Amount payable for issuing an emergency card
     */
    @JsonProperty("IssuingEmergencyCardsFees")
    public String issuingEmergencyCardsFees;

    public GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJsonDataDetailsCommercialCreditCardItem withIssuingEmergencyCardsFees(String issuingEmergencyCardsFees) {
        this.issuingEmergencyCardsFees = issuingEmergencyCardsFees;
        return this;
    }
    
    /**
     * Describes the length if only a duration is given instead of a date
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("LengthPromotionalInDays")
    public Long lengthPromotionalInDays;

    public GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJsonDataDetailsCommercialCreditCardItem withLengthPromotionalInDays(Long lengthPromotionalInDays) {
        this.lengthPromotionalInDays = lengthPromotionalInDays;
        return this;
    }
    
    /**
     * The maximum numbers of cards per account
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("MaximumNumberOfCardsPermitted")
    public Long maximumNumberOfCardsPermitted;

    public GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJsonDataDetailsCommercialCreditCardItem withMaximumNumberOfCardsPermitted(Long maximumNumberOfCardsPermitted) {
        this.maximumNumberOfCardsPermitted = maximumNumberOfCardsPermitted;
        return this;
    }
    
    /**
     * Minimum \u00a3500, maximum subject to status
     */
    @JsonProperty("MinimumCreditLimit")
    public String minimumCreditLimit;

    public GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJsonDataDetailsCommercialCreditCardItem withMinimumCreditLimit(String minimumCreditLimit) {
        this.minimumCreditLimit = minimumCreditLimit;
        return this;
    }
    
    /**
     * The minimum lending available
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("MinimumLendingAmount")
    public String minimumLendingAmount;

    public GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJsonDataDetailsCommercialCreditCardItem withMinimumLendingAmount(String minimumLendingAmount) {
        this.minimumLendingAmount = minimumLendingAmount;
        return this;
    }
    
    /**
     * Minimum repayment amount
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("MinimumRepaymentAmount")
    public String minimumRepaymentAmount;

    public GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJsonDataDetailsCommercialCreditCardItem withMinimumRepaymentAmount(String minimumRepaymentAmount) {
        this.minimumRepaymentAmount = minimumRepaymentAmount;
        return this;
    }
    
    /**
     * Minimum repayment as percentage
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("MinimumRepaymentPercentage")
    public String minimumRepaymentPercentage;

    public GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJsonDataDetailsCommercialCreditCardItem withMinimumRepaymentPercentage(String minimumRepaymentPercentage) {
        this.minimumRepaymentPercentage = minimumRepaymentPercentage;
        return this;
    }
    
    /**
     * An additional fee applied to certain card cash withdrawals. This fee also applies to cash near fees such as gambling
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("NonSterlingCashFee")
    public String nonSterlingCashFee;

    public GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJsonDataDetailsCommercialCreditCardItem withNonSterlingCashFee(String nonSterlingCashFee) {
        this.nonSterlingCashFee = nonSterlingCashFee;
        return this;
    }
    
    /**
     * An additional fee rate applied to certain card cash withdrawals. This fee also applies to cash near fees such as gambling
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("NonSterlingCashFeeRate")
    public String nonSterlingCashFeeRate;

    public GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJsonDataDetailsCommercialCreditCardItem withNonSterlingCashFeeRate(String nonSterlingCashFeeRate) {
        this.nonSterlingCashFeeRate = nonSterlingCashFeeRate;
        return this;
    }
    
    /**
     * An additional fee applied to certain card retail transactions
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("NonSterlingPurchaseFee")
    public String nonSterlingPurchaseFee;

    public GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJsonDataDetailsCommercialCreditCardItem withNonSterlingPurchaseFee(String nonSterlingPurchaseFee) {
        this.nonSterlingPurchaseFee = nonSterlingPurchaseFee;
        return this;
    }
    
    /**
     * An additional fee rate applied to certain card retail transactions
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("NonSterlingPurchaseFeeRate")
    public String nonSterlingPurchaseFeeRate;

    public GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJsonDataDetailsCommercialCreditCardItem withNonSterlingPurchaseFeeRate(String nonSterlingPurchaseFeeRate) {
        this.nonSterlingPurchaseFeeRate = nonSterlingPurchaseFeeRate;
        return this;
    }
    
    /**
     * A fee applied to all non-Sterling card transactions
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("NonSterlingTransactionFee")
    public String nonSterlingTransactionFee;

    public GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJsonDataDetailsCommercialCreditCardItem withNonSterlingTransactionFee(String nonSterlingTransactionFee) {
        this.nonSterlingTransactionFee = nonSterlingTransactionFee;
        return this;
    }
    
    /**
     * A fee rate applied to all non-Sterling card transactions
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("NonSterlingTransactionFeeRate")
    public String nonSterlingTransactionFeeRate;

    public GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJsonDataDetailsCommercialCreditCardItem withNonSterlingTransactionFeeRate(String nonSterlingTransactionFeeRate) {
        this.nonSterlingTransactionFeeRate = nonSterlingTransactionFeeRate;
        return this;
    }
    
    /**
     * Fee applicable if the card was credited over its limit
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("OverLimitFee")
    public String overLimitFee;

    public GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJsonDataDetailsCommercialCreditCardItem withOverLimitFee(String overLimitFee) {
        this.overLimitFee = overLimitFee;
        return this;
    }
    
    /**
     * How many days after statement is the payment expected
     */
    @JsonProperty("PaymentDaysAfterStatement")
    public Long paymentDaysAfterStatement;

    public GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJsonDataDetailsCommercialCreditCardItem withPaymentDaysAfterStatement(Long paymentDaysAfterStatement) {
        this.paymentDaysAfterStatement = paymentDaysAfterStatement;
        return this;
    }
    
    /**
     * Any payment network fee applied to some or all non-sterling transactions that the card issuer recover directly from the cardholder
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("PaymentSchemeExchangeFee")
    public String paymentSchemeExchangeFee;

    public GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJsonDataDetailsCommercialCreditCardItem withPaymentSchemeExchangeFee(String paymentSchemeExchangeFee) {
        this.paymentSchemeExchangeFee = paymentSchemeExchangeFee;
        return this;
    }
    
    /**
     * Any payment network fee rate applied to some or all non-sterling transactions that the card issuer recover directly from the cardholder
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("PaymentSchemeExchangeFeeRate")
    public String paymentSchemeExchangeFeeRate;

    public GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJsonDataDetailsCommercialCreditCardItem withPaymentSchemeExchangeFeeRate(String paymentSchemeExchangeFeeRate) {
        this.paymentSchemeExchangeFeeRate = paymentSchemeExchangeFeeRate;
        return this;
    }
    
    /**
     * The base exchange rate used in settlement of the transaction between issuer and scheme
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("PaymentSchemeExchangeRate")
    public String paymentSchemeExchangeRate;

    public GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJsonDataDetailsCommercialCreditCardItem withPaymentSchemeExchangeRate(String paymentSchemeExchangeRate) {
        this.paymentSchemeExchangeRate = paymentSchemeExchangeRate;
        return this;
    }
    
    /**
     * Purchase rate
     */
    @JsonProperty("PurchaseRate")
    public String purchaseRate;

    public GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJsonDataDetailsCommercialCreditCardItem withPurchaseRate(String purchaseRate) {
        this.purchaseRate = purchaseRate;
        return this;
    }
    
    /**
     * Repayment frequency
     */
    @JsonProperty("RepaymentFrequency")
    public GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJsonDataDetailsCommercialCreditCardItemRepaymentFrequencyEnum repaymentFrequency;

    public GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJsonDataDetailsCommercialCreditCardItem withRepaymentFrequency(GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJsonDataDetailsCommercialCreditCardItemRepaymentFrequencyEnum repaymentFrequency) {
        this.repaymentFrequency = repaymentFrequency;
        return this;
    }
    
    /**
     * Additional notes
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("RepaymentNotes")
    public String repaymentNotes;

    public GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJsonDataDetailsCommercialCreditCardItem withRepaymentNotes(String repaymentNotes) {
        this.repaymentNotes = repaymentNotes;
        return this;
    }
    
    /**
     * Describes the start date
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("StartPromotionOrFutureTerms")
    public String startPromotionOrFutureTerms;

    public GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJsonDataDetailsCommercialCreditCardItem withStartPromotionOrFutureTerms(String startPromotionOrFutureTerms) {
        this.startPromotionOrFutureTerms = startPromotionOrFutureTerms;
        return this;
    }
    
    /**
     * Describes whether there is a statement at account level
     */
    @JsonProperty("StatementAtAccountLevel")
    public Boolean statementAtAccountLevel;

    public GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJsonDataDetailsCommercialCreditCardItem withStatementAtAccountLevel(Boolean statementAtAccountLevel) {
        this.statementAtAccountLevel = statementAtAccountLevel;
        return this;
    }
    
    /**
     * Describes whether there is a statement at card level
     */
    @JsonProperty("StatementAtPersonalLevel")
    public Boolean statementAtPersonalLevel;

    public GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJsonDataDetailsCommercialCreditCardItem withStatementAtPersonalLevel(Boolean statementAtPersonalLevel) {
        this.statementAtPersonalLevel = statementAtPersonalLevel;
        return this;
    }
    
    /**
     * Describes the end date
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("StopPromotionOrFutureTerms")
    public String stopPromotionOrFutureTerms;

    public GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJsonDataDetailsCommercialCreditCardItem withStopPromotionOrFutureTerms(String stopPromotionOrFutureTerms) {
        this.stopPromotionOrFutureTerms = stopPromotionOrFutureTerms;
        return this;
    }
    
    public GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJsonDataDetailsCommercialCreditCardItem(@JsonProperty("APRRate") String aprRate, @JsonProperty("AccessToOnlineDataReportingTool") Boolean accessToOnlineDataReportingTool, @JsonProperty("AnnualFeeAmount") String annualFeeAmount, @JsonProperty("CardScheme") GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJsonDataDetailsCommercialCreditCardItemCardSchemeEnum cardScheme, @JsonProperty("CashAdvanceRate") String cashAdvanceRate, @JsonProperty("CashWithdrawalsAllowed") Boolean cashWithdrawalsAllowed, @JsonProperty("ConvenienceCheque") Boolean convenienceCheque, @JsonProperty("DaysInterestFreeCreditIfPaymentFull") Long daysInterestFreeCreditIfPaymentFull, @JsonProperty("ExchangeRateAdjustment") String exchangeRateAdjustment, @JsonProperty("IssuingEmergencyCardsFees") String issuingEmergencyCardsFees, @JsonProperty("MinimumCreditLimit") String minimumCreditLimit, @JsonProperty("PaymentDaysAfterStatement") Long paymentDaysAfterStatement, @JsonProperty("PurchaseRate") String purchaseRate, @JsonProperty("RepaymentFrequency") GetCommercialCreditCards200ApplicationPrsOpenbankingOpendataV13PlusJsonDataDetailsCommercialCreditCardItemRepaymentFrequencyEnum repaymentFrequency, @JsonProperty("StatementAtAccountLevel") Boolean statementAtAccountLevel, @JsonProperty("StatementAtPersonalLevel") Boolean statementAtPersonalLevel) {
        this.aprRate = aprRate;
        this.accessToOnlineDataReportingTool = accessToOnlineDataReportingTool;
        this.annualFeeAmount = annualFeeAmount;
        this.cardScheme = cardScheme;
        this.cashAdvanceRate = cashAdvanceRate;
        this.cashWithdrawalsAllowed = cashWithdrawalsAllowed;
        this.convenienceCheque = convenienceCheque;
        this.daysInterestFreeCreditIfPaymentFull = daysInterestFreeCreditIfPaymentFull;
        this.exchangeRateAdjustment = exchangeRateAdjustment;
        this.issuingEmergencyCardsFees = issuingEmergencyCardsFees;
        this.minimumCreditLimit = minimumCreditLimit;
        this.paymentDaysAfterStatement = paymentDaysAfterStatement;
        this.purchaseRate = purchaseRate;
        this.repaymentFrequency = repaymentFrequency;
        this.statementAtAccountLevel = statementAtAccountLevel;
        this.statementAtPersonalLevel = statementAtPersonalLevel;
  }
}
