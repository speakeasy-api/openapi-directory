// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// ListInstancesXAmzTargetEnum
type ListInstancesXAmzTargetEnum string

const (
	ListInstancesXAmzTargetEnumRoute53AutoNamingV20170314ListInstances ListInstancesXAmzTargetEnum = "Route53AutoNaming_v20170314.ListInstances"
)

func (e ListInstancesXAmzTargetEnum) ToPointer() *ListInstancesXAmzTargetEnum {
	return &e
}

func (e *ListInstancesXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Route53AutoNaming_v20170314.ListInstances":
		*e = ListInstancesXAmzTargetEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListInstancesXAmzTargetEnum: %v", v)
	}
}

type ListInstancesRequest struct {
	ListInstancesRequest shared.ListInstancesRequest `request:"mediaType=application/json"`
	// Pagination limit
	MaxResults *string `queryParam:"style=form,explode=true,name=MaxResults"`
	// Pagination token
	NextToken         *string                     `queryParam:"style=form,explode=true,name=NextToken"`
	XAmzAlgorithm     *string                     `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string                     `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string                     `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string                     `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string                     `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string                     `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string                     `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget        ListInstancesXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type ListInstancesResponse struct {
	ContentType string
	// InvalidInput
	InvalidInput interface{}
	// Success
	ListInstancesResponse *shared.ListInstancesResponse
	// ServiceNotFound
	ServiceNotFound interface{}
	StatusCode      int
	RawResponse     *http.Response
}
