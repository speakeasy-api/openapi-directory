/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

export class GroupLockedSettingsSecurity extends SpeakeasyBase {
  @SpeakeasyMetadata({
    data: "security, scheme=true;type=oauth2;name=Authorization",
  })
  oAuth: string;
}

/**
 * Choose between enhanced encryption and [end-to-end encryption](https://support.zoom.us/hc/en-us/articles/360048660871) when starting or a meeting. When using end-to-end encryption, several features (e.g. cloud recording, phone/SIP/H.323 dial-in) will be **automatically disabled**. <br><br>The value of this field can be one of the following:<br>
 *
 * @remarks
 * `enhanced_encryption`: Enhanced encryption. Encryption is stored in the cloud if you enable this option. <br>
 *
 * `e2ee`: [End-to-end encryption](https://support.zoom.us/hc/en-us/articles/360048660871). The encryption key is stored in your local device and can not be obtained by anyone else. Enabling this setting also **disables** the following features: join before host, cloud recording, streaming, live transcription, breakout rooms, polling, 1:1 private chat, and meeting reactions.
 */
export enum GroupLockedSettingsApplicationJSONMeetingWebinarSecuritySettingsMeetingSecurityEncryptionTypeEnum {
  EnhancedEncryption = "enhanced_encryption",
  E2ee = "e2ee",
}

export enum GroupLockedSettingsApplicationJSONMeetingWebinarSecuritySettingsMeetingSecurityMeetingPasswordRequirementConsecutiveCharactersLengthEnum {
  Zero = "0",
  Four = "4",
  Five = "5",
  Six = "6",
  Seven = "7",
  Eight = "8",
}

/**
 * Meeting/webinar [passcode requirements](https://support.zoom.us/hc/en-us/articles/360033559832-Meeting-and-webinar-passwords#h_a427384b-e383-4f80-864d-794bf0a37604).
 */
export class GroupLockedSettingsApplicationJSONMeetingWebinarSecuritySettingsMeetingSecurityMeetingPasswordRequirement extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "consecutive_characters_length" })
  consecutiveCharactersLength?: GroupLockedSettingsApplicationJSONMeetingWebinarSecuritySettingsMeetingSecurityMeetingPasswordRequirementConsecutiveCharactersLengthEnum;

  /**
   * If set to `true`, the passcode must contain at least 1 letter (such as a,b,c...).
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "have_letter" })
  haveLetter?: boolean;

  /**
   * If set to `true`, the passcode must contain at least 1 number (such as 1,2,3...).
   */
  @SpeakeasyMetadata()
  @Expose({ name: "have_number" })
  haveNumber?: boolean;

  /**
   * If set to `true`, the passcode must have at least 1 special character (!,@,#...).
   */
  @SpeakeasyMetadata()
  @Expose({ name: "have_special_character" })
  haveSpecialCharacter?: boolean;

  /**
   * If set to `true`, the passcode must include both uppercase and lowercase characters.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "have_upper_and_lower_characters" })
  haveUpperAndLowerCharacters?: boolean;

  /**
   * The minimum length that the meeting/webinar passcode needs to have.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "length" })
  length?: number;

  /**
   * If set to `true`, the passcode must only contain numbers and no other characters.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "only_allow_numeric" })
  onlyAllowNumeric?: boolean;

  /**
   * If set to `true`, users will be informed if the provided passcode is weak.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "weak_enhance_detection" })
  weakEnhanceDetection?: boolean;
}

/**
 *
 * @remarks
 *
 * Specify who should be admitted to the waiting room. The value of this field can be one of the following:<br>
 * `0`: All attendees<br> `1`: Users who are not in your account<br> `2`: Users who are not in your account and are not part of your whitelisted domains that are specified in
 */
export enum GroupLockedSettingsApplicationJSONMeetingWebinarSecuritySettingsMeetingSecurityWaitingRoomSettingsParticipantsToPlaceInWaitingRoomEnum {
  Zero = "0",
  One = "1",
  Two = "2",
}

/**
 * Specify the settings to be applied if waiting room is enabled.
 */
export class GroupLockedSettingsApplicationJSONMeetingWebinarSecuritySettingsMeetingSecurityWaitingRoomSettings extends SpeakeasyBase {
  /**
   *
   * @remarks
   *
   * Specify who should be admitted to the waiting room. The value of this field can be one of the following:<br>
   * `0`: All attendees<br> `1`: Users who are not in your account<br> `2`: Users who are not in your account and are not part of your whitelisted domains that are specified in
   */
  @SpeakeasyMetadata()
  @Expose({ name: "participants_to_place_in_waiting_room" })
  participantsToPlaceInWaitingRoom?: GroupLockedSettingsApplicationJSONMeetingWebinarSecuritySettingsMeetingSecurityWaitingRoomSettingsParticipantsToPlaceInWaitingRoomEnum;

  /**
   * Specify who can admit participants from the waiting room. The value of this field can be one of the following:<br>
   *
   * @remarks
   * `0`: Host and co-hosts only<br> `1`: Host, co-hosts, and anyone who bypassed the waiting room (only if host and co-hosts are not present).
   *
   *
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "users_who_can_admit_participants_from_waiting_room" })
  usersWhoCanAdmitParticipantsFromWaitingRoom?: number;

  /**
   * If the value of the `participants_to_place_in_waiting_room` field is `2`, use this setting to specify the domains that can bypass the waiting room feature. Separate multiple domains with commas(example: "aaa.com,bbb.com").
   */
  @SpeakeasyMetadata()
  @Expose({ name: "whitelisted_domains_for_waiting_room" })
  whitelistedDomainsForWaitingRoom?: string;
}

export class GroupLockedSettingsApplicationJSONMeetingWebinarSecuritySettingsMeetingSecurity extends SpeakeasyBase {
  /**
   * `true`: Require that all meetings are secured with at least one security option.
   *
   * @remarks
   *
   * This setting can only be disabled by Enterprise, ISV, Business (with more than 100 licenses), and Education accounts. [Learn more](https://marketplace.zoom.us/docs/guides/stay-up-to-date/announcements#meeting-security).
   */
  @SpeakeasyMetadata()
  @Expose({ name: "auto_security" })
  autoSecurity?: boolean;

  /**
   * If set to `true`, meeting passcode will be encrypted and included in the invite link to allow participants to join with just one click without having to enter the passcode.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "embed_password_in_join_link" })
  embedPasswordInJoinLink?: boolean;

  /**
   * Choose between enhanced encryption and [end-to-end encryption](https://support.zoom.us/hc/en-us/articles/360048660871) when starting or a meeting. When using end-to-end encryption, several features (e.g. cloud recording, phone/SIP/H.323 dial-in) will be **automatically disabled**. <br><br>The value of this field can be one of the following:<br>
   *
   * @remarks
   * `enhanced_encryption`: Enhanced encryption. Encryption is stored in the cloud if you enable this option. <br>
   *
   * `e2ee`: [End-to-end encryption](https://support.zoom.us/hc/en-us/articles/360048660871). The encryption key is stored in your local device and can not be obtained by anyone else. Enabling this setting also **disables** the following features: join before host, cloud recording, streaming, live transcription, breakout rooms, polling, 1:1 private chat, and meeting reactions.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "encryption_type" })
  encryptionType?: GroupLockedSettingsApplicationJSONMeetingWebinarSecuritySettingsMeetingSecurityEncryptionTypeEnum;

  /**
   * Allow use of end-to-end encryption for meetings. If set to `true`, you can specify the encryption type in `encryption_type` field.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "end_to_end_encrypted_meetings" })
  endToEndEncryptedMeetings?: boolean;

  /**
   * If set to `true`, all instant, and scheduled meetings that users can join via client, or room systems will be passcode-protected. The Personal Meeting ID (PMI) meetings are not included in this setting.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "meeting_password" })
  meetingPassword?: boolean;

  /**
   * Meeting/webinar [passcode requirements](https://support.zoom.us/hc/en-us/articles/360033559832-Meeting-and-webinar-passwords#h_a427384b-e383-4f80-864d-794bf0a37604).
   */
  @SpeakeasyMetadata()
  @Expose({ name: "meeting_password_requirement" })
  @Type(
    () =>
      GroupLockedSettingsApplicationJSONMeetingWebinarSecuritySettingsMeetingSecurityMeetingPasswordRequirement
  )
  meetingPasswordRequirement?: GroupLockedSettingsApplicationJSONMeetingWebinarSecuritySettingsMeetingSecurityMeetingPasswordRequirement;

  /**
   * Require passcode for participants joining by phone. If set to `true`, a numeric passcode will be required for participants joining by phone if your meeting has a passcode. For meeting with an alphanumeric passcode, a numeric version will be generated.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "phone_password" })
  phonePassword?: boolean;

  /**
   * If set to `true`, all Personal Meeting ID (PMI) meetings that users can join via client, or room systems will be passcode-protected.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "pmi_password" })
  pmiPassword?: boolean;

  /**
   * Require a passcode for meetings which have already been scheduled.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "require_password_for_scheduled_meeting" })
  requirePasswordForScheduledMeeting?: boolean;

  /**
   * Require a passcode for webinars which have already been scheduled.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "require_password_for_scheduled_webinar" })
  requirePasswordForScheduledWebinar?: boolean;

  /**
   * When participants join a meeting, place them in a waiting room and require the host to admit them individually. Enabling the waiting room automatically disables the setting for allowing participants to join before host.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "waiting_room" })
  waitingRoom?: boolean;

  /**
   * Specify the settings to be applied if waiting room is enabled.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "waiting_room_settings" })
  @Type(
    () =>
      GroupLockedSettingsApplicationJSONMeetingWebinarSecuritySettingsMeetingSecurityWaitingRoomSettings
  )
  waitingRoomSettings?: GroupLockedSettingsApplicationJSONMeetingWebinarSecuritySettingsMeetingSecurityWaitingRoomSettings;

  /**
   * If set to `true`, a passcode will be generated when scheduling a Webinar and participants require the passcode to join the Webinar.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "webinar_password" })
  webinarPassword?: boolean;
}

export class GroupLockedSettingsApplicationJSONMeetingWebinarSecuritySettings extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "meeting_security" })
  @Type(
    () =>
      GroupLockedSettingsApplicationJSONMeetingWebinarSecuritySettingsMeetingSecurity
  )
  meetingSecurity?: GroupLockedSettingsApplicationJSONMeetingWebinarSecuritySettingsMeetingSecurity;
}

export class GroupLockedSettingsApplicationJson1EmailNotification extends SpeakeasyBase {
  /**
   * Notify the alternative host who is set or removed.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "alternative_host_reminder" })
  alternativeHostReminder?: boolean;

  /**
   * Notify host and participants when the meeting is cancelled.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "cancel_meeting_reminder" })
  cancelMeetingReminder?: boolean;

  /**
   * Notify host when cloud recording is available.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "cloud_recording_available_reminder" })
  cloudRecordingAvailableReminder?: boolean;

  /**
   * Notify host when participants join the meeting before them.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "jbh_reminder" })
  jbhReminder?: boolean;

  /**
   * Notify the host there is a meeting is scheduled, rescheduled, or cancelled.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "schedule_for_host_reminder" })
  scheduleForHostReminder?: boolean;
}

export class GroupLockedSettingsApplicationJson1InMeeting extends SpeakeasyBase {
  /**
   * Allow participants who belong to your account to see that a guest (someone who does not belong to your account) is participating in the meeting/webinar.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "alert_guest_join" })
  alertGuestJoin?: boolean;

  /**
   * Show Zoom windows during screen share.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "allow_show_zoom_windows" })
  allowShowZoomWindows?: boolean;

  /**
   * Allow participants to use annotation tools to add information to shared screens.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "annotation" })
  annotation?: boolean;

  /**
   * Allow host to put attendee on hold.
   *
   * @remarks
   *
   * **This field has been deprecated and is no longer supported.**
   */
  @SpeakeasyMetadata()
  @Expose({ name: "attendee_on_hold" })
  attendeeOnHold?: boolean;

  /**
   * Enable users to see and add contacts to 'auto-answer group' in the contact list on chat. Any call from members of this group will be automatically answered.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "auto_answer" })
  autoAnswer?: boolean;

  /**
   * Automatically save all in-meeting chats.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "auto_saving_chat" })
  autoSavingChat?: boolean;

  /**
   * Allow host to split meeting participants into separate, smaller rooms.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "breakout_room" })
  breakoutRoom?: boolean;

  /**
   * Allow meeting participants to send chat message visible to all participants.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "chat" })
  chat?: boolean;

  /**
   * Allow host to type closed captions or assign a participant/third party device to add closed captions.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "closed_caption" })
  closedCaption?: boolean;

  /**
   * Allow the host to add co-hosts. Co-hosts have the same in-meeting controls as the host.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "co_host" })
  coHost?: boolean;

  /**
   * Displays whether or not custom [data center regions](https://support.zoom.us/hc/en-us/articles/360042411451-Selecting-data-center-regions-for-hosted-meetings-and-webinars) have been selected for meetings/webinars hosted by this group.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "custom_data_center_regions" })
  customDataCenterRegions?: boolean;

  /**
   * Require that all meetings are encrypted using AES.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "e2e_encryption" })
  e2eEncryption?: boolean;

  /**
   * Play sound when participants join or leave.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "entry_exit_chime" })
  entryExitChime?: string;

  /**
   * Allow another user to take control of the camera during a meeting.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "far_end_camera_control" })
  farEndCameraControl?: boolean;

  /**
   * Enable users to provide feedback to Zoom at the end of the meeting.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "feedback" })
  feedback?: boolean;

  /**
   * Indicates whether [in-meeting file transfer](https://support.zoom.us/hc/en-us/articles/209605493-In-meeting-file-transfer) setting has been enabled for the users in the group or not.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "file_transfer" })
  fileTransfer?: boolean;

  /**
   * Enable higher quality video for host and participants. This will require more bandwidth.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "group_hd" })
  groupHd?: boolean;

  /**
   * Allow participants in a meeting can provide nonverbal feedback and express opinions by clicking on icons in the Participants panel.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "non_verbal_feedback" })
  nonVerbalFeedback?: boolean;

  /**
   * Allow users to select original sound during a meeting.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "original_audio" })
  originalAudio?: boolean;

  /**
   * Add 'Polls' to the meeting controls. This allows the host to survey the attendees.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "polling" })
  polling?: boolean;

  /**
   * Display end-of-meeting experience feedback survey.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "post_meeting_feedback" })
  postMeetingFeedback?: boolean;

  /**
   * Allow meeting participants to send a private 1:1 message to another participant.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "private_chat" })
  privateChat?: boolean;

  /**
   * During screen sharing, allow the person who is sharing to let others control the shared content.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "remote_control" })
  remoteControl?: boolean;

  /**
   * Allow meeting host to provide 1:1 remote support to another participant.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "remote_support" })
  remoteSupport?: boolean;

  /**
   * Indicate whether the [**Request permission to unmute participants**](https://support.zoom.us/hc/en-us/articles/203435537-Muting-and-unmuting-participants-in-a-meeting#h_01EGK4XFWS1SJGZ71MYGKF7260) option should be enabled and locked for the group or not.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "request_permission_to_unmute" })
  requestPermissionToUnmute?: boolean;

  /**
   * Allow host and participants to share their screen or content during meetings.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "screen_sharing" })
  screenSharing?: boolean;

  /**
   * Allow users to invite participants by email only by default.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "sending_default_email_invites" })
  sendingDefaultEmailInvites?: boolean;

  /**
   * Allow participants to join a meeting directly from their browser.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "show_browser_join_link" })
  showBrowserJoinLink?: boolean;

  /**
   * Always show meeting controls during a meeting.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "show_meeting_control_toolbar" })
  showMeetingControlToolbar?: boolean;

  /**
   * Allow users to select stereo audio during a meeting.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "stereo_audio" })
  stereoAudio?: boolean;

  /**
   * Allow  HTML formatting instead of plain text for meeting invitations scheduled with the Outlook plugin.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "use_html_format_email" })
  useHtmlFormatEmail?: boolean;

  /**
   * Enable virtual background.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "virtual_background" })
  virtualBackground?: boolean;

  /**
   * Attendees cannot join a meeting until a host admits them individually from the waiting room.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "waiting_room" })
  waitingRoom?: boolean;

  /**
   * Allow participants to share a whiteboard that includes annotation tools.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "whiteboard" })
  whiteboard?: boolean;
}

/**
 * Setting to allow cloud recording access only from specific IP address ranges.
 *
 * @remarks
 *
 */
export class GroupLockedSettingsApplicationJson1RecordingIpAddressAccessControl extends SpeakeasyBase {
  /**
   * If set to `true`, the cloud recordings of this account can only be accessed by the IP addresses defined in the `ip_addresses_or_ranges` property.
   *
   * @remarks
   *
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "enable" })
  enable?: boolean;

  /**
   * IP addresses or ranges that have access to the cloud recordings. Separate multiple IP ranges with comma. Use n.n.n.n, n.n.n.n/n or n.n.n.n - n.n.n.n syntax where n is a number.
   *
   * @remarks
   *
   * Example: `46.33.24.184, 48.99.100.2/25` or `200.181.108.17 - 220.181.108.157`
   *
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "ip_addresses_or_ranges" })
  ipAddressesOrRanges?: string;
}

export class GroupLockedSettingsApplicationJson1Recording extends SpeakeasyBase {
  /**
   * Make cloud recordings accessible to account members only.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "account_user_access_recording" })
  accountUserAccessRecording?: boolean;

  /**
   * Allow Zoom to automatically delete recordings permanently after a specified number of days.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "auto_delete_cmr" })
  autoDeleteCmr?: boolean;

  /**
   * Record meetings automatically as they start.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "auto_recording" })
  autoRecording?: string;

  /**
   * Allow hosts to record and save the meeting / webinar in the cloud.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "cloud_recording" })
  cloudRecording?: boolean;

  /**
   * Allow anyone with a link to the cloud recording to download.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "cloud_recording_download" })
  cloudRecordingDownload?: boolean;

  /**
   * Allow the host to delete the recordings. If this option is disabled, the recordings cannot be deleted by the host and only admin can delete them.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "host_delete_cloud_recording" })
  hostDeleteCloudRecording?: boolean;

  /**
   * Setting to allow cloud recording access only from specific IP address ranges.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "ip_address_access_control" })
  @Type(
    () => GroupLockedSettingsApplicationJson1RecordingIpAddressAccessControl
  )
  ipAddressAccessControl?: GroupLockedSettingsApplicationJson1RecordingIpAddressAccessControl;

  /**
   * Allow hosts and participants to record the meeting to a local file.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "local_recording" })
  localRecording?: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "recording_authentication" })
  recordingAuthentication?: string;
}

export class GroupLockedSettingsApplicationJson1ScheduleMeeting extends SpeakeasyBase {
  /**
   * Determine how participants can join the audio portion of the meeting.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "audio_type" })
  audioType?: boolean;

  /**
   * If the value is set to `true`, the meeting password will be encrypted and included in the join meeting link to allow participants to join with just one click without having to enter the password.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "embed_password_in_join_link" })
  embedPasswordInJoinLink?: boolean;

  /**
   * If join before host option is enabled for a personal meeting, then enforce password requirement.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "force_pmi_jbh_password" })
  forcePmiJbhPassword?: boolean;

  /**
   * Start meetings with host video on.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "host_video" })
  hostVideo?: boolean;

  /**
   * Allow participants to join the meeting before the host arrives
   */
  @SpeakeasyMetadata()
  @Expose({ name: "join_before_host" })
  joinBeforeHost?: boolean;

  /**
   * Only authenticated users can join meetings
   */
  @SpeakeasyMetadata()
  @Expose({ name: "meeting_authentication" })
  meetingAuthentication?: boolean;

  /**
   * Automatically mute all participants when they join the meeting.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "mute_upon_entry" })
  muteUponEntry?: boolean;

  /**
   * Start meetings with participant video on.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "participant_video" })
  participantVideo?: boolean;

  /**
   * Turn the lock setting on or off for the **Enable Personal Meeting ID** setting for a group.<br><br>
   *
   * @remarks
   * `true`: Turn the **"Enable Personal Meeting ID"** setting **on** for all users in the group. Users can choose to use personal meeting ID for their meetings. <br><br>
   * `false`: Turn **off** the **"Enable Personal Meeting ID"** setting. **If this setting is [disabled](https://support.zoom.us/hc/en-us/articles/201362843-Personal-meeting-ID-PMI-and-personal-link?flash_digest=eb7ac62d8c7fb4daf285916e3e15d87537806133#h_aa0335c8-3b06-41bc-bc1f-a8b84ef17f2a), meetings that were scheduled with PMI by this group members will be invalid. Users will have to update previously scheduled PMI meetings.**<br><br>
   * For Zoom Phone only:If a user has been assigned a desk phone, **"Elevate to Zoom Meeting"** on desk phone will be disabled.
   *
   *
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "personal_meeting" })
  personalMeeting?: boolean;

  /**
   * Generate and send new passwords for newly scheduled or edited meetings.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "pstn_password_protected" })
  pstnPasswordProtected?: boolean;

  /**
   * Require password for instant meetings. If you use PMI for your instant meetings, this option will be disabled.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "require_password_for_instant_meetings" })
  requirePasswordForInstantMeetings?: boolean;

  /**
   * Require participants to enter password for PMI meetings.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "require_password_for_pmi_meetings" })
  requirePasswordForPmiMeetings?: boolean;

  /**
   * This setting applies for regular meetings that do not use PMI. If enabled, a password will be generated while a host schedules a new meeting and participants will be required to enter the password before they can join the meeting.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "require_password_for_scheduling_new_meetings" })
  requirePasswordForSchedulingNewMeetings?: boolean;

  /**
   * Receive desktop notification for upcoming meetings.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "upcoming_meeting_reminder" })
  upcomingMeetingReminder?: boolean;
}

export class GroupLockedSettingsApplicationJson1Telephony extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "telephony_regions" })
  telephonyRegions?: boolean;

  /**
   * Allow users to join the meeting using the existing 3rd party audio configuration.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "third_party_audio" })
  thirdPartyAudio?: boolean;
}

export class GroupLockedSettingsApplicationJson1 extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "email_notification" })
  @Type(() => GroupLockedSettingsApplicationJson1EmailNotification)
  emailNotification?: GroupLockedSettingsApplicationJson1EmailNotification;

  @SpeakeasyMetadata()
  @Expose({ name: "in_meeting" })
  @Type(() => GroupLockedSettingsApplicationJson1InMeeting)
  inMeeting?: GroupLockedSettingsApplicationJson1InMeeting;

  @SpeakeasyMetadata()
  @Expose({ name: "recording" })
  @Type(() => GroupLockedSettingsApplicationJson1Recording)
  recording?: GroupLockedSettingsApplicationJson1Recording;

  @SpeakeasyMetadata()
  @Expose({ name: "schedule_meeting" })
  @Type(() => GroupLockedSettingsApplicationJson1ScheduleMeeting)
  scheduleMeeting?: GroupLockedSettingsApplicationJson1ScheduleMeeting;

  @SpeakeasyMetadata()
  @Expose({ name: "telephony" })
  @Type(() => GroupLockedSettingsApplicationJson1Telephony)
  telephony?: GroupLockedSettingsApplicationJson1Telephony;
}

export class GroupLockedSettingsRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  requestBody?: any;

  /**
   * Provide the name of the field by which you would like to filter the response. For example, if you provide "host_video" as the value of this field, you will get a response similar to the following:<br>
   *
   * @remarks
   * {
   *     "schedule_meeting": {
   *         "host_video": false
   *     }
   * }
   * <br>You can provide multiple values by separating them with commas(example: "host_video,participant_video”).
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=custom_query_fields",
  })
  customQueryFields?: string;

  /**
   * The Id of the group.
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=groupId",
  })
  groupId: string;

  /**
   * Specify `meeting_security` as the value of this field if you would like to view security settings applied on a meeting hosted by the users in this group.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=option",
  })
  option?: string;
}

export class GroupLockedSettingsResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  body?: Uint8Array;

  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * **Status Code:** `204`<br>
   *
   * @remarks
   * Group's locked settings updated.
   */
  @SpeakeasyMetadata()
  groupLockedSettings204ApplicationJSONAny?: any;
}
