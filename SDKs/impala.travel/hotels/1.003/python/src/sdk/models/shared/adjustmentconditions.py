"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class AdjustmentConditionsRulesBookableDateRange:
    r"""The date range the adjustment applies to, inclusive."""
    
    end: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('end') }})  
    start: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('start') }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class AdjustmentConditionsRulesNightsRange:
    r"""The number of nights the adjustment applies to, inclusive."""
    
    max: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('max') }})  
    min: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('min') }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class AdjustmentConditionsRules:
    
    bookable_date_range: AdjustmentConditionsRulesBookableDateRange = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bookableDateRange') }})
    r"""The date range the adjustment applies to, inclusive."""  
    nights_range: AdjustmentConditionsRulesNightsRange = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('nightsRange') }})
    r"""The number of nights the adjustment applies to, inclusive."""  
    
class AdjustmentConditionsTypeEnum(str, Enum):
    r"""The type of the condition. Currently we only support conditions based on length of stay."""
    LENGTH_OF_STAY = 'LENGTH_OF_STAY'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class AdjustmentConditions:
    
    rules: AdjustmentConditionsRules = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('rules') }})  
    type: AdjustmentConditionsTypeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type') }})
    r"""The type of the condition. Currently we only support conditions based on length of stay."""  
    