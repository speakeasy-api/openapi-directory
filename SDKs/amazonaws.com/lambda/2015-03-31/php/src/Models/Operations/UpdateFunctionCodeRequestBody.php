<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Operations;


class UpdateFunctionCodeRequestBody
{
    /**
     * The instruction set architecture that the function supports. Enter a string array with one of the valid values (arm64 or x86_64). The default value is <code>x86_64</code>.
     * 
     * @var ?array<\OpenAPI\OpenAPI\Models\Shared\ArchitectureEnum> $architectures
     */
	#[\JMS\Serializer\Annotation\SerializedName('Architectures')]
    #[\JMS\Serializer\Annotation\Type('array<enum<OpenAPI\OpenAPI\Models\Shared\ArchitectureEnum>>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $architectures = null;
    
    /**
     * Set to true to validate the request parameters and access permissions without modifying the function code.
     * 
     * @var ?bool $dryRun
     */
	#[\JMS\Serializer\Annotation\SerializedName('DryRun')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $dryRun = null;
    
    /**
     * URI of a container image in the Amazon ECR registry. Do not use for a function defined with a .zip file archive.
     * 
     * @var ?string $imageUri
     */
	#[\JMS\Serializer\Annotation\SerializedName('ImageUri')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $imageUri = null;
    
    /**
     * Set to true to publish a new version of the function after updating the code. This has the same effect as calling <a>PublishVersion</a> separately.
     * 
     * @var ?bool $publish
     */
	#[\JMS\Serializer\Annotation\SerializedName('Publish')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $publish = null;
    
    /**
     * Update the function only if the revision ID matches the ID that's specified. Use this option to avoid modifying a function that has changed since you last read it.
     * 
     * @var ?string $revisionId
     */
	#[\JMS\Serializer\Annotation\SerializedName('RevisionId')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $revisionId = null;
    
    /**
     * An Amazon S3 bucket in the same Amazon Web Services Region as your function. The bucket can be in a different Amazon Web Services account. Use only with a function defined with a .zip file archive deployment package.
     * 
     * @var ?string $s3Bucket
     */
	#[\JMS\Serializer\Annotation\SerializedName('S3Bucket')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $s3Bucket = null;
    
    /**
     * The Amazon S3 key of the deployment package. Use only with a function defined with a .zip file archive deployment package.
     * 
     * @var ?string $s3Key
     */
	#[\JMS\Serializer\Annotation\SerializedName('S3Key')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $s3Key = null;
    
    /**
     * For versioned objects, the version of the deployment package object to use.
     * 
     * @var ?string $s3ObjectVersion
     */
	#[\JMS\Serializer\Annotation\SerializedName('S3ObjectVersion')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $s3ObjectVersion = null;
    
    /**
     * The base64-encoded contents of the deployment package. Amazon Web Services SDK and CLI clients handle the encoding for you. Use only with a function defined with a .zip file archive deployment package.
     * 
     * @var ?string $zipFile
     */
	#[\JMS\Serializer\Annotation\SerializedName('ZipFile')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $zipFile = null;
    
	public function __construct()
	{
		$this->architectures = null;
		$this->dryRun = null;
		$this->imageUri = null;
		$this->publish = null;
		$this->revisionId = null;
		$this->s3Bucket = null;
		$this->s3Key = null;
		$this->s3ObjectVersion = null;
		$this->zipFile = null;
	}
}
