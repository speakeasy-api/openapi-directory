// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// DescribeApplicationFleetAssociationsXAmzTargetEnum
type DescribeApplicationFleetAssociationsXAmzTargetEnum string

const (
	DescribeApplicationFleetAssociationsXAmzTargetEnumPhotonAdminProxyServiceDescribeApplicationFleetAssociations DescribeApplicationFleetAssociationsXAmzTargetEnum = "PhotonAdminProxyService.DescribeApplicationFleetAssociations"
)

func (e DescribeApplicationFleetAssociationsXAmzTargetEnum) ToPointer() *DescribeApplicationFleetAssociationsXAmzTargetEnum {
	return &e
}

func (e *DescribeApplicationFleetAssociationsXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "PhotonAdminProxyService.DescribeApplicationFleetAssociations":
		*e = DescribeApplicationFleetAssociationsXAmzTargetEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DescribeApplicationFleetAssociationsXAmzTargetEnum: %v", v)
	}
}

type DescribeApplicationFleetAssociationsRequest struct {
	DescribeApplicationFleetAssociationsRequest shared.DescribeApplicationFleetAssociationsRequest `request:"mediaType=application/json"`
	XAmzAlgorithm                               *string                                            `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256                           *string                                            `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential                              *string                                            `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate                                    *string                                            `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken                           *string                                            `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature                               *string                                            `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders                           *string                                            `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget                                  DescribeApplicationFleetAssociationsXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type DescribeApplicationFleetAssociationsResponse struct {
	ContentType string
	// Success
	DescribeApplicationFleetAssociationsResult *shared.DescribeApplicationFleetAssociationsResult
	// InvalidParameterCombinationException
	InvalidParameterCombinationException interface{}
	// OperationNotPermittedException
	OperationNotPermittedException interface{}
	StatusCode                     int
	RawResponse                    *http.Response
}
