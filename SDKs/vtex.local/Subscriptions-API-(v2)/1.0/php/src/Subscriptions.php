<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Subscriptions 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Cancel Subscriptions by SubscriptionId
     * 
     * Cancels all Subscriptions of a subscription group. This operation does not have a rollback. Once cancelled, it cannot be re-activated
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CancelSubscriptionsbySubscriptionIdRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CancelSubscriptionsbySubscriptionIdResponse
     */
	public function cancelSubscriptionsbySubscriptionId(
        \OpenAPI\OpenAPI\Models\Operations\CancelSubscriptionsbySubscriptionIdRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CancelSubscriptionsbySubscriptionIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/subscriptions/{subscriptionId}/cancel', \OpenAPI\OpenAPI\Models\Operations\CancelSubscriptionsbySubscriptionIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CancelSubscriptionsbySubscriptionIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Get Subscription List
     * 
     * Retrieves a list of Subscriptions linked to your store.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetSubscriptionListRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetSubscriptionListResponse
     */
	public function getSubscriptionList(
        \OpenAPI\OpenAPI\Models\Operations\GetSubscriptionListRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetSubscriptionListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/subscriptions/list');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetSubscriptionListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Get frequency options by subscriptionId
     * 
     * Lists frequency options for the Subscription, filtering by `subscriptionId`.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetfrequencyoptionsbysubscriptionIdRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetfrequencyoptionsbysubscriptionIdResponse
     */
	public function getfrequencyoptionsbysubscriptionId(
        \OpenAPI\OpenAPI\Models\Operations\GetfrequencyoptionsbysubscriptionIdRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetfrequencyoptionsbysubscriptionIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/subscriptions/{subscriptionId}/frequency-options', \OpenAPI\OpenAPI\Models\Operations\GetfrequencyoptionsbysubscriptionIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetfrequencyoptionsbysubscriptionIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Retrieve subscription by ID
     * 
     * Lists Subscription's details, searching by `subscriptionId`.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetsubscriptionbyIdRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetsubscriptionbyIdResponse
     */
	public function getsubscriptionbyId(
        \OpenAPI\OpenAPI\Models\Operations\GetsubscriptionbyIdRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetsubscriptionbyIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/subscriptions/{subscriptionId}', \OpenAPI\OpenAPI\Models\Operations\GetsubscriptionbyIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetsubscriptionbyIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Retrieve customer's subscriptions
     * 
     * Retrieves details of a given customer's subscriptions, searching by that customer's `customerId`.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetsubscriptionstocustomerRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetsubscriptionstocustomerResponse
     */
	public function getsubscriptionstocustomer(
        \OpenAPI\OpenAPI\Models\Operations\GetsubscriptionstocustomerRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetsubscriptionstocustomerResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/subscriptions');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetsubscriptionstocustomerRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetsubscriptionstocustomerResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Insert Addresses for Subscription
     * 
     * Inserts address's information to complement the Subscription details.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\InsertAddressesforSubscriptionRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\InsertAddressesforSubscriptionResponse
     */
	public function insertAddressesforSubscription(
        \OpenAPI\OpenAPI\Models\Operations\InsertAddressesforSubscriptionRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\InsertAddressesforSubscriptionResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/subscriptions/{subscriptionId}/addresses', \OpenAPI\OpenAPI\Models\Operations\InsertAddressesforSubscriptionRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\InsertAddressesforSubscriptionResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Update Subscriptions by SubscriptionId
     * 
     * Update, add or alter information of a given Subscription, filtering by `subscriptionId`.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateSubscriptionsbySubscriptionIdRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateSubscriptionsbySubscriptionIdResponse
     */
	public function updateSubscriptionsbySubscriptionId(
        \OpenAPI\OpenAPI\Models\Operations\UpdateSubscriptionsbySubscriptionIdRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateSubscriptionsbySubscriptionIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/subscriptions/{subscriptionId}', \OpenAPI\OpenAPI\Models\Operations\UpdateSubscriptionsbySubscriptionIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "updateSubscriptionsbySubscriptionIdRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateSubscriptionsbySubscriptionIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
}