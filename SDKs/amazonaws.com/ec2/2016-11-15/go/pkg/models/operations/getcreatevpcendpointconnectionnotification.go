// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// GETCreateVpcEndpointConnectionNotificationActionEnum
type GETCreateVpcEndpointConnectionNotificationActionEnum string

const (
	GETCreateVpcEndpointConnectionNotificationActionEnumCreateVpcEndpointConnectionNotification GETCreateVpcEndpointConnectionNotificationActionEnum = "CreateVpcEndpointConnectionNotification"
)

func (e *GETCreateVpcEndpointConnectionNotificationActionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "CreateVpcEndpointConnectionNotification":
		*e = GETCreateVpcEndpointConnectionNotificationActionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GETCreateVpcEndpointConnectionNotificationActionEnum: %s", s)
	}
}

// GETCreateVpcEndpointConnectionNotificationVersionEnum
type GETCreateVpcEndpointConnectionNotificationVersionEnum string

const (
	GETCreateVpcEndpointConnectionNotificationVersionEnumTwoThousandAndSixteen1115 GETCreateVpcEndpointConnectionNotificationVersionEnum = "2016-11-15"
)

func (e *GETCreateVpcEndpointConnectionNotificationVersionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "2016-11-15":
		*e = GETCreateVpcEndpointConnectionNotificationVersionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GETCreateVpcEndpointConnectionNotificationVersionEnum: %s", s)
	}
}

type GETCreateVpcEndpointConnectionNotificationRequest struct {
	Action GETCreateVpcEndpointConnectionNotificationActionEnum `queryParam:"style=form,explode=true,name=Action"`
	// Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">How to ensure idempotency</a>.
	ClientToken *string `queryParam:"style=form,explode=true,name=ClientToken"`
	// The endpoint events for which to receive notifications. Valid values are <code>Accept</code>, <code>Connect</code>, <code>Delete</code>, and <code>Reject</code>.
	ConnectionEvents []string `queryParam:"style=form,explode=true,name=ConnectionEvents"`
	// The ARN of the SNS topic for the notifications.
	ConnectionNotificationArn string `queryParam:"style=form,explode=true,name=ConnectionNotificationArn"`
	// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
	DryRun *bool `queryParam:"style=form,explode=true,name=DryRun"`
	// The ID of the endpoint service.
	ServiceID *string                                               `queryParam:"style=form,explode=true,name=ServiceId"`
	Version   GETCreateVpcEndpointConnectionNotificationVersionEnum `queryParam:"style=form,explode=true,name=Version"`
	// The ID of the endpoint.
	VpcEndpointID     *string `queryParam:"style=form,explode=true,name=VpcEndpointId"`
	XAmzAlgorithm     *string `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
}

type GETCreateVpcEndpointConnectionNotificationResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
