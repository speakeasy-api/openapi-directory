"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class InapplicabilityDetailsInapplicableReasonEnum(str, Enum):
    r"""Reason code this rule was not applicable."""
    INAPPLICABLE_REASON_UNSPECIFIED = 'INAPPLICABLE_REASON_UNSPECIFIED'
    CANNOT_BEAT_BUYBOX_WINNER = 'CANNOT_BEAT_BUYBOX_WINNER'
    ALREADY_WINNING_BUYBOX = 'ALREADY_WINNING_BUYBOX'
    TRIUMPHED_OVER_BY_SAME_TYPE_RULE = 'TRIUMPHED_OVER_BY_SAME_TYPE_RULE'
    TRIUMPHED_OVER_BY_OTHER_RULE_ON_OFFER = 'TRIUMPHED_OVER_BY_OTHER_RULE_ON_OFFER'
    RESTRICTIONS_NOT_MET = 'RESTRICTIONS_NOT_MET'
    UNCATEGORIZED = 'UNCATEGORIZED'
    INVALID_AUTO_PRICE_MIN = 'INVALID_AUTO_PRICE_MIN'
    INVALID_FLOOR_CONFIG = 'INVALID_FLOOR_CONFIG'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class InapplicabilityDetails:
    r"""Map of inapplicability details."""
    
    inapplicable_count: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('inapplicableCount'), 'exclude': lambda f: f is None }})
    r"""Count of this inapplicable reason code."""  
    inapplicable_reason: Optional[InapplicabilityDetailsInapplicableReasonEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('inapplicableReason'), 'exclude': lambda f: f is None }})
    r"""Reason code this rule was not applicable."""  
    