"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class CarsMarketAPI:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def fare_value(self, request: operations.FareValueRequest) -> operations.FareValueResponse:
        r"""Predict fare value of car for UK based on YMMT & miles
        Predict fare value of car for UK based on YMMT & miles
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/predict/car/uk/fmv'
        
        query_params = utils.get_query_params(operations.FareValueRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.FareValueResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.FareValue])
                res.fare_value = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out

        return res

    def get_daily_stats(self, request: operations.GetDailyStatsRequest) -> operations.GetDailyStatsResponse:
        r"""Price, Miles and Days on Market stats
        National, state and city level stats for price, miles and dom
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/stats/car'
        
        query_params = utils.get_query_params(operations.GetDailyStatsRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetDailyStatsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.DailyStats])
                res.daily_stats = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out

        return res

    def get_mds(self, request: operations.GetMDSRequest) -> operations.GetMDSResponse:
        r"""Market Days Supply
        Get the basic information on specifications for a car identified by a valid VIN
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/mds/car'
        
        query_params = utils.get_query_params(operations.GetMDSRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetMDSResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Mds])
                res.mds = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out

        return res

    def get_popular_cars(self, request: operations.GetPopularCarsRequest) -> operations.GetPopularCarsResponse:
        r"""Get make model wise top 50 popular cars on national, state, city level
        Get make model wise top 50 popular cars on national, state, city level
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/popular/cars'
        
        query_params = utils.get_query_params(operations.GetPopularCarsRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetPopularCarsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.PopularCars])
                res.popular_cars = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out

        return res

    def get_sales_count(self, request: operations.GetSalesCountRequest) -> operations.GetSalesCountResponse:
        r"""Get sales count by make, model, year, trim or taxonomy vin
        Get a sales count for city, state or national level by make, model, year, trim or taxonomy vin
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/sales/car'
        
        query_params = utils.get_query_params(operations.GetSalesCountRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetSalesCountResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Sales])
                res.sales = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out

        return res

    def predict_car_price(self, request: operations.PredictCarPriceRequest) -> operations.PredictCarPriceResponse:
        r"""Predict car price based on it's specifications
        Predict car price based on it's specifications
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/predict/car/price'
        
        query_params = utils.get_query_params(operations.PredictCarPriceRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PredictCarPriceResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.PricePrediction])
                res.price_prediction = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out

        return res

    def predict_uk_car_price(self, request: operations.PredictUkCarPriceRequest) -> operations.PredictUkCarPriceResponse:
        r"""Predict car price for UK based on it's specifications
        Predict car price for UK based on it's specifications
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/predict/car/uk/price'
        
        query_params = utils.get_query_params(operations.PredictUkCarPriceRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PredictUkCarPriceResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.PricePrediction])
                res.price_prediction = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out

        return res

    