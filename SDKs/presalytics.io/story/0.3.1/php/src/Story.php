<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Story 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Story: Get List of User Stories
     * 
     * Returns a list of stories for this user identifie via the access token presentated to the api
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\StoryGetRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\StoryGetResponse
     */
	public function storyGet(
        \OpenAPI\OpenAPI\Models\Operations\StoryGetRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\StoryGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\StoryGetRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\StoryGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->stories = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Story>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->problemDetail = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ProblemDetail', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Story: View Analytics
     * 
     * returns an html document containing session and event metrics for the story
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\StoryIdAnalyticsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\StoryIdAnalyticsResponse
     */
	public function storyIdAnalytics(
        \OpenAPI\OpenAPI\Models\Operations\StoryIdAnalyticsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\StoryIdAnalyticsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{id}/analytics', \OpenAPI\OpenAPI\Models\Operations\StoryIdAnalyticsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\StoryIdAnalyticsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $response->revealJsPresenationWithAnalyticsData = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->problemDetail = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ProblemDetail', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401) {
            if (Utils\Utils::matchContentType($contentType, 'text/html')) {
                $response->loginButton = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Story: Delete by Id
     * 
     * Remove a story and dependant data.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\StoryIdDeleteRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\StoryIdDeleteResponse
     */
	public function storyIdDelete(
        \OpenAPI\OpenAPI\Models\Operations\StoryIdDeleteRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\StoryIdDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{id}', \OpenAPI\OpenAPI\Models\Operations\StoryIdDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\StoryIdDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->problemDetail = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ProblemDetail', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Story: Delete Subdocument
     * 
     * Deletes a subdcoument of this story (e.g., .pptx, .docx, .xlsx)
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\StoryIdFileOoxmlautomationidDeleteRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\StoryIdFileOoxmlautomationidDeleteResponse
     */
	public function storyIdFileOoxmlautomationidDelete(
        \OpenAPI\OpenAPI\Models\Operations\StoryIdFileOoxmlautomationidDeleteRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\StoryIdFileOoxmlautomationidDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{id}/file/{ooxml_automation_id}', \OpenAPI\OpenAPI\Models\Operations\StoryIdFileOoxmlautomationidDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\StoryIdFileOoxmlautomationidDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->problemDetail = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ProblemDetail', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Story: Download Updated File
     * 
     * Redtreives updated story as open office xml file (e.g., .pptx, .docx, .xlsx)
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\StoryIdFileOoxmlautomationidGetRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\StoryIdFileOoxmlautomationidGetResponse
     */
	public function storyIdFileOoxmlautomationidGet(
        \OpenAPI\OpenAPI\Models\Operations\StoryIdFileOoxmlautomationidGetRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\StoryIdFileOoxmlautomationidGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{id}/file/{ooxml_automation_id}', \OpenAPI\OpenAPI\Models\Operations\StoryIdFileOoxmlautomationidGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\StoryIdFileOoxmlautomationidGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.openxmlformats-officedocument.presentationml.presentation')) {
                $response->powerpointPresentation = $httpResponse->getBody()->getContents();
            }
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet')) {
                $response->wordDocument = $httpResponse->getBody()->getContents();
            }
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.openxmlformats-officedocument.wordprocessingml.document')) {
                $response->excelSpreadsheet = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->problemDetail = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ProblemDetail', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Story: Upload a File To Existing Story
     * 
     * Upload a file to an existing story
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\StoryIdFilePostRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\StoryIdFilePostResponse
     */
	public function storyIdFilePost(
        \OpenAPI\OpenAPI\Models\Operations\StoryIdFilePostRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\StoryIdFilePostResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{id}/file', \OpenAPI\OpenAPI\Models\Operations\StoryIdFilePostRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "multipart");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\StoryIdFilePostRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\StoryIdFilePostResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->story = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Story', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 415 or $httpResponse->getStatusCode() === 422) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->problemDetail = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ProblemDetail', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Story: Get by Id
     * 
     * Returns story metadata, inlcuding json object with story outline
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\StoryIdGetRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\StoryIdGetResponse
     */
	public function storyIdGet(
        \OpenAPI\OpenAPI\Models\Operations\StoryIdGetRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\StoryIdGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{id}', \OpenAPI\OpenAPI\Models\Operations\StoryIdGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\StoryIdGetRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\StoryIdGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->story = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Story', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->problemDetail = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ProblemDetail', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Story: Get Story Outline
     * 
     * Returns Story's outline
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\StoryIdOutlineGetRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\StoryIdOutlineGetResponse
     */
	public function storyIdOutlineGet(
        \OpenAPI\OpenAPI\Models\Operations\StoryIdOutlineGetRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\StoryIdOutlineGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{id}/outline', \OpenAPI\OpenAPI\Models\Operations\StoryIdOutlineGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\StoryIdOutlineGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $response->storyIdOutlineGet200ApplicationJSONString = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 202) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->status = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Status', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->problemDetail = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ProblemDetail', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 410) {
        }

        return $response;
    }
	
    /**
     * Story: Post Story Outline
     * 
     * Update a story outline.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\StoryIdOutlinePostRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\StoryIdOutlinePostResponse
     */
	public function storyIdOutlinePost(
        \OpenAPI\OpenAPI\Models\Operations\StoryIdOutlinePostRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\StoryIdOutlinePostResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{id}/outline', \OpenAPI\OpenAPI\Models\Operations\StoryIdOutlinePostRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "string");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\StoryIdOutlinePostResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->problemDetail = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ProblemDetail', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Story: Public Link to Story Reveal.js Document
     * 
     * returns an html document containing a reveal.js epresentation of the story, if the story if set to is_public = True
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\StoryIdPublicRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\StoryIdPublicResponse
     */
	public function storyIdPublic(
        \OpenAPI\OpenAPI\Models\Operations\StoryIdPublicRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\StoryIdPublicResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{id}/public/', \OpenAPI\OpenAPI\Models\Operations\StoryIdPublicRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\StoryIdPublicResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $response->revealJsPresenation = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 302) {
        }
        else if ($httpResponse->getStatusCode() === 400) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->problemDetail = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ProblemDetail', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Story: Modify
     * 
     * Update story metadata, including story outline
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\StoryIdPutRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\StoryIdPutResponse
     */
	public function storyIdPut(
        \OpenAPI\OpenAPI\Models\Operations\StoryIdPutRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\StoryIdPutResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{id}', \OpenAPI\OpenAPI\Models\Operations\StoryIdPutRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "story", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\StoryIdPutRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\StoryIdPutResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->story = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Story', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->problemDetail = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ProblemDetail', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Story: Get Story at Reveal.js Document
     * 
     * returns an html document containing a reveal.js epresentation of the story
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\StoryIdRevealRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\StoryIdRevealResponse
     */
	public function storyIdReveal(
        \OpenAPI\OpenAPI\Models\Operations\StoryIdRevealRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\StoryIdRevealResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{id}/reveal', \OpenAPI\OpenAPI\Models\Operations\StoryIdRevealRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\StoryIdRevealResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $response->revealJsPresenation = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->problemDetail = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ProblemDetail', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401) {
            if (Utils\Utils::matchContentType($contentType, 'text/html')) {
                $response->loginButton = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Story: Get Story Status
     * 
     * Returns code indicating whether story has active running background and is healthy (e.g., the latest outline is valid)
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\StoryIdStatusGetRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\StoryIdStatusGetResponse
     */
	public function storyIdStatusGet(
        \OpenAPI\OpenAPI\Models\Operations\StoryIdStatusGetRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\StoryIdStatusGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{id}/status', \OpenAPI\OpenAPI\Models\Operations\StoryIdStatusGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\StoryIdStatusGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->status = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Status', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 204) {
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->problemDetail = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ProblemDetail', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Story: Upload
     * 
     * Upload new story to presalytics api
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\StoryPostRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\StoryPostResponse
     */
	public function storyPost(
        \OpenAPI\OpenAPI\Models\Operations\StoryPostRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\StoryPostResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "outline", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\StoryPostRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\StoryPostResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->story = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Story', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 415 or $httpResponse->getStatusCode() === 422) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->problemDetail = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ProblemDetail', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Story: Upload a File
     * 
     * Upload new story to presalytics api via an Open Office Xml file
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\StoryPostFileRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\StoryPostFileResponse
     */
	public function storyPostFile(
        \OpenAPI\OpenAPI\Models\Operations\StoryPostFileRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\StoryPostFileResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/file');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "multipart");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\StoryPostFileRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\StoryPostFileResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->story = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Story', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 415 or $httpResponse->getStatusCode() === 422) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->problemDetail = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ProblemDetail', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Story: Upload a File (base64)
     * 
     * Upload new story to presalytics api via an Open Office Xml file
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\StoryPostFileJsonRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\StoryPostFileJsonResponse
     */
	public function storyPostFileJson(
        \OpenAPI\OpenAPI\Models\Operations\StoryPostFileJsonRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\StoryPostFileJsonResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/file/json');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "fileUpload", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\StoryPostFileJsonRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\StoryPostFileJsonResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->story = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Story', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 415 or $httpResponse->getStatusCode() === 422) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->problemDetail = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ProblemDetail', 'json');
            }
        }

        return $response;
    }
}