/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

public class NullableScopedInstallation {
    /**
     * A GitHub user.
     */
    @JsonProperty("account")
    public SimpleUser account;
    public NullableScopedInstallation withAccount(SimpleUser account) {
        this.account = account;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("has_multiple_single_files")
    public Boolean hasMultipleSingleFiles;
    public NullableScopedInstallation withHasMultipleSingleFiles(Boolean hasMultipleSingleFiles) {
        this.hasMultipleSingleFiles = hasMultipleSingleFiles;
        return this;
    }
    
    /**
     * The permissions granted to the user-to-server access token.
     */
    @JsonProperty("permissions")
    public AppPermissions permissions;
    public NullableScopedInstallation withPermissions(AppPermissions permissions) {
        this.permissions = permissions;
        return this;
    }
    
    @JsonProperty("repositories_url")
    public String repositoriesUrl;
    public NullableScopedInstallation withRepositoriesUrl(String repositoriesUrl) {
        this.repositoriesUrl = repositoriesUrl;
        return this;
    }
    
    /**
     * Describe whether all repositories have been selected or there's a selection involved
     */
    @JsonProperty("repository_selection")
    public NullableScopedInstallationRepositorySelectionEnum repositorySelection;
    public NullableScopedInstallation withRepositorySelection(NullableScopedInstallationRepositorySelectionEnum repositorySelection) {
        this.repositorySelection = repositorySelection;
        return this;
    }
    
    @JsonProperty("single_file_name")
    public String singleFileName;
    public NullableScopedInstallation withSingleFileName(String singleFileName) {
        this.singleFileName = singleFileName;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("single_file_paths")
    public String[] singleFilePaths;
    public NullableScopedInstallation withSingleFilePaths(String[] singleFilePaths) {
        this.singleFilePaths = singleFilePaths;
        return this;
    }
    
}
