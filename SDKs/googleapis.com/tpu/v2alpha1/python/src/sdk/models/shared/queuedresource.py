"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import guaranteed as shared_guaranteed
from ..shared import queuedresourcestate as shared_queuedresourcestate
from ..shared import queueingpolicy as shared_queueingpolicy
from ..shared import tpu as shared_tpu
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Any, Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class QueuedResource:
    r"""A QueuedResource represents a request for resources that will be placed in a queue and fulfilled when the necessary resources are available."""
    
    best_effort: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bestEffort'), 'exclude': lambda f: f is None }})
    r"""BestEffort tier definition."""  
    guaranteed: Optional[shared_guaranteed.Guaranteed] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('guaranteed'), 'exclude': lambda f: f is None }})
    r"""Guaranteed tier definition."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""Output only. Immutable. The name of the QueuedResource."""  
    queueing_policy: Optional[shared_queueingpolicy.QueueingPolicy] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('queueingPolicy'), 'exclude': lambda f: f is None }})
    r"""Defines the policy of the QueuedRequest."""  
    state: Optional[shared_queuedresourcestate.QueuedResourceState] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('state'), 'exclude': lambda f: f is None }})
    r"""QueuedResourceState defines the details of the QueuedResource request."""  
    tpu: Optional[shared_tpu.Tpu] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tpu'), 'exclude': lambda f: f is None }})
    r"""Details of the TPU resource(s) being requested."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class QueuedResourceInput:
    r"""A QueuedResource represents a request for resources that will be placed in a queue and fulfilled when the necessary resources are available."""
    
    best_effort: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bestEffort'), 'exclude': lambda f: f is None }})
    r"""BestEffort tier definition."""  
    guaranteed: Optional[shared_guaranteed.Guaranteed] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('guaranteed'), 'exclude': lambda f: f is None }})
    r"""Guaranteed tier definition."""  
    queueing_policy: Optional[shared_queueingpolicy.QueueingPolicy] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('queueingPolicy'), 'exclude': lambda f: f is None }})
    r"""Defines the policy of the QueuedRequest."""  
    state: Optional[shared_queuedresourcestate.QueuedResourceState] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('state'), 'exclude': lambda f: f is None }})
    r"""QueuedResourceState defines the details of the QueuedResource request."""  
    tpu: Optional[shared_tpu.TpuInput] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tpu'), 'exclude': lambda f: f is None }})
    r"""Details of the TPU resource(s) being requested."""  
    