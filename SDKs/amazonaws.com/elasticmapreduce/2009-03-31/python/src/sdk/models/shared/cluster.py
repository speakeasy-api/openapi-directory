"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import application as shared_application
from ..shared import clusterstatus as shared_clusterstatus
from ..shared import configuration as shared_configuration
from ..shared import ec2instanceattributes as shared_ec2instanceattributes
from ..shared import instancecollectiontype_enum as shared_instancecollectiontype_enum
from ..shared import kerberosattributes as shared_kerberosattributes
from ..shared import placementgroupconfig as shared_placementgroupconfig
from ..shared import repoupgradeonboot_enum as shared_repoupgradeonboot_enum
from ..shared import scaledownbehavior_enum as shared_scaledownbehavior_enum
from ..shared import tag as shared_tag
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Cluster:
    r"""The detailed description of the cluster."""
    
    applications: Optional[list[shared_application.Application]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Applications'), 'exclude': lambda f: f is None }})  
    auto_scaling_role: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AutoScalingRole'), 'exclude': lambda f: f is None }})  
    auto_terminate: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AutoTerminate'), 'exclude': lambda f: f is None }})  
    cluster_arn: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ClusterArn'), 'exclude': lambda f: f is None }})  
    configurations: Optional[list[shared_configuration.Configuration]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Configurations'), 'exclude': lambda f: f is None }})  
    custom_ami_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CustomAmiId'), 'exclude': lambda f: f is None }})  
    ebs_root_volume_size: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('EbsRootVolumeSize'), 'exclude': lambda f: f is None }})  
    ec2_instance_attributes: Optional[shared_ec2instanceattributes.Ec2InstanceAttributes] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Ec2InstanceAttributes'), 'exclude': lambda f: f is None }})  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Id'), 'exclude': lambda f: f is None }})  
    instance_collection_type: Optional[shared_instancecollectiontype_enum.InstanceCollectionTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('InstanceCollectionType'), 'exclude': lambda f: f is None }})  
    kerberos_attributes: Optional[shared_kerberosattributes.KerberosAttributes] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('KerberosAttributes'), 'exclude': lambda f: f is None }})  
    log_encryption_kms_key_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('LogEncryptionKmsKeyId'), 'exclude': lambda f: f is None }})  
    log_uri: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('LogUri'), 'exclude': lambda f: f is None }})  
    master_public_dns_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('MasterPublicDnsName'), 'exclude': lambda f: f is None }})  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Name'), 'exclude': lambda f: f is None }})  
    normalized_instance_hours: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('NormalizedInstanceHours'), 'exclude': lambda f: f is None }})  
    os_release_label: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('OSReleaseLabel'), 'exclude': lambda f: f is None }})  
    outpost_arn: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('OutpostArn'), 'exclude': lambda f: f is None }})  
    placement_groups: Optional[list[shared_placementgroupconfig.PlacementGroupConfig]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PlacementGroups'), 'exclude': lambda f: f is None }})  
    release_label: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ReleaseLabel'), 'exclude': lambda f: f is None }})  
    repo_upgrade_on_boot: Optional[shared_repoupgradeonboot_enum.RepoUpgradeOnBootEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('RepoUpgradeOnBoot'), 'exclude': lambda f: f is None }})  
    requested_ami_version: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('RequestedAmiVersion'), 'exclude': lambda f: f is None }})  
    running_ami_version: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('RunningAmiVersion'), 'exclude': lambda f: f is None }})  
    scale_down_behavior: Optional[shared_scaledownbehavior_enum.ScaleDownBehaviorEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ScaleDownBehavior'), 'exclude': lambda f: f is None }})  
    security_configuration: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SecurityConfiguration'), 'exclude': lambda f: f is None }})  
    service_role: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ServiceRole'), 'exclude': lambda f: f is None }})  
    status: Optional[shared_clusterstatus.ClusterStatus] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Status'), 'exclude': lambda f: f is None }})  
    step_concurrency_level: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('StepConcurrencyLevel'), 'exclude': lambda f: f is None }})  
    tags: Optional[list[shared_tag.Tag]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Tags'), 'exclude': lambda f: f is None }})  
    termination_protected: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TerminationProtected'), 'exclude': lambda f: f is None }})  
    visible_to_all_users: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('VisibleToAllUsers'), 'exclude': lambda f: f is None }})  
    