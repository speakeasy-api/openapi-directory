/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Status200ApplicationJSONLastHandshake - Structure holding detailed information about the connection
 */
public class Status200ApplicationJSONLastHandshake {
    /**
     * Agent name
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("agent")
    public String agent;

    public Status200ApplicationJSONLastHandshake withAgent(String agent) {
        this.agent = agent;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("chain_id")
    public String chainId;

    public Status200ApplicationJSONLastHandshake withChainId(String chainId) {
        this.chainId = chainId;
        return this;
    }
    
    /**
     * Generation number
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("generation")
    public Long generation;

    public Status200ApplicationJSONLastHandshake withGeneration(Long generation) {
        this.generation = generation;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("head_id")
    public String headId;

    public Status200ApplicationJSONLastHandshake withHeadId(String headId) {
        this.headId = headId;
        return this;
    }
    
    /**
     * Head number
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("head_num")
    public Long headNum;

    public Status200ApplicationJSONLastHandshake withHeadNum(Long headNum) {
        this.headNum = headNum;
        return this;
    }
    
    /**
     * Base58 encoded EOSIO public key
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("key")
    public String key;

    public Status200ApplicationJSONLastHandshake withKey(String key) {
        this.key = key;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("last_irreversible_block_id")
    public String lastIrreversibleBlockId;

    public Status200ApplicationJSONLastHandshake withLastIrreversibleBlockId(String lastIrreversibleBlockId) {
        this.lastIrreversibleBlockId = lastIrreversibleBlockId;
        return this;
    }
    
    /**
     * Last irreversible block number
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("last_irreversible_block_num")
    public Long lastIrreversibleBlockNum;

    public Status200ApplicationJSONLastHandshake withLastIrreversibleBlockNum(Long lastIrreversibleBlockNum) {
        this.lastIrreversibleBlockNum = lastIrreversibleBlockNum;
        return this;
    }
    
    /**
     * Incremental value above a computed base
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("network_version")
    public Long networkVersion;

    public Status200ApplicationJSONLastHandshake withNetworkVersion(Long networkVersion) {
        this.networkVersion = networkVersion;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("node_id")
    public String nodeId;

    public Status200ApplicationJSONLastHandshake withNodeId(String nodeId) {
        this.nodeId = nodeId;
        return this;
    }
    
    /**
     * Operating system name
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("os")
    public String os;

    public Status200ApplicationJSONLastHandshake withOs(String os) {
        this.os = os;
        return this;
    }
    
    /**
     * IP address or URL of the peer
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("p2p_address")
    public String p2pAddress;

    public Status200ApplicationJSONLastHandshake withP2pAddress(String p2pAddress) {
        this.p2pAddress = p2pAddress;
        return this;
    }
    
    /**
     * Base58 encoded EOSIO cryptographic signature
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sig")
    public String sig;

    public Status200ApplicationJSONLastHandshake withSig(String sig) {
        this.sig = sig;
        return this;
    }
    
    /**
     * Date/time string in the format YYYY-MM-DDTHH:MM:SS.sss
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("time")
    public String time;

    public Status200ApplicationJSONLastHandshake withTime(String time) {
        this.time = time;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("token")
    public String token;

    public Status200ApplicationJSONLastHandshake withToken(String token) {
        this.token = token;
        return this;
    }
    
    public Status200ApplicationJSONLastHandshake(){}
}
