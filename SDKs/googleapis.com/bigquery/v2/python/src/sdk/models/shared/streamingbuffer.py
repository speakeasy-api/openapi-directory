"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Streamingbuffer:
    
    estimated_bytes: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('estimatedBytes'), 'exclude': lambda f: f is None }})
    r"""[Output-only] A lower-bound estimate of the number of bytes currently in the streaming buffer."""  
    estimated_rows: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('estimatedRows'), 'exclude': lambda f: f is None }})
    r"""[Output-only] A lower-bound estimate of the number of rows currently in the streaming buffer."""  
    oldest_entry_time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('oldestEntryTime'), 'exclude': lambda f: f is None }})
    r"""[Output-only] Contains the timestamp of the oldest entry in the streaming buffer, in milliseconds since the epoch, if the streaming buffer is available."""  
    