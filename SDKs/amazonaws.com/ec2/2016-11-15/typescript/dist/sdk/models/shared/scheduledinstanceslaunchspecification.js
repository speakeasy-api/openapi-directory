"use strict";
/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ScheduledInstancesLaunchSpecification = exports.ScheduledInstancesLaunchSpecificationNetworkInterfaces = exports.ScheduledInstancesLaunchSpecificationNetworkInterfacesPrivateIpAddressConfigs = exports.ScheduledInstancesLaunchSpecificationNetworkInterfacesIpv6Addresses = exports.ScheduledInstancesLaunchSpecificationBlockDeviceMappings = void 0;
var utils_1 = require("../../../internal/utils");
var scheduledinstancesebs_1 = require("./scheduledinstancesebs");
var scheduledinstancesiaminstanceprofile_1 = require("./scheduledinstancesiaminstanceprofile");
var scheduledinstancesmonitoring_1 = require("./scheduledinstancesmonitoring");
var scheduledinstancesplacement_1 = require("./scheduledinstancesplacement");
/**
 * Describes a block device mapping for a Scheduled Instance.
 */
var ScheduledInstancesLaunchSpecificationBlockDeviceMappings = /** @class */ (function (_super) {
    __extends(ScheduledInstancesLaunchSpecificationBlockDeviceMappings, _super);
    function ScheduledInstancesLaunchSpecificationBlockDeviceMappings() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], ScheduledInstancesLaunchSpecificationBlockDeviceMappings.prototype, "deviceName", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", scheduledinstancesebs_1.ScheduledInstancesEbs)
    ], ScheduledInstancesLaunchSpecificationBlockDeviceMappings.prototype, "ebs", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], ScheduledInstancesLaunchSpecificationBlockDeviceMappings.prototype, "noDevice", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], ScheduledInstancesLaunchSpecificationBlockDeviceMappings.prototype, "virtualName", void 0);
    return ScheduledInstancesLaunchSpecificationBlockDeviceMappings;
}(utils_1.SpeakeasyBase));
exports.ScheduledInstancesLaunchSpecificationBlockDeviceMappings = ScheduledInstancesLaunchSpecificationBlockDeviceMappings;
/**
 * Describes an IPv6 address.
 */
var ScheduledInstancesLaunchSpecificationNetworkInterfacesIpv6Addresses = /** @class */ (function (_super) {
    __extends(ScheduledInstancesLaunchSpecificationNetworkInterfacesIpv6Addresses, _super);
    function ScheduledInstancesLaunchSpecificationNetworkInterfacesIpv6Addresses() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], ScheduledInstancesLaunchSpecificationNetworkInterfacesIpv6Addresses.prototype, "ipv6Address", void 0);
    return ScheduledInstancesLaunchSpecificationNetworkInterfacesIpv6Addresses;
}(utils_1.SpeakeasyBase));
exports.ScheduledInstancesLaunchSpecificationNetworkInterfacesIpv6Addresses = ScheduledInstancesLaunchSpecificationNetworkInterfacesIpv6Addresses;
/**
 * Describes a private IPv4 address for a Scheduled Instance.
 */
var ScheduledInstancesLaunchSpecificationNetworkInterfacesPrivateIpAddressConfigs = /** @class */ (function (_super) {
    __extends(ScheduledInstancesLaunchSpecificationNetworkInterfacesPrivateIpAddressConfigs, _super);
    function ScheduledInstancesLaunchSpecificationNetworkInterfacesPrivateIpAddressConfigs() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", Boolean)
    ], ScheduledInstancesLaunchSpecificationNetworkInterfacesPrivateIpAddressConfigs.prototype, "primary", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], ScheduledInstancesLaunchSpecificationNetworkInterfacesPrivateIpAddressConfigs.prototype, "privateIpAddress", void 0);
    return ScheduledInstancesLaunchSpecificationNetworkInterfacesPrivateIpAddressConfigs;
}(utils_1.SpeakeasyBase));
exports.ScheduledInstancesLaunchSpecificationNetworkInterfacesPrivateIpAddressConfigs = ScheduledInstancesLaunchSpecificationNetworkInterfacesPrivateIpAddressConfigs;
/**
 * Describes a network interface for a Scheduled Instance.
 */
var ScheduledInstancesLaunchSpecificationNetworkInterfaces = /** @class */ (function (_super) {
    __extends(ScheduledInstancesLaunchSpecificationNetworkInterfaces, _super);
    function ScheduledInstancesLaunchSpecificationNetworkInterfaces() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", Boolean)
    ], ScheduledInstancesLaunchSpecificationNetworkInterfaces.prototype, "associatePublicIpAddress", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", Boolean)
    ], ScheduledInstancesLaunchSpecificationNetworkInterfaces.prototype, "deleteOnTermination", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], ScheduledInstancesLaunchSpecificationNetworkInterfaces.prototype, "description", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", Number)
    ], ScheduledInstancesLaunchSpecificationNetworkInterfaces.prototype, "deviceIndex", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", Array)
    ], ScheduledInstancesLaunchSpecificationNetworkInterfaces.prototype, "groups", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", Number)
    ], ScheduledInstancesLaunchSpecificationNetworkInterfaces.prototype, "ipv6AddressCount", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({
            elemType: ScheduledInstancesLaunchSpecificationNetworkInterfacesIpv6Addresses,
        }),
        __metadata("design:type", Array)
    ], ScheduledInstancesLaunchSpecificationNetworkInterfaces.prototype, "ipv6Addresses", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], ScheduledInstancesLaunchSpecificationNetworkInterfaces.prototype, "networkInterfaceId", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], ScheduledInstancesLaunchSpecificationNetworkInterfaces.prototype, "privateIpAddress", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({
            elemType: ScheduledInstancesLaunchSpecificationNetworkInterfacesPrivateIpAddressConfigs,
        }),
        __metadata("design:type", Array)
    ], ScheduledInstancesLaunchSpecificationNetworkInterfaces.prototype, "privateIpAddressConfigs", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", Number)
    ], ScheduledInstancesLaunchSpecificationNetworkInterfaces.prototype, "secondaryPrivateIpAddressCount", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], ScheduledInstancesLaunchSpecificationNetworkInterfaces.prototype, "subnetId", void 0);
    return ScheduledInstancesLaunchSpecificationNetworkInterfaces;
}(utils_1.SpeakeasyBase));
exports.ScheduledInstancesLaunchSpecificationNetworkInterfaces = ScheduledInstancesLaunchSpecificationNetworkInterfaces;
/**
 * <p>Describes the launch specification for a Scheduled Instance.</p> <p>If you are launching the Scheduled Instance in EC2-VPC, you must specify the ID of the subnet. You can specify the subnet using either <code>SubnetId</code> or <code>NetworkInterface</code>.</p>
 */
var ScheduledInstancesLaunchSpecification = /** @class */ (function (_super) {
    __extends(ScheduledInstancesLaunchSpecification, _super);
    function ScheduledInstancesLaunchSpecification() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({
            elemType: ScheduledInstancesLaunchSpecificationBlockDeviceMappings,
        }),
        __metadata("design:type", Array)
    ], ScheduledInstancesLaunchSpecification.prototype, "blockDeviceMappings", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", Boolean)
    ], ScheduledInstancesLaunchSpecification.prototype, "ebsOptimized", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", scheduledinstancesiaminstanceprofile_1.ScheduledInstancesIamInstanceProfile)
    ], ScheduledInstancesLaunchSpecification.prototype, "iamInstanceProfile", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], ScheduledInstancesLaunchSpecification.prototype, "imageId", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], ScheduledInstancesLaunchSpecification.prototype, "instanceType", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], ScheduledInstancesLaunchSpecification.prototype, "kernelId", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], ScheduledInstancesLaunchSpecification.prototype, "keyName", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", scheduledinstancesmonitoring_1.ScheduledInstancesMonitoring)
    ], ScheduledInstancesLaunchSpecification.prototype, "monitoring", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({
            elemType: ScheduledInstancesLaunchSpecificationNetworkInterfaces,
        }),
        __metadata("design:type", Array)
    ], ScheduledInstancesLaunchSpecification.prototype, "networkInterfaces", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", scheduledinstancesplacement_1.ScheduledInstancesPlacement)
    ], ScheduledInstancesLaunchSpecification.prototype, "placement", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], ScheduledInstancesLaunchSpecification.prototype, "ramdiskId", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", Array)
    ], ScheduledInstancesLaunchSpecification.prototype, "securityGroupIds", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], ScheduledInstancesLaunchSpecification.prototype, "subnetId", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], ScheduledInstancesLaunchSpecification.prototype, "userData", void 0);
    return ScheduledInstancesLaunchSpecification;
}(utils_1.SpeakeasyBase));
exports.ScheduledInstancesLaunchSpecification = ScheduledInstancesLaunchSpecification;
