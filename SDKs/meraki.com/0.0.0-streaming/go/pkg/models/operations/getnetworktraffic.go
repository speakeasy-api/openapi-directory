// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

type GetNetworkTrafficPathParams struct {
	NetworkID string `pathParam:"style=simple,explode=false,name=networkId"`
}

// GetNetworkTrafficDeviceTypeEnum - Filter the data by device type: 'combined', 'wireless', 'switch' or 'appliance'. Defaults to 'combined'. When using 'combined', for each rule the data will come from the device type with the most usage.
type GetNetworkTrafficDeviceTypeEnum string

const (
	GetNetworkTrafficDeviceTypeEnumAppliance GetNetworkTrafficDeviceTypeEnum = "appliance"
	GetNetworkTrafficDeviceTypeEnumCombined  GetNetworkTrafficDeviceTypeEnum = "combined"
	GetNetworkTrafficDeviceTypeEnumSwitch    GetNetworkTrafficDeviceTypeEnum = "switch"
	GetNetworkTrafficDeviceTypeEnumWireless  GetNetworkTrafficDeviceTypeEnum = "wireless"
)

func (e *GetNetworkTrafficDeviceTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "appliance":
		fallthrough
	case "combined":
		fallthrough
	case "switch":
		fallthrough
	case "wireless":
		*e = GetNetworkTrafficDeviceTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetNetworkTrafficDeviceTypeEnum: %s", s)
	}
}

type GetNetworkTrafficQueryParams struct {
	// Filter the data by device type: 'combined', 'wireless', 'switch' or 'appliance'. Defaults to 'combined'. When using 'combined', for each rule the data will come from the device type with the most usage.
	DeviceType *GetNetworkTrafficDeviceTypeEnum `queryParam:"style=form,explode=true,name=deviceType"`
	// The beginning of the timespan for the data. The maximum lookback period is 30 days from today.
	T0 *string `queryParam:"style=form,explode=true,name=t0"`
	// The timespan for which the information will be fetched. If specifying timespan, do not specify parameter t0. The value must be in seconds and be less than or equal to 30 days.
	Timespan *float32 `queryParam:"style=form,explode=true,name=timespan"`
}

type GetNetworkTrafficRequest struct {
	PathParams  GetNetworkTrafficPathParams
	QueryParams GetNetworkTrafficQueryParams
}

type GetNetworkTrafficResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Successful operation
	GetNetworkTraffic200ApplicationJSONObjects []map[string]interface{}
}
