"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Any, Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class BookingAvailabilityTourgradesPricingmatrixRequestBody:
    
    currency_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('currencyCode'), 'exclude': lambda f: f is None }})
    r"""**currency code** for the currency in which to display pricing details"""  
    month: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('month'), 'exclude': lambda f: f is None }})
    r"""**month of year** (as text) by which to filter results (must be in the future)"""  
    product_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('productCode'), 'exclude': lambda f: f is None }})
    r"""**alphanumeric identifier** of product about which to retrieve tour grade and pricing information"""  
    year: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('year'), 'exclude': lambda f: f is None }})
    r"""**year** (as text) by which to filter results (must be in the future)"""  
    

@dataclasses.dataclass
class BookingAvailabilityTourgradesPricingmatrixRequest:
    
    accept_language: str = dataclasses.field(metadata={'header': { 'field_name': 'Accept-Language', 'style': 'simple', 'explode': False }})
    r"""Specifies the language into which the natural-language fields in the response from this service will be translated (see [Accept-Language header](#section/Appendices/Accept-Language-header) for available langage codes)"""  
    request_body: Optional[BookingAvailabilityTourgradesPricingmatrixRequestBody] = dataclasses.field(default=None, metadata={'request': { 'media_type': 'application/json' }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class BookingAvailabilityTourgradesPricingmatrix200ApplicationJSONDataDatesTourGradesPricingMatrixAgeBandPricesPrices:
    
    currency_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('currencyCode'), 'exclude': lambda f: f is None }})
    r"""**currency code** of the currency in which pricing details are displayed"""  
    merchant_net_price: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('merchantNetPrice'), 'exclude': lambda f: f is None }})
    r"""**numeric merchant net rate** for *this* age band
    - For more information, see: [Merchant pricing](#section/Merchant-APIs/Merchant-pricing)
    """  
    merchant_net_price_formatted: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('merchantNetPriceFormatted'), 'exclude': lambda f: f is None }})
    r"""**currency-formatted merchant net rate** for *this* age band
    - For more information, see: [Merchant pricing](#section/Merchant-APIs/Merchant-pricing)
    """  
    min_no_of_travellers_required_for_price: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('minNoOfTravellersRequiredForPrice'), 'exclude': lambda f: f is None }})  
    price: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('price'), 'exclude': lambda f: f is None }})
    r"""**numeric suggested retail price** for *this* age band
    - For more information, see: [Merchant pricing](#section/Merchant-APIs/Merchant-pricing)
    """  
    price_formatted: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('priceFormatted'), 'exclude': lambda f: f is None }})
    r"""**currency-formatted suggested retail price** for *this* age band
    - For more information, see: [Merchant pricing](#section/Merchant-APIs/Merchant-pricing)
    """  
    sort_order: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sortOrder'), 'exclude': lambda f: f is None }})
    r"""**sort order** *this* pricing detail object"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class BookingAvailabilityTourgradesPricingmatrix200ApplicationJSONDataDatesTourGradesPricingMatrixAgeBandPrices:
    
    band_id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bandId'), 'exclude': lambda f: f is None }})
    r"""**unique numeric identifier** for the age band
    - See: [Working with age bands](#section/Appendices/Working-with-age-bands)
    """  
    maximum_count_required: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('maximumCountRequired'), 'exclude': lambda f: f is None }})
    r"""**maximum number** of participants allowed for *this* tour grade"""  
    minimum_count_required: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('minimumCountRequired'), 'exclude': lambda f: f is None }})
    r"""**minimum number** of participants required for *this* tour grade"""  
    prices: Optional[list[BookingAvailabilityTourgradesPricingmatrix200ApplicationJSONDataDatesTourGradesPricingMatrixAgeBandPricesPrices]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('prices'), 'exclude': lambda f: f is None }})
    r"""**array** of pricing detail objects"""  
    sort_order: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sortOrder'), 'exclude': lambda f: f is None }})
    r"""**sort order** for *this* tour grade"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class BookingAvailabilityTourgradesPricingmatrix200ApplicationJSONDataDatesTourGradesPricingMatrix:
    
    age_band_prices: Optional[list[BookingAvailabilityTourgradesPricingmatrix200ApplicationJSONDataDatesTourGradesPricingMatrixAgeBandPrices]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ageBandPrices'), 'exclude': lambda f: f is None }})
    r"""**array** of pricing objects by age band"""  
    booking_date: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bookingDate'), 'exclude': lambda f: f is None }})
    r"""**date** on which *this* product operates"""  
    pricing_unit: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('pricingUnit'), 'exclude': lambda f: f is None }})
    r"""**natural-language description** of the pricing mode
    - see [Understanding the pricingUnit field](#section/Using-the-API/Understanding-the-pricingUnit-field) for more information
    """  
    sort_order: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sortOrder'), 'exclude': lambda f: f is None }})
    r"""**sort order** for *this* pricing object"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class BookingAvailabilityTourgradesPricingmatrix200ApplicationJSONDataDatesTourGrades:
    
    grade_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('gradeCode'), 'exclude': lambda f: f is None }})
    r"""**alphanumeric identifier** of the tour grade"""  
    grade_title: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('gradeTitle'), 'exclude': lambda f: f is None }})
    r"""**title of tour grade**"""  
    pricing_matrix: Optional[list[BookingAvailabilityTourgradesPricingmatrix200ApplicationJSONDataDatesTourGradesPricingMatrix]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('pricingMatrix'), 'exclude': lambda f: f is None }})
    r"""**array of pricing objects** for *this* tour grade"""  
    sort_order: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sortOrder'), 'exclude': lambda f: f is None }})
    r"""**sort order** for *this* tour grade pricing object"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class BookingAvailabilityTourgradesPricingmatrix200ApplicationJSONDataDates:
    
    booking_date: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bookingDate'), 'exclude': lambda f: f is None }})
    r"""**date** on which *this* product operates"""  
    call_for_last_min_availability: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('callForLastMinAvailability'), 'exclude': lambda f: f is None }})
    r"""ignore (Viator only)"""  
    sort_order: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sortOrder'), 'exclude': lambda f: f is None }})
    r"""**sort order** for *this* tour grade pricing object"""  
    tour_grades: Optional[list[BookingAvailabilityTourgradesPricingmatrix200ApplicationJSONDataDatesTourGrades]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tourGrades'), 'exclude': lambda f: f is None }})
    r"""**array** of tour grade pricing information objects"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class BookingAvailabilityTourgradesPricingmatrix200ApplicationJSONData:
    
    booking_month: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bookingMonth'), 'exclude': lambda f: f is None }})
    r"""**month of year** (as text) by which to filter results"""  
    dates: Optional[list[BookingAvailabilityTourgradesPricingmatrix200ApplicationJSONDataDates]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dates'), 'exclude': lambda f: f is None }})
    r"""**array of tour grade pricing objects** each detailing availability on a single day"""  
    pricing_unit: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('pricingUnit'), 'exclude': lambda f: f is None }})
    r"""**natural-language label** for the pricing terms of this tour grade
    - see [Understanding the pricingUnit field](#section/Using-the-API/Understanding-the-pricingUnit-field) for more information
    """  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class BookingAvailabilityTourgradesPricingmatrix200ApplicationJSON:
    r"""Success"""
    
    data: Optional[BookingAvailabilityTourgradesPricingmatrix200ApplicationJSONData] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('data'), 'exclude': lambda f: f is None }})  
    date_stamp: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dateStamp'), 'exclude': lambda f: f is None }})
    r"""**timestamp** of *this* response"""  
    error_codes: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('errorCodes'), 'exclude': lambda f: f is None }})
    r"""**array** of error codes pertaining to *this* error
    - See: [Viator API error codes](#section/Appendices/Viator-API-error-codes) for a list of possible error codes
    """  
    error_message: Optional[list[Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('errorMessage'), 'exclude': lambda f: f is None }})
    r"""**array** of error message strings"""  
    error_message_text: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('errorMessageText'), 'exclude': lambda f: f is None }})
    r"""**array** of error message strings in plain text"""  
    error_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('errorName'), 'exclude': lambda f: f is None }})
    r"""**name** of *this* type of error"""  
    error_reference: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('errorReference'), 'exclude': lambda f: f is None }})
    r"""**reference number** of *this* error"""  
    error_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('errorType'), 'exclude': lambda f: f is None }})
    r"""**code** specifying the type of error"""  
    extra_info: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('extraInfo'), 'exclude': lambda f: f is None }})
    r"""ignore (Viator only)"""  
    extra_object: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('extraObject'), 'exclude': lambda f: f is None }})
    r"""ignore (Viator only)"""  
    success: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('success'), 'exclude': lambda f: f is None }})
    r"""**boolean indicator** of *this* request's outcome
    - `true`: the request was successful with no errors
    - `false`: an error was encountered
    """  
    total_count: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('totalCount'), 'exclude': lambda f: f is None }})
    r"""**number** of results available for *this* service"""  
    vmid: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('vmid'), 'exclude': lambda f: f is None }})
    r"""**unique numeric id** of the server that processed *this* request"""  
    

@dataclasses.dataclass
class BookingAvailabilityTourgradesPricingmatrixResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    booking_availability_tourgrades_pricingmatrix_200_application_json_object: Optional[BookingAvailabilityTourgradesPricingmatrix200ApplicationJSON] = dataclasses.field(default=None)
    r"""Success"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    