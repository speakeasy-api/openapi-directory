/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

export class RenewOrganizationLicensesSeatsRequestBody extends SpeakeasyBase {
  /**
   * The ID of the SM license to renew. This license must already be assigned to an SM network
   */
  @SpeakeasyMetadata()
  @Expose({ name: "licenseIdToRenew" })
  licenseIdToRenew: string;

  /**
   * The SM license to use to renew the seats on 'licenseIdToRenew'. This license must have at least as many seats available as there are seats on 'licenseIdToRenew'
   */
  @SpeakeasyMetadata()
  @Expose({ name: "unusedLicenseId" })
  unusedLicenseId: string;
}

export class RenewOrganizationLicensesSeatsRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  requestBody: RenewOrganizationLicensesSeatsRequestBody;

  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=organizationId",
  })
  organizationId: string;
}

export class RenewOrganizationLicensesSeats200ApplicationJSONResultingLicensesPermanentlyQueuedLicenses extends SpeakeasyBase {
  /**
   * The duration of the individual license
   */
  @SpeakeasyMetadata()
  @Expose({ name: "durationInDays" })
  durationInDays?: number;

  /**
   * Permanently queued license ID
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id?: string;

  /**
   * License key
   */
  @SpeakeasyMetadata()
  @Expose({ name: "licenseKey" })
  licenseKey?: string;

  /**
   * License type
   */
  @SpeakeasyMetadata()
  @Expose({ name: "licenseType" })
  licenseType?: string;

  /**
   * Order number
   */
  @SpeakeasyMetadata()
  @Expose({ name: "orderNumber" })
  orderNumber?: string;
}

/**
 * The state of the license. All queued licenses have a status of `recentlyQueued`.
 */
export enum RenewOrganizationLicensesSeats200ApplicationJSONResultingLicensesStateEnum {
  Active = "active",
  Expired = "expired",
  Expiring = "expiring",
  RecentlyQueued = "recentlyQueued",
  Unused = "unused",
  UnusedActive = "unusedActive",
}

export class RenewOrganizationLicensesSeats200ApplicationJSONResultingLicenses extends SpeakeasyBase {
  /**
   * The date the license started burning
   */
  @SpeakeasyMetadata()
  @Expose({ name: "activationDate" })
  activationDate?: string;

  /**
   * The date the license was claimed into the organization
   */
  @SpeakeasyMetadata()
  @Expose({ name: "claimDate" })
  claimDate?: string;

  /**
   * Serial number of the device the license is assigned to
   */
  @SpeakeasyMetadata()
  @Expose({ name: "deviceSerial" })
  deviceSerial?: string;

  /**
   * The duration of the individual license
   */
  @SpeakeasyMetadata()
  @Expose({ name: "durationInDays" })
  durationInDays?: number;

  /**
   * The date the license will expire
   */
  @SpeakeasyMetadata()
  @Expose({ name: "expirationDate" })
  expirationDate?: string;

  /**
   * The id of the head license this license is queued behind. If there is no head license, it returns nil.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "headLicenseId" })
  headLicenseId?: string;

  /**
   * License ID
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id?: string;

  /**
   * License key
   */
  @SpeakeasyMetadata()
  @Expose({ name: "licenseKey" })
  licenseKey?: string;

  /**
   * License type
   */
  @SpeakeasyMetadata()
  @Expose({ name: "licenseType" })
  licenseType?: string;

  /**
   * ID of the network the license is assigned to
   */
  @SpeakeasyMetadata()
  @Expose({ name: "networkId" })
  networkId?: string;

  /**
   * Order number
   */
  @SpeakeasyMetadata()
  @Expose({ name: "orderNumber" })
  orderNumber?: string;

  /**
   * DEPRECATED List of permanently queued licenses attached to the license. Instead, use /organizations/{organizationId}/licenses?deviceSerial= to retrieved queued licenses for a given device.
   */
  @SpeakeasyMetadata({
    elemType:
      RenewOrganizationLicensesSeats200ApplicationJSONResultingLicensesPermanentlyQueuedLicenses,
  })
  @Expose({ name: "permanentlyQueuedLicenses" })
  @Type(
    () =>
      RenewOrganizationLicensesSeats200ApplicationJSONResultingLicensesPermanentlyQueuedLicenses
  )
  permanentlyQueuedLicenses?: RenewOrganizationLicensesSeats200ApplicationJSONResultingLicensesPermanentlyQueuedLicenses[];

  /**
   * The number of seats of the license. Only applicable to SM licenses.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "seatCount" })
  seatCount?: number;

  /**
   * The state of the license. All queued licenses have a status of `recentlyQueued`.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "state" })
  state?: RenewOrganizationLicensesSeats200ApplicationJSONResultingLicensesStateEnum;

  /**
   * The duration of the license plus all permanently queued licenses associated with it
   */
  @SpeakeasyMetadata()
  @Expose({ name: "totalDurationInDays" })
  totalDurationInDays?: number;
}

/**
 * Successful operation
 */
export class RenewOrganizationLicensesSeats200ApplicationJSON extends SpeakeasyBase {
  /**
   * Resulting licenses from the move
   */
  @SpeakeasyMetadata({
    elemType: RenewOrganizationLicensesSeats200ApplicationJSONResultingLicenses,
  })
  @Expose({ name: "resultingLicenses" })
  @Type(() => RenewOrganizationLicensesSeats200ApplicationJSONResultingLicenses)
  resultingLicenses?: RenewOrganizationLicensesSeats200ApplicationJSONResultingLicenses[];
}

export class RenewOrganizationLicensesSeatsResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * Successful operation
   */
  @SpeakeasyMetadata()
  renewOrganizationLicensesSeats200ApplicationJSONObject?: RenewOrganizationLicensesSeats200ApplicationJSON;
}
