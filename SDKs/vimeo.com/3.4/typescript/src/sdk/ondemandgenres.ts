/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class OnDemandGenres {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Add a genre to an On Demand page
   */
  addVodGenre(
    req: operations.AddVodGenreRequest,
    security: operations.AddVodGenreSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.AddVodGenreResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AddVodGenreRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/ondemand/pages/{ondemand_id}/genres/{genre_id}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.AddVodGenreSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "put",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AddVodGenreResponse =
        new operations.AddVodGenreResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 201:
          if (
            utils.matchContentType(
              contentType,
              `application/vnd.vimeo.ondemand.genre+json`
            )
          ) {
            res.onDemandGenre = utils.objectToClass(
              httpRes?.data,
              shared.OnDemandGenre
            );
          }
          break;
        case [400, 403, 404].includes(httpRes?.status):
          if (
            utils.matchContentType(
              contentType,
              `application/vnd.vimeo.ondemand.genre+json`
            )
          ) {
            res.legacyError = utils.objectToClass(
              httpRes?.data,
              shared.LegacyError
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Remove a genre from an On Demand page
   */
  deleteVodGenre(
    req: operations.DeleteVodGenreRequest,
    security: operations.DeleteVodGenreSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DeleteVodGenreResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DeleteVodGenreRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/ondemand/pages/{ondemand_id}/genres/{genre_id}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.DeleteVodGenreSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DeleteVodGenreResponse =
        new operations.DeleteVodGenreResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 204:
          break;
        case [400, 403, 404].includes(httpRes?.status):
          if (
            utils.matchContentType(
              contentType,
              `application/vnd.vimeo.ondemand.genre+json`
            )
          ) {
            res.legacyError = utils.objectToClass(
              httpRes?.data,
              shared.LegacyError
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get a specific On Demand page in a genre
   *
   * @remarks
   * Check whether a genre contains an On Demand page.
   */
  getGenreVod(
    req: operations.GetGenreVodRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetGenreVodResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetGenreVodRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/ondemand/genres/{genre_id}/pages/{ondemand_id}",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetGenreVodResponse =
        new operations.GetGenreVodResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (
            utils.matchContentType(
              contentType,
              `application/vnd.vimeo.ondemand.page+json`
            )
          ) {
            res.onDemandPage = utils.objectToClass(
              httpRes?.data,
              shared.OnDemandPage
            );
          }
          break;
        case httpRes?.status == 404:
          if (
            utils.matchContentType(
              contentType,
              `application/vnd.vimeo.ondemand.page+json`
            )
          ) {
            res.legacyError = utils.objectToClass(
              httpRes?.data,
              shared.LegacyError
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get all the On Demand pages in a genre
   */
  getGenreVods(
    req: operations.GetGenreVodsRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetGenreVodsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetGenreVodsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/ondemand/genres/{genre_id}/pages",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetGenreVodsResponse =
        new operations.GetGenreVodsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (
            utils.matchContentType(
              contentType,
              `application/vnd.vimeo.ondemand.page+json`
            )
          ) {
            res.onDemandPages = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.onDemandPages = utils.objectToClass(
              httpRes?.data,
              shared.OnDemandPage,
              resFieldDepth
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get a specific On Demand genre
   */
  getVodGenre(
    req: operations.GetVodGenreRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetVodGenreResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetVodGenreRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/ondemand/genres/{genre_id}",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetVodGenreResponse =
        new operations.GetVodGenreResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (
            utils.matchContentType(
              contentType,
              `application/vnd.vimeo.ondemand.genre+json`
            )
          ) {
            res.onDemandGenre = utils.objectToClass(
              httpRes?.data,
              shared.OnDemandGenre
            );
          }
          break;
        case httpRes?.status == 404:
          if (
            utils.matchContentType(
              contentType,
              `application/vnd.vimeo.ondemand.genre+json`
            )
          ) {
            res.legacyError = utils.objectToClass(
              httpRes?.data,
              shared.LegacyError
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Check whether an On Demand page belongs to a genre
   */
  getVodGenreByOndemandId(
    req: operations.GetVodGenreByOndemandIdRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetVodGenreByOndemandIdResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetVodGenreByOndemandIdRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/ondemand/pages/{ondemand_id}/genres/{genre_id}",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetVodGenreByOndemandIdResponse =
        new operations.GetVodGenreByOndemandIdResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (
            utils.matchContentType(
              contentType,
              `application/vnd.vimeo.ondemand.genre+json`
            )
          ) {
            res.onDemandGenre = utils.objectToClass(
              httpRes?.data,
              shared.OnDemandGenre
            );
          }
          break;
        case httpRes?.status == 404:
          if (
            utils.matchContentType(
              contentType,
              `application/vnd.vimeo.ondemand.genre+json`
            )
          ) {
            res.legacyError = utils.objectToClass(
              httpRes?.data,
              shared.LegacyError
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get all On Demand genres
   */
  getVodGenres(
    config?: AxiosRequestConfig
  ): Promise<operations.GetVodGenresResponse> {
    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/ondemand/genres";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetVodGenresResponse =
        new operations.GetVodGenresResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (
            utils.matchContentType(
              contentType,
              `application/vnd.vimeo.ondemand.genre+json`
            )
          ) {
            res.onDemandGenres = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.onDemandGenres = utils.objectToClass(
              httpRes?.data,
              shared.OnDemandGenre,
              resFieldDepth
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get all the genres of an On Demand page
   */
  getVodGenresByOndemandId(
    req: operations.GetVodGenresByOndemandIdRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetVodGenresByOndemandIdResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetVodGenresByOndemandIdRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/ondemand/pages/{ondemand_id}/genres",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetVodGenresByOndemandIdResponse =
        new operations.GetVodGenresByOndemandIdResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (
            utils.matchContentType(
              contentType,
              `application/vnd.vimeo.ondemand.genre+json`
            )
          ) {
            res.onDemandGenres = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.onDemandGenres = utils.objectToClass(
              httpRes?.data,
              shared.OnDemandGenre,
              resFieldDepth
            );
          }
          break;
        case httpRes?.status == 404:
          if (
            utils.matchContentType(
              contentType,
              `application/vnd.vimeo.ondemand.genre+json`
            )
          ) {
            res.legacyError = utils.objectToClass(
              httpRes?.data,
              shared.LegacyError
            );
          }
          break;
      }

      return res;
    });
  }
}
