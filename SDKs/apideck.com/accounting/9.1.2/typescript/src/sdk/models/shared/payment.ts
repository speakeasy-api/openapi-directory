/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { CurrencyEnum } from "./currencyenum";
import { LinkedCustomer, LinkedCustomerInput } from "./linkedcustomer";
import {
  LinkedLedgerAccount,
  LinkedLedgerAccountInput,
} from "./linkedledgeraccount";
import { LinkedSupplier, LinkedSupplierInput } from "./linkedsupplier";
import { Expose, Transform, Type } from "class-transformer";

/**
 * Type of entity this payment should be attributed to.
 */
export enum PaymentAllocationsAllocationTypeEnum {
  Invoice = "invoice",
  Order = "order",
  Expense = "expense",
  CreditMemo = "credit_memo",
  OverPayment = "over_payment",
  PrePayment = "pre_payment",
}

export class PaymentAllocationsInput extends SpeakeasyBase {
  /**
   * Amount of payment that should be attributed to this allocation. If null, the total_amount will be used.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "amount" })
  amount?: number;

  /**
   * Unique identifier of entity this payment should be attributed to.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id?: string;

  /**
   * Type of entity this payment should be attributed to.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "type" })
  type?: PaymentAllocationsAllocationTypeEnum;
}

/**
 * Status of payment
 */
export enum PaymentPaymentStatusEnum {
  Authorised = "authorised",
  Paid = "paid",
  Voided = "voided",
  Deleted = "deleted",
}

/**
 * Type of payment
 */
export enum PaymentPaymentTypeEnum {
  AccountsReceivable = "accounts_receivable",
  AccountsPayable = "accounts_payable",
  AccountsReceivableCredit = "accounts_receivable_credit",
  AccountsPayableCredit = "accounts_payable_credit",
  AccountsReceivableOverpayment = "accounts_receivable_overpayment",
  AccountsPayableOverpayment = "accounts_payable_overpayment",
  AccountsReceivablePrepayment = "accounts_receivable_prepayment",
  AccountsPayablePrepayment = "accounts_payable_prepayment",
}

export class PaymentInput extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "account" })
  @Type(() => LinkedLedgerAccountInput)
  account?: LinkedLedgerAccountInput;

  /**
   * Unique identifier for the account to allocate payment to.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "accounts_receivable_account_id" })
  accountsReceivableAccountId?: string;

  /**
   * Type of accounts receivable account.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "accounts_receivable_account_type" })
  accountsReceivableAccountType?: string;

  @SpeakeasyMetadata({ elemType: PaymentAllocationsInput })
  @Expose({ name: "allocations" })
  @Type(() => PaymentAllocationsInput)
  allocations?: PaymentAllocationsInput[];

  /**
   * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
   */
  @SpeakeasyMetadata()
  @Expose({ name: "currency" })
  currency?: CurrencyEnum;

  /**
   * Currency Exchange Rate at the time entity was recorded/generated.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "currency_rate" })
  currencyRate?: number;

  /**
   * The customer this entity is linked to.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "customer" })
  @Type(() => LinkedCustomerInput)
  customer?: LinkedCustomerInput;

  /**
   * Payment id to be displayed.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "display_id" })
  displayId?: string;

  /**
   * Optional note to be associated with the payment.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "note" })
  note?: string;

  /**
   * Payment method
   */
  @SpeakeasyMetadata()
  @Expose({ name: "payment_method" })
  paymentMethod?: string;

  /**
   * Optional reference message returned by payment method on processing
   */
  @SpeakeasyMetadata()
  @Expose({ name: "payment_method_reference" })
  paymentMethodReference?: string;

  /**
   * Payment has been reconciled
   */
  @SpeakeasyMetadata()
  @Expose({ name: "reconciled" })
  reconciled?: boolean;

  /**
   * Optional payment reference message ie: Debit remittance detail.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "reference" })
  reference?: string;

  /**
   * A binary value used to detect updates to a object and prevent data conflicts. It is incremented each time an update is made to the object.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "row_version" })
  rowVersion?: string;

  /**
   * Status of payment
   */
  @SpeakeasyMetadata()
  @Expose({ name: "status" })
  status?: PaymentPaymentStatusEnum;

  /**
   * The supplier this entity is linked to.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "supplier" })
  @Type(() => LinkedSupplierInput)
  supplier?: LinkedSupplierInput;

  /**
   * Amount of payment
   */
  @SpeakeasyMetadata()
  @Expose({ name: "total_amount" })
  totalAmount: number;

  /**
   * Date transaction was entered - YYYY:MM::DDThh:mm:ss.sTZD
   */
  @SpeakeasyMetadata()
  @Expose({ name: "transaction_date" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  transactionDate: Date;

  /**
   * Type of payment
   */
  @SpeakeasyMetadata()
  @Expose({ name: "type" })
  type?: PaymentPaymentTypeEnum;
}

export class PaymentAllocations extends SpeakeasyBase {
  /**
   * Amount of payment that should be attributed to this allocation. If null, the total_amount will be used.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "amount" })
  amount?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "code" })
  code?: string;

  /**
   * Unique identifier of entity this payment should be attributed to.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id?: string;

  /**
   * Type of entity this payment should be attributed to.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "type" })
  type?: PaymentAllocationsAllocationTypeEnum;
}

export class Payment extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "account" })
  @Type(() => LinkedLedgerAccount)
  account?: LinkedLedgerAccount;

  /**
   * Unique identifier for the account to allocate payment to.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "accounts_receivable_account_id" })
  accountsReceivableAccountId?: string;

  /**
   * Type of accounts receivable account.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "accounts_receivable_account_type" })
  accountsReceivableAccountType?: string;

  @SpeakeasyMetadata({ elemType: PaymentAllocations })
  @Expose({ name: "allocations" })
  @Type(() => PaymentAllocations)
  allocations?: PaymentAllocations[];

  /**
   * The date and time when the object was created.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "created_at" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  createdAt?: Date;

  /**
   * The user who created the object.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "created_by" })
  createdBy?: string;

  /**
   * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
   */
  @SpeakeasyMetadata()
  @Expose({ name: "currency" })
  currency?: CurrencyEnum;

  /**
   * Currency Exchange Rate at the time entity was recorded/generated.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "currency_rate" })
  currencyRate?: number;

  /**
   * The customer this entity is linked to.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "customer" })
  @Type(() => LinkedCustomer)
  customer?: LinkedCustomer;

  /**
   * Payment id to be displayed.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "display_id" })
  displayId?: string;

  /**
   * The third-party API ID of original entity
   */
  @SpeakeasyMetadata()
  @Expose({ name: "downstream_id" })
  downstreamId?: string;

  /**
   * Unique identifier representing the entity
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id: string;

  /**
   * Optional note to be associated with the payment.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "note" })
  note?: string;

  /**
   * Payment method
   */
  @SpeakeasyMetadata()
  @Expose({ name: "payment_method" })
  paymentMethod?: string;

  /**
   * Optional reference message returned by payment method on processing
   */
  @SpeakeasyMetadata()
  @Expose({ name: "payment_method_reference" })
  paymentMethodReference?: string;

  /**
   * Payment has been reconciled
   */
  @SpeakeasyMetadata()
  @Expose({ name: "reconciled" })
  reconciled?: boolean;

  /**
   * Optional payment reference message ie: Debit remittance detail.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "reference" })
  reference?: string;

  /**
   * A binary value used to detect updates to a object and prevent data conflicts. It is incremented each time an update is made to the object.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "row_version" })
  rowVersion?: string;

  /**
   * Status of payment
   */
  @SpeakeasyMetadata()
  @Expose({ name: "status" })
  status?: PaymentPaymentStatusEnum;

  /**
   * The supplier this entity is linked to.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "supplier" })
  @Type(() => LinkedSupplier)
  supplier?: LinkedSupplier;

  /**
   * Amount of payment
   */
  @SpeakeasyMetadata()
  @Expose({ name: "total_amount" })
  totalAmount: number;

  /**
   * Date transaction was entered - YYYY:MM::DDThh:mm:ss.sTZD
   */
  @SpeakeasyMetadata()
  @Expose({ name: "transaction_date" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  transactionDate: Date;

  /**
   * Type of payment
   */
  @SpeakeasyMetadata()
  @Expose({ name: "type" })
  type?: PaymentPaymentTypeEnum;

  /**
   * The date and time when the object was last updated.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "updated_at" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  updatedAt?: Date;

  /**
   * The user who last updated the object.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "updated_by" })
  updatedBy?: string;
}
