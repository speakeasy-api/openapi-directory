// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"net/http"
	"openapi/pkg/models/shared"
)

type ReposCreateForAuthenticatedUserRequestBody struct {
	// Whether to allow merge commits for pull requests.
	AllowMergeCommit *bool `json:"allow_merge_commit,omitempty"`
	// Whether to allow rebase merges for pull requests.
	AllowRebaseMerge *bool `json:"allow_rebase_merge,omitempty"`
	// Whether to allow squash merges for pull requests.
	AllowSquashMerge *bool `json:"allow_squash_merge,omitempty"`
	// Whether the repository is initialized with a minimal README.
	AutoInit *bool `json:"auto_init,omitempty"`
	// Whether to delete head branches when pull requests are merged
	DeleteBranchOnMerge *bool `json:"delete_branch_on_merge,omitempty"`
	// A short description of the repository.
	Description *string `json:"description,omitempty"`
	// The desired language or platform to apply to the .gitignore.
	GitignoreTemplate *string `json:"gitignore_template,omitempty"`
	// Whether downloads are enabled.
	HasDownloads *bool `json:"has_downloads,omitempty"`
	// Whether issues are enabled.
	HasIssues *bool `json:"has_issues,omitempty"`
	// Whether projects are enabled.
	HasProjects *bool `json:"has_projects,omitempty"`
	// Whether the wiki is enabled.
	HasWiki *bool `json:"has_wiki,omitempty"`
	// A URL with more information about the repository.
	Homepage *string `json:"homepage,omitempty"`
	// Whether this repository acts as a template that can be used to generate new repositories.
	IsTemplate *bool `json:"is_template,omitempty"`
	// The license keyword of the open source license for this repository.
	LicenseTemplate *string `json:"license_template,omitempty"`
	// The name of the repository.
	Name string `json:"name"`
	// Whether the repository is private.
	Private *bool `json:"private,omitempty"`
	// The id of the team that will be granted access to this repository. This is only valid when creating a repository in an organization.
	TeamID *int64 `json:"team_id,omitempty"`
}

type ReposCreateForAuthenticatedUserRequest struct {
	Request ReposCreateForAuthenticatedUserRequestBody `request:"mediaType=application/json"`
}

type ReposCreateForAuthenticatedUserResponse struct {
	ContentType string
	Headers     map[string][]string
	StatusCode  int
	RawResponse *http.Response
	// Bad Request
	BasicError *shared.BasicError
	// Response
	Repository *shared.Repository
	// Bad Request
	ScimError *shared.ScimError
	// Validation failed
	ValidationError *shared.ValidationError
}
