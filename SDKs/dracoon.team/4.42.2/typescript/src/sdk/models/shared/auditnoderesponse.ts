/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { AuditUserPermission } from "./audituserpermission";
import { UserInfo } from "./userinfo";
import { Expose, Transform, Type } from "class-transformer";

/**
 * Audit node report
 */
export class AuditNodeResponse extends SpeakeasyBase {
  /**
   * List of assigned users with permissions
   */
  @SpeakeasyMetadata({ elemType: AuditUserPermission })
  @Expose({ name: "auditUserPermissionList" })
  @Type(() => AuditUserPermission)
  auditUserPermissionList: AuditUserPermission[];

  /**
   * Number of direct children
   *
   * @remarks
   *
   * (no recursion; for rooms only)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "nodeCntChildren" })
  nodeCntChildren: number;

  /**
   * Creation date
   */
  @SpeakeasyMetadata()
  @Expose({ name: "nodeCreatedAt" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  nodeCreatedAt?: Date;

  /**
   * User information
   */
  @SpeakeasyMetadata()
  @Expose({ name: "nodeCreatedBy" })
  @Type(() => UserInfo)
  nodeCreatedBy?: UserInfo;

  /**
   * Is activities log active (for rooms only)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "nodeHasActivitiesLog" })
  nodeHasActivitiesLog?: boolean;

  /**
   * &#128679; Deprecated since v4.10.0
   *
   * @remarks
   *
   * Is recycle bin active (for rooms only)
   *
   * Recycle bin is always on (disabling is not possible).
   */
  @SpeakeasyMetadata()
  @Expose({ name: "nodeHasRecycleBin" })
  nodeHasRecycleBin?: boolean;

  /**
   * Node ID
   */
  @SpeakeasyMetadata()
  @Expose({ name: "nodeId" })
  nodeId: number;

  /**
   * Encryption state
   */
  @SpeakeasyMetadata()
  @Expose({ name: "nodeIsEncrypted" })
  nodeIsEncrypted?: boolean;

  /**
   * Node name
   */
  @SpeakeasyMetadata()
  @Expose({ name: "nodeName" })
  nodeName: string;

  /**
   * Parent node ID (room or folder)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "nodeParentId" })
  nodeParentId?: number;

  /**
   * Parent node path
   *
   * @remarks
   *
   * `/` if node is a root node (room)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "nodeParentPath" })
  nodeParentPath: string;

  /**
   * Quota in byte
   */
  @SpeakeasyMetadata()
  @Expose({ name: "nodeQuota" })
  nodeQuota?: number;

  /**
   * Retention period for deleted nodes in days
   */
  @SpeakeasyMetadata()
  @Expose({ name: "nodeRecycleBinRetentionPeriod" })
  nodeRecycleBinRetentionPeriod?: number;

  /**
   * Node size in byte
   */
  @SpeakeasyMetadata()
  @Expose({ name: "nodeSize" })
  nodeSize?: number;

  /**
   * Modification date
   */
  @SpeakeasyMetadata()
  @Expose({ name: "nodeUpdatedAt" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  nodeUpdatedAt?: Date;

  /**
   * User information
   */
  @SpeakeasyMetadata()
  @Expose({ name: "nodeUpdatedBy" })
  @Type(() => UserInfo)
  nodeUpdatedBy?: UserInfo;
}
