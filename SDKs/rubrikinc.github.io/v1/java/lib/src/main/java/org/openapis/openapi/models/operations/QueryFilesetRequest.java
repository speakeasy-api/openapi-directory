/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import org.openapis.openapi.utils.SpeakeasyMetadata;

public class QueryFilesetRequest {
    /**
     * Filter the summary information based on the ID of the effective SLA Domain inherited by a fileset.
     * Use **_UNPROTECTED_** to only return information for filesets that do not have an effective SLA Domain.
     * Use **_PROTECTED_** to only return information for filesets that do have an effective SLA Domain.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=effective_sla_domain_id")
    public String effectiveSlaDomainId;

    public QueryFilesetRequest withEffectiveSlaDomainId(String effectiveSlaDomainId) {
        this.effectiveSlaDomainId = effectiveSlaDomainId;
        return this;
    }
    
    /**
     * Filter the summary information based on the ID of the host referenced by the fileset.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=host_id")
    public String hostId;

    public QueryFilesetRequest withHostId(String hostId) {
        this.hostId = hostId;
        return this;
    }
    
    /**
     * Retrieve filesets with a host name matching the provided name. The search is performed as a case-insensitive infix search.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=host_name")
    public String hostName;

    public QueryFilesetRequest withHostName(String hostName) {
        this.hostName = hostName;
        return this;
    }
    
    /**
     * Filter the summary information based on the relic status of the fileset. Returns both relic and non relic if the parameter is not set.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=is_relic")
    public Boolean isRelic;

    public QueryFilesetRequest withIsRelic(Boolean isRelic) {
        this.isRelic = isRelic;
        return this;
    }
    
    /**
     * Limit the summary information to a specified maximum number of filesets.
     * 
     * Optionally, use with **_offset_** to start the count at a specified point.
     * 
     * Optionally, use with **_sort_by_** to perform sort on given attributes. Include **_sort_order_** to determine the ascending or descending direction of sort.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=limit")
    public Integer limit;

    public QueryFilesetRequest withLimit(Integer limit) {
        this.limit = limit;
        return this;
    }
    
    /**
     * Retrieve filesets with a name matching the provided name. The search is performed as a case-insensitive infix search.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=name")
    public String name;

    public QueryFilesetRequest withName(String name) {
        this.name = name;
        return this;
    }
    
    /**
     * Starting position in the list of fileset entries contained in the response. The summary information includes the specified numbered entry and all higher numbered entries. Use with **_limit_** to retrieve the summary information as smaller groups of entries, e.g. for paging of results.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=offset")
    public Integer offset;

    public QueryFilesetRequest withOffset(Integer offset) {
        this.offset = offset;
        return this;
    }
    
    /**
     * Filter the summary information based on the primary_cluster_id of the primary Rubrik cluster.
     * Use **_local_** as the primary_cluster_id of the Rubrik cluster that is hosting the current REST API session.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=primary_cluster_id")
    public String primaryClusterId;

    public QueryFilesetRequest withPrimaryClusterId(String primaryClusterId) {
        this.primaryClusterId = primaryClusterId;
        return this;
    }
    
    /**
     * Filter the summary information based on the ID of the host share referenced by the fileset.
     * Use **_NONE_** to only return information for filesets that were not created based on a host share.
     * Use **_ANY_** to only return information for filesets that were created based on a host share.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=share_id")
    public String shareId;

    public QueryFilesetRequest withShareId(String shareId) {
        this.shareId = shareId;
        return this;
    }
    
    /**
     * Specifies a comma-separated list of fileset attributes to use in sorting the fileset summary information. Performs an ASCII sort of the summary information using each specified attribute, in the order specified.
     * 
     * Valid attributes are: **_name_**, **_hostName_**, **_templateType_**, **_slaName_**, **_includes_**, **_excludes_**, and **_exceptions_**. Requires **_sort_order_**.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=sort_by")
    public QueryFilesetSortByEnum sortBy;

    public QueryFilesetRequest withSortBy(QueryFilesetSortByEnum sortBy) {
        this.sortBy = sortBy;
        return this;
    }
    
    /**
     * Sort order, either ascending or descending.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=sort_order")
    public QueryFilesetSortOrderEnum sortOrder;

    public QueryFilesetRequest withSortOrder(QueryFilesetSortOrderEnum sortOrder) {
        this.sortOrder = sortOrder;
        return this;
    }
    
    /**
     * Filter the summary information based on the ID of a fileset template.
     * 
     * Use **_NONE_** to only return information for filesets that were not created from a fileset template.
     * 
     * Use **_ANY_** to only return information for filesets that were created from a fileset template.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=template_id")
    public String templateId;

    public QueryFilesetRequest withTemplateId(String templateId) {
        this.templateId = templateId;
        return this;
    }
    
    public QueryFilesetRequest(){}
}
