/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;



/**
 * DestinyDefinitionsDestinyInventoryItemDefinitionInventory - If the item can exist in an inventory - the overwhelming majority of them can and do - then this is the basic properties regarding the item's relationship with the inventory.
 */
public class DestinyDefinitionsDestinyInventoryItemDefinitionInventory {
    /**
     * The hash identifier for the DestinyInventoryBucketDefinition to which this item belongs. I should have named this "bucketHash", but too many things refer to it now. Sigh.
     */
    
    public Long bucketTypeHash;

    public DestinyDefinitionsDestinyInventoryItemDefinitionInventory withBucketTypeHash(Long bucketTypeHash) {
        this.bucketTypeHash = bucketTypeHash;
        return this;
    }
    
    /**
     * The tooltip message to show, if any, when the item expires.
     */
    
    public String expirationTooltip;

    public DestinyDefinitionsDestinyInventoryItemDefinitionInventory withExpirationTooltip(String expirationTooltip) {
        this.expirationTooltip = expirationTooltip;
        return this;
    }
    
    /**
     * If the item expires while playing in an activity, we show a different message.
     */
    
    public String expiredInActivityMessage;

    public DestinyDefinitionsDestinyInventoryItemDefinitionInventory withExpiredInActivityMessage(String expiredInActivityMessage) {
        this.expiredInActivityMessage = expiredInActivityMessage;
        return this;
    }
    
    /**
     * If the item expires in orbit, we show a... more different message. ("Consummate V's, consummate!")
     */
    
    public String expiredInOrbitMessage;

    public DestinyDefinitionsDestinyInventoryItemDefinitionInventory withExpiredInOrbitMessage(String expiredInOrbitMessage) {
        this.expiredInOrbitMessage = expiredInOrbitMessage;
        return this;
    }
    
    /**
     * If TRUE, this item is instanced. Otherwise, it is a generic item that merely has a quantity in a stack (like Glimmer).
     */
    
    public Boolean isInstanceItem;

    public DestinyDefinitionsDestinyInventoryItemDefinitionInventory withIsInstanceItem(Boolean isInstanceItem) {
        this.isInstanceItem = isInstanceItem;
        return this;
    }
    
    /**
     * The maximum quantity of this item that can exist in a stack.
     */
    
    public Integer maxStackSize;

    public DestinyDefinitionsDestinyInventoryItemDefinitionInventory withMaxStackSize(Integer maxStackSize) {
        this.maxStackSize = maxStackSize;
        return this;
    }
    
    /**
     * A reference to the associated crafting 'recipe' item definition, if this item can be crafted.
     */
    
    public Long recipeItemHash;

    public DestinyDefinitionsDestinyInventoryItemDefinitionInventory withRecipeItemHash(Long recipeItemHash) {
        this.recipeItemHash = recipeItemHash;
        return this;
    }
    
    /**
     * If the item is picked up by the lost loot queue, this is the hash identifier for the DestinyInventoryBucketDefinition into which it will be placed. Again, I should have named this recoveryBucketHash instead.
     */
    
    public Long recoveryBucketTypeHash;

    public DestinyDefinitionsDestinyInventoryItemDefinitionInventory withRecoveryBucketTypeHash(Long recoveryBucketTypeHash) {
        this.recoveryBucketTypeHash = recoveryBucketTypeHash;
        return this;
    }
    
    /**
     * If this string is populated, you can't have more than one stack with this label in a given inventory. Note that this is different from the equipping block's unique label, which is used for equipping uniqueness.
     */
    
    public String stackUniqueLabel;

    public DestinyDefinitionsDestinyInventoryItemDefinitionInventory withStackUniqueLabel(String stackUniqueLabel) {
        this.stackUniqueLabel = stackUniqueLabel;
        return this;
    }
    
    
    public Boolean suppressExpirationWhenObjectivesComplete;

    public DestinyDefinitionsDestinyInventoryItemDefinitionInventory withSuppressExpirationWhenObjectivesComplete(Boolean suppressExpirationWhenObjectivesComplete) {
        this.suppressExpirationWhenObjectivesComplete = suppressExpirationWhenObjectivesComplete;
        return this;
    }
    
    /**
     * The enumeration matching the tier type of the item to known values, again for convenience sake.
     */
    
    public Integer tierType;

    public DestinyDefinitionsDestinyInventoryItemDefinitionInventory withTierType(Integer tierType) {
        this.tierType = tierType;
        return this;
    }
    
    /**
     * The hash identifier for the Tier Type of the item, use to look up its DestinyItemTierTypeDefinition if you need to show localized data for the item's tier.
     */
    
    public Long tierTypeHash;

    public DestinyDefinitionsDestinyInventoryItemDefinitionInventory withTierTypeHash(Long tierTypeHash) {
        this.tierTypeHash = tierTypeHash;
        return this;
    }
    
    /**
     * The localized name of the tier type, which is a useful shortcut so you don't have to look up the definition every time. However, it's mostly a holdover from days before we had a DestinyItemTierTypeDefinition to refer to.
     */
    
    public String tierTypeName;

    public DestinyDefinitionsDestinyInventoryItemDefinitionInventory withTierTypeName(String tierTypeName) {
        this.tierTypeName = tierTypeName;
        return this;
    }
    
    public DestinyDefinitionsDestinyInventoryItemDefinitionInventory(){}
}
