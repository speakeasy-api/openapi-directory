/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";

/**
 * How do you want to sort playlist items?
 *
 * @remarks
 *
 */
export enum GetPlaylistByIdSortEnum {
  RecentAddedFirst = "recent_added_first",
  OldestAddedFirst = "oldest_added_first",
  RecentPublishedFirst = "recent_published_first",
  OldestPublishedFirst = "oldest_published_first",
}

/**
 * The type of this playlist, which should be either **episode_list** or **podcast_list**.
 *
 * @remarks
 *
 */
export enum GetPlaylistByIdTypeEnum {
  EpisodeList = "episode_list",
  PodcastList = "podcast_list",
}

export class GetPlaylistByIdRequest extends SpeakeasyBase {
  /**
   * Get API Key on listennotes.com/api
   */
  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-ListenAPI-Key",
  })
  xListenAPIKey: string;

  /**
   * Playlist id (always 11 characters, e.g., m1pe7z60bsw).
   *
   * @remarks
   * You can get the podcast id from the url of a playlist, e.g.,
   * m1pe7z60bsw is the playlist id of listennotes.com/listen/podcasts-about-podcasting-m1pe7z60bsw
   *
   */
  @SpeakeasyMetadata({ data: "pathParam, style=simple;explode=false;name=id" })
  id: string;

  /**
   * For playlist items pagination.
   *
   * @remarks
   * It's the value of **last_timestamp_ms** from the response of last request.
   * If it's 0 or not specified, just return the latest or the oldest 20 items,
   * depending on the value of the **sort** parameter.
   *
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=last_timestamp_ms",
  })
  lastTimestampMs?: number;

  /**
   * How do you want to sort playlist items?
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=sort" })
  sort?: GetPlaylistByIdSortEnum;

  /**
   * The type of this playlist, which should be either **episode_list** or **podcast_list**.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=type" })
  type?: GetPlaylistByIdTypeEnum;
}

export class GetPlaylistByIdResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  headers?: Record<string, string[]>;

  /**
   * OK
   */
  @SpeakeasyMetadata()
  playlistResponse?: shared.PlaylistResponse;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;
}
