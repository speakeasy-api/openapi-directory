"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from ..shared import thumbnaildetails as shared_thumbnaildetails
from ..shared import videolocalization as shared_videolocalization
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from enum import Enum
from marshmallow import fields
from sdk import utils
from typing import Optional

class VideoSnippetLiveBroadcastContentEnum(str, Enum):
    r"""Indicates if the video is an upcoming/active live broadcast. Or it's \\"none\\" if the video is not an upcoming/active live broadcast."""
    NONE = 'none'
    UPCOMING = 'upcoming'
    LIVE = 'live'
    COMPLETED = 'completed'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class VideoSnippet:
    r"""Basic details about a video, including title, description, uploader, thumbnails and category."""
    
    category_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('categoryId'), 'exclude': lambda f: f is None }})
    r"""The YouTube video category associated with the video."""  
    channel_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('channelId'), 'exclude': lambda f: f is None }})
    r"""The ID that YouTube uses to uniquely identify the channel that the video was uploaded to."""  
    channel_title: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('channelTitle'), 'exclude': lambda f: f is None }})
    r"""Channel title for the channel that the video belongs to."""  
    default_audio_language: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('defaultAudioLanguage'), 'exclude': lambda f: f is None }})
    r"""The default_audio_language property specifies the language spoken in the video's default audio track."""  
    default_language: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('defaultLanguage'), 'exclude': lambda f: f is None }})
    r"""The language of the videos's default snippet."""  
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description'), 'exclude': lambda f: f is None }})
    r"""The video's description. @mutable youtube.videos.insert youtube.videos.update"""  
    live_broadcast_content: Optional[VideoSnippetLiveBroadcastContentEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('liveBroadcastContent'), 'exclude': lambda f: f is None }})
    r"""Indicates if the video is an upcoming/active live broadcast. Or it's \\"none\\" if the video is not an upcoming/active live broadcast."""  
    localized: Optional[shared_videolocalization.VideoLocalization] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('localized'), 'exclude': lambda f: f is None }})
    r"""Localized versions of certain video properties (e.g. title)."""  
    published_at: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('publishedAt'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""The date and time when the video was uploaded."""  
    tags: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tags'), 'exclude': lambda f: f is None }})
    r"""A list of keyword tags associated with the video. Tags may contain spaces."""  
    thumbnails: Optional[shared_thumbnaildetails.ThumbnailDetails] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('thumbnails'), 'exclude': lambda f: f is None }})
    r"""Internal representation of thumbnails for a YouTube resource."""  
    title: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('title'), 'exclude': lambda f: f is None }})
    r"""The video's title. @mutable youtube.videos.insert youtube.videos.update"""  
    