// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// StringFilterMatchTypeEnum - The match type for this filter.
type StringFilterMatchTypeEnum string

const (
	StringFilterMatchTypeEnumMatchTypeUnspecified StringFilterMatchTypeEnum = "MATCH_TYPE_UNSPECIFIED"
	StringFilterMatchTypeEnumExact                StringFilterMatchTypeEnum = "EXACT"
	StringFilterMatchTypeEnumBeginsWith           StringFilterMatchTypeEnum = "BEGINS_WITH"
	StringFilterMatchTypeEnumEndsWith             StringFilterMatchTypeEnum = "ENDS_WITH"
	StringFilterMatchTypeEnumContains             StringFilterMatchTypeEnum = "CONTAINS"
	StringFilterMatchTypeEnumFullRegexp           StringFilterMatchTypeEnum = "FULL_REGEXP"
	StringFilterMatchTypeEnumPartialRegexp        StringFilterMatchTypeEnum = "PARTIAL_REGEXP"
)

func (e *StringFilterMatchTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "MATCH_TYPE_UNSPECIFIED":
		fallthrough
	case "EXACT":
		fallthrough
	case "BEGINS_WITH":
		fallthrough
	case "ENDS_WITH":
		fallthrough
	case "CONTAINS":
		fallthrough
	case "FULL_REGEXP":
		fallthrough
	case "PARTIAL_REGEXP":
		*e = StringFilterMatchTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for StringFilterMatchTypeEnum: %s", s)
	}
}

// StringFilter - The filter for string
type StringFilter struct {
	// If true, the string value is case sensitive.
	CaseSensitive *bool `json:"caseSensitive,omitempty"`
	// The match type for this filter.
	MatchType *StringFilterMatchTypeEnum `json:"matchType,omitempty"`
	// The string value used for the matching.
	Value *string `json:"value,omitempty"`
}
