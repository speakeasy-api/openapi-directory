"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Members:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def directory_members_delete(self, request: operations.DirectoryMembersDeleteRequest, security: operations.DirectoryMembersDeleteSecurity) -> operations.DirectoryMembersDeleteResponse:
        r"""Removes a member from a group."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DirectoryMembersDeleteRequest, base_url, '/admin/directory/v1/groups/{groupKey}/members/{memberKey}', request)
        
        query_params = utils.get_query_params(operations.DirectoryMembersDeleteRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DirectoryMembersDeleteResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def directory_members_get(self, request: operations.DirectoryMembersGetRequest, security: operations.DirectoryMembersGetSecurity) -> operations.DirectoryMembersGetResponse:
        r"""Retrieves a group member's properties."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DirectoryMembersGetRequest, base_url, '/admin/directory/v1/groups/{groupKey}/members/{memberKey}', request)
        
        query_params = utils.get_query_params(operations.DirectoryMembersGetRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DirectoryMembersGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Member])
                res.member = out

        return res

    def directory_members_has_member(self, request: operations.DirectoryMembersHasMemberRequest, security: operations.DirectoryMembersHasMemberSecurity) -> operations.DirectoryMembersHasMemberResponse:
        r"""Checks whether the given user is a member of the group. Membership can be direct or nested, but if nested, the `memberKey` and `groupKey` must be entities in the same domain or an `Invalid input` error is returned. To check for nested memberships that include entities outside of the group's domain, use the [`checkTransitiveMembership()`](https://cloud.google.com/identity/docs/reference/rest/v1/groups.memberships/checkTransitiveMembership) method in the Cloud Identity Groups API."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DirectoryMembersHasMemberRequest, base_url, '/admin/directory/v1/groups/{groupKey}/hasMember/{memberKey}', request)
        
        query_params = utils.get_query_params(operations.DirectoryMembersHasMemberRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DirectoryMembersHasMemberResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.MembersHasMember])
                res.members_has_member = out

        return res

    def directory_members_insert(self, request: operations.DirectoryMembersInsertRequest, security: operations.DirectoryMembersInsertSecurity) -> operations.DirectoryMembersInsertResponse:
        r"""Adds a user to the specified group."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DirectoryMembersInsertRequest, base_url, '/admin/directory/v1/groups/{groupKey}/members', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "member", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.DirectoryMembersInsertRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DirectoryMembersInsertResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Member])
                res.member = out

        return res

    def directory_members_list(self, request: operations.DirectoryMembersListRequest, security: operations.DirectoryMembersListSecurity) -> operations.DirectoryMembersListResponse:
        r"""Retrieves a paginated list of all members in a group. This method times out after 60 minutes. For more information, see [Troubleshoot error codes](https://developers.google.com/admin-sdk/directory/v1/guides/troubleshoot-error-codes)."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DirectoryMembersListRequest, base_url, '/admin/directory/v1/groups/{groupKey}/members', request)
        
        query_params = utils.get_query_params(operations.DirectoryMembersListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DirectoryMembersListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Members])
                res.members = out

        return res

    def directory_members_patch(self, request: operations.DirectoryMembersPatchRequest, security: operations.DirectoryMembersPatchSecurity) -> operations.DirectoryMembersPatchResponse:
        r"""Updates the membership properties of a user in the specified group. This method supports [patch semantics](/admin-sdk/directory/v1/guides/performance#patch)."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DirectoryMembersPatchRequest, base_url, '/admin/directory/v1/groups/{groupKey}/members/{memberKey}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "member", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.DirectoryMembersPatchRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PATCH', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DirectoryMembersPatchResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Member])
                res.member = out

        return res

    def directory_members_update(self, request: operations.DirectoryMembersUpdateRequest, security: operations.DirectoryMembersUpdateSecurity) -> operations.DirectoryMembersUpdateResponse:
        r"""Updates the membership of a user in the specified group."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DirectoryMembersUpdateRequest, base_url, '/admin/directory/v1/groups/{groupKey}/members/{memberKey}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "member", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.DirectoryMembersUpdateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PUT', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DirectoryMembersUpdateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Member])
                res.member = out

        return res

    