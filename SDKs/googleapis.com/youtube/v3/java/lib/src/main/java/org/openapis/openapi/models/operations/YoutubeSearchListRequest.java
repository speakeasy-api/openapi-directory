/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import org.openapis.openapi.utils.SpeakeasyMetadata;

public class YoutubeSearchListRequest {
    /**
     * V1 error format.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=$.xgafv")
    public org.openapis.openapi.models.shared.XgafvEnum dollarXgafv;
    public YoutubeSearchListRequest withDollarXgafv(org.openapis.openapi.models.shared.XgafvEnum dollarXgafv) {
        this.dollarXgafv = dollarXgafv;
        return this;
    }
    
    /**
     * OAuth access token.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=access_token")
    public String accessToken;
    public YoutubeSearchListRequest withAccessToken(String accessToken) {
        this.accessToken = accessToken;
        return this;
    }
    
    /**
     * Data format for response.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=alt")
    public org.openapis.openapi.models.shared.AltEnum alt;
    public YoutubeSearchListRequest withAlt(org.openapis.openapi.models.shared.AltEnum alt) {
        this.alt = alt;
        return this;
    }
    
    /**
     * JSONP
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=callback")
    public String callback;
    public YoutubeSearchListRequest withCallback(String callback) {
        this.callback = callback;
        return this;
    }
    
    /**
     * Filter on resources belonging to this channelId.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=channelId")
    public String channelId;
    public YoutubeSearchListRequest withChannelId(String channelId) {
        this.channelId = channelId;
        return this;
    }
    
    /**
     * Add a filter on the channel search.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=channelType")
    public YoutubeSearchListChannelTypeEnum channelType;
    public YoutubeSearchListRequest withChannelType(YoutubeSearchListChannelTypeEnum channelType) {
        this.channelType = channelType;
        return this;
    }
    
    /**
     * Filter on the livestream status of the videos.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=eventType")
    public YoutubeSearchListEventTypeEnum eventType;
    public YoutubeSearchListRequest withEventType(YoutubeSearchListEventTypeEnum eventType) {
        this.eventType = eventType;
        return this;
    }
    
    /**
     * Selector specifying which fields to include in a partial response.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=fields")
    public String fields;
    public YoutubeSearchListRequest withFields(String fields) {
        this.fields = fields;
        return this;
    }
    
    /**
     * Search owned by a content owner.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=forContentOwner")
    public Boolean forContentOwner;
    public YoutubeSearchListRequest withForContentOwner(Boolean forContentOwner) {
        this.forContentOwner = forContentOwner;
        return this;
    }
    
    /**
     * Restrict the search to only retrieve videos uploaded using the project id of the authenticated user.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=forDeveloper")
    public Boolean forDeveloper;
    public YoutubeSearchListRequest withForDeveloper(Boolean forDeveloper) {
        this.forDeveloper = forDeveloper;
        return this;
    }
    
    /**
     * Search for the private videos of the authenticated user.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=forMine")
    public Boolean forMine;
    public YoutubeSearchListRequest withForMine(Boolean forMine) {
        this.forMine = forMine;
        return this;
    }
    
    /**
     * API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=key")
    public String key;
    public YoutubeSearchListRequest withKey(String key) {
        this.key = key;
        return this;
    }
    
    /**
     * Filter on location of the video
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=location")
    public String location;
    public YoutubeSearchListRequest withLocation(String location) {
        this.location = location;
        return this;
    }
    
    /**
     * Filter on distance from the location (specified above).
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=locationRadius")
    public String locationRadius;
    public YoutubeSearchListRequest withLocationRadius(String locationRadius) {
        this.locationRadius = locationRadius;
        return this;
    }
    
    /**
     * The *maxResults* parameter specifies the maximum number of items that should be returned in the result set.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=maxResults")
    public Long maxResults;
    public YoutubeSearchListRequest withMaxResults(Long maxResults) {
        this.maxResults = maxResults;
        return this;
    }
    
    /**
     * OAuth 2.0 token for the current user.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=oauth_token")
    public String oauthToken;
    public YoutubeSearchListRequest withOauthToken(String oauthToken) {
        this.oauthToken = oauthToken;
        return this;
    }
    
    /**
     * *Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwner* parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The CMS account that the user authenticates with must be linked to the specified YouTube content owner.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=onBehalfOfContentOwner")
    public String onBehalfOfContentOwner;
    public YoutubeSearchListRequest withOnBehalfOfContentOwner(String onBehalfOfContentOwner) {
        this.onBehalfOfContentOwner = onBehalfOfContentOwner;
        return this;
    }
    
    /**
     * Sort order of the results.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=order")
    public YoutubeSearchListOrderEnum order;
    public YoutubeSearchListRequest withOrder(YoutubeSearchListOrderEnum order) {
        this.order = order;
        return this;
    }
    
    /**
     * The *pageToken* parameter identifies a specific page in the result set that should be returned. In an API response, the nextPageToken and prevPageToken properties identify other pages that could be retrieved.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=pageToken")
    public String pageToken;
    public YoutubeSearchListRequest withPageToken(String pageToken) {
        this.pageToken = pageToken;
        return this;
    }
    
    /**
     * The *part* parameter specifies a comma-separated list of one or more search resource properties that the API response will include. Set the parameter value to snippet.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=part")
    public String[] part;
    public YoutubeSearchListRequest withPart(String[] part) {
        this.part = part;
        return this;
    }
    
    /**
     * Returns response with indentations and line breaks.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=prettyPrint")
    public Boolean prettyPrint;
    public YoutubeSearchListRequest withPrettyPrint(Boolean prettyPrint) {
        this.prettyPrint = prettyPrint;
        return this;
    }
    
    /**
     * Filter on resources published after this date.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=publishedAfter")
    public String publishedAfter;
    public YoutubeSearchListRequest withPublishedAfter(String publishedAfter) {
        this.publishedAfter = publishedAfter;
        return this;
    }
    
    /**
     * Filter on resources published before this date.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=publishedBefore")
    public String publishedBefore;
    public YoutubeSearchListRequest withPublishedBefore(String publishedBefore) {
        this.publishedBefore = publishedBefore;
        return this;
    }
    
    /**
     * Textual search terms to match.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=q")
    public String q;
    public YoutubeSearchListRequest withQ(String q) {
        this.q = q;
        return this;
    }
    
    /**
     * Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=quotaUser")
    public String quotaUser;
    public YoutubeSearchListRequest withQuotaUser(String quotaUser) {
        this.quotaUser = quotaUser;
        return this;
    }
    
    /**
     * Display the content as seen by viewers in this country.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=regionCode")
    public String regionCode;
    public YoutubeSearchListRequest withRegionCode(String regionCode) {
        this.regionCode = regionCode;
        return this;
    }
    
    /**
     * Search related to a resource.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=relatedToVideoId")
    public String relatedToVideoId;
    public YoutubeSearchListRequest withRelatedToVideoId(String relatedToVideoId) {
        this.relatedToVideoId = relatedToVideoId;
        return this;
    }
    
    /**
     * Return results relevant to this language.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=relevanceLanguage")
    public String relevanceLanguage;
    public YoutubeSearchListRequest withRelevanceLanguage(String relevanceLanguage) {
        this.relevanceLanguage = relevanceLanguage;
        return this;
    }
    
    /**
     * Indicates whether the search results should include restricted content as well as standard content.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=safeSearch")
    public YoutubeSearchListSafeSearchEnum safeSearch;
    public YoutubeSearchListRequest withSafeSearch(YoutubeSearchListSafeSearchEnum safeSearch) {
        this.safeSearch = safeSearch;
        return this;
    }
    
    /**
     * Restrict results to a particular topic.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=topicId")
    public String topicId;
    public YoutubeSearchListRequest withTopicId(String topicId) {
        this.topicId = topicId;
        return this;
    }
    
    /**
     * Restrict results to a particular set of resource types from One Platform.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=type")
    public String[] type;
    public YoutubeSearchListRequest withType(String[] type) {
        this.type = type;
        return this;
    }
    
    /**
     * Legacy upload protocol for media (e.g. "media", "multipart").
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=uploadType")
    public String uploadType;
    public YoutubeSearchListRequest withUploadType(String uploadType) {
        this.uploadType = uploadType;
        return this;
    }
    
    /**
     * Upload protocol for media (e.g. "raw", "multipart").
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=upload_protocol")
    public String uploadProtocol;
    public YoutubeSearchListRequest withUploadProtocol(String uploadProtocol) {
        this.uploadProtocol = uploadProtocol;
        return this;
    }
    
    /**
     * Filter on the presence of captions on the videos.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=videoCaption")
    public YoutubeSearchListVideoCaptionEnum videoCaption;
    public YoutubeSearchListRequest withVideoCaption(YoutubeSearchListVideoCaptionEnum videoCaption) {
        this.videoCaption = videoCaption;
        return this;
    }
    
    /**
     * Filter on videos in a specific category.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=videoCategoryId")
    public String videoCategoryId;
    public YoutubeSearchListRequest withVideoCategoryId(String videoCategoryId) {
        this.videoCategoryId = videoCategoryId;
        return this;
    }
    
    /**
     * Filter on the definition of the videos.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=videoDefinition")
    public YoutubeSearchListVideoDefinitionEnum videoDefinition;
    public YoutubeSearchListRequest withVideoDefinition(YoutubeSearchListVideoDefinitionEnum videoDefinition) {
        this.videoDefinition = videoDefinition;
        return this;
    }
    
    /**
     * Filter on 3d videos.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=videoDimension")
    public YoutubeSearchListVideoDimensionEnum videoDimension;
    public YoutubeSearchListRequest withVideoDimension(YoutubeSearchListVideoDimensionEnum videoDimension) {
        this.videoDimension = videoDimension;
        return this;
    }
    
    /**
     * Filter on the duration of the videos.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=videoDuration")
    public YoutubeSearchListVideoDurationEnum videoDuration;
    public YoutubeSearchListRequest withVideoDuration(YoutubeSearchListVideoDurationEnum videoDuration) {
        this.videoDuration = videoDuration;
        return this;
    }
    
    /**
     * Filter on embeddable videos.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=videoEmbeddable")
    public YoutubeSearchListVideoEmbeddableEnum videoEmbeddable;
    public YoutubeSearchListRequest withVideoEmbeddable(YoutubeSearchListVideoEmbeddableEnum videoEmbeddable) {
        this.videoEmbeddable = videoEmbeddable;
        return this;
    }
    
    /**
     * Filter on the license of the videos.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=videoLicense")
    public YoutubeSearchListVideoLicenseEnum videoLicense;
    public YoutubeSearchListRequest withVideoLicense(YoutubeSearchListVideoLicenseEnum videoLicense) {
        this.videoLicense = videoLicense;
        return this;
    }
    
    /**
     * Filter on syndicated videos.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=videoSyndicated")
    public YoutubeSearchListVideoSyndicatedEnum videoSyndicated;
    public YoutubeSearchListRequest withVideoSyndicated(YoutubeSearchListVideoSyndicatedEnum videoSyndicated) {
        this.videoSyndicated = videoSyndicated;
        return this;
    }
    
    /**
     * Filter on videos of a specific type.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=videoType")
    public YoutubeSearchListVideoTypeEnum videoType;
    public YoutubeSearchListRequest withVideoType(YoutubeSearchListVideoTypeEnum videoType) {
        this.videoType = videoType;
        return this;
    }
    
}
