/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
export const UpdateServiceServerList = ["https://chat.twilio.com"] as const;

export class UpdateServiceSecurity extends SpeakeasyBase {
  @SpeakeasyMetadata({
    data: "security, scheme=true;type=http;subtype=basic;name=password",
  })
  password: string;

  @SpeakeasyMetadata({
    data: "security, scheme=true;type=http;subtype=basic;name=username",
  })
  username: string;
}

/**
 * The HTTP method to use for calls to the `pre_webhook_url` and `post_webhook_url` webhooks.  Can be: `POST` or `GET` and the default is `POST`. See [Webhook Events](https://www.twilio.com/docs/chat/webhook-events) for more details.
 */
export enum UpdateServiceUpdateServiceRequestWebhookMethodEnum {
  Head = "HEAD",
  Get = "GET",
  Post = "POST",
  Patch = "PATCH",
  Put = "PUT",
  Delete = "DELETE",
}

export class UpdateServiceUpdateServiceRequest extends SpeakeasyBase {
  /**
   * DEPRECATED. The interval in seconds between consumption reports submission batches from client endpoints.
   */
  @SpeakeasyMetadata({ data: "form, name=ConsumptionReportInterval" })
  consumptionReportInterval?: number;

  /**
   * The channel role assigned to a channel creator when they join a new channel. See the [Role resource](https://www.twilio.com/docs/chat/rest/role-resource) for more info about roles.
   */
  @SpeakeasyMetadata({ data: "form, name=DefaultChannelCreatorRoleSid" })
  defaultChannelCreatorRoleSid?: string;

  /**
   * The channel role assigned to users when they are added to a channel. See the [Role resource](https://www.twilio.com/docs/chat/rest/role-resource) for more info about roles.
   */
  @SpeakeasyMetadata({ data: "form, name=DefaultChannelRoleSid" })
  defaultChannelRoleSid?: string;

  /**
   * The service role assigned to users when they are added to the service. See the [Role resource](https://www.twilio.com/docs/chat/rest/role-resource) for more info about roles.
   */
  @SpeakeasyMetadata({ data: "form, name=DefaultServiceRoleSid" })
  defaultServiceRoleSid?: string;

  /**
   * A descriptive string that you create to describe the resource.
   */
  @SpeakeasyMetadata({ data: "form, name=FriendlyName" })
  friendlyName?: string;

  /**
   * The maximum number of Members that can be added to Channels within this Service. Can be up to 1,000.
   */
  @SpeakeasyMetadata({ data: "form, name=Limits.ChannelMembers" })
  limitsChannelMembers?: number;

  /**
   * The maximum number of Channels Users can be a Member of within this Service. Can be up to 1,000.
   */
  @SpeakeasyMetadata({ data: "form, name=Limits.UserChannels" })
  limitsUserChannels?: number;

  /**
   * The message to send when a media message has no text. Can be used as placeholder message.
   */
  @SpeakeasyMetadata({ data: "form, name=Media.CompatibilityMessage" })
  mediaCompatibilityMessage?: string;

  /**
   * Whether to send a notification when a member is added to a channel. The default is `false`.
   */
  @SpeakeasyMetadata({
    data: "form, name=Notifications.AddedToChannel.Enabled",
  })
  notificationsAddedToChannelEnabled?: boolean;

  /**
   * The name of the sound to play when a member is added to a channel and `notifications.added_to_channel.enabled` is `true`.
   */
  @SpeakeasyMetadata({ data: "form, name=Notifications.AddedToChannel.Sound" })
  notificationsAddedToChannelSound?: string;

  /**
   * The template to use to create the notification text displayed when a member is added to a channel and `notifications.added_to_channel.enabled` is `true`.
   */
  @SpeakeasyMetadata({
    data: "form, name=Notifications.AddedToChannel.Template",
  })
  notificationsAddedToChannelTemplate?: string;

  /**
   * Whether to send a notification when a user is invited to a channel. The default is `false`.
   */
  @SpeakeasyMetadata({
    data: "form, name=Notifications.InvitedToChannel.Enabled",
  })
  notificationsInvitedToChannelEnabled?: boolean;

  /**
   * The name of the sound to play when a user is invited to a channel and `notifications.invited_to_channel.enabled` is `true`.
   */
  @SpeakeasyMetadata({
    data: "form, name=Notifications.InvitedToChannel.Sound",
  })
  notificationsInvitedToChannelSound?: string;

  /**
   * The template to use to create the notification text displayed when a user is invited to a channel and `notifications.invited_to_channel.enabled` is `true`.
   */
  @SpeakeasyMetadata({
    data: "form, name=Notifications.InvitedToChannel.Template",
  })
  notificationsInvitedToChannelTemplate?: string;

  /**
   * Whether to log notifications. The default is `false`.
   */
  @SpeakeasyMetadata({ data: "form, name=Notifications.LogEnabled" })
  notificationsLogEnabled?: boolean;

  /**
   * Whether the new message badge is enabled. The default is `false`.
   */
  @SpeakeasyMetadata({
    data: "form, name=Notifications.NewMessage.BadgeCountEnabled",
  })
  notificationsNewMessageBadgeCountEnabled?: boolean;

  /**
   * Whether to send a notification when a new message is added to a channel. The default is `false`.
   */
  @SpeakeasyMetadata({ data: "form, name=Notifications.NewMessage.Enabled" })
  notificationsNewMessageEnabled?: boolean;

  /**
   * The name of the sound to play when a new message is added to a channel and `notifications.new_message.enabled` is `true`.
   */
  @SpeakeasyMetadata({ data: "form, name=Notifications.NewMessage.Sound" })
  notificationsNewMessageSound?: string;

  /**
   * The template to use to create the notification text displayed when a new message is added to a channel and `notifications.new_message.enabled` is `true`.
   */
  @SpeakeasyMetadata({ data: "form, name=Notifications.NewMessage.Template" })
  notificationsNewMessageTemplate?: string;

  /**
   * Whether to send a notification to a user when they are removed from a channel. The default is `false`.
   */
  @SpeakeasyMetadata({
    data: "form, name=Notifications.RemovedFromChannel.Enabled",
  })
  notificationsRemovedFromChannelEnabled?: boolean;

  /**
   * The name of the sound to play to a user when they are removed from a channel and `notifications.removed_from_channel.enabled` is `true`.
   */
  @SpeakeasyMetadata({
    data: "form, name=Notifications.RemovedFromChannel.Sound",
  })
  notificationsRemovedFromChannelSound?: string;

  /**
   * The template to use to create the notification text displayed to a user when they are removed from a channel and `notifications.removed_from_channel.enabled` is `true`.
   */
  @SpeakeasyMetadata({
    data: "form, name=Notifications.RemovedFromChannel.Template",
  })
  notificationsRemovedFromChannelTemplate?: string;

  /**
   * The number of times to retry a call to the `post_webhook_url` if the request times out (after 5 seconds) or it receives a 429, 503, or 504 HTTP response. The default is 0, which means the call won't be retried.
   */
  @SpeakeasyMetadata({ data: "form, name=PostWebhookRetryCount" })
  postWebhookRetryCount?: number;

  /**
   * The URL for post-event webhooks, which are called by using the `webhook_method`. See [Webhook Events](https://www.twilio.com/docs/chat/webhook-events) for more details.
   */
  @SpeakeasyMetadata({ data: "form, name=PostWebhookUrl" })
  postWebhookUrl?: string;

  /**
   * The number of times to retry a call to the `pre_webhook_url` if the request times out (after 5 seconds) or it receives a 429, 503, or 504 HTTP response. Default retry count is 0 times, which means the call won't be retried.
   */
  @SpeakeasyMetadata({ data: "form, name=PreWebhookRetryCount" })
  preWebhookRetryCount?: number;

  /**
   * The URL for pre-event webhooks, which are called by using the `webhook_method`. See [Webhook Events](https://www.twilio.com/docs/chat/webhook-events) for more details.
   */
  @SpeakeasyMetadata({ data: "form, name=PreWebhookUrl" })
  preWebhookUrl?: string;

  /**
   * Whether to enable the [Reachability Indicator](https://www.twilio.com/docs/chat/reachability-indicator) for this Service instance. The default is `false`.
   */
  @SpeakeasyMetadata({ data: "form, name=ReachabilityEnabled" })
  reachabilityEnabled?: boolean;

  /**
   * Whether to enable the [Message Consumption Horizon](https://www.twilio.com/docs/chat/consumption-horizon) feature. The default is `true`.
   */
  @SpeakeasyMetadata({ data: "form, name=ReadStatusEnabled" })
  readStatusEnabled?: boolean;

  /**
   * How long in seconds after a `started typing` event until clients should assume that user is no longer typing, even if no `ended typing` message was received.  The default is 5 seconds.
   */
  @SpeakeasyMetadata({ data: "form, name=TypingIndicatorTimeout" })
  typingIndicatorTimeout?: number;

  /**
   * The list of webhook events that are enabled for this Service instance. See [Webhook Events](https://www.twilio.com/docs/chat/webhook-events) for more details.
   */
  @SpeakeasyMetadata({ data: "form, name=WebhookFilters" })
  webhookFilters?: string[];

  /**
   * The HTTP method to use for calls to the `pre_webhook_url` and `post_webhook_url` webhooks.  Can be: `POST` or `GET` and the default is `POST`. See [Webhook Events](https://www.twilio.com/docs/chat/webhook-events) for more details.
   */
  @SpeakeasyMetadata({ data: "form, name=WebhookMethod" })
  webhookMethod?: UpdateServiceUpdateServiceRequestWebhookMethodEnum;
}

export class UpdateServiceRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({
    data: "request, media_type=application/x-www-form-urlencoded",
  })
  requestBody?: UpdateServiceUpdateServiceRequest;

  /**
   * The SID of the Service resource to update.
   */
  @SpeakeasyMetadata({ data: "pathParam, style=simple;explode=false;name=Sid" })
  sid: string;
}

export class UpdateServiceResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * OK
   */
  @SpeakeasyMetadata()
  chatV2Service?: shared.ChatV2Service;
}
