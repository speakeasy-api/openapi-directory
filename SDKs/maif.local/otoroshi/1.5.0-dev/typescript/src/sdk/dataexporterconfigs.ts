/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

/**
 * Everything about Otoroshi data exporters
 */
export class DataExporterConfigs {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Get all data exporter configs
   *
   * @remarks
   * Get all data exporter configs
   */
  dataExporterTemplate(
    req: operations.DataExporterTemplateRequest,
    security: operations.DataExporterTemplateSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DataExporterTemplateResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DataExporterTemplateRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/api/data-exporter-configs/_template";
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.DataExporterTemplateSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DataExporterTemplateResponse =
        new operations.DataExporterTemplateResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.dataExporterConfig = utils.objectToClass(
              httpRes?.data,
              shared.DataExporterConfig
            );
          }
          break;
        case [400, 401, 404].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Create a new data exporter configs
   *
   * @remarks
   * Create a new data exporter configs
   */
  createBulkDataExporterConfigs(
    req: shared.DataExporterConfig,
    security: operations.CreateBulkDataExporterConfigsSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.CreateBulkDataExporterConfigsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new shared.DataExporterConfig(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/api/data-exporter-configs/_bulk";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.CreateBulkDataExporterConfigsSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.CreateBulkDataExporterConfigsResponse =
        new operations.CreateBulkDataExporterConfigsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.createBulkDataExporterConfigs200ApplicationJSONObjects = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.createBulkDataExporterConfigs200ApplicationJSONObjects =
              utils.objectToClass(
                httpRes?.data,
                operations.CreateBulkDataExporterConfigs200ApplicationJSON,
                resFieldDepth
              );
          }
          break;
        case [400, 401, 404].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Create a new data exporter config
   *
   * @remarks
   * Create a new data exporter config
   */
  createDataExporterConfig(
    req: shared.DataExporterConfig,
    security: operations.CreateDataExporterConfigSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.CreateDataExporterConfigResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new shared.DataExporterConfig(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/api/data-exporter-configs";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.CreateDataExporterConfigSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.CreateDataExporterConfigResponse =
        new operations.CreateDataExporterConfigResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.dataExporterConfig = utils.objectToClass(
              httpRes?.data,
              shared.DataExporterConfig
            );
          }
          break;
        case [400, 401, 404].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Delete a data exporter config
   *
   * @remarks
   * Delete a data exporter config
   */
  deleteDataExporterConfig(
    req: operations.DeleteDataExporterConfigRequest,
    security: operations.DeleteDataExporterConfigSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DeleteDataExporterConfigResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DeleteDataExporterConfigRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/api/data-exporter-configs/{dataExporterConfigId}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.DeleteDataExporterConfigSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DeleteDataExporterConfigResponse =
        new operations.DeleteDataExporterConfigResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.deleted = utils.objectToClass(httpRes?.data, shared.Deleted);
          }
          break;
        case [400, 401, 404].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Delete a data exporter config
   *
   * @remarks
   * Delete a data exporter config
   */
  deletebulkDataExporterConfig(
    req: shared.Patch[],
    security: operations.DeletebulkDataExporterConfigSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DeletebulkDataExporterConfigResponse> {
    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/api/data-exporter-configs/_bulk";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.DeletebulkDataExporterConfigSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "delete",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DeletebulkDataExporterConfigResponse =
        new operations.DeletebulkDataExporterConfigResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.deletebulkDataExporterConfig200ApplicationJSONObjects = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.deletebulkDataExporterConfig200ApplicationJSONObjects =
              utils.objectToClass(
                httpRes?.data,
                operations.DeletebulkDataExporterConfig200ApplicationJSON,
                resFieldDepth
              );
          }
          break;
        case [400, 401, 404].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Get all data exporter configs
   *
   * @remarks
   * Get all data exporter configs
   */
  findAllDataExporters(
    config?: AxiosRequestConfig
  ): Promise<operations.FindAllDataExportersResponse> {
    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/api/data-exporter-configs";

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.FindAllDataExportersResponse =
        new operations.FindAllDataExportersResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.dataExporterConfigs = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.dataExporterConfigs = utils.objectToClass(
              httpRes?.data,
              shared.DataExporterConfig,
              resFieldDepth
            );
          }
          break;
        case [400, 401, 404].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Get a data exporter config
   *
   * @remarks
   * Get a data exporter config
   */
  findDataExporterConfigById(
    req: operations.FindDataExporterConfigByIdRequest,
    security: operations.FindDataExporterConfigByIdSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.FindDataExporterConfigByIdResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.FindDataExporterConfigByIdRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/api/data-exporter-configs/{dataExporterConfigId}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.FindDataExporterConfigByIdSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.FindDataExporterConfigByIdResponse =
        new operations.FindDataExporterConfigByIdResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.dataExporterConfig = utils.objectToClass(
              httpRes?.data,
              shared.DataExporterConfig
            );
          }
          break;
        case [400, 401, 404].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Update a data exporter configs with a diff
   *
   * @remarks
   * Update a data exporter configs with a diff
   */
  patchBulkDataExporterConfig(
    req: shared.Patch[],
    security: operations.PatchBulkDataExporterConfigSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.PatchBulkDataExporterConfigResponse> {
    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/api/data-exporter-configs/_bulk";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.PatchBulkDataExporterConfigSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "patch",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PatchBulkDataExporterConfigResponse =
        new operations.PatchBulkDataExporterConfigResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.patchBulkDataExporterConfig200ApplicationJSONObjects = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.patchBulkDataExporterConfig200ApplicationJSONObjects =
              utils.objectToClass(
                httpRes?.data,
                operations.PatchBulkDataExporterConfig200ApplicationJSON,
                resFieldDepth
              );
          }
          break;
        case [400, 401, 404].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Update a data exporter config with a diff
   *
   * @remarks
   * Update a data exporter config with a diff
   */
  patchDataExporterConfig(
    req: operations.PatchDataExporterConfigRequest,
    security: operations.PatchDataExporterConfigSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.PatchDataExporterConfigResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PatchDataExporterConfigRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/api/data-exporter-configs/{dataExporterConfigId}",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.PatchDataExporterConfigSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "patch",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PatchDataExporterConfigResponse =
        new operations.PatchDataExporterConfigResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.dataExporterConfig = utils.objectToClass(
              httpRes?.data,
              shared.DataExporterConfig
            );
          }
          break;
        case [400, 401, 404].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Update a data exporter configs
   *
   * @remarks
   * Update a data exporter configs
   */
  updateBulkDataExporterConfig(
    req: shared.DataExporterConfig,
    security: operations.UpdateBulkDataExporterConfigSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.UpdateBulkDataExporterConfigResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new shared.DataExporterConfig(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/api/data-exporter-configs/_bulk";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.UpdateBulkDataExporterConfigSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "put",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.UpdateBulkDataExporterConfigResponse =
        new operations.UpdateBulkDataExporterConfigResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.updateBulkDataExporterConfig200ApplicationJSONObjects = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.updateBulkDataExporterConfig200ApplicationJSONObjects =
              utils.objectToClass(
                httpRes?.data,
                operations.UpdateBulkDataExporterConfig200ApplicationJSON,
                resFieldDepth
              );
          }
          break;
        case [400, 401, 404].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Update a data exporter config
   *
   * @remarks
   * Update a data exporter config
   */
  updateDataExporterConfig(
    req: operations.UpdateDataExporterConfigRequest,
    security: operations.UpdateDataExporterConfigSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.UpdateDataExporterConfigResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.UpdateDataExporterConfigRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/api/data-exporter-configs/{dataExporterConfigId}",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "dataExporterConfig",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.UpdateDataExporterConfigSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "put",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.UpdateDataExporterConfigResponse =
        new operations.UpdateDataExporterConfigResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.dataExporterConfig = utils.objectToClass(
              httpRes?.data,
              shared.DataExporterConfig
            );
          }
          break;
        case [400, 401, 404].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }
}
