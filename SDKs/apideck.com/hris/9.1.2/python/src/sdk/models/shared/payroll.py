"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import compensation as shared_compensation
from ..shared import payrolltotals as shared_payrolltotals
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Payroll:
    
    check_date: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('check_date') }})
    r"""The date on which employees will be paid for the payroll."""  
    end_date: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('end_date') }})
    r"""The end date, inclusive, of the pay period."""  
    id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id') }})
    r"""A unique identifier for an object."""  
    processed: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('processed') }})
    r"""Whether or not the payroll has been successfully processed. Note that processed payrolls cannot be updated."""  
    start_date: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('start_date') }})
    r"""The start date, inclusive, of the pay period."""  
    company_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('company_id'), 'exclude': lambda f: f is None }})
    r"""The unique identifier of the company."""  
    compensations: Optional[list[shared_compensation.Compensation]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('compensations'), 'exclude': lambda f: f is None }})
    r"""An array of compensations for the payroll."""  
    processed_date: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('processed_date'), 'exclude': lambda f: f is None }})
    r"""The date the payroll was processed."""  
    totals: Optional[shared_payrolltotals.PayrollTotals] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('totals'), 'exclude': lambda f: f is None }})  
    