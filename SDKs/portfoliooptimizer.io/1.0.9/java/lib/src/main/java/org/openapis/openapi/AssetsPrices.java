/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi;

import com.fasterxml.jackson.databind.ObjectMapper;
import java.net.http.HttpResponse;
import java.nio.charset.StandardCharsets;
import org.openapis.openapi.utils.HTTPClient;
import org.openapis.openapi.utils.HTTPRequest;
import org.openapis.openapi.utils.JSON;
import org.openapis.openapi.utils.SerializedBody;

public class AssetsPrices {
	
	private HTTPClient _defaultClient;
	private HTTPClient _securityClient;
	private String _serverUrl;
	private String _language;
	private String _sdkVersion;
	private String _genVersion;

	public AssetsPrices(HTTPClient defaultClient, HTTPClient securityClient, String serverUrl, String language, String sdkVersion, String genVersion) {
		this._defaultClient = defaultClient;
		this._securityClient = securityClient;
		this._serverUrl = serverUrl;
		this._language = language;
		this._sdkVersion = sdkVersion;
		this._genVersion = genVersion;
	}

    /**
     * Adjusted Prices
     * Compute the backward-adjusted prices of one or several asset(s) for one or several date(s) from:
     * * Unadjusted prices
     * * Capital distributions, like stock dividends
     * * Splits, like stock splits
     * 
     * The adjustment base date is chosen to be the last date for which unadjusted prices are available, which implies that:
     * * The price on the last date for which unadjusted prices are available is left unadjusted
     * * The price on any other date is adjusted based on the capital distributions and the splits which occurred between this date and the last date for which unadjusted prices are available
     * 
     * References
     * * [Center for Research in Security Prices](https://www.crsp.org/products/documentation/crsp-calculations)
     * 
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.PostAssetsPricesAdjustedResponse postAssetsPricesAdjusted(org.openapis.openapi.models.operations.PostAssetsPricesAdjustedRequestBody request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/assets/prices/adjusted");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.PostAssetsPricesAdjustedResponse res = new org.openapis.openapi.models.operations.PostAssetsPricesAdjustedResponse() {{
            postAssetsPricesAdjusted200ApplicationJSONObject = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.PostAssetsPricesAdjusted200ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.PostAssetsPricesAdjusted200ApplicationJSON.class);
                res.postAssetsPricesAdjusted200ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Forward-Adjusted Prices
     * Compute the forward-adjusted prices of one or several asset(s) for one or several date(s) from:
     * * Unadjusted prices
     * * Capital distributions, like stock dividends
     * * Splits, like stock splits
     * 
     * The adjustment base date is chosen to be the first date for which unadjusted prices are available, which implies that:
     * * The price on the first date for which unadjusted prices are available is left unadjusted
     * * The price on any other date is adjusted based on the capital distributions and the splits which occurred between this date and the first date for which unadjusted prices are available
     * 
     * References
     * * [Center for Research in Security Prices](https://www.crsp.org/products/documentation/crsp-calculations)
     * 
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.PostAssetsPricesAdjustedForwardResponse postAssetsPricesAdjustedForward(org.openapis.openapi.models.operations.PostAssetsPricesAdjustedForwardRequestBody request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/assets/prices/adjusted/forward");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.PostAssetsPricesAdjustedForwardResponse res = new org.openapis.openapi.models.operations.PostAssetsPricesAdjustedForwardResponse() {{
            postAssetsPricesAdjustedForward200ApplicationJSONObject = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.PostAssetsPricesAdjustedForward200ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.PostAssetsPricesAdjustedForward200ApplicationJSON.class);
                res.postAssetsPricesAdjustedForward200ApplicationJSONObject = out;
            }
        }

        return res;
    }
}