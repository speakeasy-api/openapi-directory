/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class Preprocessing {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Convert an image of text into a binarized (light and dark) view
   *
   * @remarks
   * Perform an adaptive binarization algorithm on the input image to prepare it for further OCR operations.
   */
  preprocessingBinarize(
    req: operations.PreprocessingBinarizeRequestBody,
    security: operations.PreprocessingBinarizeSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.PreprocessingBinarizeResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PreprocessingBinarizeRequestBody(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/ocr/preprocessing/image/binarize";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "multipart"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.PreprocessingBinarizeSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PreprocessingBinarizeResponse =
        new operations.PreprocessingBinarizeResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.preprocessingBinarize200ApplicationJSONByteString =
              JSON.stringify(httpRes?.data);
          }
          if (utils.matchContentType(contentType, `application/xml`)) {
            res.preprocessingBinarize200ApplicationXMLByteString =
              httpRes?.data;
          }
          if (utils.matchContentType(contentType, `text/json`)) {
            res.preprocessingBinarize200TextJSONByteString = JSON.stringify(
              httpRes?.data
            );
          }
          if (utils.matchContentType(contentType, `text/xml`)) {
            res.preprocessingBinarize200TextXMLByteString = JSON.stringify(
              httpRes?.data
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Convert an image of text into a binary (light and dark) view with ML
   *
   * @remarks
   * Perform an advanced adaptive, Deep Learning-based binarization algorithm on the input image to prepare it for further OCR operations.  Provides enhanced accuracy than adaptive binarization.  Image will be upsampled to 300 DPI if it has a DPI below 300.
   */
  preprocessingBinarizeAdvanced(
    req: operations.PreprocessingBinarizeAdvancedRequestBody,
    security: operations.PreprocessingBinarizeAdvancedSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.PreprocessingBinarizeAdvancedResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PreprocessingBinarizeAdvancedRequestBody(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/ocr/preprocessing/image/binarize/advanced";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "multipart"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.PreprocessingBinarizeAdvancedSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PreprocessingBinarizeAdvancedResponse =
        new operations.PreprocessingBinarizeAdvancedResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.preprocessingBinarizeAdvanced200ApplicationJSONByteString =
              JSON.stringify(httpRes?.data);
          }
          if (utils.matchContentType(contentType, `application/xml`)) {
            res.preprocessingBinarizeAdvanced200ApplicationXMLByteString =
              httpRes?.data;
          }
          if (utils.matchContentType(contentType, `text/json`)) {
            res.preprocessingBinarizeAdvanced200TextJSONByteString =
              JSON.stringify(httpRes?.data);
          }
          if (utils.matchContentType(contentType, `text/xml`)) {
            res.preprocessingBinarizeAdvanced200TextXMLByteString =
              JSON.stringify(httpRes?.data);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get the angle of the page / document / receipt
   *
   * @remarks
   * Analyzes a photo or image of a document and identifies the rotation angle of the page.
   */
  preprocessingGetPageAngle(
    req: operations.PreprocessingGetPageAngleRequestBody,
    security: operations.PreprocessingGetPageAngleSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.PreprocessingGetPageAngleResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PreprocessingGetPageAngleRequestBody(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/ocr/preprocessing/image/get-page-angle";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "multipart"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.PreprocessingGetPageAngleSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PreprocessingGetPageAngleResponse =
        new operations.PreprocessingGetPageAngleResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getPageAngleResult = utils.objectToClass(
              httpRes?.data,
              shared.GetPageAngleResult
            );
          }
          if (utils.matchContentType(contentType, `text/json`)) {
            res.getPageAngleResult = utils.objectToClass(
              httpRes?.data,
              shared.GetPageAngleResult
            );
          }
          if (utils.matchContentType(contentType, `application/xml`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          if (utils.matchContentType(contentType, `text/xml`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          break;
      }

      return res;
    });
  }

  /**
   * Detect and unrotate a document image
   *
   * @remarks
   * Detect and unrotate an image of a document (e.g. that was scanned at an angle).  Great for document scanning applications; once unskewed, this image is perfect for converting to PDF using the Convert API or optical character recognition using the OCR API.
   */
  preprocessingUnrotate(
    req: operations.PreprocessingUnrotateRequestBody,
    security: operations.PreprocessingUnrotateSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.PreprocessingUnrotateResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PreprocessingUnrotateRequestBody(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/ocr/preprocessing/image/unrotate";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "multipart"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.PreprocessingUnrotateSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PreprocessingUnrotateResponse =
        new operations.PreprocessingUnrotateResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.preprocessingUnrotate200ApplicationJSONByteString =
              JSON.stringify(httpRes?.data);
          }
          if (utils.matchContentType(contentType, `application/xml`)) {
            res.preprocessingUnrotate200ApplicationXMLByteString =
              httpRes?.data;
          }
          if (utils.matchContentType(contentType, `text/json`)) {
            res.preprocessingUnrotate200TextJSONByteString = JSON.stringify(
              httpRes?.data
            );
          }
          if (utils.matchContentType(contentType, `text/xml`)) {
            res.preprocessingUnrotate200TextXMLByteString = JSON.stringify(
              httpRes?.data
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Detect and unrotate a document image (advanced)
   *
   * @remarks
   * Detect and unrotate an image of a document (e.g. that was scanned at an angle) using deep learning.  Great for document scanning applications; once unskewed, this image is perfect for converting to PDF using the Convert API or optical character recognition using the OCR API.
   */
  preprocessingUnrotateAdvanced(
    req: operations.PreprocessingUnrotateAdvancedRequestBody,
    security: operations.PreprocessingUnrotateAdvancedSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.PreprocessingUnrotateAdvancedResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PreprocessingUnrotateAdvancedRequestBody(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/ocr/preprocessing/image/unrotate/advanced";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "multipart"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.PreprocessingUnrotateAdvancedSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PreprocessingUnrotateAdvancedResponse =
        new operations.PreprocessingUnrotateAdvancedResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.preprocessingUnrotateAdvanced200ApplicationJSONByteString =
              JSON.stringify(httpRes?.data);
          }
          if (utils.matchContentType(contentType, `application/xml`)) {
            res.preprocessingUnrotateAdvanced200ApplicationXMLByteString =
              httpRes?.data;
          }
          if (utils.matchContentType(contentType, `text/json`)) {
            res.preprocessingUnrotateAdvanced200TextJSONByteString =
              JSON.stringify(httpRes?.data);
          }
          if (utils.matchContentType(contentType, `text/xml`)) {
            res.preprocessingUnrotateAdvanced200TextXMLByteString =
              JSON.stringify(httpRes?.data);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Detect and unskew a photo of a document
   *
   * @remarks
   * Detect and unskew a photo of a document (e.g. taken on a cell phone) into a perfectly square image.  Great for document scanning applications; once unskewed, this image is perfect for converting to PDF using the Convert API or optical character recognition using the OCR API.
   */
  preprocessingUnskew(
    req: operations.PreprocessingUnskewRequestBody,
    security: operations.PreprocessingUnskewSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.PreprocessingUnskewResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PreprocessingUnskewRequestBody(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/ocr/preprocessing/image/unskew";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "multipart"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.PreprocessingUnskewSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PreprocessingUnskewResponse =
        new operations.PreprocessingUnskewResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.preprocessingUnskew200ApplicationJSONByteString =
              JSON.stringify(httpRes?.data);
          }
          if (utils.matchContentType(contentType, `application/xml`)) {
            res.preprocessingUnskew200ApplicationXMLByteString = httpRes?.data;
          }
          if (utils.matchContentType(contentType, `text/json`)) {
            res.preprocessingUnskew200TextJSONByteString = JSON.stringify(
              httpRes?.data
            );
          }
          if (utils.matchContentType(contentType, `text/xml`)) {
            res.preprocessingUnskew200TextXMLByteString = JSON.stringify(
              httpRes?.data
            );
          }
          break;
      }

      return res;
    });
  }
}
