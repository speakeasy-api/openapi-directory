// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type AnalyticsCrashGroupModelCountsSecurity struct {
	APIToken shared.SchemeAPIToken `security:"scheme,type=apiKey,subtype=header"`
}

type AnalyticsCrashGroupModelCountsPathParams struct {
	// The name of the application
	AppName string `pathParam:"style=simple,explode=false,name=app_name"`
	// The id of the crash group.
	CrashGroupID string `pathParam:"style=simple,explode=false,name=crash_group_id"`
	// The name of the owner
	OwnerName string `pathParam:"style=simple,explode=false,name=owner_name"`
}

type AnalyticsCrashGroupModelCountsQueryParams struct {
	// The maximum number of results to return. (0 will fetch all results)
	DollarTop *int64 `queryParam:"style=form,explode=true,name=$top"`
	Version   string `queryParam:"style=form,explode=true,name=version"`
}

type AnalyticsCrashGroupModelCountsRequest struct {
	PathParams  AnalyticsCrashGroupModelCountsPathParams
	QueryParams AnalyticsCrashGroupModelCountsQueryParams
	Security    AnalyticsCrashGroupModelCountsSecurity
}

// AnalyticsCrashGroupModelCountsDefaultApplicationJSONErrorCodeEnum - The status code return by the API. It can be 400 or 403 or 500.
type AnalyticsCrashGroupModelCountsDefaultApplicationJSONErrorCodeEnum string

const (
	AnalyticsCrashGroupModelCountsDefaultApplicationJSONErrorCodeEnumFourHundred         AnalyticsCrashGroupModelCountsDefaultApplicationJSONErrorCodeEnum = "400"
	AnalyticsCrashGroupModelCountsDefaultApplicationJSONErrorCodeEnumFourHundredAndThree AnalyticsCrashGroupModelCountsDefaultApplicationJSONErrorCodeEnum = "403"
	AnalyticsCrashGroupModelCountsDefaultApplicationJSONErrorCodeEnumFiveHundred         AnalyticsCrashGroupModelCountsDefaultApplicationJSONErrorCodeEnum = "500"
)

func (e *AnalyticsCrashGroupModelCountsDefaultApplicationJSONErrorCodeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "400":
		fallthrough
	case "403":
		fallthrough
	case "500":
		*e = AnalyticsCrashGroupModelCountsDefaultApplicationJSONErrorCodeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for AnalyticsCrashGroupModelCountsDefaultApplicationJSONErrorCodeEnum: %s", s)
	}
}

type AnalyticsCrashGroupModelCountsDefaultApplicationJSONError struct {
	// The status code return by the API. It can be 400 or 403 or 500.
	Code *AnalyticsCrashGroupModelCountsDefaultApplicationJSONErrorCodeEnum `json:"code,omitempty"`
	// The reason for the request failed.
	Message *string `json:"message,omitempty"`
}

// AnalyticsCrashGroupModelCountsDefaultApplicationJSON - Error
type AnalyticsCrashGroupModelCountsDefaultApplicationJSON struct {
	Error *AnalyticsCrashGroupModelCountsDefaultApplicationJSONError `json:"error,omitempty"`
}

type AnalyticsCrashGroupModelCounts200ApplicationJSONModels struct {
	// Count of model.
	CrashCount *int64 `json:"crash_count,omitempty"`
	// Model's name.
	ModelName *string `json:"model_name,omitempty"`
}

// AnalyticsCrashGroupModelCounts200ApplicationJSON - Top models with percentage in descending order.
type AnalyticsCrashGroupModelCounts200ApplicationJSON struct {
	CrashCount *int64                                                   `json:"crash_count,omitempty"`
	Models     []AnalyticsCrashGroupModelCounts200ApplicationJSONModels `json:"models,omitempty"`
}

type AnalyticsCrashGroupModelCountsResponse struct {
	// Top models with percentage in descending order.
	AnalyticsCrashGroupModelCounts200ApplicationJSONObject *AnalyticsCrashGroupModelCounts200ApplicationJSON
	// Error code with reason.
	AnalyticsCrashGroupModelCountsDefaultApplicationJSONObject *AnalyticsCrashGroupModelCountsDefaultApplicationJSON
	ContentType                                                string
	StatusCode                                                 int
	RawResponse                                                *http.Response
}
