"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import bandedrange as shared_bandedrange
from ..shared import basicfilter as shared_basicfilter
from ..shared import conditionalformatrule as shared_conditionalformatrule
from ..shared import developermetadata as shared_developermetadata
from ..shared import dimensiongroup as shared_dimensiongroup
from ..shared import embeddedchart as shared_embeddedchart
from ..shared import filterview as shared_filterview
from ..shared import griddata as shared_griddata
from ..shared import gridrange as shared_gridrange
from ..shared import protectedrange as shared_protectedrange
from ..shared import sheetproperties as shared_sheetproperties
from ..shared import slicer as shared_slicer
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Sheet:
    r"""A sheet in a spreadsheet."""
    
    banded_ranges: Optional[list[shared_bandedrange.BandedRange]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bandedRanges'), 'exclude': lambda f: f is None }})
    r"""The banded (alternating colors) ranges on this sheet."""  
    basic_filter: Optional[shared_basicfilter.BasicFilter] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('basicFilter'), 'exclude': lambda f: f is None }})
    r"""The default filter associated with a sheet."""  
    charts: Optional[list[shared_embeddedchart.EmbeddedChart]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('charts'), 'exclude': lambda f: f is None }})
    r"""The specifications of every chart on this sheet."""  
    column_groups: Optional[list[shared_dimensiongroup.DimensionGroup]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('columnGroups'), 'exclude': lambda f: f is None }})
    r"""All column groups on this sheet, ordered by increasing range start index, then by group depth."""  
    conditional_formats: Optional[list[shared_conditionalformatrule.ConditionalFormatRule]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('conditionalFormats'), 'exclude': lambda f: f is None }})
    r"""The conditional format rules in this sheet."""  
    data: Optional[list[shared_griddata.GridData]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('data'), 'exclude': lambda f: f is None }})
    r"""Data in the grid, if this is a grid sheet. The number of GridData objects returned is dependent on the number of ranges requested on this sheet. For example, if this is representing `Sheet1`, and the spreadsheet was requested with ranges `Sheet1!A1:C10` and `Sheet1!D15:E20`, then the first GridData will have a startRow/startColumn of `0`, while the second one will have `startRow 14` (zero-based row 15), and `startColumn 3` (zero-based column D). For a DATA_SOURCE sheet, you can not request a specific range, the GridData contains all the values."""  
    developer_metadata: Optional[list[shared_developermetadata.DeveloperMetadata]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('developerMetadata'), 'exclude': lambda f: f is None }})
    r"""The developer metadata associated with a sheet."""  
    filter_views: Optional[list[shared_filterview.FilterView]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('filterViews'), 'exclude': lambda f: f is None }})
    r"""The filter views in this sheet."""  
    merges: Optional[list[shared_gridrange.GridRange]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('merges'), 'exclude': lambda f: f is None }})
    r"""The ranges that are merged together."""  
    properties: Optional[shared_sheetproperties.SheetProperties] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('properties'), 'exclude': lambda f: f is None }})
    r"""Properties of a sheet."""  
    protected_ranges: Optional[list[shared_protectedrange.ProtectedRange]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('protectedRanges'), 'exclude': lambda f: f is None }})
    r"""The protected ranges in this sheet."""  
    row_groups: Optional[list[shared_dimensiongroup.DimensionGroup]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('rowGroups'), 'exclude': lambda f: f is None }})
    r"""All row groups on this sheet, ordered by increasing range start index, then by group depth."""  
    slicers: Optional[list[shared_slicer.Slicer]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('slicers'), 'exclude': lambda f: f is None }})
    r"""The slicers on this sheet."""  
    