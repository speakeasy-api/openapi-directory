"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import additionalrecipient as shared_additionalrecipient
from ..shared import address as shared_address
from ..shared import order as shared_order
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Checkout:
    r"""Square Checkout lets merchants accept online payments for supported
    payment types using a checkout workflow hosted on squareup.com.
    """
    
    additional_recipients: Optional[list[shared_additionalrecipient.AdditionalRecipient]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('additional_recipients'), 'exclude': lambda f: f is None }})
    r"""Additional recipients (other than the merchant) receiving a portion of this checkout.
    For example, fees assessed on the purchase by a third party integration.
    """  
    ask_for_shipping_address: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ask_for_shipping_address'), 'exclude': lambda f: f is None }})
    r"""If `true`, Square Checkout will collect shipping information on your
    behalf and store that information with the transaction information in your
    Square Dashboard.
    
    Default: `false`.
    """  
    checkout_page_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('checkout_page_url'), 'exclude': lambda f: f is None }})
    r"""The URL that the buyer's browser should be redirected to after the
    checkout is completed.
    """  
    created_at: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('created_at'), 'exclude': lambda f: f is None }})
    r"""The time when the checkout was created, in RFC 3339 format."""  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""ID generated by Square Checkout when a new checkout is requested."""  
    merchant_support_email: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('merchant_support_email'), 'exclude': lambda f: f is None }})
    r"""The email address to display on the Square Checkout confirmation page
    and confirmation email that the buyer can use to contact the merchant.
    
    If this value is not set, the confirmation page and email will display the
    primary email address associated with the merchant's Square account.
    
    Default: none; only exists if explicitly set.
    """  
    order: Optional[shared_order.Order] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('order'), 'exclude': lambda f: f is None }})
    r"""Contains all information related to a single order to process with Square,
    including line items that specify the products to purchase. `Order` objects also
    include information about any associated tenders, refunds, and returns.
    
    All Connect V2 Transactions have all been converted to Orders including all associated
    itemization data.
    """  
    pre_populate_buyer_email: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('pre_populate_buyer_email'), 'exclude': lambda f: f is None }})
    r"""If provided, the buyer's email is pre-populated on the checkout page
    as an editable text field.
    
    Default: none; only exists if explicitly set.
    """  
    pre_populate_shipping_address: Optional[shared_address.Address] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('pre_populate_shipping_address'), 'exclude': lambda f: f is None }})
    r"""Represents a postal address in a country. The address format is based
    on an [open-source library from Google](https://github.com/google/libaddressinput). For more information, 
    see [AddressValidationMetadata](https://github.com/google/libaddressinput/wiki/AddressValidationMetadata). 
    This format has dedicated fields for four address components: postal code, 
    locality (city), administrative district (state, prefecture, or province), and 
    sublocality (town or village). These components have dedicated fields in the 
    `Address` object because software sometimes behaves differently based on them. 
    For example, sales tax software may charge different amounts of sales tax 
    based on the postal code, and some software is only available in 
    certain states due to compliance reasons.
    
    For the remaining address components, the `Address` type provides the 
    `address_line_1` and `address_line_2` fields for free-form data entry. 
    These fields are free-form because the remaining address components have 
    too many variations around the world and typical software does not parse 
    these components. These fields enable users to enter anything they want. 
    
    Note that, in the current implementation, all other `Address` type fields are blank. 
    These include `address_line_3`, `sublocality_2`, `sublocality_3`, 
    `administrative_district_level_2`, `administrative_district_level_3`, 
    `first_name`, `last_name`, and `organization`. 
    
    When it comes to localization, the seller's language preferences 
    (see [Language preferences](https://developer.squareup.com/docs/locations-api#location-specific-and-seller-level-language-preferences)) 
    are ignored for addresses. Even though Square products (such as Square Point of Sale 
    and the Seller Dashboard) mostly use a seller's language preference in 
    communication, when it comes to addresses, they will use English for a US address, 
    Japanese for an address in Japan, and so on.
    """  
    redirect_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('redirect_url'), 'exclude': lambda f: f is None }})
    r"""The URL to redirect to after checkout is completed with `checkoutId`,
    Square's `orderId`, `transactionId`, and `referenceId` appended as URL
    parameters. For example, if the provided redirect_url is
    `http://www.example.com/order-complete`, a successful transaction redirects
    the customer to:
    
    <pre><code>http://www.example.com/order-complete?checkoutId=xxxxxx&amp;orderId=xxxxxx&amp;referenceId=xxxxxx&amp;transactionId=xxxxxx</code></pre>
    
    If you do not provide a redirect URL, Square Checkout will display an order
    confirmation page on your behalf; however Square strongly recommends that
    you provide a redirect URL so you can verify the transaction results and
    finalize the order through your existing/normal confirmation workflow.
    """  
    