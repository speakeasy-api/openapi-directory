/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { EnterpriseCrmEventbusProtoAttributes } from "./enterprisecrmeventbusprotoattributes";
import { EnterpriseCrmEventbusProtoNodeIdentifier } from "./enterprisecrmeventbusprotonodeidentifier";
import { EnterpriseCrmFrontendsEventbusProtoParameterValueType } from "./enterprisecrmfrontendseventbusprotoparametervaluetype";
import { Expose, Type } from "class-transformer";

/**
 * The data type of the parameter.
 */
export enum EnterpriseCrmFrontendsEventbusProtoWorkflowParameterEntryDataTypeEnum {
  DataTypeUnspecified = "DATA_TYPE_UNSPECIFIED",
  StringValue = "STRING_VALUE",
  IntValue = "INT_VALUE",
  DoubleValue = "DOUBLE_VALUE",
  BooleanValue = "BOOLEAN_VALUE",
  ProtoValue = "PROTO_VALUE",
  SerializedObjectValue = "SERIALIZED_OBJECT_VALUE",
  StringArray = "STRING_ARRAY",
  IntArray = "INT_ARRAY",
  DoubleArray = "DOUBLE_ARRAY",
  ProtoArray = "PROTO_ARRAY",
  ProtoEnum = "PROTO_ENUM",
  BooleanArray = "BOOLEAN_ARRAY",
  ProtoEnumArray = "PROTO_ENUM_ARRAY",
  Bytes = "BYTES",
  BytesArray = "BYTES_ARRAY",
  NonSerializableObject = "NON_SERIALIZABLE_OBJECT",
  JsonValue = "JSON_VALUE",
}

/**
 * Specifies the input/output type for the parameter.
 */
export enum EnterpriseCrmFrontendsEventbusProtoWorkflowParameterEntryInOutTypeEnum {
  InOutTypeUnspecified = "IN_OUT_TYPE_UNSPECIFIED",
  In = "IN",
  Out = "OUT",
  InOut = "IN_OUT",
}

export class EnterpriseCrmFrontendsEventbusProtoWorkflowParameterEntry extends SpeakeasyBase {
  /**
   * Attributes are additional options that can be associated with each event property. For more information, see
   */
  @SpeakeasyMetadata()
  @Expose({ name: "attributes" })
  @Type(() => EnterpriseCrmEventbusProtoAttributes)
  attributes?: EnterpriseCrmEventbusProtoAttributes;

  /**
   * Child parameters nested within this parameter. This field only applies to protobuf parameters
   */
  @SpeakeasyMetadata({
    elemType: EnterpriseCrmFrontendsEventbusProtoWorkflowParameterEntry,
  })
  @Expose({ name: "children" })
  @Type(() => EnterpriseCrmFrontendsEventbusProtoWorkflowParameterEntry)
  children?: EnterpriseCrmFrontendsEventbusProtoWorkflowParameterEntry[];

  /**
   * The data type of the parameter.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "dataType" })
  dataType?: EnterpriseCrmFrontendsEventbusProtoWorkflowParameterEntryDataTypeEnum;

  /**
   * To support various types of parameter values. Next available id: 14
   */
  @SpeakeasyMetadata()
  @Expose({ name: "defaultValue" })
  @Type(() => EnterpriseCrmFrontendsEventbusProtoParameterValueType)
  defaultValue?: EnterpriseCrmFrontendsEventbusProtoParameterValueType;

  /**
   * Specifies the input/output type for the parameter.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "inOutType" })
  inOutType?: EnterpriseCrmFrontendsEventbusProtoWorkflowParameterEntryInOutTypeEnum;

  /**
   * Whether this parameter is a transient parameter.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "isTransient" })
  isTransient?: boolean;

  /**
   * This schema will be used to validate runtime JSON-typed values of this parameter.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "jsonSchema" })
  jsonSchema?: string;

  /**
   * Key is used to retrieve the corresponding parameter value. This should be unique for a given fired event. These parameters must be predefined in the workflow definition.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "key" })
  key?: string;

  /**
   * The name (without prefix) to be displayed in the UI for this parameter. E.g. if the key is "foo.bar.myName", then the name would be "myName".
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name?: string;

  /**
   * Represents a node identifier (type + id). Next highest id: 3
   */
  @SpeakeasyMetadata()
  @Expose({ name: "producedBy" })
  @Type(() => EnterpriseCrmEventbusProtoNodeIdentifier)
  producedBy?: EnterpriseCrmEventbusProtoNodeIdentifier;

  @SpeakeasyMetadata()
  @Expose({ name: "producer" })
  producer?: string;

  /**
   * The name of the protobuf type if the parameter has a protobuf data type.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "protoDefName" })
  protoDefName?: string;

  /**
   * If the data type is of type proto or proto array, this field needs to be populated with the fully qualified proto name. This message, for example, would be "enterprise.crm.frontends.eventbus.proto.WorkflowParameterEntry".
   */
  @SpeakeasyMetadata()
  @Expose({ name: "protoDefPath" })
  protoDefPath?: string;
}
