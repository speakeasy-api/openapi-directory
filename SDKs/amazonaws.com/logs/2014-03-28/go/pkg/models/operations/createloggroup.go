// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// CreateLogGroupXAmzTargetEnum
type CreateLogGroupXAmzTargetEnum string

const (
	CreateLogGroupXAmzTargetEnumLogs20140328CreateLogGroup CreateLogGroupXAmzTargetEnum = "Logs_20140328.CreateLogGroup"
)

func (e *CreateLogGroupXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Logs_20140328.CreateLogGroup":
		*e = CreateLogGroupXAmzTargetEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateLogGroupXAmzTargetEnum: %s", s)
	}
}

type CreateLogGroupRequest struct {
	CreateLogGroupRequest shared.CreateLogGroupRequest `request:"mediaType=application/json"`
	XAmzAlgorithm         *string                      `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256     *string                      `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential        *string                      `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate              *string                      `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken     *string                      `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature         *string                      `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders     *string                      `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget            CreateLogGroupXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type CreateLogGroupResponse struct {
	ContentType string
	// InvalidParameterException
	InvalidParameterException interface{}
	// LimitExceededException
	LimitExceededException interface{}
	// OperationAbortedException
	OperationAbortedException interface{}
	// ResourceAlreadyExistsException
	ResourceAlreadyExistsException interface{}
	// ServiceUnavailableException
	ServiceUnavailableException interface{}
	StatusCode                  int
	RawResponse                 *http.Response
}
