"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclasses.dataclass
class ListInflectedFormsRequest:
    
    family: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'family', 'style': 'form', 'explode': True }})
    r"""(Required) The family to inspect"""  
    language: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'language', 'style': 'form', 'explode': True }})
    r"""(Required) The language code"""  
    lexeme: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'lexeme', 'style': 'form', 'explode': True }})
    r"""(Required) The lexeme to inspect"""  
    ocp_apim_subscription_key: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'Ocp-Apim-Subscription-Key', 'style': 'simple', 'explode': False }})
    r"""{{apiKeyDescription}}"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ListInflectedForms200ApplicationJSONFeatures:
    
    index: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('index'), 'exclude': lambda f: f is None }})  
    value: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('value'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ListInflectedForms200ApplicationJSON:
    
    features: Optional[list[ListInflectedForms200ApplicationJSONFeatures]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('features'), 'exclude': lambda f: f is None }})  
    is_lemma: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('isLemma'), 'exclude': lambda f: f is None }})  
    text: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('text'), 'exclude': lambda f: f is None }})  
    

@dataclasses.dataclass
class ListInflectedFormsResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    list_inflected_forms_200_application_json_objects: Optional[list[ListInflectedForms200ApplicationJSON]] = dataclasses.field(default=None)
    r"""Inflected forms of \\"United States\\" in Russian"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    