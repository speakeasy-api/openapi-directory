// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type UpdateLaunchProfileMemberPathParams struct {
	// The ID of the launch profile used to control access from the streaming session.
	LaunchProfileID string `pathParam:"style=simple,explode=false,name=launchProfileId"`
	// The principal ID. This currently supports a IAM Identity Center UserId.
	PrincipalID string `pathParam:"style=simple,explode=false,name=principalId"`
	// The studio ID.
	StudioID string `pathParam:"style=simple,explode=false,name=studioId"`
}

type UpdateLaunchProfileMemberHeaders struct {
	XAmzAlgorithm *string `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	// Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. If you donâ€™t specify a client token, the Amazon Web Services SDK automatically generates a client token and uses it for the request to ensure idempotency.
	XAmzClientToken   *string `header:"style=simple,explode=false,name=X-Amz-Client-Token"`
	XAmzContentSha256 *string `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
}

// UpdateLaunchProfileMemberRequestBodyPersonaEnum - The persona.
type UpdateLaunchProfileMemberRequestBodyPersonaEnum string

const (
	UpdateLaunchProfileMemberRequestBodyPersonaEnumUser UpdateLaunchProfileMemberRequestBodyPersonaEnum = "USER"
)

func (e *UpdateLaunchProfileMemberRequestBodyPersonaEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "USER":
		*e = UpdateLaunchProfileMemberRequestBodyPersonaEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateLaunchProfileMemberRequestBodyPersonaEnum: %s", s)
	}
}

type UpdateLaunchProfileMemberRequestBody struct {
	// The persona.
	Persona UpdateLaunchProfileMemberRequestBodyPersonaEnum `json:"persona"`
}

type UpdateLaunchProfileMemberRequest struct {
	PathParams UpdateLaunchProfileMemberPathParams
	Headers    UpdateLaunchProfileMemberHeaders
	Request    UpdateLaunchProfileMemberRequestBody `request:"mediaType=application/json"`
}

type UpdateLaunchProfileMemberResponse struct {
	// AccessDeniedException
	AccessDeniedException interface{}
	// ConflictException
	ConflictException interface{}
	ContentType       string
	// InternalServerErrorException
	InternalServerErrorException interface{}
	StatusCode                   int
	RawResponse                  *http.Response
	// ResourceNotFoundException
	ResourceNotFoundException interface{}
	// ServiceQuotaExceededException
	ServiceQuotaExceededException interface{}
	// ThrottlingException
	ThrottlingException interface{}
	// Success
	UpdateLaunchProfileMemberResponse *shared.UpdateLaunchProfileMemberResponse
	// ValidationException
	ValidationException interface{}
}
