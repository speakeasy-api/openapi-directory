"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import datafeedstatuserror as shared_datafeedstatuserror
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class DatafeedStatus:
    r"""The status of a datafeed, i.e., the result of the last retrieval of the datafeed computed asynchronously when the feed processing is finished."""
    
    country: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('country'), 'exclude': lambda f: f is None }})
    r"""The country for which the status is reported, represented as a CLDR territory code."""  
    datafeed_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('datafeedId'), 'exclude': lambda f: f is None }})
    r"""The ID of the feed for which the status is reported."""  
    errors: Optional[list[shared_datafeedstatuserror.DatafeedStatusError]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('errors'), 'exclude': lambda f: f is None }})
    r"""The list of errors occurring in the feed."""  
    items_total: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('itemsTotal'), 'exclude': lambda f: f is None }})
    r"""The number of items in the feed that were processed."""  
    items_valid: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('itemsValid'), 'exclude': lambda f: f is None }})
    r"""The number of items in the feed that were valid."""  
    kind: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('kind'), 'exclude': lambda f: f is None }})
    r"""Identifies what kind of resource this is. Value: the fixed string \\"`content#datafeedStatus`\\" """  
    language: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('language'), 'exclude': lambda f: f is None }})
    r"""The two-letter ISO 639-1 language for which the status is reported."""  
    last_upload_date: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lastUploadDate'), 'exclude': lambda f: f is None }})
    r"""The last date at which the feed was uploaded."""  
    processing_status: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('processingStatus'), 'exclude': lambda f: f is None }})
    r"""The processing status of the feed. Acceptable values are: - \\"`\\"`failure`\\": The feed could not be processed or all items had errors.`\\" - \\"`in progress`\\": The feed is being processed. - \\"`none`\\": The feed has not yet been processed. For example, a feed that has never been uploaded will have this processing status. - \\"`success`\\": The feed was processed successfully, though some items might have had errors."""  
    warnings: Optional[list[shared_datafeedstatuserror.DatafeedStatusError]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('warnings'), 'exclude': lambda f: f is None }})
    r"""The list of errors occurring in the feed."""  
    