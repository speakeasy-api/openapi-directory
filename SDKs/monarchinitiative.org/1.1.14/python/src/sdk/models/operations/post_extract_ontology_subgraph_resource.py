"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from typing import Optional


@dataclasses.dataclass
class PostExtractOntologySubgraphResourceRequest:
    
    node: str = dataclasses.field(metadata={'path_param': { 'field_name': 'node', 'style': 'simple', 'explode': False }})
    r"""class ID, e.g. HP:0001288"""  
    ontology: str = dataclasses.field(metadata={'path_param': { 'field_name': 'ontology', 'style': 'simple', 'explode': False }})
    r"""ontology ID, e.g. go, uberon, mp, hp"""  
    cnode: Optional[list[str]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'cnode', 'style': 'form', 'explode': True }})
    r"""Additional classes"""  
    include_ancestors: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'include_ancestors', 'style': 'form', 'explode': True }})
    r"""Include Ancestors"""  
    include_descendants: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'include_descendants', 'style': 'form', 'explode': True }})
    r"""Include Descendants"""  
    include_meta: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'include_meta', 'style': 'form', 'explode': True }})
    r"""Include metadata in response"""  
    relation: Optional[list[str]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'relation', 'style': 'form', 'explode': True }})
    r"""Additional classes"""  
    

@dataclasses.dataclass
class PostExtractOntologySubgraphResourceResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    