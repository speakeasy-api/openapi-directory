// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type PancrSecurity struct {
	APIKey   string `security:"scheme,type=apiKey,subtype=header,name=X-APISETU-APIKEY"`
	ClientID string `security:"scheme,type=apiKey,subtype=header,name=X-APISETU-CLIENTID"`
}

type PancrRequestBodyCertificateParameters struct {
	// Date of birth in DD-MM-YYYY format
	Dob string `json:"DOB"`
	// Full name
	FullName string `json:"FullName"`
	// Gender - M for male, F for female and O for other
	Gender string `json:"GENDER"`
	// Name as in PAN Card
	PANFullName string `json:"PANFullName"`
	// Aadhaar number
	UID string `json:"UID"`
	// PAN No.
	Panno string `json:"panno"`
}

// PancrRequestBodyFormatEnum - The format of the certificate in response.
type PancrRequestBodyFormatEnum string

const (
	PancrRequestBodyFormatEnumXML PancrRequestBodyFormatEnum = "xml"
	PancrRequestBodyFormatEnumPdf PancrRequestBodyFormatEnum = "pdf"
)

func (e PancrRequestBodyFormatEnum) ToPointer() *PancrRequestBodyFormatEnum {
	return &e
}

func (e *PancrRequestBodyFormatEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "xml":
		fallthrough
	case "pdf":
		*e = PancrRequestBodyFormatEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PancrRequestBodyFormatEnum: %v", v)
	}
}

// PancrRequestBody - Request format
type PancrRequestBody struct {
	CertificateParameters *PancrRequestBodyCertificateParameters `json:"certificateParameters,omitempty"`
	ConsentArtifact       *shared.ConsentArtifactSchema          `json:"consentArtifact,omitempty"`
	// The format of the certificate in response.
	Format PancrRequestBodyFormatEnum `json:"format"`
	// A unique transaction id for this request in UUID format. It is used for tracking the request.
	TxnID string `json:"txnId"`
}

type Pancr504ApplicationJSONErrorEnum string

const (
	Pancr504ApplicationJSONErrorEnumGatewayTimeout Pancr504ApplicationJSONErrorEnum = "gateway_timeout"
)

func (e Pancr504ApplicationJSONErrorEnum) ToPointer() *Pancr504ApplicationJSONErrorEnum {
	return &e
}

func (e *Pancr504ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "gateway_timeout":
		*e = Pancr504ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Pancr504ApplicationJSONErrorEnum: %v", v)
	}
}

type Pancr504ApplicationJSONErrorDescriptionEnum string

const (
	Pancr504ApplicationJSONErrorDescriptionEnumPublisherServiceDidNotRespondInTime Pancr504ApplicationJSONErrorDescriptionEnum = "Publisher service did not respond in time"
)

func (e Pancr504ApplicationJSONErrorDescriptionEnum) ToPointer() *Pancr504ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Pancr504ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Publisher service did not respond in time":
		*e = Pancr504ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Pancr504ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Pancr504ApplicationJSON - Gateway timeout
type Pancr504ApplicationJSON struct {
	Error            *Pancr504ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Pancr504ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Pancr503ApplicationJSONErrorEnum string

const (
	Pancr503ApplicationJSONErrorEnumServiceUnavailable Pancr503ApplicationJSONErrorEnum = "service_unavailable"
)

func (e Pancr503ApplicationJSONErrorEnum) ToPointer() *Pancr503ApplicationJSONErrorEnum {
	return &e
}

func (e *Pancr503ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "service_unavailable":
		*e = Pancr503ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Pancr503ApplicationJSONErrorEnum: %v", v)
	}
}

type Pancr503ApplicationJSONErrorDescriptionEnum string

const (
	Pancr503ApplicationJSONErrorDescriptionEnumPublisherServiceIsTemporarilyUnavailable Pancr503ApplicationJSONErrorDescriptionEnum = "Publisher service is temporarily unavailable"
)

func (e Pancr503ApplicationJSONErrorDescriptionEnum) ToPointer() *Pancr503ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Pancr503ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Publisher service is temporarily unavailable":
		*e = Pancr503ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Pancr503ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Pancr503ApplicationJSON - Service unavailable
type Pancr503ApplicationJSON struct {
	Error            *Pancr503ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Pancr503ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Pancr502ApplicationJSONErrorEnum string

const (
	Pancr502ApplicationJSONErrorEnumBadGatewy Pancr502ApplicationJSONErrorEnum = "bad_gatewy"
)

func (e Pancr502ApplicationJSONErrorEnum) ToPointer() *Pancr502ApplicationJSONErrorEnum {
	return &e
}

func (e *Pancr502ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "bad_gatewy":
		*e = Pancr502ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Pancr502ApplicationJSONErrorEnum: %v", v)
	}
}

type Pancr502ApplicationJSONErrorDescriptionEnum string

const (
	Pancr502ApplicationJSONErrorDescriptionEnumPublisherServiceReturnedAnInvalidResponse Pancr502ApplicationJSONErrorDescriptionEnum = "Publisher service returned an invalid response"
)

func (e Pancr502ApplicationJSONErrorDescriptionEnum) ToPointer() *Pancr502ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Pancr502ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Publisher service returned an invalid response":
		*e = Pancr502ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Pancr502ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Pancr502ApplicationJSON - Bad gateway
type Pancr502ApplicationJSON struct {
	Error            *Pancr502ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Pancr502ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Pancr500ApplicationJSONErrorEnum string

const (
	Pancr500ApplicationJSONErrorEnumInternalServerError Pancr500ApplicationJSONErrorEnum = "internal_server_error"
)

func (e Pancr500ApplicationJSONErrorEnum) ToPointer() *Pancr500ApplicationJSONErrorEnum {
	return &e
}

func (e *Pancr500ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "internal_server_error":
		*e = Pancr500ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Pancr500ApplicationJSONErrorEnum: %v", v)
	}
}

type Pancr500ApplicationJSONErrorDescriptionEnum string

const (
	Pancr500ApplicationJSONErrorDescriptionEnumInternalServerError Pancr500ApplicationJSONErrorDescriptionEnum = "Internal server error"
)

func (e Pancr500ApplicationJSONErrorDescriptionEnum) ToPointer() *Pancr500ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Pancr500ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Internal server error":
		*e = Pancr500ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Pancr500ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Pancr500ApplicationJSON - Internal server error
type Pancr500ApplicationJSON struct {
	Error            *Pancr500ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Pancr500ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Pancr404ApplicationJSONErrorEnum string

const (
	Pancr404ApplicationJSONErrorEnumRecordNotFound Pancr404ApplicationJSONErrorEnum = "record_not_found"
	Pancr404ApplicationJSONErrorEnumURLNotFound    Pancr404ApplicationJSONErrorEnum = "url_not_found"
)

func (e Pancr404ApplicationJSONErrorEnum) ToPointer() *Pancr404ApplicationJSONErrorEnum {
	return &e
}

func (e *Pancr404ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "record_not_found":
		fallthrough
	case "url_not_found":
		*e = Pancr404ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Pancr404ApplicationJSONErrorEnum: %v", v)
	}
}

type Pancr404ApplicationJSONErrorDescriptionEnum string

const (
	Pancr404ApplicationJSONErrorDescriptionEnumNoRecordFound               Pancr404ApplicationJSONErrorDescriptionEnum = "No record found"
	Pancr404ApplicationJSONErrorDescriptionEnumYourAPIURLOrPathIsIncorrect Pancr404ApplicationJSONErrorDescriptionEnum = "Your API url or path is incorrect"
)

func (e Pancr404ApplicationJSONErrorDescriptionEnum) ToPointer() *Pancr404ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Pancr404ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "No record found":
		fallthrough
	case "Your API url or path is incorrect":
		*e = Pancr404ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Pancr404ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Pancr404ApplicationJSON - No record found
type Pancr404ApplicationJSON struct {
	Error            *Pancr404ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Pancr404ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Pancr401ApplicationJSONErrorEnum string

const (
	Pancr401ApplicationJSONErrorEnumInvalidAuthentication Pancr401ApplicationJSONErrorEnum = "invalid_authentication"
	Pancr401ApplicationJSONErrorEnumInvalidAuthorization  Pancr401ApplicationJSONErrorEnum = "invalid_authorization"
)

func (e Pancr401ApplicationJSONErrorEnum) ToPointer() *Pancr401ApplicationJSONErrorEnum {
	return &e
}

func (e *Pancr401ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "invalid_authentication":
		fallthrough
	case "invalid_authorization":
		*e = Pancr401ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Pancr401ApplicationJSONErrorEnum: %v", v)
	}
}

type Pancr401ApplicationJSONErrorDescriptionEnum string

const (
	Pancr401ApplicationJSONErrorDescriptionEnumAuthenticationFailed            Pancr401ApplicationJSONErrorDescriptionEnum = "Authentication failed"
	Pancr401ApplicationJSONErrorDescriptionEnumYouAreNotAuthorizedToUseThisAPI Pancr401ApplicationJSONErrorDescriptionEnum = "You are not authorized to use this API"
)

func (e Pancr401ApplicationJSONErrorDescriptionEnum) ToPointer() *Pancr401ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Pancr401ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Authentication failed":
		fallthrough
	case "You are not authorized to use this API":
		*e = Pancr401ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Pancr401ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Pancr401ApplicationJSON - Unauthorized access
type Pancr401ApplicationJSON struct {
	Error            *Pancr401ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Pancr401ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Pancr400ApplicationJSONErrorEnum string

const (
	Pancr400ApplicationJSONErrorEnumMissingParameter Pancr400ApplicationJSONErrorEnum = "missing_parameter"
	Pancr400ApplicationJSONErrorEnumInvalidParameter Pancr400ApplicationJSONErrorEnum = "invalid_parameter"
	Pancr400ApplicationJSONErrorEnumInvalidFormat    Pancr400ApplicationJSONErrorEnum = "invalid_format"
	Pancr400ApplicationJSONErrorEnumInvalidTxnid     Pancr400ApplicationJSONErrorEnum = "invalid_txnid"
	Pancr400ApplicationJSONErrorEnumInvalidConsentid Pancr400ApplicationJSONErrorEnum = "invalid_consentid"
)

func (e Pancr400ApplicationJSONErrorEnum) ToPointer() *Pancr400ApplicationJSONErrorEnum {
	return &e
}

func (e *Pancr400ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "missing_parameter":
		fallthrough
	case "invalid_parameter":
		fallthrough
	case "invalid_format":
		fallthrough
	case "invalid_txnid":
		fallthrough
	case "invalid_consentid":
		*e = Pancr400ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Pancr400ApplicationJSONErrorEnum: %v", v)
	}
}

type Pancr400ApplicationJSONErrorDescriptionEnum string

const (
	Pancr400ApplicationJSONErrorDescriptionEnumPleaseProvideAllMandatoryParameters     Pancr400ApplicationJSONErrorDescriptionEnum = "Please provide all mandatory parameters"
	Pancr400ApplicationJSONErrorDescriptionEnumBadRequest                              Pancr400ApplicationJSONErrorDescriptionEnum = "Bad request"
	Pancr400ApplicationJSONErrorDescriptionEnumTheFormatParameterIsInvalid             Pancr400ApplicationJSONErrorDescriptionEnum = "The format parameter is invalid"
	Pancr400ApplicationJSONErrorDescriptionEnumTheTxnIDParameterMustBeInUUIDFormat     Pancr400ApplicationJSONErrorDescriptionEnum = "The txnId parameter must be in UUID format"
	Pancr400ApplicationJSONErrorDescriptionEnumTheConsentIDParameterMustBeInUUIDFormat Pancr400ApplicationJSONErrorDescriptionEnum = "The consentId parameter must be in UUID format"
)

func (e Pancr400ApplicationJSONErrorDescriptionEnum) ToPointer() *Pancr400ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Pancr400ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Please provide all mandatory parameters":
		fallthrough
	case "Bad request":
		fallthrough
	case "The format parameter is invalid":
		fallthrough
	case "The txnId parameter must be in UUID format":
		fallthrough
	case "The consentId parameter must be in UUID format":
		*e = Pancr400ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Pancr400ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Pancr400ApplicationJSON - Bad request
type Pancr400ApplicationJSON struct {
	Error            *Pancr400ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Pancr400ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type PancrResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Bad request
	Pancr400ApplicationJSONObject *Pancr400ApplicationJSON
	// Unauthorized access
	Pancr401ApplicationJSONObject *Pancr401ApplicationJSON
	// No record found
	Pancr404ApplicationJSONObject *Pancr404ApplicationJSON
	// Internal server error
	Pancr500ApplicationJSONObject *Pancr500ApplicationJSON
	// Bad gateway
	Pancr502ApplicationJSONObject *Pancr502ApplicationJSON
	// Service unavailable
	Pancr503ApplicationJSONObject *Pancr503ApplicationJSON
	// Gateway timeout
	Pancr504ApplicationJSONObject *Pancr504ApplicationJSON
}
