"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import auditevent as shared_auditevent
from ..shared import putauditeventsresponse as shared_putauditeventsresponse
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Any, Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PutAuditEventsRequestBody:
    
    audit_events: list[shared_auditevent.AuditEvent] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('auditEvents') }})
    r"""The JSON payload of events that you want to ingest. You can also point to the JSON event payload in a file."""  
    

@dataclasses.dataclass
class PutAuditEventsRequest:
    
    channel_arn: str = dataclasses.field(metadata={'query_param': { 'field_name': 'channelArn', 'style': 'form', 'explode': True }})
    r"""The ARN or ID (the ARN suffix) of a channel."""  
    request_body: PutAuditEventsRequestBody = dataclasses.field(metadata={'request': { 'media_type': 'application/json' }})  
    external_id: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'externalId', 'style': 'form', 'explode': True }})
    r"""A unique identifier that is conditionally required when the channel's resource policy includes an external ID. This value can be any string, such as a passphrase or account number."""  
    x_amz_algorithm: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Algorithm', 'style': 'simple', 'explode': False }})  
    x_amz_content_sha256: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Content-Sha256', 'style': 'simple', 'explode': False }})  
    x_amz_credential: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Credential', 'style': 'simple', 'explode': False }})  
    x_amz_date: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Date', 'style': 'simple', 'explode': False }})  
    x_amz_security_token: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Security-Token', 'style': 'simple', 'explode': False }})  
    x_amz_signature: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Signature', 'style': 'simple', 'explode': False }})  
    x_amz_signed_headers: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-SignedHeaders', 'style': 'simple', 'explode': False }})  
    

@dataclasses.dataclass
class PutAuditEventsResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    channel_insufficient_permission: Optional[Any] = dataclasses.field(default=None)
    r"""ChannelInsufficientPermission"""  
    channel_not_found: Optional[Any] = dataclasses.field(default=None)
    r"""ChannelNotFound"""  
    channel_unsupported_schema: Optional[Any] = dataclasses.field(default=None)
    r"""ChannelUnsupportedSchema"""  
    duplicated_audit_event_id: Optional[Any] = dataclasses.field(default=None)
    r"""DuplicatedAuditEventId"""  
    invalid_channel_arn: Optional[Any] = dataclasses.field(default=None)
    r"""InvalidChannelARN"""  
    put_audit_events_response: Optional[shared_putauditeventsresponse.PutAuditEventsResponse] = dataclasses.field(default=None)
    r"""Success"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    unsupported_operation_exception: Optional[Any] = dataclasses.field(default=None)
    r"""UnsupportedOperationException"""  
    