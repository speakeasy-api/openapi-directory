// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// UpdateOrganizationSnmpRequestBodyV3AuthModeEnum - The SNMP version 3 authentication mode. Can be either 'MD5' or 'SHA'.
type UpdateOrganizationSnmpRequestBodyV3AuthModeEnum string

const (
	UpdateOrganizationSnmpRequestBodyV3AuthModeEnumMd5 UpdateOrganizationSnmpRequestBodyV3AuthModeEnum = "MD5"
	UpdateOrganizationSnmpRequestBodyV3AuthModeEnumSha UpdateOrganizationSnmpRequestBodyV3AuthModeEnum = "SHA"
)

func (e UpdateOrganizationSnmpRequestBodyV3AuthModeEnum) ToPointer() *UpdateOrganizationSnmpRequestBodyV3AuthModeEnum {
	return &e
}

func (e *UpdateOrganizationSnmpRequestBodyV3AuthModeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "MD5":
		fallthrough
	case "SHA":
		*e = UpdateOrganizationSnmpRequestBodyV3AuthModeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateOrganizationSnmpRequestBodyV3AuthModeEnum: %v", v)
	}
}

// UpdateOrganizationSnmpRequestBodyV3PrivModeEnum - The SNMP version 3 privacy mode. Can be either 'DES' or 'AES128'.
type UpdateOrganizationSnmpRequestBodyV3PrivModeEnum string

const (
	UpdateOrganizationSnmpRequestBodyV3PrivModeEnumAes128 UpdateOrganizationSnmpRequestBodyV3PrivModeEnum = "AES128"
	UpdateOrganizationSnmpRequestBodyV3PrivModeEnumDes    UpdateOrganizationSnmpRequestBodyV3PrivModeEnum = "DES"
)

func (e UpdateOrganizationSnmpRequestBodyV3PrivModeEnum) ToPointer() *UpdateOrganizationSnmpRequestBodyV3PrivModeEnum {
	return &e
}

func (e *UpdateOrganizationSnmpRequestBodyV3PrivModeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "AES128":
		fallthrough
	case "DES":
		*e = UpdateOrganizationSnmpRequestBodyV3PrivModeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateOrganizationSnmpRequestBodyV3PrivModeEnum: %v", v)
	}
}

type UpdateOrganizationSnmpRequestBody struct {
	// The list of IPv4 addresses that are allowed to access the SNMP server.
	PeerIps []string `json:"peerIps,omitempty"`
	// Boolean indicating whether SNMP version 2c is enabled for the organization.
	V2cEnabled *bool `json:"v2cEnabled,omitempty"`
	// The SNMP version 3 authentication mode. Can be either 'MD5' or 'SHA'.
	V3AuthMode *UpdateOrganizationSnmpRequestBodyV3AuthModeEnum `json:"v3AuthMode,omitempty"`
	// The SNMP version 3 authentication password. Must be at least 8 characters if specified.
	V3AuthPass *string `json:"v3AuthPass,omitempty"`
	// Boolean indicating whether SNMP version 3 is enabled for the organization.
	V3Enabled *bool `json:"v3Enabled,omitempty"`
	// The SNMP version 3 privacy mode. Can be either 'DES' or 'AES128'.
	V3PrivMode *UpdateOrganizationSnmpRequestBodyV3PrivModeEnum `json:"v3PrivMode,omitempty"`
	// The SNMP version 3 privacy password. Must be at least 8 characters if specified.
	V3PrivPass *string `json:"v3PrivPass,omitempty"`
}

type UpdateOrganizationSnmpRequest struct {
	RequestBody    *UpdateOrganizationSnmpRequestBody `request:"mediaType=application/json"`
	OrganizationID string                             `pathParam:"style=simple,explode=false,name=organizationId"`
}

type UpdateOrganizationSnmpResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Successful operation
	UpdateOrganizationSnmp200ApplicationJSONObject map[string]interface{}
}
