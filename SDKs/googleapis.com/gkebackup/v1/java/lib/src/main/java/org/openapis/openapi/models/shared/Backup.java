/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Backup - Represents a request to perform a single point-in-time capture of some portion of the state of a GKE cluster, the record of the backup operation itself, and an anchor for the underlying artifacts that comprise the Backup (the config backup and VolumeBackups). Next id: 28
 */
public class Backup {
    /**
     * Output only. If True, all namespaces were included in the Backup.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("allNamespaces")
    public Boolean allNamespaces;

    public Backup withAllNamespaces(Boolean allNamespaces) {
        this.allNamespaces = allNamespaces;
        return this;
    }
    
    /**
     * Information about the GKE cluster from which this Backup was created.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("clusterMetadata")
    public ClusterMetadata clusterMetadata;

    public Backup withClusterMetadata(ClusterMetadata clusterMetadata) {
        this.clusterMetadata = clusterMetadata;
        return this;
    }
    
    /**
     * Output only. Completion time of the Backup
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("completeTime")
    public String completeTime;

    public Backup withCompleteTime(String completeTime) {
        this.completeTime = completeTime;
        return this;
    }
    
    /**
     * Output only. The size of the config backup in bytes.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("configBackupSizeBytes")
    public String configBackupSizeBytes;

    public Backup withConfigBackupSizeBytes(String configBackupSizeBytes) {
        this.configBackupSizeBytes = configBackupSizeBytes;
        return this;
    }
    
    /**
     * Output only. Whether or not the Backup contains Kubernetes Secrets. Controlled by the parent BackupPlan's include_secrets value.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("containsSecrets")
    public Boolean containsSecrets;

    public Backup withContainsSecrets(Boolean containsSecrets) {
        this.containsSecrets = containsSecrets;
        return this;
    }
    
    /**
     * Output only. Whether or not the Backup contains volume data. Controlled by the parent BackupPlan's include_volume_data value.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("containsVolumeData")
    public Boolean containsVolumeData;

    public Backup withContainsVolumeData(Boolean containsVolumeData) {
        this.containsVolumeData = containsVolumeData;
        return this;
    }
    
    /**
     * Output only. The timestamp when this Backup resource was created.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("createTime")
    public String createTime;

    public Backup withCreateTime(String createTime) {
        this.createTime = createTime;
        return this;
    }
    
    /**
     * Minimum age for this Backup (in days). If this field is set to a non-zero value, the Backup will be "locked" against deletion (either manual or automatic deletion) for the number of days provided (measured from the creation time of the Backup). MUST be an integer value between 0-90 (inclusive). Defaults to parent BackupPlan's backup_delete_lock_days setting and may only be increased (either at creation time or in a subsequent update).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("deleteLockDays")
    public Integer deleteLockDays;

    public Backup withDeleteLockDays(Integer deleteLockDays) {
        this.deleteLockDays = deleteLockDays;
        return this;
    }
    
    /**
     * Output only. The time at which an existing delete lock will expire for this backup (calculated from create_time + delete_lock_days).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("deleteLockExpireTime")
    public String deleteLockExpireTime;

    public Backup withDeleteLockExpireTime(String deleteLockExpireTime) {
        this.deleteLockExpireTime = deleteLockExpireTime;
        return this;
    }
    
    /**
     * User specified descriptive string for this Backup.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    public String description;

    public Backup withDescription(String description) {
        this.description = description;
        return this;
    }
    
    /**
     * Defined a customer managed encryption key that will be used to encrypt Backup artifacts.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("encryptionKey")
    public EncryptionKey encryptionKey;

    public Backup withEncryptionKey(EncryptionKey encryptionKey) {
        this.encryptionKey = encryptionKey;
        return this;
    }
    
    /**
     * Output only. `etag` is used for optimistic concurrency control as a way to help prevent simultaneous updates of a backup from overwriting each other. It is strongly suggested that systems make use of the `etag` in the read-modify-write cycle to perform backup updates in order to avoid race conditions: An `etag` is returned in the response to `GetBackup`, and systems are expected to put that etag in the request to `UpdateBackup` or `DeleteBackup` to ensure that their change will be applied to the same version of the resource.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("etag")
    public String etag;

    public Backup withEtag(String etag) {
        this.etag = etag;
        return this;
    }
    
    /**
     * A set of custom labels supplied by user.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("labels")
    public java.util.Map<String, String> labels;

    public Backup withLabels(java.util.Map<String, String> labels) {
        this.labels = labels;
        return this;
    }
    
    /**
     * Output only. This flag indicates whether this Backup resource was created manually by a user or via a schedule in the BackupPlan. A value of True means that the Backup was created manually.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("manual")
    public Boolean manual;

    public Backup withManual(Boolean manual) {
        this.manual = manual;
        return this;
    }
    
    /**
     * Output only. The fully qualified name of the Backup. `projects/* /locations/* /backupPlans/* /backups/*`
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    public String name;

    public Backup withName(String name) {
        this.name = name;
        return this;
    }
    
    /**
     * Output only. The total number of Kubernetes Pods contained in the Backup.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("podCount")
    public Integer podCount;

    public Backup withPodCount(Integer podCount) {
        this.podCount = podCount;
        return this;
    }
    
    /**
     * Output only. The total number of Kubernetes resources included in the Backup.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("resourceCount")
    public Integer resourceCount;

    public Backup withResourceCount(Integer resourceCount) {
        this.resourceCount = resourceCount;
        return this;
    }
    
    /**
     * The age (in days) after which this Backup will be automatically deleted. Must be an integer value &gt;= 0: - If 0, no automatic deletion will occur for this Backup. - If not 0, this must be &gt;= delete_lock_days and &lt;= 365. Once a Backup is created, this value may only be increased. Defaults to the parent BackupPlan's backup_retain_days value.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("retainDays")
    public Integer retainDays;

    public Backup withRetainDays(Integer retainDays) {
        this.retainDays = retainDays;
        return this;
    }
    
    /**
     * Output only. The time at which this Backup will be automatically deleted (calculated from create_time + retain_days).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("retainExpireTime")
    public String retainExpireTime;

    public Backup withRetainExpireTime(String retainExpireTime) {
        this.retainExpireTime = retainExpireTime;
        return this;
    }
    
    /**
     * A list of namespaced Kubernetes resources.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("selectedApplications")
    public NamespacedNames selectedApplications;

    public Backup withSelectedApplications(NamespacedNames selectedApplications) {
        this.selectedApplications = selectedApplications;
        return this;
    }
    
    /**
     * A list of Kubernetes Namespaces
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("selectedNamespaces")
    public Namespaces selectedNamespaces;

    public Backup withSelectedNamespaces(Namespaces selectedNamespaces) {
        this.selectedNamespaces = selectedNamespaces;
        return this;
    }
    
    /**
     * Output only. The total size of the Backup in bytes = config backup size + sum(volume backup sizes)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sizeBytes")
    public String sizeBytes;

    public Backup withSizeBytes(String sizeBytes) {
        this.sizeBytes = sizeBytes;
        return this;
    }
    
    /**
     * Output only. Current state of the Backup
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("state")
    public BackupStateEnum state;

    public Backup withState(BackupStateEnum state) {
        this.state = state;
        return this;
    }
    
    /**
     * Output only. Human-readable description of why the backup is in the current `state`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("stateReason")
    public String stateReason;

    public Backup withStateReason(String stateReason) {
        this.stateReason = stateReason;
        return this;
    }
    
    /**
     * Output only. Server generated global unique identifier of [UUID4](https://en.wikipedia.org/wiki/Universally_unique_identifier)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("uid")
    public String uid;

    public Backup withUid(String uid) {
        this.uid = uid;
        return this;
    }
    
    /**
     * Output only. The timestamp when this Backup resource was last updated.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("updateTime")
    public String updateTime;

    public Backup withUpdateTime(String updateTime) {
        this.updateTime = updateTime;
        return this;
    }
    
    /**
     * Output only. The total number of volume backups contained in the Backup.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("volumeCount")
    public Integer volumeCount;

    public Backup withVolumeCount(Integer volumeCount) {
        this.volumeCount = volumeCount;
        return this;
    }
    
    public Backup(){}
}
