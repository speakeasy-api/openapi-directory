/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * WorkerLifecycleEvent - A report of an event in a worker's lifecycle. The proto contains one event, because the worker is expected to asynchronously send each message immediately after the event. Due to this asynchrony, messages may arrive out of order (or missing), and it is up to the consumer to interpret. The timestamp of the event is in the enclosing WorkerMessage proto.
 */
public class WorkerLifecycleEvent {
    /**
     * The start time of this container. All events will report this so that events can be grouped together across container/VM restarts.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("containerStartTime")
    public String containerStartTime;
    public WorkerLifecycleEvent withContainerStartTime(String containerStartTime) {
        this.containerStartTime = containerStartTime;
        return this;
    }
    
    /**
     * The event being reported.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("event")
    public WorkerLifecycleEventEventEnum event;
    public WorkerLifecycleEvent withEvent(WorkerLifecycleEventEventEnum event) {
        this.event = event;
        return this;
    }
    
    /**
     * Other stats that can accompany an event. E.g. { "downloaded_bytes" : "123456" }
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("metadata")
    public java.util.Map<String, String> metadata;
    public WorkerLifecycleEvent withMetadata(java.util.Map<String, String> metadata) {
        this.metadata = metadata;
        return this;
    }
    
}
