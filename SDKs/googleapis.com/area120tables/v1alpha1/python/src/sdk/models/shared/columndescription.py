"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import datedetails as shared_datedetails
from ..shared import labeleditem as shared_labeleditem
from ..shared import lookupdetails as shared_lookupdetails
from ..shared import relationshipdetails as shared_relationshipdetails
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ColumnDescription:
    r"""Details on a column in the table."""
    
    data_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dataType'), 'exclude': lambda f: f is None }})
    r"""Data type of the column Supported types are auto_id, boolean, boolean_list, creator, create_timestamp, date, dropdown, location, integer, integer_list, number, number_list, person, person_list, tags, check_list, text, text_list, update_timestamp, updater, relationship, file_attachment_list. These types directly map to the column types supported on Tables website."""  
    date_details: Optional[shared_datedetails.DateDetails] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dateDetails'), 'exclude': lambda f: f is None }})
    r"""Details about a date column."""  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""Internal id for a column."""  
    labels: Optional[list[shared_labeleditem.LabeledItem]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('labels'), 'exclude': lambda f: f is None }})
    r"""Optional. Range of labeled values for the column. Some columns like tags and drop-downs limit the values to a set of possible values. We return the range of values in such cases to help clients implement better user data validation."""  
    lookup_details: Optional[shared_lookupdetails.LookupDetails] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lookupDetails'), 'exclude': lambda f: f is None }})
    r"""Details about a lookup column whose value comes from the associated relationship."""  
    multiple_values_disallowed: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('multipleValuesDisallowed'), 'exclude': lambda f: f is None }})
    r"""Optional. Indicates whether or not multiple values are allowed for array types where such a restriction is possible."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""column name"""  
    readonly: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('readonly'), 'exclude': lambda f: f is None }})
    r"""Optional. Indicates that values for the column cannot be set by the user."""  
    relationship_details: Optional[shared_relationshipdetails.RelationshipDetails] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('relationshipDetails'), 'exclude': lambda f: f is None }})
    r"""Details about a relationship column."""  
    