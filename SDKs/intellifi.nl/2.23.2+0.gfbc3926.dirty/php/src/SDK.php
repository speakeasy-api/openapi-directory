<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

/**
 * SDK - This document describes the [Intellifi Brain](https://intellifi.zendesk.com/hc/en-us/categories/360000685454)
 * 
 * Web API specification using the [OpenAPI specification](https://github.com/OAI/OpenAPI-Specification).
 * 
 * The Brain Web API is a RESTful API that allows you to interact with the
 * [Intellifi devices](https://intellifi.zendesk.com/hc/en-us/categories/360000685434) and
 * services in a powerful and simple way. Our end-to-end solution allows you to
 * localize your items/assets based on technologies such as RFID and Bluetooth.
 * 
 * # Try it out!
 * 
 * The API can be tried out and tested using the ['api-doc/tryitout' endpoint on this site](./tryitout/).
 * This UI allows anyone to visualize and interact with the API’s resources without having any of the implementation logic in place.
 * It’s automatically generated from this Specification, with the visual documentation making it easy for back end implementation and client side consumption.
 * 
 * # Authentication
 * 
 * Applications are required to provide some form of authentication to the API
 * for every secured endpoint. The Brain offers two forms of authentication.
 * 
 * - API key (Via an HTTP request header or URL parameter)
 * - Session cookie
 * 
 * <!-- ReDoc-Inject: <security-definitions> -->
 * 
 * # See also
 * 
 * - About Intellifi and what we do: [intellifi.nl](https://intellifi.nl)
 * - Technical and background information: [intellifi.zendesk.com](https://intellifi.zendesk.com)
 * 
 * https://intellifi.zendesk.com - Find out more
 * 
 * @package OpenAPI\OpenAPI
 * @access public
 * @see https://intellifi.zendesk.com
 */
class SDK
{
	public const SERVERS = [
        /** Cloud hosted Brain API endpoint. */
		'https://{protocol}://{customer}.intellifi.{tld}/api',
	];
  	
    /**
     * Read-only route providing information about how the requesting client is authenticated on the API, as well as corresponding permissions.
     * 
     * 
     * 
     * @var Authinfo $$authinfo
     */
	public Authinfo $authinfo;
	
    /**
     * The `blobs` resource provides a service for storing binary objects on the Brain, e.g. images.
     * 
     * Intended for applications that interact with the Brain but do not or cannot have their own (centralized) persistent storage.
     * 
     * See also the `kvpairs` resource.
     * 
     * 
     * @var Blobs $$blobs
     */
	public Blobs $blobs;
	
    /**
     * The `events` resource temporarily holds Brain events that match an event subscription in the `subscriptions` resource.
     * 
     * The subscription determines how long the events are held.
     * 
     * See also the `subscriptions` resource.
     * 
     * 
     * @var Events $$events
     */
	public Events $events;
	
    /**
     * The `items` resource contains data about things that can be tracked using the Brain.
     * 
     * When an item is detected for the first time by a device connected to the Brain, it will be added to this resource.
     * It will then be updated with information about where the item currently is, or where it has been seen for the last time.
     * 
     * 
     * @var Items $$items
     */
	public Items $items;
	
    /**
     * The `keys` resource contains the access keys used to authenticate requests to this API.
     * 
     * 
     * Note that this resource is only accessible for administrator users logged into the Brain Management Console.
     * It is not possible to access this resource using API key authentication.
     * This resource is therefore irrelevant to most applications.
     * 
     * 
     * @var Keys $$keys
     */
	public Keys $keys;
	
    /**
     * The `kvpairs` resource provides a service for storing generic JSON key/value pairs on the Brain.
     * 
     * Intended for applications that interact with the Brain but do not or cannot have their own (centralized) persistent storage.
     * 
     * See also the `blobs` resource.
     * 
     * 
     * @var Kvpairs $$kvpairs
     */
	public Kvpairs $kvpairs;
	
    /**
     * Location rules are directives for the localization engine that may be useful for certain solutions.
     * 
     * 
     * 
     * @var Locationrules $$locationrules
     */
	public Locationrules $locationrules;
	
    /**
     * The `locations` resource is an abstraction for the area around a physical location that items can be localized at.
     * 
     * 
     * 
     * @var Locations $$locations
     */
	public Locations $locations;
	
    /**
     * The `presences` resource is an abstraction for the detection of an item (from the `items` resource) at a location (from the `locations` resource).
     * 
     * Presences are always kept current by the Brain, i.e. if the hold time of a presence expires it is simply removed from the resource.
     * 
     * 
     * @var Presences $$presences
     */
	public Presences $presences;
	
    /**
     * The Brain consists of several software components with their own responsibilities, referred to as "services".
     * 
     * Some of these services have status information and/or configuration that can be managed using the `services` resource.
     * 
     * 
     * @var Services $$services
     */
	public Services $services;
	
    /**
     * It can be useful to group items or Smartspots in a list. The `sets` resource can be used to create and manage such list sets.
     * 
     * Sets can be utilized in various Brain Management Console utilities and can also be useful in custom Brain applications.
     * 
     * 
     * @var Sets $$sets
     */
	public Sets $sets;
	
    /**
     * The `spots` resource contains representations of Smartspot devices that have connected to this Brain at least once.
     * 
     * It is possible to configure Smartspots through this resource.
     * 
     * Smartspots also have their own locally stored sets, referred to as "spotsets".
     * Spotsets can be created and managed within a single spot instance or by using `spotsets` resource.
     * Created or updated spotsets are automatically synced between Smartspot and server.
     * 
     * 
     * @var Spots $$spots
     */
	public Spots $spots;
	
    /**
     * The `spotsets` resource contains a collection of set definitons for each Smartspot and allows for remote mananagement.
     * 
     * Spotsets are stored and used on the Smartspot locally and synced between Smartspot and server.
     * Spotsets primarly are used as an input for Sense&Control.
     * 
     * 
     * @var Spotsets $$spotsets
     */
	public Spotsets $spotsets;
	
    /**
     * The `subscriptions` resource contains rules to store and/or deliver events from the Brain event system.
     * 
     * 
     * See also the `events` resource.
     * 
     * 
     * @var Subscriptions $$subscriptions
     */
	public Subscriptions $subscriptions;
	
    /**
     * The `users` resource contains the user accounts that can log into the Brain Management Console.
     * 
     * 
     * Note that this resource is only accessible for administrator users logged into the Brain Management Console.
     * It is not possible to access this resource using API key authentication.
     * This resource is therefore irrelevant to most applications.
     * 
     * 
     * @var Users $$users
     */
	public Users $users;
		
	// SDK private variables namespaced with _ to avoid conflicts with API models
	private ?\GuzzleHttp\ClientInterface $_defaultClient;
	private ?\GuzzleHttp\ClientInterface $_securityClient;
	private ?Models\Shared\Security $_security;
	private string $_serverUrl;
	private string $_language = 'php';
	private string $_sdkVersion = '0.0.1';
	private string $_genVersion = 'internal';

	/**
	 * Returns a new instance of the SDK builder used to configure and create the SDK instance.
	 * 
	 * @return SDKBuilder
	 */
	public static function builder(): SDKBuilder
	{
		return new SDKBuilder();
	}

	/**
	 * @param \GuzzleHttp\ClientInterface|null $client	 
	 * @param Models\Shared\Security|null $security
	 * @param string $serverUrl
	 * @param array<string, string>|null $params
	 */
	public function __construct(?\GuzzleHttp\ClientInterface $client, ?Models\Shared\Security $security, string $serverUrl, ?array $params)
	{
		$this->_defaultClient = $client;
		
		if ($this->_defaultClient === null) {
			$this->_defaultClient = new \GuzzleHttp\Client([
				'timeout' => 60,
			]);
		}

		$this->_securityClient = null;
		if ($security !== null) {
			$this->_security = $security;
			$this->_securityClient = Utils\Utils::configureSecurityClient($this->_defaultClient, $this->_security);
		}
		
		if ($this->_securityClient === null) {
			$this->_securityClient = $this->_defaultClient;
		}

		if (!empty($serverUrl)) {
			$this->_serverUrl = Utils\Utils::templateUrl($serverUrl, $params);
		}
		
		if (empty($this->_serverUrl)) {
			$this->_serverUrl = $this::SERVERS[0];
		}
		
		$this->authinfo = new Authinfo(
			$this->_defaultClient,
			$this->_securityClient,
			$this->_serverUrl,
			$this->_language,
			$this->_sdkVersion,
			$this->_genVersion
		);
		
		$this->blobs = new Blobs(
			$this->_defaultClient,
			$this->_securityClient,
			$this->_serverUrl,
			$this->_language,
			$this->_sdkVersion,
			$this->_genVersion
		);
		
		$this->events = new Events(
			$this->_defaultClient,
			$this->_securityClient,
			$this->_serverUrl,
			$this->_language,
			$this->_sdkVersion,
			$this->_genVersion
		);
		
		$this->items = new Items(
			$this->_defaultClient,
			$this->_securityClient,
			$this->_serverUrl,
			$this->_language,
			$this->_sdkVersion,
			$this->_genVersion
		);
		
		$this->keys = new Keys(
			$this->_defaultClient,
			$this->_securityClient,
			$this->_serverUrl,
			$this->_language,
			$this->_sdkVersion,
			$this->_genVersion
		);
		
		$this->kvpairs = new Kvpairs(
			$this->_defaultClient,
			$this->_securityClient,
			$this->_serverUrl,
			$this->_language,
			$this->_sdkVersion,
			$this->_genVersion
		);
		
		$this->locationrules = new Locationrules(
			$this->_defaultClient,
			$this->_securityClient,
			$this->_serverUrl,
			$this->_language,
			$this->_sdkVersion,
			$this->_genVersion
		);
		
		$this->locations = new Locations(
			$this->_defaultClient,
			$this->_securityClient,
			$this->_serverUrl,
			$this->_language,
			$this->_sdkVersion,
			$this->_genVersion
		);
		
		$this->presences = new Presences(
			$this->_defaultClient,
			$this->_securityClient,
			$this->_serverUrl,
			$this->_language,
			$this->_sdkVersion,
			$this->_genVersion
		);
		
		$this->services = new Services(
			$this->_defaultClient,
			$this->_securityClient,
			$this->_serverUrl,
			$this->_language,
			$this->_sdkVersion,
			$this->_genVersion
		);
		
		$this->sets = new Sets(
			$this->_defaultClient,
			$this->_securityClient,
			$this->_serverUrl,
			$this->_language,
			$this->_sdkVersion,
			$this->_genVersion
		);
		
		$this->spots = new Spots(
			$this->_defaultClient,
			$this->_securityClient,
			$this->_serverUrl,
			$this->_language,
			$this->_sdkVersion,
			$this->_genVersion
		);
		
		$this->spotsets = new Spotsets(
			$this->_defaultClient,
			$this->_securityClient,
			$this->_serverUrl,
			$this->_language,
			$this->_sdkVersion,
			$this->_genVersion
		);
		
		$this->subscriptions = new Subscriptions(
			$this->_defaultClient,
			$this->_securityClient,
			$this->_serverUrl,
			$this->_language,
			$this->_sdkVersion,
			$this->_genVersion
		);
		
		$this->users = new Users(
			$this->_defaultClient,
			$this->_securityClient,
			$this->_serverUrl,
			$this->_language,
			$this->_sdkVersion,
			$this->_genVersion
		);
	}
}