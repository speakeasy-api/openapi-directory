/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * StreamingSetupTask - A task which initializes part of a streaming Dataflow job.
 */
public class StreamingSetupTask {
    /**
     * The user has requested drain.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("drain")
    public Boolean drain;

    public StreamingSetupTask withDrain(Boolean drain) {
        this.drain = drain;
        return this;
    }
    
    /**
     * The TCP port on which the worker should listen for messages from other streaming computation workers.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("receiveWorkPort")
    public Integer receiveWorkPort;

    public StreamingSetupTask withReceiveWorkPort(Integer receiveWorkPort) {
        this.receiveWorkPort = receiveWorkPort;
        return this;
    }
    
    /**
     * Streaming appliance snapshot configuration.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("snapshotConfig")
    public StreamingApplianceSnapshotConfig snapshotConfig;

    public StreamingSetupTask withSnapshotConfig(StreamingApplianceSnapshotConfig snapshotConfig) {
        this.snapshotConfig = snapshotConfig;
        return this;
    }
    
    /**
     * Global topology of the streaming Dataflow job, including all computations and their sharded locations.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("streamingComputationTopology")
    public TopologyConfig streamingComputationTopology;

    public StreamingSetupTask withStreamingComputationTopology(TopologyConfig streamingComputationTopology) {
        this.streamingComputationTopology = streamingComputationTopology;
        return this;
    }
    
    /**
     * The TCP port used by the worker to communicate with the Dataflow worker harness.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("workerHarnessPort")
    public Integer workerHarnessPort;

    public StreamingSetupTask withWorkerHarnessPort(Integer workerHarnessPort) {
        this.workerHarnessPort = workerHarnessPort;
        return this;
    }
    
    public StreamingSetupTask(){}
}
