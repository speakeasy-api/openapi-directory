"use strict";
/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SDK = exports.ServerList = void 0;
var accountinformationserviceais_1 = require("./accountinformationserviceais");
var commonservices_1 = require("./commonservices");
var confirmationoffundsservicepiis_1 = require("./confirmationoffundsservicepiis");
var paymentinitiationservicepis_1 = require("./paymentinitiationservicepis");
var signingbasketsservicesbs_1 = require("./signingbasketsservicesbs");
var axios_1 = __importDefault(require("axios"));
/**
 * Contains the list of servers available to the SDK
 */
exports.ServerList = [
    /**
     * Open Banking Project Switzerland Developer Portal
     */
    "https://api.dev.openbankingproject.ch",
];
/**
 * # Summary
 *
 * @remarks
 * The **Swiss NextGen API** is based on the NextGenPSD2 *Framework Version 1.3.4* of the Berlin Group which offers a modern, open, harmonised and interoperable set of
 * Application Programming Interfaces (APIs) as the safest and most efficient way to provide data securely.
 * The NextGen Framework reduces XS2A complexity and costs, addresses the problem of multiple competing standards
 * in Europe and, aligned with the goals of the Euro Retail Payments Board,
 * enables European banking customers to benefit from innovative products and services ('Banking as a Service')
 * by granting TPPs safe and secure (authenticated and authorised) access to their bank accounts and financial data.
 *
 * The Swiss edtion refines the message formats specific to Switzerland and defines some matching examples.
 *
 * The possible Approaches are:
 *   * Redirect SCA Approach
 *   * *(Not recommended by obp.ch community) OAuth SCA Approach*
 *   * *(Not recommended by obp.ch community) Decoupled SCA Approach*
 *   * *(Not recommended by obp.ch community) Embedded SCA Approach without SCA method*
 *   * *(Not recommended by obp.ch community) Embedded SCA Approach with only one SCA method available*
 *   * *(Not recommended by obp.ch community) Embedded SCA Approach with Selection of a SCA method*
 *
 *   Not every message defined in this API definition is necessary for all approaches.
 *   Furthermore this API definition does not differ between methods which are mandatory, conditional, or optional
 *   Therefore for a particular implementation of a compliant API it is only necessary to support
 *   a certain subset of the methods defined in this API definition.
 *
 *   **Please have a look at the implementation guidelines if you are not sure
 *   which message has to be used for the approach you are going to use.**
 *
 * ## Some General Remarks Related to this version of the OpenAPI Specification:
 * * **This API definition is based on the Implementation Guidelines of the [Berlin Group API](https://www.berlin-group.org/nextgenpsd2-downloads).**
 *   It is not a replacement in any sense.
 *   The main specification is (at the moment) always the Implementation Guidelines of the Berlin Group API.
 * * **This API definition contains the REST-API for requests from the PISP to the ASPSP.**
 * * **This API definition contains the messages for all different approaches defined in the Implementation Guidelines.**
 * * According to the OpenAPI-Specification [https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.1.md]
 *
 *     "If in is "header" and the name field is "Accept", "Content-Type" or "Authorization", the parameter definition SHALL be ignored."
 *
 *   The element "Accept" will not be defined in this file at any place.
 *
 *   The elements "Content-Type" and "Authorization" are implicitly defined by the OpenApi tags "content" and "security".
 *
 * * There are several predefined types which might occur in payment initiation messages,
 *   but are not used in the standard JSON messages in the Implementation Guidelines.
 *   Therefore they are not used in the corresponding messages in this file either.
 *   We added them for the convenience of the user.
 *   If there is a payment product, which needs these fields, one can easily use the predefined types.
 *   But the ASPSP need not to accept them in general.
 *
 * * **We omit the definition of all standard HTTP header elements (mandatory/optional/conditional)
 *   except they are mentioned in the Implementation Guidelines.**
 *   Therefore the implementer might add these in his own realisation of a comlient API in addition to the elements defined in this file.
 *
 * ## General Remarks on Data Types
 *
 * The Berlin Group definition of UTF-8 strings in context of the API have to support at least the following characters
 *
 * a b c d e f g h i j k l m n o p q r s t u v w x y z
 *
 * A B C D E F G H I J K L M N O P Q R S T U V W X Y Z
 *
 * 0 1 2 3 4 5 6 7 8 9
 *
 * / - ? : ( ) . , ' +
 *
 * Space
 *
 *
 * @see {@link https://github.com/openbankingproject-ch/obp-apis} - Full Documentation of NextGen Access to Account Interoperability Framework
 * (General Introduction Paper, Operational Rules, Implementation Guidelines)
 *
 */
var SDK = /** @class */ (function () {
    function SDK(props) {
        var _a, _b;
        this._language = "typescript";
        this._sdkVersion = "0.0.1";
        this._genVersion = "internal";
        this._serverURL = (_a = props === null || props === void 0 ? void 0 : props.serverURL) !== null && _a !== void 0 ? _a : exports.ServerList[0];
        this._defaultClient =
            (_b = props === null || props === void 0 ? void 0 : props.defaultClient) !== null && _b !== void 0 ? _b : axios_1.default.create({ baseURL: this._serverURL });
        this._securityClient = this._defaultClient;
        this.accountInformationServiceAIS = new accountinformationserviceais_1.AccountInformationServiceAIS(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.commonServices = new commonservices_1.CommonServices(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.confirmationOfFundsServicePIIS = new confirmationoffundsservicepiis_1.ConfirmationOfFundsServicePIIS(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.paymentInitiationServicePIS = new paymentinitiationservicepis_1.PaymentInitiationServicePIS(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.signingBasketsServiceSBS = new signingbasketsservicesbs_1.SigningBasketsServiceSBS(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
    }
    return SDK;
}());
exports.SDK = SDK;
