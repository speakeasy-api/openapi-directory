/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";

/**
 * Automation type
 */
export enum PatchAutomationsIdRequestBodyAutomationEnum {
  CreateFolder = "create_folder",
  RequestFile = "request_file",
  RequestMove = "request_move",
  CopyNewestFile = "copy_newest_file",
  DeleteFile = "delete_file",
  CopyFile = "copy_file",
  MoveFile = "move_file",
  As2Send = "as2_send",
  RunSync = "run_sync",
}

/**
 * How this automation is triggered to run. One of: `realtime`, `daily`, `custom_schedule`, `webhook`, `email`, or `action`.
 */
export enum PatchAutomationsIdRequestBodyTriggerEnum {
  Realtime = "realtime",
  Daily = "daily",
  CustomSchedule = "custom_schedule",
  Webhook = "webhook",
  Email = "email",
  Action = "action",
}

export class PatchAutomationsIdRequestBody extends SpeakeasyBase {
  /**
   * Automation type
   */
  @SpeakeasyMetadata({ data: "multipart_form, name=automation" })
  automation?: PatchAutomationsIdRequestBodyAutomationEnum;

  /**
   * Description for the this Automation.
   */
  @SpeakeasyMetadata({ data: "multipart_form, name=description" })
  description?: string;

  /**
   * DEPRECATED: Destination Path. Use `destinations` instead.
   */
  @SpeakeasyMetadata({ data: "multipart_form, name=destination" })
  destination?: string;

  /**
   * If set, this string in the destination path will be replaced with the value in `destination_replace_to`.
   */
  @SpeakeasyMetadata({ data: "multipart_form, name=destination_replace_from" })
  destinationReplaceFrom?: string;

  /**
   * If set, this string will replace the value `destination_replace_from` in the destination filename. You can use special patterns here.
   */
  @SpeakeasyMetadata({ data: "multipart_form, name=destination_replace_to" })
  destinationReplaceTo?: string;

  /**
   * A list of String destination paths or Hash of folder_path and optional file_path.
   */
  @SpeakeasyMetadata({ data: "multipart_form, name=destinations" })
  destinations?: string[];

  /**
   * If true, this automation will not run.
   */
  @SpeakeasyMetadata({ data: "multipart_form, name=disabled" })
  disabled?: boolean;

  /**
   * A list of group IDs the automation is associated with. If sent as a string, it should be comma-delimited.
   */
  @SpeakeasyMetadata({ data: "multipart_form, name=group_ids" })
  groupIds?: string;

  /**
   * How often to run this automation? One of: `day`, `week`, `week_end`, `month`, `month_end`, `quarter`, `quarter_end`, `year`, `year_end`
   */
  @SpeakeasyMetadata({ data: "multipart_form, name=interval" })
  interval?: string;

  /**
   * Name for this automation.
   */
  @SpeakeasyMetadata({ data: "multipart_form, name=name" })
  name?: string;

  /**
   * Path on which this Automation runs.  Supports globs.
   */
  @SpeakeasyMetadata({ data: "multipart_form, name=path" })
  path?: string;

  /**
   * Custom schedule for running this automation.
   */
  @SpeakeasyMetadata({ data: "multipart_form, name=schedule;json=true" })
  schedule?: Record<string, any>;

  /**
   * Source Path
   */
  @SpeakeasyMetadata({ data: "multipart_form, name=source" })
  source?: string;

  /**
   * A list of sync IDs the automation is associated with. If sent as a string, it should be comma-delimited.
   */
  @SpeakeasyMetadata({ data: "multipart_form, name=sync_ids" })
  syncIds?: string;

  /**
   * How this automation is triggered to run. One of: `realtime`, `daily`, `custom_schedule`, `webhook`, `email`, or `action`.
   */
  @SpeakeasyMetadata({ data: "multipart_form, name=trigger" })
  trigger?: PatchAutomationsIdRequestBodyTriggerEnum;

  /**
   * If trigger is `action`, this is the list of action types on which to trigger the automation. Valid actions are create, read, update, destroy, move, copy
   */
  @SpeakeasyMetadata({ data: "multipart_form, name=trigger_actions" })
  triggerActions?: string[];

  /**
   * A list of user IDs the automation is associated with. If sent as a string, it should be comma-delimited.
   */
  @SpeakeasyMetadata({ data: "multipart_form, name=user_ids" })
  userIds?: string;

  /**
   * A Hash of attributes specific to the automation type.
   */
  @SpeakeasyMetadata({ data: "multipart_form, name=value;json=true" })
  value?: Record<string, any>;
}

export class PatchAutomationsIdRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({ data: "request, media_type=multipart/form-data" })
  requestBody?: PatchAutomationsIdRequestBody;

  /**
   * Automation ID.
   */
  @SpeakeasyMetadata({ data: "pathParam, style=simple;explode=false;name=id" })
  id: number;
}

export class PatchAutomationsIdResponse extends SpeakeasyBase {
  /**
   * The Automations object.
   */
  @SpeakeasyMetadata()
  automationEntity?: shared.AutomationEntity;

  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;
}
