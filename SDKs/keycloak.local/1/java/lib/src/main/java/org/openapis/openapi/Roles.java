/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi;

import com.fasterxml.jackson.databind.ObjectMapper;
import java.net.http.HttpResponse;
import java.nio.charset.StandardCharsets;
import org.apache.http.NameValuePair;
import org.openapis.openapi.utils.HTTPClient;
import org.openapis.openapi.utils.HTTPRequest;
import org.openapis.openapi.utils.JSON;
import org.openapis.openapi.utils.SerializedBody;

public class Roles {
	
	private HTTPClient _defaultClient;
	private HTTPClient _securityClient;
	private String _serverUrl;
	private String _language;
	private String _sdkVersion;
	private String _genVersion;

	public Roles(HTTPClient defaultClient, HTTPClient securityClient, String serverUrl, String language, String sdkVersion, String genVersion) {
		this._defaultClient = defaultClient;
		this._securityClient = securityClient;
		this._serverUrl = serverUrl;
		this._language = language;
		this._sdkVersion = sdkVersion;
		this._genVersion = genVersion;
	}

    /**
     * Delete a role by name
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DeleteRealmClientsIdRolesRoleNameResponse deleteRealmClientsIdRolesRoleName(org.openapis.openapi.models.operations.DeleteRealmClientsIdRolesRoleNameRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DeleteRealmClientsIdRolesRoleNameRequest.class, baseUrl, "/{realm}/clients/{id}/roles/{role-name}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DeleteRealmClientsIdRolesRoleNameResponse res = new org.openapis.openapi.models.operations.DeleteRealmClientsIdRolesRoleNameResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if ((httpRes.statusCode() >= 200 && httpRes.statusCode() < 300)) {
        }

        return res;
    }

    /**
     * Remove roles from the role\u2019s composite
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DeleteRealmClientsIdRolesRoleNameCompositesResponse deleteRealmClientsIdRolesRoleNameComposites(org.openapis.openapi.models.operations.DeleteRealmClientsIdRolesRoleNameCompositesRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DeleteRealmClientsIdRolesRoleNameCompositesRequest.class, baseUrl, "/{realm}/clients/{id}/roles/{role-name}/composites", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DeleteRealmClientsIdRolesRoleNameCompositesResponse res = new org.openapis.openapi.models.operations.DeleteRealmClientsIdRolesRoleNameCompositesResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if ((httpRes.statusCode() >= 200 && httpRes.statusCode() < 300)) {
        }

        return res;
    }

    /**
     * Delete a role by name
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DeleteRealmRolesRoleNameResponse deleteRealmRolesRoleName(org.openapis.openapi.models.operations.DeleteRealmRolesRoleNameRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DeleteRealmRolesRoleNameRequest.class, baseUrl, "/{realm}/roles/{role-name}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DeleteRealmRolesRoleNameResponse res = new org.openapis.openapi.models.operations.DeleteRealmRolesRoleNameResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if ((httpRes.statusCode() >= 200 && httpRes.statusCode() < 300)) {
        }

        return res;
    }

    /**
     * Remove roles from the role\u2019s composite
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DeleteRealmRolesRoleNameCompositesResponse deleteRealmRolesRoleNameComposites(org.openapis.openapi.models.operations.DeleteRealmRolesRoleNameCompositesRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DeleteRealmRolesRoleNameCompositesRequest.class, baseUrl, "/{realm}/roles/{role-name}/composites", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DeleteRealmRolesRoleNameCompositesResponse res = new org.openapis.openapi.models.operations.DeleteRealmRolesRoleNameCompositesResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if ((httpRes.statusCode() >= 200 && httpRes.statusCode() < 300)) {
        }

        return res;
    }

    /**
     * Get all roles for the realm or client
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetRealmClientsIdRolesResponse getRealmClientsIdRoles(org.openapis.openapi.models.operations.GetRealmClientsIdRolesRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetRealmClientsIdRolesRequest.class, baseUrl, "/{realm}/clients/{id}/roles", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.GetRealmClientsIdRolesRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetRealmClientsIdRolesResponse res = new org.openapis.openapi.models.operations.GetRealmClientsIdRolesResponse() {{
            roleRepresentations = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if ((httpRes.statusCode() >= 200 && httpRes.statusCode() < 300)) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.RoleRepresentation[] out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.RoleRepresentation[].class);
                res.roleRepresentations = out;
            }
        }

        return res;
    }

    /**
     * Get a role by name
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetRealmClientsIdRolesRoleNameResponse getRealmClientsIdRolesRoleName(org.openapis.openapi.models.operations.GetRealmClientsIdRolesRoleNameRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetRealmClientsIdRolesRoleNameRequest.class, baseUrl, "/{realm}/clients/{id}/roles/{role-name}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetRealmClientsIdRolesRoleNameResponse res = new org.openapis.openapi.models.operations.GetRealmClientsIdRolesRoleNameResponse() {{
            roleRepresentation = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if ((httpRes.statusCode() >= 200 && httpRes.statusCode() < 300)) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.RoleRepresentation out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.RoleRepresentation.class);
                res.roleRepresentation = out;
            }
        }

        return res;
    }

    /**
     * Get composites of the role
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetRealmClientsIdRolesRoleNameCompositesResponse getRealmClientsIdRolesRoleNameComposites(org.openapis.openapi.models.operations.GetRealmClientsIdRolesRoleNameCompositesRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetRealmClientsIdRolesRoleNameCompositesRequest.class, baseUrl, "/{realm}/clients/{id}/roles/{role-name}/composites", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetRealmClientsIdRolesRoleNameCompositesResponse res = new org.openapis.openapi.models.operations.GetRealmClientsIdRolesRoleNameCompositesResponse() {{
            roleRepresentations = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if ((httpRes.statusCode() >= 200 && httpRes.statusCode() < 300)) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.RoleRepresentation[] out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.RoleRepresentation[].class);
                res.roleRepresentations = out;
            }
        }

        return res;
    }

    /**
     * An app-level roles for the specified app for the role\u2019s composite
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetRealmClientsIdRolesRoleNameCompositesClientsClientResponse getRealmClientsIdRolesRoleNameCompositesClientsClient(org.openapis.openapi.models.operations.GetRealmClientsIdRolesRoleNameCompositesClientsClientRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetRealmClientsIdRolesRoleNameCompositesClientsClientRequest.class, baseUrl, "/{realm}/clients/{id}/roles/{role-name}/composites/clients/{client}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetRealmClientsIdRolesRoleNameCompositesClientsClientResponse res = new org.openapis.openapi.models.operations.GetRealmClientsIdRolesRoleNameCompositesClientsClientResponse() {{
            roleRepresentations = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if ((httpRes.statusCode() >= 200 && httpRes.statusCode() < 300)) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.RoleRepresentation[] out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.RoleRepresentation[].class);
                res.roleRepresentations = out;
            }
        }

        return res;
    }

    /**
     * Get realm-level roles of the role\u2019s composite
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetRealmClientsIdRolesRoleNameCompositesRealmResponse getRealmClientsIdRolesRoleNameCompositesRealm(org.openapis.openapi.models.operations.GetRealmClientsIdRolesRoleNameCompositesRealmRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetRealmClientsIdRolesRoleNameCompositesRealmRequest.class, baseUrl, "/{realm}/clients/{id}/roles/{role-name}/composites/realm", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetRealmClientsIdRolesRoleNameCompositesRealmResponse res = new org.openapis.openapi.models.operations.GetRealmClientsIdRolesRoleNameCompositesRealmResponse() {{
            roleRepresentations = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if ((httpRes.statusCode() >= 200 && httpRes.statusCode() < 300)) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.RoleRepresentation[] out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.RoleRepresentation[].class);
                res.roleRepresentations = out;
            }
        }

        return res;
    }

    /**
     * Return List of Groups that have the specified role name
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetRealmClientsIdRolesRoleNameGroupsResponse getRealmClientsIdRolesRoleNameGroups(org.openapis.openapi.models.operations.GetRealmClientsIdRolesRoleNameGroupsRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetRealmClientsIdRolesRoleNameGroupsRequest.class, baseUrl, "/{realm}/clients/{id}/roles/{role-name}/groups", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.GetRealmClientsIdRolesRoleNameGroupsRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetRealmClientsIdRolesRoleNameGroupsResponse res = new org.openapis.openapi.models.operations.GetRealmClientsIdRolesRoleNameGroupsResponse() {{
            groupRepresentations = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if ((httpRes.statusCode() >= 200 && httpRes.statusCode() < 300)) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.GroupRepresentation[] out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.GroupRepresentation[].class);
                res.groupRepresentations = out;
            }
        }

        return res;
    }

    /**
     * Return object stating whether role Authoirzation permissions have been initialized or not and a reference
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetRealmClientsIdRolesRoleNameManagementPermissionsResponse getRealmClientsIdRolesRoleNameManagementPermissions(org.openapis.openapi.models.operations.GetRealmClientsIdRolesRoleNameManagementPermissionsRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetRealmClientsIdRolesRoleNameManagementPermissionsRequest.class, baseUrl, "/{realm}/clients/{id}/roles/{role-name}/management/permissions", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetRealmClientsIdRolesRoleNameManagementPermissionsResponse res = new org.openapis.openapi.models.operations.GetRealmClientsIdRolesRoleNameManagementPermissionsResponse() {{
            managementPermissionReference = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if ((httpRes.statusCode() >= 200 && httpRes.statusCode() < 300)) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ManagementPermissionReference out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ManagementPermissionReference.class);
                res.managementPermissionReference = out;
            }
        }

        return res;
    }

    /**
     * Return List of Users that have the specified role name
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetRealmClientsIdRolesRoleNameUsersResponse getRealmClientsIdRolesRoleNameUsers(org.openapis.openapi.models.operations.GetRealmClientsIdRolesRoleNameUsersRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetRealmClientsIdRolesRoleNameUsersRequest.class, baseUrl, "/{realm}/clients/{id}/roles/{role-name}/users", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.GetRealmClientsIdRolesRoleNameUsersRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetRealmClientsIdRolesRoleNameUsersResponse res = new org.openapis.openapi.models.operations.GetRealmClientsIdRolesRoleNameUsersResponse() {{
            userRepresentations = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if ((httpRes.statusCode() >= 200 && httpRes.statusCode() < 300)) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.UserRepresentation[] out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.UserRepresentation[].class);
                res.userRepresentations = out;
            }
        }

        return res;
    }

    /**
     * Get all roles for the realm or client
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetRealmRolesResponse getRealmRoles(org.openapis.openapi.models.operations.GetRealmRolesRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetRealmRolesRequest.class, baseUrl, "/{realm}/roles", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.GetRealmRolesRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetRealmRolesResponse res = new org.openapis.openapi.models.operations.GetRealmRolesResponse() {{
            roleRepresentations = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if ((httpRes.statusCode() >= 200 && httpRes.statusCode() < 300)) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.RoleRepresentation[] out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.RoleRepresentation[].class);
                res.roleRepresentations = out;
            }
        }

        return res;
    }

    /**
     * Get a role by name
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetRealmRolesRoleNameResponse getRealmRolesRoleName(org.openapis.openapi.models.operations.GetRealmRolesRoleNameRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetRealmRolesRoleNameRequest.class, baseUrl, "/{realm}/roles/{role-name}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetRealmRolesRoleNameResponse res = new org.openapis.openapi.models.operations.GetRealmRolesRoleNameResponse() {{
            roleRepresentation = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if ((httpRes.statusCode() >= 200 && httpRes.statusCode() < 300)) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.RoleRepresentation out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.RoleRepresentation.class);
                res.roleRepresentation = out;
            }
        }

        return res;
    }

    /**
     * Get composites of the role
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetRealmRolesRoleNameCompositesResponse getRealmRolesRoleNameComposites(org.openapis.openapi.models.operations.GetRealmRolesRoleNameCompositesRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetRealmRolesRoleNameCompositesRequest.class, baseUrl, "/{realm}/roles/{role-name}/composites", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetRealmRolesRoleNameCompositesResponse res = new org.openapis.openapi.models.operations.GetRealmRolesRoleNameCompositesResponse() {{
            roleRepresentations = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if ((httpRes.statusCode() >= 200 && httpRes.statusCode() < 300)) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.RoleRepresentation[] out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.RoleRepresentation[].class);
                res.roleRepresentations = out;
            }
        }

        return res;
    }

    /**
     * An app-level roles for the specified app for the role\u2019s composite
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetRealmRolesRoleNameCompositesClientsClientResponse getRealmRolesRoleNameCompositesClientsClient(org.openapis.openapi.models.operations.GetRealmRolesRoleNameCompositesClientsClientRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetRealmRolesRoleNameCompositesClientsClientRequest.class, baseUrl, "/{realm}/roles/{role-name}/composites/clients/{client}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetRealmRolesRoleNameCompositesClientsClientResponse res = new org.openapis.openapi.models.operations.GetRealmRolesRoleNameCompositesClientsClientResponse() {{
            roleRepresentations = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if ((httpRes.statusCode() >= 200 && httpRes.statusCode() < 300)) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.RoleRepresentation[] out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.RoleRepresentation[].class);
                res.roleRepresentations = out;
            }
        }

        return res;
    }

    /**
     * Get realm-level roles of the role\u2019s composite
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetRealmRolesRoleNameCompositesRealmResponse getRealmRolesRoleNameCompositesRealm(org.openapis.openapi.models.operations.GetRealmRolesRoleNameCompositesRealmRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetRealmRolesRoleNameCompositesRealmRequest.class, baseUrl, "/{realm}/roles/{role-name}/composites/realm", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetRealmRolesRoleNameCompositesRealmResponse res = new org.openapis.openapi.models.operations.GetRealmRolesRoleNameCompositesRealmResponse() {{
            roleRepresentations = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if ((httpRes.statusCode() >= 200 && httpRes.statusCode() < 300)) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.RoleRepresentation[] out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.RoleRepresentation[].class);
                res.roleRepresentations = out;
            }
        }

        return res;
    }

    /**
     * Return List of Groups that have the specified role name
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetRealmRolesRoleNameGroupsResponse getRealmRolesRoleNameGroups(org.openapis.openapi.models.operations.GetRealmRolesRoleNameGroupsRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetRealmRolesRoleNameGroupsRequest.class, baseUrl, "/{realm}/roles/{role-name}/groups", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.GetRealmRolesRoleNameGroupsRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetRealmRolesRoleNameGroupsResponse res = new org.openapis.openapi.models.operations.GetRealmRolesRoleNameGroupsResponse() {{
            groupRepresentations = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if ((httpRes.statusCode() >= 200 && httpRes.statusCode() < 300)) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.GroupRepresentation[] out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.GroupRepresentation[].class);
                res.groupRepresentations = out;
            }
        }

        return res;
    }

    /**
     * Return object stating whether role Authoirzation permissions have been initialized or not and a reference
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetRealmRolesRoleNameManagementPermissionsResponse getRealmRolesRoleNameManagementPermissions(org.openapis.openapi.models.operations.GetRealmRolesRoleNameManagementPermissionsRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetRealmRolesRoleNameManagementPermissionsRequest.class, baseUrl, "/{realm}/roles/{role-name}/management/permissions", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetRealmRolesRoleNameManagementPermissionsResponse res = new org.openapis.openapi.models.operations.GetRealmRolesRoleNameManagementPermissionsResponse() {{
            managementPermissionReference = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if ((httpRes.statusCode() >= 200 && httpRes.statusCode() < 300)) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ManagementPermissionReference out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ManagementPermissionReference.class);
                res.managementPermissionReference = out;
            }
        }

        return res;
    }

    /**
     * Return List of Users that have the specified role name
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetRealmRolesRoleNameUsersResponse getRealmRolesRoleNameUsers(org.openapis.openapi.models.operations.GetRealmRolesRoleNameUsersRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetRealmRolesRoleNameUsersRequest.class, baseUrl, "/{realm}/roles/{role-name}/users", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.GetRealmRolesRoleNameUsersRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetRealmRolesRoleNameUsersResponse res = new org.openapis.openapi.models.operations.GetRealmRolesRoleNameUsersResponse() {{
            userRepresentations = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if ((httpRes.statusCode() >= 200 && httpRes.statusCode() < 300)) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.UserRepresentation[] out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.UserRepresentation[].class);
                res.userRepresentations = out;
            }
        }

        return res;
    }

    /**
     * Create a new role for the realm or client
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.PostRealmClientsIdRolesResponse postRealmClientsIdRoles(org.openapis.openapi.models.operations.PostRealmClientsIdRolesRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.PostRealmClientsIdRolesRequest.class, baseUrl, "/{realm}/clients/{id}/roles", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "roleRepresentation", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.PostRealmClientsIdRolesResponse res = new org.openapis.openapi.models.operations.PostRealmClientsIdRolesResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if ((httpRes.statusCode() >= 200 && httpRes.statusCode() < 300)) {
        }

        return res;
    }

    /**
     * Add a composite to the role
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.PostRealmClientsIdRolesRoleNameCompositesResponse postRealmClientsIdRolesRoleNameComposites(org.openapis.openapi.models.operations.PostRealmClientsIdRolesRoleNameCompositesRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.PostRealmClientsIdRolesRoleNameCompositesRequest.class, baseUrl, "/{realm}/clients/{id}/roles/{role-name}/composites", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.PostRealmClientsIdRolesRoleNameCompositesResponse res = new org.openapis.openapi.models.operations.PostRealmClientsIdRolesRoleNameCompositesResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if ((httpRes.statusCode() >= 200 && httpRes.statusCode() < 300)) {
        }

        return res;
    }

    /**
     * Create a new role for the realm or client
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.PostRealmRolesResponse postRealmRoles(org.openapis.openapi.models.operations.PostRealmRolesRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.PostRealmRolesRequest.class, baseUrl, "/{realm}/roles", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "roleRepresentation", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.PostRealmRolesResponse res = new org.openapis.openapi.models.operations.PostRealmRolesResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if ((httpRes.statusCode() >= 200 && httpRes.statusCode() < 300)) {
        }

        return res;
    }

    /**
     * Add a composite to the role
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.PostRealmRolesRoleNameCompositesResponse postRealmRolesRoleNameComposites(org.openapis.openapi.models.operations.PostRealmRolesRoleNameCompositesRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.PostRealmRolesRoleNameCompositesRequest.class, baseUrl, "/{realm}/roles/{role-name}/composites", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.PostRealmRolesRoleNameCompositesResponse res = new org.openapis.openapi.models.operations.PostRealmRolesRoleNameCompositesResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if ((httpRes.statusCode() >= 200 && httpRes.statusCode() < 300)) {
        }

        return res;
    }

    /**
     * Update a role by name
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.PutRealmClientsIdRolesRoleNameResponse putRealmClientsIdRolesRoleName(org.openapis.openapi.models.operations.PutRealmClientsIdRolesRoleNameRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.PutRealmClientsIdRolesRoleNameRequest.class, baseUrl, "/{realm}/clients/{id}/roles/{role-name}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("PUT");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "roleRepresentation", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.PutRealmClientsIdRolesRoleNameResponse res = new org.openapis.openapi.models.operations.PutRealmClientsIdRolesRoleNameResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if ((httpRes.statusCode() >= 200 && httpRes.statusCode() < 300)) {
        }

        return res;
    }

    /**
     * Return object stating whether role Authoirzation permissions have been initialized or not and a reference
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.PutRealmClientsIdRolesRoleNameManagementPermissionsResponse putRealmClientsIdRolesRoleNameManagementPermissions(org.openapis.openapi.models.operations.PutRealmClientsIdRolesRoleNameManagementPermissionsRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.PutRealmClientsIdRolesRoleNameManagementPermissionsRequest.class, baseUrl, "/{realm}/clients/{id}/roles/{role-name}/management/permissions", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("PUT");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "managementPermissionReference", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.PutRealmClientsIdRolesRoleNameManagementPermissionsResponse res = new org.openapis.openapi.models.operations.PutRealmClientsIdRolesRoleNameManagementPermissionsResponse() {{
            managementPermissionReference = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if ((httpRes.statusCode() >= 200 && httpRes.statusCode() < 300)) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ManagementPermissionReference out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ManagementPermissionReference.class);
                res.managementPermissionReference = out;
            }
        }

        return res;
    }

    /**
     * Update a role by name
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.PutRealmRolesRoleNameResponse putRealmRolesRoleName(org.openapis.openapi.models.operations.PutRealmRolesRoleNameRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.PutRealmRolesRoleNameRequest.class, baseUrl, "/{realm}/roles/{role-name}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("PUT");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "roleRepresentation", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.PutRealmRolesRoleNameResponse res = new org.openapis.openapi.models.operations.PutRealmRolesRoleNameResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if ((httpRes.statusCode() >= 200 && httpRes.statusCode() < 300)) {
        }

        return res;
    }

    /**
     * Return object stating whether role Authoirzation permissions have been initialized or not and a reference
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.PutRealmRolesRoleNameManagementPermissionsResponse putRealmRolesRoleNameManagementPermissions(org.openapis.openapi.models.operations.PutRealmRolesRoleNameManagementPermissionsRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.PutRealmRolesRoleNameManagementPermissionsRequest.class, baseUrl, "/{realm}/roles/{role-name}/management/permissions", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("PUT");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "managementPermissionReference", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.PutRealmRolesRoleNameManagementPermissionsResponse res = new org.openapis.openapi.models.operations.PutRealmRolesRoleNameManagementPermissionsResponse() {{
            managementPermissionReference = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if ((httpRes.statusCode() >= 200 && httpRes.statusCode() < 300)) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ManagementPermissionReference out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ManagementPermissionReference.class);
                res.managementPermissionReference = out;
            }
        }

        return res;
    }
}