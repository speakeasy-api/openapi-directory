"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import awsdynamodbtablekeyschema as shared_awsdynamodbtablekeyschema
from ..shared import awsdynamodbtableprojection as shared_awsdynamodbtableprojection
from ..shared import awsdynamodbtableprovisionedthroughput as shared_awsdynamodbtableprovisionedthroughput
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class AwsDynamoDbTableGlobalSecondaryIndex:
    r"""Information abut a global secondary index for the table."""
    
    backfilling: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Backfilling'), 'exclude': lambda f: f is None }})  
    index_arn: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('IndexArn'), 'exclude': lambda f: f is None }})  
    index_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('IndexName'), 'exclude': lambda f: f is None }})  
    index_size_bytes: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('IndexSizeBytes'), 'exclude': lambda f: f is None }})  
    index_status: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('IndexStatus'), 'exclude': lambda f: f is None }})  
    item_count: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ItemCount'), 'exclude': lambda f: f is None }})  
    key_schema: Optional[list[shared_awsdynamodbtablekeyschema.AwsDynamoDbTableKeySchema]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('KeySchema'), 'exclude': lambda f: f is None }})  
    projection: Optional[shared_awsdynamodbtableprojection.AwsDynamoDbTableProjection] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Projection'), 'exclude': lambda f: f is None }})  
    provisioned_throughput: Optional[shared_awsdynamodbtableprovisionedthroughput.AwsDynamoDbTableProvisionedThroughput] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ProvisionedThroughput'), 'exclude': lambda f: f is None }})  
    