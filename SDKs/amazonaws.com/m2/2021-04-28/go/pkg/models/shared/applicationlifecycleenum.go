// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type ApplicationLifecycleEnum string

const (
	ApplicationLifecycleEnumCreating                ApplicationLifecycleEnum = "Creating"
	ApplicationLifecycleEnumCreated                 ApplicationLifecycleEnum = "Created"
	ApplicationLifecycleEnumAvailable               ApplicationLifecycleEnum = "Available"
	ApplicationLifecycleEnumReady                   ApplicationLifecycleEnum = "Ready"
	ApplicationLifecycleEnumStarting                ApplicationLifecycleEnum = "Starting"
	ApplicationLifecycleEnumRunning                 ApplicationLifecycleEnum = "Running"
	ApplicationLifecycleEnumStopping                ApplicationLifecycleEnum = "Stopping"
	ApplicationLifecycleEnumStopped                 ApplicationLifecycleEnum = "Stopped"
	ApplicationLifecycleEnumFailed                  ApplicationLifecycleEnum = "Failed"
	ApplicationLifecycleEnumDeleting                ApplicationLifecycleEnum = "Deleting"
	ApplicationLifecycleEnumDeletingFromEnvironment ApplicationLifecycleEnum = "Deleting From Environment"
)

func (e ApplicationLifecycleEnum) ToPointer() *ApplicationLifecycleEnum {
	return &e
}

func (e *ApplicationLifecycleEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Creating":
		fallthrough
	case "Created":
		fallthrough
	case "Available":
		fallthrough
	case "Ready":
		fallthrough
	case "Starting":
		fallthrough
	case "Running":
		fallthrough
	case "Stopping":
		fallthrough
	case "Stopped":
		fallthrough
	case "Failed":
		fallthrough
	case "Deleting":
		fallthrough
	case "Deleting From Environment":
		*e = ApplicationLifecycleEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ApplicationLifecycleEnum: %v", v)
	}
}
