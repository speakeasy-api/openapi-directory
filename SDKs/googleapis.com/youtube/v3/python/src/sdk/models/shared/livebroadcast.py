"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import livebroadcastcontentdetails as shared_livebroadcastcontentdetails
from ..shared import livebroadcastsnippet as shared_livebroadcastsnippet
from ..shared import livebroadcaststatistics as shared_livebroadcaststatistics
from ..shared import livebroadcaststatus as shared_livebroadcaststatus
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class LiveBroadcast:
    r"""A *liveBroadcast* resource represents an event that will be streamed, via live video, on YouTube."""
    
    content_details: Optional[shared_livebroadcastcontentdetails.LiveBroadcastContentDetails] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('contentDetails'), 'exclude': lambda f: f is None }})
    r"""Detailed settings of a broadcast."""  
    etag: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('etag'), 'exclude': lambda f: f is None }})
    r"""Etag of this resource."""  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""The ID that YouTube assigns to uniquely identify the broadcast."""  
    kind: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('kind'), 'exclude': lambda f: f is None }})
    r"""Identifies what kind of resource this is. Value: the fixed string \\"youtube#liveBroadcast\\"."""  
    snippet: Optional[shared_livebroadcastsnippet.LiveBroadcastSnippet] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('snippet'), 'exclude': lambda f: f is None }})
    r"""Basic broadcast information."""  
    statistics: Optional[shared_livebroadcaststatistics.LiveBroadcastStatistics] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('statistics'), 'exclude': lambda f: f is None }})
    r"""Statistics about the live broadcast. These represent a snapshot of the values at the time of the request. Statistics are only returned for live broadcasts."""  
    status: Optional[shared_livebroadcaststatus.LiveBroadcastStatus] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status'), 'exclude': lambda f: f is None }})
    r"""Live broadcast state."""  
    