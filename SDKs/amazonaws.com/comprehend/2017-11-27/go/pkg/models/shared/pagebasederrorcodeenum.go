// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type PageBasedErrorCodeEnum string

const (
	PageBasedErrorCodeEnumTextractBadPage                       PageBasedErrorCodeEnum = "TEXTRACT_BAD_PAGE"
	PageBasedErrorCodeEnumTextractProvisionedThroughputExceeded PageBasedErrorCodeEnum = "TEXTRACT_PROVISIONED_THROUGHPUT_EXCEEDED"
	PageBasedErrorCodeEnumPageCharactersExceeded                PageBasedErrorCodeEnum = "PAGE_CHARACTERS_EXCEEDED"
	PageBasedErrorCodeEnumPageSizeExceeded                      PageBasedErrorCodeEnum = "PAGE_SIZE_EXCEEDED"
	PageBasedErrorCodeEnumInternalServerError                   PageBasedErrorCodeEnum = "INTERNAL_SERVER_ERROR"
)

func (e PageBasedErrorCodeEnum) ToPointer() *PageBasedErrorCodeEnum {
	return &e
}

func (e *PageBasedErrorCodeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "TEXTRACT_BAD_PAGE":
		fallthrough
	case "TEXTRACT_PROVISIONED_THROUGHPUT_EXCEEDED":
		fallthrough
	case "PAGE_CHARACTERS_EXCEEDED":
		fallthrough
	case "PAGE_SIZE_EXCEEDED":
		fallthrough
	case "INTERNAL_SERVER_ERROR":
		*e = PageBasedErrorCodeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PageBasedErrorCodeEnum: %v", v)
	}
}
