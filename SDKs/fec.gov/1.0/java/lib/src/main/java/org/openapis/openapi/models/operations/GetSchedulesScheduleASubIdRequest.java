/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import java.time.LocalDate;
import org.openapis.openapi.utils.SpeakeasyMetadata;

public class GetSchedulesScheduleASubIdRequest {
    /**
     * API key for https://api.data.gov. Get one at https://api.data.gov/signup.
     * 
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=api_key")
    public String apiKey;
    public GetSchedulesScheduleASubIdRequest withApiKey(String apiKey) {
        this.apiKey = apiKey;
        return this;
    }
    
    /**
     * A unique identifier assigned to each committee or filer registered with the FEC. In general committee id's begin with the letter C which is followed by eight digits.
     * 
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=committee_id")
    public String[] committeeId;
    public GetSchedulesScheduleASubIdRequest withCommitteeId(String[] committeeId) {
        this.committeeId = committeeId;
        return this;
    }
    
    /**
     * City of contributor
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=contributor_city")
    public String[] contributorCity;
    public GetSchedulesScheduleASubIdRequest withContributorCity(String[] contributorCity) {
        this.contributorCity = contributorCity;
        return this;
    }
    
    /**
     * Employer of contributor, filers need to make an effort to gather this information
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=contributor_employer")
    public String[] contributorEmployer;
    public GetSchedulesScheduleASubIdRequest withContributorEmployer(String[] contributorEmployer) {
        this.contributorEmployer = contributorEmployer;
        return this;
    }
    
    /**
     * The FEC identifier should be represented here if the contributor is registered with the FEC.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=contributor_id")
    public String[] contributorId;
    public GetSchedulesScheduleASubIdRequest withContributorId(String[] contributorId) {
        this.contributorId = contributorId;
        return this;
    }
    
    /**
     * Name of contributor
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=contributor_name")
    public String[] contributorName;
    public GetSchedulesScheduleASubIdRequest withContributorName(String[] contributorName) {
        this.contributorName = contributorName;
        return this;
    }
    
    /**
     * Occupation of contributor, filers need to make an effort to gather this information
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=contributor_occupation")
    public String[] contributorOccupation;
    public GetSchedulesScheduleASubIdRequest withContributorOccupation(String[] contributorOccupation) {
        this.contributorOccupation = contributorOccupation;
        return this;
    }
    
    /**
     * State of contributor
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=contributor_state")
    public String[] contributorState;
    public GetSchedulesScheduleASubIdRequest withContributorState(String[] contributorState) {
        this.contributorState = contributorState;
        return this;
    }
    
    /**
     * Filters individual or committee contributions based on line number
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=contributor_type")
    public GetSchedulesScheduleASubIdContributorTypeEnum[] contributorType;
    public GetSchedulesScheduleASubIdRequest withContributorType(GetSchedulesScheduleASubIdContributorTypeEnum[] contributorType) {
        this.contributorType = contributorType;
        return this;
    }
    
    /**
     * Zip code of contributor
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=contributor_zip")
    public String[] contributorZip;
    public GetSchedulesScheduleASubIdRequest withContributorZip(String[] contributorZip) {
        this.contributorZip = contributorZip;
        return this;
    }
    
    /**
     * An unique identifier for each page where the electronic or paper filing is reported.
     * 
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=image_number")
    public String[] imageNumber;
    public GetSchedulesScheduleASubIdRequest withImageNumber(String[] imageNumber) {
        this.imageNumber = imageNumber;
        return this;
    }
    
    /**
     * Restrict to non-earmarked individual contributions where memo code is true. Filtering individuals is useful to make sure contributions are not double reported and in creating breakdowns of the amount of money coming from individuals.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=is_individual")
    public Boolean isIndividual;
    public GetSchedulesScheduleASubIdRequest withIsIndividual(Boolean isIndividual) {
        this.isIndividual = isIndividual;
        return this;
    }
    
    /**
     * When sorting by `contribution_receipt_amount`, this is populated with the         `contribution_receipt_amount` of the last result. However, you will need to pass the index         of that last result to `last_index` to get the next page.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=last_contribution_receipt_amount")
    public Float lastContributionReceiptAmount;
    public GetSchedulesScheduleASubIdRequest withLastContributionReceiptAmount(Float lastContributionReceiptAmount) {
        this.lastContributionReceiptAmount = lastContributionReceiptAmount;
        return this;
    }
    
    /**
     * When sorting by `contribution_receipt_date`, this is populated with the         `contribution_receipt_date` of the last result. However, you will need to pass the index         of that last result to `last_index` to get the next page.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=last_contribution_receipt_date")
    public LocalDate lastContributionReceiptDate;
    public GetSchedulesScheduleASubIdRequest withLastContributionReceiptDate(LocalDate lastContributionReceiptDate) {
        this.lastContributionReceiptDate = lastContributionReceiptDate;
        return this;
    }
    
    /**
     * Index of last result from previous page
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=last_index")
    public Integer lastIndex;
    public GetSchedulesScheduleASubIdRequest withLastIndex(Integer lastIndex) {
        this.lastIndex = lastIndex;
        return this;
    }
    
    /**
     * Filter for form and line number using the following format: `FORM-LINENUMBER`.  For example an argument such as `F3X-16` would filter down to all entries from form `F3X` line number `16`.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=line_number")
    public String lineNumber;
    public GetSchedulesScheduleASubIdRequest withLineNumber(String lineNumber) {
        this.lineNumber = lineNumber;
        return this;
    }
    
    /**
     * Filter for all amounts less than a value.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=max_amount")
    public String maxAmount;
    public GetSchedulesScheduleASubIdRequest withMaxAmount(String maxAmount) {
        this.maxAmount = maxAmount;
        return this;
    }
    
    /**
     * Maximum date
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=max_date")
    public LocalDate maxDate;
    public GetSchedulesScheduleASubIdRequest withMaxDate(LocalDate maxDate) {
        this.maxDate = maxDate;
        return this;
    }
    
    /**
     * Maxium image number of the page where the schedule item is reported
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=max_image_number")
    public String maxImageNumber;
    public GetSchedulesScheduleASubIdRequest withMaxImageNumber(String maxImageNumber) {
        this.maxImageNumber = maxImageNumber;
        return this;
    }
    
    /**
     * Maximum load date
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=max_load_date")
    public LocalDate maxLoadDate;
    public GetSchedulesScheduleASubIdRequest withMaxLoadDate(LocalDate maxLoadDate) {
        this.maxLoadDate = maxLoadDate;
        return this;
    }
    
    /**
     * Filter for all amounts greater than a value.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=min_amount")
    public String minAmount;
    public GetSchedulesScheduleASubIdRequest withMinAmount(String minAmount) {
        this.minAmount = minAmount;
        return this;
    }
    
    /**
     * Minimum date
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=min_date")
    public LocalDate minDate;
    public GetSchedulesScheduleASubIdRequest withMinDate(LocalDate minDate) {
        this.minDate = minDate;
        return this;
    }
    
    /**
     * Minium image number of the page where the schedule item is reported
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=min_image_number")
    public String minImageNumber;
    public GetSchedulesScheduleASubIdRequest withMinImageNumber(String minImageNumber) {
        this.minImageNumber = minImageNumber;
        return this;
    }
    
    /**
     * Minimum load date
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=min_load_date")
    public LocalDate minLoadDate;
    public GetSchedulesScheduleASubIdRequest withMinLoadDate(LocalDate minLoadDate) {
        this.minLoadDate = minLoadDate;
        return this;
    }
    
    /**
     * The number of results returned per page. Defaults to 20.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=per_page")
    public Integer perPage;
    public GetSchedulesScheduleASubIdRequest withPerPage(Integer perPage) {
        this.perPage = perPage;
        return this;
    }
    
    /**
     * The one-letter designation code of the organization:
     *          - A authorized by a candidate
     *          - J joint fundraising committee
     *          - P principal campaign committee of a candidate
     *          - U unauthorized
     *          - B lobbyist/registrant PAC
     *          - D leadership PAC
     * 
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=recipient_committee_designation")
    public GetSchedulesScheduleASubIdRecipientCommitteeDesignationEnum[] recipientCommitteeDesignation;
    public GetSchedulesScheduleASubIdRequest withRecipientCommitteeDesignation(GetSchedulesScheduleASubIdRecipientCommitteeDesignationEnum[] recipientCommitteeDesignation) {
        this.recipientCommitteeDesignation = recipientCommitteeDesignation;
        return this;
    }
    
    /**
     * The one-letter code for the kind for organization:
     *         - C corporation
     *         - L labor organization
     *         - M membership organization
     *         - T trade association
     *         - V cooperative
     *         - W corporation without capital stock
     * 
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=recipient_committee_org_type")
    public GetSchedulesScheduleASubIdRecipientCommitteeOrgTypeEnum[] recipientCommitteeOrgType;
    public GetSchedulesScheduleASubIdRequest withRecipientCommitteeOrgType(GetSchedulesScheduleASubIdRecipientCommitteeOrgTypeEnum[] recipientCommitteeOrgType) {
        this.recipientCommitteeOrgType = recipientCommitteeOrgType;
        return this;
    }
    
    /**
     * The one-letter type code of the organization:
     *         - C communication cost
     *         - D delegate
     *         - E electioneering communication
     *         - H House
     *         - I independent expenditure filer (not a committee)
     *         - N PAC - nonqualified
     *         - O independent expenditure-only (super PACs)
     *         - P presidential
     *         - Q PAC - qualified
     *         - S Senate
     *         - U single candidate independent expenditure
     *         - V PAC with non-contribution account, nonqualified
     *         - W PAC with non-contribution account, qualified
     *         - X party, nonqualified
     *         - Y party, qualified
     *         - Z national party non-federal account
     * 
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=recipient_committee_type")
    public GetSchedulesScheduleASubIdRecipientCommitteeTypeEnum[] recipientCommitteeType;
    public GetSchedulesScheduleASubIdRequest withRecipientCommitteeType(GetSchedulesScheduleASubIdRecipientCommitteeTypeEnum[] recipientCommitteeType) {
        this.recipientCommitteeType = recipientCommitteeType;
        return this;
    }
    
    /**
     * Provide a field to sort by. Use `-` for descending order.
     * 
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=sort")
    public String sort;
    public GetSchedulesScheduleASubIdRequest withSort(String sort) {
        this.sort = sort;
        return this;
    }
    
    /**
     * Hide null values on sorted column(s).
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=sort_hide_null")
    public Boolean sortHideNull;
    public GetSchedulesScheduleASubIdRequest withSortHideNull(Boolean sortHideNull) {
        this.sortHideNull = sortHideNull;
        return this;
    }
    
    /**
     * Toggle that filters out all rows having sort column that is non-null
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=sort_null_only")
    public Boolean sortNullOnly;
    public GetSchedulesScheduleASubIdRequest withSortNullOnly(Boolean sortNullOnly) {
        this.sortNullOnly = sortNullOnly;
        return this;
    }
    
    @SpeakeasyMetadata("pathParam:style=simple,explode=false,name=sub_id")
    public String subId;
    public GetSchedulesScheduleASubIdRequest withSubId(String subId) {
        this.subId = subId;
        return this;
    }
    
    /**
     * This is a two-year period that is derived from the year a transaction took place in the
     * Itemized Schedule A and Schedule B tables. In cases where we have the date of the transaction
     * (contribution_receipt_date in schedules/schedule_a, disbursement_date in schedules/schedule_b)
     * the two_year_transaction_period is named after the ending, even-numbered year. If we do not
     * have the date  of the transaction, we fall back to using the report year (report_year in both
     * tables) instead,  making the same cycle adjustment as necessary. If no transaction year is
     * specified, the results default to the most current cycle.
     * 
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=two_year_transaction_period")
    public Integer[] twoYearTransactionPeriod;
    public GetSchedulesScheduleASubIdRequest withTwoYearTransactionPeriod(Integer[] twoYearTransactionPeriod) {
        this.twoYearTransactionPeriod = twoYearTransactionPeriod;
        return this;
    }
    
}
