"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import interruptionfilter as shared_interruptionfilter
from ..shared import nontalktimefilter as shared_nontalktimefilter
from ..shared import sentimentfilter as shared_sentimentfilter
from ..shared import transcriptfilter as shared_transcriptfilter
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Rule:
    r"""<p>A rule is a set of criteria that you can specify to flag an attribute in your Call Analytics output. Rules define a Call Analytics category.</p> <p>Rules can include these parameters: , , , and .</p> <p>To learn more about Call Analytics rules and categories, see <a href=\\"https://docs.aws.amazon.com/transcribe/latest/dg/tca-categories-batch.html\\">Creating categories for post-call transcriptions</a> and <a href=\\"https://docs.aws.amazon.com/transcribe/latest/dg/tca-categories-stream.html\\">Creating categories for real-time transcriptions</a>.</p> <p>To learn more about Call Analytics, see <a href=\\"https://docs.aws.amazon.com/transcribe/latest/dg/call-analytics.html\\">Analyzing call center audio with Call Analytics</a>.</p>"""
    
    interruption_filter: Optional[shared_interruptionfilter.InterruptionFilter] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('InterruptionFilter'), 'exclude': lambda f: f is None }})  
    non_talk_time_filter: Optional[shared_nontalktimefilter.NonTalkTimeFilter] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('NonTalkTimeFilter'), 'exclude': lambda f: f is None }})  
    sentiment_filter: Optional[shared_sentimentfilter.SentimentFilter] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SentimentFilter'), 'exclude': lambda f: f is None }})  
    transcript_filter: Optional[shared_transcriptfilter.TranscriptFilter] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TranscriptFilter'), 'exclude': lambda f: f is None }})  
    