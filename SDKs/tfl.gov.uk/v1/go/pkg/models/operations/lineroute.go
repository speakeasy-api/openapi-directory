// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type LineRouteServiceTypesEnum string

const (
	LineRouteServiceTypesEnumRegular LineRouteServiceTypesEnum = "Regular"
	LineRouteServiceTypesEnumNight   LineRouteServiceTypesEnum = "Night"
)

func (e LineRouteServiceTypesEnum) ToPointer() *LineRouteServiceTypesEnum {
	return &e
}

func (e *LineRouteServiceTypesEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Regular":
		fallthrough
	case "Night":
		*e = LineRouteServiceTypesEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for LineRouteServiceTypesEnum: %v", v)
	}
}

type LineRouteRequest struct {
	// A comma seperated list of service types to filter on. Supported values: Regular, Night. Defaulted to 'Regular' if not specified
	ServiceTypes []LineRouteServiceTypesEnum `queryParam:"style=form,explode=true,name=serviceTypes"`
}

type LineRouteResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// OK
	TflAPIPresentationEntitiesLines []shared.TflAPIPresentationEntitiesLine
}
