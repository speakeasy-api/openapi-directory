<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Shared;


/**
 * OAuth2PermissionGrant - The relevant app Service Principal Object Id and the Service Principal Object Id you want to grant.
 * 
 * @package OpenAPI\OpenAPI\Models\Shared
 * @access public
 */
class OAuth2PermissionGrant
{
    /**
     * The id of the resource's service principal granted consent to impersonate the user when accessing the resource (represented by the resourceId property).
     * 
     * @var ?string $clientId
     */
	#[\JMS\Serializer\Annotation\SerializedName('clientId')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $clientId = null;
    
    /**
     * Indicates if consent was provided by the administrator (on behalf of the organization) or by an individual.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\OAuth2PermissionGrantConsentTypeEnum $consentType
     */
	#[\JMS\Serializer\Annotation\SerializedName('consentType')]
    #[\JMS\Serializer\Annotation\Type('enum<OpenAPI\OpenAPI\Models\Shared\OAuth2PermissionGrantConsentTypeEnum>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?OAuth2PermissionGrantConsentTypeEnum $consentType = null;
    
    /**
     * Expiry time for TTL
     * 
     * @var ?string $expiryTime
     */
	#[\JMS\Serializer\Annotation\SerializedName('expiryTime')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $expiryTime = null;
    
    /**
     * The id of the permission grant
     * 
     * @var ?string $objectId
     */
	#[\JMS\Serializer\Annotation\SerializedName('objectId')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $objectId = null;
    
    /**
     * Microsoft.DirectoryServices.OAuth2PermissionGrant
     * 
     * @var ?string $odataType
     */
	#[\JMS\Serializer\Annotation\SerializedName('odata.type')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $odataType = null;
    
    /**
     * When consent type is Principal, this property specifies the id of the user that granted consent and applies only for that user.
     * 
     * @var ?string $principalId
     */
	#[\JMS\Serializer\Annotation\SerializedName('principalId')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $principalId = null;
    
    /**
     * Object Id of the resource you want to grant
     * 
     * @var ?string $resourceId
     */
	#[\JMS\Serializer\Annotation\SerializedName('resourceId')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $resourceId = null;
    
    /**
     * Specifies the value of the scope claim that the resource application should expect in the OAuth 2.0 access token. For example, User.Read
     * 
     * @var ?string $scope
     */
	#[\JMS\Serializer\Annotation\SerializedName('scope')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $scope = null;
    
    /**
     * Start time for TTL
     * 
     * @var ?string $startTime
     */
	#[\JMS\Serializer\Annotation\SerializedName('startTime')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $startTime = null;
    
	public function __construct()
	{
		$this->clientId = null;
		$this->consentType = null;
		$this->expiryTime = null;
		$this->objectId = null;
		$this->odataType = null;
		$this->principalId = null;
		$this->resourceId = null;
		$this->scope = null;
		$this->startTime = null;
	}
}
