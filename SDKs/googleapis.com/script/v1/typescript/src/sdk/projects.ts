/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class Projects {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Creates a new, empty script project with no script files and a base manifest file.
   */
  scriptProjectsCreate(
    req: operations.ScriptProjectsCreateRequest,
    security: operations.ScriptProjectsCreateSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ScriptProjectsCreateResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ScriptProjectsCreateRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/v1/projects";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "createProjectRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.ScriptProjectsCreateSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ScriptProjectsCreateResponse =
        new operations.ScriptProjectsCreateResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.project = utils.objectToClass(httpRes?.data, shared.Project);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Creates a deployment of an Apps Script project.
   */
  scriptProjectsDeploymentsCreate(
    req: operations.ScriptProjectsDeploymentsCreateRequest,
    security: operations.ScriptProjectsDeploymentsCreateSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ScriptProjectsDeploymentsCreateResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ScriptProjectsDeploymentsCreateRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/projects/{scriptId}/deployments",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "deploymentConfig",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.ScriptProjectsDeploymentsCreateSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ScriptProjectsDeploymentsCreateResponse =
        new operations.ScriptProjectsDeploymentsCreateResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.deployment = utils.objectToClass(
              httpRes?.data,
              shared.Deployment
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Deletes a deployment of an Apps Script project.
   */
  scriptProjectsDeploymentsDelete(
    req: operations.ScriptProjectsDeploymentsDeleteRequest,
    security: operations.ScriptProjectsDeploymentsDeleteSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ScriptProjectsDeploymentsDeleteResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ScriptProjectsDeploymentsDeleteRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/projects/{scriptId}/deployments/{deploymentId}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.ScriptProjectsDeploymentsDeleteSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ScriptProjectsDeploymentsDeleteResponse =
        new operations.ScriptProjectsDeploymentsDeleteResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.empty = utils.objectToClass(httpRes?.data);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Gets a deployment of an Apps Script project.
   */
  scriptProjectsDeploymentsGet(
    req: operations.ScriptProjectsDeploymentsGetRequest,
    security: operations.ScriptProjectsDeploymentsGetSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ScriptProjectsDeploymentsGetResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ScriptProjectsDeploymentsGetRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/projects/{scriptId}/deployments/{deploymentId}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.ScriptProjectsDeploymentsGetSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ScriptProjectsDeploymentsGetResponse =
        new operations.ScriptProjectsDeploymentsGetResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.deployment = utils.objectToClass(
              httpRes?.data,
              shared.Deployment
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Lists the deployments of an Apps Script project.
   */
  scriptProjectsDeploymentsList(
    req: operations.ScriptProjectsDeploymentsListRequest,
    security: operations.ScriptProjectsDeploymentsListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ScriptProjectsDeploymentsListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ScriptProjectsDeploymentsListRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/projects/{scriptId}/deployments",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.ScriptProjectsDeploymentsListSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ScriptProjectsDeploymentsListResponse =
        new operations.ScriptProjectsDeploymentsListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listDeploymentsResponse = utils.objectToClass(
              httpRes?.data,
              shared.ListDeploymentsResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Updates a deployment of an Apps Script project.
   */
  scriptProjectsDeploymentsUpdate(
    req: operations.ScriptProjectsDeploymentsUpdateRequest,
    security: operations.ScriptProjectsDeploymentsUpdateSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ScriptProjectsDeploymentsUpdateResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ScriptProjectsDeploymentsUpdateRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/projects/{scriptId}/deployments/{deploymentId}",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "updateDeploymentRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.ScriptProjectsDeploymentsUpdateSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "put",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ScriptProjectsDeploymentsUpdateResponse =
        new operations.ScriptProjectsDeploymentsUpdateResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.deployment = utils.objectToClass(
              httpRes?.data,
              shared.Deployment
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Gets a script project's metadata.
   */
  scriptProjectsGet(
    req: operations.ScriptProjectsGetRequest,
    security: operations.ScriptProjectsGetSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ScriptProjectsGetResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ScriptProjectsGetRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/projects/{scriptId}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.ScriptProjectsGetSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ScriptProjectsGetResponse =
        new operations.ScriptProjectsGetResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.project = utils.objectToClass(httpRes?.data, shared.Project);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Gets the content of the script project, including the code source and metadata for each script file.
   */
  scriptProjectsGetContent(
    req: operations.ScriptProjectsGetContentRequest,
    security: operations.ScriptProjectsGetContentSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ScriptProjectsGetContentResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ScriptProjectsGetContentRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/projects/{scriptId}/content",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.ScriptProjectsGetContentSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ScriptProjectsGetContentResponse =
        new operations.ScriptProjectsGetContentResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.content = utils.objectToClass(httpRes?.data, shared.Content);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get metrics data for scripts, such as number of executions and active users.
   */
  scriptProjectsGetMetrics(
    req: operations.ScriptProjectsGetMetricsRequest,
    security: operations.ScriptProjectsGetMetricsSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ScriptProjectsGetMetricsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ScriptProjectsGetMetricsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/projects/{scriptId}/metrics",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.ScriptProjectsGetMetricsSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ScriptProjectsGetMetricsResponse =
        new operations.ScriptProjectsGetMetricsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.metrics = utils.objectToClass(httpRes?.data, shared.Metrics);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Updates the content of the specified script project. This content is stored as the HEAD version, and is used when the script is executed as a trigger, in the script editor, in add-on preview mode, or as a web app or Apps Script API in development mode. This clears all the existing files in the project.
   */
  scriptProjectsUpdateContent(
    req: operations.ScriptProjectsUpdateContentRequest,
    security: operations.ScriptProjectsUpdateContentSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ScriptProjectsUpdateContentResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ScriptProjectsUpdateContentRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/projects/{scriptId}/content",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "content",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.ScriptProjectsUpdateContentSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "put",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ScriptProjectsUpdateContentResponse =
        new operations.ScriptProjectsUpdateContentResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.content = utils.objectToClass(httpRes?.data, shared.Content);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Creates a new immutable version using the current code, with a unique version number.
   */
  scriptProjectsVersionsCreate(
    req: operations.ScriptProjectsVersionsCreateRequest,
    security: operations.ScriptProjectsVersionsCreateSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ScriptProjectsVersionsCreateResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ScriptProjectsVersionsCreateRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/projects/{scriptId}/versions",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "version",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.ScriptProjectsVersionsCreateSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ScriptProjectsVersionsCreateResponse =
        new operations.ScriptProjectsVersionsCreateResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.version = utils.objectToClass(httpRes?.data, shared.Version);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Gets a version of a script project.
   */
  scriptProjectsVersionsGet(
    req: operations.ScriptProjectsVersionsGetRequest,
    security: operations.ScriptProjectsVersionsGetSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ScriptProjectsVersionsGetResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ScriptProjectsVersionsGetRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/projects/{scriptId}/versions/{versionNumber}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.ScriptProjectsVersionsGetSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ScriptProjectsVersionsGetResponse =
        new operations.ScriptProjectsVersionsGetResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.version = utils.objectToClass(httpRes?.data, shared.Version);
          }
          break;
      }

      return res;
    });
  }

  /**
   * List the versions of a script project.
   */
  scriptProjectsVersionsList(
    req: operations.ScriptProjectsVersionsListRequest,
    security: operations.ScriptProjectsVersionsListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ScriptProjectsVersionsListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ScriptProjectsVersionsListRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/projects/{scriptId}/versions",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.ScriptProjectsVersionsListSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ScriptProjectsVersionsListResponse =
        new operations.ScriptProjectsVersionsListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listVersionsResponse = utils.objectToClass(
              httpRes?.data,
              shared.ListVersionsResponse
            );
          }
          break;
      }

      return res;
    });
  }
}
