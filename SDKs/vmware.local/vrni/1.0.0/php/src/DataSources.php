<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class DataSources 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Create an arista switch data source
     * 
     * Add arista switch data source
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\SwitchDataSourceRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AddAristaSwitchSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AddAristaSwitchResponse
     */
	public function addAristaSwitch(
        \OpenAPI\OpenAPI\Models\Shared\SwitchDataSourceRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AddAristaSwitchSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AddAristaSwitchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/data-sources/arista-switches');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AddAristaSwitchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->switchDataSource = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\SwitchDataSource', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApiError', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Create a brocade switch data source
     * 
     * Add brocade switch as a data source
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\SwitchDataSourceRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AddBrocadeSwitchSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AddBrocadeSwitchResponse
     */
	public function addBrocadeSwitch(
        \OpenAPI\OpenAPI\Models\Shared\SwitchDataSourceRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AddBrocadeSwitchSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AddBrocadeSwitchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/data-sources/brocade-switches');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AddBrocadeSwitchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->switchDataSource = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\SwitchDataSource', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApiError', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Create a checkpoint firewall
     * 
     * Add checkpoint firewall as data source
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\SwitchDataSourceRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AddCheckpointFirewallSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AddCheckpointFirewallResponse
     */
	public function addCheckpointFirewall(
        \OpenAPI\OpenAPI\Models\Shared\SwitchDataSourceRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AddCheckpointFirewallSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AddCheckpointFirewallResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/data-sources/checkpoint-firewalls');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AddCheckpointFirewallResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->switchDataSource = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\SwitchDataSource', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApiError', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Create a cisco switch data source
     * 
     * Add cisco switch as data source. User must provide one of ip or fqdn field in the request body.
     * Appropriate proxy id is retrieved from infra/nodes URL to select the proxy node.
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\CiscoSwitchDataSourceRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AddCiscoSwitchSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AddCiscoSwitchResponse
     */
	public function addCiscoSwitch(
        \OpenAPI\OpenAPI\Models\Shared\CiscoSwitchDataSourceRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AddCiscoSwitchSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AddCiscoSwitchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/data-sources/cisco-switches');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AddCiscoSwitchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->ciscoSwitchDataSource = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CiscoSwitchDataSource', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApiError', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Create a dell switch data source
     * 
     * Add a dell switch as data source
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\DellSwitchDataSourceRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AddDellSwitchSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AddDellSwitchResponse
     */
	public function addDellSwitch(
        \OpenAPI\OpenAPI\Models\Shared\DellSwitchDataSourceRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AddDellSwitchSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AddDellSwitchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/data-sources/dell-switches');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AddDellSwitchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->dellSwitchDataSource = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\DellSwitchDataSource', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApiError', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Create a hp oneview manager data source
     * 
     * Add a hp oneview manager data source
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\SwitchDataSource $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AddHpovManagerSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AddHpovManagerResponse
     */
	public function addHpovManager(
        \OpenAPI\OpenAPI\Models\Shared\SwitchDataSource $request,
        \OpenAPI\OpenAPI\Models\Operations\AddHpovManagerSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AddHpovManagerResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/data-sources/hpov-managers');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AddHpovManagerResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->switchDataSource = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\SwitchDataSource', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApiError', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Create a hpvc manager data source
     * 
     * Add hpvc manager data source
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\SwitchDataSource $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AddHpvcManagerSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AddHpvcManagerResponse
     */
	public function addHpvcManager(
        \OpenAPI\OpenAPI\Models\Shared\SwitchDataSource $request,
        \OpenAPI\OpenAPI\Models\Operations\AddHpvcManagerSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AddHpvcManagerResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/data-sources/hpvc-managers');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AddHpvcManagerResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->switchDataSource = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\SwitchDataSource', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApiError', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Add a juniper switch as data source
     * 
     * Add switch Datasource
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\SwitchDataSourceRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AddJuniperSwitchSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AddJuniperSwitchResponse
     */
	public function addJuniperSwitch(
        \OpenAPI\OpenAPI\Models\Shared\SwitchDataSourceRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AddJuniperSwitchSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AddJuniperSwitchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/data-sources/juniper-switches');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AddJuniperSwitchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->switchDataSource = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\SwitchDataSource', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApiError', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Create a nsx-v manager data source
     * 
     * Add a nsx-v manager data source
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\NSXVManagerDataSourceRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AddNsxvManagerDatasourceSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AddNsxvManagerDatasourceResponse
     */
	public function addNsxvManagerDatasource(
        \OpenAPI\OpenAPI\Models\Shared\NSXVManagerDataSourceRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AddNsxvManagerDatasourceSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AddNsxvManagerDatasourceResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/data-sources/nsxv-managers');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AddNsxvManagerDatasourceResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->nsxvManagerDataSource = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\NSXVManagerDataSource', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApiError', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Create panorama firewall data source
     * 
     * Add panorama firewall as data source
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\SwitchDataSourceRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AddPanoramaFirewallSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AddPanoramaFirewallResponse
     */
	public function addPanoramaFirewall(
        \OpenAPI\OpenAPI\Models\Shared\SwitchDataSourceRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AddPanoramaFirewallSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AddPanoramaFirewallResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/data-sources/panorama-firewalls');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AddPanoramaFirewallResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->switchDataSource = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\SwitchDataSource', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApiError', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Create an ucs manager data source
     * 
     * Add an ucs manager as data source
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\SwitchDataSource $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AddUcsManagerSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AddUcsManagerResponse
     */
	public function addUcsManager(
        \OpenAPI\OpenAPI\Models\Shared\SwitchDataSource $request,
        \OpenAPI\OpenAPI\Models\Operations\AddUcsManagerSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AddUcsManagerResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/data-sources/ucs-managers');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AddUcsManagerResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->switchDataSource = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\SwitchDataSource', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApiError', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Create a vCenter data source
     * 
     * Add a vcenter data source. User must provide one of ip or fqdn field in the request body.
     * Appropriate proxy id is retrieved from infra/nodes URL to select the proxy node.
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\VCenterDataSourceRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AddVcenterDatasourceSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AddVcenterDatasourceResponse
     */
	public function addVcenterDatasource(
        \OpenAPI\OpenAPI\Models\Shared\VCenterDataSourceRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AddVcenterDatasourceSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AddVcenterDatasourceResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/data-sources/vcenters');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AddVcenterDatasourceResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->vCenterDataSource = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\VCenterDataSource', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApiError', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Delete an arista switch data source
     * 
     * Delete an arista switch data source
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteAristaSwitchRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteAristaSwitchSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteAristaSwitchResponse
     */
	public function deleteAristaSwitch(
        \OpenAPI\OpenAPI\Models\Operations\DeleteAristaSwitchRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeleteAristaSwitchSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteAristaSwitchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/data-sources/arista-switches/{id}', \OpenAPI\OpenAPI\Models\Operations\DeleteAristaSwitchRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteAristaSwitchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Delete a brocade switch data source
     * 
     * Delete a brocade switch data source
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteBrocadeSwitchRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteBrocadeSwitchSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteBrocadeSwitchResponse
     */
	public function deleteBrocadeSwitch(
        \OpenAPI\OpenAPI\Models\Operations\DeleteBrocadeSwitchRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeleteBrocadeSwitchSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteBrocadeSwitchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/data-sources/brocade-switches/{id}', \OpenAPI\OpenAPI\Models\Operations\DeleteBrocadeSwitchRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteBrocadeSwitchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Delete a checkpoint firewall data source
     * 
     * Delete a checkpoint firewall data source
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteCheckpointFirewallRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteCheckpointFirewallSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteCheckpointFirewallResponse
     */
	public function deleteCheckpointFirewall(
        \OpenAPI\OpenAPI\Models\Operations\DeleteCheckpointFirewallRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeleteCheckpointFirewallSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteCheckpointFirewallResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/data-sources/checkpoint-firewalls/{id}', \OpenAPI\OpenAPI\Models\Operations\DeleteCheckpointFirewallRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteCheckpointFirewallResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Delete a cisco switch data source
     * 
     * Delete a cisco switch data source
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteCiscoSwitchRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteCiscoSwitchSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteCiscoSwitchResponse
     */
	public function deleteCiscoSwitch(
        \OpenAPI\OpenAPI\Models\Operations\DeleteCiscoSwitchRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeleteCiscoSwitchSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteCiscoSwitchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/data-sources/cisco-switches/{id}', \OpenAPI\OpenAPI\Models\Operations\DeleteCiscoSwitchRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteCiscoSwitchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Delete a dell switch data source
     * 
     * Delete a data source
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteDellSwitchRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteDellSwitchSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteDellSwitchResponse
     */
	public function deleteDellSwitch(
        \OpenAPI\OpenAPI\Models\Operations\DeleteDellSwitchRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeleteDellSwitchSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteDellSwitchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/data-sources/dell-switches/{id}', \OpenAPI\OpenAPI\Models\Operations\DeleteDellSwitchRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteDellSwitchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Delete a hp oneview data source
     * 
     * Delete a hp oneview data source
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteHpovManagerRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteHpovManagerSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteHpovManagerResponse
     */
	public function deleteHpovManager(
        \OpenAPI\OpenAPI\Models\Operations\DeleteHpovManagerRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeleteHpovManagerSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteHpovManagerResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/data-sources/hpov-managers/{id}', \OpenAPI\OpenAPI\Models\Operations\DeleteHpovManagerRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteHpovManagerResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Delete a hpvc manager data source
     * 
     * Delete a hpvc manager data source
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteHpvcManagerRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteHpvcManagerSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteHpvcManagerResponse
     */
	public function deleteHpvcManager(
        \OpenAPI\OpenAPI\Models\Operations\DeleteHpvcManagerRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeleteHpvcManagerSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteHpvcManagerResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/data-sources/hpvc-managers/{id}', \OpenAPI\OpenAPI\Models\Operations\DeleteHpvcManagerRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteHpvcManagerResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Delete a juniper switch data source
     * 
     * Delete a juniper switch data source
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteJuniperSwitchRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteJuniperSwitchSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteJuniperSwitchResponse
     */
	public function deleteJuniperSwitch(
        \OpenAPI\OpenAPI\Models\Operations\DeleteJuniperSwitchRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeleteJuniperSwitchSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteJuniperSwitchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/data-sources/juniper-switches/{id}', \OpenAPI\OpenAPI\Models\Operations\DeleteJuniperSwitchRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteJuniperSwitchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Delete a nsx-v manager data source
     * 
     * Delete a nsx-v manager data source
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteNsxvManagerRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteNsxvManagerSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteNsxvManagerResponse
     */
	public function deleteNsxvManager(
        \OpenAPI\OpenAPI\Models\Operations\DeleteNsxvManagerRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeleteNsxvManagerSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteNsxvManagerResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/data-sources/nsxv-managers/{id}', \OpenAPI\OpenAPI\Models\Operations\DeleteNsxvManagerRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteNsxvManagerResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Delete a panorama firewall data source
     * 
     * Delete a panorama firewall data source
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeletePanoramaFirewallRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeletePanoramaFirewallSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DeletePanoramaFirewallResponse
     */
	public function deletePanoramaFirewall(
        \OpenAPI\OpenAPI\Models\Operations\DeletePanoramaFirewallRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeletePanoramaFirewallSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DeletePanoramaFirewallResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/data-sources/panorama-firewalls/{id}', \OpenAPI\OpenAPI\Models\Operations\DeletePanoramaFirewallRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeletePanoramaFirewallResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Delete an ucs manager data source
     * 
     * Delete an ucs manager data source
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteUcsManagerRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteUcsManagerSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteUcsManagerResponse
     */
	public function deleteUcsManager(
        \OpenAPI\OpenAPI\Models\Operations\DeleteUcsManagerRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeleteUcsManagerSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteUcsManagerResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/data-sources/ucs-managers/{id}', \OpenAPI\OpenAPI\Models\Operations\DeleteUcsManagerRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteUcsManagerResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Delete a vCenter data source
     * 
     * Delete a data source
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteVcenterRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteVcenterSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteVcenterResponse
     */
	public function deleteVcenter(
        \OpenAPI\OpenAPI\Models\Operations\DeleteVcenterRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeleteVcenterSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteVcenterResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/data-sources/vcenters/{id}', \OpenAPI\OpenAPI\Models\Operations\DeleteVcenterRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteVcenterResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Disable an arista switch data source
     * 
     * Disable an arista switch data source
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DisableAristaSwitchRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DisableAristaSwitchSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DisableAristaSwitchResponse
     */
	public function disableAristaSwitch(
        \OpenAPI\OpenAPI\Models\Operations\DisableAristaSwitchRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DisableAristaSwitchSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DisableAristaSwitchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/data-sources/arista-switches/{id}/disable', \OpenAPI\OpenAPI\Models\Operations\DisableAristaSwitchRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DisableAristaSwitchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Disable a brocade switch data source
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DisableBrocadeSwitchRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DisableBrocadeSwitchSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DisableBrocadeSwitchResponse
     */
	public function disableBrocadeSwitch(
        \OpenAPI\OpenAPI\Models\Operations\DisableBrocadeSwitchRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DisableBrocadeSwitchSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DisableBrocadeSwitchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/data-sources/brocade-switches/{id}/disable', \OpenAPI\OpenAPI\Models\Operations\DisableBrocadeSwitchRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DisableBrocadeSwitchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Disable a checkpoint firewall data source
     * 
     * Disable a checkpoint firewall data source
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DisableCheckpointFirewallRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DisableCheckpointFirewallSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DisableCheckpointFirewallResponse
     */
	public function disableCheckpointFirewall(
        \OpenAPI\OpenAPI\Models\Operations\DisableCheckpointFirewallRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DisableCheckpointFirewallSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DisableCheckpointFirewallResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/data-sources/checkpoint-firewalls/{id}/disable', \OpenAPI\OpenAPI\Models\Operations\DisableCheckpointFirewallRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DisableCheckpointFirewallResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Disable a cisco switch data source
     * 
     * Disable a cisco switch data source
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DisableCiscoSwitchRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DisableCiscoSwitchSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DisableCiscoSwitchResponse
     */
	public function disableCiscoSwitch(
        \OpenAPI\OpenAPI\Models\Operations\DisableCiscoSwitchRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DisableCiscoSwitchSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DisableCiscoSwitchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/data-sources/cisco-switches/{id}/disable', \OpenAPI\OpenAPI\Models\Operations\DisableCiscoSwitchRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DisableCiscoSwitchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Disable a dell switch data source
     * 
     * Disable a dell switch data source
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DisableDellSwitchRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DisableDellSwitchSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DisableDellSwitchResponse
     */
	public function disableDellSwitch(
        \OpenAPI\OpenAPI\Models\Operations\DisableDellSwitchRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DisableDellSwitchSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DisableDellSwitchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/data-sources/dell-switches/{id}/disable', \OpenAPI\OpenAPI\Models\Operations\DisableDellSwitchRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DisableDellSwitchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Disable a hp oneview data source
     * 
     * Disable a hp oneview data source
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DisableHpovManagerRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DisableHpovManagerSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DisableHpovManagerResponse
     */
	public function disableHpovManager(
        \OpenAPI\OpenAPI\Models\Operations\DisableHpovManagerRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DisableHpovManagerSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DisableHpovManagerResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/data-sources/hpov-managers/{id}/disable', \OpenAPI\OpenAPI\Models\Operations\DisableHpovManagerRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DisableHpovManagerResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Disable a hpvc manager data source
     * 
     * Disable a hpvc manager data source
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DisableHpvcManagerRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DisableHpvcManagerSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DisableHpvcManagerResponse
     */
	public function disableHpvcManager(
        \OpenAPI\OpenAPI\Models\Operations\DisableHpvcManagerRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DisableHpvcManagerSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DisableHpvcManagerResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/data-sources/hpvc-managers/{id}/disable', \OpenAPI\OpenAPI\Models\Operations\DisableHpvcManagerRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DisableHpvcManagerResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Disable a juniper switch data source
     * 
     * Disable a juniper switch data source
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DisableJuniperSwitchRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DisableJuniperSwitchSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DisableJuniperSwitchResponse
     */
	public function disableJuniperSwitch(
        \OpenAPI\OpenAPI\Models\Operations\DisableJuniperSwitchRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DisableJuniperSwitchSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DisableJuniperSwitchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/data-sources/juniper-switches/{id}/disable', \OpenAPI\OpenAPI\Models\Operations\DisableJuniperSwitchRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DisableJuniperSwitchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Disable a nsx-v manager data source
     * 
     * Disable a nsx-v manager data source
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DisableNsxvManagerRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DisableNsxvManagerSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DisableNsxvManagerResponse
     */
	public function disableNsxvManager(
        \OpenAPI\OpenAPI\Models\Operations\DisableNsxvManagerRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DisableNsxvManagerSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DisableNsxvManagerResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/data-sources/nsxv-managers/{id}/disable', \OpenAPI\OpenAPI\Models\Operations\DisableNsxvManagerRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DisableNsxvManagerResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Disable a panorama firewall data source
     * 
     * Disable a panorama firewall data source
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DisablePanoramaFirewallRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DisablePanoramaFirewallSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DisablePanoramaFirewallResponse
     */
	public function disablePanoramaFirewall(
        \OpenAPI\OpenAPI\Models\Operations\DisablePanoramaFirewallRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DisablePanoramaFirewallSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DisablePanoramaFirewallResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/data-sources/panorama-firewalls/{id}/disable', \OpenAPI\OpenAPI\Models\Operations\DisablePanoramaFirewallRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DisablePanoramaFirewallResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Disable an ucs manager data source
     * 
     * Disable an ucs manager data source
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DisableUcsManagerRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DisableUcsManagerSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DisableUcsManagerResponse
     */
	public function disableUcsManager(
        \OpenAPI\OpenAPI\Models\Operations\DisableUcsManagerRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DisableUcsManagerSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DisableUcsManagerResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/data-sources/ucs-managers/{id}/disable', \OpenAPI\OpenAPI\Models\Operations\DisableUcsManagerRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DisableUcsManagerResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Disable a vCenter data source
     * 
     * Disable a vCenter data source
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DisableVcenterRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DisableVcenterSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DisableVcenterResponse
     */
	public function disableVcenter(
        \OpenAPI\OpenAPI\Models\Operations\DisableVcenterRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DisableVcenterSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DisableVcenterResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/data-sources/vcenters/{id}/disable', \OpenAPI\OpenAPI\Models\Operations\DisableVcenterRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DisableVcenterResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Enable an arista switch data source
     * 
     * Enable an arista switch data source
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\EnableAristaSwitchRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\EnableAristaSwitchSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\EnableAristaSwitchResponse
     */
	public function enableAristaSwitch(
        \OpenAPI\OpenAPI\Models\Operations\EnableAristaSwitchRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\EnableAristaSwitchSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\EnableAristaSwitchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/data-sources/arista-switches/{id}/enable', \OpenAPI\OpenAPI\Models\Operations\EnableAristaSwitchRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\EnableAristaSwitchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Enable a brocade switch data source
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\EnableBrocadeSwitchRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\EnableBrocadeSwitchSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\EnableBrocadeSwitchResponse
     */
	public function enableBrocadeSwitch(
        \OpenAPI\OpenAPI\Models\Operations\EnableBrocadeSwitchRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\EnableBrocadeSwitchSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\EnableBrocadeSwitchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/data-sources/brocade-switches/{id}/enable', \OpenAPI\OpenAPI\Models\Operations\EnableBrocadeSwitchRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\EnableBrocadeSwitchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Enable a checkpoint firewall data source
     * 
     * Enable a checkpoint firewall data source
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\EnableCheckpointFirewallRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\EnableCheckpointFirewallSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\EnableCheckpointFirewallResponse
     */
	public function enableCheckpointFirewall(
        \OpenAPI\OpenAPI\Models\Operations\EnableCheckpointFirewallRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\EnableCheckpointFirewallSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\EnableCheckpointFirewallResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/data-sources/checkpoint-firewalls/{id}/enable', \OpenAPI\OpenAPI\Models\Operations\EnableCheckpointFirewallRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\EnableCheckpointFirewallResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Enable a cisco switch data source
     * 
     * Enable a cisco switch data source
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\EnableCiscoSwitchRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\EnableCiscoSwitchSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\EnableCiscoSwitchResponse
     */
	public function enableCiscoSwitch(
        \OpenAPI\OpenAPI\Models\Operations\EnableCiscoSwitchRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\EnableCiscoSwitchSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\EnableCiscoSwitchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/data-sources/cisco-switches/{id}/enable', \OpenAPI\OpenAPI\Models\Operations\EnableCiscoSwitchRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\EnableCiscoSwitchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Enable a dell switch data source
     * 
     * Enable a dell switch data source
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\EnableDellSwitchRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\EnableDellSwitchSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\EnableDellSwitchResponse
     */
	public function enableDellSwitch(
        \OpenAPI\OpenAPI\Models\Operations\EnableDellSwitchRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\EnableDellSwitchSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\EnableDellSwitchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/data-sources/dell-switches/{id}/enable', \OpenAPI\OpenAPI\Models\Operations\EnableDellSwitchRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\EnableDellSwitchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Enable a hp oneview data source
     * 
     * Enable a hp oneview data source
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\EnableHpovManagerRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\EnableHpovManagerSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\EnableHpovManagerResponse
     */
	public function enableHpovManager(
        \OpenAPI\OpenAPI\Models\Operations\EnableHpovManagerRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\EnableHpovManagerSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\EnableHpovManagerResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/data-sources/hpov-managers/{id}/enable', \OpenAPI\OpenAPI\Models\Operations\EnableHpovManagerRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\EnableHpovManagerResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Enable a hpvc manager data source
     * 
     * Enable a hpvc manager data source
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\EnableHpvcManagerRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\EnableHpvcManagerSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\EnableHpvcManagerResponse
     */
	public function enableHpvcManager(
        \OpenAPI\OpenAPI\Models\Operations\EnableHpvcManagerRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\EnableHpvcManagerSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\EnableHpvcManagerResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/data-sources/hpvc-managers/{id}/enable', \OpenAPI\OpenAPI\Models\Operations\EnableHpvcManagerRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\EnableHpvcManagerResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Enable a juniper switch data source
     * 
     * Enable a juniper switch data source
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\EnableJuniperSwitchRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\EnableJuniperSwitchSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\EnableJuniperSwitchResponse
     */
	public function enableJuniperSwitch(
        \OpenAPI\OpenAPI\Models\Operations\EnableJuniperSwitchRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\EnableJuniperSwitchSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\EnableJuniperSwitchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/data-sources/juniper-switches/{id}/enable', \OpenAPI\OpenAPI\Models\Operations\EnableJuniperSwitchRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\EnableJuniperSwitchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Enable a nsx-v manager data source
     * 
     * Enable a nsx-v manager data source
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\EnableNsxvManagerRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\EnableNsxvManagerSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\EnableNsxvManagerResponse
     */
	public function enableNsxvManager(
        \OpenAPI\OpenAPI\Models\Operations\EnableNsxvManagerRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\EnableNsxvManagerSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\EnableNsxvManagerResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/data-sources/nsxv-managers/{id}/enable', \OpenAPI\OpenAPI\Models\Operations\EnableNsxvManagerRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\EnableNsxvManagerResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Enable a panorama firewall data source
     * 
     * Enable a panorama firewall data source
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\EnablePanoramaFirewallRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\EnablePanoramaFirewallSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\EnablePanoramaFirewallResponse
     */
	public function enablePanoramaFirewall(
        \OpenAPI\OpenAPI\Models\Operations\EnablePanoramaFirewallRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\EnablePanoramaFirewallSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\EnablePanoramaFirewallResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/data-sources/panorama-firewalls/{id}/enable', \OpenAPI\OpenAPI\Models\Operations\EnablePanoramaFirewallRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\EnablePanoramaFirewallResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Enable an ucs manager data source
     * 
     * Enable an ucs manager data source
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\EnableUcsManagerRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\EnableUcsManagerSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\EnableUcsManagerResponse
     */
	public function enableUcsManager(
        \OpenAPI\OpenAPI\Models\Operations\EnableUcsManagerRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\EnableUcsManagerSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\EnableUcsManagerResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/data-sources/ucs-managers/{id}/enable', \OpenAPI\OpenAPI\Models\Operations\EnableUcsManagerRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\EnableUcsManagerResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Enable a vCenter data source
     * 
     * Enable a vCenter data source
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\EnableVcenterRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\EnableVcenterSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\EnableVcenterResponse
     */
	public function enableVcenter(
        \OpenAPI\OpenAPI\Models\Operations\EnableVcenterRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\EnableVcenterSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\EnableVcenterResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/data-sources/vcenters/{id}/enable', \OpenAPI\OpenAPI\Models\Operations\EnableVcenterRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\EnableVcenterResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Show arista switch data source details
     * 
     * Show arista switch data source details
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetAristaSwitchRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetAristaSwitchSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetAristaSwitchResponse
     */
	public function getAristaSwitch(
        \OpenAPI\OpenAPI\Models\Operations\GetAristaSwitchRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetAristaSwitchSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetAristaSwitchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/data-sources/arista-switches/{id}', \OpenAPI\OpenAPI\Models\Operations\GetAristaSwitchRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetAristaSwitchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->switchDataSource = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\SwitchDataSource', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Show snmp config for arista switch data source
     * 
     * Show snmp config for arista switch data source
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetAristaSwitchSnmpConfigRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetAristaSwitchSnmpConfigSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetAristaSwitchSnmpConfigResponse
     */
	public function getAristaSwitchSnmpConfig(
        \OpenAPI\OpenAPI\Models\Operations\GetAristaSwitchSnmpConfigRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetAristaSwitchSnmpConfigSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetAristaSwitchSnmpConfigResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/data-sources/arista-switches/{id}/snmp-config', \OpenAPI\OpenAPI\Models\Operations\GetAristaSwitchSnmpConfigRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetAristaSwitchSnmpConfigResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->snmpConfig = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\SNMPConfig', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Show brocade switch data source details
     * 
     * Show brocade switch data source details
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetBrocadeSwitchRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetBrocadeSwitchSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetBrocadeSwitchResponse
     */
	public function getBrocadeSwitch(
        \OpenAPI\OpenAPI\Models\Operations\GetBrocadeSwitchRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetBrocadeSwitchSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetBrocadeSwitchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/data-sources/brocade-switches/{id}', \OpenAPI\OpenAPI\Models\Operations\GetBrocadeSwitchRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetBrocadeSwitchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->switchDataSource = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\SwitchDataSource', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Show snmp config for brocade switch data source
     * 
     * Show snmp config for brocade switch data source
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetBrocadeSwitchSnmpConfigRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetBrocadeSwitchSnmpConfigSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetBrocadeSwitchSnmpConfigResponse
     */
	public function getBrocadeSwitchSnmpConfig(
        \OpenAPI\OpenAPI\Models\Operations\GetBrocadeSwitchSnmpConfigRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetBrocadeSwitchSnmpConfigSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetBrocadeSwitchSnmpConfigResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/data-sources/brocade-switches/{id}/snmp-config', \OpenAPI\OpenAPI\Models\Operations\GetBrocadeSwitchSnmpConfigRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetBrocadeSwitchSnmpConfigResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->snmpConfig = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\SNMPConfig', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Show checkpoint firewall data source details
     * 
     * Show checkpoint firewall data source details
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetCheckpointFirewallRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetCheckpointFirewallSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetCheckpointFirewallResponse
     */
	public function getCheckpointFirewall(
        \OpenAPI\OpenAPI\Models\Operations\GetCheckpointFirewallRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetCheckpointFirewallSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetCheckpointFirewallResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/data-sources/checkpoint-firewalls/{id}', \OpenAPI\OpenAPI\Models\Operations\GetCheckpointFirewallRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetCheckpointFirewallResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->switchDataSource = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\SwitchDataSource', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Show cisco switch data source details
     * 
     * Show cisco switch data source details
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetCiscoSwitchRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetCiscoSwitchSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetCiscoSwitchResponse
     */
	public function getCiscoSwitch(
        \OpenAPI\OpenAPI\Models\Operations\GetCiscoSwitchRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetCiscoSwitchSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetCiscoSwitchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/data-sources/cisco-switches/{id}', \OpenAPI\OpenAPI\Models\Operations\GetCiscoSwitchRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetCiscoSwitchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->ciscoSwitchDataSource = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CiscoSwitchDataSource', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Show snmp config for cisco switch data source
     * 
     * Show snmp config for cisco switch data source
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetCiscoSwitchSnmpConfigRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetCiscoSwitchSnmpConfigSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetCiscoSwitchSnmpConfigResponse
     */
	public function getCiscoSwitchSnmpConfig(
        \OpenAPI\OpenAPI\Models\Operations\GetCiscoSwitchSnmpConfigRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetCiscoSwitchSnmpConfigSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetCiscoSwitchSnmpConfigResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/data-sources/cisco-switches/{id}/snmp-config', \OpenAPI\OpenAPI\Models\Operations\GetCiscoSwitchSnmpConfigRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetCiscoSwitchSnmpConfigResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->snmpConfig = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\SNMPConfig', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Show dell switch data source details
     * 
     * Get a dell switch data source details
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetDellSwitchRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetDellSwitchSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetDellSwitchResponse
     */
	public function getDellSwitch(
        \OpenAPI\OpenAPI\Models\Operations\GetDellSwitchRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetDellSwitchSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetDellSwitchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/data-sources/dell-switches/{id}', \OpenAPI\OpenAPI\Models\Operations\GetDellSwitchRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetDellSwitchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->dellSwitchDataSource = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\DellSwitchDataSource', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Show snmp config for dell switch data source
     * 
     * Show snmp config for dell switch data source
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetDellSwitchSnmpConfigRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetDellSwitchSnmpConfigSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetDellSwitchSnmpConfigResponse
     */
	public function getDellSwitchSnmpConfig(
        \OpenAPI\OpenAPI\Models\Operations\GetDellSwitchSnmpConfigRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetDellSwitchSnmpConfigSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetDellSwitchSnmpConfigResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/data-sources/dell-switches/{id}/snmp-config', \OpenAPI\OpenAPI\Models\Operations\GetDellSwitchSnmpConfigRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetDellSwitchSnmpConfigResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->snmpConfig = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\SNMPConfig', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Show hp oneview data source details
     * 
     * Show hp oneview data source details
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetHpovManagerRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetHpovManagerSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetHpovManagerResponse
     */
	public function getHpovManager(
        \OpenAPI\OpenAPI\Models\Operations\GetHpovManagerRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetHpovManagerSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetHpovManagerResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/data-sources/hpov-managers/{id}', \OpenAPI\OpenAPI\Models\Operations\GetHpovManagerRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetHpovManagerResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->switchDataSource = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\SwitchDataSource', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Show hpvc data source details
     * 
     * Show hpvc data source details
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetHpvcManagerRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetHpvcManagerSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetHpvcManagerResponse
     */
	public function getHpvcManager(
        \OpenAPI\OpenAPI\Models\Operations\GetHpvcManagerRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetHpvcManagerSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetHpvcManagerResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/data-sources/hpvc-managers/{id}', \OpenAPI\OpenAPI\Models\Operations\GetHpvcManagerRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetHpvcManagerResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->switchDataSource = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\SwitchDataSource', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Show juniper switch data source details
     * 
     * Show juniper switch data source details
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetJuniperSwitchRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetJuniperSwitchSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetJuniperSwitchResponse
     */
	public function getJuniperSwitch(
        \OpenAPI\OpenAPI\Models\Operations\GetJuniperSwitchRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetJuniperSwitchSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetJuniperSwitchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/data-sources/juniper-switches/{id}', \OpenAPI\OpenAPI\Models\Operations\GetJuniperSwitchRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetJuniperSwitchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->switchDataSource = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\SwitchDataSource', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Show snmp config for juniper switch data source
     * 
     * Show snmp config for juniper switch data source
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetJuniperSwitchSnmpConfigRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetJuniperSwitchSnmpConfigSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetJuniperSwitchSnmpConfigResponse
     */
	public function getJuniperSwitchSnmpConfig(
        \OpenAPI\OpenAPI\Models\Operations\GetJuniperSwitchSnmpConfigRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetJuniperSwitchSnmpConfigSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetJuniperSwitchSnmpConfigResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/data-sources/juniper-switches/{id}/snmp-config', \OpenAPI\OpenAPI\Models\Operations\GetJuniperSwitchSnmpConfigRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetJuniperSwitchSnmpConfigResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->snmpConfig = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\SNMPConfig', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Show nsx controller-cluster details
     * 
     * Show nsx controller-cluster details
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNsxvControllerClusterRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNsxvControllerClusterSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNsxvControllerClusterResponse
     */
	public function getNsxvControllerCluster(
        \OpenAPI\OpenAPI\Models\Operations\GetNsxvControllerClusterRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetNsxvControllerClusterSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNsxvControllerClusterResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/data-sources/nsxv-managers/{id}/controller-cluster', \OpenAPI\OpenAPI\Models\Operations\GetNsxvControllerClusterRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNsxvControllerClusterResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->nsxControllerDataCollection = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\NSXControllerDataCollection', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Show nsx-v manager data source details
     * 
     * Show nsx-v manager data source details
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNsxvManagerRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNsxvManagerSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNsxvManagerResponse
     */
	public function getNsxvManager(
        \OpenAPI\OpenAPI\Models\Operations\GetNsxvManagerRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetNsxvManagerSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNsxvManagerResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/data-sources/nsxv-managers/{id}', \OpenAPI\OpenAPI\Models\Operations\GetNsxvManagerRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNsxvManagerResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->nsxvManagerDataSource = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\NSXVManagerDataSource', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Show panorama firewall data source details
     * 
     * Show panorama firewall data source details
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetPanoramaFirewallRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetPanoramaFirewallSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetPanoramaFirewallResponse
     */
	public function getPanoramaFirewall(
        \OpenAPI\OpenAPI\Models\Operations\GetPanoramaFirewallRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetPanoramaFirewallSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetPanoramaFirewallResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/data-sources/panorama-firewalls/{id}', \OpenAPI\OpenAPI\Models\Operations\GetPanoramaFirewallRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetPanoramaFirewallResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->switchDataSource = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\SwitchDataSource', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Show ucs manager data source details
     * 
     * Show ucs manager data source details
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetUcsManagerRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetUcsManagerSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetUcsManagerResponse
     */
	public function getUcsManager(
        \OpenAPI\OpenAPI\Models\Operations\GetUcsManagerRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetUcsManagerSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetUcsManagerResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/data-sources/ucs-managers/{id}', \OpenAPI\OpenAPI\Models\Operations\GetUcsManagerRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetUcsManagerResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->switchDataSource = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\SwitchDataSource', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Show snmp config for ucs fabric interconnects
     * 
     * Show snmp config for ucs fabric interconnects
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetUcsSnmpConfigRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetUcsSnmpConfigSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetUcsSnmpConfigResponse
     */
	public function getUcsSnmpConfig(
        \OpenAPI\OpenAPI\Models\Operations\GetUcsSnmpConfigRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetUcsSnmpConfigSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetUcsSnmpConfigResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/data-sources/ucs-managers/{id}/snmp-config', \OpenAPI\OpenAPI\Models\Operations\GetUcsSnmpConfigRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetUcsSnmpConfigResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->snmpConfig = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\SNMPConfig', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Show vCenter data source details
     * 
     * Show vCenter data source details
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetVcenterRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetVcenterSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetVcenterResponse
     */
	public function getVcenter(
        \OpenAPI\OpenAPI\Models\Operations\GetVcenterRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetVcenterSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetVcenterResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/data-sources/vcenters/{id}', \OpenAPI\OpenAPI\Models\Operations\GetVcenterRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetVcenterResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->vCenterDataSource = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\VCenterDataSource', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * List arista switch data sources
     * 
     * List arista switch data sources
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListAristaSwitchesSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ListAristaSwitchesResponse
     */
	public function listAristaSwitches(
        \OpenAPI\OpenAPI\Models\Operations\ListAristaSwitchesSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ListAristaSwitchesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/data-sources/arista-switches');
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListAristaSwitchesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->dataSourceListResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\DataSourceListResponse', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * List brocade switch data sources
     * 
     * List brocade switch data sources
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListBrocadeSwitchesSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ListBrocadeSwitchesResponse
     */
	public function listBrocadeSwitches(
        \OpenAPI\OpenAPI\Models\Operations\ListBrocadeSwitchesSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ListBrocadeSwitchesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/data-sources/brocade-switches');
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListBrocadeSwitchesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->dataSourceListResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\DataSourceListResponse', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * List checkpoint firewall data sources
     * 
     * List checkpoint firewall data sources
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListCheckpointFirewallsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ListCheckpointFirewallsResponse
     */
	public function listCheckpointFirewalls(
        \OpenAPI\OpenAPI\Models\Operations\ListCheckpointFirewallsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ListCheckpointFirewallsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/data-sources/checkpoint-firewalls');
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListCheckpointFirewallsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->dataSourceListResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\DataSourceListResponse', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * List cisco switch data sources
     * 
     * List cisco switch data sources
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListCiscoSwitchesSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ListCiscoSwitchesResponse
     */
	public function listCiscoSwitches(
        \OpenAPI\OpenAPI\Models\Operations\ListCiscoSwitchesSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ListCiscoSwitchesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/data-sources/cisco-switches');
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListCiscoSwitchesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->dataSourceListResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\DataSourceListResponse', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * List dell switch data sources
     * 
     * List dell switch data sources
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListDellSwitchesSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ListDellSwitchesResponse
     */
	public function listDellSwitches(
        \OpenAPI\OpenAPI\Models\Operations\ListDellSwitchesSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ListDellSwitchesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/data-sources/dell-switches');
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListDellSwitchesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->dataSourceListResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\DataSourceListResponse', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * List hp oneview manager data sources
     * 
     * List hp oneview manager data sources
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListHpovManagersSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ListHpovManagersResponse
     */
	public function listHpovManagers(
        \OpenAPI\OpenAPI\Models\Operations\ListHpovManagersSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ListHpovManagersResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/data-sources/hpov-managers');
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListHpovManagersResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->dataSourceListResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\DataSourceListResponse', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * List hpvc manager data sources
     * 
     * List hpvc manager data sources
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListHpvcManagersSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ListHpvcManagersResponse
     */
	public function listHpvcManagers(
        \OpenAPI\OpenAPI\Models\Operations\ListHpvcManagersSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ListHpvcManagersResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/data-sources/hpvc-managers');
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListHpvcManagersResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->dataSourceListResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\DataSourceListResponse', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * List juniper switch data sources
     * 
     * List juniper switch data sources
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListJuniperSwitchesSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ListJuniperSwitchesResponse
     */
	public function listJuniperSwitches(
        \OpenAPI\OpenAPI\Models\Operations\ListJuniperSwitchesSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ListJuniperSwitchesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/data-sources/juniper-switches');
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListJuniperSwitchesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->dataSourceListResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\DataSourceListResponse', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * List nsx-v manager data sources
     * 
     * List nsx-v manager data sources
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListNsxvManagersSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ListNsxvManagersResponse
     */
	public function listNsxvManagers(
        \OpenAPI\OpenAPI\Models\Operations\ListNsxvManagersSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ListNsxvManagersResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/data-sources/nsxv-managers');
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListNsxvManagersResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->dataSourceListResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\DataSourceListResponse', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * List panorama firewall data sources
     * 
     * List panorama firewall data sources
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListPanoramaFirewallsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ListPanoramaFirewallsResponse
     */
	public function listPanoramaFirewalls(
        \OpenAPI\OpenAPI\Models\Operations\ListPanoramaFirewallsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ListPanoramaFirewallsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/data-sources/panorama-firewalls');
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListPanoramaFirewallsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->dataSourceListResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\DataSourceListResponse', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * List ucs manager data sources
     * 
     * List ucs manager data sources
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListUcsManagersSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ListUcsManagersResponse
     */
	public function listUcsManagers(
        \OpenAPI\OpenAPI\Models\Operations\ListUcsManagersSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ListUcsManagersResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/data-sources/ucs-managers');
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListUcsManagersResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->dataSourceListResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\DataSourceListResponse', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * List vCenter data sources
     * 
     * List vCenter data sources
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListVcentersSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ListVcentersResponse
     */
	public function listVcenters(
        \OpenAPI\OpenAPI\Models\Operations\ListVcentersSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ListVcentersResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/data-sources/vcenters');
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListVcentersResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->dataSourceListResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\DataSourceListResponse', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Update an arista switch data source
     * 
     * Update an switch data source
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateAristaSwitchRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateAristaSwitchSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateAristaSwitchResponse
     */
	public function updateAristaSwitch(
        \OpenAPI\OpenAPI\Models\Operations\UpdateAristaSwitchRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\UpdateAristaSwitchSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateAristaSwitchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/data-sources/arista-switches/{id}', \OpenAPI\OpenAPI\Models\Operations\UpdateAristaSwitchRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "switchDataSource", "json");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateAristaSwitchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->switchDataSource = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\SwitchDataSource', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApiError', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Update snmp config for arista switch data source
     * 
     * Update snmp config for arista switch data source
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateAristaSwitchSnmpConfigRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateAristaSwitchSnmpConfigSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateAristaSwitchSnmpConfigResponse
     */
	public function updateAristaSwitchSnmpConfig(
        \OpenAPI\OpenAPI\Models\Operations\UpdateAristaSwitchSnmpConfigRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\UpdateAristaSwitchSnmpConfigSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateAristaSwitchSnmpConfigResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/data-sources/arista-switches/{id}/snmp-config', \OpenAPI\OpenAPI\Models\Operations\UpdateAristaSwitchSnmpConfigRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "snmpConfig", "json");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateAristaSwitchSnmpConfigResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->snmpConfig = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\SNMPConfig', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApiError', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Update a brocade switch data source
     * 
     * Update a brocade switch data source. Only credentials, nickname and notes can be updated.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateBrocadeSwitchRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateBrocadeSwitchSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateBrocadeSwitchResponse
     */
	public function updateBrocadeSwitch(
        \OpenAPI\OpenAPI\Models\Operations\UpdateBrocadeSwitchRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\UpdateBrocadeSwitchSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateBrocadeSwitchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/data-sources/brocade-switches/{id}', \OpenAPI\OpenAPI\Models\Operations\UpdateBrocadeSwitchRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "switchDataSource", "json");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateBrocadeSwitchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->switchDataSource = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\SwitchDataSource', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApiError', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Update snmp config for brocade switch data source
     * 
     * Update snmp config for brocade switch data source
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateBrocadeSwitchSnmpConfigRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateBrocadeSwitchSnmpConfigSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateBrocadeSwitchSnmpConfigResponse
     */
	public function updateBrocadeSwitchSnmpConfig(
        \OpenAPI\OpenAPI\Models\Operations\UpdateBrocadeSwitchSnmpConfigRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\UpdateBrocadeSwitchSnmpConfigSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateBrocadeSwitchSnmpConfigResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/data-sources/brocade-switches/{id}/snmp-config', \OpenAPI\OpenAPI\Models\Operations\UpdateBrocadeSwitchSnmpConfigRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "snmpConfig", "json");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateBrocadeSwitchSnmpConfigResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->snmpConfig = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\SNMPConfig', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApiError', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Update a checkpoint firewall data source
     * 
     * Update a checkpoint firewall data source
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateCheckpointFirewallRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateCheckpointFirewallSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateCheckpointFirewallResponse
     */
	public function updateCheckpointFirewall(
        \OpenAPI\OpenAPI\Models\Operations\UpdateCheckpointFirewallRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\UpdateCheckpointFirewallSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateCheckpointFirewallResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/data-sources/checkpoint-firewalls/{id}', \OpenAPI\OpenAPI\Models\Operations\UpdateCheckpointFirewallRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "switchDataSource", "json");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateCheckpointFirewallResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->switchDataSource = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\SwitchDataSource', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApiError', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Update a cisco switch data source
     * 
     * Update a cisco switch data source. Only credentials, nickname and notes can be updated.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateCiscoSwitchRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateCiscoSwitchSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateCiscoSwitchResponse
     */
	public function updateCiscoSwitch(
        \OpenAPI\OpenAPI\Models\Operations\UpdateCiscoSwitchRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\UpdateCiscoSwitchSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateCiscoSwitchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/data-sources/cisco-switches/{id}', \OpenAPI\OpenAPI\Models\Operations\UpdateCiscoSwitchRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "ciscoSwitchDataSource", "json");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateCiscoSwitchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->ciscoSwitchDataSource = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CiscoSwitchDataSource', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApiError', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Update snmp config for cisco switch data source
     * 
     * Update snmp config for cisco switch data source
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateCiscoSwitchSnmpConfigRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateCiscoSwitchSnmpConfigSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateCiscoSwitchSnmpConfigResponse
     */
	public function updateCiscoSwitchSnmpConfig(
        \OpenAPI\OpenAPI\Models\Operations\UpdateCiscoSwitchSnmpConfigRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\UpdateCiscoSwitchSnmpConfigSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateCiscoSwitchSnmpConfigResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/data-sources/cisco-switches/{id}/snmp-config', \OpenAPI\OpenAPI\Models\Operations\UpdateCiscoSwitchSnmpConfigRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "snmpConfig", "json");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateCiscoSwitchSnmpConfigResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->snmpConfig = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\SNMPConfig', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApiError', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Update a dell switch data source
     * 
     * Update a dell switch data source. Only credentials, nickname and notes can be updated
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateDellSwitchRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateDellSwitchSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateDellSwitchResponse
     */
	public function updateDellSwitch(
        \OpenAPI\OpenAPI\Models\Operations\UpdateDellSwitchRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\UpdateDellSwitchSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateDellSwitchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/data-sources/dell-switches/{id}', \OpenAPI\OpenAPI\Models\Operations\UpdateDellSwitchRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "dellSwitchDataSource", "json");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateDellSwitchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->dellSwitchDataSource = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\DellSwitchDataSource', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApiError', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Update snmp config for dell switch data source
     * 
     * Update snmp config for dell switch data source
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateDellSwitchSnmpConfigRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateDellSwitchSnmpConfigSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateDellSwitchSnmpConfigResponse
     */
	public function updateDellSwitchSnmpConfig(
        \OpenAPI\OpenAPI\Models\Operations\UpdateDellSwitchSnmpConfigRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\UpdateDellSwitchSnmpConfigSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateDellSwitchSnmpConfigResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/data-sources/dell-switches/{id}/snmp-config', \OpenAPI\OpenAPI\Models\Operations\UpdateDellSwitchSnmpConfigRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "snmpConfig", "json");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateDellSwitchSnmpConfigResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->snmpConfig = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\SNMPConfig', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApiError', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Update a hp oneview data source
     * 
     * Update a hp oneview data source
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateHpovManagerRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateHpovManagerSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateHpovManagerResponse
     */
	public function updateHpovManager(
        \OpenAPI\OpenAPI\Models\Operations\UpdateHpovManagerRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\UpdateHpovManagerSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateHpovManagerResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/data-sources/hpov-managers/{id}', \OpenAPI\OpenAPI\Models\Operations\UpdateHpovManagerRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "switchDataSource", "json");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateHpovManagerResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->switchDataSource = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\SwitchDataSource', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApiError', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Update a hpvc manager data source
     * 
     * Update a hpvc manager data source
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateHpvcManagerRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateHpvcManagerSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateHpvcManagerResponse
     */
	public function updateHpvcManager(
        \OpenAPI\OpenAPI\Models\Operations\UpdateHpvcManagerRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\UpdateHpvcManagerSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateHpvcManagerResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/data-sources/hpvc-managers/{id}', \OpenAPI\OpenAPI\Models\Operations\UpdateHpvcManagerRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "switchDataSource", "json");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateHpvcManagerResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->switchDataSource = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\SwitchDataSource', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApiError', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Update a juniper switch data source
     * 
     * Update a juniper switch data source
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateJuniperSwitchRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateJuniperSwitchSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateJuniperSwitchResponse
     */
	public function updateJuniperSwitch(
        \OpenAPI\OpenAPI\Models\Operations\UpdateJuniperSwitchRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\UpdateJuniperSwitchSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateJuniperSwitchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/data-sources/juniper-switches/{id}', \OpenAPI\OpenAPI\Models\Operations\UpdateJuniperSwitchRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "switchDataSource", "json");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateJuniperSwitchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->switchDataSource = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\SwitchDataSource', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApiError', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Update snmp config for a juniper switch data source
     * 
     * Update snmp config for a juniper switch data source
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateJuniperSwitchSnmpConfigRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateJuniperSwitchSnmpConfigSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateJuniperSwitchSnmpConfigResponse
     */
	public function updateJuniperSwitchSnmpConfig(
        \OpenAPI\OpenAPI\Models\Operations\UpdateJuniperSwitchSnmpConfigRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\UpdateJuniperSwitchSnmpConfigSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateJuniperSwitchSnmpConfigResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/data-sources/juniper-switches/{id}/snmp-config', \OpenAPI\OpenAPI\Models\Operations\UpdateJuniperSwitchSnmpConfigRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "snmpConfig", "json");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateJuniperSwitchSnmpConfigResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->snmpConfig = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\SNMPConfig', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApiError', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Update nsx controller-cluster details
     * 
     * Update nsx controller-cluster details
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateNsxvControllerClusterRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateNsxvControllerClusterSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateNsxvControllerClusterResponse
     */
	public function updateNsxvControllerCluster(
        \OpenAPI\OpenAPI\Models\Operations\UpdateNsxvControllerClusterRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\UpdateNsxvControllerClusterSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateNsxvControllerClusterResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/data-sources/nsxv-managers/{id}/controller-cluster', \OpenAPI\OpenAPI\Models\Operations\UpdateNsxvControllerClusterRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "nsxControllerDataCollection", "json");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateNsxvControllerClusterResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->nsxControllerDataCollection = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\NSXControllerDataCollection', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApiError', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Update a nsx-v manager data source
     * 
     * Update a nsx-v manager data source
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateNsxvManagerRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateNsxvManagerSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateNsxvManagerResponse
     */
	public function updateNsxvManager(
        \OpenAPI\OpenAPI\Models\Operations\UpdateNsxvManagerRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\UpdateNsxvManagerSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateNsxvManagerResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/data-sources/nsxv-managers/{id}', \OpenAPI\OpenAPI\Models\Operations\UpdateNsxvManagerRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "nsxvManagerDataSource", "json");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateNsxvManagerResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->nsxvManagerDataSource = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\NSXVManagerDataSource', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Update a panorama firewall data source
     * 
     * Update a panorama firewall data source
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdatePanoramaFirewallRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdatePanoramaFirewallSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdatePanoramaFirewallResponse
     */
	public function updatePanoramaFirewall(
        \OpenAPI\OpenAPI\Models\Operations\UpdatePanoramaFirewallRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\UpdatePanoramaFirewallSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdatePanoramaFirewallResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/data-sources/panorama-firewalls/{id}', \OpenAPI\OpenAPI\Models\Operations\UpdatePanoramaFirewallRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "switchDataSource", "json");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdatePanoramaFirewallResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->switchDataSource = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\SwitchDataSource', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApiError', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Update an ucs manager data source
     * 
     * Update an ucs manager data source
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateUcsManagerRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateUcsManagerSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateUcsManagerResponse
     */
	public function updateUcsManager(
        \OpenAPI\OpenAPI\Models\Operations\UpdateUcsManagerRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\UpdateUcsManagerSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateUcsManagerResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/data-sources/ucs-managers/{id}', \OpenAPI\OpenAPI\Models\Operations\UpdateUcsManagerRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "switchDataSource", "json");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateUcsManagerResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->switchDataSource = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\SwitchDataSource', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApiError', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Update snmp config for ucs fabric interconnects
     * 
     * Update snmp config for ucs fabric interconnects
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateUcsSnmpConfigRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateUcsSnmpConfigSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateUcsSnmpConfigResponse
     */
	public function updateUcsSnmpConfig(
        \OpenAPI\OpenAPI\Models\Operations\UpdateUcsSnmpConfigRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\UpdateUcsSnmpConfigSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateUcsSnmpConfigResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/data-sources/ucs-managers/{id}/snmp-config', \OpenAPI\OpenAPI\Models\Operations\UpdateUcsSnmpConfigRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "snmpConfig", "json");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateUcsSnmpConfigResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->snmpConfig = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\SNMPConfig', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApiError', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Update a vCenter data source.
     * 
     * Update a vcenter data source. Only nickname, notes and credentials can be updated.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateVcenterRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateVcenterSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateVcenterResponse
     */
	public function updateVcenter(
        \OpenAPI\OpenAPI\Models\Operations\UpdateVcenterRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\UpdateVcenterSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateVcenterResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/data-sources/vcenters/{id}', \OpenAPI\OpenAPI\Models\Operations\UpdateVcenterRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "vCenterDataSource", "json");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateVcenterResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->vCenterDataSource = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\VCenterDataSource', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApiError', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
}