"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import tfl_api_presentation_entities_stoppointsresponse as shared_tfl_api_presentation_entities_stoppointsresponse
from typing import Optional


@dataclasses.dataclass
class StopPointGetByGeoPointRequest:
    
    location_lat: float = dataclasses.field(metadata={'query_param': { 'field_name': 'location.lat', 'style': 'form', 'explode': True }})  
    location_lon: float = dataclasses.field(metadata={'query_param': { 'field_name': 'location.lon', 'style': 'form', 'explode': True }})  
    stop_types: list[str] = dataclasses.field(metadata={'query_param': { 'field_name': 'stopTypes', 'style': 'form', 'explode': True }})
    r"""a list of stopTypes that should be returned (a list of valid stop types can be obtained from the StopPoint/meta/stoptypes endpoint)"""  
    categories: Optional[list[str]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'categories', 'style': 'form', 'explode': True }})
    r"""an optional list of comma separated property categories to return in the StopPoint's property bag. If null or empty, all categories of property are returned. Pass the keyword \\"none\\" to return no properties (a valid list of categories can be obtained from the /StopPoint/Meta/categories endpoint)"""  
    modes: Optional[list[str]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'modes', 'style': 'form', 'explode': True }})
    r"""the list of modes to search (comma separated mode names e.g. tube,dlr)"""  
    radius: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'radius', 'style': 'form', 'explode': True }})
    r"""the radius of the bounding circle in metres (default : 200)"""  
    return_lines: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'returnLines', 'style': 'form', 'explode': True }})
    r"""true to return the lines that each stop point serves as a nested resource"""  
    use_stop_point_hierarchy: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'useStopPointHierarchy', 'style': 'form', 'explode': True }})
    r"""Re-arrange the output into a parent/child hierarchy"""  
    

@dataclasses.dataclass
class StopPointGetByGeoPointResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    body: Optional[bytes] = dataclasses.field(default=None)  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    tfl_api_presentation_entities_stop_points_response: Optional[shared_tfl_api_presentation_entities_stoppointsresponse.TflAPIPresentationEntitiesStopPointsResponse] = dataclasses.field(default=None)
    r"""OK"""  
    