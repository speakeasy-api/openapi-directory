// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// PutRepositoryCatalogDataXAmzTargetEnum
type PutRepositoryCatalogDataXAmzTargetEnum string

const (
	PutRepositoryCatalogDataXAmzTargetEnumSpencerFrontendServicePutRepositoryCatalogData PutRepositoryCatalogDataXAmzTargetEnum = "SpencerFrontendService.PutRepositoryCatalogData"
)

func (e PutRepositoryCatalogDataXAmzTargetEnum) ToPointer() *PutRepositoryCatalogDataXAmzTargetEnum {
	return &e
}

func (e *PutRepositoryCatalogDataXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "SpencerFrontendService.PutRepositoryCatalogData":
		*e = PutRepositoryCatalogDataXAmzTargetEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PutRepositoryCatalogDataXAmzTargetEnum: %v", v)
	}
}

type PutRepositoryCatalogDataRequest struct {
	PutRepositoryCatalogDataRequest shared.PutRepositoryCatalogDataRequest `request:"mediaType=application/json"`
	XAmzAlgorithm                   *string                                `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256               *string                                `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential                  *string                                `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate                        *string                                `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken               *string                                `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature                   *string                                `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders               *string                                `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget                      PutRepositoryCatalogDataXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type PutRepositoryCatalogDataResponse struct {
	ContentType string
	// InvalidParameterException
	InvalidParameterException interface{}
	// Success
	PutRepositoryCatalogDataResponse *shared.PutRepositoryCatalogDataResponse
	// RepositoryNotFoundException
	RepositoryNotFoundException interface{}
	// ServerException
	ServerException interface{}
	StatusCode      int
	RawResponse     *http.Response
	// UnsupportedCommandException
	UnsupportedCommandException interface{}
}
