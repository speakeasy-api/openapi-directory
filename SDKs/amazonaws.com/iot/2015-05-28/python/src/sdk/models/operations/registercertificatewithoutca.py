"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import registercertificatewithoutcaresponse as shared_registercertificatewithoutcaresponse
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Any, Optional

class RegisterCertificateWithoutCARequestBodyStatusEnum(str, Enum):
    r"""The status of the register certificate request."""
    ACTIVE = 'ACTIVE'
    INACTIVE = 'INACTIVE'
    REVOKED = 'REVOKED'
    PENDING_TRANSFER = 'PENDING_TRANSFER'
    REGISTER_INACTIVE = 'REGISTER_INACTIVE'
    PENDING_ACTIVATION = 'PENDING_ACTIVATION'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class RegisterCertificateWithoutCARequestBody:
    
    certificate_pem: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('certificatePem') }})
    r"""The PEM of a certificate."""  
    status: Optional[RegisterCertificateWithoutCARequestBodyStatusEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status'), 'exclude': lambda f: f is None }})
    r"""The status of the register certificate request."""  
    

@dataclasses.dataclass
class RegisterCertificateWithoutCARequest:
    
    request_body: RegisterCertificateWithoutCARequestBody = dataclasses.field(metadata={'request': { 'media_type': 'application/json' }})  
    x_amz_algorithm: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Algorithm', 'style': 'simple', 'explode': False }})  
    x_amz_content_sha256: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Content-Sha256', 'style': 'simple', 'explode': False }})  
    x_amz_credential: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Credential', 'style': 'simple', 'explode': False }})  
    x_amz_date: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Date', 'style': 'simple', 'explode': False }})  
    x_amz_security_token: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Security-Token', 'style': 'simple', 'explode': False }})  
    x_amz_signature: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Signature', 'style': 'simple', 'explode': False }})  
    x_amz_signed_headers: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-SignedHeaders', 'style': 'simple', 'explode': False }})  
    

@dataclasses.dataclass
class RegisterCertificateWithoutCAResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    certificate_state_exception: Optional[Any] = dataclasses.field(default=None)
    r"""CertificateStateException"""  
    certificate_validation_exception: Optional[Any] = dataclasses.field(default=None)
    r"""CertificateValidationException"""  
    internal_failure_exception: Optional[Any] = dataclasses.field(default=None)
    r"""InternalFailureException"""  
    invalid_request_exception: Optional[Any] = dataclasses.field(default=None)
    r"""InvalidRequestException"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    register_certificate_without_ca_response: Optional[shared_registercertificatewithoutcaresponse.RegisterCertificateWithoutCAResponse] = dataclasses.field(default=None)
    r"""Success"""  
    resource_already_exists_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ResourceAlreadyExistsException"""  
    service_unavailable_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ServiceUnavailableException"""  
    throttling_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ThrottlingException"""  
    unauthorized_exception: Optional[Any] = dataclasses.field(default=None)
    r"""UnauthorizedException"""  
    