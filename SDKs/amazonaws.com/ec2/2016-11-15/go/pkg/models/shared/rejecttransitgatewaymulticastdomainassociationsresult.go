// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// RejectTransitGatewayMulticastDomainAssociationsResultAssociationsResourceTypeEnum - The type of resource, for example a VPC attachment.
type RejectTransitGatewayMulticastDomainAssociationsResultAssociationsResourceTypeEnum string

const (
	RejectTransitGatewayMulticastDomainAssociationsResultAssociationsResourceTypeEnumVpc                  RejectTransitGatewayMulticastDomainAssociationsResultAssociationsResourceTypeEnum = "vpc"
	RejectTransitGatewayMulticastDomainAssociationsResultAssociationsResourceTypeEnumVpn                  RejectTransitGatewayMulticastDomainAssociationsResultAssociationsResourceTypeEnum = "vpn"
	RejectTransitGatewayMulticastDomainAssociationsResultAssociationsResourceTypeEnumDirectConnectGateway RejectTransitGatewayMulticastDomainAssociationsResultAssociationsResourceTypeEnum = "direct-connect-gateway"
	RejectTransitGatewayMulticastDomainAssociationsResultAssociationsResourceTypeEnumConnect              RejectTransitGatewayMulticastDomainAssociationsResultAssociationsResourceTypeEnum = "connect"
	RejectTransitGatewayMulticastDomainAssociationsResultAssociationsResourceTypeEnumPeering              RejectTransitGatewayMulticastDomainAssociationsResultAssociationsResourceTypeEnum = "peering"
	RejectTransitGatewayMulticastDomainAssociationsResultAssociationsResourceTypeEnumTgwPeering           RejectTransitGatewayMulticastDomainAssociationsResultAssociationsResourceTypeEnum = "tgw-peering"
)

func (e *RejectTransitGatewayMulticastDomainAssociationsResultAssociationsResourceTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "vpc":
		fallthrough
	case "vpn":
		fallthrough
	case "direct-connect-gateway":
		fallthrough
	case "connect":
		fallthrough
	case "peering":
		fallthrough
	case "tgw-peering":
		*e = RejectTransitGatewayMulticastDomainAssociationsResultAssociationsResourceTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for RejectTransitGatewayMulticastDomainAssociationsResultAssociationsResourceTypeEnum: %s", s)
	}
}

// RejectTransitGatewayMulticastDomainAssociationsResultAssociationsSubnetsStateEnum - The state of the subnet association.
type RejectTransitGatewayMulticastDomainAssociationsResultAssociationsSubnetsStateEnum string

const (
	RejectTransitGatewayMulticastDomainAssociationsResultAssociationsSubnetsStateEnumPendingAcceptance RejectTransitGatewayMulticastDomainAssociationsResultAssociationsSubnetsStateEnum = "pendingAcceptance"
	RejectTransitGatewayMulticastDomainAssociationsResultAssociationsSubnetsStateEnumAssociating       RejectTransitGatewayMulticastDomainAssociationsResultAssociationsSubnetsStateEnum = "associating"
	RejectTransitGatewayMulticastDomainAssociationsResultAssociationsSubnetsStateEnumAssociated        RejectTransitGatewayMulticastDomainAssociationsResultAssociationsSubnetsStateEnum = "associated"
	RejectTransitGatewayMulticastDomainAssociationsResultAssociationsSubnetsStateEnumDisassociating    RejectTransitGatewayMulticastDomainAssociationsResultAssociationsSubnetsStateEnum = "disassociating"
	RejectTransitGatewayMulticastDomainAssociationsResultAssociationsSubnetsStateEnumDisassociated     RejectTransitGatewayMulticastDomainAssociationsResultAssociationsSubnetsStateEnum = "disassociated"
	RejectTransitGatewayMulticastDomainAssociationsResultAssociationsSubnetsStateEnumRejected          RejectTransitGatewayMulticastDomainAssociationsResultAssociationsSubnetsStateEnum = "rejected"
	RejectTransitGatewayMulticastDomainAssociationsResultAssociationsSubnetsStateEnumFailed            RejectTransitGatewayMulticastDomainAssociationsResultAssociationsSubnetsStateEnum = "failed"
)

func (e *RejectTransitGatewayMulticastDomainAssociationsResultAssociationsSubnetsStateEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "pendingAcceptance":
		fallthrough
	case "associating":
		fallthrough
	case "associated":
		fallthrough
	case "disassociating":
		fallthrough
	case "disassociated":
		fallthrough
	case "rejected":
		fallthrough
	case "failed":
		*e = RejectTransitGatewayMulticastDomainAssociationsResultAssociationsSubnetsStateEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for RejectTransitGatewayMulticastDomainAssociationsResultAssociationsSubnetsStateEnum: %s", s)
	}
}

// RejectTransitGatewayMulticastDomainAssociationsResultAssociationsSubnets - Describes the subnet association with the transit gateway multicast domain.
type RejectTransitGatewayMulticastDomainAssociationsResultAssociationsSubnets struct {
	State    *RejectTransitGatewayMulticastDomainAssociationsResultAssociationsSubnetsStateEnum
	SubnetID *string
}

// RejectTransitGatewayMulticastDomainAssociationsResultAssociations - Information about the multicast domain associations.
type RejectTransitGatewayMulticastDomainAssociationsResultAssociations struct {
	ResourceID                      *string
	ResourceOwnerID                 *string
	ResourceType                    *RejectTransitGatewayMulticastDomainAssociationsResultAssociationsResourceTypeEnum
	Subnets                         []RejectTransitGatewayMulticastDomainAssociationsResultAssociationsSubnets
	TransitGatewayAttachmentID      *string
	TransitGatewayMulticastDomainID *string
}

// RejectTransitGatewayMulticastDomainAssociationsResult - Success
type RejectTransitGatewayMulticastDomainAssociationsResult struct {
	Associations *RejectTransitGatewayMulticastDomainAssociationsResultAssociations
}
