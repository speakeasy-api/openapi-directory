/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { CancelSubscription } from "./cancelsubscription";
import { CreateSubscriptionForEvergreen } from "./createsubscriptionforevergreen";
import { GetOrderResume } from "./getorderresume";
import { GetOrderSuspend } from "./getordersuspend";
import { OrderMetricsForEvergreen } from "./ordermetricsforevergreen";
import { OwnerTransfer } from "./ownertransfer";
import { RatePlanOverrideForEvergreen } from "./rateplanoverrideforevergreen";
import { RatePlanUpdateForEvergreen } from "./rateplanupdateforevergreen";
import { RemoveProduct } from "./removeproduct";
import { TermsAndConditions } from "./termsandconditions";
import { TriggerDate } from "./triggerdate";
import { Expose, Type } from "class-transformer";

/**
 * Type of the order action.
 */
export enum OrderActionForEvergreenTypeEnum {
  CreateSubscription = "CreateSubscription",
  TermsAndConditions = "TermsAndConditions",
  AddProduct = "AddProduct",
  UpdateProduct = "UpdateProduct",
  RemoveProduct = "RemoveProduct",
  RenewSubscription = "RenewSubscription",
  CancelSubscription = "CancelSubscription",
  OwnerTransfer = "OwnerTransfer",
  Suspend = "Suspend",
  Resume = "Resume",
}

/**
 * Represents the processed order action.
 */
export class OrderActionForEvergreen extends SpeakeasyBase {
  /**
   * Rate plan associated with a subscription.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "addProduct" })
  @Type(() => RatePlanOverrideForEvergreen)
  addProduct?: RatePlanOverrideForEvergreen;

  /**
   * Information about an order action of type `CancelSubscription`.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "cancelSubscription" })
  @Type(() => CancelSubscription)
  cancelSubscription?: CancelSubscription;

  /**
   * Information about an order action of type `CreateSubscription`.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "createSubscription" })
  @Type(() => CreateSubscriptionForEvergreen)
  createSubscription?: CreateSubscriptionForEvergreen;

  /**
   * Container for custom fields of an Order Action object.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "customFields" })
  customFields?: Record<string, any>;

  /**
   * The Id of the order action processed in the order.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id?: string;

  /**
   * Shows the delta metrics caused by a specific order action on a specific charge.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata({ elemType: OrderMetricsForEvergreen })
  @Expose({ name: "orderMetrics" })
  @Type(() => OrderMetricsForEvergreen)
  orderMetrics?: OrderMetricsForEvergreen[];

  /**
   * Information about an order action of type `OwnerTransfer`.
   *
   * @remarks
   *
   * **Note:** The Owner Transfer feature is in **Limited Availability**. If you wish to have access to the feature, submit a request at [Zuora Global Support](http://support.zuora.com/).
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "ownerTransfer" })
  @Type(() => OwnerTransfer)
  ownerTransfer?: OwnerTransfer;

  /**
   * Information about an order action of type `RemoveProduct`.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "removeProduct" })
  @Type(() => RemoveProduct)
  removeProduct?: RemoveProduct;

  /**
   * Information about an order action of type `Resume`.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "resume" })
  @Type(() => GetOrderResume)
  resume?: GetOrderResume;

  /**
   * The sequence of the order actions processed in the order.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "sequence" })
  sequence?: number;

  /**
   * Information about an order action of type `Suspend`.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "suspend" })
  @Type(() => GetOrderSuspend)
  suspend?: GetOrderSuspend;

  /**
   * Information about an order action of type `TermsAndConditions`.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "termsAndConditions" })
  @Type(() => TermsAndConditions)
  termsAndConditions?: TermsAndConditions;

  /**
   * Container for the contract effective, service activation, and customer acceptance dates of the order action.
   *
   * @remarks
   *
   * If [Zuora is configured to require service activation](https://knowledgecenter.zuora.com/CB_Billing/Billing_Settings/Define_Default_Subscription_Settings#Require_Service_Activation_of_Orders.3F) and the `ServiceActivation` field is not set for a `CreateSubscription` order action, a `Pending` order and a `Pending Activation` subscription are created.
   *
   * If [Zuora is configured to require customer acceptance](https://knowledgecenter.zuora.com/CB_Billing/Billing_Settings/Define_Default_Subscription_Settings#Require_Customer_Acceptance_of_Orders.3F) and the `CustomerAcceptance` field is not set for a `CreateSubscription` order action, a `Pending` order and a `Pending Acceptance` subscription are created. At the same time, if the service activation date field is also required and not set, a `Pending` order and a `Pending Activation` subscription are created instead.
   *
   * If [Zuora is configured to require service activation](https://knowledgecenter.zuora.com/CB_Billing/Billing_Settings/Define_Default_Subscription_Settings#Require_Service_Activation_of_Orders.3F) and the `ServiceActivation` field is not set for either of the following order actions, a `Pending` order is created. The subscription status is not impacted. **Note:** This feature is in **Limited Availability**. If you want to have access to the feature, submit a request at [Zuora Global Support](http://support.zuora.com/).
   *  * AddProduct
   *  * UpdateProduct
   *  * RemoveProduct
   *  * RenewSubscription
   *  * TermsAndConditions
   *
   * If [Zuora is configured to require customer acceptance](https://knowledgecenter.zuora.com/CB_Billing/Billing_Settings/Define_Default_Subscription_Settings#Require_Customer_Acceptance_of_Orders.3F) and the `CustomerAcceptance` field is not set for either of the following order actions, a `Pending` order is created. The subscription status is not impacted. **Note:** This feature is in **Limited Availability**. If you want to have access to the feature, submit a request at [Zuora Global Support](http://support.zuora.com/).
   *  * AddProduct
   *  * UpdateProduct
   *  * RemoveProduct
   *  * RenewSubscription
   *  * TermsAndConditions
   *
   */
  @SpeakeasyMetadata({ elemType: TriggerDate })
  @Expose({ name: "triggerDates" })
  @Type(() => TriggerDate)
  triggerDates?: TriggerDate[];

  /**
   * Type of the order action.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "type" })
  type?: OrderActionForEvergreenTypeEnum;

  /**
   * Information about an order action of type `UpdateProduct`.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "updateProduct" })
  @Type(() => RatePlanUpdateForEvergreen)
  updateProduct?: RatePlanUpdateForEvergreen;
}
