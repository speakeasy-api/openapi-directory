"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import policyrequest as shared_policyrequest
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class CreateChannelTypeRequestAutoModerationEnum(str, Enum):
    r"""Enables automatic message moderation"""
    DISABLED = 'disabled'
    SIMPLE = 'simple'
    AI = 'AI'

class CreateChannelTypeRequestAutoModerationBehaviorEnum(str, Enum):
    r"""Sets behavior of automatic moderation"""
    FLAG = 'flag'
    BLOCK = 'block'

class CreateChannelTypeRequestBlocklistBehaviorEnum(str, Enum):
    r"""Sets behavior of blocklist"""
    FLAG = 'flag'
    BLOCK = 'block'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateChannelTypeRequest:
    
    automod: CreateChannelTypeRequestAutoModerationEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('automod') }})
    r"""Enables automatic message moderation"""  
    name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name') }})
    r"""Channel type name"""  
    automod_behavior: Optional[CreateChannelTypeRequestAutoModerationBehaviorEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('automod_behavior'), 'exclude': lambda f: f is None }})
    r"""Sets behavior of automatic moderation"""  
    blocklist: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('blocklist'), 'exclude': lambda f: f is None }})
    r"""Name of the blocklist to use"""  
    blocklist_behavior: Optional[CreateChannelTypeRequestBlocklistBehaviorEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('blocklist_behavior'), 'exclude': lambda f: f is None }})
    r"""Sets behavior of blocklist"""  
    commands: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('commands'), 'exclude': lambda f: f is None }})
    r"""List of commands that channel supports"""  
    connect_events: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('connect_events'), 'exclude': lambda f: f is None }})
    r"""Connect events support"""  
    custom_events: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('custom_events'), 'exclude': lambda f: f is None }})
    r"""Enables custom events"""  
    grants: Optional[dict[str, list[str]]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('grants'), 'exclude': lambda f: f is None }})  
    max_message_length: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('max_message_length'), 'exclude': lambda f: f is None }})
    r"""Number of maximum message characters"""  
    message_retention: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('message_retention'), 'exclude': lambda f: f is None }})
    r"""Number of days to keep messages. 'infinite' disables retention"""  
    mutes: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('mutes'), 'exclude': lambda f: f is None }})
    r"""Enables mutes"""  
    permissions: Optional[list[shared_policyrequest.PolicyRequest]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('permissions'), 'exclude': lambda f: f is None }})
    r"""List of permissions for the channel type"""  
    push_notifications: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('push_notifications'), 'exclude': lambda f: f is None }})
    r"""Enables push notifications"""  
    reactions: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('reactions'), 'exclude': lambda f: f is None }})
    r"""Enables message reactions"""  
    read_events: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('read_events'), 'exclude': lambda f: f is None }})
    r"""Read events support"""  
    replies: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('replies'), 'exclude': lambda f: f is None }})
    r"""Enables message replies (threads)"""  
    search: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('search'), 'exclude': lambda f: f is None }})
    r"""Enables message search"""  
    typing_events: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('typing_events'), 'exclude': lambda f: f is None }})
    r"""Typing events support"""  
    uploads: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('uploads'), 'exclude': lambda f: f is None }})
    r"""Enables file uploads"""  
    url_enrichment: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('url_enrichment'), 'exclude': lambda f: f is None }})
    r"""Enables URL enrichment"""  
    