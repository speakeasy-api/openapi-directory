/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

public class UpdateCompanyWebhookRequest {
    /**
     * Indicates if expired SSL certificates are accepted. Default value: **false**.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("acceptsExpiredCertificate")
    public Boolean acceptsExpiredCertificate;
    public UpdateCompanyWebhookRequest withAcceptsExpiredCertificate(Boolean acceptsExpiredCertificate) {
        this.acceptsExpiredCertificate = acceptsExpiredCertificate;
        return this;
    }
    
    /**
     * Indicates if self-signed SSL certificates are accepted. Default value: **false**.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("acceptsSelfSignedCertificate")
    public Boolean acceptsSelfSignedCertificate;
    public UpdateCompanyWebhookRequest withAcceptsSelfSignedCertificate(Boolean acceptsSelfSignedCertificate) {
        this.acceptsSelfSignedCertificate = acceptsSelfSignedCertificate;
        return this;
    }
    
    /**
     * Indicates if untrusted SSL certificates are accepted. Default value: **false**.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("acceptsUntrustedRootCertificate")
    public Boolean acceptsUntrustedRootCertificate;
    public UpdateCompanyWebhookRequest withAcceptsUntrustedRootCertificate(Boolean acceptsUntrustedRootCertificate) {
        this.acceptsUntrustedRootCertificate = acceptsUntrustedRootCertificate;
        return this;
    }
    
    /**
     * Indicates if the webhook configuration is active. The field must be **true** for us to send webhooks about events related an account.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("active")
    public Boolean active;
    public UpdateCompanyWebhookRequest withActive(Boolean active) {
        this.active = active;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("additionalSettings")
    public AdditionalSettings additionalSettings;
    public UpdateCompanyWebhookRequest withAdditionalSettings(AdditionalSettings additionalSettings) {
        this.additionalSettings = additionalSettings;
        return this;
    }
    
    /**
     * Format or protocol for receiving webhooks. Possible values:
     * * **soap**
     * * **http**
     * * **json** 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("communicationFormat")
    public UpdateCompanyWebhookRequestCommunicationFormatEnum communicationFormat;
    public UpdateCompanyWebhookRequest withCommunicationFormat(UpdateCompanyWebhookRequestCommunicationFormatEnum communicationFormat) {
        this.communicationFormat = communicationFormat;
        return this;
    }
    
    /**
     * Your description for this webhook configuration.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    public String description;
    public UpdateCompanyWebhookRequest withDescription(String description) {
        this.description = description;
        return this;
    }
    
    /**
     * Shows how merchant accounts are filtered when configuring the webhook. Possible values:
     * * **includeAccounts**: The webhook is configured for the merchant accounts listed in `filterMerchantAccounts`.
     * * **excludeAccounts**: The webhook is not configured for the merchant accounts listed in `filterMerchantAccounts`.
     * * **allAccounts**: Includes all merchant accounts, and does not require specifying `filterMerchantAccounts`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("filterMerchantAccountType")
    public UpdateCompanyWebhookRequestFilterMerchantAccountTypeEnum filterMerchantAccountType;
    public UpdateCompanyWebhookRequest withFilterMerchantAccountType(UpdateCompanyWebhookRequestFilterMerchantAccountTypeEnum filterMerchantAccountType) {
        this.filterMerchantAccountType = filterMerchantAccountType;
        return this;
    }
    
    /**
     * A list of merchant account names that are included or excluded from receiving the webhook. Inclusion or exclusion is based on the value defined for `filterMerchantAccountType`.
     * 
     * Required if `filterMerchantAccountType` is either:
     * * **includeAccounts**
     * * **excludeAccounts**
     * 
     * Not needed for `filterMerchantAccountType`: **allAccounts**.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("filterMerchantAccounts")
    public String[] filterMerchantAccounts;
    public UpdateCompanyWebhookRequest withFilterMerchantAccounts(String[] filterMerchantAccounts) {
        this.filterMerchantAccounts = filterMerchantAccounts;
        return this;
    }
    
    /**
     * Network type for Terminal API notification webhooks. Possible values:
     * * **public**
     * * **local**
     * 
     * Default Value: **public**.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("networkType")
    public UpdateCompanyWebhookRequestNetworkTypeEnum networkType;
    public UpdateCompanyWebhookRequest withNetworkType(UpdateCompanyWebhookRequestNetworkTypeEnum networkType) {
        this.networkType = networkType;
        return this;
    }
    
    /**
     * Password to access the webhook URL.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("password")
    public String password;
    public UpdateCompanyWebhookRequest withPassword(String password) {
        this.password = password;
        return this;
    }
    
    /**
     * Indicates if the SOAP action header needs to be populated. Default value: **false**.
     * 
     * Only applies if `communicationFormat`: **soap**.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("populateSoapActionHeader")
    public Boolean populateSoapActionHeader;
    public UpdateCompanyWebhookRequest withPopulateSoapActionHeader(Boolean populateSoapActionHeader) {
        this.populateSoapActionHeader = populateSoapActionHeader;
        return this;
    }
    
    /**
     * SSL version to access the public webhook URL specified in the `url` field. Possible values:
     * * **TLSv1.3**
     * * **TLSv1.2**
     * * **HTTP** - Only allowed on Test environment.
     * 
     * If not specified, the webhook will use `sslVersion`: **TLSv1.2**.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sslVersion")
    public UpdateCompanyWebhookRequestSslVersionEnum sslVersion;
    public UpdateCompanyWebhookRequest withSslVersion(UpdateCompanyWebhookRequestSslVersionEnum sslVersion) {
        this.sslVersion = sslVersion;
        return this;
    }
    
    /**
     * Public URL where webhooks will be sent, for example **https://www.domain.com/webhook-endpoint**.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("url")
    public String url;
    public UpdateCompanyWebhookRequest withUrl(String url) {
        this.url = url;
        return this;
    }
    
    /**
     * Username to access the webhook URL.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("username")
    public String username;
    public UpdateCompanyWebhookRequest withUsername(String username) {
        this.username = username;
        return this;
    }
    
}
