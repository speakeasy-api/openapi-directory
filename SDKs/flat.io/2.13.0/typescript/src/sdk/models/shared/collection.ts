/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { CollectionPrivacyEnum } from "./collectionprivacyenum";
import { CollectionTypeEnum } from "./collectiontypeenum";
import { ResourceCollaborator } from "./resourcecollaborator";
import { ResourceRights } from "./resourcerights";
import { UserPublicSummary } from "./userpublicsummary";
import { Expose, Transform, Type } from "class-transformer";

/**
 * Capabilities the current user has on this collection. Each capability corresponds to a fine-grained action that a user may take.
 */
export class CollectionCapabilities extends SpeakeasyBase {
  /**
   * Whether the current user can add scores to the collection
   *
   * @remarks
   *
   * If this collection has the `type` `trash`, this property will be set to `false`. Use `DELETE /v2/scores/{score}` to trash a score.
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "canAddScores" })
  canAddScores?: boolean;

  /**
   * Whether the current user can delete the collection
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "canDelete" })
  canDelete?: boolean;

  /**
   * Whether the current user can delete scores from the collection
   *
   * @remarks
   *
   * If this collection has the `type` `trash`, this property will be set to `false`. Use `POST /v2/scores/{score}/untrash` to restore a score.
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "canDeleteScores" })
  canDeleteScores?: boolean;

  /**
   * Whether the current user can modify the metadata for the collection
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "canEdit" })
  canEdit?: boolean;

  /**
   * Whether the current user can modify the sharing settings for the collection
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "canShare" })
  canShare?: boolean;
}

/**
 * Collection of scores
 */
export class Collection extends SpeakeasyBase {
  /**
   * If this directory is dedicated to an app, the unique idenfier of this app
   */
  @SpeakeasyMetadata()
  @Expose({ name: "app" })
  app?: string;

  /**
   * Capabilities the current user has on this collection. Each capability corresponds to a fine-grained action that a user may take.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "capabilities" })
  @Type(() => CollectionCapabilities)
  capabilities?: CollectionCapabilities;

  /**
   * The list of the collaborators of the collection
   */
  @SpeakeasyMetadata({ elemType: ResourceCollaborator })
  @Expose({ name: "collaborators" })
  @Type(() => ResourceCollaborator)
  collaborators?: ResourceCollaborator[];

  /**
   * The List of parent collections, which includes all the collections this score is included. Please note that you might not have access to all of them.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "collections" })
  collections?: string[];

  /**
   * The date when the collection was created
   */
  @SpeakeasyMetadata()
  @Expose({ name: "creationDate" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  creationDate?: Date;

  /**
   * The url where the collection can be viewed in a web browser
   */
  @SpeakeasyMetadata()
  @Expose({ name: "htmlUrl" })
  htmlUrl?: string;

  /**
   * Unique identifier of the collection
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id?: string;

  /**
   * The collection main privacy mode.
   *
   * @remarks
   * - `private`: The collection is private and can be only accessed, modified and administred by specified collaborators users.
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "privacy" })
  privacy?: CollectionPrivacyEnum;

  /**
   * The rights of the current user on a score or collection
   */
  @SpeakeasyMetadata()
  @Expose({ name: "rights" })
  @Type(() => ResourceRights)
  rights?: ResourceRights;

  /**
   * The private sharing key of the collection (available when the `privacy` mode is set to `privateLink`)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "sharingKey" })
  sharingKey?: string;

  /**
   * The title of the collection
   */
  @SpeakeasyMetadata()
  @Expose({ name: "title" })
  title?: string;

  /**
   * Type of the collection.
   *
   * @remarks
   * The type will influence the capabilitied available on the collections and how this collection is/can be populated.
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "type" })
  type?: CollectionTypeEnum;

  /**
   * Public User details summary
   */
  @SpeakeasyMetadata()
  @Expose({ name: "user" })
  @Type(() => UserPublicSummary)
  user?: UserPublicSummary;
}
