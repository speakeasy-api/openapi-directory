/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Schedule - The definition of a schedule.
 */
public class Schedule {
    /**
     * Output only. Time the schedule was created.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("createTime")
    public String createTime;
    public Schedule withCreateTime(String createTime) {
        this.createTime = createTime;
        return this;
    }
    
    /**
     * Cron-tab formatted schedule by which the job will execute. Format: minute, hour, day of month, month, day of week, e.g. `0 0 * * WED` = every Wednesday More examples: https://crontab.guru/examples.html
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("cronSchedule")
    public String cronSchedule;
    public Schedule withCronSchedule(String cronSchedule) {
        this.cronSchedule = cronSchedule;
        return this;
    }
    
    /**
     * A brief description of this environment.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    public String description;
    public Schedule withDescription(String description) {
        this.description = description;
        return this;
    }
    
    /**
     * Output only. Display name used for UI purposes. Name can only contain alphanumeric characters, hyphens `-`, and underscores `_`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("displayName")
    public String displayName;
    public Schedule withDisplayName(String displayName) {
        this.displayName = displayName;
        return this;
    }
    
    /**
     * The description a notebook execution workload.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("executionTemplate")
    public ExecutionTemplate executionTemplate;
    public Schedule withExecutionTemplate(ExecutionTemplate executionTemplate) {
        this.executionTemplate = executionTemplate;
        return this;
    }
    
    /**
     * Output only. The name of this schedule. Format: `projects/{project_id}/locations/{location}/schedules/{schedule_id}`
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    public String name;
    public Schedule withName(String name) {
        this.name = name;
        return this;
    }
    
    /**
     * Output only. The most recent execution names triggered from this schedule and their corresponding states.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("recentExecutions")
    public Execution[] recentExecutions;
    public Schedule withRecentExecutions(Execution[] recentExecutions) {
        this.recentExecutions = recentExecutions;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("state")
    public ScheduleStateEnum state;
    public Schedule withState(ScheduleStateEnum state) {
        this.state = state;
        return this;
    }
    
    /**
     * Timezone on which the cron_schedule. The value of this field must be a time zone name from the tz database. TZ Database: https://en.wikipedia.org/wiki/List_of_tz_database_time_zones Note that some time zones include a provision for daylight savings time. The rules for daylight saving time are determined by the chosen tz. For UTC use the string "utc". If a time zone is not specified, the default will be in UTC (also known as GMT).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("timeZone")
    public String timeZone;
    public Schedule withTimeZone(String timeZone) {
        this.timeZone = timeZone;
        return this;
    }
    
    /**
     * Output only. Time the schedule was last updated.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("updateTime")
    public String updateTime;
    public Schedule withUpdateTime(String updateTime) {
        this.updateTime = updateTime;
        return this;
    }
    
}
