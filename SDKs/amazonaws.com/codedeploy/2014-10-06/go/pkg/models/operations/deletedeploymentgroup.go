// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// DeleteDeploymentGroupXAmzTargetEnum
type DeleteDeploymentGroupXAmzTargetEnum string

const (
	DeleteDeploymentGroupXAmzTargetEnumCodeDeploy20141006DeleteDeploymentGroup DeleteDeploymentGroupXAmzTargetEnum = "CodeDeploy_20141006.DeleteDeploymentGroup"
)

func (e *DeleteDeploymentGroupXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "CodeDeploy_20141006.DeleteDeploymentGroup":
		*e = DeleteDeploymentGroupXAmzTargetEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for DeleteDeploymentGroupXAmzTargetEnum: %s", s)
	}
}

type DeleteDeploymentGroupRequest struct {
	DeleteDeploymentGroupInput shared.DeleteDeploymentGroupInput   `request:"mediaType=application/json"`
	XAmzAlgorithm              *string                             `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256          *string                             `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential             *string                             `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate                   *string                             `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken          *string                             `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature              *string                             `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders          *string                             `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget                 DeleteDeploymentGroupXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type DeleteDeploymentGroupResponse struct {
	// ApplicationNameRequiredException
	ApplicationNameRequiredException interface{}
	ContentType                      string
	// Success
	DeleteDeploymentGroupOutput *shared.DeleteDeploymentGroupOutput
	// DeploymentGroupNameRequiredException
	DeploymentGroupNameRequiredException interface{}
	// InvalidApplicationNameException
	InvalidApplicationNameException interface{}
	// InvalidDeploymentGroupNameException
	InvalidDeploymentGroupNameException interface{}
	// InvalidRoleException
	InvalidRoleException interface{}
	StatusCode           int
	RawResponse          *http.Response
}
