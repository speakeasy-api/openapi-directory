"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional


@dataclasses.dataclass
class CodePushDeploymentReleasesCreateSecurity:
    
    api_token: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'apiKey', 'sub_type': 'header', 'field_name': 'X-API-Token' }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CodePushDeploymentReleasesCreateRequestBodyReleaseUpload:
    r"""The upload metadata from the release initialization step."""
    
    id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id') }})
    r"""The ID for the newly created upload. It is going to be required later in the process."""  
    token: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('token') }})
    r"""The URL encoded token used for upload permissions."""  
    upload_domain: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('upload_domain') }})
    r"""The URL domain used to upload the release."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CodePushDeploymentReleasesCreateRequestBody:
    r"""The necessary information required to download the bundle and being the release process."""
    
    release_upload: CodePushDeploymentReleasesCreateRequestBodyReleaseUpload = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('release_upload') }})
    r"""The upload metadata from the release initialization step."""  
    target_binary_version: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('target_binary_version') }})
    r"""the binary version of the application"""  
    deployment_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('deployment_name'), 'exclude': lambda f: f is None }})
    r"""This specifies which deployment you want to release the update to. Default is Staging."""  
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description'), 'exclude': lambda f: f is None }})
    r"""This provides an optional \\"change log\\" for the deployment."""  
    disabled: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('disabled'), 'exclude': lambda f: f is None }})
    r"""This specifies whether an update should be downloadable by end users or not."""  
    mandatory: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('mandatory'), 'exclude': lambda f: f is None }})
    r"""This specifies whether the update should be considered mandatory or not (e.g. it includes a critical security fix)."""  
    no_duplicate_release_error: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('no_duplicate_release_error'), 'exclude': lambda f: f is None }})
    r"""This specifies that if the update is identical to the latest release on the deployment, the CLI should generate a warning instead of an error."""  
    rollout: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('rollout'), 'exclude': lambda f: f is None }})
    r"""This specifies the percentage of users (as an integer between 1 and 100) that should be eligible to receive this update."""  
    

@dataclasses.dataclass
class CodePushDeploymentReleasesCreateRequest:
    
    app_name: str = dataclasses.field(metadata={'path_param': { 'field_name': 'app_name', 'style': 'simple', 'explode': False }})
    r"""The name of the application"""  
    deployment_name: str = dataclasses.field(metadata={'path_param': { 'field_name': 'deployment_name', 'style': 'simple', 'explode': False }})
    r"""deployment name"""  
    owner_name: str = dataclasses.field(metadata={'path_param': { 'field_name': 'owner_name', 'style': 'simple', 'explode': False }})
    r"""The name of the owner"""  
    request_body: CodePushDeploymentReleasesCreateRequestBody = dataclasses.field(metadata={'request': { 'media_type': 'application/json' }})
    r"""The necessary information required to download the bundle and being the release process."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CodePushDeploymentReleasesCreateDefaultApplicationJSON:
    r"""Error"""
    
    message: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('message') }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CodePushDeploymentReleasesCreate201ApplicationJSONDiffPackageMap:
    
    size: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('size') }})  
    url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('url') }})  
    
class CodePushDeploymentReleasesCreate201ApplicationJSONReleaseMethodEnum(str, Enum):
    r"""The release method is unknown if unspecified"""
    UPLOAD = 'Upload'
    PROMOTE = 'Promote'
    ROLLBACK = 'Rollback'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CodePushDeploymentReleasesCreate201ApplicationJSON:
    r"""Success"""
    
    blob_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('blob_url'), 'exclude': lambda f: f is None }})  
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description'), 'exclude': lambda f: f is None }})  
    diff_package_map: Optional[dict[str, CodePushDeploymentReleasesCreate201ApplicationJSONDiffPackageMap]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('diff_package_map'), 'exclude': lambda f: f is None }})  
    is_disabled: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('is_disabled'), 'exclude': lambda f: f is None }})  
    is_mandatory: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('is_mandatory'), 'exclude': lambda f: f is None }})  
    label: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('label'), 'exclude': lambda f: f is None }})  
    original_deployment: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('original_deployment'), 'exclude': lambda f: f is None }})
    r"""Set on 'Promote'"""  
    original_label: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('original_label'), 'exclude': lambda f: f is None }})
    r"""Set on 'Promote' and 'Rollback'"""  
    package_hash: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('package_hash'), 'exclude': lambda f: f is None }})  
    release_method: Optional[CodePushDeploymentReleasesCreate201ApplicationJSONReleaseMethodEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('release_method'), 'exclude': lambda f: f is None }})
    r"""The release method is unknown if unspecified"""  
    released_by: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('released_by'), 'exclude': lambda f: f is None }})  
    rollout: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('rollout'), 'exclude': lambda f: f is None }})  
    size: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('size'), 'exclude': lambda f: f is None }})  
    target_binary_range: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('target_binary_range'), 'exclude': lambda f: f is None }})  
    upload_time: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('upload_time'), 'exclude': lambda f: f is None }})  
    

@dataclasses.dataclass
class CodePushDeploymentReleasesCreateResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    code_push_deployment_releases_create_201_application_json_object: Optional[CodePushDeploymentReleasesCreate201ApplicationJSON] = dataclasses.field(default=None)
    r"""Success"""  
    code_push_deployment_releases_create_default_application_json_object: Optional[CodePushDeploymentReleasesCreateDefaultApplicationJSON] = dataclasses.field(default=None)
    r"""Error"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    