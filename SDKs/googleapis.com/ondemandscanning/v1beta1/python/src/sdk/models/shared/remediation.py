"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import relatedurl as shared_relatedurl
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class RemediationRemediationTypeEnum(str, Enum):
    r"""The type of remediation that can be applied."""
    REMEDIATION_TYPE_UNSPECIFIED = 'REMEDIATION_TYPE_UNSPECIFIED'
    MITIGATION = 'MITIGATION'
    NO_FIX_PLANNED = 'NO_FIX_PLANNED'
    NONE_AVAILABLE = 'NONE_AVAILABLE'
    VENDOR_FIX = 'VENDOR_FIX'
    WORKAROUND = 'WORKAROUND'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Remediation:
    r"""Specifies details on how to handle (and presumably, fix) a vulnerability."""
    
    details: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('details'), 'exclude': lambda f: f is None }})
    r"""Contains a comprehensive human-readable discussion of the remediation."""  
    remediation_type: Optional[RemediationRemediationTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('remediationType'), 'exclude': lambda f: f is None }})
    r"""The type of remediation that can be applied."""  
    remediation_uri: Optional[shared_relatedurl.RelatedURL] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('remediationUri'), 'exclude': lambda f: f is None }})
    r"""Metadata for any related URL information."""  
    