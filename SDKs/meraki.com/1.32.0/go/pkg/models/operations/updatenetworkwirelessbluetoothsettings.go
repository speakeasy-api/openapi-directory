// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// UpdateNetworkWirelessBluetoothSettingsRequestBodyMajorMinorAssignmentModeEnum - The way major and minor number should be assigned to nodes in the network. ('Unique', 'Non-unique')
type UpdateNetworkWirelessBluetoothSettingsRequestBodyMajorMinorAssignmentModeEnum string

const (
	UpdateNetworkWirelessBluetoothSettingsRequestBodyMajorMinorAssignmentModeEnumNonUnique UpdateNetworkWirelessBluetoothSettingsRequestBodyMajorMinorAssignmentModeEnum = "Non-unique"
	UpdateNetworkWirelessBluetoothSettingsRequestBodyMajorMinorAssignmentModeEnumUnique    UpdateNetworkWirelessBluetoothSettingsRequestBodyMajorMinorAssignmentModeEnum = "Unique"
)

func (e UpdateNetworkWirelessBluetoothSettingsRequestBodyMajorMinorAssignmentModeEnum) ToPointer() *UpdateNetworkWirelessBluetoothSettingsRequestBodyMajorMinorAssignmentModeEnum {
	return &e
}

func (e *UpdateNetworkWirelessBluetoothSettingsRequestBodyMajorMinorAssignmentModeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Non-unique":
		fallthrough
	case "Unique":
		*e = UpdateNetworkWirelessBluetoothSettingsRequestBodyMajorMinorAssignmentModeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateNetworkWirelessBluetoothSettingsRequestBodyMajorMinorAssignmentModeEnum: %v", v)
	}
}

type UpdateNetworkWirelessBluetoothSettingsRequestBody struct {
	// Whether APs will advertise beacons.
	AdvertisingEnabled *bool `json:"advertisingEnabled,omitempty"`
	// The major number to be used in the beacon identifier. Only valid in 'Non-unique' mode.
	Major *int64 `json:"major,omitempty"`
	// The way major and minor number should be assigned to nodes in the network. ('Unique', 'Non-unique')
	MajorMinorAssignmentMode *UpdateNetworkWirelessBluetoothSettingsRequestBodyMajorMinorAssignmentModeEnum `json:"majorMinorAssignmentMode,omitempty"`
	// The minor number to be used in the beacon identifier. Only valid in 'Non-unique' mode.
	Minor *int64 `json:"minor,omitempty"`
	// Whether APs will scan for Bluetooth enabled clients.
	ScanningEnabled *bool `json:"scanningEnabled,omitempty"`
	// The UUID to be used in the beacon identifier.
	UUID *string `json:"uuid,omitempty"`
}

type UpdateNetworkWirelessBluetoothSettingsRequest struct {
	RequestBody *UpdateNetworkWirelessBluetoothSettingsRequestBody `request:"mediaType=application/json"`
	NetworkID   string                                             `pathParam:"style=simple,explode=false,name=networkId"`
}

// UpdateNetworkWirelessBluetoothSettings200ApplicationJSON - Successful operation
type UpdateNetworkWirelessBluetoothSettings200ApplicationJSON struct {
	// Whether APs will advertise beacons.
	AdvertisingEnabled *bool `json:"advertisingEnabled,omitempty"`
	// Whether ESL is enabled on this network.
	EslEnabled *bool `json:"eslEnabled,omitempty"`
	// The major number to be used in the beacon identifier. Only valid in 'Non-unique' mode.
	Major *int64 `json:"major,omitempty"`
	// The way major and minor number should be assigned to nodes in the network. ('Unique', 'Non-unique')
	MajorMinorAssignmentMode *string `json:"majorMinorAssignmentMode,omitempty"`
	// The minor number to be used in the beacon identifier. Only valid in 'Non-unique' mode.
	Minor *int64 `json:"minor,omitempty"`
	// Whether APs will scan for Bluetooth enabled clients.
	ScanningEnabled *bool `json:"scanningEnabled,omitempty"`
	// The UUID to be used in the beacon identifier.
	UUID *string `json:"uuid,omitempty"`
}

type UpdateNetworkWirelessBluetoothSettingsResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Successful operation
	UpdateNetworkWirelessBluetoothSettings200ApplicationJSONObject *UpdateNetworkWirelessBluetoothSettings200ApplicationJSON
}
