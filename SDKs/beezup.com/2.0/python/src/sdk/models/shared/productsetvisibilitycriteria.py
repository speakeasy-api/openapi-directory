"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import productsetvisibilitycriterialogictype_enum as shared_productsetvisibilitycriterialogictype_enum
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ProductSetVisibilityCriteria:
    
    logic: shared_productsetvisibilitycriterialogictype_enum.ProductSetVisibilityCriteriaLogicTypeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('logic') }})
    r"""Indicate how you want to combine the filters:
    * funnel: You will get the products which meet at least one of the product set criterion. The criteria are applied in the following order:
      - categorization
      - exclusion filters
      - deactivations
    * cumulative: You will get the products which have all the product set criteria
    """  
    disabled: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('disabled'), 'exclude': lambda f: f is None }})
    r"""Search disabled products. If null the filter will not be taken in account."""  
    excluded: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('excluded'), 'exclude': lambda f: f is None }})
    r"""Search excluded products by at least an exclusion filter. If null the filter will not be taken in account."""  
    exist: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('exist'), 'exclude': lambda f: f is None }})
    r"""If false, search for products absent from the current catalog. If true, search for products currently in the catalog. If null the filter will not be taken in account."""  
    uncategorized: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('uncategorized'), 'exclude': lambda f: f is None }})
    r"""Search product WITHOUT category mapped with the channel. If null the filter will not be taken in account."""  
    