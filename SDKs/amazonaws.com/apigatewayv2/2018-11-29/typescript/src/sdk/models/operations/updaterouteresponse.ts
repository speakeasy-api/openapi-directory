/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import {
  objectToClass,
  SpeakeasyBase,
  SpeakeasyMetadata,
} from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
import { Expose, Transform } from "class-transformer";

export class UpdateRouteResponseRequestBody extends SpeakeasyBase {
  /**
   * An expression used to extract information at runtime. See <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-apikey-selection-expressions">Selection Expressions</a> for more information.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "modelSelectionExpression" })
  modelSelectionExpression?: string;

  /**
   * The route models.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "responseModels" })
  responseModels?: Record<string, string>;

  /**
   * The route parameters.
   */
  @SpeakeasyMetadata({ elemType: shared.ParameterConstraints })
  @Expose({ name: "responseParameters" })
  @Transform(
    ({ value }) => {
      const obj: Record<string, shared.ParameterConstraints> = {};
      for (const key in value) {
        obj[key] = objectToClass(value[key], shared.ParameterConstraints);
      }
      return obj;
    },
    { toClassOnly: true }
  )
  responseParameters?: Record<string, shared.ParameterConstraints>;

  /**
   * After evaluating a selection expression, the result is compared against one or more selection keys to find a matching key. See <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-apikey-selection-expressions">Selection Expressions</a> for a list of expressions and each expression's associated selection key type.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "routeResponseKey" })
  routeResponseKey?: string;
}

export class UpdateRouteResponseRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  requestBody: UpdateRouteResponseRequestBody;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Algorithm",
  })
  xAmzAlgorithm?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Content-Sha256",
  })
  xAmzContentSha256?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Credential",
  })
  xAmzCredential?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Date",
  })
  xAmzDate?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Security-Token",
  })
  xAmzSecurityToken?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Signature",
  })
  xAmzSignature?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-SignedHeaders",
  })
  xAmzSignedHeaders?: string;

  /**
   * The API identifier.
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=apiId",
  })
  apiId: string;

  /**
   * The route ID.
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=routeId",
  })
  routeId: string;

  /**
   * The route response ID.
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=routeResponseId",
  })
  routeResponseId: string;
}

export class UpdateRouteResponseResponse extends SpeakeasyBase {
  /**
   * BadRequestException
   */
  @SpeakeasyMetadata()
  badRequestException?: any;

  /**
   * ConflictException
   */
  @SpeakeasyMetadata()
  conflictException?: any;

  @SpeakeasyMetadata()
  contentType: string;

  /**
   * NotFoundException
   */
  @SpeakeasyMetadata()
  notFoundException?: any;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * TooManyRequestsException
   */
  @SpeakeasyMetadata()
  tooManyRequestsException?: any;

  /**
   * Success
   */
  @SpeakeasyMetadata()
  updateRouteResponseResponse?: shared.UpdateRouteResponseResponse;
}
