"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclasses.dataclass
class GetNetworkSmDevicePerformanceHistoryRequest:
    
    device_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'deviceId', 'style': 'simple', 'explode': False }})  
    network_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'networkId', 'style': 'simple', 'explode': False }})  
    ending_before: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'endingBefore', 'style': 'form', 'explode': True }})
    r"""A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it."""  
    per_page: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'perPage', 'style': 'form', 'explode': True }})
    r"""The number of entries per page returned. Acceptable range is 3 - 1000. Default is 1000."""  
    starting_after: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'startingAfter', 'style': 'form', 'explode': True }})
    r"""A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetNetworkSmDevicePerformanceHistory200ApplicationJSONDiskUsageC:
    r"""An object containing current disk usage details."""
    
    space: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('space'), 'exclude': lambda f: f is None }})
    r"""The available disk space."""  
    used: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('used'), 'exclude': lambda f: f is None }})
    r"""The used disk space."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetNetworkSmDevicePerformanceHistory200ApplicationJSONDiskUsage:
    r"""An object containing disk usage details."""
    
    c: Optional[GetNetworkSmDevicePerformanceHistory200ApplicationJSONDiskUsageC] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('c'), 'exclude': lambda f: f is None }})
    r"""An object containing current disk usage details."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetNetworkSmDevicePerformanceHistory200ApplicationJSON:
    
    cpu_percent_used: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cpuPercentUsed'), 'exclude': lambda f: f is None }})
    r"""The percentage of CPU used as a decimal format."""  
    disk_usage: Optional[GetNetworkSmDevicePerformanceHistory200ApplicationJSONDiskUsage] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('diskUsage'), 'exclude': lambda f: f is None }})
    r"""An object containing disk usage details."""  
    mem_active: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('memActive'), 'exclude': lambda f: f is None }})
    r"""The active RAM on the device."""  
    mem_free: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('memFree'), 'exclude': lambda f: f is None }})
    r"""Memory that is not yet in use by the system."""  
    mem_inactive: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('memInactive'), 'exclude': lambda f: f is None }})
    r"""The inactive RAM on the device."""  
    mem_wired: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('memWired'), 'exclude': lambda f: f is None }})
    r"""Memory used for core OS functions on the device."""  
    network_received: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('networkReceived'), 'exclude': lambda f: f is None }})
    r"""Network bandwith received."""  
    network_sent: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('networkSent'), 'exclude': lambda f: f is None }})
    r"""Network bandwith transmitted."""  
    swap_used: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('swapUsed'), 'exclude': lambda f: f is None }})
    r"""The amount of space being used on the startup disk to swap unused files to and from RAM."""  
    ts: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ts'), 'exclude': lambda f: f is None }})
    r"""The time at which the performance was measured."""  
    

@dataclasses.dataclass
class GetNetworkSmDevicePerformanceHistoryResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    get_network_sm_device_performance_history_200_application_json_objects: Optional[list[GetNetworkSmDevicePerformanceHistory200ApplicationJSON]] = dataclasses.field(default=None)
    r"""Successful operation"""  
    headers: Optional[dict[str, list[str]]] = dataclasses.field(default=None)  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    