// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"time"
)

type ReleaseEventForAPIContractCategoryEnum string

const (
	ReleaseEventForAPIContractCategoryEnumUnspecified  ReleaseEventForAPIContractCategoryEnum = "Unspecified"
	ReleaseEventForAPIContractCategoryEnumAlbumRelease ReleaseEventForAPIContractCategoryEnum = "AlbumRelease"
	ReleaseEventForAPIContractCategoryEnumAnniversary  ReleaseEventForAPIContractCategoryEnum = "Anniversary"
	ReleaseEventForAPIContractCategoryEnumClub         ReleaseEventForAPIContractCategoryEnum = "Club"
	ReleaseEventForAPIContractCategoryEnumConcert      ReleaseEventForAPIContractCategoryEnum = "Concert"
	ReleaseEventForAPIContractCategoryEnumContest      ReleaseEventForAPIContractCategoryEnum = "Contest"
	ReleaseEventForAPIContractCategoryEnumConvention   ReleaseEventForAPIContractCategoryEnum = "Convention"
	ReleaseEventForAPIContractCategoryEnumOther        ReleaseEventForAPIContractCategoryEnum = "Other"
)

func (e *ReleaseEventForAPIContractCategoryEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Unspecified":
		fallthrough
	case "AlbumRelease":
		fallthrough
	case "Anniversary":
		fallthrough
	case "Club":
		fallthrough
	case "Concert":
		fallthrough
	case "Contest":
		fallthrough
	case "Convention":
		fallthrough
	case "Other":
		*e = ReleaseEventForAPIContractCategoryEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ReleaseEventForAPIContractCategoryEnum: %s", s)
	}
}

type ReleaseEventForAPIContractStatusEnum string

const (
	ReleaseEventForAPIContractStatusEnumDraft    ReleaseEventForAPIContractStatusEnum = "Draft"
	ReleaseEventForAPIContractStatusEnumFinished ReleaseEventForAPIContractStatusEnum = "Finished"
	ReleaseEventForAPIContractStatusEnumApproved ReleaseEventForAPIContractStatusEnum = "Approved"
	ReleaseEventForAPIContractStatusEnumLocked   ReleaseEventForAPIContractStatusEnum = "Locked"
)

func (e *ReleaseEventForAPIContractStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Draft":
		fallthrough
	case "Finished":
		fallthrough
	case "Approved":
		fallthrough
	case "Locked":
		*e = ReleaseEventForAPIContractStatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ReleaseEventForAPIContractStatusEnum: %s", s)
	}
}

// ReleaseEventForAPIContract - OK
type ReleaseEventForAPIContract struct {
	AdditionalNames *string                                 `json:"additionalNames,omitempty"`
	Artists         []ArtistForEventContract                `json:"artists,omitempty"`
	Category        *ReleaseEventForAPIContractCategoryEnum `json:"category,omitempty"`
	Date            *time.Time                              `json:"date,omitempty"`
	Description     *string                                 `json:"description,omitempty"`
	EndDate         *time.Time                              `json:"endDate,omitempty"`
	ID              *int                                    `json:"id,omitempty"`
	MainPicture     *EntryThumbForAPIContract               `json:"mainPicture,omitempty"`
	Name            *string                                 `json:"name,omitempty"`
	Names           []LocalizedStringContract               `json:"names,omitempty"`
	Series          *ReleaseEventSeriesContract             `json:"series,omitempty"`
	SeriesID        *int                                    `json:"seriesId,omitempty"`
	SeriesNumber    *int                                    `json:"seriesNumber,omitempty"`
	SeriesSuffix    *string                                 `json:"seriesSuffix,omitempty"`
	SongList        *SongListBaseContract                   `json:"songList,omitempty"`
	Status          *ReleaseEventForAPIContractStatusEnum   `json:"status,omitempty"`
	Tags            []TagUsageForAPIContract                `json:"tags,omitempty"`
	URLSlug         *string                                 `json:"urlSlug,omitempty"`
	Venue           *VenueForAPIContract                    `json:"venue,omitempty"`
	VenueName       *string                                 `json:"venueName,omitempty"`
	Version         *int                                    `json:"version,omitempty"`
	WebLinks        []WebLinkForAPIContract                 `json:"webLinks,omitempty"`
}

type ReleaseEventForAPIContractInput struct {
	AdditionalNames *string                                 `json:"additionalNames,omitempty"`
	Artists         []ArtistForEventContract                `json:"artists,omitempty"`
	Category        *ReleaseEventForAPIContractCategoryEnum `json:"category,omitempty"`
	Date            *time.Time                              `json:"date,omitempty"`
	Description     *string                                 `json:"description,omitempty"`
	EndDate         *time.Time                              `json:"endDate,omitempty"`
	ID              *int                                    `json:"id,omitempty"`
	MainPicture     *EntryThumbForAPIContract               `json:"mainPicture,omitempty"`
	Name            *string                                 `json:"name,omitempty"`
	Names           []LocalizedStringContract               `json:"names,omitempty"`
	Series          *ReleaseEventSeriesContract             `json:"series,omitempty"`
	SeriesID        *int                                    `json:"seriesId,omitempty"`
	SeriesNumber    *int                                    `json:"seriesNumber,omitempty"`
	SeriesSuffix    *string                                 `json:"seriesSuffix,omitempty"`
	SongList        *SongListBaseContract                   `json:"songList,omitempty"`
	Status          *ReleaseEventForAPIContractStatusEnum   `json:"status,omitempty"`
	Tags            []TagUsageForAPIContract                `json:"tags,omitempty"`
	URLSlug         *string                                 `json:"urlSlug,omitempty"`
	Venue           *VenueForAPIContractInput               `json:"venue,omitempty"`
	VenueName       *string                                 `json:"venueName,omitempty"`
	Version         *int                                    `json:"version,omitempty"`
	WebLinks        []WebLinkForAPIContract                 `json:"webLinks,omitempty"`
}
