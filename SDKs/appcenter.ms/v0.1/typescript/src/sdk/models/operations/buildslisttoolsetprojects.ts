/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

export class BuildsListToolsetProjectsSecurity extends SpeakeasyBase {
  @SpeakeasyMetadata({
    data: "security, scheme=true;type=apiKey;subtype=header;name=X-API-Token",
  })
  apiToken: string;
}

/**
 * The desired OS for the project scan; normally the same as the app OS
 */
export enum BuildsListToolsetProjectsOsEnum {
  IOS = "iOS",
  Android = "Android",
  Windows = "Windows",
  MacOS = "macOS",
}

/**
 * The desired platform for the project scan
 */
export enum BuildsListToolsetProjectsPlatformEnum {
  ObjectiveCSwift = "Objective-C-Swift",
  ReactNative = "React-Native",
  Xamarin = "Xamarin",
  Java = "Java",
  Uwp = "UWP",
}

export class BuildsListToolsetProjectsRequest extends SpeakeasyBase {
  /**
   * The name of the application
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=app_name",
  })
  appName: string;

  /**
   * The branch name
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=branch",
  })
  branch: string;

  /**
   * The depth of the repository to search for project files
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=maxSearchDepth",
  })
  maxSearchDepth?: number;

  /**
   * The desired OS for the project scan; normally the same as the app OS
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=os" })
  os: BuildsListToolsetProjectsOsEnum;

  /**
   * The name of the owner
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=owner_name",
  })
  ownerName: string;

  /**
   * The desired platform for the project scan
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=platform",
  })
  platform: BuildsListToolsetProjectsPlatformEnum;
}

/**
 * Android signing config. Null if not specified
 */
export class BuildsListToolsetProjects200ApplicationJSONAndroidAndroidModulesBuildConfigurationsSigningConfig extends SpeakeasyBase {
  /**
   * Indicates if storeFile is specified in the signing configuration
   */
  @SpeakeasyMetadata()
  @Expose({ name: "hasStoreFile" })
  hasStoreFile?: boolean;
}

export class BuildsListToolsetProjects200ApplicationJSONAndroidAndroidModulesBuildConfigurations extends SpeakeasyBase {
  /**
   * Name of build configuration (the same as a build type name)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name: string;

  /**
   * Android signing config. Null if not specified
   */
  @SpeakeasyMetadata()
  @Expose({ name: "signingConfig" })
  @Type(
    () =>
      BuildsListToolsetProjects200ApplicationJSONAndroidAndroidModulesBuildConfigurationsSigningConfig
  )
  signingConfig?: BuildsListToolsetProjects200ApplicationJSONAndroidAndroidModulesBuildConfigurationsSigningConfig;
}

export class BuildsListToolsetProjects200ApplicationJSONAndroidAndroidModules extends SpeakeasyBase {
  /**
   * The detected build configurations of the Android module
   */
  @SpeakeasyMetadata({
    elemType:
      BuildsListToolsetProjects200ApplicationJSONAndroidAndroidModulesBuildConfigurations,
  })
  @Expose({ name: "buildConfigurations" })
  @Type(
    () =>
      BuildsListToolsetProjects200ApplicationJSONAndroidAndroidModulesBuildConfigurations
  )
  buildConfigurations?: BuildsListToolsetProjects200ApplicationJSONAndroidAndroidModulesBuildConfigurations[];

  /**
   * The detected build types of the Android module
   */
  @SpeakeasyMetadata()
  @Expose({ name: "buildTypes" })
  buildTypes?: string[];

  /**
   * The detected build variants of the Android module (matrix of product flavor + build type (debug|release))
   */
  @SpeakeasyMetadata()
  @Expose({ name: "buildVariants" })
  buildVariants?: string[];

  /**
   * Module contains bundle settings
   */
  @SpeakeasyMetadata()
  @Expose({ name: "hasBundle" })
  hasBundle?: boolean;

  /**
   * Whether the module is at the root level of the project
   */
  @SpeakeasyMetadata()
  @Expose({ name: "isRoot" })
  isRoot?: boolean;

  /**
   * Name of the Android module
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name: string;

  /**
   * The product flavors of the Android module
   */
  @SpeakeasyMetadata()
  @Expose({ name: "productFlavors" })
  productFlavors?: string[];
}

export class BuildsListToolsetProjects200ApplicationJSONAndroid extends SpeakeasyBase {
  /**
   * Android Gradle modules
   */
  @SpeakeasyMetadata({
    elemType: BuildsListToolsetProjects200ApplicationJSONAndroidAndroidModules,
  })
  @Expose({ name: "androidModules" })
  @Type(() => BuildsListToolsetProjects200ApplicationJSONAndroidAndroidModules)
  androidModules: BuildsListToolsetProjects200ApplicationJSONAndroidAndroidModules[];

  /**
   * The path of the Gradle wrapper
   */
  @SpeakeasyMetadata()
  @Expose({ name: "gradleWrapperPath" })
  gradleWrapperPath?: string;
}

export class BuildsListToolsetProjects200ApplicationJSONJavascriptJavascriptSolutions extends SpeakeasyBase {
  /**
   * The path to the detected package.json
   */
  @SpeakeasyMetadata()
  @Expose({ name: "packageJsonPath" })
  packageJsonPath: string;

  /**
   * Version of React Native from package.json files
   */
  @SpeakeasyMetadata()
  @Expose({ name: "reactNativeVersion" })
  reactNativeVersion?: string;
}

export class BuildsListToolsetProjects200ApplicationJSONJavascript extends SpeakeasyBase {
  /**
   * The React Native solutions detected
   */
  @SpeakeasyMetadata({
    elemType:
      BuildsListToolsetProjects200ApplicationJSONJavascriptJavascriptSolutions,
  })
  @Expose({ name: "javascriptSolutions" })
  @Type(
    () =>
      BuildsListToolsetProjects200ApplicationJSONJavascriptJavascriptSolutions
  )
  javascriptSolutions?: BuildsListToolsetProjects200ApplicationJSONJavascriptJavascriptSolutions[];

  /**
   * Paths for detected package.json files
   */
  @SpeakeasyMetadata()
  @Expose({ name: "packageJsonPaths" })
  packageJsonPaths: string[];
}

export class BuildsListToolsetProjects200ApplicationJSONTestcloudProjectsFrameworkProperties extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "configurations" })
  configurations?: string[];
}

export enum BuildsListToolsetProjects200ApplicationJSONTestcloudProjectsFrameworkTypeEnum {
  Appium = "Appium",
  Calabash = "Calabash",
  Espresso = "Espresso",
  UITest = "UITest",
  Generated = "Generated",
}

export class BuildsListToolsetProjects200ApplicationJSONTestcloudProjects extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "frameworkProperties" })
  @Type(
    () =>
      BuildsListToolsetProjects200ApplicationJSONTestcloudProjectsFrameworkProperties
  )
  frameworkProperties?: BuildsListToolsetProjects200ApplicationJSONTestcloudProjectsFrameworkProperties;

  @SpeakeasyMetadata()
  @Expose({ name: "frameworkType" })
  frameworkType: BuildsListToolsetProjects200ApplicationJSONTestcloudProjectsFrameworkTypeEnum;

  /**
   * The path to the TestCloud project
   */
  @SpeakeasyMetadata()
  @Expose({ name: "path" })
  path: string;
}

export class BuildsListToolsetProjects200ApplicationJSONTestcloud extends SpeakeasyBase {
  /**
   * The TestCloud projects detected
   */
  @SpeakeasyMetadata({
    elemType: BuildsListToolsetProjects200ApplicationJSONTestcloudProjects,
  })
  @Expose({ name: "projects" })
  @Type(() => BuildsListToolsetProjects200ApplicationJSONTestcloudProjects)
  projects: BuildsListToolsetProjects200ApplicationJSONTestcloudProjects[];
}

export class BuildsListToolsetProjects200ApplicationJSONUwpUwpSolutions extends SpeakeasyBase {
  /**
   * The possible configurations detected for the UWP solution
   */
  @SpeakeasyMetadata()
  @Expose({ name: "configurations" })
  configurations: string[];

  /**
   * The path to the UWP solution
   */
  @SpeakeasyMetadata()
  @Expose({ name: "path" })
  path: string;
}

export class BuildsListToolsetProjects200ApplicationJSONUwp extends SpeakeasyBase {
  /**
   * The UWP solutions detected
   */
  @SpeakeasyMetadata({
    elemType: BuildsListToolsetProjects200ApplicationJSONUwpUwpSolutions,
  })
  @Expose({ name: "uwpSolutions" })
  @Type(() => BuildsListToolsetProjects200ApplicationJSONUwpUwpSolutions)
  uwpSolutions: BuildsListToolsetProjects200ApplicationJSONUwpUwpSolutions[];
}

export class BuildsListToolsetProjects200ApplicationJSONXamarinXamarinSolutions extends SpeakeasyBase {
  /**
   * Solution configurations
   */
  @SpeakeasyMetadata()
  @Expose({ name: "configurations" })
  configurations: string[];

  /**
   * Solution default configuration
   */
  @SpeakeasyMetadata()
  @Expose({ name: "defaultConfiguration" })
  defaultConfiguration?: string;

  /**
   * Path to solution
   */
  @SpeakeasyMetadata()
  @Expose({ name: "path" })
  path: string;
}

export class BuildsListToolsetProjects200ApplicationJSONXamarin extends SpeakeasyBase {
  /**
   * Xamarin solutions for the toolset
   */
  @SpeakeasyMetadata({
    elemType:
      BuildsListToolsetProjects200ApplicationJSONXamarinXamarinSolutions,
  })
  @Expose({ name: "xamarinSolutions" })
  @Type(
    () => BuildsListToolsetProjects200ApplicationJSONXamarinXamarinSolutions
  )
  xamarinSolutions: BuildsListToolsetProjects200ApplicationJSONXamarinXamarinSolutions[];
}

/**
 * App extension information
 */
export class BuildsListToolsetProjects200ApplicationJSONXcodeXcodeSchemeContainersAppExtensionTargets extends SpeakeasyBase {
  /**
   * App extension name
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name: string;

  /**
   * App extension bundle identifier
   */
  @SpeakeasyMetadata()
  @Expose({ name: "targetBundleIdentifier" })
  targetBundleIdentifier: string;
}

export class BuildsListToolsetProjects200ApplicationJSONXcodeXcodeSchemeContainersSharedSchemesArchiveProject extends SpeakeasyBase {
  /**
   * The Id of the target to archive
   */
  @SpeakeasyMetadata()
  @Expose({ name: "archiveTargetId" })
  archiveTargetId: string;

  /**
   * The project to archive container name
   */
  @SpeakeasyMetadata()
  @Expose({ name: "projectName" })
  projectName: string;

  /**
   * Full path of the target project
   */
  @SpeakeasyMetadata()
  @Expose({ name: "projectPath" })
  projectPath?: string;
}

export class BuildsListToolsetProjects200ApplicationJSONXcodeXcodeSchemeContainersSharedSchemes extends SpeakeasyBase {
  /**
   * Build configuration set in Archive action
   */
  @SpeakeasyMetadata()
  @Expose({ name: "archiveConfiguration" })
  archiveConfiguration?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "archiveProject" })
  @Type(
    () =>
      BuildsListToolsetProjects200ApplicationJSONXcodeXcodeSchemeContainersSharedSchemesArchiveProject
  )
  archiveProject?: BuildsListToolsetProjects200ApplicationJSONXcodeXcodeSchemeContainersSharedSchemesArchiveProject;

  /**
   * Does scheme have a test action?
   */
  @SpeakeasyMetadata()
  @Expose({ name: "hasTestAction" })
  hasTestAction: boolean;

  /**
   * Scheme name
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name: string;
}

export class BuildsListToolsetProjects200ApplicationJSONXcodeXcodeSchemeContainers extends SpeakeasyBase {
  /**
   * Information regarding project app extensions, if present
   */
  @SpeakeasyMetadata({
    elemType:
      BuildsListToolsetProjects200ApplicationJSONXcodeXcodeSchemeContainersAppExtensionTargets,
  })
  @Expose({ name: "appExtensionTargets" })
  @Type(
    () =>
      BuildsListToolsetProjects200ApplicationJSONXcodeXcodeSchemeContainersAppExtensionTargets
  )
  appExtensionTargets?: BuildsListToolsetProjects200ApplicationJSONXcodeXcodeSchemeContainersAppExtensionTargets[];

  /**
   * Path to Carthage file, if present
   */
  @SpeakeasyMetadata()
  @Expose({ name: "cartfilePath" })
  cartfilePath?: string;

  /**
   * Path to project
   */
  @SpeakeasyMetadata()
  @Expose({ name: "path" })
  path: string;

  /**
   * Path to CocoaPods file, if present
   */
  @SpeakeasyMetadata()
  @Expose({ name: "podfilePath" })
  podfilePath?: string;

  /**
   * Project schemes
   */
  @SpeakeasyMetadata({
    elemType:
      BuildsListToolsetProjects200ApplicationJSONXcodeXcodeSchemeContainersSharedSchemes,
  })
  @Expose({ name: "sharedSchemes" })
  @Type(
    () =>
      BuildsListToolsetProjects200ApplicationJSONXcodeXcodeSchemeContainersSharedSchemes
  )
  sharedSchemes: BuildsListToolsetProjects200ApplicationJSONXcodeXcodeSchemeContainersSharedSchemes[];

  /**
   * Related projects paths for xcworkspace
   */
  @SpeakeasyMetadata()
  @Expose({ name: "workspaceProjectPaths" })
  workspaceProjectPaths?: string;

  /**
   * repo object Id of the pbxproject
   */
  @SpeakeasyMetadata()
  @Expose({ name: "xcodeProjectSha" })
  xcodeProjectSha?: string;
}

export class BuildsListToolsetProjects200ApplicationJSONXcode extends SpeakeasyBase {
  /**
   * The Xcode scheme containers
   */
  @SpeakeasyMetadata({
    elemType:
      BuildsListToolsetProjects200ApplicationJSONXcodeXcodeSchemeContainers,
  })
  @Expose({ name: "xcodeSchemeContainers" })
  @Type(
    () => BuildsListToolsetProjects200ApplicationJSONXcodeXcodeSchemeContainers
  )
  xcodeSchemeContainers: BuildsListToolsetProjects200ApplicationJSONXcodeXcodeSchemeContainers[];
}

/**
 * A collection of projects for each type of toolset
 */
export class BuildsListToolsetProjects200ApplicationJSON extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "android" })
  @Type(() => BuildsListToolsetProjects200ApplicationJSONAndroid)
  android?: BuildsListToolsetProjects200ApplicationJSONAndroid;

  /**
   * A collection of detected pre/post buildscripts for current platform toolset
   */
  @SpeakeasyMetadata()
  @Expose({ name: "buildscripts" })
  buildscripts?: any;

  /**
   * The commit hash of the analyzed commit
   */
  @SpeakeasyMetadata()
  @Expose({ name: "commit" })
  commit?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "javascript" })
  @Type(() => BuildsListToolsetProjects200ApplicationJSONJavascript)
  javascript?: BuildsListToolsetProjects200ApplicationJSONJavascript;

  @SpeakeasyMetadata()
  @Expose({ name: "testcloud" })
  @Type(() => BuildsListToolsetProjects200ApplicationJSONTestcloud)
  testcloud?: BuildsListToolsetProjects200ApplicationJSONTestcloud;

  @SpeakeasyMetadata()
  @Expose({ name: "uwp" })
  @Type(() => BuildsListToolsetProjects200ApplicationJSONUwp)
  uwp?: BuildsListToolsetProjects200ApplicationJSONUwp;

  @SpeakeasyMetadata()
  @Expose({ name: "xamarin" })
  @Type(() => BuildsListToolsetProjects200ApplicationJSONXamarin)
  xamarin?: BuildsListToolsetProjects200ApplicationJSONXamarin;

  @SpeakeasyMetadata()
  @Expose({ name: "xcode" })
  @Type(() => BuildsListToolsetProjects200ApplicationJSONXcode)
  xcode?: BuildsListToolsetProjects200ApplicationJSONXcode;
}

export class BuildsListToolsetProjectsResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * Success
   */
  @SpeakeasyMetadata()
  buildsListToolsetProjects200ApplicationJSONObject?: BuildsListToolsetProjects200ApplicationJSON;
}
