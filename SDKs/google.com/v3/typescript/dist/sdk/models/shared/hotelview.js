"use strict";
/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.HotelView = exports.HotelViewMatchStatusEnum = exports.HotelViewDataIssuesEnum = void 0;
var utils_1 = require("../../../internal/utils");
var dataissuedetail_1 = require("./dataissuedetail");
var class_transformer_1 = require("class-transformer");
var HotelViewDataIssuesEnum;
(function (HotelViewDataIssuesEnum) {
    HotelViewDataIssuesEnum["FeedDataIssueUnspecified"] = "FEED_DATA_ISSUE_UNSPECIFIED";
    HotelViewDataIssuesEnum["FeedDataIssueUnknown"] = "FEED_DATA_ISSUE_UNKNOWN";
    HotelViewDataIssuesEnum["NoDataIssue"] = "NO_DATA_ISSUE";
    HotelViewDataIssuesEnum["DuplicateAddress"] = "DUPLICATE_ADDRESS";
    HotelViewDataIssuesEnum["MissingPhysicalStreetAddress"] = "MISSING_PHYSICAL_STREET_ADDRESS";
    HotelViewDataIssuesEnum["MissingStreetName"] = "MISSING_STREET_NAME";
    HotelViewDataIssuesEnum["MissingStreetNumber"] = "MISSING_STREET_NUMBER";
    HotelViewDataIssuesEnum["MissingAddress"] = "MISSING_ADDRESS";
    HotelViewDataIssuesEnum["MissingCountry"] = "MISSING_COUNTRY";
    HotelViewDataIssuesEnum["InvalidPostalCode"] = "INVALID_POSTAL_CODE";
    HotelViewDataIssuesEnum["InvalidPostalCodeSuffix"] = "INVALID_POSTAL_CODE_SUFFIX";
    HotelViewDataIssuesEnum["UnexpectedPostalCodeSuffix"] = "UNEXPECTED_POSTAL_CODE_SUFFIX";
    HotelViewDataIssuesEnum["UnexpectedPostalCode"] = "UNEXPECTED_POSTAL_CODE";
    HotelViewDataIssuesEnum["InvalidAmenities"] = "INVALID_AMENITIES";
    HotelViewDataIssuesEnum["InvalidEmailAddress"] = "INVALID_EMAIL_ADDRESS";
    HotelViewDataIssuesEnum["DuplicateLatlong"] = "DUPLICATE_LATLONG";
    HotelViewDataIssuesEnum["LatlongInconsistentWithAddress"] = "LATLONG_INCONSISTENT_WITH_ADDRESS";
    HotelViewDataIssuesEnum["MissingLatlong"] = "MISSING_LATLONG";
    HotelViewDataIssuesEnum["CouldNotGeocode"] = "COULD_NOT_GEOCODE";
    HotelViewDataIssuesEnum["MissingHotelName"] = "MISSING_HOTEL_NAME";
    HotelViewDataIssuesEnum["HotelNameEmpty"] = "HOTEL_NAME_EMPTY";
    HotelViewDataIssuesEnum["InvalidHotelName"] = "INVALID_HOTEL_NAME";
    HotelViewDataIssuesEnum["HotelNameTooLong"] = "HOTEL_NAME_TOO_LONG";
    HotelViewDataIssuesEnum["ParseErrorInXml"] = "PARSE_ERROR_IN_XML";
    HotelViewDataIssuesEnum["UnexpectedAttributeInXml"] = "UNEXPECTED_ATTRIBUTE_IN_XML";
    HotelViewDataIssuesEnum["DuplicatePhoneNumber"] = "DUPLICATE_PHONE_NUMBER";
    HotelViewDataIssuesEnum["MissingPhoneNumber"] = "MISSING_PHONE_NUMBER";
    HotelViewDataIssuesEnum["MissingVoicePhoneNumber"] = "MISSING_VOICE_PHONE_NUMBER";
    HotelViewDataIssuesEnum["InvalidPhoneNumberFormat"] = "INVALID_PHONE_NUMBER_FORMAT";
    HotelViewDataIssuesEnum["InvalidPhoneNumber"] = "INVALID_PHONE_NUMBER";
    HotelViewDataIssuesEnum["InvalidPhoneNumberCountryCode"] = "INVALID_PHONE_NUMBER_COUNTRY_CODE";
    HotelViewDataIssuesEnum["PhoneNumberTooLong"] = "PHONE_NUMBER_TOO_LONG";
    HotelViewDataIssuesEnum["PhoneNumberTooShort"] = "PHONE_NUMBER_TOO_SHORT";
    HotelViewDataIssuesEnum["InvalidWebsiteUrl"] = "INVALID_WEBSITE_URL";
    HotelViewDataIssuesEnum["AdwordsAttributeTooLong"] = "ADWORDS_ATTRIBUTE_TOO_LONG";
    HotelViewDataIssuesEnum["BrandNotAllowed"] = "BRAND_NOT_ALLOWED";
    HotelViewDataIssuesEnum["FlaggedDueToSuspiciousMetadata"] = "FLAGGED_DUE_TO_SUSPICIOUS_METADATA";
    HotelViewDataIssuesEnum["NotEnoughImagesProvided"] = "NOT_ENOUGH_IMAGES_PROVIDED";
    HotelViewDataIssuesEnum["ImageProcessingInProgress"] = "IMAGE_PROCESSING_IN_PROGRESS";
    HotelViewDataIssuesEnum["CannotFetchImages"] = "CANNOT_FETCH_IMAGES";
    HotelViewDataIssuesEnum["IncompatibleImageSizeOrLowQuality"] = "INCOMPATIBLE_IMAGE_SIZE_OR_LOW_QUALITY";
    HotelViewDataIssuesEnum["MissingLangInRawListing"] = "MISSING_LANG_IN_RAW_LISTING";
    HotelViewDataIssuesEnum["IsHotel"] = "IS_HOTEL";
    HotelViewDataIssuesEnum["MissingReqAttr"] = "MISSING_REQ_ATTR";
    HotelViewDataIssuesEnum["MissingName"] = "MISSING_NAME";
    HotelViewDataIssuesEnum["MissingLangInName"] = "MISSING_LANG_IN_NAME";
    HotelViewDataIssuesEnum["VrNameTooLong"] = "VR_NAME_TOO_LONG";
    HotelViewDataIssuesEnum["TestProperty"] = "TEST_PROPERTY";
    HotelViewDataIssuesEnum["NonVrAccommodationTypeBasedOnListingName"] = "NON_VR_ACCOMMODATION_TYPE_BASED_ON_LISTING_NAME";
    HotelViewDataIssuesEnum["BrandNameTooLong"] = "BRAND_NAME_TOO_LONG";
    HotelViewDataIssuesEnum["MissingBrandName"] = "MISSING_BRAND_NAME";
    HotelViewDataIssuesEnum["InvalidReviewRating"] = "INVALID_REVIEW_RATING";
    HotelViewDataIssuesEnum["InvalidCheckinFormat"] = "INVALID_CHECKIN_FORMAT";
    HotelViewDataIssuesEnum["InvalidCheckoutFormat"] = "INVALID_CHECKOUT_FORMAT";
})(HotelViewDataIssuesEnum = exports.HotelViewDataIssuesEnum || (exports.HotelViewDataIssuesEnum = {}));
/**
 * Current matching status of the hotel.
 */
var HotelViewMatchStatusEnum;
(function (HotelViewMatchStatusEnum) {
    HotelViewMatchStatusEnum["MatchStatusUnspecified"] = "MATCH_STATUS_UNSPECIFIED";
    HotelViewMatchStatusEnum["MatchStatusUnknown"] = "MATCH_STATUS_UNKNOWN";
    HotelViewMatchStatusEnum["NotMatched"] = "NOT_MATCHED";
    HotelViewMatchStatusEnum["Matched"] = "MATCHED";
    HotelViewMatchStatusEnum["MapOverlap"] = "MAP_OVERLAP";
})(HotelViewMatchStatusEnum = exports.HotelViewMatchStatusEnum || (exports.HotelViewMatchStatusEnum = {}));
/**
 * A hotel view.
 */
var HotelView = /** @class */ (function (_super) {
    __extends(HotelView, _super);
    function HotelView() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({ elemType: dataissuedetail_1.DataIssueDetail }),
        (0, class_transformer_1.Expose)({ name: "dataIssueDetail" }),
        (0, class_transformer_1.Type)(function () { return dataissuedetail_1.DataIssueDetail; }),
        __metadata("design:type", Array)
    ], HotelView.prototype, "dataIssueDetail", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "dataIssues" }),
        __metadata("design:type", Array)
    ], HotelView.prototype, "dataIssues", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "googleClusterId" }),
        __metadata("design:type", String)
    ], HotelView.prototype, "googleClusterId", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "googleHotelDisplayName" }),
        __metadata("design:type", String)
    ], HotelView.prototype, "googleHotelDisplayName", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "googleHotelId" }),
        __metadata("design:type", String)
    ], HotelView.prototype, "googleHotelId", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "liveOnGoogle" }),
        __metadata("design:type", Boolean)
    ], HotelView.prototype, "liveOnGoogle", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "matchStatus" }),
        __metadata("design:type", String)
    ], HotelView.prototype, "matchStatus", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "overclusteredPartnerHotelIds" }),
        __metadata("design:type", Array)
    ], HotelView.prototype, "overclusteredPartnerHotelIds", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "partnerHotelDisplayName" }),
        __metadata("design:type", String)
    ], HotelView.prototype, "partnerHotelDisplayName", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "partnerHotelId" }),
        __metadata("design:type", String)
    ], HotelView.prototype, "partnerHotelId", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "primaryOverclusteredPartnerHotelId" }),
        __metadata("design:type", String)
    ], HotelView.prototype, "primaryOverclusteredPartnerHotelId", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "propertyDetails" }),
        __metadata("design:type", String)
    ], HotelView.prototype, "propertyDetails", void 0);
    return HotelView;
}(utils_1.SpeakeasyBase));
exports.HotelView = HotelView;
