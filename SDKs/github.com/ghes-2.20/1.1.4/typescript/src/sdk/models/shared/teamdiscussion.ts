/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { NullableSimpleUser } from "./nullablesimpleuser";
import { ReactionRollup } from "./reactionrollup";
import { Expose, Transform, Type } from "class-transformer";

/**
 * A team discussion is a persistent record of a free-form conversation within a team.
 */
export class TeamDiscussion extends SpeakeasyBase {
  /**
   * Simple User
   */
  @SpeakeasyMetadata()
  @Expose({ name: "author" })
  @Type(() => NullableSimpleUser)
  author: NullableSimpleUser;

  /**
   * The main text of the discussion.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "body" })
  body: string;

  @SpeakeasyMetadata()
  @Expose({ name: "body_html" })
  bodyHtml: string;

  /**
   * The current version of the body content. If provided, this update operation will be rejected if the given version does not match the latest version on the server.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "body_version" })
  bodyVersion: string;

  @SpeakeasyMetadata()
  @Expose({ name: "comments_count" })
  commentsCount: number;

  @SpeakeasyMetadata()
  @Expose({ name: "comments_url" })
  commentsUrl: string;

  @SpeakeasyMetadata()
  @Expose({ name: "created_at" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  createdAt: Date;

  @SpeakeasyMetadata()
  @Expose({ name: "html_url" })
  htmlUrl: string;

  @SpeakeasyMetadata()
  @Expose({ name: "last_edited_at" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  lastEditedAt: Date;

  @SpeakeasyMetadata()
  @Expose({ name: "node_id" })
  nodeId: string;

  /**
   * The unique sequence number of a team discussion.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "number" })
  number: number;

  /**
   * Whether or not this discussion should be pinned for easy retrieval.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "pinned" })
  pinned: boolean;

  /**
   * Whether or not this discussion should be restricted to team members and organization administrators.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "private" })
  private: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "reactions" })
  @Type(() => ReactionRollup)
  reactions?: ReactionRollup;

  @SpeakeasyMetadata()
  @Expose({ name: "team_url" })
  teamUrl: string;

  /**
   * The title of the discussion.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "title" })
  title: string;

  @SpeakeasyMetadata()
  @Expose({ name: "updated_at" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  updatedAt: Date;

  @SpeakeasyMetadata()
  @Expose({ name: "url" })
  url: string;
}
