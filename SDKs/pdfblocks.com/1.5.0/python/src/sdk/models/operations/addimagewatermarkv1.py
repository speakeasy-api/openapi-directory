"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Any, Optional


@dataclasses.dataclass
class AddImageWatermarkV1RequestBodyFile:
    
    content: bytes = dataclasses.field(metadata={'multipart_form': { 'content': True }})  
    file: str = dataclasses.field(metadata={'multipart_form': { 'field_name': 'file' }})  
    

@dataclasses.dataclass
class AddImageWatermarkV1RequestBodyImage:
    
    content: bytes = dataclasses.field(metadata={'multipart_form': { 'content': True }})  
    image: str = dataclasses.field(metadata={'multipart_form': { 'field_name': 'image' }})  
    

@dataclasses.dataclass
class AddImageWatermarkV1RequestBody:
    
    file: AddImageWatermarkV1RequestBodyFile = dataclasses.field(metadata={'multipart_form': { 'file': True }})
    r"""The input PDF document"""  
    image: AddImageWatermarkV1RequestBodyImage = dataclasses.field(metadata={'multipart_form': { 'file': True }})
    r"""The image to add as a watermark. The format of the image can be either PNG or JPEG."""  
    margin: Optional[float] = dataclasses.field(default=None, metadata={'multipart_form': { 'field_name': 'margin' }})
    r"""The distance in inches from the border of the page to the image watermark."""  
    transparency: Optional[int] = dataclasses.field(default=None, metadata={'multipart_form': { 'field_name': 'transparency' }})
    r"""The transparency level for the image watermark from 0 (opaque) to 100 (transparent)."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class AddImageWatermarkV14XXApplicationProblemPlusJSON:
    r"""Error"""
    
    errors: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('errors'), 'exclude': lambda f: f is None }})  
    status: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status'), 'exclude': lambda f: f is None }})  
    title: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('title'), 'exclude': lambda f: f is None }})  
    type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})  
    

@dataclasses.dataclass
class AddImageWatermarkV1Response:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    add_image_watermark_v1_200_application_pdf_binary_string: Optional[bytes] = dataclasses.field(default=None)
    r"""The document was processed succesfully."""  
    add_image_watermark_v1_4_xx_application_problem_plus_json_object: Optional[AddImageWatermarkV14XXApplicationProblemPlusJSON] = dataclasses.field(default=None)
    r"""Error"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    