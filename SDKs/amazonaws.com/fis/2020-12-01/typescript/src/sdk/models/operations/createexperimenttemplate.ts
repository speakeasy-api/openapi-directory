/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import {
  objectToClass,
  SpeakeasyBase,
  SpeakeasyMetadata,
} from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
import { Expose, Transform, Type } from "class-transformer";

/**
 * Specifies the configuration for experiment logging.
 */
export class CreateExperimentTemplateRequestBodyLogConfiguration extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "cloudWatchLogsConfiguration" })
  @Type(() => shared.ExperimentTemplateCloudWatchLogsLogConfigurationInput)
  cloudWatchLogsConfiguration?: shared.ExperimentTemplateCloudWatchLogsLogConfigurationInput;

  @SpeakeasyMetadata()
  @Expose({ name: "logSchemaVersion" })
  logSchemaVersion?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "s3Configuration" })
  @Type(() => shared.ExperimentTemplateS3LogConfigurationInput)
  s3Configuration?: shared.ExperimentTemplateS3LogConfigurationInput;
}

export class CreateExperimentTemplateRequestBody extends SpeakeasyBase {
  /**
   * The actions for the experiment.
   */
  @SpeakeasyMetadata({ elemType: shared.CreateExperimentTemplateActionInput })
  @Expose({ name: "actions" })
  @Transform(
    ({ value }) => {
      const obj: Record<string, shared.CreateExperimentTemplateActionInput> =
        {};
      for (const key in value) {
        obj[key] = objectToClass(
          value[key],
          shared.CreateExperimentTemplateActionInput
        );
      }
      return obj;
    },
    { toClassOnly: true }
  )
  actions: Record<string, shared.CreateExperimentTemplateActionInput>;

  /**
   * Unique, case-sensitive identifier that you provide to ensure the idempotency of the request.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "clientToken" })
  clientToken: string;

  /**
   * A description for the experiment template.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "description" })
  description: string;

  /**
   * Specifies the configuration for experiment logging.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "logConfiguration" })
  @Type(() => CreateExperimentTemplateRequestBodyLogConfiguration)
  logConfiguration?: CreateExperimentTemplateRequestBodyLogConfiguration;

  /**
   * The Amazon Resource Name (ARN) of an IAM role that grants the FIS service permission to perform service actions on your behalf.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "roleArn" })
  roleArn: string;

  /**
   * The stop conditions.
   */
  @SpeakeasyMetadata({
    elemType: shared.CreateExperimentTemplateStopConditionInput,
  })
  @Expose({ name: "stopConditions" })
  @Type(() => shared.CreateExperimentTemplateStopConditionInput)
  stopConditions: shared.CreateExperimentTemplateStopConditionInput[];

  /**
   * The tags to apply to the experiment template.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "tags" })
  tags?: Record<string, string>;

  /**
   * The targets for the experiment.
   */
  @SpeakeasyMetadata({ elemType: shared.CreateExperimentTemplateTargetInput })
  @Expose({ name: "targets" })
  @Transform(
    ({ value }) => {
      const obj: Record<string, shared.CreateExperimentTemplateTargetInput> =
        {};
      for (const key in value) {
        obj[key] = objectToClass(
          value[key],
          shared.CreateExperimentTemplateTargetInput
        );
      }
      return obj;
    },
    { toClassOnly: true }
  )
  targets?: Record<string, shared.CreateExperimentTemplateTargetInput>;
}

export class CreateExperimentTemplateRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  requestBody: CreateExperimentTemplateRequestBody;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Algorithm",
  })
  xAmzAlgorithm?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Content-Sha256",
  })
  xAmzContentSha256?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Credential",
  })
  xAmzCredential?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Date",
  })
  xAmzDate?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Security-Token",
  })
  xAmzSecurityToken?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Signature",
  })
  xAmzSignature?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-SignedHeaders",
  })
  xAmzSignedHeaders?: string;
}

export class CreateExperimentTemplateResponse extends SpeakeasyBase {
  /**
   * ConflictException
   */
  @SpeakeasyMetadata()
  conflictException?: any;

  @SpeakeasyMetadata()
  contentType: string;

  /**
   * Success
   */
  @SpeakeasyMetadata()
  createExperimentTemplateResponse?: shared.CreateExperimentTemplateResponse;

  /**
   * ResourceNotFoundException
   */
  @SpeakeasyMetadata()
  resourceNotFoundException?: any;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * ServiceQuotaExceededException
   */
  @SpeakeasyMetadata()
  serviceQuotaExceededException?: any;

  /**
   * ValidationException
   */
  @SpeakeasyMetadata()
  validationException?: any;
}
