/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

public class NADashboardData {
    /**
     * Real measured pressure @ time_utc (in mb)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("AbsolutePressure")
    public Float absolutePressure;

    public NADashboardData withAbsolutePressure(Float absolutePressure) {
        this.absolutePressure = absolutePressure;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("BoilerOff")
    public Integer boilerOff;

    public NADashboardData withBoilerOff(Integer boilerOff) {
        this.boilerOff = boilerOff;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("BoilerOn")
    public Integer boilerOn;

    public NADashboardData withBoilerOn(Integer boilerOn) {
        this.boilerOn = boilerOn;
        return this;
    }
    
    /**
     * Last Co2 measured @ time_utc (in ppm)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("CO2")
    public Float co2;

    public NADashboardData withCo2(Float co2) {
        this.co2 = co2;
        return this;
    }
    
    /**
     * Direction of the last 5 min highest gust wind
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("GustAngle")
    public Integer gustAngle;

    public NADashboardData withGustAngle(Integer gustAngle) {
        this.gustAngle = gustAngle;
        return this;
    }
    
    /**
     * Speed of the last 5 min highest gust wind
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("GustStrength")
    public Integer gustStrength;

    public NADashboardData withGustStrength(Integer gustStrength) {
        this.gustStrength = gustStrength;
        return this;
    }
    
    /**
     * Last humidity measured @ time_utc (in %)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Humidity")
    public Float humidity;

    public NADashboardData withHumidity(Float humidity) {
        this.humidity = humidity;
        return this;
    }
    
    /**
     * Last noise measured @ time_utc (in db)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Noise")
    public Float noise;

    public NADashboardData withNoise(Float noise) {
        this.noise = noise;
        return this;
    }
    
    /**
     * Last Sea level pressure measured @ time_utc (in mb)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Pressure")
    public Float pressure;

    public NADashboardData withPressure(Float pressure) {
        this.pressure = pressure;
        return this;
    }
    
    /**
     * Last rain measured (in mm)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Rain")
    public Float rain;

    public NADashboardData withRain(Float rain) {
        this.rain = rain;
        return this;
    }
    
    /**
     * Last temperature measure @ time_utc (in \u00b0C)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Temperature")
    public Float temperature;

    public NADashboardData withTemperature(Float temperature) {
        this.temperature = temperature;
        return this;
    }
    
    /**
     * Current 5 min average wind direction measured @ time_utc (in \u00b0)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("WindAngle")
    public Integer windAngle;

    public NADashboardData withWindAngle(Integer windAngle) {
        this.windAngle = windAngle;
        return this;
    }
    
    /**
     * Current 5 min average wind speed measured @ time_utc (in km/h)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("WindStrength")
    public Integer windStrength;

    public NADashboardData withWindStrength(Integer windStrength) {
        this.windStrength = windStrength;
        return this;
    }
    
    /**
     * Timestamp when max temperature was measured
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("date_max_temp")
    public Integer dateMaxTemp;

    public NADashboardData withDateMaxTemp(Integer dateMaxTemp) {
        this.dateMaxTemp = dateMaxTemp;
        return this;
    }
    
    /**
     * Timestamp when max wind strength was measured
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("date_max_wind_str")
    public Integer dateMaxWindStr;

    public NADashboardData withDateMaxWindStr(Integer dateMaxWindStr) {
        this.dateMaxWindStr = dateMaxWindStr;
        return this;
    }
    
    /**
     * Timestamp when min temperature was measured
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("date_min_temp")
    public Integer dateMinTemp;

    public NADashboardData withDateMinTemp(Integer dateMinTemp) {
        this.dateMinTemp = dateMinTemp;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("device_id")
    public Float deviceId;

    public NADashboardData withDeviceId(Float deviceId) {
        this.deviceId = deviceId;
        return this;
    }
    
    /**
     * Current health index: 0 = Healthy, 1 = Fine, 2 = Fair, 3 = Poor, 4 = Unhealthy
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("health_idx")
    public Integer healthIdx;

    public NADashboardData withHealthIdx(Integer healthIdx) {
        this.healthIdx = healthIdx;
        return this;
    }
    
    /**
     * Min temperature of the day (measured @ date_min_temp)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("max_temp")
    public Float maxTemp;

    public NADashboardData withMaxTemp(Float maxTemp) {
        this.maxTemp = maxTemp;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("max_wind_str")
    public Integer maxWindStr;

    public NADashboardData withMaxWindStr(Integer maxWindStr) {
        this.maxWindStr = maxWindStr;
        return this;
    }
    
    /**
     * Max temperature of the day (measured @ date_max_temp)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("min_temp")
    public Float minTemp;

    public NADashboardData withMinTemp(Float minTemp) {
        this.minTemp = minTemp;
        return this;
    }
    
    /**
     * Pressure evolution trend
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("pressure_trend")
    public String pressureTrend;

    public NADashboardData withPressureTrend(String pressureTrend) {
        this.pressureTrend = pressureTrend;
        return this;
    }
    
    /**
     * Amount of rain in last hour
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sum_rain_1")
    public Float sumRain1;

    public NADashboardData withSumRain1(Float sumRain1) {
        this.sumRain1 = sumRain1;
        return this;
    }
    
    /**
     * Amount of rain today
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sum_rain_24")
    public Float sumRain24;

    public NADashboardData withSumRain24(Float sumRain24) {
        this.sumRain24 = sumRain24;
        return this;
    }
    
    /**
     * Temperature evolution trend
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("temp_trend")
    public String tempTrend;

    public NADashboardData withTempTrend(String tempTrend) {
        this.tempTrend = tempTrend;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("time_utc")
    public Integer timeUtc;

    public NADashboardData withTimeUtc(Integer timeUtc) {
        this.timeUtc = timeUtc;
        return this;
    }
    
    public NADashboardData(){}
}
