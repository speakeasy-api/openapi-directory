"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import tfl_api_presentation_entities_matchedstop as shared_tfl_api_presentation_entities_matchedstop
from ..shared import tfl_api_presentation_entities_orderedroute as shared_tfl_api_presentation_entities_orderedroute
from ..shared import tfl_api_presentation_entities_stoppointsequence as shared_tfl_api_presentation_entities_stoppointsequence
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class TflAPIPresentationEntitiesRouteSequence:
    r"""OK"""
    
    direction: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('direction'), 'exclude': lambda f: f is None }})  
    is_outbound_only: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('isOutboundOnly'), 'exclude': lambda f: f is None }})  
    line_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lineId'), 'exclude': lambda f: f is None }})  
    line_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lineName'), 'exclude': lambda f: f is None }})  
    line_strings: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lineStrings'), 'exclude': lambda f: f is None }})  
    mode: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('mode'), 'exclude': lambda f: f is None }})  
    ordered_line_routes: Optional[list[shared_tfl_api_presentation_entities_orderedroute.TflAPIPresentationEntitiesOrderedRoute]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('orderedLineRoutes'), 'exclude': lambda f: f is None }})  
    stations: Optional[list[shared_tfl_api_presentation_entities_matchedstop.TflAPIPresentationEntitiesMatchedStop]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('stations'), 'exclude': lambda f: f is None }})  
    stop_point_sequences: Optional[list[shared_tfl_api_presentation_entities_stoppointsequence.TflAPIPresentationEntitiesStopPointSequence]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('stopPointSequences'), 'exclude': lambda f: f is None }})  
    