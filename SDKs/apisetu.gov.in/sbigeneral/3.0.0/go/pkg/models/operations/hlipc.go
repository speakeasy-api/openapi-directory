// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type HlipcSecurity struct {
	APIKey   shared.SchemeAPIKey   `security:"scheme,type=apiKey,subtype=header"`
	ClientID shared.SchemeClientID `security:"scheme,type=apiKey,subtype=header"`
}

type HlipcRequestBodyCertificateParameters struct {
	// Policy No
	Udf1 string `json:"UDF1"`
	// Verification Value
	Udf2 string `json:"UDF2"`
}

// HlipcRequestBodyFormatEnum - The format of the certificate in response.
type HlipcRequestBodyFormatEnum string

const (
	HlipcRequestBodyFormatEnumPdf HlipcRequestBodyFormatEnum = "pdf"
)

func (e *HlipcRequestBodyFormatEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "pdf":
		*e = HlipcRequestBodyFormatEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for HlipcRequestBodyFormatEnum: %s", s)
	}
}

// HlipcRequestBody - Request format
type HlipcRequestBody struct {
	CertificateParameters *HlipcRequestBodyCertificateParameters `json:"certificateParameters,omitempty"`
	ConsentArtifact       *shared.ConsentArtifactSchema          `json:"consentArtifact,omitempty"`
	// The format of the certificate in response.
	Format HlipcRequestBodyFormatEnum `json:"format"`
	// A unique transaction id for this request in UUID format. It is used for tracking the request.
	TxnID string `json:"txnId"`
}

type HlipcRequest struct {
	// Request format
	Request  *HlipcRequestBody `request:"mediaType=application/json"`
	Security HlipcSecurity
}

type Hlipc504ApplicationJSONErrorEnum string

const (
	Hlipc504ApplicationJSONErrorEnumGatewayTimeout Hlipc504ApplicationJSONErrorEnum = "gateway_timeout"
)

func (e *Hlipc504ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "gateway_timeout":
		*e = Hlipc504ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Hlipc504ApplicationJSONErrorEnum: %s", s)
	}
}

type Hlipc504ApplicationJSONErrorDescriptionEnum string

const (
	Hlipc504ApplicationJSONErrorDescriptionEnumPublisherServiceDidNotRespondInTime Hlipc504ApplicationJSONErrorDescriptionEnum = "Publisher service did not respond in time"
)

func (e *Hlipc504ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Publisher service did not respond in time":
		*e = Hlipc504ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Hlipc504ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Hlipc504ApplicationJSON - Gateway timeout
type Hlipc504ApplicationJSON struct {
	Error            *Hlipc504ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Hlipc504ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Hlipc503ApplicationJSONErrorEnum string

const (
	Hlipc503ApplicationJSONErrorEnumServiceUnavailable Hlipc503ApplicationJSONErrorEnum = "service_unavailable"
)

func (e *Hlipc503ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "service_unavailable":
		*e = Hlipc503ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Hlipc503ApplicationJSONErrorEnum: %s", s)
	}
}

type Hlipc503ApplicationJSONErrorDescriptionEnum string

const (
	Hlipc503ApplicationJSONErrorDescriptionEnumPublisherServiceIsTemporarilyUnavailable Hlipc503ApplicationJSONErrorDescriptionEnum = "Publisher service is temporarily unavailable"
)

func (e *Hlipc503ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Publisher service is temporarily unavailable":
		*e = Hlipc503ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Hlipc503ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Hlipc503ApplicationJSON - Service unavailable
type Hlipc503ApplicationJSON struct {
	Error            *Hlipc503ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Hlipc503ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Hlipc502ApplicationJSONErrorEnum string

const (
	Hlipc502ApplicationJSONErrorEnumBadGatewy Hlipc502ApplicationJSONErrorEnum = "bad_gatewy"
)

func (e *Hlipc502ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "bad_gatewy":
		*e = Hlipc502ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Hlipc502ApplicationJSONErrorEnum: %s", s)
	}
}

type Hlipc502ApplicationJSONErrorDescriptionEnum string

const (
	Hlipc502ApplicationJSONErrorDescriptionEnumPublisherServiceReturnedAnInvalidResponse Hlipc502ApplicationJSONErrorDescriptionEnum = "Publisher service returned an invalid response"
)

func (e *Hlipc502ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Publisher service returned an invalid response":
		*e = Hlipc502ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Hlipc502ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Hlipc502ApplicationJSON - Bad gateway
type Hlipc502ApplicationJSON struct {
	Error            *Hlipc502ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Hlipc502ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Hlipc500ApplicationJSONErrorEnum string

const (
	Hlipc500ApplicationJSONErrorEnumInternalServerError Hlipc500ApplicationJSONErrorEnum = "internal_server_error"
)

func (e *Hlipc500ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "internal_server_error":
		*e = Hlipc500ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Hlipc500ApplicationJSONErrorEnum: %s", s)
	}
}

type Hlipc500ApplicationJSONErrorDescriptionEnum string

const (
	Hlipc500ApplicationJSONErrorDescriptionEnumInternalServerError Hlipc500ApplicationJSONErrorDescriptionEnum = "Internal server error"
)

func (e *Hlipc500ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Internal server error":
		*e = Hlipc500ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Hlipc500ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Hlipc500ApplicationJSON - Internal server error
type Hlipc500ApplicationJSON struct {
	Error            *Hlipc500ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Hlipc500ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Hlipc404ApplicationJSONErrorEnum string

const (
	Hlipc404ApplicationJSONErrorEnumRecordNotFound Hlipc404ApplicationJSONErrorEnum = "record_not_found"
	Hlipc404ApplicationJSONErrorEnumURLNotFound    Hlipc404ApplicationJSONErrorEnum = "url_not_found"
)

func (e *Hlipc404ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "record_not_found":
		fallthrough
	case "url_not_found":
		*e = Hlipc404ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Hlipc404ApplicationJSONErrorEnum: %s", s)
	}
}

type Hlipc404ApplicationJSONErrorDescriptionEnum string

const (
	Hlipc404ApplicationJSONErrorDescriptionEnumNoRecordFound               Hlipc404ApplicationJSONErrorDescriptionEnum = "No record found"
	Hlipc404ApplicationJSONErrorDescriptionEnumYourAPIURLOrPathIsIncorrect Hlipc404ApplicationJSONErrorDescriptionEnum = "Your API url or path is incorrect"
)

func (e *Hlipc404ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "No record found":
		fallthrough
	case "Your API url or path is incorrect":
		*e = Hlipc404ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Hlipc404ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Hlipc404ApplicationJSON - No record found
type Hlipc404ApplicationJSON struct {
	Error            *Hlipc404ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Hlipc404ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Hlipc401ApplicationJSONErrorEnum string

const (
	Hlipc401ApplicationJSONErrorEnumInvalidAuthentication Hlipc401ApplicationJSONErrorEnum = "invalid_authentication"
	Hlipc401ApplicationJSONErrorEnumInvalidAuthorization  Hlipc401ApplicationJSONErrorEnum = "invalid_authorization"
)

func (e *Hlipc401ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "invalid_authentication":
		fallthrough
	case "invalid_authorization":
		*e = Hlipc401ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Hlipc401ApplicationJSONErrorEnum: %s", s)
	}
}

type Hlipc401ApplicationJSONErrorDescriptionEnum string

const (
	Hlipc401ApplicationJSONErrorDescriptionEnumAuthenticationFailed            Hlipc401ApplicationJSONErrorDescriptionEnum = "Authentication failed"
	Hlipc401ApplicationJSONErrorDescriptionEnumYouAreNotAuthorizedToUseThisAPI Hlipc401ApplicationJSONErrorDescriptionEnum = "You are not authorized to use this API"
)

func (e *Hlipc401ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Authentication failed":
		fallthrough
	case "You are not authorized to use this API":
		*e = Hlipc401ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Hlipc401ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Hlipc401ApplicationJSON - Unauthorized access
type Hlipc401ApplicationJSON struct {
	Error            *Hlipc401ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Hlipc401ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Hlipc400ApplicationJSONErrorEnum string

const (
	Hlipc400ApplicationJSONErrorEnumMissingParameter Hlipc400ApplicationJSONErrorEnum = "missing_parameter"
	Hlipc400ApplicationJSONErrorEnumInvalidParameter Hlipc400ApplicationJSONErrorEnum = "invalid_parameter"
	Hlipc400ApplicationJSONErrorEnumInvalidFormat    Hlipc400ApplicationJSONErrorEnum = "invalid_format"
	Hlipc400ApplicationJSONErrorEnumInvalidTxnid     Hlipc400ApplicationJSONErrorEnum = "invalid_txnid"
	Hlipc400ApplicationJSONErrorEnumInvalidConsentid Hlipc400ApplicationJSONErrorEnum = "invalid_consentid"
)

func (e *Hlipc400ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "missing_parameter":
		fallthrough
	case "invalid_parameter":
		fallthrough
	case "invalid_format":
		fallthrough
	case "invalid_txnid":
		fallthrough
	case "invalid_consentid":
		*e = Hlipc400ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Hlipc400ApplicationJSONErrorEnum: %s", s)
	}
}

type Hlipc400ApplicationJSONErrorDescriptionEnum string

const (
	Hlipc400ApplicationJSONErrorDescriptionEnumPleaseProvideAllMandatoryParameters     Hlipc400ApplicationJSONErrorDescriptionEnum = "Please provide all mandatory parameters"
	Hlipc400ApplicationJSONErrorDescriptionEnumBadRequest                              Hlipc400ApplicationJSONErrorDescriptionEnum = "Bad request"
	Hlipc400ApplicationJSONErrorDescriptionEnumTheFormatParameterIsInvalid             Hlipc400ApplicationJSONErrorDescriptionEnum = "The format parameter is invalid"
	Hlipc400ApplicationJSONErrorDescriptionEnumTheTxnIDParameterMustBeInUUIDFormat     Hlipc400ApplicationJSONErrorDescriptionEnum = "The txnId parameter must be in UUID format"
	Hlipc400ApplicationJSONErrorDescriptionEnumTheConsentIDParameterMustBeInUUIDFormat Hlipc400ApplicationJSONErrorDescriptionEnum = "The consentId parameter must be in UUID format"
)

func (e *Hlipc400ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Please provide all mandatory parameters":
		fallthrough
	case "Bad request":
		fallthrough
	case "The format parameter is invalid":
		fallthrough
	case "The txnId parameter must be in UUID format":
		fallthrough
	case "The consentId parameter must be in UUID format":
		*e = Hlipc400ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Hlipc400ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Hlipc400ApplicationJSON - Bad request
type Hlipc400ApplicationJSON struct {
	Error            *Hlipc400ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Hlipc400ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type HlipcResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Bad request
	Hlipc400ApplicationJSONObject *Hlipc400ApplicationJSON
	// Unauthorized access
	Hlipc401ApplicationJSONObject *Hlipc401ApplicationJSON
	// No record found
	Hlipc404ApplicationJSONObject *Hlipc404ApplicationJSON
	// Internal server error
	Hlipc500ApplicationJSONObject *Hlipc500ApplicationJSON
	// Bad gateway
	Hlipc502ApplicationJSONObject *Hlipc502ApplicationJSON
	// Service unavailable
	Hlipc503ApplicationJSONObject *Hlipc503ApplicationJSON
	// Gateway timeout
	Hlipc504ApplicationJSONObject *Hlipc504ApplicationJSON
}
