"use strict";
/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ConnectSettings = exports.ConnectSettingsDatabaseVersionEnum = exports.ConnectSettingsBackendTypeEnum = void 0;
var utils_1 = require("../../../internal/utils");
var ipmapping_1 = require("./ipmapping");
var sslcert_1 = require("./sslcert");
var class_transformer_1 = require("class-transformer");
/**
 * `SECOND_GEN`: Cloud SQL database instance. `EXTERNAL`: A database server that is not managed by Google. This property is read-only; use the `tier` property in the `settings` object to determine the database type.
 */
var ConnectSettingsBackendTypeEnum;
(function (ConnectSettingsBackendTypeEnum) {
    ConnectSettingsBackendTypeEnum["SqlBackendTypeUnspecified"] = "SQL_BACKEND_TYPE_UNSPECIFIED";
    ConnectSettingsBackendTypeEnum["FirstGen"] = "FIRST_GEN";
    ConnectSettingsBackendTypeEnum["SecondGen"] = "SECOND_GEN";
    ConnectSettingsBackendTypeEnum["External"] = "EXTERNAL";
})(ConnectSettingsBackendTypeEnum = exports.ConnectSettingsBackendTypeEnum || (exports.ConnectSettingsBackendTypeEnum = {}));
/**
 * The database engine type and version. The `databaseVersion` field cannot be changed after instance creation. MySQL instances: `MYSQL_8_0`, `MYSQL_5_7` (default), or `MYSQL_5_6`. PostgreSQL instances: `POSTGRES_9_6`, `POSTGRES_10`, `POSTGRES_11`, `POSTGRES_12` (default), `POSTGRES_13`, or `POSTGRES_14`. SQL Server instances: `SQLSERVER_2017_STANDARD` (default), `SQLSERVER_2017_ENTERPRISE`, `SQLSERVER_2017_EXPRESS`, `SQLSERVER_2017_WEB`, `SQLSERVER_2019_STANDARD`, `SQLSERVER_2019_ENTERPRISE`, `SQLSERVER_2019_EXPRESS`, or `SQLSERVER_2019_WEB`.
 */
var ConnectSettingsDatabaseVersionEnum;
(function (ConnectSettingsDatabaseVersionEnum) {
    ConnectSettingsDatabaseVersionEnum["SqlDatabaseVersionUnspecified"] = "SQL_DATABASE_VERSION_UNSPECIFIED";
    ConnectSettingsDatabaseVersionEnum["Mysql51"] = "MYSQL_5_1";
    ConnectSettingsDatabaseVersionEnum["Mysql55"] = "MYSQL_5_5";
    ConnectSettingsDatabaseVersionEnum["Mysql56"] = "MYSQL_5_6";
    ConnectSettingsDatabaseVersionEnum["Mysql57"] = "MYSQL_5_7";
    ConnectSettingsDatabaseVersionEnum["Sqlserver2017Standard"] = "SQLSERVER_2017_STANDARD";
    ConnectSettingsDatabaseVersionEnum["Sqlserver2017Enterprise"] = "SQLSERVER_2017_ENTERPRISE";
    ConnectSettingsDatabaseVersionEnum["Sqlserver2017Express"] = "SQLSERVER_2017_EXPRESS";
    ConnectSettingsDatabaseVersionEnum["Sqlserver2017Web"] = "SQLSERVER_2017_WEB";
    ConnectSettingsDatabaseVersionEnum["Postgres96"] = "POSTGRES_9_6";
    ConnectSettingsDatabaseVersionEnum["Postgres10"] = "POSTGRES_10";
    ConnectSettingsDatabaseVersionEnum["Postgres11"] = "POSTGRES_11";
    ConnectSettingsDatabaseVersionEnum["Postgres12"] = "POSTGRES_12";
    ConnectSettingsDatabaseVersionEnum["Postgres13"] = "POSTGRES_13";
    ConnectSettingsDatabaseVersionEnum["Postgres14"] = "POSTGRES_14";
    ConnectSettingsDatabaseVersionEnum["Mysql80"] = "MYSQL_8_0";
    ConnectSettingsDatabaseVersionEnum["Mysql8018"] = "MYSQL_8_0_18";
    ConnectSettingsDatabaseVersionEnum["Mysql8026"] = "MYSQL_8_0_26";
    ConnectSettingsDatabaseVersionEnum["Mysql8027"] = "MYSQL_8_0_27";
    ConnectSettingsDatabaseVersionEnum["Mysql8028"] = "MYSQL_8_0_28";
    ConnectSettingsDatabaseVersionEnum["Mysql8029"] = "MYSQL_8_0_29";
    ConnectSettingsDatabaseVersionEnum["Mysql8030"] = "MYSQL_8_0_30";
    ConnectSettingsDatabaseVersionEnum["Mysql8031"] = "MYSQL_8_0_31";
    ConnectSettingsDatabaseVersionEnum["Mysql8032"] = "MYSQL_8_0_32";
    ConnectSettingsDatabaseVersionEnum["Sqlserver2019Standard"] = "SQLSERVER_2019_STANDARD";
    ConnectSettingsDatabaseVersionEnum["Sqlserver2019Enterprise"] = "SQLSERVER_2019_ENTERPRISE";
    ConnectSettingsDatabaseVersionEnum["Sqlserver2019Express"] = "SQLSERVER_2019_EXPRESS";
    ConnectSettingsDatabaseVersionEnum["Sqlserver2019Web"] = "SQLSERVER_2019_WEB";
})(ConnectSettingsDatabaseVersionEnum = exports.ConnectSettingsDatabaseVersionEnum || (exports.ConnectSettingsDatabaseVersionEnum = {}));
/**
 * Connect settings retrieval response.
 */
var ConnectSettings = /** @class */ (function (_super) {
    __extends(ConnectSettings, _super);
    function ConnectSettings() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "backendType" }),
        __metadata("design:type", String)
    ], ConnectSettings.prototype, "backendType", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "databaseVersion" }),
        __metadata("design:type", String)
    ], ConnectSettings.prototype, "databaseVersion", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({ elemType: ipmapping_1.IpMapping }),
        (0, class_transformer_1.Expose)({ name: "ipAddresses" }),
        (0, class_transformer_1.Type)(function () { return ipmapping_1.IpMapping; }),
        __metadata("design:type", Array)
    ], ConnectSettings.prototype, "ipAddresses", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "kind" }),
        __metadata("design:type", String)
    ], ConnectSettings.prototype, "kind", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "region" }),
        __metadata("design:type", String)
    ], ConnectSettings.prototype, "region", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "serverCaCert" }),
        (0, class_transformer_1.Type)(function () { return sslcert_1.SslCert; }),
        __metadata("design:type", sslcert_1.SslCert)
    ], ConnectSettings.prototype, "serverCaCert", void 0);
    return ConnectSettings;
}(utils_1.SpeakeasyBase));
exports.ConnectSettings = ConnectSettings;
