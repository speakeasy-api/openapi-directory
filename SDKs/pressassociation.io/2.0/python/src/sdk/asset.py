"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations
from typing import Any, Optional

class Asset:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def get_asset(self, request: operations.GetAssetRequest, security: operations.GetAssetSecurity) -> operations.GetAssetResponse:
        r"""Asset Detail
        Return the content of the selected asset.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetAssetRequest, base_url, '/asset/{assetId}', request)
        
        query_params = utils.get_query_params(operations.GetAssetRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetAssetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.get_asset_200_application_json_object = out

        return res

    def get_asset_contributors(self, request: operations.GetAssetContributorsRequest, security: operations.GetAssetContributorsSecurity) -> operations.GetAssetContributorsResponse:
        r"""Asset Contributors
        Return the contributors of the selected asset.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetAssetContributorsRequest, base_url, '/asset/{assetId}/contributor', request)
        
        query_params = utils.get_query_params(operations.GetAssetContributorsRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetAssetContributorsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.get_asset_contributors_200_application_json_object = out

        return res

    def list_assets(self, request: operations.ListAssetsRequest, security: operations.ListAssetsSecurity) -> operations.ListAssetsResponse:
        r"""Asset Collection
        Return a collection of Assets.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/asset'
        
        query_params = utils.get_query_params(operations.ListAssetsRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ListAssetsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.list_assets_200_application_json_object = out

        return res

    