// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"bytes"
	"encoding/json"
	"errors"
	"fmt"
	"time"
)

type TemplateFieldsType string

const (
	TemplateFieldsTypeText  TemplateFieldsType = "text"
	TemplateFieldsTypeCheck TemplateFieldsType = "check"
	TemplateFieldsTypeDate  TemplateFieldsType = "date"
	TemplateFieldsTypeImage TemplateFieldsType = "image"
)

type TemplateFields struct {
	DateField     *DateField
	TextField     *TextField
	ImageField    *ImageField
	CheckBoxField *CheckBoxField

	Type TemplateFieldsType
}

func CreateTemplateFieldsText(text TextField) TemplateFields {
	typ := TemplateFieldsTypeText
	typStr := TextFieldTypeEnum(typ)
	text.Type = typStr

	return TemplateFields{
		TextField: &text,
		Type:      typ,
	}
}

func CreateTemplateFieldsCheck(check CheckBoxField) TemplateFields {
	typ := TemplateFieldsTypeCheck
	typStr := CheckBoxFieldTypeEnum(typ)
	check.Type = typStr

	return TemplateFields{
		CheckBoxField: &check,
		Type:          typ,
	}
}

func CreateTemplateFieldsDate(date DateField) TemplateFields {
	typ := TemplateFieldsTypeDate
	typStr := DateFieldTypeEnum(typ)
	date.Type = typStr

	return TemplateFields{
		DateField: &date,
		Type:      typ,
	}
}

func CreateTemplateFieldsImage(image ImageField) TemplateFields {
	typ := TemplateFieldsTypeImage
	typStr := ImageFieldTypeEnum(typ)
	image.Type = &typStr

	return TemplateFields{
		ImageField: &image,
		Type:       typ,
	}
}

func (u *TemplateFields) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	type discriminator struct {
		Type string
	}

	dis := new(discriminator)
	if err := json.Unmarshal(data, &dis); err != nil {
		return fmt.Errorf("could not unmarshal discriminator: %w", err)
	}

	switch dis.Type {
	case "text":
		d = json.NewDecoder(bytes.NewReader(data))
		d.DisallowUnknownFields()
		textField := new(TextField)
		if err := d.Decode(&textField); err != nil {
			return fmt.Errorf("could not unmarshal expected type: %w", err)
		}

		u.TextField = textField
		u.Type = TemplateFieldsTypeText
		return nil
	case "check":
		d = json.NewDecoder(bytes.NewReader(data))
		d.DisallowUnknownFields()
		checkBoxField := new(CheckBoxField)
		if err := d.Decode(&checkBoxField); err != nil {
			return fmt.Errorf("could not unmarshal expected type: %w", err)
		}

		u.CheckBoxField = checkBoxField
		u.Type = TemplateFieldsTypeCheck
		return nil
	case "date":
		d = json.NewDecoder(bytes.NewReader(data))
		d.DisallowUnknownFields()
		dateField := new(DateField)
		if err := d.Decode(&dateField); err != nil {
			return fmt.Errorf("could not unmarshal expected type: %w", err)
		}

		u.DateField = dateField
		u.Type = TemplateFieldsTypeDate
		return nil
	case "image":
		d = json.NewDecoder(bytes.NewReader(data))
		d.DisallowUnknownFields()
		imageField := new(ImageField)
		if err := d.Decode(&imageField); err != nil {
			return fmt.Errorf("could not unmarshal expected type: %w", err)
		}

		u.ImageField = imageField
		u.Type = TemplateFieldsTypeImage
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u TemplateFields) MarshalJSON() ([]byte, error) {
	if u.DateField != nil {
		return json.Marshal(u.DateField)
	}

	if u.TextField != nil {
		return json.Marshal(u.TextField)
	}

	if u.ImageField != nil {
		return json.Marshal(u.ImageField)
	}

	if u.CheckBoxField != nil {
		return json.Marshal(u.CheckBoxField)
	}

	return nil, nil
}

type Template struct {
	CreatedAt *time.Time       `json:"created_at,omitempty"`
	Fields    []TemplateFields `json:"fields,omitempty"`
	ID        *string          `json:"id,omitempty"`
	Name      *string          `json:"name,omitempty"`
	Pages     int64            `json:"pages"`
	SizeBytes *int64           `json:"size_bytes,omitempty"`
}
