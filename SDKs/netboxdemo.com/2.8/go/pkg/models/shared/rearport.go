// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type RearPortTypeLabelEnum string

const (
	RearPortTypeLabelEnumEightP8C              RearPortTypeLabelEnum = "8P8C"
	RearPortTypeLabelEnumOneHundredAndTenPunch RearPortTypeLabelEnum = "110 Punch"
	RearPortTypeLabelEnumBnc                   RearPortTypeLabelEnum = "BNC"
	RearPortTypeLabelEnumMrj21                 RearPortTypeLabelEnum = "MRJ21"
	RearPortTypeLabelEnumFc                    RearPortTypeLabelEnum = "FC"
	RearPortTypeLabelEnumLc                    RearPortTypeLabelEnum = "LC"
	RearPortTypeLabelEnumLcApc                 RearPortTypeLabelEnum = "LC/APC"
	RearPortTypeLabelEnumLsh                   RearPortTypeLabelEnum = "LSH"
	RearPortTypeLabelEnumLshApc                RearPortTypeLabelEnum = "LSH/APC"
	RearPortTypeLabelEnumMpo                   RearPortTypeLabelEnum = "MPO"
	RearPortTypeLabelEnumMtrj                  RearPortTypeLabelEnum = "MTRJ"
	RearPortTypeLabelEnumSc                    RearPortTypeLabelEnum = "SC"
	RearPortTypeLabelEnumScApc                 RearPortTypeLabelEnum = "SC/APC"
	RearPortTypeLabelEnumSt                    RearPortTypeLabelEnum = "ST"
)

func (e *RearPortTypeLabelEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "8P8C":
		fallthrough
	case "110 Punch":
		fallthrough
	case "BNC":
		fallthrough
	case "MRJ21":
		fallthrough
	case "FC":
		fallthrough
	case "LC":
		fallthrough
	case "LC/APC":
		fallthrough
	case "LSH":
		fallthrough
	case "LSH/APC":
		fallthrough
	case "MPO":
		fallthrough
	case "MTRJ":
		fallthrough
	case "SC":
		fallthrough
	case "SC/APC":
		fallthrough
	case "ST":
		*e = RearPortTypeLabelEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for RearPortTypeLabelEnum: %s", s)
	}
}

type RearPortTypeValueEnum string

const (
	RearPortTypeValueEnumEightp8c              RearPortTypeValueEnum = "8p8c"
	RearPortTypeValueEnumOneHundredAndTenPunch RearPortTypeValueEnum = "110-punch"
	RearPortTypeValueEnumBnc                   RearPortTypeValueEnum = "bnc"
	RearPortTypeValueEnumMrj21                 RearPortTypeValueEnum = "mrj21"
	RearPortTypeValueEnumFc                    RearPortTypeValueEnum = "fc"
	RearPortTypeValueEnumLc                    RearPortTypeValueEnum = "lc"
	RearPortTypeValueEnumLcApc                 RearPortTypeValueEnum = "lc-apc"
	RearPortTypeValueEnumLsh                   RearPortTypeValueEnum = "lsh"
	RearPortTypeValueEnumLshApc                RearPortTypeValueEnum = "lsh-apc"
	RearPortTypeValueEnumMpo                   RearPortTypeValueEnum = "mpo"
	RearPortTypeValueEnumMtrj                  RearPortTypeValueEnum = "mtrj"
	RearPortTypeValueEnumSc                    RearPortTypeValueEnum = "sc"
	RearPortTypeValueEnumScApc                 RearPortTypeValueEnum = "sc-apc"
	RearPortTypeValueEnumSt                    RearPortTypeValueEnum = "st"
)

func (e *RearPortTypeValueEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "8p8c":
		fallthrough
	case "110-punch":
		fallthrough
	case "bnc":
		fallthrough
	case "mrj21":
		fallthrough
	case "fc":
		fallthrough
	case "lc":
		fallthrough
	case "lc-apc":
		fallthrough
	case "lsh":
		fallthrough
	case "lsh-apc":
		fallthrough
	case "mpo":
		fallthrough
	case "mtrj":
		fallthrough
	case "sc":
		fallthrough
	case "sc-apc":
		fallthrough
	case "st":
		*e = RearPortTypeValueEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for RearPortTypeValueEnum: %s", s)
	}
}

type RearPortType struct {
	Label RearPortTypeLabelEnum `json:"label"`
	Value RearPortTypeValueEnum `json:"value"`
}

type RearPort struct {
	Cable       *NestedCable `json:"cable,omitempty"`
	Description *string      `json:"description,omitempty"`
	Device      NestedDevice `json:"device"`
	ID          *int64       `json:"id,omitempty"`
	Name        string       `json:"name"`
	Positions   *int64       `json:"positions,omitempty"`
	Tags        []string     `json:"tags,omitempty"`
	Type        RearPortType `json:"type"`
}
