// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// CertificateCreateProductTypeEnum - Type of product requesting a certificate. Only required non-renewal
type CertificateCreateProductTypeEnum string

const (
	CertificateCreateProductTypeEnumDvSsl         CertificateCreateProductTypeEnum = "DV_SSL"
	CertificateCreateProductTypeEnumDvWildcardSsl CertificateCreateProductTypeEnum = "DV_WILDCARD_SSL"
	CertificateCreateProductTypeEnumEvSsl         CertificateCreateProductTypeEnum = "EV_SSL"
	CertificateCreateProductTypeEnumOvCs          CertificateCreateProductTypeEnum = "OV_CS"
	CertificateCreateProductTypeEnumOvDs          CertificateCreateProductTypeEnum = "OV_DS"
	CertificateCreateProductTypeEnumOvSsl         CertificateCreateProductTypeEnum = "OV_SSL"
	CertificateCreateProductTypeEnumOvWildcardSsl CertificateCreateProductTypeEnum = "OV_WILDCARD_SSL"
	CertificateCreateProductTypeEnumUccDvSsl      CertificateCreateProductTypeEnum = "UCC_DV_SSL"
	CertificateCreateProductTypeEnumUccEvSsl      CertificateCreateProductTypeEnum = "UCC_EV_SSL"
	CertificateCreateProductTypeEnumUccOvSsl      CertificateCreateProductTypeEnum = "UCC_OV_SSL"
)

func (e CertificateCreateProductTypeEnum) ToPointer() *CertificateCreateProductTypeEnum {
	return &e
}

func (e *CertificateCreateProductTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "DV_SSL":
		fallthrough
	case "DV_WILDCARD_SSL":
		fallthrough
	case "EV_SSL":
		fallthrough
	case "OV_CS":
		fallthrough
	case "OV_DS":
		fallthrough
	case "OV_SSL":
		fallthrough
	case "OV_WILDCARD_SSL":
		fallthrough
	case "UCC_DV_SSL":
		fallthrough
	case "UCC_EV_SSL":
		fallthrough
	case "UCC_OV_SSL":
		*e = CertificateCreateProductTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CertificateCreateProductTypeEnum: %v", v)
	}
}

// CertificateCreateRootTypeEnum - Root Type. Depending on certificate expiration date, SHA_1 not be allowed. Will default to SHA_2 if expiration date exceeds sha1 allowed date
type CertificateCreateRootTypeEnum string

const (
	CertificateCreateRootTypeEnumGodaddySha1   CertificateCreateRootTypeEnum = "GODADDY_SHA_1"
	CertificateCreateRootTypeEnumGodaddySha2   CertificateCreateRootTypeEnum = "GODADDY_SHA_2"
	CertificateCreateRootTypeEnumStarfieldSha1 CertificateCreateRootTypeEnum = "STARFIELD_SHA_1"
	CertificateCreateRootTypeEnumStarfieldSha2 CertificateCreateRootTypeEnum = "STARFIELD_SHA_2"
)

func (e CertificateCreateRootTypeEnum) ToPointer() *CertificateCreateRootTypeEnum {
	return &e
}

func (e *CertificateCreateRootTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "GODADDY_SHA_1":
		fallthrough
	case "GODADDY_SHA_2":
		fallthrough
	case "STARFIELD_SHA_1":
		fallthrough
	case "STARFIELD_SHA_2":
		*e = CertificateCreateRootTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CertificateCreateRootTypeEnum: %v", v)
	}
}

// CertificateCreateSlotSizeEnum - Number of subject alternative names(SAN) to be included in certificate
type CertificateCreateSlotSizeEnum string

const (
	CertificateCreateSlotSizeEnumFive       CertificateCreateSlotSizeEnum = "FIVE"
	CertificateCreateSlotSizeEnumTen        CertificateCreateSlotSizeEnum = "TEN"
	CertificateCreateSlotSizeEnumFifteen    CertificateCreateSlotSizeEnum = "FIFTEEN"
	CertificateCreateSlotSizeEnumTwenty     CertificateCreateSlotSizeEnum = "TWENTY"
	CertificateCreateSlotSizeEnumThirty     CertificateCreateSlotSizeEnum = "THIRTY"
	CertificateCreateSlotSizeEnumFourty     CertificateCreateSlotSizeEnum = "FOURTY"
	CertificateCreateSlotSizeEnumFifty      CertificateCreateSlotSizeEnum = "FIFTY"
	CertificateCreateSlotSizeEnumOneHundred CertificateCreateSlotSizeEnum = "ONE_HUNDRED"
)

func (e CertificateCreateSlotSizeEnum) ToPointer() *CertificateCreateSlotSizeEnum {
	return &e
}

func (e *CertificateCreateSlotSizeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "FIVE":
		fallthrough
	case "TEN":
		fallthrough
	case "FIFTEEN":
		fallthrough
	case "TWENTY":
		fallthrough
	case "THIRTY":
		fallthrough
	case "FOURTY":
		fallthrough
	case "FIFTY":
		fallthrough
	case "ONE_HUNDRED":
		*e = CertificateCreateSlotSizeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CertificateCreateSlotSizeEnum: %v", v)
	}
}

// CertificateCreate - The certificate order information
type CertificateCreate struct {
	// Required if client would like to receive stateful actions via callback during certificate lifecyle
	CallbackURL *string `json:"callbackUrl,omitempty"`
	// Name to be secured in certificate. If provided, CN field in CSR will be ignored.
	CommonName *string            `json:"commonName,omitempty"`
	Contact    CertificateContact `json:"contact"`
	// Certificate Signing Request
	Csr string `json:"csr"`
	// Only used for OV
	IntelVPro    *bool                          `json:"intelVPro,omitempty"`
	Organization *CertificateOrganizationCreate `json:"organization,omitempty"`
	// Number of years for certificate validity period
	Period int64 `json:"period"`
	// Type of product requesting a certificate. Only required non-renewal
	ProductType CertificateCreateProductTypeEnum `json:"productType"`
	// Root Type. Depending on certificate expiration date, SHA_1 not be allowed. Will default to SHA_2 if expiration date exceeds sha1 allowed date
	RootType *CertificateCreateRootTypeEnum `json:"rootType,omitempty"`
	// Number of subject alternative names(SAN) to be included in certificate
	SlotSize *CertificateCreateSlotSizeEnum `json:"slotSize,omitempty"`
	// Subject Alternative names. Collection of subjectAlternativeNames to be included in certificate.
	SubjectAlternativeNames []string `json:"subjectAlternativeNames,omitempty"`
}
