/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Request - A single update to apply to a document.
 */
public class Request {
    /**
     * Creates a Footer. The new footer is applied to the SectionStyle at the location of the SectionBreak if specified, otherwise it is applied to the DocumentStyle. If a footer of the specified type already exists, a 400 bad request error is returned.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("createFooter")
    public CreateFooterRequest createFooter;
    public Request withCreateFooter(CreateFooterRequest createFooter) {
        this.createFooter = createFooter;
        return this;
    }
    
    /**
     * Creates a Footnote segment and inserts a new FootnoteReference to it at the given location. The new Footnote segment will contain a space followed by a newline character.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("createFootnote")
    public CreateFootnoteRequest createFootnote;
    public Request withCreateFootnote(CreateFootnoteRequest createFootnote) {
        this.createFootnote = createFootnote;
        return this;
    }
    
    /**
     * Creates a Header. The new header is applied to the SectionStyle at the location of the SectionBreak if specified, otherwise it is applied to the DocumentStyle. If a header of the specified type already exists, a 400 bad request error is returned.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("createHeader")
    public CreateHeaderRequest createHeader;
    public Request withCreateHeader(CreateHeaderRequest createHeader) {
        this.createHeader = createHeader;
        return this;
    }
    
    /**
     * Creates a NamedRange referencing the given range.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("createNamedRange")
    public CreateNamedRangeRequest createNamedRange;
    public Request withCreateNamedRange(CreateNamedRangeRequest createNamedRange) {
        this.createNamedRange = createNamedRange;
        return this;
    }
    
    /**
     * Creates bullets for all of the paragraphs that overlap with the given range. The nesting level of each paragraph will be determined by counting leading tabs in front of each paragraph. To avoid excess space between the bullet and the corresponding paragraph, these leading tabs are removed by this request. This may change the indices of parts of the text. If the paragraph immediately before paragraphs being updated is in a list with a matching preset, the paragraphs being updated are added to that preceding list.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("createParagraphBullets")
    public CreateParagraphBulletsRequest createParagraphBullets;
    public Request withCreateParagraphBullets(CreateParagraphBulletsRequest createParagraphBullets) {
        this.createParagraphBullets = createParagraphBullets;
        return this;
    }
    
    /**
     * Deletes content from the document.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("deleteContentRange")
    public DeleteContentRangeRequest deleteContentRange;
    public Request withDeleteContentRange(DeleteContentRangeRequest deleteContentRange) {
        this.deleteContentRange = deleteContentRange;
        return this;
    }
    
    /**
     * Deletes a Footer from the document.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("deleteFooter")
    public DeleteFooterRequest deleteFooter;
    public Request withDeleteFooter(DeleteFooterRequest deleteFooter) {
        this.deleteFooter = deleteFooter;
        return this;
    }
    
    /**
     * Deletes a Header from the document.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("deleteHeader")
    public DeleteHeaderRequest deleteHeader;
    public Request withDeleteHeader(DeleteHeaderRequest deleteHeader) {
        this.deleteHeader = deleteHeader;
        return this;
    }
    
    /**
     * Deletes a NamedRange.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("deleteNamedRange")
    public DeleteNamedRangeRequest deleteNamedRange;
    public Request withDeleteNamedRange(DeleteNamedRangeRequest deleteNamedRange) {
        this.deleteNamedRange = deleteNamedRange;
        return this;
    }
    
    /**
     * Deletes bullets from all of the paragraphs that overlap with the given range. The nesting level of each paragraph will be visually preserved by adding indent to the start of the corresponding paragraph.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("deleteParagraphBullets")
    public DeleteParagraphBulletsRequest deleteParagraphBullets;
    public Request withDeleteParagraphBullets(DeleteParagraphBulletsRequest deleteParagraphBullets) {
        this.deleteParagraphBullets = deleteParagraphBullets;
        return this;
    }
    
    /**
     * Deletes a PositionedObject from the document.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("deletePositionedObject")
    public DeletePositionedObjectRequest deletePositionedObject;
    public Request withDeletePositionedObject(DeletePositionedObjectRequest deletePositionedObject) {
        this.deletePositionedObject = deletePositionedObject;
        return this;
    }
    
    /**
     * Deletes a column from a table.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("deleteTableColumn")
    public DeleteTableColumnRequest deleteTableColumn;
    public Request withDeleteTableColumn(DeleteTableColumnRequest deleteTableColumn) {
        this.deleteTableColumn = deleteTableColumn;
        return this;
    }
    
    /**
     * Deletes a row from a table.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("deleteTableRow")
    public DeleteTableRowRequest deleteTableRow;
    public Request withDeleteTableRow(DeleteTableRowRequest deleteTableRow) {
        this.deleteTableRow = deleteTableRow;
        return this;
    }
    
    /**
     * Inserts an InlineObject containing an image at the given location.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("insertInlineImage")
    public InsertInlineImageRequest insertInlineImage;
    public Request withInsertInlineImage(InsertInlineImageRequest insertInlineImage) {
        this.insertInlineImage = insertInlineImage;
        return this;
    }
    
    /**
     * Inserts a page break followed by a newline at the specified location.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("insertPageBreak")
    public InsertPageBreakRequest insertPageBreak;
    public Request withInsertPageBreak(InsertPageBreakRequest insertPageBreak) {
        this.insertPageBreak = insertPageBreak;
        return this;
    }
    
    /**
     * Inserts a section break at the given location. A newline character will be inserted before the section break.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("insertSectionBreak")
    public InsertSectionBreakRequest insertSectionBreak;
    public Request withInsertSectionBreak(InsertSectionBreakRequest insertSectionBreak) {
        this.insertSectionBreak = insertSectionBreak;
        return this;
    }
    
    /**
     * Inserts a table at the specified location. A newline character will be inserted before the inserted table.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("insertTable")
    public InsertTableRequest insertTable;
    public Request withInsertTable(InsertTableRequest insertTable) {
        this.insertTable = insertTable;
        return this;
    }
    
    /**
     * Inserts an empty column into a table.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("insertTableColumn")
    public InsertTableColumnRequest insertTableColumn;
    public Request withInsertTableColumn(InsertTableColumnRequest insertTableColumn) {
        this.insertTableColumn = insertTableColumn;
        return this;
    }
    
    /**
     * Inserts an empty row into a table.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("insertTableRow")
    public InsertTableRowRequest insertTableRow;
    public Request withInsertTableRow(InsertTableRowRequest insertTableRow) {
        this.insertTableRow = insertTableRow;
        return this;
    }
    
    /**
     * Inserts text at the specified location.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("insertText")
    public InsertTextRequest insertText;
    public Request withInsertText(InsertTextRequest insertText) {
        this.insertText = insertText;
        return this;
    }
    
    /**
     * Merges cells in a Table.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("mergeTableCells")
    public MergeTableCellsRequest mergeTableCells;
    public Request withMergeTableCells(MergeTableCellsRequest mergeTableCells) {
        this.mergeTableCells = mergeTableCells;
        return this;
    }
    
    /**
     * Updates the number of pinned table header rows in a table.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("pinTableHeaderRows")
    public PinTableHeaderRowsRequest pinTableHeaderRows;
    public Request withPinTableHeaderRows(PinTableHeaderRowsRequest pinTableHeaderRows) {
        this.pinTableHeaderRows = pinTableHeaderRows;
        return this;
    }
    
    /**
     * Replaces all instances of text matching a criteria with replace text.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("replaceAllText")
    public ReplaceAllTextRequest replaceAllText;
    public Request withReplaceAllText(ReplaceAllTextRequest replaceAllText) {
        this.replaceAllText = replaceAllText;
        return this;
    }
    
    /**
     * Replaces an existing image with a new image. Replacing an image removes some image effects from the existing image in order to mirror the behavior of the Docs editor.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("replaceImage")
    public ReplaceImageRequest replaceImage;
    public Request withReplaceImage(ReplaceImageRequest replaceImage) {
        this.replaceImage = replaceImage;
        return this;
    }
    
    /**
     * Replaces the contents of the specified NamedRange or NamedRanges with the given replacement content. Note that an individual NamedRange may consist of multiple discontinuous ranges. In this case, only the content in the first range will be replaced. The other ranges and their content will be deleted. In cases where replacing or deleting any ranges would result in an invalid document structure, a 400 bad request error is returned.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("replaceNamedRangeContent")
    public ReplaceNamedRangeContentRequest replaceNamedRangeContent;
    public Request withReplaceNamedRangeContent(ReplaceNamedRangeContentRequest replaceNamedRangeContent) {
        this.replaceNamedRangeContent = replaceNamedRangeContent;
        return this;
    }
    
    /**
     * Unmerges cells in a Table.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("unmergeTableCells")
    public UnmergeTableCellsRequest unmergeTableCells;
    public Request withUnmergeTableCells(UnmergeTableCellsRequest unmergeTableCells) {
        this.unmergeTableCells = unmergeTableCells;
        return this;
    }
    
    /**
     * Updates the DocumentStyle.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("updateDocumentStyle")
    public UpdateDocumentStyleRequest updateDocumentStyle;
    public Request withUpdateDocumentStyle(UpdateDocumentStyleRequest updateDocumentStyle) {
        this.updateDocumentStyle = updateDocumentStyle;
        return this;
    }
    
    /**
     * Update the styling of all paragraphs that overlap with the given range.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("updateParagraphStyle")
    public UpdateParagraphStyleRequest updateParagraphStyle;
    public Request withUpdateParagraphStyle(UpdateParagraphStyleRequest updateParagraphStyle) {
        this.updateParagraphStyle = updateParagraphStyle;
        return this;
    }
    
    /**
     * Updates the SectionStyle.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("updateSectionStyle")
    public UpdateSectionStyleRequest updateSectionStyle;
    public Request withUpdateSectionStyle(UpdateSectionStyleRequest updateSectionStyle) {
        this.updateSectionStyle = updateSectionStyle;
        return this;
    }
    
    /**
     * Updates the style of a range of table cells.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("updateTableCellStyle")
    public UpdateTableCellStyleRequest updateTableCellStyle;
    public Request withUpdateTableCellStyle(UpdateTableCellStyleRequest updateTableCellStyle) {
        this.updateTableCellStyle = updateTableCellStyle;
        return this;
    }
    
    /**
     * Updates the TableColumnProperties of columns in a table.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("updateTableColumnProperties")
    public UpdateTableColumnPropertiesRequest updateTableColumnProperties;
    public Request withUpdateTableColumnProperties(UpdateTableColumnPropertiesRequest updateTableColumnProperties) {
        this.updateTableColumnProperties = updateTableColumnProperties;
        return this;
    }
    
    /**
     * Updates the TableRowStyle of rows in a table.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("updateTableRowStyle")
    public UpdateTableRowStyleRequest updateTableRowStyle;
    public Request withUpdateTableRowStyle(UpdateTableRowStyleRequest updateTableRowStyle) {
        this.updateTableRowStyle = updateTableRowStyle;
        return this;
    }
    
    /**
     * Update the styling of text.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("updateTextStyle")
    public UpdateTextStyleRequest updateTextStyle;
    public Request withUpdateTextStyle(UpdateTextStyleRequest updateTextStyle) {
        this.updateTextStyle = updateTextStyle;
        return this;
    }
    
}
