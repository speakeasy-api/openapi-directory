// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
	"time"
)

type UpdateTransactionSecurity struct {
	Password string `security:"scheme,type=http,subtype=basic,name=password"`
	Username string `security:"scheme,type=http,subtype=basic,name=username"`
}

// UpdateTransactionRequestBodySourceEnum - AUTO Transaction for internal use only
type UpdateTransactionRequestBodySourceEnum string

const (
	UpdateTransactionRequestBodySourceEnumShop UpdateTransactionRequestBodySourceEnum = "SHOP"
)

func (e UpdateTransactionRequestBodySourceEnum) ToPointer() *UpdateTransactionRequestBodySourceEnum {
	return &e
}

func (e *UpdateTransactionRequestBodySourceEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "SHOP":
		*e = UpdateTransactionRequestBodySourceEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateTransactionRequestBodySourceEnum: %v", v)
	}
}

type UpdateTransactionRequestBodyStatusEnum string

const (
	UpdateTransactionRequestBodyStatusEnumCancelled UpdateTransactionRequestBodyStatusEnum = "CANCELLED"
	UpdateTransactionRequestBodyStatusEnumClosed    UpdateTransactionRequestBodyStatusEnum = "CLOSED"
	UpdateTransactionRequestBodyStatusEnumPending   UpdateTransactionRequestBodyStatusEnum = "PENDING"
)

func (e UpdateTransactionRequestBodyStatusEnum) ToPointer() *UpdateTransactionRequestBodyStatusEnum {
	return &e
}

func (e *UpdateTransactionRequestBodyStatusEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "CANCELLED":
		fallthrough
	case "CLOSED":
		fallthrough
	case "PENDING":
		*e = UpdateTransactionRequestBodyStatusEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateTransactionRequestBodyStatusEnum: %v", v)
	}
}

type UpdateTransactionRequestBody struct {
	// Always 'true' for Transactions
	Active      *bool      `form:"name=active"`
	DateClosed  *time.Time `form:"name=dateClosed"`
	DateCreated *time.Time `form:"name=dateCreated"`
	// Unique number (across all Products of a Vendor) that identifies the Transaction
	Number        *string `form:"name=number"`
	PaymentMethod *string `form:"name=paymentMethod"`
	// AUTO Transaction for internal use only
	Source *UpdateTransactionRequestBodySourceEnum `form:"name=source"`
	Status *UpdateTransactionRequestBodyStatusEnum `form:"name=status"`
}

type UpdateTransactionRequest struct {
	RequestBody *UpdateTransactionRequestBody `request:"mediaType=application/x-www-form-urlencoded"`
	// Unique number (across all Products of a Vendor) that identifies the Transaction
	TransactionNumber string `pathParam:"style=simple,explode=false,name=transactionNumber"`
}

type UpdateTransactionResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Successful request
	Netlicensing *shared.Netlicensing
}
