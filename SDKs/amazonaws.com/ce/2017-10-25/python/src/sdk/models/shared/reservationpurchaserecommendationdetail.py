"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import instancedetails as shared_instancedetails
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ReservationPurchaseRecommendationDetail:
    r"""Details about your recommended reservation purchase."""
    
    account_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AccountId'), 'exclude': lambda f: f is None }})  
    average_normalized_units_used_per_hour: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AverageNormalizedUnitsUsedPerHour'), 'exclude': lambda f: f is None }})  
    average_number_of_instances_used_per_hour: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AverageNumberOfInstancesUsedPerHour'), 'exclude': lambda f: f is None }})  
    average_utilization: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AverageUtilization'), 'exclude': lambda f: f is None }})  
    currency_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CurrencyCode'), 'exclude': lambda f: f is None }})  
    estimated_break_even_in_months: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('EstimatedBreakEvenInMonths'), 'exclude': lambda f: f is None }})  
    estimated_monthly_on_demand_cost: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('EstimatedMonthlyOnDemandCost'), 'exclude': lambda f: f is None }})  
    estimated_monthly_savings_amount: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('EstimatedMonthlySavingsAmount'), 'exclude': lambda f: f is None }})  
    estimated_monthly_savings_percentage: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('EstimatedMonthlySavingsPercentage'), 'exclude': lambda f: f is None }})  
    estimated_reservation_cost_for_lookback_period: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('EstimatedReservationCostForLookbackPeriod'), 'exclude': lambda f: f is None }})  
    instance_details: Optional[shared_instancedetails.InstanceDetails] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('InstanceDetails'), 'exclude': lambda f: f is None }})  
    maximum_normalized_units_used_per_hour: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('MaximumNormalizedUnitsUsedPerHour'), 'exclude': lambda f: f is None }})  
    maximum_number_of_instances_used_per_hour: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('MaximumNumberOfInstancesUsedPerHour'), 'exclude': lambda f: f is None }})  
    minimum_normalized_units_used_per_hour: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('MinimumNormalizedUnitsUsedPerHour'), 'exclude': lambda f: f is None }})  
    minimum_number_of_instances_used_per_hour: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('MinimumNumberOfInstancesUsedPerHour'), 'exclude': lambda f: f is None }})  
    recommended_normalized_units_to_purchase: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('RecommendedNormalizedUnitsToPurchase'), 'exclude': lambda f: f is None }})  
    recommended_number_of_instances_to_purchase: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('RecommendedNumberOfInstancesToPurchase'), 'exclude': lambda f: f is None }})  
    recurring_standard_monthly_cost: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('RecurringStandardMonthlyCost'), 'exclude': lambda f: f is None }})  
    upfront_cost: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('UpfrontCost'), 'exclude': lambda f: f is None }})  
    