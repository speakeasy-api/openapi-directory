/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { Expose } from "class-transformer";

/**
 * Indicates the status of the adjustment's transfer to an external accounting system, such as NetSuite.
 *
 * @remarks
 *
 */
export enum ProxyModifyInvoiceAdjustmentTransferredToAccountingEnum {
  Processing = "Processing",
  Yes = "Yes",
  No = "No",
  Error = "Error",
  Ignore = "Ignore",
}

/**
 * Container for custom fields of an Invoice Adjustment object.
 *
 * @remarks
 *
 */
export class ProxyModifyInvoiceAdjustment extends SpeakeasyBase {
  /**
   *  A code identifying the reason for the transaction. Must be an existing reason code or empty. If you do not specify a value, Zuora uses the default reason code.
   *
   * @remarks
   * **Character limit**: 32 **V****alues**: a valid reason code
   */
  @SpeakeasyMetadata()
  @Expose({ name: "ReasonCode" })
  reasonCode?: string;

  /**
   *  The status of the invoice adjustment. This field is required in the Query call, but is automatically generated in other calls.
   *
   * @remarks
   * **Character limit**: 9 **Values**: `Canceled`, `Processed`
   */
  @SpeakeasyMetadata()
  @Expose({ name: "Status" })
  status?: string;

  /**
   * Indicates the status of the adjustment's transfer to an external accounting system, such as NetSuite.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "TransferredToAccounting" })
  transferredToAccounting?: ProxyModifyInvoiceAdjustmentTransferredToAccountingEnum;
}
