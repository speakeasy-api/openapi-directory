// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// POSTDescribeClientVpnRoutesActionEnum
type POSTDescribeClientVpnRoutesActionEnum string

const (
	POSTDescribeClientVpnRoutesActionEnumDescribeClientVpnRoutes POSTDescribeClientVpnRoutesActionEnum = "DescribeClientVpnRoutes"
)

func (e *POSTDescribeClientVpnRoutesActionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "DescribeClientVpnRoutes":
		*e = POSTDescribeClientVpnRoutesActionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for POSTDescribeClientVpnRoutesActionEnum: %s", s)
	}
}

// POSTDescribeClientVpnRoutesVersionEnum
type POSTDescribeClientVpnRoutesVersionEnum string

const (
	POSTDescribeClientVpnRoutesVersionEnumTwoThousandAndSixteen1115 POSTDescribeClientVpnRoutesVersionEnum = "2016-11-15"
)

func (e *POSTDescribeClientVpnRoutesVersionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "2016-11-15":
		*e = POSTDescribeClientVpnRoutesVersionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for POSTDescribeClientVpnRoutesVersionEnum: %s", s)
	}
}

type POSTDescribeClientVpnRoutesQueryParams struct {
	Action POSTDescribeClientVpnRoutesActionEnum `queryParam:"style=form,explode=true,name=Action"`
	// Pagination limit
	MaxResults *string `queryParam:"style=form,explode=true,name=MaxResults"`
	// Pagination token
	NextToken *string                                `queryParam:"style=form,explode=true,name=NextToken"`
	Version   POSTDescribeClientVpnRoutesVersionEnum `queryParam:"style=form,explode=true,name=Version"`
}

type POSTDescribeClientVpnRoutesHeaders struct {
	XAmzAlgorithm     *string `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
}

type POSTDescribeClientVpnRoutesRequest struct {
	QueryParams POSTDescribeClientVpnRoutesQueryParams
	Headers     POSTDescribeClientVpnRoutesHeaders
	Request     []byte `request:"mediaType=text/xml"`
}

type POSTDescribeClientVpnRoutesResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
