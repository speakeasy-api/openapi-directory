<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Projects 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Creates an app profile within an instance.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\BigtableadminProjectsInstancesAppProfilesCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\BigtableadminProjectsInstancesAppProfilesCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\BigtableadminProjectsInstancesAppProfilesCreateResponse
     */
	public function bigtableadminProjectsInstancesAppProfilesCreate(
        \OpenAPI\OpenAPI\Models\Operations\BigtableadminProjectsInstancesAppProfilesCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\BigtableadminProjectsInstancesAppProfilesCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\BigtableadminProjectsInstancesAppProfilesCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/{parent}/appProfiles', \OpenAPI\OpenAPI\Models\Operations\BigtableadminProjectsInstancesAppProfilesCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "appProfile", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\BigtableadminProjectsInstancesAppProfilesCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\BigtableadminProjectsInstancesAppProfilesCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->appProfile = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\AppProfile', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists information about app profiles in an instance.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\BigtableadminProjectsInstancesAppProfilesListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\BigtableadminProjectsInstancesAppProfilesListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\BigtableadminProjectsInstancesAppProfilesListResponse
     */
	public function bigtableadminProjectsInstancesAppProfilesList(
        \OpenAPI\OpenAPI\Models\Operations\BigtableadminProjectsInstancesAppProfilesListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\BigtableadminProjectsInstancesAppProfilesListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\BigtableadminProjectsInstancesAppProfilesListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/{parent}/appProfiles', \OpenAPI\OpenAPI\Models\Operations\BigtableadminProjectsInstancesAppProfilesListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\BigtableadminProjectsInstancesAppProfilesListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\BigtableadminProjectsInstancesAppProfilesListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listAppProfilesResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListAppProfilesResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Copy a Cloud Bigtable backup to a new backup in the destination cluster located in the destination instance and project.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\BigtableadminProjectsInstancesClustersBackupsCopyRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\BigtableadminProjectsInstancesClustersBackupsCopySecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\BigtableadminProjectsInstancesClustersBackupsCopyResponse
     */
	public function bigtableadminProjectsInstancesClustersBackupsCopy(
        \OpenAPI\OpenAPI\Models\Operations\BigtableadminProjectsInstancesClustersBackupsCopyRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\BigtableadminProjectsInstancesClustersBackupsCopySecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\BigtableadminProjectsInstancesClustersBackupsCopyResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/{parent}/backups:copy', \OpenAPI\OpenAPI\Models\Operations\BigtableadminProjectsInstancesClustersBackupsCopyRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "copyBackupRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\BigtableadminProjectsInstancesClustersBackupsCopyRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\BigtableadminProjectsInstancesClustersBackupsCopyResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Starts creating a new Cloud Bigtable Backup. The returned backup long-running operation can be used to track creation of the backup. The metadata field type is CreateBackupMetadata. The response field type is Backup, if successful. Cancelling the returned operation will stop the creation and delete the backup.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\BigtableadminProjectsInstancesClustersBackupsCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\BigtableadminProjectsInstancesClustersBackupsCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\BigtableadminProjectsInstancesClustersBackupsCreateResponse
     */
	public function bigtableadminProjectsInstancesClustersBackupsCreate(
        \OpenAPI\OpenAPI\Models\Operations\BigtableadminProjectsInstancesClustersBackupsCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\BigtableadminProjectsInstancesClustersBackupsCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\BigtableadminProjectsInstancesClustersBackupsCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/{parent}/backups', \OpenAPI\OpenAPI\Models\Operations\BigtableadminProjectsInstancesClustersBackupsCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "backupInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\BigtableadminProjectsInstancesClustersBackupsCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\BigtableadminProjectsInstancesClustersBackupsCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists Cloud Bigtable backups. Returns both completed and pending backups.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\BigtableadminProjectsInstancesClustersBackupsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\BigtableadminProjectsInstancesClustersBackupsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\BigtableadminProjectsInstancesClustersBackupsListResponse
     */
	public function bigtableadminProjectsInstancesClustersBackupsList(
        \OpenAPI\OpenAPI\Models\Operations\BigtableadminProjectsInstancesClustersBackupsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\BigtableadminProjectsInstancesClustersBackupsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\BigtableadminProjectsInstancesClustersBackupsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/{parent}/backups', \OpenAPI\OpenAPI\Models\Operations\BigtableadminProjectsInstancesClustersBackupsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\BigtableadminProjectsInstancesClustersBackupsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\BigtableadminProjectsInstancesClustersBackupsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listBackupsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListBackupsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a cluster within an instance. Note that exactly one of Cluster.serve_nodes and Cluster.cluster_config.cluster_autoscaling_config can be set. If serve_nodes is set to non-zero, then the cluster is manually scaled. If cluster_config.cluster_autoscaling_config is non-empty, then autoscaling is enabled.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\BigtableadminProjectsInstancesClustersCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\BigtableadminProjectsInstancesClustersCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\BigtableadminProjectsInstancesClustersCreateResponse
     */
	public function bigtableadminProjectsInstancesClustersCreate(
        \OpenAPI\OpenAPI\Models\Operations\BigtableadminProjectsInstancesClustersCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\BigtableadminProjectsInstancesClustersCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\BigtableadminProjectsInstancesClustersCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/{parent}/clusters', \OpenAPI\OpenAPI\Models\Operations\BigtableadminProjectsInstancesClustersCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "clusterInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\BigtableadminProjectsInstancesClustersCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\BigtableadminProjectsInstancesClustersCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists hot tablets in a cluster, within the time range provided. Hot tablets are ordered based on CPU usage.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\BigtableadminProjectsInstancesClustersHotTabletsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\BigtableadminProjectsInstancesClustersHotTabletsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\BigtableadminProjectsInstancesClustersHotTabletsListResponse
     */
	public function bigtableadminProjectsInstancesClustersHotTabletsList(
        \OpenAPI\OpenAPI\Models\Operations\BigtableadminProjectsInstancesClustersHotTabletsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\BigtableadminProjectsInstancesClustersHotTabletsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\BigtableadminProjectsInstancesClustersHotTabletsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/{parent}/hotTablets', \OpenAPI\OpenAPI\Models\Operations\BigtableadminProjectsInstancesClustersHotTabletsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\BigtableadminProjectsInstancesClustersHotTabletsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\BigtableadminProjectsInstancesClustersHotTabletsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listHotTabletsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListHotTabletsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists information about clusters in an instance.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\BigtableadminProjectsInstancesClustersListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\BigtableadminProjectsInstancesClustersListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\BigtableadminProjectsInstancesClustersListResponse
     */
	public function bigtableadminProjectsInstancesClustersList(
        \OpenAPI\OpenAPI\Models\Operations\BigtableadminProjectsInstancesClustersListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\BigtableadminProjectsInstancesClustersListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\BigtableadminProjectsInstancesClustersListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/{parent}/clusters', \OpenAPI\OpenAPI\Models\Operations\BigtableadminProjectsInstancesClustersListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\BigtableadminProjectsInstancesClustersListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\BigtableadminProjectsInstancesClustersListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listClustersResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListClustersResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates a cluster within an instance. Note that UpdateCluster does not support updating cluster_config.cluster_autoscaling_config. In order to update it, you must use PartialUpdateCluster.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\BigtableadminProjectsInstancesClustersUpdateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\BigtableadminProjectsInstancesClustersUpdateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\BigtableadminProjectsInstancesClustersUpdateResponse
     */
	public function bigtableadminProjectsInstancesClustersUpdate(
        \OpenAPI\OpenAPI\Models\Operations\BigtableadminProjectsInstancesClustersUpdateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\BigtableadminProjectsInstancesClustersUpdateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\BigtableadminProjectsInstancesClustersUpdateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/{name}', \OpenAPI\OpenAPI\Models\Operations\BigtableadminProjectsInstancesClustersUpdateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "clusterInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\BigtableadminProjectsInstancesClustersUpdateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\BigtableadminProjectsInstancesClustersUpdateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create an instance within a project. Note that exactly one of Cluster.serve_nodes and Cluster.cluster_config.cluster_autoscaling_config can be set. If serve_nodes is set to non-zero, then the cluster is manually scaled. If cluster_config.cluster_autoscaling_config is non-empty, then autoscaling is enabled.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\BigtableadminProjectsInstancesCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\BigtableadminProjectsInstancesCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\BigtableadminProjectsInstancesCreateResponse
     */
	public function bigtableadminProjectsInstancesCreate(
        \OpenAPI\OpenAPI\Models\Operations\BigtableadminProjectsInstancesCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\BigtableadminProjectsInstancesCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\BigtableadminProjectsInstancesCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/{parent}/instances', \OpenAPI\OpenAPI\Models\Operations\BigtableadminProjectsInstancesCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "createInstanceRequestInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\BigtableadminProjectsInstancesCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\BigtableadminProjectsInstancesCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists information about instances in a project.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\BigtableadminProjectsInstancesListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\BigtableadminProjectsInstancesListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\BigtableadminProjectsInstancesListResponse
     */
	public function bigtableadminProjectsInstancesList(
        \OpenAPI\OpenAPI\Models\Operations\BigtableadminProjectsInstancesListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\BigtableadminProjectsInstancesListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\BigtableadminProjectsInstancesListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/{parent}/instances', \OpenAPI\OpenAPI\Models\Operations\BigtableadminProjectsInstancesListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\BigtableadminProjectsInstancesListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\BigtableadminProjectsInstancesListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listInstancesResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListInstancesResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Checks replication consistency based on a consistency token, that is, if replication has caught up based on the conditions specified in the token and the check request.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\BigtableadminProjectsInstancesTablesCheckConsistencyRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\BigtableadminProjectsInstancesTablesCheckConsistencySecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\BigtableadminProjectsInstancesTablesCheckConsistencyResponse
     */
	public function bigtableadminProjectsInstancesTablesCheckConsistency(
        \OpenAPI\OpenAPI\Models\Operations\BigtableadminProjectsInstancesTablesCheckConsistencyRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\BigtableadminProjectsInstancesTablesCheckConsistencySecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\BigtableadminProjectsInstancesTablesCheckConsistencyResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/{name}:checkConsistency', \OpenAPI\OpenAPI\Models\Operations\BigtableadminProjectsInstancesTablesCheckConsistencyRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "checkConsistencyRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\BigtableadminProjectsInstancesTablesCheckConsistencyRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\BigtableadminProjectsInstancesTablesCheckConsistencyResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->checkConsistencyResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CheckConsistencyResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a new table in the specified instance. The table can be created with a full set of initial column families, specified in the request.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\BigtableadminProjectsInstancesTablesCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\BigtableadminProjectsInstancesTablesCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\BigtableadminProjectsInstancesTablesCreateResponse
     */
	public function bigtableadminProjectsInstancesTablesCreate(
        \OpenAPI\OpenAPI\Models\Operations\BigtableadminProjectsInstancesTablesCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\BigtableadminProjectsInstancesTablesCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\BigtableadminProjectsInstancesTablesCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/{parent}/tables', \OpenAPI\OpenAPI\Models\Operations\BigtableadminProjectsInstancesTablesCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "createTableRequestInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\BigtableadminProjectsInstancesTablesCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\BigtableadminProjectsInstancesTablesCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->table = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Table', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Permanently deletes a specified table and all of its data.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\BigtableadminProjectsInstancesTablesDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\BigtableadminProjectsInstancesTablesDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\BigtableadminProjectsInstancesTablesDeleteResponse
     */
	public function bigtableadminProjectsInstancesTablesDelete(
        \OpenAPI\OpenAPI\Models\Operations\BigtableadminProjectsInstancesTablesDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\BigtableadminProjectsInstancesTablesDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\BigtableadminProjectsInstancesTablesDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/{name}', \OpenAPI\OpenAPI\Models\Operations\BigtableadminProjectsInstancesTablesDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\BigtableadminProjectsInstancesTablesDeleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\BigtableadminProjectsInstancesTablesDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->empty = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Permanently drop/delete a row range from a specified table. The request can specify whether to delete all rows in a table, or only those that match a particular prefix.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\BigtableadminProjectsInstancesTablesDropRowRangeRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\BigtableadminProjectsInstancesTablesDropRowRangeSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\BigtableadminProjectsInstancesTablesDropRowRangeResponse
     */
	public function bigtableadminProjectsInstancesTablesDropRowRange(
        \OpenAPI\OpenAPI\Models\Operations\BigtableadminProjectsInstancesTablesDropRowRangeRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\BigtableadminProjectsInstancesTablesDropRowRangeSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\BigtableadminProjectsInstancesTablesDropRowRangeResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/{name}:dropRowRange', \OpenAPI\OpenAPI\Models\Operations\BigtableadminProjectsInstancesTablesDropRowRangeRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "dropRowRangeRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\BigtableadminProjectsInstancesTablesDropRowRangeRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\BigtableadminProjectsInstancesTablesDropRowRangeResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->empty = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Generates a consistency token for a Table, which can be used in CheckConsistency to check whether mutations to the table that finished before this call started have been replicated. The tokens will be available for 90 days.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\BigtableadminProjectsInstancesTablesGenerateConsistencyTokenRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\BigtableadminProjectsInstancesTablesGenerateConsistencyTokenSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\BigtableadminProjectsInstancesTablesGenerateConsistencyTokenResponse
     */
	public function bigtableadminProjectsInstancesTablesGenerateConsistencyToken(
        \OpenAPI\OpenAPI\Models\Operations\BigtableadminProjectsInstancesTablesGenerateConsistencyTokenRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\BigtableadminProjectsInstancesTablesGenerateConsistencyTokenSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\BigtableadminProjectsInstancesTablesGenerateConsistencyTokenResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/{name}:generateConsistencyToken', \OpenAPI\OpenAPI\Models\Operations\BigtableadminProjectsInstancesTablesGenerateConsistencyTokenRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\BigtableadminProjectsInstancesTablesGenerateConsistencyTokenRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\BigtableadminProjectsInstancesTablesGenerateConsistencyTokenResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->generateConsistencyTokenResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GenerateConsistencyTokenResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets the access control policy for a Table resource. Returns an empty policy if the resource exists but does not have a policy set.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\BigtableadminProjectsInstancesTablesGetIamPolicyRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\BigtableadminProjectsInstancesTablesGetIamPolicySecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\BigtableadminProjectsInstancesTablesGetIamPolicyResponse
     */
	public function bigtableadminProjectsInstancesTablesGetIamPolicy(
        \OpenAPI\OpenAPI\Models\Operations\BigtableadminProjectsInstancesTablesGetIamPolicyRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\BigtableadminProjectsInstancesTablesGetIamPolicySecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\BigtableadminProjectsInstancesTablesGetIamPolicyResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/{resource}:getIamPolicy', \OpenAPI\OpenAPI\Models\Operations\BigtableadminProjectsInstancesTablesGetIamPolicyRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "getIamPolicyRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\BigtableadminProjectsInstancesTablesGetIamPolicyRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\BigtableadminProjectsInstancesTablesGetIamPolicyResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->policy = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Policy', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists all tables served from a specified instance.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\BigtableadminProjectsInstancesTablesListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\BigtableadminProjectsInstancesTablesListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\BigtableadminProjectsInstancesTablesListResponse
     */
	public function bigtableadminProjectsInstancesTablesList(
        \OpenAPI\OpenAPI\Models\Operations\BigtableadminProjectsInstancesTablesListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\BigtableadminProjectsInstancesTablesListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\BigtableadminProjectsInstancesTablesListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/{parent}/tables', \OpenAPI\OpenAPI\Models\Operations\BigtableadminProjectsInstancesTablesListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\BigtableadminProjectsInstancesTablesListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\BigtableadminProjectsInstancesTablesListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listTablesResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListTablesResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Performs a series of column family modifications on the specified table. Either all or none of the modifications will occur before this method returns, but data requests received prior to that point may see a table where only some modifications have taken effect.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\BigtableadminProjectsInstancesTablesModifyColumnFamiliesRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\BigtableadminProjectsInstancesTablesModifyColumnFamiliesSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\BigtableadminProjectsInstancesTablesModifyColumnFamiliesResponse
     */
	public function bigtableadminProjectsInstancesTablesModifyColumnFamilies(
        \OpenAPI\OpenAPI\Models\Operations\BigtableadminProjectsInstancesTablesModifyColumnFamiliesRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\BigtableadminProjectsInstancesTablesModifyColumnFamiliesSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\BigtableadminProjectsInstancesTablesModifyColumnFamiliesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/{name}:modifyColumnFamilies', \OpenAPI\OpenAPI\Models\Operations\BigtableadminProjectsInstancesTablesModifyColumnFamiliesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "modifyColumnFamiliesRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\BigtableadminProjectsInstancesTablesModifyColumnFamiliesRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\BigtableadminProjectsInstancesTablesModifyColumnFamiliesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->table = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Table', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates a specified table.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\BigtableadminProjectsInstancesTablesPatchRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\BigtableadminProjectsInstancesTablesPatchSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\BigtableadminProjectsInstancesTablesPatchResponse
     */
	public function bigtableadminProjectsInstancesTablesPatch(
        \OpenAPI\OpenAPI\Models\Operations\BigtableadminProjectsInstancesTablesPatchRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\BigtableadminProjectsInstancesTablesPatchSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\BigtableadminProjectsInstancesTablesPatchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/{name}', \OpenAPI\OpenAPI\Models\Operations\BigtableadminProjectsInstancesTablesPatchRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "tableInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\BigtableadminProjectsInstancesTablesPatchRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\BigtableadminProjectsInstancesTablesPatchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create a new table by restoring from a completed backup. The returned table long-running operation can be used to track the progress of the operation, and to cancel it. The metadata field type is RestoreTableMetadata. The response type is Table, if successful.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\BigtableadminProjectsInstancesTablesRestoreRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\BigtableadminProjectsInstancesTablesRestoreSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\BigtableadminProjectsInstancesTablesRestoreResponse
     */
	public function bigtableadminProjectsInstancesTablesRestore(
        \OpenAPI\OpenAPI\Models\Operations\BigtableadminProjectsInstancesTablesRestoreRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\BigtableadminProjectsInstancesTablesRestoreSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\BigtableadminProjectsInstancesTablesRestoreResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/{parent}/tables:restore', \OpenAPI\OpenAPI\Models\Operations\BigtableadminProjectsInstancesTablesRestoreRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "restoreTableRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\BigtableadminProjectsInstancesTablesRestoreRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\BigtableadminProjectsInstancesTablesRestoreResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Sets the access control policy on a Table resource. Replaces any existing policy.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\BigtableadminProjectsInstancesTablesSetIamPolicyRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\BigtableadminProjectsInstancesTablesSetIamPolicySecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\BigtableadminProjectsInstancesTablesSetIamPolicyResponse
     */
	public function bigtableadminProjectsInstancesTablesSetIamPolicy(
        \OpenAPI\OpenAPI\Models\Operations\BigtableadminProjectsInstancesTablesSetIamPolicyRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\BigtableadminProjectsInstancesTablesSetIamPolicySecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\BigtableadminProjectsInstancesTablesSetIamPolicyResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/{resource}:setIamPolicy', \OpenAPI\OpenAPI\Models\Operations\BigtableadminProjectsInstancesTablesSetIamPolicyRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "setIamPolicyRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\BigtableadminProjectsInstancesTablesSetIamPolicyRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\BigtableadminProjectsInstancesTablesSetIamPolicyResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->policy = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Policy', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns permissions that the caller has on the specified table resource.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\BigtableadminProjectsInstancesTablesTestIamPermissionsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\BigtableadminProjectsInstancesTablesTestIamPermissionsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\BigtableadminProjectsInstancesTablesTestIamPermissionsResponse
     */
	public function bigtableadminProjectsInstancesTablesTestIamPermissions(
        \OpenAPI\OpenAPI\Models\Operations\BigtableadminProjectsInstancesTablesTestIamPermissionsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\BigtableadminProjectsInstancesTablesTestIamPermissionsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\BigtableadminProjectsInstancesTablesTestIamPermissionsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/{resource}:testIamPermissions', \OpenAPI\OpenAPI\Models\Operations\BigtableadminProjectsInstancesTablesTestIamPermissionsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "testIamPermissionsRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\BigtableadminProjectsInstancesTablesTestIamPermissionsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\BigtableadminProjectsInstancesTablesTestIamPermissionsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->testIamPermissionsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\TestIamPermissionsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Restores a specified table which was accidentally deleted.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\BigtableadminProjectsInstancesTablesUndeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\BigtableadminProjectsInstancesTablesUndeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\BigtableadminProjectsInstancesTablesUndeleteResponse
     */
	public function bigtableadminProjectsInstancesTablesUndelete(
        \OpenAPI\OpenAPI\Models\Operations\BigtableadminProjectsInstancesTablesUndeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\BigtableadminProjectsInstancesTablesUndeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\BigtableadminProjectsInstancesTablesUndeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/{name}:undelete', \OpenAPI\OpenAPI\Models\Operations\BigtableadminProjectsInstancesTablesUndeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\BigtableadminProjectsInstancesTablesUndeleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\BigtableadminProjectsInstancesTablesUndeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets information about a location.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\BigtableadminProjectsLocationsGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\BigtableadminProjectsLocationsGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\BigtableadminProjectsLocationsGetResponse
     */
	public function bigtableadminProjectsLocationsGet(
        \OpenAPI\OpenAPI\Models\Operations\BigtableadminProjectsLocationsGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\BigtableadminProjectsLocationsGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\BigtableadminProjectsLocationsGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/{name}', \OpenAPI\OpenAPI\Models\Operations\BigtableadminProjectsLocationsGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\BigtableadminProjectsLocationsGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\BigtableadminProjectsLocationsGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->location = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Location', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists information about the supported locations for this service.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\BigtableadminProjectsLocationsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\BigtableadminProjectsLocationsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\BigtableadminProjectsLocationsListResponse
     */
	public function bigtableadminProjectsLocationsList(
        \OpenAPI\OpenAPI\Models\Operations\BigtableadminProjectsLocationsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\BigtableadminProjectsLocationsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\BigtableadminProjectsLocationsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/{name}/locations', \OpenAPI\OpenAPI\Models\Operations\BigtableadminProjectsLocationsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\BigtableadminProjectsLocationsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\BigtableadminProjectsLocationsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listLocationsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListLocationsResponse', 'json');
            }
        }

        return $response;
    }
}