/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Filter - &lt;p&gt;A conditional statement for a search expression that includes a resource property, a Boolean operator, and a value. Resources that match the statement are returned in the results from the &lt;a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_Search.html"&gt;Search&lt;/a&gt; API.&lt;/p&gt; &lt;p&gt;If you specify a &lt;code&gt;Value&lt;/code&gt;, but not an &lt;code&gt;Operator&lt;/code&gt;, SageMaker uses the equals operator.&lt;/p&gt; &lt;p&gt;In search, there are several property types:&lt;/p&gt; &lt;dl&gt; &lt;dt&gt;Metrics&lt;/dt&gt; &lt;dd&gt; &lt;p&gt;To define a metric filter, enter a value using the form &lt;code&gt;"Metrics.&amp;lt;name&amp;gt;"&lt;/code&gt;, where &lt;code&gt;&amp;lt;name&amp;gt;&lt;/code&gt; is a metric name. For example, the following filter searches for training jobs with an &lt;code&gt;"accuracy"&lt;/code&gt; metric greater than &lt;code&gt;"0.9"&lt;/code&gt;:&lt;/p&gt; &lt;p&gt; &lt;code&gt;{&lt;/code&gt; &lt;/p&gt; &lt;p&gt; &lt;code&gt;"Name": "Metrics.accuracy",&lt;/code&gt; &lt;/p&gt; &lt;p&gt; &lt;code&gt;"Operator": "GreaterThan",&lt;/code&gt; &lt;/p&gt; &lt;p&gt; &lt;code&gt;"Value": "0.9"&lt;/code&gt; &lt;/p&gt; &lt;p&gt; &lt;code&gt;}&lt;/code&gt; &lt;/p&gt; &lt;/dd&gt; &lt;dt&gt;HyperParameters&lt;/dt&gt; &lt;dd&gt; &lt;p&gt;To define a hyperparameter filter, enter a value with the form &lt;code&gt;"HyperParameters.&amp;lt;name&amp;gt;"&lt;/code&gt;. Decimal hyperparameter values are treated as a decimal in a comparison if the specified &lt;code&gt;Value&lt;/code&gt; is also a decimal value. If the specified &lt;code&gt;Value&lt;/code&gt; is an integer, the decimal hyperparameter values are treated as integers. For example, the following filter is satisfied by training jobs with a &lt;code&gt;"learning_rate"&lt;/code&gt; hyperparameter that is less than &lt;code&gt;"0.5"&lt;/code&gt;:&lt;/p&gt; &lt;p&gt; &lt;code&gt; {&lt;/code&gt; &lt;/p&gt; &lt;p&gt; &lt;code&gt; "Name": "HyperParameters.learning_rate",&lt;/code&gt; &lt;/p&gt; &lt;p&gt; &lt;code&gt; "Operator": "LessThan",&lt;/code&gt; &lt;/p&gt; &lt;p&gt; &lt;code&gt; "Value": "0.5"&lt;/code&gt; &lt;/p&gt; &lt;p&gt; &lt;code&gt; }&lt;/code&gt; &lt;/p&gt; &lt;/dd&gt; &lt;dt&gt;Tags&lt;/dt&gt; &lt;dd&gt; &lt;p&gt;To define a tag filter, enter a value with the form &lt;code&gt;Tags.&amp;lt;key&amp;gt;&lt;/code&gt;.&lt;/p&gt; &lt;/dd&gt; &lt;/dl&gt;
 */
public class Filter {
    @JsonProperty("Name")
    public String name;

    public Filter withName(String name) {
        this.name = name;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Operator")
    public OperatorEnum operator;

    public Filter withOperator(OperatorEnum operator) {
        this.operator = operator;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Value")
    public String value;

    public Filter withValue(String value) {
        this.value = value;
        return this;
    }
    
    public Filter(@JsonProperty("Name") String name) {
        this.name = name;
  }
}
