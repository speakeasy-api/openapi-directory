/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * GoogleCloudDocumentaiV1DocumentPage - A page in a Document.
 */
public class GoogleCloudDocumentaiV1DocumentPage {
    /**
     * A list of visually detected text blocks on the page. A block has a set of lines (collected into paragraphs) that have a common line-spacing and orientation.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("blocks")
    public GoogleCloudDocumentaiV1DocumentPageBlock[] blocks;

    public GoogleCloudDocumentaiV1DocumentPage withBlocks(GoogleCloudDocumentaiV1DocumentPageBlock[] blocks) {
        this.blocks = blocks;
        return this;
    }
    
    /**
     * A list of detected barcodes.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("detectedBarcodes")
    public GoogleCloudDocumentaiV1DocumentPageDetectedBarcode[] detectedBarcodes;

    public GoogleCloudDocumentaiV1DocumentPage withDetectedBarcodes(GoogleCloudDocumentaiV1DocumentPageDetectedBarcode[] detectedBarcodes) {
        this.detectedBarcodes = detectedBarcodes;
        return this;
    }
    
    /**
     * A list of detected languages together with confidence.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("detectedLanguages")
    public GoogleCloudDocumentaiV1DocumentPageDetectedLanguage[] detectedLanguages;

    public GoogleCloudDocumentaiV1DocumentPage withDetectedLanguages(GoogleCloudDocumentaiV1DocumentPageDetectedLanguage[] detectedLanguages) {
        this.detectedLanguages = detectedLanguages;
        return this;
    }
    
    /**
     * Dimension for the page.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("dimension")
    public GoogleCloudDocumentaiV1DocumentPageDimension dimension;

    public GoogleCloudDocumentaiV1DocumentPage withDimension(GoogleCloudDocumentaiV1DocumentPageDimension dimension) {
        this.dimension = dimension;
        return this;
    }
    
    /**
     * A list of visually detected form fields on the page.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("formFields")
    public GoogleCloudDocumentaiV1DocumentPageFormField[] formFields;

    public GoogleCloudDocumentaiV1DocumentPage withFormFields(GoogleCloudDocumentaiV1DocumentPageFormField[] formFields) {
        this.formFields = formFields;
        return this;
    }
    
    /**
     * Rendered image contents for this page.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("image")
    public GoogleCloudDocumentaiV1DocumentPageImage image;

    public GoogleCloudDocumentaiV1DocumentPage withImage(GoogleCloudDocumentaiV1DocumentPageImage image) {
        this.image = image;
        return this;
    }
    
    /**
     * Image Quality Scores for the page image
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("imageQualityScores")
    public GoogleCloudDocumentaiV1DocumentPageImageQualityScores imageQualityScores;

    public GoogleCloudDocumentaiV1DocumentPage withImageQualityScores(GoogleCloudDocumentaiV1DocumentPageImageQualityScores imageQualityScores) {
        this.imageQualityScores = imageQualityScores;
        return this;
    }
    
    /**
     * Visual element describing a layout unit on a page.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("layout")
    public GoogleCloudDocumentaiV1DocumentPageLayout layout;

    public GoogleCloudDocumentaiV1DocumentPage withLayout(GoogleCloudDocumentaiV1DocumentPageLayout layout) {
        this.layout = layout;
        return this;
    }
    
    /**
     * A list of visually detected text lines on the page. A collection of tokens that a human would perceive as a line.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("lines")
    public GoogleCloudDocumentaiV1DocumentPageLine[] lines;

    public GoogleCloudDocumentaiV1DocumentPage withLines(GoogleCloudDocumentaiV1DocumentPageLine[] lines) {
        this.lines = lines;
        return this;
    }
    
    /**
     * 1-based index for current Page in a parent Document. Useful when a page is taken out of a Document for individual processing.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("pageNumber")
    public Integer pageNumber;

    public GoogleCloudDocumentaiV1DocumentPage withPageNumber(Integer pageNumber) {
        this.pageNumber = pageNumber;
        return this;
    }
    
    /**
     * A list of visually detected text paragraphs on the page. A collection of lines that a human would perceive as a paragraph.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("paragraphs")
    public GoogleCloudDocumentaiV1DocumentPageParagraph[] paragraphs;

    public GoogleCloudDocumentaiV1DocumentPage withParagraphs(GoogleCloudDocumentaiV1DocumentPageParagraph[] paragraphs) {
        this.paragraphs = paragraphs;
        return this;
    }
    
    /**
     * Structure to identify provenance relationships between annotations in different revisions.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("provenance")
    public GoogleCloudDocumentaiV1DocumentProvenance provenance;

    public GoogleCloudDocumentaiV1DocumentPage withProvenance(GoogleCloudDocumentaiV1DocumentProvenance provenance) {
        this.provenance = provenance;
        return this;
    }
    
    /**
     * A list of visually detected symbols on the page.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("symbols")
    public GoogleCloudDocumentaiV1DocumentPageSymbol[] symbols;

    public GoogleCloudDocumentaiV1DocumentPage withSymbols(GoogleCloudDocumentaiV1DocumentPageSymbol[] symbols) {
        this.symbols = symbols;
        return this;
    }
    
    /**
     * A list of visually detected tables on the page.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tables")
    public GoogleCloudDocumentaiV1DocumentPageTable[] tables;

    public GoogleCloudDocumentaiV1DocumentPage withTables(GoogleCloudDocumentaiV1DocumentPageTable[] tables) {
        this.tables = tables;
        return this;
    }
    
    /**
     * A list of visually detected tokens on the page.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tokens")
    public GoogleCloudDocumentaiV1DocumentPageToken[] tokens;

    public GoogleCloudDocumentaiV1DocumentPage withTokens(GoogleCloudDocumentaiV1DocumentPageToken[] tokens) {
        this.tokens = tokens;
        return this;
    }
    
    /**
     * Transformation matrices that were applied to the original document image to produce Page.image.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("transforms")
    public GoogleCloudDocumentaiV1DocumentPageMatrix[] transforms;

    public GoogleCloudDocumentaiV1DocumentPage withTransforms(GoogleCloudDocumentaiV1DocumentPageMatrix[] transforms) {
        this.transforms = transforms;
        return this;
    }
    
    /**
     * A list of detected non-text visual elements e.g. checkbox, signature etc. on the page.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("visualElements")
    public GoogleCloudDocumentaiV1DocumentPageVisualElement[] visualElements;

    public GoogleCloudDocumentaiV1DocumentPage withVisualElements(GoogleCloudDocumentaiV1DocumentPageVisualElement[] visualElements) {
        this.visualElements = visualElements;
        return this;
    }
    
    public GoogleCloudDocumentaiV1DocumentPage(){}
}
