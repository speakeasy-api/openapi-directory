<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

/**
 * SDK - The Up API gives you programmatic access to your balances and
 * 
 * transaction data. You can request past transactions or set up
 * webhooks to receive real-time events when new transactions hit your
 * account. It’s new, it’s exciting and it’s just the beginning.
 * 
 * 
 * @package OpenAPI\OpenAPI
 * @access public
 */
class SDK
{
	public const SERVERS = [
		'https://api.up.com.au/api/v1',
	];
  	
    /**
     * Accounts represent the underlying store used to track balances
     * 
     * and the transactions that have occurred to modify those balances
     * over time. Up currently has two types of account: `SAVER`—used to
     * earn interest and to hit savings goals, and `TRANSACTIONAL`—used
     * for everyday spending.
     * 
     * 
     * @var Accounts $$accounts
     */
	public Accounts $accounts;
	
    /**
     * Categories enable understanding where your money goes by driving
     * 
     * powerful insights in Up. All categories in Up are pre-defined
     * and are automatically assigned to new purchases in most cases. A
     * parent-child relationship is used to represent categories,
     * however parent categories cannot be directly assigned to
     * transactions.
     * 
     * 
     * @var Categories $$categories
     */
	public Categories $categories;
	
    /**
     * Tags are custom labels that can be associated with transactions
     * 
     * on Up. Within the Up application, tags provide additional insight
     * into spending. For example, you could have a "Take Away" tag that
     * you apply to purchases from food delivery services. The Up API
     * allows you to manage the tags associated with transactions. Each
     * transaction may have up to 6 tags.
     * 
     * Tags are identified by their labels, which are unique strings,
     * so the tag "Holiday" has also the `id` `"Holiday"`.
     * 
     * 
     * @var Tags $$tags
     */
	public Tags $tags;
	
    /**
     * Transactions represent the movement of money into and out of an
     * 
     * account. They have many characteristics that vary depending on
     * the kind of transaction. Transactions may be temporarily `HELD`
     * (pending) or `SETTLED`, typically depending on which payment
     * method was used at the point of sale.
     * 
     * 
     * @var Transactions $$transactions
     */
	public Transactions $transactions;
	
    /**
     * Some endpoints exist not to expose data, but to test the API
     * 
     * itself. Currently there is only one endpoint in this group: ping!
     * 
     * 
     * @var UtilityEndpoints $$utilityEndpoints
     */
	public UtilityEndpoints $utilityEndpoints;
	
    /**
     * Webhooks provide a mechanism for a configured URL to receive
     * 
     * events when transaction activity occurs on Up. You can think of
     * webhooks as being like push notifications for your server-side
     * application.
     * 
     * 
     * @var Webhooks $$webhooks
     */
	public Webhooks $webhooks;
		
	// SDK private variables namespaced with _ to avoid conflicts with API models
	private ?\GuzzleHttp\ClientInterface $_defaultClient;
	private ?\GuzzleHttp\ClientInterface $_securityClient;
	private ?Models\Shared\Security $_security;
	private string $_serverUrl;
	private string $_language = 'php';
	private string $_sdkVersion = '0.0.1';
	private string $_genVersion = 'internal';

	/**
	 * Returns a new instance of the SDK builder used to configure and create the SDK instance.
	 * 
	 * @return SDKBuilder
	 */
	public static function builder(): SDKBuilder
	{
		return new SDKBuilder();
	}

	/**
	 * @param \GuzzleHttp\ClientInterface|null $client	 
	 * @param Models\Shared\Security|null $security
	 * @param string $serverUrl
	 * @param array<string, string>|null $params
	 */
	public function __construct(?\GuzzleHttp\ClientInterface $client, ?Models\Shared\Security $security, string $serverUrl, ?array $params)
	{
		$this->_defaultClient = $client;
		
		if ($this->_defaultClient === null) {
			$this->_defaultClient = new \GuzzleHttp\Client([
				'timeout' => 60,
			]);
		}

		$this->_securityClient = null;
		if ($security !== null) {
			$this->_security = $security;
			$this->_securityClient = Utils\Utils::configureSecurityClient($this->_defaultClient, $this->_security);
		}
		
		if ($this->_securityClient === null) {
			$this->_securityClient = $this->_defaultClient;
		}

		if (!empty($serverUrl)) {
			$this->_serverUrl = Utils\Utils::templateUrl($serverUrl, $params);
		}
		
		if (empty($this->_serverUrl)) {
			$this->_serverUrl = $this::SERVERS[0];
		}
		
		$this->accounts = new Accounts(
			$this->_defaultClient,
			$this->_securityClient,
			$this->_serverUrl,
			$this->_language,
			$this->_sdkVersion,
			$this->_genVersion
		);
		
		$this->categories = new Categories(
			$this->_defaultClient,
			$this->_securityClient,
			$this->_serverUrl,
			$this->_language,
			$this->_sdkVersion,
			$this->_genVersion
		);
		
		$this->tags = new Tags(
			$this->_defaultClient,
			$this->_securityClient,
			$this->_serverUrl,
			$this->_language,
			$this->_sdkVersion,
			$this->_genVersion
		);
		
		$this->transactions = new Transactions(
			$this->_defaultClient,
			$this->_securityClient,
			$this->_serverUrl,
			$this->_language,
			$this->_sdkVersion,
			$this->_genVersion
		);
		
		$this->utilityEndpoints = new UtilityEndpoints(
			$this->_defaultClient,
			$this->_securityClient,
			$this->_serverUrl,
			$this->_language,
			$this->_sdkVersion,
			$this->_genVersion
		);
		
		$this->webhooks = new Webhooks(
			$this->_defaultClient,
			$this->_securityClient,
			$this->_serverUrl,
			$this->_language,
			$this->_sdkVersion,
			$this->_genVersion
		);
	}
}