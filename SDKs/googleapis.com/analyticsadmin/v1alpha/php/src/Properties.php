<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Properties 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Creates information about multiple access bindings to an account or property. This method is transactional. If any AccessBinding cannot be created, none of the AccessBindings will be created.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesAccessBindingsBatchCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesAccessBindingsBatchCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesAccessBindingsBatchCreateResponse
     */
	public function analyticsadminPropertiesAccessBindingsBatchCreate(
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesAccessBindingsBatchCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesAccessBindingsBatchCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesAccessBindingsBatchCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1alpha/{parent}/accessBindings:batchCreate', \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesAccessBindingsBatchCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googleAnalyticsAdminV1alphaBatchCreateAccessBindingsRequestInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesAccessBindingsBatchCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesAccessBindingsBatchCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleAnalyticsAdminV1alphaBatchCreateAccessBindingsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleAnalyticsAdminV1alphaBatchCreateAccessBindingsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Deletes information about multiple users' links to an account or property.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesAccessBindingsBatchDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesAccessBindingsBatchDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesAccessBindingsBatchDeleteResponse
     */
	public function analyticsadminPropertiesAccessBindingsBatchDelete(
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesAccessBindingsBatchDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesAccessBindingsBatchDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesAccessBindingsBatchDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1alpha/{parent}/accessBindings:batchDelete', \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesAccessBindingsBatchDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googleAnalyticsAdminV1alphaBatchDeleteAccessBindingsRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesAccessBindingsBatchDeleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesAccessBindingsBatchDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleProtobufEmpty = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets information about multiple access bindings to an account or property.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesAccessBindingsBatchGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesAccessBindingsBatchGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesAccessBindingsBatchGetResponse
     */
	public function analyticsadminPropertiesAccessBindingsBatchGet(
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesAccessBindingsBatchGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesAccessBindingsBatchGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesAccessBindingsBatchGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1alpha/{parent}/accessBindings:batchGet', \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesAccessBindingsBatchGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesAccessBindingsBatchGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesAccessBindingsBatchGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleAnalyticsAdminV1alphaBatchGetAccessBindingsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleAnalyticsAdminV1alphaBatchGetAccessBindingsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates information about multiple access bindings to an account or property.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesAccessBindingsBatchUpdateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesAccessBindingsBatchUpdateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesAccessBindingsBatchUpdateResponse
     */
	public function analyticsadminPropertiesAccessBindingsBatchUpdate(
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesAccessBindingsBatchUpdateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesAccessBindingsBatchUpdateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesAccessBindingsBatchUpdateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1alpha/{parent}/accessBindings:batchUpdate', \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesAccessBindingsBatchUpdateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googleAnalyticsAdminV1alphaBatchUpdateAccessBindingsRequestInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesAccessBindingsBatchUpdateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesAccessBindingsBatchUpdateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleAnalyticsAdminV1alphaBatchUpdateAccessBindingsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleAnalyticsAdminV1alphaBatchUpdateAccessBindingsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates an access binding on an account or property.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesAccessBindingsCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesAccessBindingsCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesAccessBindingsCreateResponse
     */
	public function analyticsadminPropertiesAccessBindingsCreate(
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesAccessBindingsCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesAccessBindingsCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesAccessBindingsCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1alpha/{parent}/accessBindings', \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesAccessBindingsCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googleAnalyticsAdminV1alphaAccessBindingInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesAccessBindingsCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesAccessBindingsCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleAnalyticsAdminV1alphaAccessBinding = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleAnalyticsAdminV1alphaAccessBinding', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists all access bindings on an account or property.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesAccessBindingsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesAccessBindingsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesAccessBindingsListResponse
     */
	public function analyticsadminPropertiesAccessBindingsList(
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesAccessBindingsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesAccessBindingsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesAccessBindingsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1alpha/{parent}/accessBindings', \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesAccessBindingsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesAccessBindingsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesAccessBindingsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleAnalyticsAdminV1alphaListAccessBindingsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleAnalyticsAdminV1alphaListAccessBindingsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Acknowledges the terms of user data collection for the specified property. This acknowledgement must be completed (either in the Google Analytics UI or through this API) before MeasurementProtocolSecret resources may be created.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesAcknowledgeUserDataCollectionRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesAcknowledgeUserDataCollectionSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesAcknowledgeUserDataCollectionResponse
     */
	public function analyticsadminPropertiesAcknowledgeUserDataCollection(
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesAcknowledgeUserDataCollectionRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesAcknowledgeUserDataCollectionSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesAcknowledgeUserDataCollectionResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1alpha/{property}:acknowledgeUserDataCollection', \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesAcknowledgeUserDataCollectionRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googleAnalyticsAdminV1alphaAcknowledgeUserDataCollectionRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesAcknowledgeUserDataCollectionRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesAcknowledgeUserDataCollectionResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleAnalyticsAdminV1alphaAcknowledgeUserDataCollectionResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates an Audience.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesAudiencesCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesAudiencesCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesAudiencesCreateResponse
     */
	public function analyticsadminPropertiesAudiencesCreate(
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesAudiencesCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesAudiencesCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesAudiencesCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1alpha/{parent}/audiences', \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesAudiencesCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googleAnalyticsAdminV1alphaAudienceInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesAudiencesCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesAudiencesCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleAnalyticsAdminV1alphaAudience = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleAnalyticsAdminV1alphaAudience', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists Audiences on a property. Audiences created before 2020 may not be supported. Default audiences will not show filter definitions.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesAudiencesListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesAudiencesListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesAudiencesListResponse
     */
	public function analyticsadminPropertiesAudiencesList(
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesAudiencesListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesAudiencesListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesAudiencesListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1alpha/{parent}/audiences', \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesAudiencesListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesAudiencesListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesAudiencesListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleAnalyticsAdminV1alphaListAudiencesResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleAnalyticsAdminV1alphaListAudiencesResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists BigQuery Links on a property.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesBigQueryLinksListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesBigQueryLinksListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesBigQueryLinksListResponse
     */
	public function analyticsadminPropertiesBigQueryLinksList(
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesBigQueryLinksListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesBigQueryLinksListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesBigQueryLinksListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1alpha/{parent}/bigQueryLinks', \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesBigQueryLinksListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesBigQueryLinksListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesBigQueryLinksListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleAnalyticsAdminV1alphaListBigQueryLinksResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleAnalyticsAdminV1alphaListBigQueryLinksResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a conversion event with the specified attributes.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesConversionEventsCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesConversionEventsCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesConversionEventsCreateResponse
     */
	public function analyticsadminPropertiesConversionEventsCreate(
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesConversionEventsCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesConversionEventsCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesConversionEventsCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1alpha/{parent}/conversionEvents', \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesConversionEventsCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googleAnalyticsAdminV1alphaConversionEventInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesConversionEventsCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesConversionEventsCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleAnalyticsAdminV1alphaConversionEvent = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleAnalyticsAdminV1alphaConversionEvent', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns a list of conversion events in the specified parent property. Returns an empty list if no conversion events are found.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesConversionEventsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesConversionEventsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesConversionEventsListResponse
     */
	public function analyticsadminPropertiesConversionEventsList(
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesConversionEventsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesConversionEventsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesConversionEventsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1alpha/{parent}/conversionEvents', \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesConversionEventsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesConversionEventsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesConversionEventsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleAnalyticsAdminV1alphaListConversionEventsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleAnalyticsAdminV1alphaListConversionEventsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates an "GA4" property with the specified location and attributes.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesCreateResponse
     */
	public function analyticsadminPropertiesCreate(
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1alpha/properties');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googleAnalyticsAdminV1alphaPropertyInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleAnalyticsAdminV1alphaProperty = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleAnalyticsAdminV1alphaProperty', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a connected site tag for a Universal Analytics property. You can create a maximum of 20 connected site tags per property. Note: This API cannot be used on GA4 properties.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesCreateConnectedSiteTagRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesCreateConnectedSiteTagSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesCreateConnectedSiteTagResponse
     */
	public function analyticsadminPropertiesCreateConnectedSiteTag(
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesCreateConnectedSiteTagRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesCreateConnectedSiteTagSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesCreateConnectedSiteTagResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1alpha/properties:createConnectedSiteTag');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googleAnalyticsAdminV1alphaCreateConnectedSiteTagRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesCreateConnectedSiteTagRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesCreateConnectedSiteTagResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleAnalyticsAdminV1alphaCreateConnectedSiteTagResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a CustomDimension.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesCustomDimensionsCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesCustomDimensionsCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesCustomDimensionsCreateResponse
     */
	public function analyticsadminPropertiesCustomDimensionsCreate(
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesCustomDimensionsCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesCustomDimensionsCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesCustomDimensionsCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1alpha/{parent}/customDimensions', \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesCustomDimensionsCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googleAnalyticsAdminV1alphaCustomDimensionInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesCustomDimensionsCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesCustomDimensionsCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleAnalyticsAdminV1alphaCustomDimension = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleAnalyticsAdminV1alphaCustomDimension', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists CustomDimensions on a property.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesCustomDimensionsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesCustomDimensionsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesCustomDimensionsListResponse
     */
	public function analyticsadminPropertiesCustomDimensionsList(
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesCustomDimensionsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesCustomDimensionsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesCustomDimensionsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1alpha/{parent}/customDimensions', \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesCustomDimensionsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesCustomDimensionsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesCustomDimensionsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleAnalyticsAdminV1alphaListCustomDimensionsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleAnalyticsAdminV1alphaListCustomDimensionsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Archives a CustomMetric on a property.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesCustomMetricsArchiveRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesCustomMetricsArchiveSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesCustomMetricsArchiveResponse
     */
	public function analyticsadminPropertiesCustomMetricsArchive(
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesCustomMetricsArchiveRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesCustomMetricsArchiveSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesCustomMetricsArchiveResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1alpha/{name}:archive', \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesCustomMetricsArchiveRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesCustomMetricsArchiveRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesCustomMetricsArchiveResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleProtobufEmpty = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a CustomMetric.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesCustomMetricsCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesCustomMetricsCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesCustomMetricsCreateResponse
     */
	public function analyticsadminPropertiesCustomMetricsCreate(
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesCustomMetricsCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesCustomMetricsCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesCustomMetricsCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1alpha/{parent}/customMetrics', \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesCustomMetricsCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googleAnalyticsAdminV1alphaCustomMetricInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesCustomMetricsCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesCustomMetricsCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleAnalyticsAdminV1alphaCustomMetric = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleAnalyticsAdminV1alphaCustomMetric', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists CustomMetrics on a property.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesCustomMetricsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesCustomMetricsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesCustomMetricsListResponse
     */
	public function analyticsadminPropertiesCustomMetricsList(
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesCustomMetricsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesCustomMetricsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesCustomMetricsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1alpha/{parent}/customMetrics', \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesCustomMetricsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesCustomMetricsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesCustomMetricsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleAnalyticsAdminV1alphaListCustomMetricsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleAnalyticsAdminV1alphaListCustomMetricsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a DataStream.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesDataStreamsCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesDataStreamsCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesDataStreamsCreateResponse
     */
	public function analyticsadminPropertiesDataStreamsCreate(
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesDataStreamsCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesDataStreamsCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesDataStreamsCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1alpha/{parent}/dataStreams', \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesDataStreamsCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googleAnalyticsAdminV1alphaDataStreamInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesDataStreamsCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesDataStreamsCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleAnalyticsAdminV1alphaDataStream = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleAnalyticsAdminV1alphaDataStream', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists DataStreams on a property.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesDataStreamsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesDataStreamsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesDataStreamsListResponse
     */
	public function analyticsadminPropertiesDataStreamsList(
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesDataStreamsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesDataStreamsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesDataStreamsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1alpha/{parent}/dataStreams', \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesDataStreamsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesDataStreamsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesDataStreamsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleAnalyticsAdminV1alphaListDataStreamsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleAnalyticsAdminV1alphaListDataStreamsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a measurement protocol secret.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesDataStreamsMeasurementProtocolSecretsCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesDataStreamsMeasurementProtocolSecretsCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesDataStreamsMeasurementProtocolSecretsCreateResponse
     */
	public function analyticsadminPropertiesDataStreamsMeasurementProtocolSecretsCreate(
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesDataStreamsMeasurementProtocolSecretsCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesDataStreamsMeasurementProtocolSecretsCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesDataStreamsMeasurementProtocolSecretsCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1alpha/{parent}/measurementProtocolSecrets', \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesDataStreamsMeasurementProtocolSecretsCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googleAnalyticsAdminV1alphaMeasurementProtocolSecretInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesDataStreamsMeasurementProtocolSecretsCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesDataStreamsMeasurementProtocolSecretsCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleAnalyticsAdminV1alphaMeasurementProtocolSecret = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleAnalyticsAdminV1alphaMeasurementProtocolSecret', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns child MeasurementProtocolSecrets under the specified parent Property.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesDataStreamsMeasurementProtocolSecretsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesDataStreamsMeasurementProtocolSecretsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesDataStreamsMeasurementProtocolSecretsListResponse
     */
	public function analyticsadminPropertiesDataStreamsMeasurementProtocolSecretsList(
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesDataStreamsMeasurementProtocolSecretsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesDataStreamsMeasurementProtocolSecretsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesDataStreamsMeasurementProtocolSecretsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1alpha/{parent}/measurementProtocolSecrets', \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesDataStreamsMeasurementProtocolSecretsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesDataStreamsMeasurementProtocolSecretsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesDataStreamsMeasurementProtocolSecretsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleAnalyticsAdminV1alphaListMeasurementProtocolSecretsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleAnalyticsAdminV1alphaListMeasurementProtocolSecretsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Deletes a connected site tag for a Universal Analytics property. Note: this has no effect on GA4 properties.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesDeleteConnectedSiteTagRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesDeleteConnectedSiteTagSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesDeleteConnectedSiteTagResponse
     */
	public function analyticsadminPropertiesDeleteConnectedSiteTag(
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesDeleteConnectedSiteTagRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesDeleteConnectedSiteTagSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesDeleteConnectedSiteTagResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1alpha/properties:deleteConnectedSiteTag');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googleAnalyticsAdminV1alphaDeleteConnectedSiteTagRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesDeleteConnectedSiteTagRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesDeleteConnectedSiteTagResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleProtobufEmpty = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Approves a DisplayVideo360AdvertiserLinkProposal. The DisplayVideo360AdvertiserLinkProposal will be deleted and a new DisplayVideo360AdvertiserLink will be created.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesDisplayVideo360AdvertiserLinkProposalsApproveRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesDisplayVideo360AdvertiserLinkProposalsApproveSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesDisplayVideo360AdvertiserLinkProposalsApproveResponse
     */
	public function analyticsadminPropertiesDisplayVideo360AdvertiserLinkProposalsApprove(
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesDisplayVideo360AdvertiserLinkProposalsApproveRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesDisplayVideo360AdvertiserLinkProposalsApproveSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesDisplayVideo360AdvertiserLinkProposalsApproveResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1alpha/{name}:approve', \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesDisplayVideo360AdvertiserLinkProposalsApproveRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesDisplayVideo360AdvertiserLinkProposalsApproveRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesDisplayVideo360AdvertiserLinkProposalsApproveResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleAnalyticsAdminV1alphaApproveDisplayVideo360AdvertiserLinkProposalResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleAnalyticsAdminV1alphaApproveDisplayVideo360AdvertiserLinkProposalResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Cancels a DisplayVideo360AdvertiserLinkProposal. Cancelling can mean either: - Declining a proposal initiated from Display & Video 360 - Withdrawing a proposal initiated from Google Analytics After being cancelled, a proposal will eventually be deleted automatically.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesDisplayVideo360AdvertiserLinkProposalsCancelRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesDisplayVideo360AdvertiserLinkProposalsCancelSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesDisplayVideo360AdvertiserLinkProposalsCancelResponse
     */
	public function analyticsadminPropertiesDisplayVideo360AdvertiserLinkProposalsCancel(
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesDisplayVideo360AdvertiserLinkProposalsCancelRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesDisplayVideo360AdvertiserLinkProposalsCancelSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesDisplayVideo360AdvertiserLinkProposalsCancelResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1alpha/{name}:cancel', \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesDisplayVideo360AdvertiserLinkProposalsCancelRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesDisplayVideo360AdvertiserLinkProposalsCancelRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesDisplayVideo360AdvertiserLinkProposalsCancelResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleAnalyticsAdminV1alphaDisplayVideo360AdvertiserLinkProposal = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleAnalyticsAdminV1alphaDisplayVideo360AdvertiserLinkProposal', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a DisplayVideo360AdvertiserLinkProposal.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesDisplayVideo360AdvertiserLinkProposalsCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesDisplayVideo360AdvertiserLinkProposalsCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesDisplayVideo360AdvertiserLinkProposalsCreateResponse
     */
	public function analyticsadminPropertiesDisplayVideo360AdvertiserLinkProposalsCreate(
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesDisplayVideo360AdvertiserLinkProposalsCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesDisplayVideo360AdvertiserLinkProposalsCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesDisplayVideo360AdvertiserLinkProposalsCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1alpha/{parent}/displayVideo360AdvertiserLinkProposals', \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesDisplayVideo360AdvertiserLinkProposalsCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googleAnalyticsAdminV1alphaDisplayVideo360AdvertiserLinkProposalInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesDisplayVideo360AdvertiserLinkProposalsCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesDisplayVideo360AdvertiserLinkProposalsCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleAnalyticsAdminV1alphaDisplayVideo360AdvertiserLinkProposal = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleAnalyticsAdminV1alphaDisplayVideo360AdvertiserLinkProposal', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists DisplayVideo360AdvertiserLinkProposals on a property.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesDisplayVideo360AdvertiserLinkProposalsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesDisplayVideo360AdvertiserLinkProposalsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesDisplayVideo360AdvertiserLinkProposalsListResponse
     */
	public function analyticsadminPropertiesDisplayVideo360AdvertiserLinkProposalsList(
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesDisplayVideo360AdvertiserLinkProposalsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesDisplayVideo360AdvertiserLinkProposalsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesDisplayVideo360AdvertiserLinkProposalsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1alpha/{parent}/displayVideo360AdvertiserLinkProposals', \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesDisplayVideo360AdvertiserLinkProposalsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesDisplayVideo360AdvertiserLinkProposalsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesDisplayVideo360AdvertiserLinkProposalsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleAnalyticsAdminV1alphaListDisplayVideo360AdvertiserLinkProposalsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleAnalyticsAdminV1alphaListDisplayVideo360AdvertiserLinkProposalsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a DisplayVideo360AdvertiserLink. This can only be utilized by users who have proper authorization both on the Google Analytics property and on the Display & Video 360 advertiser. Users who do not have access to the Display & Video 360 advertiser should instead seek to create a DisplayVideo360LinkProposal.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesDisplayVideo360AdvertiserLinksCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesDisplayVideo360AdvertiserLinksCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesDisplayVideo360AdvertiserLinksCreateResponse
     */
	public function analyticsadminPropertiesDisplayVideo360AdvertiserLinksCreate(
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesDisplayVideo360AdvertiserLinksCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesDisplayVideo360AdvertiserLinksCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesDisplayVideo360AdvertiserLinksCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1alpha/{parent}/displayVideo360AdvertiserLinks', \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesDisplayVideo360AdvertiserLinksCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googleAnalyticsAdminV1alphaDisplayVideo360AdvertiserLinkInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesDisplayVideo360AdvertiserLinksCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesDisplayVideo360AdvertiserLinksCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleAnalyticsAdminV1alphaDisplayVideo360AdvertiserLink = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleAnalyticsAdminV1alphaDisplayVideo360AdvertiserLink', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists all DisplayVideo360AdvertiserLinks on a property.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesDisplayVideo360AdvertiserLinksListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesDisplayVideo360AdvertiserLinksListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesDisplayVideo360AdvertiserLinksListResponse
     */
	public function analyticsadminPropertiesDisplayVideo360AdvertiserLinksList(
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesDisplayVideo360AdvertiserLinksListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesDisplayVideo360AdvertiserLinksListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesDisplayVideo360AdvertiserLinksListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1alpha/{parent}/displayVideo360AdvertiserLinks', \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesDisplayVideo360AdvertiserLinksListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesDisplayVideo360AdvertiserLinksListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesDisplayVideo360AdvertiserLinksListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleAnalyticsAdminV1alphaListDisplayVideo360AdvertiserLinksResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleAnalyticsAdminV1alphaListDisplayVideo360AdvertiserLinksResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a ExpandedDataSet.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesExpandedDataSetsCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesExpandedDataSetsCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesExpandedDataSetsCreateResponse
     */
	public function analyticsadminPropertiesExpandedDataSetsCreate(
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesExpandedDataSetsCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesExpandedDataSetsCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesExpandedDataSetsCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1alpha/{parent}/expandedDataSets', \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesExpandedDataSetsCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googleAnalyticsAdminV1alphaExpandedDataSetInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesExpandedDataSetsCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesExpandedDataSetsCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleAnalyticsAdminV1alphaExpandedDataSet = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleAnalyticsAdminV1alphaExpandedDataSet', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists ExpandedDataSets on a property.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesExpandedDataSetsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesExpandedDataSetsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesExpandedDataSetsListResponse
     */
	public function analyticsadminPropertiesExpandedDataSetsList(
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesExpandedDataSetsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesExpandedDataSetsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesExpandedDataSetsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1alpha/{parent}/expandedDataSets', \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesExpandedDataSetsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesExpandedDataSetsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesExpandedDataSetsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleAnalyticsAdminV1alphaListExpandedDataSetsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleAnalyticsAdminV1alphaListExpandedDataSetsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Fetches the opt out status for the automated GA4 setup process for a UA property. Note: this has no effect on GA4 property.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesFetchAutomatedGa4ConfigurationOptOutRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesFetchAutomatedGa4ConfigurationOptOutSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesFetchAutomatedGa4ConfigurationOptOutResponse
     */
	public function analyticsadminPropertiesFetchAutomatedGa4ConfigurationOptOut(
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesFetchAutomatedGa4ConfigurationOptOutRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesFetchAutomatedGa4ConfigurationOptOutSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesFetchAutomatedGa4ConfigurationOptOutResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1alpha/properties:fetchAutomatedGa4ConfigurationOptOut');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googleAnalyticsAdminV1alphaFetchAutomatedGa4ConfigurationOptOutRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesFetchAutomatedGa4ConfigurationOptOutRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesFetchAutomatedGa4ConfigurationOptOutResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleAnalyticsAdminV1alphaFetchAutomatedGa4ConfigurationOptOutResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleAnalyticsAdminV1alphaFetchAutomatedGa4ConfigurationOptOutResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a FirebaseLink. Properties can have at most one FirebaseLink.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesFirebaseLinksCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesFirebaseLinksCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesFirebaseLinksCreateResponse
     */
	public function analyticsadminPropertiesFirebaseLinksCreate(
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesFirebaseLinksCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesFirebaseLinksCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesFirebaseLinksCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1alpha/{parent}/firebaseLinks', \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesFirebaseLinksCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googleAnalyticsAdminV1alphaFirebaseLinkInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesFirebaseLinksCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesFirebaseLinksCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleAnalyticsAdminV1alphaFirebaseLink = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleAnalyticsAdminV1alphaFirebaseLink', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists FirebaseLinks on a property. Properties can have at most one FirebaseLink.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesFirebaseLinksListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesFirebaseLinksListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesFirebaseLinksListResponse
     */
	public function analyticsadminPropertiesFirebaseLinksList(
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesFirebaseLinksListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesFirebaseLinksListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesFirebaseLinksListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1alpha/{parent}/firebaseLinks', \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesFirebaseLinksListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesFirebaseLinksListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesFirebaseLinksListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleAnalyticsAdminV1alphaListFirebaseLinksResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleAnalyticsAdminV1alphaListFirebaseLinksResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a GoogleAdsLink.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesGoogleAdsLinksCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesGoogleAdsLinksCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesGoogleAdsLinksCreateResponse
     */
	public function analyticsadminPropertiesGoogleAdsLinksCreate(
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesGoogleAdsLinksCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesGoogleAdsLinksCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesGoogleAdsLinksCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1alpha/{parent}/googleAdsLinks', \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesGoogleAdsLinksCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googleAnalyticsAdminV1alphaGoogleAdsLinkInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesGoogleAdsLinksCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesGoogleAdsLinksCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleAnalyticsAdminV1alphaGoogleAdsLink = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleAnalyticsAdminV1alphaGoogleAdsLink', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists GoogleAdsLinks on a property.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesGoogleAdsLinksListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesGoogleAdsLinksListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesGoogleAdsLinksListResponse
     */
	public function analyticsadminPropertiesGoogleAdsLinksList(
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesGoogleAdsLinksListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesGoogleAdsLinksListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesGoogleAdsLinksListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1alpha/{parent}/googleAdsLinks', \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesGoogleAdsLinksListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesGoogleAdsLinksListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesGoogleAdsLinksListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleAnalyticsAdminV1alphaListGoogleAdsLinksResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleAnalyticsAdminV1alphaListGoogleAdsLinksResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns child Properties under the specified parent Account. Only "GA4" properties will be returned. Properties will be excluded if the caller does not have access. Soft-deleted (ie: "trashed") properties are excluded by default. Returns an empty list if no relevant properties are found.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesListResponse
     */
	public function analyticsadminPropertiesList(
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1alpha/properties');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleAnalyticsAdminV1alphaListPropertiesResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleAnalyticsAdminV1alphaListPropertiesResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists the connected site tags for a Universal Analytics property. A maximum of 20 connected site tags will be returned. Note: this has no effect on GA4 property.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesListConnectedSiteTagsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesListConnectedSiteTagsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesListConnectedSiteTagsResponse
     */
	public function analyticsadminPropertiesListConnectedSiteTags(
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesListConnectedSiteTagsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesListConnectedSiteTagsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesListConnectedSiteTagsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1alpha/properties:listConnectedSiteTags');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googleAnalyticsAdminV1alphaListConnectedSiteTagsRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesListConnectedSiteTagsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesListConnectedSiteTagsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleAnalyticsAdminV1alphaListConnectedSiteTagsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleAnalyticsAdminV1alphaListConnectedSiteTagsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns a customized report of data access records. The report provides records of each time a user reads Google Analytics reporting data. Access records are retained for up to 2 years. Data Access Reports can be requested for a property. The property must be in Google Analytics 360. This method is only available to Administrators. These data access records include GA4 UI Reporting, GA4 UI Explorations, GA4 Data API, and other products like Firebase & Admob that can retrieve data from Google Analytics through a linkage. These records don't include property configuration changes like adding a stream or changing a property's time zone. For configuration change history, see [searchChangeHistoryEvents](https://developers.google.com/analytics/devguides/config/admin/v1/rest/v1alpha/accounts/searchChangeHistoryEvents).
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesRunAccessReportRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesRunAccessReportSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesRunAccessReportResponse
     */
	public function analyticsadminPropertiesRunAccessReport(
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesRunAccessReportRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesRunAccessReportSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesRunAccessReportResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1alpha/{entity}:runAccessReport', \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesRunAccessReportRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googleAnalyticsAdminV1alphaRunAccessReportRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesRunAccessReportRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesRunAccessReportResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleAnalyticsAdminV1alphaRunAccessReportResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleAnalyticsAdminV1alphaRunAccessReportResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a SearchAds360Link.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesSearchAds360LinksCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesSearchAds360LinksCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesSearchAds360LinksCreateResponse
     */
	public function analyticsadminPropertiesSearchAds360LinksCreate(
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesSearchAds360LinksCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesSearchAds360LinksCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesSearchAds360LinksCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1alpha/{parent}/searchAds360Links', \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesSearchAds360LinksCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googleAnalyticsAdminV1alphaSearchAds360LinkInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesSearchAds360LinksCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesSearchAds360LinksCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleAnalyticsAdminV1alphaSearchAds360Link = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleAnalyticsAdminV1alphaSearchAds360Link', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists all SearchAds360Links on a property.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesSearchAds360LinksListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesSearchAds360LinksListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesSearchAds360LinksListResponse
     */
	public function analyticsadminPropertiesSearchAds360LinksList(
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesSearchAds360LinksListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesSearchAds360LinksListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesSearchAds360LinksListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1alpha/{parent}/searchAds360Links', \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesSearchAds360LinksListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesSearchAds360LinksListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesSearchAds360LinksListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleAnalyticsAdminV1alphaListSearchAds360LinksResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleAnalyticsAdminV1alphaListSearchAds360LinksResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Sets the opt out status for the automated GA4 setup process for a UA property. Note: this has no effect on GA4 property.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesSetAutomatedGa4ConfigurationOptOutRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesSetAutomatedGa4ConfigurationOptOutSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesSetAutomatedGa4ConfigurationOptOutResponse
     */
	public function analyticsadminPropertiesSetAutomatedGa4ConfigurationOptOut(
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesSetAutomatedGa4ConfigurationOptOutRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesSetAutomatedGa4ConfigurationOptOutSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesSetAutomatedGa4ConfigurationOptOutResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1alpha/properties:setAutomatedGa4ConfigurationOptOut');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googleAnalyticsAdminV1alphaSetAutomatedGa4ConfigurationOptOutRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesSetAutomatedGa4ConfigurationOptOutRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesSetAutomatedGa4ConfigurationOptOutResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleAnalyticsAdminV1alphaSetAutomatedGa4ConfigurationOptOutResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists all user links on an account or property, including implicit ones that come from effective permissions granted by groups or organization admin roles. If a returned user link does not have direct permissions, they cannot be removed from the account or property directly with the DeleteUserLink command. They have to be removed from the group/etc that gives them permissions, which is currently only usable/discoverable in the GA or GMP UIs.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesUserLinksAuditRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesUserLinksAuditSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesUserLinksAuditResponse
     */
	public function analyticsadminPropertiesUserLinksAudit(
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesUserLinksAuditRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesUserLinksAuditSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesUserLinksAuditResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1alpha/{parent}/userLinks:audit', \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesUserLinksAuditRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googleAnalyticsAdminV1alphaAuditUserLinksRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesUserLinksAuditRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesUserLinksAuditResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleAnalyticsAdminV1alphaAuditUserLinksResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleAnalyticsAdminV1alphaAuditUserLinksResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates information about multiple users' links to an account or property. This method is transactional. If any UserLink cannot be created, none of the UserLinks will be created.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesUserLinksBatchCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesUserLinksBatchCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesUserLinksBatchCreateResponse
     */
	public function analyticsadminPropertiesUserLinksBatchCreate(
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesUserLinksBatchCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesUserLinksBatchCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesUserLinksBatchCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1alpha/{parent}/userLinks:batchCreate', \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesUserLinksBatchCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googleAnalyticsAdminV1alphaBatchCreateUserLinksRequestInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesUserLinksBatchCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesUserLinksBatchCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleAnalyticsAdminV1alphaBatchCreateUserLinksResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleAnalyticsAdminV1alphaBatchCreateUserLinksResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Deletes information about multiple users' links to an account or property.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesUserLinksBatchDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesUserLinksBatchDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesUserLinksBatchDeleteResponse
     */
	public function analyticsadminPropertiesUserLinksBatchDelete(
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesUserLinksBatchDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesUserLinksBatchDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesUserLinksBatchDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1alpha/{parent}/userLinks:batchDelete', \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesUserLinksBatchDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googleAnalyticsAdminV1alphaBatchDeleteUserLinksRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesUserLinksBatchDeleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesUserLinksBatchDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleProtobufEmpty = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets information about multiple users' links to an account or property.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesUserLinksBatchGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesUserLinksBatchGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesUserLinksBatchGetResponse
     */
	public function analyticsadminPropertiesUserLinksBatchGet(
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesUserLinksBatchGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesUserLinksBatchGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesUserLinksBatchGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1alpha/{parent}/userLinks:batchGet', \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesUserLinksBatchGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesUserLinksBatchGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesUserLinksBatchGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleAnalyticsAdminV1alphaBatchGetUserLinksResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleAnalyticsAdminV1alphaBatchGetUserLinksResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates information about multiple users' links to an account or property.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesUserLinksBatchUpdateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesUserLinksBatchUpdateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesUserLinksBatchUpdateResponse
     */
	public function analyticsadminPropertiesUserLinksBatchUpdate(
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesUserLinksBatchUpdateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesUserLinksBatchUpdateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesUserLinksBatchUpdateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1alpha/{parent}/userLinks:batchUpdate', \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesUserLinksBatchUpdateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googleAnalyticsAdminV1alphaBatchUpdateUserLinksRequestInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesUserLinksBatchUpdateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesUserLinksBatchUpdateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleAnalyticsAdminV1alphaBatchUpdateUserLinksResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleAnalyticsAdminV1alphaBatchUpdateUserLinksResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a user link on an account or property. If the user with the specified email already has permissions on the account or property, then the user's existing permissions will be unioned with the permissions specified in the new UserLink.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesUserLinksCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesUserLinksCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesUserLinksCreateResponse
     */
	public function analyticsadminPropertiesUserLinksCreate(
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesUserLinksCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesUserLinksCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesUserLinksCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1alpha/{parent}/userLinks', \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesUserLinksCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googleAnalyticsAdminV1alphaUserLinkInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesUserLinksCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesUserLinksCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleAnalyticsAdminV1alphaUserLink = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleAnalyticsAdminV1alphaUserLink', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Deletes a user link on an account or property.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesUserLinksDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesUserLinksDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesUserLinksDeleteResponse
     */
	public function analyticsadminPropertiesUserLinksDelete(
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesUserLinksDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesUserLinksDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesUserLinksDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1alpha/{name}', \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesUserLinksDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesUserLinksDeleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesUserLinksDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleProtobufEmpty = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets information about a user's link to an account or property.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesUserLinksGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesUserLinksGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesUserLinksGetResponse
     */
	public function analyticsadminPropertiesUserLinksGet(
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesUserLinksGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesUserLinksGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesUserLinksGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1alpha/{name}', \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesUserLinksGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesUserLinksGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesUserLinksGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleAnalyticsAdminV1alphaUserLink = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleAnalyticsAdminV1alphaUserLink', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists all user links on an account or property.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesUserLinksListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesUserLinksListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesUserLinksListResponse
     */
	public function analyticsadminPropertiesUserLinksList(
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesUserLinksListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesUserLinksListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesUserLinksListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1alpha/{parent}/userLinks', \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesUserLinksListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesUserLinksListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesUserLinksListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleAnalyticsAdminV1alphaListUserLinksResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleAnalyticsAdminV1alphaListUserLinksResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates a user link on an account or property.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesUserLinksPatchRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesUserLinksPatchSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesUserLinksPatchResponse
     */
	public function analyticsadminPropertiesUserLinksPatch(
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesUserLinksPatchRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesUserLinksPatchSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesUserLinksPatchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1alpha/{name}', \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesUserLinksPatchRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googleAnalyticsAdminV1alphaUserLinkInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesUserLinksPatchRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AnalyticsadminPropertiesUserLinksPatchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleAnalyticsAdminV1alphaUserLink = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleAnalyticsAdminV1alphaUserLink', 'json');
            }
        }

        return $response;
    }
}