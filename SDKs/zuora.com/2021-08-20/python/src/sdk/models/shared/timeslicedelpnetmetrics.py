"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from datetime import date
from enum import Enum
from marshmallow import fields
from sdk import utils
from typing import Optional

class TimeSlicedElpNetMetricsGeneratedReasonEnum(str, Enum):
    r"""Specify the reason why the metrics are generated by the certain order action."""
    INCREASE_QUANTITY = 'IncreaseQuantity'
    DECREASE_QUANTITY = 'DecreaseQuantity'
    CHANGE_PRICE = 'ChangePrice'
    EXTENSION = 'Extension'
    CONTRACTION = 'Contraction'

class TimeSlicedElpNetMetricsTypeEnum(str, Enum):
    r"""The type for ELP is always \\"Regular\\"."""
    REGULAR = 'Regular'
    DISCOUNT = 'Discount'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class TimeSlicedElpNetMetrics:
    
    amount: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('amount'), 'exclude': lambda f: f is None }})
    r"""The extended list price which is calculated by the original product catalog list price multiplied by the delta quantity."""  
    end_date: Optional[date] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('endDate'), 'encoder': utils.dateisoformat(True), 'decoder': utils.datefromisoformat, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""The latest date that the metric applies."""  
    generated_reason: Optional[TimeSlicedElpNetMetricsGeneratedReasonEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('generatedReason'), 'exclude': lambda f: f is None }})
    r"""Specify the reason why the metrics are generated by the certain order action."""  
    invoice_owner: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('invoiceOwner'), 'exclude': lambda f: f is None }})
    r"""The acount number of the billing account that is billed for the subscription."""  
    order_item_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('orderItemId'), 'exclude': lambda f: f is None }})
    r"""The ID of the order item referenced by the order metrics."""  
    start_date: Optional[date] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('startDate'), 'encoder': utils.dateisoformat(True), 'decoder': utils.datefromisoformat, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""The earliest date that the metric applies."""  
    subscription_owner: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('subscriptionOwner'), 'exclude': lambda f: f is None }})
    r"""The acount number of the billing account that owns the subscription."""  
    tax: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tax'), 'exclude': lambda f: f is None }})
    r"""The tax amount in the metric when the tax permission is enabled."""  
    term_number: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('termNumber'), 'exclude': lambda f: f is None }})  
    type: Optional[TimeSlicedElpNetMetricsTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})
    r"""The type for ELP is always \\"Regular\\"."""  
    