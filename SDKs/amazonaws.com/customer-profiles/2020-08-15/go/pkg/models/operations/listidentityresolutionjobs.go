// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"net/http"
	"openapi/pkg/models/shared"
)

type ListIdentityResolutionJobsPathParams struct {
	// The unique name of the domain.
	DomainName string `pathParam:"style=simple,explode=false,name=DomainName"`
}

type ListIdentityResolutionJobsQueryParams struct {
	// The maximum number of results to return per page.
	MaxResults *int64 `queryParam:"style=form,explode=true,name=max-results"`
	// The token for the next set of results. Use the value returned in the previous response in the next request to retrieve the next set of results.
	NextToken *string `queryParam:"style=form,explode=true,name=next-token"`
}

type ListIdentityResolutionJobsHeaders struct {
	XAmzAlgorithm     *string `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
}

type ListIdentityResolutionJobsRequest struct {
	PathParams  ListIdentityResolutionJobsPathParams
	QueryParams ListIdentityResolutionJobsQueryParams
	Headers     ListIdentityResolutionJobsHeaders
}

type ListIdentityResolutionJobsResponse struct {
	// AccessDeniedException
	AccessDeniedException interface{}
	// BadRequestException
	BadRequestException interface{}
	ContentType         string
	// InternalServerException
	InternalServerException interface{}
	// Success
	ListIdentityResolutionJobsResponse *shared.ListIdentityResolutionJobsResponse
	StatusCode                         int
	RawResponse                        *http.Response
	// ResourceNotFoundException
	ResourceNotFoundException interface{}
	// ThrottlingException
	ThrottlingException interface{}
}
