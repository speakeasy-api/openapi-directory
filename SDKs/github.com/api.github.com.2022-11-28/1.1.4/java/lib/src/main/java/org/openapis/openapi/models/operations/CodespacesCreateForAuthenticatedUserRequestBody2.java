/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

public class CodespacesCreateForAuthenticatedUserRequestBody2 {
    /**
     * Path to devcontainer.json config to use for this codespace
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("devcontainer_path")
    public String devcontainerPath;
    public CodespacesCreateForAuthenticatedUserRequestBody2 withDevcontainerPath(String devcontainerPath) {
        this.devcontainerPath = devcontainerPath;
        return this;
    }
    
    /**
     * Time in minutes before codespace stops from inactivity
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("idle_timeout_minutes")
    public Long idleTimeoutMinutes;
    public CodespacesCreateForAuthenticatedUserRequestBody2 withIdleTimeoutMinutes(Long idleTimeoutMinutes) {
        this.idleTimeoutMinutes = idleTimeoutMinutes;
        return this;
    }
    
    /**
     * Location for this codespace. Assigned by IP if not provided
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("location")
    public String location;
    public CodespacesCreateForAuthenticatedUserRequestBody2 withLocation(String location) {
        this.location = location;
        return this;
    }
    
    /**
     * Machine type to use for this codespace
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("machine")
    public String machine;
    public CodespacesCreateForAuthenticatedUserRequestBody2 withMachine(String machine) {
        this.machine = machine;
        return this;
    }
    
    /**
     * Pull request number for this codespace
     */
    @JsonProperty("pull_request")
    public CodespacesCreateForAuthenticatedUserRequestBody2PullRequest pullRequest;
    public CodespacesCreateForAuthenticatedUserRequestBody2 withPullRequest(CodespacesCreateForAuthenticatedUserRequestBody2PullRequest pullRequest) {
        this.pullRequest = pullRequest;
        return this;
    }
    
    /**
     * Working directory for this codespace
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("working_directory")
    public String workingDirectory;
    public CodespacesCreateForAuthenticatedUserRequestBody2 withWorkingDirectory(String workingDirectory) {
        this.workingDirectory = workingDirectory;
        return this;
    }
    
}
