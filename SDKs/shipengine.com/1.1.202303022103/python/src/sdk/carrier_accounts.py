"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Any, Optional

class CarrierAccounts:
    r"""carrier accounts"""
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def connect_carrier(self, request: operations.ConnectCarrierRequest) -> operations.ConnectCarrierResponse:
        r"""Connect a carrier account
        Connect a carrier account
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.ConnectCarrierRequest, base_url, '/v1/connections/carriers/{carrier_name}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ConnectCarrierResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ConnectCarrierResponseBody])
                res.connect_carrier_response_body = out
        elif http_res.status_code in [400, 404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorResponseBody])
                res.error_response_body = out

        return res

    def disconnect_carrier(self, request: operations.DisconnectCarrierRequest) -> operations.DisconnectCarrierResponse:
        r"""Disconnect a carrier
        Disconnect a carrier
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.DisconnectCarrierRequest, base_url, '/v1/connections/carriers/{carrier_name}/{carrier_id}', request)
        
        
        client = self._security_client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DisconnectCarrierResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 204:
            if utils.match_content_type(content_type, 'application/json'):
                res.empty_response_body = http_res.content
            if utils.match_content_type(content_type, 'text/plain'):
                res.empty_response_body = http_res.content
        elif http_res.status_code in [404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorResponseBody])
                res.error_response_body = out

        return res

    def get_carrier_settings(self, request: operations.GetCarrierSettingsRequest) -> operations.GetCarrierSettingsResponse:
        r"""Get carrier settings
        Get carrier settings
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetCarrierSettingsRequest, base_url, '/v1/connections/carriers/{carrier_name}/{carrier_id}/settings', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetCarrierSettingsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[Any])
                res.get_carrier_settings_response_body = out
        elif http_res.status_code in [404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorResponseBody])
                res.error_response_body = out

        return res

    def update_carrier_settings(self, request: operations.UpdateCarrierSettingsRequest) -> operations.UpdateCarrierSettingsResponse:
        r"""Update carrier settings
        Update carrier settings
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.UpdateCarrierSettingsRequest, base_url, '/v1/connections/carriers/{carrier_name}/{carrier_id}/settings', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateCarrierSettingsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 204:
            if utils.match_content_type(content_type, 'application/json'):
                res.empty_response_body = http_res.content
            if utils.match_content_type(content_type, 'text/plain'):
                res.empty_response_body = http_res.content
        elif http_res.status_code in [404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorResponseBody])
                res.error_response_body = out

        return res

    