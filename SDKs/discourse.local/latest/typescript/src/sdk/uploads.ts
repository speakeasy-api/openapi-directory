/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class Uploads {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Abort multipart upload
   *
   * @remarks
   * This endpoint aborts the multipart upload initiated with /create-multipart.
   * This should be used when cancelling the upload. It does not matter if parts
   * were already uploaded into the external storage provider.
   *
   * You must have the correct permissions and CORS settings configured in your
   * external provider. We support AWS S3 as the default. See:
   *
   * https://meta.discourse.org/t/-/210469#s3-multipart-direct-uploads-4.
   *
   * An external file store must be set up and `enable_direct_s3_uploads` must
   * be set to true for this endpoint to function.
   *
   *
   */
  abortMultipart(
    req: operations.AbortMultipartRequestBody,
    config?: AxiosRequestConfig
  ): Promise<operations.AbortMultipartResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AbortMultipartRequestBody(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/uploads/abort-multipart.json";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AbortMultipartResponse =
        new operations.AbortMultipartResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.abortMultipart200ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.AbortMultipart200ApplicationJSON
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Generates batches of presigned URLs for multipart parts
   *
   * @remarks
   * Multipart uploads are uploaded in chunks or parts to individual presigned
   * URLs, similar to the one generated by /generate-presigned-put. The part
   * numbers provided must be between 1 and 10000. The total number of parts
   * will depend on the chunk size in bytes that you intend to use to upload
   * each chunk. For example a 12MB file may have 2 5MB chunks and a final
   * 2MB chunk, for part numbers 1, 2, and 3.
   *
   * This endpoint will return a presigned URL for each part number provided,
   * which you can then use to send PUT requests for the binary chunk corresponding
   * to that part. When the part is uploaded, the provider should return an
   * ETag for the part, and this should be stored along with the part number,
   * because this is needed to complete the multipart upload.
   *
   * You must have the correct permissions and CORS settings configured in your
   * external provider. We support AWS S3 as the default. See:
   *
   * https://meta.discourse.org/t/-/210469#s3-multipart-direct-uploads-4.
   *
   * An external file store must be set up and `enable_direct_s3_uploads` must
   * be set to true for this endpoint to function.
   *
   *
   */
  batchPresignMultipartParts(
    req: operations.BatchPresignMultipartPartsRequestBody,
    config?: AxiosRequestConfig
  ): Promise<operations.BatchPresignMultipartPartsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.BatchPresignMultipartPartsRequestBody(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") +
      "/uploads/batch-presign-multipart-parts.json";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.BatchPresignMultipartPartsResponse =
        new operations.BatchPresignMultipartPartsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.batchPresignMultipartParts200ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.BatchPresignMultipartParts200ApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Completes a direct external upload
   *
   * @remarks
   * Completes an external upload initialized with /get-presigned-put. The
   * file will be moved from its temporary location in external storage to
   * a final destination in the S3 bucket. An Upload record will also be
   * created in the database in most cases.
   *
   * If a sha1-checksum was provided in the initial request it will also
   * be compared with the uploaded file in storage to make sure the same
   * file was uploaded. The file size will be compared for the same reason.
   *
   * You must have the correct permissions and CORS settings configured in your
   * external provider. We support AWS S3 as the default. See:
   *
   * https://meta.discourse.org/t/-/210469#s3-multipart-direct-uploads-4.
   *
   * An external file store must be set up and `enable_direct_s3_uploads` must
   * be set to true for this endpoint to function.
   *
   *
   */
  completeExternalUpload(
    req: operations.CompleteExternalUploadRequestBody,
    config?: AxiosRequestConfig
  ): Promise<operations.CompleteExternalUploadResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.CompleteExternalUploadRequestBody(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/uploads/complete-external-upload.json";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.CompleteExternalUploadResponse =
        new operations.CompleteExternalUploadResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.completeExternalUpload200ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.CompleteExternalUpload200ApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Complete multipart upload
   *
   * @remarks
   * Completes the multipart upload in the external store, and copies the
   * file from its temporary location to its final location in the store.
   * All of the parts must have been uploaded to the external storage provider.
   * An Upload record will be completed in most cases once the file is copied
   * to its final location.
   *
   * You must have the correct permissions and CORS settings configured in your
   * external provider. We support AWS S3 as the default. See:
   *
   * https://meta.discourse.org/t/-/210469#s3-multipart-direct-uploads-4.
   *
   * An external file store must be set up and `enable_direct_s3_uploads` must
   * be set to true for this endpoint to function.
   *
   *
   */
  completeMultipart(
    req: operations.CompleteMultipartRequestBody,
    config?: AxiosRequestConfig
  ): Promise<operations.CompleteMultipartResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.CompleteMultipartRequestBody(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/uploads/complete-multipart.json";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.CompleteMultipartResponse =
        new operations.CompleteMultipartResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.completeMultipart200ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.CompleteMultipart200ApplicationJSON
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Creates a multipart external upload
   *
   * @remarks
   * Creates a multipart upload in the external storage provider, storing
   * a temporary reference to the external upload similar to /get-presigned-put.
   *
   * You must have the correct permissions and CORS settings configured in your
   * external provider. We support AWS S3 as the default. See:
   *
   * https://meta.discourse.org/t/-/210469#s3-multipart-direct-uploads-4.
   *
   * An external file store must be set up and `enable_direct_s3_uploads` must
   * be set to true for this endpoint to function.
   *
   *
   */
  createMultipartUpload(
    req: operations.CreateMultipartUploadRequestBody,
    config?: AxiosRequestConfig
  ): Promise<operations.CreateMultipartUploadResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.CreateMultipartUploadRequestBody(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/uploads/create-multipart.json";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.CreateMultipartUploadResponse =
        new operations.CreateMultipartUploadResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.createMultipartUpload200ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.CreateMultipartUpload200ApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Creates an upload
   */
  createUpload(
    req: operations.CreateUploadRequestBody,
    config?: AxiosRequestConfig
  ): Promise<operations.CreateUploadResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.CreateUploadRequestBody(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/uploads.json";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "multipart"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.CreateUploadResponse =
        new operations.CreateUploadResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.createUpload200ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.CreateUpload200ApplicationJSON
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Initiates a direct external upload
   *
   * @remarks
   * Direct external uploads bypass the usual method of creating uploads
   * via the POST /uploads route, and upload directly to an external provider,
   * which by default is S3. This route begins the process, and will return
   * a unique identifier for the external upload as well as a presigned URL
   * which is where the file binary blob should be uploaded to.
   *
   * Once the upload is complete to the external service, you must call the
   * POST /complete-external-upload route using the unique identifier returned
   * by this route, which will create any required Upload record in the Discourse
   * database and also move file from its temporary location to the final
   * destination in the external storage service.
   *
   * You must have the correct permissions and CORS settings configured in your
   * external provider. We support AWS S3 as the default. See:
   *
   * https://meta.discourse.org/t/-/210469#s3-multipart-direct-uploads-4.
   *
   * An external file store must be set up and `enable_direct_s3_uploads` must
   * be set to true for this endpoint to function.
   *
   *
   */
  generatePresignedPut(
    req: operations.GeneratePresignedPutRequestBody,
    config?: AxiosRequestConfig
  ): Promise<operations.GeneratePresignedPutResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GeneratePresignedPutRequestBody(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/uploads/generate-presigned-put.json";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GeneratePresignedPutResponse =
        new operations.GeneratePresignedPutResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.generatePresignedPut200ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.GeneratePresignedPut200ApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }
}
