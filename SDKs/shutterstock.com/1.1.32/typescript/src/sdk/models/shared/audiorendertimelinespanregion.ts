/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { Expose, Type } from "class-transformer";

/**
 * The type of event
 */
export enum AudioRenderTimelineSpanRegionEndTypeEventEnum {
  Ending = "ending",
  Transition = "transition",
}

/**
 * The specific action to perform; if the event type is "ending" then this must be "ringout" and if event type is "transition" this must be "cut"
 */
export enum AudioRenderTimelineSpanRegionEndTypeTypeEnum {
  Ringout = "ringout",
  Cut = "cut",
}

/**
 * A high-level description of how a region ends
 */
export class AudioRenderTimelineSpanRegionEndType extends SpeakeasyBase {
  /**
   * The beat, relative to the start of the active region, at which the end_type begins; in other words, the ending starts on this beat of the region
   */
  @SpeakeasyMetadata()
  @Expose({ name: "beat" })
  beat: number;

  /**
   * The type of event
   */
  @SpeakeasyMetadata()
  @Expose({ name: "event" })
  event: AudioRenderTimelineSpanRegionEndTypeEventEnum;

  /**
   * The specific action to perform; if the event type is "ending" then this must be "ringout" and if event type is "transition" this must be "cut"
   */
  @SpeakeasyMetadata()
  @Expose({ name: "type" })
  type: AudioRenderTimelineSpanRegionEndTypeTypeEnum;
}

/**
 * A text representation of the accidental; if this field is specified, the tonic_note field should also be specified
 */
export enum AudioRenderTimelineSpanRegionKeyTonicAccidentalEnum {
  DoubleFlat = "double flat",
  Flat = "flat",
  Natural = "natural",
  Sharp = "sharp",
  DoubleSharp = "double sharp",
}

/**
 * A text representation of the musical note; if this field is specified, the tonic_accidental field should also be specified
 */
export enum AudioRenderTimelineSpanRegionKeyTonicNoteEnum {
  C = "c",
  D = "d",
  E = "e",
  F = "f",
  G = "g",
  A = "a",
  B = "b",
}

/**
 * The scale quality; if this field is not specified, the API selects the quality automatically
 */
export enum AudioRenderTimelineSpanRegionKeyTonicQualityEnum {
  Major = "major",
  NaturalMinor = "natural_minor",
  HarmonicMinor = "harmonic_minor",
  MelodicMinor = "melodic_minor",
  Ionian = "ionian",
  Dorian = "dorian",
  Phrygian = "phrygian",
  Lydian = "lydian",
  Mixolydian = "mixolydian",
  Aeolian = "aeolian",
  Locrian = "locrian",
}

/**
 * The key signature active at the beginning of the region
 */
export class AudioRenderTimelineSpanRegionKey extends SpeakeasyBase {
  /**
   * A text representation of the accidental; if this field is specified, the tonic_note field should also be specified
   */
  @SpeakeasyMetadata()
  @Expose({ name: "tonic_accidental" })
  tonicAccidental?: AudioRenderTimelineSpanRegionKeyTonicAccidentalEnum;

  /**
   * A text representation of the musical note; if this field is specified, the tonic_accidental field should also be specified
   */
  @SpeakeasyMetadata()
  @Expose({ name: "tonic_note" })
  tonicNote?: AudioRenderTimelineSpanRegionKeyTonicNoteEnum;

  /**
   * The scale quality; if this field is not specified, the API selects the quality automatically
   */
  @SpeakeasyMetadata()
  @Expose({ name: "tonic_quality" })
  tonicQuality?: AudioRenderTimelineSpanRegionKeyTonicQualityEnum;
}

/**
 * The type of region
 */
export enum AudioRenderTimelineSpanRegionRegionEnum {
  Music = "music",
  Silence = "silence",
}

/**
 * A period of music or silence, measured in beats
 */
export class AudioRenderTimelineSpanRegion extends SpeakeasyBase {
  /**
   * The beat, relative to the span, at which the region object's music begins
   */
  @SpeakeasyMetadata()
  @Expose({ name: "beat" })
  beat: number;

  /**
   * The descriptor ID needed to compose the music
   */
  @SpeakeasyMetadata()
  @Expose({ name: "descriptor" })
  descriptor: string;

  /**
   * A high-level description of how a region ends
   */
  @SpeakeasyMetadata()
  @Expose({ name: "end_type" })
  @Type(() => AudioRenderTimelineSpanRegionEndType)
  endType?: AudioRenderTimelineSpanRegionEndType;

  /**
   * An identifier which must be unique within the parent span
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id: number;

  /**
   * The key signature active at the beginning of the region
   */
  @SpeakeasyMetadata()
  @Expose({ name: "key" })
  @Type(() => AudioRenderTimelineSpanRegionKey)
  key?: AudioRenderTimelineSpanRegionKey;

  /**
   * The type of region
   */
  @SpeakeasyMetadata()
  @Expose({ name: "region" })
  region: AudioRenderTimelineSpanRegionRegionEnum;
}
