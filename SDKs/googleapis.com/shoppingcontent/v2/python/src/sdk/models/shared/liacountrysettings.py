"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import liaaboutpagesettings as shared_liaaboutpagesettings
from ..shared import liainventorysettings as shared_liainventorysettings
from ..shared import liaondisplaytoordersettings as shared_liaondisplaytoordersettings
from ..shared import liaposdataprovider as shared_liaposdataprovider
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class LiaCountrySettings:
    
    about: Optional[shared_liaaboutpagesettings.LiaAboutPageSettings] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('about'), 'exclude': lambda f: f is None }})  
    country: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('country'), 'exclude': lambda f: f is None }})
    r"""Required. CLDR country code (e.g. \\"US\\")."""  
    hosted_local_storefront_active: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('hostedLocalStorefrontActive'), 'exclude': lambda f: f is None }})
    r"""The status of the \\"Merchant hosted local storefront\\" feature."""  
    inventory: Optional[shared_liainventorysettings.LiaInventorySettings] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('inventory'), 'exclude': lambda f: f is None }})  
    on_display_to_order: Optional[shared_liaondisplaytoordersettings.LiaOnDisplayToOrderSettings] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('onDisplayToOrder'), 'exclude': lambda f: f is None }})  
    pos_data_provider: Optional[shared_liaposdataprovider.LiaPosDataProvider] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('posDataProvider'), 'exclude': lambda f: f is None }})  
    store_pickup_active: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('storePickupActive'), 'exclude': lambda f: f is None }})
    r"""The status of the \\"Store pickup\\" feature."""  
    