// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// LayoutTextSegmentTypeEnum - The type of the text_segment in document.
type LayoutTextSegmentTypeEnum string

const (
	LayoutTextSegmentTypeEnumTextSegmentTypeUnspecified LayoutTextSegmentTypeEnum = "TEXT_SEGMENT_TYPE_UNSPECIFIED"
	LayoutTextSegmentTypeEnumToken                      LayoutTextSegmentTypeEnum = "TOKEN"
	LayoutTextSegmentTypeEnumParagraph                  LayoutTextSegmentTypeEnum = "PARAGRAPH"
	LayoutTextSegmentTypeEnumFormField                  LayoutTextSegmentTypeEnum = "FORM_FIELD"
	LayoutTextSegmentTypeEnumFormFieldName              LayoutTextSegmentTypeEnum = "FORM_FIELD_NAME"
	LayoutTextSegmentTypeEnumFormFieldContents          LayoutTextSegmentTypeEnum = "FORM_FIELD_CONTENTS"
	LayoutTextSegmentTypeEnumTable                      LayoutTextSegmentTypeEnum = "TABLE"
	LayoutTextSegmentTypeEnumTableHeader                LayoutTextSegmentTypeEnum = "TABLE_HEADER"
	LayoutTextSegmentTypeEnumTableRow                   LayoutTextSegmentTypeEnum = "TABLE_ROW"
	LayoutTextSegmentTypeEnumTableCell                  LayoutTextSegmentTypeEnum = "TABLE_CELL"
)

func (e LayoutTextSegmentTypeEnum) ToPointer() *LayoutTextSegmentTypeEnum {
	return &e
}

func (e *LayoutTextSegmentTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "TEXT_SEGMENT_TYPE_UNSPECIFIED":
		fallthrough
	case "TOKEN":
		fallthrough
	case "PARAGRAPH":
		fallthrough
	case "FORM_FIELD":
		fallthrough
	case "FORM_FIELD_NAME":
		fallthrough
	case "FORM_FIELD_CONTENTS":
		fallthrough
	case "TABLE":
		fallthrough
	case "TABLE_HEADER":
		fallthrough
	case "TABLE_ROW":
		fallthrough
	case "TABLE_CELL":
		*e = LayoutTextSegmentTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for LayoutTextSegmentTypeEnum: %v", v)
	}
}

// Layout - Describes the layout information of a text_segment in the document.
type Layout struct {
	// A bounding polygon of a detected object on a plane. On output both vertices and normalized_vertices are provided. The polygon is formed by connecting vertices in the order they are listed.
	BoundingPoly *BoundingPoly `json:"boundingPoly,omitempty"`
	// Page number of the text_segment in the original document, starts from 1.
	PageNumber *int `json:"pageNumber,omitempty"`
	// A contiguous part of a text (string), assuming it has an UTF-8 NFC encoding.
	TextSegment *TextSegment `json:"textSegment,omitempty"`
	// The type of the text_segment in document.
	TextSegmentType *LayoutTextSegmentTypeEnum `json:"textSegmentType,omitempty"`
}
