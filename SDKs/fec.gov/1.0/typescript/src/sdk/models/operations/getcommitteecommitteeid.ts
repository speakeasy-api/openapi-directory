/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";

export enum GetCommitteeCommitteeIdCommitteeTypeEnum {
  Unknown = "",
  C = "C",
  D = "D",
  E = "E",
  H = "H",
  I = "I",
  N = "N",
  O = "O",
  P = "P",
  Q = "Q",
  S = "S",
  U = "U",
  V = "V",
  W = "W",
  X = "X",
  Y = "Y",
  Z = "Z",
}

export enum GetCommitteeCommitteeIdDesignationEnum {
  Unknown = "",
  A = "A",
  J = "J",
  P = "P",
  U = "U",
  B = "B",
  D = "D",
}

export enum GetCommitteeCommitteeIdFilingFrequencyEnum {
  Unknown = "",
  A = "A",
  M = "M",
  N = "N",
  Q = "Q",
  T = "T",
  W = "W",
  MinusA = "-A",
  MinusT = "-T",
}

export enum GetCommitteeCommitteeIdOrganizationTypeEnum {
  Unknown = "",
  C = "C",
  L = "L",
  M = "M",
  T = "T",
  V = "V",
  W = "W",
}

export class GetCommitteeCommitteeIdRequest extends SpeakeasyBase {
  /**
   *
   * @remarks
   * API key for https://api.data.gov. Get one at https://api.data.gov/signup.
   *
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=api_key",
  })
  apiKey: string;

  /**
   *
   * @remarks
   * A unique identifier assigned to each committee or filer registered with the FEC. In general committee id's begin with the letter C which is followed by eight digits.
   *
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=committee_id",
  })
  committeeId: string;

  /**
   * The one-letter type code of the organization:
   *
   * @remarks
   *         - C communication cost
   *         - D delegate
   *         - E electioneering communication
   *         - H House
   *         - I independent expenditure filer (not a committee)
   *         - N PAC - nonqualified
   *         - O independent expenditure-only (super PACs)
   *         - P presidential
   *         - Q PAC - qualified
   *         - S Senate
   *         - U single candidate independent expenditure
   *         - V PAC with non-contribution account, nonqualified
   *         - W PAC with non-contribution account, qualified
   *         - X party, nonqualified
   *         - Y party, qualified
   *         - Z national party non-federal account
   *
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=committee_type",
  })
  committeeType?: GetCommitteeCommitteeIdCommitteeTypeEnum[];

  /**
   *
   * @remarks
   * A two year election cycle that the committee was active- (after original registration
   * date but before expiration date in Form 1s) The cycle begins with
   * an odd year and is named for its ending, even year.
   *
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=cycle" })
  cycle?: number[];

  /**
   * The one-letter designation code of the organization:
   *
   * @remarks
   *          - A authorized by a candidate
   *          - J joint fundraising committee
   *          - P principal campaign committee of a candidate
   *          - U unauthorized
   *          - B lobbyist/registrant PAC
   *          - D leadership PAC
   *
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=designation",
  })
  designation?: GetCommitteeCommitteeIdDesignationEnum[];

  /**
   * The one-letter
   *
   * @remarks
   *     code of the filing frequency:
   *          - A Administratively terminated
   *          - D Debt
   *          - M Monthly filer
   *          - Q Quarterly filer
   *          - T Terminated
   *          - W Waived
   *
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=filing_frequency",
  })
  filingFrequency?: GetCommitteeCommitteeIdFilingFrequencyEnum[];

  /**
   * The one-letter code for the kind for organization:
   *
   * @remarks
   *         - C corporation
   *         - L labor organization
   *         - M membership organization
   *         - T trade association
   *         - V cooperative
   *         - W corporation without capital stock
   *
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=organization_type",
  })
  organizationType?: GetCommitteeCommitteeIdOrganizationTypeEnum[];

  /**
   * For paginating through results, starting at page 1
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=page" })
  page?: number;

  /**
   * The number of results returned per page. Defaults to 20.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=per_page",
  })
  perPage?: number;

  /**
   * Provide a field to sort by. Use `-` for descending order.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=sort" })
  sort?: string;

  /**
   * Hide null values on sorted column(s).
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=sort_hide_null",
  })
  sortHideNull?: boolean;

  /**
   * Toggle that filters out all rows having sort column that is non-null
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=sort_null_only",
  })
  sortNullOnly?: boolean;

  /**
   * Toggle that sorts null values last
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=sort_nulls_last",
  })
  sortNullsLast?: boolean;

  /**
   * A year that the committee was activeâ€” (after original registration date     or filing but before expiration date)
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=year" })
  year?: number[];
}

export class GetCommitteeCommitteeIdResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  committeeDetailPage?: shared.CommitteeDetailPage;

  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;
}
