/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import axios from "axios";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

/**
 * Contains the list of servers available to the SDK
 */
export const ServerList = [
  "http://api.nytimes.com/svc/mostpopular/v2",
  "https://api.nytimes.com/svc/mostpopular/v2",
] as const;

/**
 * The available configuration options for the SDK
 */
export type SDKProps = {
  /**
   * Allows overriding the default axios client used by the SDK
   */
  defaultClient?: AxiosInstance;
  /**
   * Allows overriding the default server URL used by the SDK
   */
  serverURL?: string;
};

/**
 * Get lists of NYT Articles based on shares, emails, and views.
 *
 * @see {@link http://developer.nytimes.com/}
 */
export class SDK {
  public _defaultClient: AxiosInstance;
  public _securityClient: AxiosInstance;
  public _serverURL: string;
  private _language = "typescript";
  private _sdkVersion = "0.0.1";
  private _genVersion = "internal";
  private _globals: any;

  constructor(props?: SDKProps) {
    this._serverURL = props?.serverURL ?? ServerList[0];

    this._defaultClient =
      props?.defaultClient ?? axios.create({ baseURL: this._serverURL });
    this._securityClient = this._defaultClient;
  }

  /**
   * Most Emailed by Section & Time Period
   */
  getMostemailedSectionTimePeriodJson(
    req: operations.GETMostemailedSectionTimePeriodJsonRequest,
    security: operations.GETMostemailedSectionTimePeriodJsonSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GETMostemailedSectionTimePeriodJsonResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GETMostemailedSectionTimePeriodJsonRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/mostemailed/{section}/{time-period}.json",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GETMostemailedSectionTimePeriodJsonSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GETMostemailedSectionTimePeriodJsonResponse =
        new operations.GETMostemailedSectionTimePeriodJsonResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getMostemailedSectionTimePeriodJSON200ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.GETMostemailedSectionTimePeriodJson200ApplicationJSON
              );
          }
          if (utils.matchContentType(contentType, `application/xml`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/xml`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getMostemailedSectionTimePeriodJSON400ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.GETMostemailedSectionTimePeriodJson400ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 403:
          if (utils.matchContentType(contentType, `application/xml`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getMostemailedSectionTimePeriodJSON403ApplicationJSONObject =
              utils.objectToClass(httpRes?.data);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Most Shared by Section & Time Period
   */
  getMostsharedSectionTimePeriodJson(
    req: operations.GETMostsharedSectionTimePeriodJsonRequest,
    security: operations.GETMostsharedSectionTimePeriodJsonSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GETMostsharedSectionTimePeriodJsonResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GETMostsharedSectionTimePeriodJsonRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/mostshared/{section}/{time-period}.json",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GETMostsharedSectionTimePeriodJsonSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GETMostsharedSectionTimePeriodJsonResponse =
        new operations.GETMostsharedSectionTimePeriodJsonResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getMostsharedSectionTimePeriodJSON200ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.GETMostsharedSectionTimePeriodJson200ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getMostsharedSectionTimePeriodJSON400ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.GETMostsharedSectionTimePeriodJson400ApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Most Viewed by Section & Time Period
   */
  getMostviewedSectionTimePeriodJson(
    req: operations.GETMostviewedSectionTimePeriodJsonRequest,
    security: operations.GETMostviewedSectionTimePeriodJsonSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GETMostviewedSectionTimePeriodJsonResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GETMostviewedSectionTimePeriodJsonRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/mostviewed/{section}/{time-period}.json",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GETMostviewedSectionTimePeriodJsonSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GETMostviewedSectionTimePeriodJsonResponse =
        new operations.GETMostviewedSectionTimePeriodJsonResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getMostviewedSectionTimePeriodJSON200ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.GETMostviewedSectionTimePeriodJson200ApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }
}
