/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

/**
 * UserPublic - Public User details summary
 */
public class UserPublic {
    /**
     * User's biography
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("bio")
    public String bio;
    public UserPublic withBio(String bio) {
        this.bio = bio;
        return this;
    }
    
    /**
     * User's Class Role (for Edu users only)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("classRole")
    public ClassRolesEnum classRole;
    public UserPublic withClassRole(ClassRolesEnum classRole) {
        this.classRole = classRole;
        return this;
    }
    
    /**
     * Cover picture (backgroud) for the profile
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("coverPicture")
    public String coverPicture;
    public UserPublic withCoverPicture(String coverPicture) {
        this.coverPicture = coverPicture;
        return this;
    }
    
    /**
     * Firstname of the user (for education users)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("firstname")
    public String firstname;
    public UserPublic withFirstname(String firstname) {
        this.firstname = firstname;
        return this;
    }
    
    /**
     * Number of followers the user have
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("followersCount")
    public Long followersCount;
    public UserPublic withFollowersCount(Long followersCount) {
        this.followersCount = followersCount;
        return this;
    }
    
    /**
     * Number of people the user follow
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("followingCount")
    public Long followingCount;
    public UserPublic withFollowingCount(Long followingCount) {
        this.followingCount = followingCount;
        return this;
    }
    
    /**
     * Link to user profile (for Indiv. users only)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("htmlUrl")
    public String htmlUrl;
    public UserPublic withHtmlUrl(String htmlUrl) {
        this.htmlUrl = htmlUrl;
        return this;
    }
    
    /**
     * The user unique identifier
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    public String id;
    public UserPublic withId(String id) {
        this.id = id;
        return this;
    }
    
    /**
     * An array of the instrument identifiers.
     * The format of the strings is `{instrument-group}.{instrument-id}`.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("instruments")
    public String[] instruments;
    public UserPublic withInstruments(String[] instruments) {
        this.instruments = instruments;
        return this;
    }
    
    /**
     * Will be 'true' if user is part of the Flat Team
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("isFlatTeam")
    public Boolean isFlatTeam;
    public UserPublic withIsFlatTeam(Boolean isFlatTeam) {
        this.isFlatTeam = isFlatTeam;
        return this;
    }
    
    /**
     * User license status. 'true' if user is an individual Power user
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("isPowerUser")
    public Boolean isPowerUser;
    public UserPublic withIsPowerUser(Boolean isPowerUser) {
        this.isPowerUser = isPowerUser;
        return this;
    }
    
    /**
     * Lastname of the user (for education users)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("lastname")
    public String lastname;
    public UserPublic withLastname(String lastname) {
        this.lastname = lastname;
        return this;
    }
    
    /**
     * Number of the scores liked by the user
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("likedScoresCount")
    public Long likedScoresCount;
    public UserPublic withLikedScoresCount(Long likedScoresCount) {
        this.likedScoresCount = likedScoresCount;
        return this;
    }
    
    /**
     * A displayable name for the user (for consumer users)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    public String name;
    public UserPublic withName(String name) {
        this.name = name;
        return this;
    }
    
    /**
     * Organization ID (for Edu users only)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("organization")
    public String organization;
    public UserPublic withOrganization(String organization) {
        this.organization = organization;
        return this;
    }
    
    /**
     * User's Organization Role (for Edu users only)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("organizationRole")
    public OrganizationRolesEnum organizationRole;
    public UserPublic withOrganizationRole(OrganizationRolesEnum organizationRole) {
        this.organizationRole = organizationRole;
        return this;
    }
    
    /**
     * Number of public scores the user have
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ownedPublicScoresCount")
    public Long ownedPublicScoresCount;
    public UserPublic withOwnedPublicScoresCount(Long ownedPublicScoresCount) {
        this.ownedPublicScoresCount = ownedPublicScoresCount;
        return this;
    }
    
    /**
     * The URL of the picture to display
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("picture")
    public String picture;
    public UserPublic withPicture(String picture) {
        this.picture = picture;
        return this;
    }
    
    /**
     * The name that can be directly printed (name, firstname &amp; lastname, or username)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("printableName")
    public String printableName;
    public UserPublic withPrintableName(String printableName) {
        this.printableName = printableName;
        return this;
    }
    
    /**
     * Theme (background) for the profile
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("profileTheme")
    public String profileTheme;
    public UserPublic withProfileTheme(String profileTheme) {
        this.profileTheme = profileTheme;
        return this;
    }
    
    /**
     * Date the user signed up
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("registrationDate")
    public OffsetDateTime registrationDate;
    public UserPublic withRegistrationDate(OffsetDateTime registrationDate) {
        this.registrationDate = registrationDate;
        return this;
    }
    
    /**
     * The type of user account
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("type")
    public UserPublicTypeEnum type;
    public UserPublic withType(UserPublicTypeEnum type) {
        this.type = type;
        return this;
    }
    
    /**
     * The user name (unique for the organization)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("username")
    public String username;
    public UserPublic withUsername(String username) {
        this.username = username;
        return this;
    }
    
}
