// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

type CreateBatchPollsPathParams struct {
	MeetingID string `pathParam:"style=simple,explode=false,name=meetingId"`
}

// CreateBatchPollsApplicationJSONQuestionsTypeEnum - Question type:<br>`single` - Single choice<br>`mutliple` - Multiple choice
type CreateBatchPollsApplicationJSONQuestionsTypeEnum string

const (
	CreateBatchPollsApplicationJSONQuestionsTypeEnumSingle   CreateBatchPollsApplicationJSONQuestionsTypeEnum = "single"
	CreateBatchPollsApplicationJSONQuestionsTypeEnumMultiple CreateBatchPollsApplicationJSONQuestionsTypeEnum = "multiple"
)

func (e *CreateBatchPollsApplicationJSONQuestionsTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "single":
		fallthrough
	case "multiple":
		*e = CreateBatchPollsApplicationJSONQuestionsTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateBatchPollsApplicationJSONQuestionsTypeEnum: %s", s)
	}
}

type CreateBatchPollsApplicationJSONQuestions struct {
	// Possible answers for the question.
	Answers []string `json:"answers,omitempty"`
	// Name of the question.
	Name *string `json:"name,omitempty"`
	// Question type:<br>`single` - Single choice<br>`mutliple` - Multiple choice
	Type *CreateBatchPollsApplicationJSONQuestionsTypeEnum `json:"type,omitempty"`
}

// CreateBatchPollsApplicationJSON - Batch Meeting poll object
type CreateBatchPollsApplicationJSON struct {
	Questions []CreateBatchPollsApplicationJSONQuestions `json:"questions,omitempty"`
	// Meeting Poll Title.
	Title *string `json:"title,omitempty"`
}

type CreateBatchPollsRequest struct {
	PathParams CreateBatchPollsPathParams
	// Batch Meeting poll object
	Request *CreateBatchPollsApplicationJSON `request:"mediaType=application/json"`
}

// CreateBatchPolls201ApplicationXMLPollsQuestionsTypeEnum - Poll question and answer type.
type CreateBatchPolls201ApplicationXMLPollsQuestionsTypeEnum string

const (
	CreateBatchPolls201ApplicationXMLPollsQuestionsTypeEnumSingle   CreateBatchPolls201ApplicationXMLPollsQuestionsTypeEnum = "single"
	CreateBatchPolls201ApplicationXMLPollsQuestionsTypeEnumMultiple CreateBatchPolls201ApplicationXMLPollsQuestionsTypeEnum = "multiple"
)

func (e *CreateBatchPolls201ApplicationXMLPollsQuestionsTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "single":
		fallthrough
	case "multiple":
		*e = CreateBatchPolls201ApplicationXMLPollsQuestionsTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateBatchPolls201ApplicationXMLPollsQuestionsTypeEnum: %s", s)
	}
}

type CreateBatchPolls201ApplicationXMLPollsQuestions struct {
	// Answers to questons
	Answers []string
	// Name of question.
	Name *string
	// Poll question and answer type.
	Type *CreateBatchPolls201ApplicationXMLPollsQuestionsTypeEnum
}

// CreateBatchPolls201ApplicationXMLPollsStatusEnum - Status of the Meeting Poll:<br>`notstart` - Poll not started<br>`started` - Poll started<br>`ended` - Poll ended<br>`sharing` - Sharing poll results
type CreateBatchPolls201ApplicationXMLPollsStatusEnum string

const (
	CreateBatchPolls201ApplicationXMLPollsStatusEnumNotstart CreateBatchPolls201ApplicationXMLPollsStatusEnum = "notstart"
	CreateBatchPolls201ApplicationXMLPollsStatusEnumStarted  CreateBatchPolls201ApplicationXMLPollsStatusEnum = "started"
	CreateBatchPolls201ApplicationXMLPollsStatusEnumEnded    CreateBatchPolls201ApplicationXMLPollsStatusEnum = "ended"
	CreateBatchPolls201ApplicationXMLPollsStatusEnumSharing  CreateBatchPolls201ApplicationXMLPollsStatusEnum = "sharing"
)

func (e *CreateBatchPolls201ApplicationXMLPollsStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "notstart":
		fallthrough
	case "started":
		fallthrough
	case "ended":
		fallthrough
	case "sharing":
		*e = CreateBatchPolls201ApplicationXMLPollsStatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateBatchPolls201ApplicationXMLPollsStatusEnum: %s", s)
	}
}

type CreateBatchPolls201ApplicationXMLPolls struct {
	// Meeting Poll ID
	ID        *string
	Questions []CreateBatchPolls201ApplicationXMLPollsQuestions
	// Status of the Meeting Poll:<br>`notstart` - Poll not started<br>`started` - Poll started<br>`ended` - Poll ended<br>`sharing` - Sharing poll results
	Status *CreateBatchPolls201ApplicationXMLPollsStatusEnum
	// Title for the Poll
	Title *string
}

// CreateBatchPolls201ApplicationXML - **HTTP Status Code:** `201` <br>
// Meeting Poll Created
type CreateBatchPolls201ApplicationXML struct {
	Polls []CreateBatchPolls201ApplicationXMLPolls
}

// CreateBatchPolls201ApplicationJSONPollsQuestionsTypeEnum - Poll question and answer type.
type CreateBatchPolls201ApplicationJSONPollsQuestionsTypeEnum string

const (
	CreateBatchPolls201ApplicationJSONPollsQuestionsTypeEnumSingle   CreateBatchPolls201ApplicationJSONPollsQuestionsTypeEnum = "single"
	CreateBatchPolls201ApplicationJSONPollsQuestionsTypeEnumMultiple CreateBatchPolls201ApplicationJSONPollsQuestionsTypeEnum = "multiple"
)

func (e *CreateBatchPolls201ApplicationJSONPollsQuestionsTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "single":
		fallthrough
	case "multiple":
		*e = CreateBatchPolls201ApplicationJSONPollsQuestionsTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateBatchPolls201ApplicationJSONPollsQuestionsTypeEnum: %s", s)
	}
}

type CreateBatchPolls201ApplicationJSONPollsQuestions struct {
	// Answers to questons
	Answers []string `json:"answers,omitempty"`
	// Name of question.
	Name *string `json:"name,omitempty"`
	// Poll question and answer type.
	Type *CreateBatchPolls201ApplicationJSONPollsQuestionsTypeEnum `json:"type,omitempty"`
}

// CreateBatchPolls201ApplicationJSONPollsStatusEnum - Status of the Meeting Poll:<br>`notstart` - Poll not started<br>`started` - Poll started<br>`ended` - Poll ended<br>`sharing` - Sharing poll results
type CreateBatchPolls201ApplicationJSONPollsStatusEnum string

const (
	CreateBatchPolls201ApplicationJSONPollsStatusEnumNotstart CreateBatchPolls201ApplicationJSONPollsStatusEnum = "notstart"
	CreateBatchPolls201ApplicationJSONPollsStatusEnumStarted  CreateBatchPolls201ApplicationJSONPollsStatusEnum = "started"
	CreateBatchPolls201ApplicationJSONPollsStatusEnumEnded    CreateBatchPolls201ApplicationJSONPollsStatusEnum = "ended"
	CreateBatchPolls201ApplicationJSONPollsStatusEnumSharing  CreateBatchPolls201ApplicationJSONPollsStatusEnum = "sharing"
)

func (e *CreateBatchPolls201ApplicationJSONPollsStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "notstart":
		fallthrough
	case "started":
		fallthrough
	case "ended":
		fallthrough
	case "sharing":
		*e = CreateBatchPolls201ApplicationJSONPollsStatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateBatchPolls201ApplicationJSONPollsStatusEnum: %s", s)
	}
}

type CreateBatchPolls201ApplicationJSONPolls struct {
	// Meeting Poll ID
	ID        *string                                            `json:"id,omitempty"`
	Questions []CreateBatchPolls201ApplicationJSONPollsQuestions `json:"questions,omitempty"`
	// Status of the Meeting Poll:<br>`notstart` - Poll not started<br>`started` - Poll started<br>`ended` - Poll ended<br>`sharing` - Sharing poll results
	Status *CreateBatchPolls201ApplicationJSONPollsStatusEnum `json:"status,omitempty"`
	// Title for the Poll
	Title *string `json:"title,omitempty"`
}

// CreateBatchPolls201ApplicationJSON - **HTTP Status Code:** `201` <br>
// Meeting Poll Created
type CreateBatchPolls201ApplicationJSON struct {
	Polls []CreateBatchPolls201ApplicationJSONPolls `json:"polls,omitempty"`
}

type CreateBatchPollsResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// **HTTP Status Code:** `201` <br>
	// Meeting Poll Created
	CreateBatchPolls201ApplicationJSONObject *CreateBatchPolls201ApplicationJSON
}
