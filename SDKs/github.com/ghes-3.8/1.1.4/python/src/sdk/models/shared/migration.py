"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from ..shared import nullable_simple_user as shared_nullable_simple_user
from ..shared import repository as shared_repository
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from marshmallow import fields
from sdk import utils
from typing import Any, Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Migration:
    r"""A migration."""
    
    created_at: datetime = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('created_at'), 'encoder': utils.datetimeisoformat(False), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso') }})  
    exclude_attachments: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('exclude_attachments') }})  
    exclude_git_data: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('exclude_git_data') }})  
    exclude_metadata: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('exclude_metadata') }})  
    exclude_owner_projects: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('exclude_owner_projects') }})  
    exclude_releases: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('exclude_releases') }})  
    guid: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('guid') }})  
    id: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id') }})  
    lock_repositories: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lock_repositories') }})  
    node_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('node_id') }})  
    org_metadata_only: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('org_metadata_only') }})  
    owner: shared_nullable_simple_user.NullableSimpleUser = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('owner') }})
    r"""A GitHub user."""  
    repositories: list[shared_repository.Repository] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('repositories') }})
    r"""The repositories included in the migration. Only returned for export migrations."""  
    state: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('state') }})  
    updated_at: datetime = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('updated_at'), 'encoder': utils.datetimeisoformat(False), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso') }})  
    url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('url') }})  
    archive_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('archive_url'), 'exclude': lambda f: f is None }})  
    exclude: Optional[list[Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('exclude'), 'exclude': lambda f: f is None }})  
    