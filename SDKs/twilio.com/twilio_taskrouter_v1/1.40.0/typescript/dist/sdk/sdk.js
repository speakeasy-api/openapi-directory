"use strict";
/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SDK = exports.ServerList = void 0;
var utils = __importStar(require("../internal/utils"));
var operations = __importStar(require("./models/operations"));
var shared = __importStar(require("./models/shared"));
var axios_1 = __importDefault(require("axios"));
/**
 * Contains the list of servers available to the SDK
 */
exports.ServerList = ["https://taskrouter.twilio.com"];
/**
 * This is the public Twilio REST API.
 */
var SDK = /** @class */ (function () {
    function SDK(props) {
        var _a, _b;
        this._language = "typescript";
        this._sdkVersion = "0.0.1";
        this._genVersion = "internal";
        this._serverURL = (_a = props === null || props === void 0 ? void 0 : props.serverURL) !== null && _a !== void 0 ? _a : exports.ServerList[0];
        this._defaultClient =
            (_b = props === null || props === void 0 ? void 0 : props.defaultClient) !== null && _b !== void 0 ? _b : axios_1.default.create({ baseURL: this._serverURL });
        this._securityClient = this._defaultClient;
    }
    SDK.prototype.createActivity = function (req, security, serverURL, config) {
        var _a;
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.CreateActivityRequest(req);
        }
        var baseURL = operations.CreateActivityServerList[0];
        if (serverURL) {
            baseURL = serverURL;
        }
        var url = utils.generateURL(baseURL, "/v1/Workspaces/{WorkspaceSid}/Activities", req);
        var _b = [{}, {}], reqBodyHeaders = _b[0], reqBody = _b[1];
        try {
            _a = utils.serializeRequestBody(req, "requestBody", "form"), reqBodyHeaders = _a[0], reqBody = _a[1];
        }
        catch (e) {
            if (e instanceof Error) {
                throw new Error("Error serializing request body, cause: ".concat(e.message));
            }
        }
        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.CreateActivitySecurity(security);
        }
        var client = utils.createSecurityClient(this._defaultClient, security);
        var headers = __assign(__assign({}, reqBodyHeaders), config === null || config === void 0 ? void 0 : config.headers);
        var r = client.request(__assign({ url: url, method: "post", headers: headers, data: reqBody }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.CreateActivityResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 201:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.taskrouterV1WorkspaceActivity = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.TaskrouterV1WorkspaceActivity);
                    }
                    break;
            }
            return res;
        });
    };
    SDK.prototype.createTask = function (req, security, serverURL, config) {
        var _a;
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.CreateTaskRequest(req);
        }
        var baseURL = operations.CreateTaskServerList[0];
        if (serverURL) {
            baseURL = serverURL;
        }
        var url = utils.generateURL(baseURL, "/v1/Workspaces/{WorkspaceSid}/Tasks", req);
        var _b = [{}, {}], reqBodyHeaders = _b[0], reqBody = _b[1];
        try {
            _a = utils.serializeRequestBody(req, "requestBody", "form"), reqBodyHeaders = _a[0], reqBody = _a[1];
        }
        catch (e) {
            if (e instanceof Error) {
                throw new Error("Error serializing request body, cause: ".concat(e.message));
            }
        }
        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.CreateTaskSecurity(security);
        }
        var client = utils.createSecurityClient(this._defaultClient, security);
        var headers = __assign(__assign({}, reqBodyHeaders), config === null || config === void 0 ? void 0 : config.headers);
        var r = client.request(__assign({ url: url, method: "post", headers: headers, data: reqBody }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.CreateTaskResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 201:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.taskrouterV1WorkspaceTask = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.TaskrouterV1WorkspaceTask);
                    }
                    break;
            }
            return res;
        });
    };
    SDK.prototype.createTaskChannel = function (req, security, serverURL, config) {
        var _a;
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.CreateTaskChannelRequest(req);
        }
        var baseURL = operations.CreateTaskChannelServerList[0];
        if (serverURL) {
            baseURL = serverURL;
        }
        var url = utils.generateURL(baseURL, "/v1/Workspaces/{WorkspaceSid}/TaskChannels", req);
        var _b = [{}, {}], reqBodyHeaders = _b[0], reqBody = _b[1];
        try {
            _a = utils.serializeRequestBody(req, "requestBody", "form"), reqBodyHeaders = _a[0], reqBody = _a[1];
        }
        catch (e) {
            if (e instanceof Error) {
                throw new Error("Error serializing request body, cause: ".concat(e.message));
            }
        }
        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.CreateTaskChannelSecurity(security);
        }
        var client = utils.createSecurityClient(this._defaultClient, security);
        var headers = __assign(__assign({}, reqBodyHeaders), config === null || config === void 0 ? void 0 : config.headers);
        var r = client.request(__assign({ url: url, method: "post", headers: headers, data: reqBody }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.CreateTaskChannelResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 201:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.taskrouterV1WorkspaceTaskChannel = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.TaskrouterV1WorkspaceTaskChannel);
                    }
                    break;
            }
            return res;
        });
    };
    SDK.prototype.createTaskQueue = function (req, security, serverURL, config) {
        var _a;
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.CreateTaskQueueRequest(req);
        }
        var baseURL = operations.CreateTaskQueueServerList[0];
        if (serverURL) {
            baseURL = serverURL;
        }
        var url = utils.generateURL(baseURL, "/v1/Workspaces/{WorkspaceSid}/TaskQueues", req);
        var _b = [{}, {}], reqBodyHeaders = _b[0], reqBody = _b[1];
        try {
            _a = utils.serializeRequestBody(req, "requestBody", "form"), reqBodyHeaders = _a[0], reqBody = _a[1];
        }
        catch (e) {
            if (e instanceof Error) {
                throw new Error("Error serializing request body, cause: ".concat(e.message));
            }
        }
        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.CreateTaskQueueSecurity(security);
        }
        var client = utils.createSecurityClient(this._defaultClient, security);
        var headers = __assign(__assign({}, reqBodyHeaders), config === null || config === void 0 ? void 0 : config.headers);
        var r = client.request(__assign({ url: url, method: "post", headers: headers, data: reqBody }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.CreateTaskQueueResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 201:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.taskrouterV1WorkspaceTaskQueue = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.TaskrouterV1WorkspaceTaskQueue);
                    }
                    break;
            }
            return res;
        });
    };
    SDK.prototype.createWorker = function (req, security, serverURL, config) {
        var _a;
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.CreateWorkerRequest(req);
        }
        var baseURL = operations.CreateWorkerServerList[0];
        if (serverURL) {
            baseURL = serverURL;
        }
        var url = utils.generateURL(baseURL, "/v1/Workspaces/{WorkspaceSid}/Workers", req);
        var _b = [{}, {}], reqBodyHeaders = _b[0], reqBody = _b[1];
        try {
            _a = utils.serializeRequestBody(req, "requestBody", "form"), reqBodyHeaders = _a[0], reqBody = _a[1];
        }
        catch (e) {
            if (e instanceof Error) {
                throw new Error("Error serializing request body, cause: ".concat(e.message));
            }
        }
        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.CreateWorkerSecurity(security);
        }
        var client = utils.createSecurityClient(this._defaultClient, security);
        var headers = __assign(__assign({}, reqBodyHeaders), config === null || config === void 0 ? void 0 : config.headers);
        var r = client.request(__assign({ url: url, method: "post", headers: headers, data: reqBody }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.CreateWorkerResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 201:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.taskrouterV1WorkspaceWorker = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.TaskrouterV1WorkspaceWorker);
                    }
                    break;
            }
            return res;
        });
    };
    SDK.prototype.createWorkflow = function (req, security, serverURL, config) {
        var _a;
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.CreateWorkflowRequest(req);
        }
        var baseURL = operations.CreateWorkflowServerList[0];
        if (serverURL) {
            baseURL = serverURL;
        }
        var url = utils.generateURL(baseURL, "/v1/Workspaces/{WorkspaceSid}/Workflows", req);
        var _b = [{}, {}], reqBodyHeaders = _b[0], reqBody = _b[1];
        try {
            _a = utils.serializeRequestBody(req, "requestBody", "form"), reqBodyHeaders = _a[0], reqBody = _a[1];
        }
        catch (e) {
            if (e instanceof Error) {
                throw new Error("Error serializing request body, cause: ".concat(e.message));
            }
        }
        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.CreateWorkflowSecurity(security);
        }
        var client = utils.createSecurityClient(this._defaultClient, security);
        var headers = __assign(__assign({}, reqBodyHeaders), config === null || config === void 0 ? void 0 : config.headers);
        var r = client.request(__assign({ url: url, method: "post", headers: headers, data: reqBody }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.CreateWorkflowResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 201:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.taskrouterV1WorkspaceWorkflow = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.TaskrouterV1WorkspaceWorkflow);
                    }
                    break;
            }
            return res;
        });
    };
    SDK.prototype.createWorkspace = function (req, security, serverURL, config) {
        var _a;
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.CreateWorkspaceCreateWorkspaceRequest(req);
        }
        var baseURL = operations.CreateWorkspaceServerList[0];
        if (serverURL) {
            baseURL = serverURL;
        }
        var url = baseURL.replace(/\/$/, "") + "/v1/Workspaces";
        var _b = [{}, {}], reqBodyHeaders = _b[0], reqBody = _b[1];
        try {
            _a = utils.serializeRequestBody(req, "request", "form"), reqBodyHeaders = _a[0], reqBody = _a[1];
        }
        catch (e) {
            if (e instanceof Error) {
                throw new Error("Error serializing request body, cause: ".concat(e.message));
            }
        }
        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.CreateWorkspaceSecurity(security);
        }
        var client = utils.createSecurityClient(this._defaultClient, security);
        var headers = __assign(__assign({}, reqBodyHeaders), config === null || config === void 0 ? void 0 : config.headers);
        var r = client.request(__assign({ url: url, method: "post", headers: headers, data: reqBody }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.CreateWorkspaceResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 201:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.taskrouterV1Workspace = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.TaskrouterV1Workspace);
                    }
                    break;
            }
            return res;
        });
    };
    SDK.prototype.deleteActivity = function (req, security, serverURL, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.DeleteActivityRequest(req);
        }
        var baseURL = operations.DeleteActivityServerList[0];
        if (serverURL) {
            baseURL = serverURL;
        }
        var url = utils.generateURL(baseURL, "/v1/Workspaces/{WorkspaceSid}/Activities/{Sid}", req);
        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.DeleteActivitySecurity(security);
        }
        var client = utils.createSecurityClient(this._defaultClient, security);
        var r = client.request(__assign({ url: url, method: "delete" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.DeleteActivityResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 204:
                    break;
            }
            return res;
        });
    };
    SDK.prototype.deleteTask = function (req, security, serverURL, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.DeleteTaskRequest(req);
        }
        var baseURL = operations.DeleteTaskServerList[0];
        if (serverURL) {
            baseURL = serverURL;
        }
        var url = utils.generateURL(baseURL, "/v1/Workspaces/{WorkspaceSid}/Tasks/{Sid}", req);
        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.DeleteTaskSecurity(security);
        }
        var client = utils.createSecurityClient(this._defaultClient, security);
        var headers = __assign(__assign({}, utils.getHeadersFromRequest(req)), config === null || config === void 0 ? void 0 : config.headers);
        var r = client.request(__assign({ url: url, method: "delete", headers: headers }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.DeleteTaskResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 204:
                    break;
            }
            return res;
        });
    };
    SDK.prototype.deleteTaskChannel = function (req, security, serverURL, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.DeleteTaskChannelRequest(req);
        }
        var baseURL = operations.DeleteTaskChannelServerList[0];
        if (serverURL) {
            baseURL = serverURL;
        }
        var url = utils.generateURL(baseURL, "/v1/Workspaces/{WorkspaceSid}/TaskChannels/{Sid}", req);
        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.DeleteTaskChannelSecurity(security);
        }
        var client = utils.createSecurityClient(this._defaultClient, security);
        var r = client.request(__assign({ url: url, method: "delete" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.DeleteTaskChannelResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 204:
                    break;
            }
            return res;
        });
    };
    SDK.prototype.deleteTaskQueue = function (req, security, serverURL, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.DeleteTaskQueueRequest(req);
        }
        var baseURL = operations.DeleteTaskQueueServerList[0];
        if (serverURL) {
            baseURL = serverURL;
        }
        var url = utils.generateURL(baseURL, "/v1/Workspaces/{WorkspaceSid}/TaskQueues/{Sid}", req);
        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.DeleteTaskQueueSecurity(security);
        }
        var client = utils.createSecurityClient(this._defaultClient, security);
        var r = client.request(__assign({ url: url, method: "delete" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.DeleteTaskQueueResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 204:
                    break;
            }
            return res;
        });
    };
    SDK.prototype.deleteWorker = function (req, security, serverURL, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.DeleteWorkerRequest(req);
        }
        var baseURL = operations.DeleteWorkerServerList[0];
        if (serverURL) {
            baseURL = serverURL;
        }
        var url = utils.generateURL(baseURL, "/v1/Workspaces/{WorkspaceSid}/Workers/{Sid}", req);
        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.DeleteWorkerSecurity(security);
        }
        var client = utils.createSecurityClient(this._defaultClient, security);
        var headers = __assign(__assign({}, utils.getHeadersFromRequest(req)), config === null || config === void 0 ? void 0 : config.headers);
        var r = client.request(__assign({ url: url, method: "delete", headers: headers }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.DeleteWorkerResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 204:
                    break;
            }
            return res;
        });
    };
    SDK.prototype.deleteWorkflow = function (req, security, serverURL, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.DeleteWorkflowRequest(req);
        }
        var baseURL = operations.DeleteWorkflowServerList[0];
        if (serverURL) {
            baseURL = serverURL;
        }
        var url = utils.generateURL(baseURL, "/v1/Workspaces/{WorkspaceSid}/Workflows/{Sid}", req);
        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.DeleteWorkflowSecurity(security);
        }
        var client = utils.createSecurityClient(this._defaultClient, security);
        var r = client.request(__assign({ url: url, method: "delete" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.DeleteWorkflowResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 204:
                    break;
            }
            return res;
        });
    };
    SDK.prototype.deleteWorkspace = function (req, security, serverURL, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.DeleteWorkspaceRequest(req);
        }
        var baseURL = operations.DeleteWorkspaceServerList[0];
        if (serverURL) {
            baseURL = serverURL;
        }
        var url = utils.generateURL(baseURL, "/v1/Workspaces/{Sid}", req);
        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.DeleteWorkspaceSecurity(security);
        }
        var client = utils.createSecurityClient(this._defaultClient, security);
        var r = client.request(__assign({ url: url, method: "delete" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.DeleteWorkspaceResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 204:
                    break;
            }
            return res;
        });
    };
    SDK.prototype.fetchActivity = function (req, security, serverURL, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.FetchActivityRequest(req);
        }
        var baseURL = operations.FetchActivityServerList[0];
        if (serverURL) {
            baseURL = serverURL;
        }
        var url = utils.generateURL(baseURL, "/v1/Workspaces/{WorkspaceSid}/Activities/{Sid}", req);
        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.FetchActivitySecurity(security);
        }
        var client = utils.createSecurityClient(this._defaultClient, security);
        var r = client.request(__assign({ url: url, method: "get" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.FetchActivityResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.taskrouterV1WorkspaceActivity = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.TaskrouterV1WorkspaceActivity);
                    }
                    break;
            }
            return res;
        });
    };
    SDK.prototype.fetchEvent = function (req, security, serverURL, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.FetchEventRequest(req);
        }
        var baseURL = operations.FetchEventServerList[0];
        if (serverURL) {
            baseURL = serverURL;
        }
        var url = utils.generateURL(baseURL, "/v1/Workspaces/{WorkspaceSid}/Events/{Sid}", req);
        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.FetchEventSecurity(security);
        }
        var client = utils.createSecurityClient(this._defaultClient, security);
        var r = client.request(__assign({ url: url, method: "get" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.FetchEventResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.taskrouterV1WorkspaceEvent = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.TaskrouterV1WorkspaceEvent);
                    }
                    break;
            }
            return res;
        });
    };
    SDK.prototype.fetchTask = function (req, security, serverURL, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.FetchTaskRequest(req);
        }
        var baseURL = operations.FetchTaskServerList[0];
        if (serverURL) {
            baseURL = serverURL;
        }
        var url = utils.generateURL(baseURL, "/v1/Workspaces/{WorkspaceSid}/Tasks/{Sid}", req);
        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.FetchTaskSecurity(security);
        }
        var client = utils.createSecurityClient(this._defaultClient, security);
        var r = client.request(__assign({ url: url, method: "get" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.FetchTaskResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.taskrouterV1WorkspaceTask = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.TaskrouterV1WorkspaceTask);
                    }
                    break;
            }
            return res;
        });
    };
    SDK.prototype.fetchTaskChannel = function (req, security, serverURL, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.FetchTaskChannelRequest(req);
        }
        var baseURL = operations.FetchTaskChannelServerList[0];
        if (serverURL) {
            baseURL = serverURL;
        }
        var url = utils.generateURL(baseURL, "/v1/Workspaces/{WorkspaceSid}/TaskChannels/{Sid}", req);
        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.FetchTaskChannelSecurity(security);
        }
        var client = utils.createSecurityClient(this._defaultClient, security);
        var r = client.request(__assign({ url: url, method: "get" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.FetchTaskChannelResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.taskrouterV1WorkspaceTaskChannel = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.TaskrouterV1WorkspaceTaskChannel);
                    }
                    break;
            }
            return res;
        });
    };
    SDK.prototype.fetchTaskQueue = function (req, security, serverURL, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.FetchTaskQueueRequest(req);
        }
        var baseURL = operations.FetchTaskQueueServerList[0];
        if (serverURL) {
            baseURL = serverURL;
        }
        var url = utils.generateURL(baseURL, "/v1/Workspaces/{WorkspaceSid}/TaskQueues/{Sid}", req);
        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.FetchTaskQueueSecurity(security);
        }
        var client = utils.createSecurityClient(this._defaultClient, security);
        var r = client.request(__assign({ url: url, method: "get" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.FetchTaskQueueResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.taskrouterV1WorkspaceTaskQueue = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.TaskrouterV1WorkspaceTaskQueue);
                    }
                    break;
            }
            return res;
        });
    };
    SDK.prototype.fetchTaskQueueCumulativeStatistics = function (req, security, serverURL, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.FetchTaskQueueCumulativeStatisticsRequest(req);
        }
        var baseURL = operations.FetchTaskQueueCumulativeStatisticsServerList[0];
        if (serverURL) {
            baseURL = serverURL;
        }
        var url = utils.generateURL(baseURL, "/v1/Workspaces/{WorkspaceSid}/TaskQueues/{TaskQueueSid}/CumulativeStatistics", req);
        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.FetchTaskQueueCumulativeStatisticsSecurity(security);
        }
        var client = utils.createSecurityClient(this._defaultClient, security);
        var queryParams = utils.serializeQueryParams(req);
        var r = client.request(__assign({ url: url + queryParams, method: "get" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.FetchTaskQueueCumulativeStatisticsResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.taskrouterV1WorkspaceTaskQueueTaskQueueCumulativeStatistics =
                            utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.TaskrouterV1WorkspaceTaskQueueTaskQueueCumulativeStatistics);
                    }
                    break;
            }
            return res;
        });
    };
    SDK.prototype.fetchTaskQueueRealTimeStatistics = function (req, security, serverURL, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.FetchTaskQueueRealTimeStatisticsRequest(req);
        }
        var baseURL = operations.FetchTaskQueueRealTimeStatisticsServerList[0];
        if (serverURL) {
            baseURL = serverURL;
        }
        var url = utils.generateURL(baseURL, "/v1/Workspaces/{WorkspaceSid}/TaskQueues/{TaskQueueSid}/RealTimeStatistics", req);
        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.FetchTaskQueueRealTimeStatisticsSecurity(security);
        }
        var client = utils.createSecurityClient(this._defaultClient, security);
        var queryParams = utils.serializeQueryParams(req);
        var r = client.request(__assign({ url: url + queryParams, method: "get" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.FetchTaskQueueRealTimeStatisticsResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.taskrouterV1WorkspaceTaskQueueTaskQueueRealTimeStatistics =
                            utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.TaskrouterV1WorkspaceTaskQueueTaskQueueRealTimeStatistics);
                    }
                    break;
            }
            return res;
        });
    };
    SDK.prototype.fetchTaskQueueStatistics = function (req, security, serverURL, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.FetchTaskQueueStatisticsRequest(req);
        }
        var baseURL = operations.FetchTaskQueueStatisticsServerList[0];
        if (serverURL) {
            baseURL = serverURL;
        }
        var url = utils.generateURL(baseURL, "/v1/Workspaces/{WorkspaceSid}/TaskQueues/{TaskQueueSid}/Statistics", req);
        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.FetchTaskQueueStatisticsSecurity(security);
        }
        var client = utils.createSecurityClient(this._defaultClient, security);
        var queryParams = utils.serializeQueryParams(req);
        var r = client.request(__assign({ url: url + queryParams, method: "get" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.FetchTaskQueueStatisticsResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.taskrouterV1WorkspaceTaskQueueTaskQueueStatistics =
                            utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.TaskrouterV1WorkspaceTaskQueueTaskQueueStatistics);
                    }
                    break;
            }
            return res;
        });
    };
    SDK.prototype.fetchTaskReservation = function (req, security, serverURL, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.FetchTaskReservationRequest(req);
        }
        var baseURL = operations.FetchTaskReservationServerList[0];
        if (serverURL) {
            baseURL = serverURL;
        }
        var url = utils.generateURL(baseURL, "/v1/Workspaces/{WorkspaceSid}/Tasks/{TaskSid}/Reservations/{Sid}", req);
        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.FetchTaskReservationSecurity(security);
        }
        var client = utils.createSecurityClient(this._defaultClient, security);
        var r = client.request(__assign({ url: url, method: "get" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.FetchTaskReservationResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.taskrouterV1WorkspaceTaskTaskReservation = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.TaskrouterV1WorkspaceTaskTaskReservation);
                    }
                    break;
            }
            return res;
        });
    };
    SDK.prototype.fetchWorker = function (req, security, serverURL, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.FetchWorkerRequest(req);
        }
        var baseURL = operations.FetchWorkerServerList[0];
        if (serverURL) {
            baseURL = serverURL;
        }
        var url = utils.generateURL(baseURL, "/v1/Workspaces/{WorkspaceSid}/Workers/{Sid}", req);
        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.FetchWorkerSecurity(security);
        }
        var client = utils.createSecurityClient(this._defaultClient, security);
        var r = client.request(__assign({ url: url, method: "get" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.FetchWorkerResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.taskrouterV1WorkspaceWorker = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.TaskrouterV1WorkspaceWorker);
                    }
                    break;
            }
            return res;
        });
    };
    SDK.prototype.fetchWorkerChannel = function (req, security, serverURL, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.FetchWorkerChannelRequest(req);
        }
        var baseURL = operations.FetchWorkerChannelServerList[0];
        if (serverURL) {
            baseURL = serverURL;
        }
        var url = utils.generateURL(baseURL, "/v1/Workspaces/{WorkspaceSid}/Workers/{WorkerSid}/Channels/{Sid}", req);
        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.FetchWorkerChannelSecurity(security);
        }
        var client = utils.createSecurityClient(this._defaultClient, security);
        var r = client.request(__assign({ url: url, method: "get" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.FetchWorkerChannelResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.taskrouterV1WorkspaceWorkerWorkerChannel = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.TaskrouterV1WorkspaceWorkerWorkerChannel);
                    }
                    break;
            }
            return res;
        });
    };
    SDK.prototype.fetchWorkerInstanceStatistics = function (req, security, serverURL, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.FetchWorkerInstanceStatisticsRequest(req);
        }
        var baseURL = operations.FetchWorkerInstanceStatisticsServerList[0];
        if (serverURL) {
            baseURL = serverURL;
        }
        var url = utils.generateURL(baseURL, "/v1/Workspaces/{WorkspaceSid}/Workers/{WorkerSid}/Statistics", req);
        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.FetchWorkerInstanceStatisticsSecurity(security);
        }
        var client = utils.createSecurityClient(this._defaultClient, security);
        var queryParams = utils.serializeQueryParams(req);
        var r = client.request(__assign({ url: url + queryParams, method: "get" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.FetchWorkerInstanceStatisticsResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.taskrouterV1WorkspaceWorkerWorkerInstanceStatistics =
                            utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.TaskrouterV1WorkspaceWorkerWorkerInstanceStatistics);
                    }
                    break;
            }
            return res;
        });
    };
    SDK.prototype.fetchWorkerReservation = function (req, security, serverURL, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.FetchWorkerReservationRequest(req);
        }
        var baseURL = operations.FetchWorkerReservationServerList[0];
        if (serverURL) {
            baseURL = serverURL;
        }
        var url = utils.generateURL(baseURL, "/v1/Workspaces/{WorkspaceSid}/Workers/{WorkerSid}/Reservations/{Sid}", req);
        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.FetchWorkerReservationSecurity(security);
        }
        var client = utils.createSecurityClient(this._defaultClient, security);
        var r = client.request(__assign({ url: url, method: "get" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.FetchWorkerReservationResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.taskrouterV1WorkspaceWorkerWorkerReservation =
                            utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.TaskrouterV1WorkspaceWorkerWorkerReservation);
                    }
                    break;
            }
            return res;
        });
    };
    SDK.prototype.fetchWorkerStatistics = function (req, security, serverURL, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.FetchWorkerStatisticsRequest(req);
        }
        var baseURL = operations.FetchWorkerStatisticsServerList[0];
        if (serverURL) {
            baseURL = serverURL;
        }
        var url = utils.generateURL(baseURL, "/v1/Workspaces/{WorkspaceSid}/Workers/Statistics", req);
        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.FetchWorkerStatisticsSecurity(security);
        }
        var client = utils.createSecurityClient(this._defaultClient, security);
        var queryParams = utils.serializeQueryParams(req);
        var r = client.request(__assign({ url: url + queryParams, method: "get" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.FetchWorkerStatisticsResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.taskrouterV1WorkspaceWorkerWorkerStatistics =
                            utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.TaskrouterV1WorkspaceWorkerWorkerStatistics);
                    }
                    break;
            }
            return res;
        });
    };
    SDK.prototype.fetchWorkersCumulativeStatistics = function (req, security, serverURL, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.FetchWorkersCumulativeStatisticsRequest(req);
        }
        var baseURL = operations.FetchWorkersCumulativeStatisticsServerList[0];
        if (serverURL) {
            baseURL = serverURL;
        }
        var url = utils.generateURL(baseURL, "/v1/Workspaces/{WorkspaceSid}/Workers/CumulativeStatistics", req);
        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.FetchWorkersCumulativeStatisticsSecurity(security);
        }
        var client = utils.createSecurityClient(this._defaultClient, security);
        var queryParams = utils.serializeQueryParams(req);
        var r = client.request(__assign({ url: url + queryParams, method: "get" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.FetchWorkersCumulativeStatisticsResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.taskrouterV1WorkspaceWorkerWorkersCumulativeStatistics =
                            utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.TaskrouterV1WorkspaceWorkerWorkersCumulativeStatistics);
                    }
                    break;
            }
            return res;
        });
    };
    SDK.prototype.fetchWorkersRealTimeStatistics = function (req, security, serverURL, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.FetchWorkersRealTimeStatisticsRequest(req);
        }
        var baseURL = operations.FetchWorkersRealTimeStatisticsServerList[0];
        if (serverURL) {
            baseURL = serverURL;
        }
        var url = utils.generateURL(baseURL, "/v1/Workspaces/{WorkspaceSid}/Workers/RealTimeStatistics", req);
        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.FetchWorkersRealTimeStatisticsSecurity(security);
        }
        var client = utils.createSecurityClient(this._defaultClient, security);
        var queryParams = utils.serializeQueryParams(req);
        var r = client.request(__assign({ url: url + queryParams, method: "get" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.FetchWorkersRealTimeStatisticsResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.taskrouterV1WorkspaceWorkerWorkersRealTimeStatistics =
                            utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.TaskrouterV1WorkspaceWorkerWorkersRealTimeStatistics);
                    }
                    break;
            }
            return res;
        });
    };
    SDK.prototype.fetchWorkflow = function (req, security, serverURL, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.FetchWorkflowRequest(req);
        }
        var baseURL = operations.FetchWorkflowServerList[0];
        if (serverURL) {
            baseURL = serverURL;
        }
        var url = utils.generateURL(baseURL, "/v1/Workspaces/{WorkspaceSid}/Workflows/{Sid}", req);
        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.FetchWorkflowSecurity(security);
        }
        var client = utils.createSecurityClient(this._defaultClient, security);
        var r = client.request(__assign({ url: url, method: "get" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.FetchWorkflowResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.taskrouterV1WorkspaceWorkflow = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.TaskrouterV1WorkspaceWorkflow);
                    }
                    break;
            }
            return res;
        });
    };
    SDK.prototype.fetchWorkflowCumulativeStatistics = function (req, security, serverURL, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.FetchWorkflowCumulativeStatisticsRequest(req);
        }
        var baseURL = operations.FetchWorkflowCumulativeStatisticsServerList[0];
        if (serverURL) {
            baseURL = serverURL;
        }
        var url = utils.generateURL(baseURL, "/v1/Workspaces/{WorkspaceSid}/Workflows/{WorkflowSid}/CumulativeStatistics", req);
        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.FetchWorkflowCumulativeStatisticsSecurity(security);
        }
        var client = utils.createSecurityClient(this._defaultClient, security);
        var queryParams = utils.serializeQueryParams(req);
        var r = client.request(__assign({ url: url + queryParams, method: "get" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.FetchWorkflowCumulativeStatisticsResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.taskrouterV1WorkspaceWorkflowWorkflowCumulativeStatistics =
                            utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.TaskrouterV1WorkspaceWorkflowWorkflowCumulativeStatistics);
                    }
                    break;
            }
            return res;
        });
    };
    SDK.prototype.fetchWorkflowRealTimeStatistics = function (req, security, serverURL, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.FetchWorkflowRealTimeStatisticsRequest(req);
        }
        var baseURL = operations.FetchWorkflowRealTimeStatisticsServerList[0];
        if (serverURL) {
            baseURL = serverURL;
        }
        var url = utils.generateURL(baseURL, "/v1/Workspaces/{WorkspaceSid}/Workflows/{WorkflowSid}/RealTimeStatistics", req);
        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.FetchWorkflowRealTimeStatisticsSecurity(security);
        }
        var client = utils.createSecurityClient(this._defaultClient, security);
        var queryParams = utils.serializeQueryParams(req);
        var r = client.request(__assign({ url: url + queryParams, method: "get" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.FetchWorkflowRealTimeStatisticsResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.taskrouterV1WorkspaceWorkflowWorkflowRealTimeStatistics =
                            utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.TaskrouterV1WorkspaceWorkflowWorkflowRealTimeStatistics);
                    }
                    break;
            }
            return res;
        });
    };
    SDK.prototype.fetchWorkflowStatistics = function (req, security, serverURL, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.FetchWorkflowStatisticsRequest(req);
        }
        var baseURL = operations.FetchWorkflowStatisticsServerList[0];
        if (serverURL) {
            baseURL = serverURL;
        }
        var url = utils.generateURL(baseURL, "/v1/Workspaces/{WorkspaceSid}/Workflows/{WorkflowSid}/Statistics", req);
        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.FetchWorkflowStatisticsSecurity(security);
        }
        var client = utils.createSecurityClient(this._defaultClient, security);
        var queryParams = utils.serializeQueryParams(req);
        var r = client.request(__assign({ url: url + queryParams, method: "get" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.FetchWorkflowStatisticsResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.taskrouterV1WorkspaceWorkflowWorkflowStatistics =
                            utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.TaskrouterV1WorkspaceWorkflowWorkflowStatistics);
                    }
                    break;
            }
            return res;
        });
    };
    SDK.prototype.fetchWorkspace = function (req, security, serverURL, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.FetchWorkspaceRequest(req);
        }
        var baseURL = operations.FetchWorkspaceServerList[0];
        if (serverURL) {
            baseURL = serverURL;
        }
        var url = utils.generateURL(baseURL, "/v1/Workspaces/{Sid}", req);
        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.FetchWorkspaceSecurity(security);
        }
        var client = utils.createSecurityClient(this._defaultClient, security);
        var r = client.request(__assign({ url: url, method: "get" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.FetchWorkspaceResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.taskrouterV1Workspace = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.TaskrouterV1Workspace);
                    }
                    break;
            }
            return res;
        });
    };
    SDK.prototype.fetchWorkspaceCumulativeStatistics = function (req, security, serverURL, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.FetchWorkspaceCumulativeStatisticsRequest(req);
        }
        var baseURL = operations.FetchWorkspaceCumulativeStatisticsServerList[0];
        if (serverURL) {
            baseURL = serverURL;
        }
        var url = utils.generateURL(baseURL, "/v1/Workspaces/{WorkspaceSid}/CumulativeStatistics", req);
        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.FetchWorkspaceCumulativeStatisticsSecurity(security);
        }
        var client = utils.createSecurityClient(this._defaultClient, security);
        var queryParams = utils.serializeQueryParams(req);
        var r = client.request(__assign({ url: url + queryParams, method: "get" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.FetchWorkspaceCumulativeStatisticsResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.taskrouterV1WorkspaceWorkspaceCumulativeStatistics =
                            utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.TaskrouterV1WorkspaceWorkspaceCumulativeStatistics);
                    }
                    break;
            }
            return res;
        });
    };
    SDK.prototype.fetchWorkspaceRealTimeStatistics = function (req, security, serverURL, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.FetchWorkspaceRealTimeStatisticsRequest(req);
        }
        var baseURL = operations.FetchWorkspaceRealTimeStatisticsServerList[0];
        if (serverURL) {
            baseURL = serverURL;
        }
        var url = utils.generateURL(baseURL, "/v1/Workspaces/{WorkspaceSid}/RealTimeStatistics", req);
        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.FetchWorkspaceRealTimeStatisticsSecurity(security);
        }
        var client = utils.createSecurityClient(this._defaultClient, security);
        var queryParams = utils.serializeQueryParams(req);
        var r = client.request(__assign({ url: url + queryParams, method: "get" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.FetchWorkspaceRealTimeStatisticsResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.taskrouterV1WorkspaceWorkspaceRealTimeStatistics =
                            utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.TaskrouterV1WorkspaceWorkspaceRealTimeStatistics);
                    }
                    break;
            }
            return res;
        });
    };
    SDK.prototype.fetchWorkspaceStatistics = function (req, security, serverURL, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.FetchWorkspaceStatisticsRequest(req);
        }
        var baseURL = operations.FetchWorkspaceStatisticsServerList[0];
        if (serverURL) {
            baseURL = serverURL;
        }
        var url = utils.generateURL(baseURL, "/v1/Workspaces/{WorkspaceSid}/Statistics", req);
        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.FetchWorkspaceStatisticsSecurity(security);
        }
        var client = utils.createSecurityClient(this._defaultClient, security);
        var queryParams = utils.serializeQueryParams(req);
        var r = client.request(__assign({ url: url + queryParams, method: "get" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.FetchWorkspaceStatisticsResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.taskrouterV1WorkspaceWorkspaceStatistics = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.TaskrouterV1WorkspaceWorkspaceStatistics);
                    }
                    break;
            }
            return res;
        });
    };
    SDK.prototype.listActivity = function (req, security, serverURL, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.ListActivityRequest(req);
        }
        var baseURL = operations.ListActivityServerList[0];
        if (serverURL) {
            baseURL = serverURL;
        }
        var url = utils.generateURL(baseURL, "/v1/Workspaces/{WorkspaceSid}/Activities", req);
        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.ListActivitySecurity(security);
        }
        var client = utils.createSecurityClient(this._defaultClient, security);
        var queryParams = utils.serializeQueryParams(req);
        var r = client.request(__assign({ url: url + queryParams, method: "get" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.ListActivityResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.listActivityResponse = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, operations.ListActivityListActivityResponse);
                    }
                    break;
            }
            return res;
        });
    };
    SDK.prototype.listEvent = function (req, security, serverURL, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.ListEventRequest(req);
        }
        var baseURL = operations.ListEventServerList[0];
        if (serverURL) {
            baseURL = serverURL;
        }
        var url = utils.generateURL(baseURL, "/v1/Workspaces/{WorkspaceSid}/Events", req);
        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.ListEventSecurity(security);
        }
        var client = utils.createSecurityClient(this._defaultClient, security);
        var queryParams = utils.serializeQueryParams(req);
        var r = client.request(__assign({ url: url + queryParams, method: "get" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.ListEventResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.listEventResponse = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, operations.ListEventListEventResponse);
                    }
                    break;
            }
            return res;
        });
    };
    SDK.prototype.listTask = function (req, security, serverURL, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.ListTaskRequest(req);
        }
        var baseURL = operations.ListTaskServerList[0];
        if (serverURL) {
            baseURL = serverURL;
        }
        var url = utils.generateURL(baseURL, "/v1/Workspaces/{WorkspaceSid}/Tasks", req);
        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.ListTaskSecurity(security);
        }
        var client = utils.createSecurityClient(this._defaultClient, security);
        var queryParams = utils.serializeQueryParams(req);
        var r = client.request(__assign({ url: url + queryParams, method: "get" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.ListTaskResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.listTaskResponse = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, operations.ListTaskListTaskResponse);
                    }
                    break;
            }
            return res;
        });
    };
    SDK.prototype.listTaskChannel = function (req, security, serverURL, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.ListTaskChannelRequest(req);
        }
        var baseURL = operations.ListTaskChannelServerList[0];
        if (serverURL) {
            baseURL = serverURL;
        }
        var url = utils.generateURL(baseURL, "/v1/Workspaces/{WorkspaceSid}/TaskChannels", req);
        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.ListTaskChannelSecurity(security);
        }
        var client = utils.createSecurityClient(this._defaultClient, security);
        var queryParams = utils.serializeQueryParams(req);
        var r = client.request(__assign({ url: url + queryParams, method: "get" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.ListTaskChannelResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.listTaskChannelResponse = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, operations.ListTaskChannelListTaskChannelResponse);
                    }
                    break;
            }
            return res;
        });
    };
    SDK.prototype.listTaskQueue = function (req, security, serverURL, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.ListTaskQueueRequest(req);
        }
        var baseURL = operations.ListTaskQueueServerList[0];
        if (serverURL) {
            baseURL = serverURL;
        }
        var url = utils.generateURL(baseURL, "/v1/Workspaces/{WorkspaceSid}/TaskQueues", req);
        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.ListTaskQueueSecurity(security);
        }
        var client = utils.createSecurityClient(this._defaultClient, security);
        var queryParams = utils.serializeQueryParams(req);
        var r = client.request(__assign({ url: url + queryParams, method: "get" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.ListTaskQueueResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.listTaskQueueResponse = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, operations.ListTaskQueueListTaskQueueResponse);
                    }
                    break;
            }
            return res;
        });
    };
    SDK.prototype.listTaskQueuesStatistics = function (req, security, serverURL, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.ListTaskQueuesStatisticsRequest(req);
        }
        var baseURL = operations.ListTaskQueuesStatisticsServerList[0];
        if (serverURL) {
            baseURL = serverURL;
        }
        var url = utils.generateURL(baseURL, "/v1/Workspaces/{WorkspaceSid}/TaskQueues/Statistics", req);
        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.ListTaskQueuesStatisticsSecurity(security);
        }
        var client = utils.createSecurityClient(this._defaultClient, security);
        var queryParams = utils.serializeQueryParams(req);
        var r = client.request(__assign({ url: url + queryParams, method: "get" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.ListTaskQueuesStatisticsResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.listTaskQueuesStatisticsResponse = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, operations.ListTaskQueuesStatisticsListTaskQueuesStatisticsResponse);
                    }
                    break;
            }
            return res;
        });
    };
    SDK.prototype.listTaskReservation = function (req, security, serverURL, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.ListTaskReservationRequest(req);
        }
        var baseURL = operations.ListTaskReservationServerList[0];
        if (serverURL) {
            baseURL = serverURL;
        }
        var url = utils.generateURL(baseURL, "/v1/Workspaces/{WorkspaceSid}/Tasks/{TaskSid}/Reservations", req);
        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.ListTaskReservationSecurity(security);
        }
        var client = utils.createSecurityClient(this._defaultClient, security);
        var queryParams = utils.serializeQueryParams(req);
        var r = client.request(__assign({ url: url + queryParams, method: "get" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.ListTaskReservationResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.listTaskReservationResponse = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, operations.ListTaskReservationListTaskReservationResponse);
                    }
                    break;
            }
            return res;
        });
    };
    SDK.prototype.listWorker = function (req, security, serverURL, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.ListWorkerRequest(req);
        }
        var baseURL = operations.ListWorkerServerList[0];
        if (serverURL) {
            baseURL = serverURL;
        }
        var url = utils.generateURL(baseURL, "/v1/Workspaces/{WorkspaceSid}/Workers", req);
        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.ListWorkerSecurity(security);
        }
        var client = utils.createSecurityClient(this._defaultClient, security);
        var queryParams = utils.serializeQueryParams(req);
        var r = client.request(__assign({ url: url + queryParams, method: "get" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.ListWorkerResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.listWorkerResponse = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, operations.ListWorkerListWorkerResponse);
                    }
                    break;
            }
            return res;
        });
    };
    SDK.prototype.listWorkerChannel = function (req, security, serverURL, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.ListWorkerChannelRequest(req);
        }
        var baseURL = operations.ListWorkerChannelServerList[0];
        if (serverURL) {
            baseURL = serverURL;
        }
        var url = utils.generateURL(baseURL, "/v1/Workspaces/{WorkspaceSid}/Workers/{WorkerSid}/Channels", req);
        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.ListWorkerChannelSecurity(security);
        }
        var client = utils.createSecurityClient(this._defaultClient, security);
        var queryParams = utils.serializeQueryParams(req);
        var r = client.request(__assign({ url: url + queryParams, method: "get" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.ListWorkerChannelResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.listWorkerChannelResponse = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, operations.ListWorkerChannelListWorkerChannelResponse);
                    }
                    break;
            }
            return res;
        });
    };
    SDK.prototype.listWorkerReservation = function (req, security, serverURL, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.ListWorkerReservationRequest(req);
        }
        var baseURL = operations.ListWorkerReservationServerList[0];
        if (serverURL) {
            baseURL = serverURL;
        }
        var url = utils.generateURL(baseURL, "/v1/Workspaces/{WorkspaceSid}/Workers/{WorkerSid}/Reservations", req);
        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.ListWorkerReservationSecurity(security);
        }
        var client = utils.createSecurityClient(this._defaultClient, security);
        var queryParams = utils.serializeQueryParams(req);
        var r = client.request(__assign({ url: url + queryParams, method: "get" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.ListWorkerReservationResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.listWorkerReservationResponse = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, operations.ListWorkerReservationListWorkerReservationResponse);
                    }
                    break;
            }
            return res;
        });
    };
    SDK.prototype.listWorkflow = function (req, security, serverURL, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.ListWorkflowRequest(req);
        }
        var baseURL = operations.ListWorkflowServerList[0];
        if (serverURL) {
            baseURL = serverURL;
        }
        var url = utils.generateURL(baseURL, "/v1/Workspaces/{WorkspaceSid}/Workflows", req);
        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.ListWorkflowSecurity(security);
        }
        var client = utils.createSecurityClient(this._defaultClient, security);
        var queryParams = utils.serializeQueryParams(req);
        var r = client.request(__assign({ url: url + queryParams, method: "get" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.ListWorkflowResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.listWorkflowResponse = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, operations.ListWorkflowListWorkflowResponse);
                    }
                    break;
            }
            return res;
        });
    };
    SDK.prototype.listWorkspace = function (req, security, serverURL, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.ListWorkspaceRequest(req);
        }
        var baseURL = operations.ListWorkspaceServerList[0];
        if (serverURL) {
            baseURL = serverURL;
        }
        var url = baseURL.replace(/\/$/, "") + "/v1/Workspaces";
        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.ListWorkspaceSecurity(security);
        }
        var client = utils.createSecurityClient(this._defaultClient, security);
        var queryParams = utils.serializeQueryParams(req);
        var r = client.request(__assign({ url: url + queryParams, method: "get" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.ListWorkspaceResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.listWorkspaceResponse = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, operations.ListWorkspaceListWorkspaceResponse);
                    }
                    break;
            }
            return res;
        });
    };
    SDK.prototype.updateActivity = function (req, security, serverURL, config) {
        var _a;
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.UpdateActivityRequest(req);
        }
        var baseURL = operations.UpdateActivityServerList[0];
        if (serverURL) {
            baseURL = serverURL;
        }
        var url = utils.generateURL(baseURL, "/v1/Workspaces/{WorkspaceSid}/Activities/{Sid}", req);
        var _b = [{}, {}], reqBodyHeaders = _b[0], reqBody = _b[1];
        try {
            _a = utils.serializeRequestBody(req, "requestBody", "form"), reqBodyHeaders = _a[0], reqBody = _a[1];
        }
        catch (e) {
            if (e instanceof Error) {
                throw new Error("Error serializing request body, cause: ".concat(e.message));
            }
        }
        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.UpdateActivitySecurity(security);
        }
        var client = utils.createSecurityClient(this._defaultClient, security);
        var headers = __assign(__assign({}, reqBodyHeaders), config === null || config === void 0 ? void 0 : config.headers);
        var r = client.request(__assign({ url: url, method: "post", headers: headers, data: reqBody }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.UpdateActivityResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.taskrouterV1WorkspaceActivity = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.TaskrouterV1WorkspaceActivity);
                    }
                    break;
            }
            return res;
        });
    };
    SDK.prototype.updateTask = function (req, security, serverURL, config) {
        var _a;
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.UpdateTaskRequest(req);
        }
        var baseURL = operations.UpdateTaskServerList[0];
        if (serverURL) {
            baseURL = serverURL;
        }
        var url = utils.generateURL(baseURL, "/v1/Workspaces/{WorkspaceSid}/Tasks/{Sid}", req);
        var _b = [{}, {}], reqBodyHeaders = _b[0], reqBody = _b[1];
        try {
            _a = utils.serializeRequestBody(req, "requestBody", "form"), reqBodyHeaders = _a[0], reqBody = _a[1];
        }
        catch (e) {
            if (e instanceof Error) {
                throw new Error("Error serializing request body, cause: ".concat(e.message));
            }
        }
        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.UpdateTaskSecurity(security);
        }
        var client = utils.createSecurityClient(this._defaultClient, security);
        var headers = __assign(__assign(__assign({}, utils.getHeadersFromRequest(req)), reqBodyHeaders), config === null || config === void 0 ? void 0 : config.headers);
        var r = client.request(__assign({ url: url, method: "post", headers: headers, data: reqBody }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.UpdateTaskResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.taskrouterV1WorkspaceTask = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.TaskrouterV1WorkspaceTask);
                    }
                    break;
            }
            return res;
        });
    };
    SDK.prototype.updateTaskChannel = function (req, security, serverURL, config) {
        var _a;
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.UpdateTaskChannelRequest(req);
        }
        var baseURL = operations.UpdateTaskChannelServerList[0];
        if (serverURL) {
            baseURL = serverURL;
        }
        var url = utils.generateURL(baseURL, "/v1/Workspaces/{WorkspaceSid}/TaskChannels/{Sid}", req);
        var _b = [{}, {}], reqBodyHeaders = _b[0], reqBody = _b[1];
        try {
            _a = utils.serializeRequestBody(req, "requestBody", "form"), reqBodyHeaders = _a[0], reqBody = _a[1];
        }
        catch (e) {
            if (e instanceof Error) {
                throw new Error("Error serializing request body, cause: ".concat(e.message));
            }
        }
        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.UpdateTaskChannelSecurity(security);
        }
        var client = utils.createSecurityClient(this._defaultClient, security);
        var headers = __assign(__assign({}, reqBodyHeaders), config === null || config === void 0 ? void 0 : config.headers);
        var r = client.request(__assign({ url: url, method: "post", headers: headers, data: reqBody }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.UpdateTaskChannelResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.taskrouterV1WorkspaceTaskChannel = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.TaskrouterV1WorkspaceTaskChannel);
                    }
                    break;
            }
            return res;
        });
    };
    SDK.prototype.updateTaskQueue = function (req, security, serverURL, config) {
        var _a;
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.UpdateTaskQueueRequest(req);
        }
        var baseURL = operations.UpdateTaskQueueServerList[0];
        if (serverURL) {
            baseURL = serverURL;
        }
        var url = utils.generateURL(baseURL, "/v1/Workspaces/{WorkspaceSid}/TaskQueues/{Sid}", req);
        var _b = [{}, {}], reqBodyHeaders = _b[0], reqBody = _b[1];
        try {
            _a = utils.serializeRequestBody(req, "requestBody", "form"), reqBodyHeaders = _a[0], reqBody = _a[1];
        }
        catch (e) {
            if (e instanceof Error) {
                throw new Error("Error serializing request body, cause: ".concat(e.message));
            }
        }
        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.UpdateTaskQueueSecurity(security);
        }
        var client = utils.createSecurityClient(this._defaultClient, security);
        var headers = __assign(__assign({}, reqBodyHeaders), config === null || config === void 0 ? void 0 : config.headers);
        var r = client.request(__assign({ url: url, method: "post", headers: headers, data: reqBody }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.UpdateTaskQueueResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.taskrouterV1WorkspaceTaskQueue = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.TaskrouterV1WorkspaceTaskQueue);
                    }
                    break;
            }
            return res;
        });
    };
    SDK.prototype.updateTaskReservation = function (req, security, serverURL, config) {
        var _a;
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.UpdateTaskReservationRequest(req);
        }
        var baseURL = operations.UpdateTaskReservationServerList[0];
        if (serverURL) {
            baseURL = serverURL;
        }
        var url = utils.generateURL(baseURL, "/v1/Workspaces/{WorkspaceSid}/Tasks/{TaskSid}/Reservations/{Sid}", req);
        var _b = [{}, {}], reqBodyHeaders = _b[0], reqBody = _b[1];
        try {
            _a = utils.serializeRequestBody(req, "requestBody", "form"), reqBodyHeaders = _a[0], reqBody = _a[1];
        }
        catch (e) {
            if (e instanceof Error) {
                throw new Error("Error serializing request body, cause: ".concat(e.message));
            }
        }
        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.UpdateTaskReservationSecurity(security);
        }
        var client = utils.createSecurityClient(this._defaultClient, security);
        var headers = __assign(__assign(__assign({}, utils.getHeadersFromRequest(req)), reqBodyHeaders), config === null || config === void 0 ? void 0 : config.headers);
        var r = client.request(__assign({ url: url, method: "post", headers: headers, data: reqBody }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.UpdateTaskReservationResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.taskrouterV1WorkspaceTaskTaskReservation = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.TaskrouterV1WorkspaceTaskTaskReservation);
                    }
                    break;
            }
            return res;
        });
    };
    SDK.prototype.updateWorker = function (req, security, serverURL, config) {
        var _a;
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.UpdateWorkerRequest(req);
        }
        var baseURL = operations.UpdateWorkerServerList[0];
        if (serverURL) {
            baseURL = serverURL;
        }
        var url = utils.generateURL(baseURL, "/v1/Workspaces/{WorkspaceSid}/Workers/{Sid}", req);
        var _b = [{}, {}], reqBodyHeaders = _b[0], reqBody = _b[1];
        try {
            _a = utils.serializeRequestBody(req, "requestBody", "form"), reqBodyHeaders = _a[0], reqBody = _a[1];
        }
        catch (e) {
            if (e instanceof Error) {
                throw new Error("Error serializing request body, cause: ".concat(e.message));
            }
        }
        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.UpdateWorkerSecurity(security);
        }
        var client = utils.createSecurityClient(this._defaultClient, security);
        var headers = __assign(__assign(__assign({}, utils.getHeadersFromRequest(req)), reqBodyHeaders), config === null || config === void 0 ? void 0 : config.headers);
        var r = client.request(__assign({ url: url, method: "post", headers: headers, data: reqBody }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.UpdateWorkerResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.taskrouterV1WorkspaceWorker = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.TaskrouterV1WorkspaceWorker);
                    }
                    break;
            }
            return res;
        });
    };
    SDK.prototype.updateWorkerChannel = function (req, security, serverURL, config) {
        var _a;
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.UpdateWorkerChannelRequest(req);
        }
        var baseURL = operations.UpdateWorkerChannelServerList[0];
        if (serverURL) {
            baseURL = serverURL;
        }
        var url = utils.generateURL(baseURL, "/v1/Workspaces/{WorkspaceSid}/Workers/{WorkerSid}/Channels/{Sid}", req);
        var _b = [{}, {}], reqBodyHeaders = _b[0], reqBody = _b[1];
        try {
            _a = utils.serializeRequestBody(req, "requestBody", "form"), reqBodyHeaders = _a[0], reqBody = _a[1];
        }
        catch (e) {
            if (e instanceof Error) {
                throw new Error("Error serializing request body, cause: ".concat(e.message));
            }
        }
        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.UpdateWorkerChannelSecurity(security);
        }
        var client = utils.createSecurityClient(this._defaultClient, security);
        var headers = __assign(__assign({}, reqBodyHeaders), config === null || config === void 0 ? void 0 : config.headers);
        var r = client.request(__assign({ url: url, method: "post", headers: headers, data: reqBody }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.UpdateWorkerChannelResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.taskrouterV1WorkspaceWorkerWorkerChannel = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.TaskrouterV1WorkspaceWorkerWorkerChannel);
                    }
                    break;
            }
            return res;
        });
    };
    SDK.prototype.updateWorkerReservation = function (req, security, serverURL, config) {
        var _a;
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.UpdateWorkerReservationRequest(req);
        }
        var baseURL = operations.UpdateWorkerReservationServerList[0];
        if (serverURL) {
            baseURL = serverURL;
        }
        var url = utils.generateURL(baseURL, "/v1/Workspaces/{WorkspaceSid}/Workers/{WorkerSid}/Reservations/{Sid}", req);
        var _b = [{}, {}], reqBodyHeaders = _b[0], reqBody = _b[1];
        try {
            _a = utils.serializeRequestBody(req, "requestBody", "form"), reqBodyHeaders = _a[0], reqBody = _a[1];
        }
        catch (e) {
            if (e instanceof Error) {
                throw new Error("Error serializing request body, cause: ".concat(e.message));
            }
        }
        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.UpdateWorkerReservationSecurity(security);
        }
        var client = utils.createSecurityClient(this._defaultClient, security);
        var headers = __assign(__assign(__assign({}, utils.getHeadersFromRequest(req)), reqBodyHeaders), config === null || config === void 0 ? void 0 : config.headers);
        var r = client.request(__assign({ url: url, method: "post", headers: headers, data: reqBody }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.UpdateWorkerReservationResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.taskrouterV1WorkspaceWorkerWorkerReservation =
                            utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.TaskrouterV1WorkspaceWorkerWorkerReservation);
                    }
                    break;
            }
            return res;
        });
    };
    SDK.prototype.updateWorkflow = function (req, security, serverURL, config) {
        var _a;
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.UpdateWorkflowRequest(req);
        }
        var baseURL = operations.UpdateWorkflowServerList[0];
        if (serverURL) {
            baseURL = serverURL;
        }
        var url = utils.generateURL(baseURL, "/v1/Workspaces/{WorkspaceSid}/Workflows/{Sid}", req);
        var _b = [{}, {}], reqBodyHeaders = _b[0], reqBody = _b[1];
        try {
            _a = utils.serializeRequestBody(req, "requestBody", "form"), reqBodyHeaders = _a[0], reqBody = _a[1];
        }
        catch (e) {
            if (e instanceof Error) {
                throw new Error("Error serializing request body, cause: ".concat(e.message));
            }
        }
        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.UpdateWorkflowSecurity(security);
        }
        var client = utils.createSecurityClient(this._defaultClient, security);
        var headers = __assign(__assign({}, reqBodyHeaders), config === null || config === void 0 ? void 0 : config.headers);
        var r = client.request(__assign({ url: url, method: "post", headers: headers, data: reqBody }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.UpdateWorkflowResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.taskrouterV1WorkspaceWorkflow = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.TaskrouterV1WorkspaceWorkflow);
                    }
                    break;
            }
            return res;
        });
    };
    SDK.prototype.updateWorkspace = function (req, security, serverURL, config) {
        var _a;
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.UpdateWorkspaceRequest(req);
        }
        var baseURL = operations.UpdateWorkspaceServerList[0];
        if (serverURL) {
            baseURL = serverURL;
        }
        var url = utils.generateURL(baseURL, "/v1/Workspaces/{Sid}", req);
        var _b = [{}, {}], reqBodyHeaders = _b[0], reqBody = _b[1];
        try {
            _a = utils.serializeRequestBody(req, "requestBody", "form"), reqBodyHeaders = _a[0], reqBody = _a[1];
        }
        catch (e) {
            if (e instanceof Error) {
                throw new Error("Error serializing request body, cause: ".concat(e.message));
            }
        }
        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.UpdateWorkspaceSecurity(security);
        }
        var client = utils.createSecurityClient(this._defaultClient, security);
        var headers = __assign(__assign({}, reqBodyHeaders), config === null || config === void 0 ? void 0 : config.headers);
        var r = client.request(__assign({ url: url, method: "post", headers: headers, data: reqBody }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.UpdateWorkspaceResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.taskrouterV1Workspace = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.TaskrouterV1Workspace);
                    }
                    break;
            }
            return res;
        });
    };
    return SDK;
}());
exports.SDK = SDK;
