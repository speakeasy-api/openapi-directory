// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// GoogleCloudMlV1MetricSpecNameEnum - metric name.
type GoogleCloudMlV1MetricSpecNameEnum string

const (
	GoogleCloudMlV1MetricSpecNameEnumMetricNameUnspecified GoogleCloudMlV1MetricSpecNameEnum = "METRIC_NAME_UNSPECIFIED"
	GoogleCloudMlV1MetricSpecNameEnumCPUUsage              GoogleCloudMlV1MetricSpecNameEnum = "CPU_USAGE"
	GoogleCloudMlV1MetricSpecNameEnumGpuDutyCycle          GoogleCloudMlV1MetricSpecNameEnum = "GPU_DUTY_CYCLE"
)

func (e GoogleCloudMlV1MetricSpecNameEnum) ToPointer() *GoogleCloudMlV1MetricSpecNameEnum {
	return &e
}

func (e *GoogleCloudMlV1MetricSpecNameEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "METRIC_NAME_UNSPECIFIED":
		fallthrough
	case "CPU_USAGE":
		fallthrough
	case "GPU_DUTY_CYCLE":
		*e = GoogleCloudMlV1MetricSpecNameEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GoogleCloudMlV1MetricSpecNameEnum: %v", v)
	}
}

// GoogleCloudMlV1MetricSpec - MetricSpec contains the specifications to use to calculate the desired nodes count when autoscaling is enabled.
type GoogleCloudMlV1MetricSpec struct {
	// metric name.
	Name *GoogleCloudMlV1MetricSpecNameEnum `json:"name,omitempty"`
	// Target specifies the target value for the given metric; once real metric deviates from the threshold by a certain percentage, the node count changes.
	Target *int `json:"target,omitempty"`
}
