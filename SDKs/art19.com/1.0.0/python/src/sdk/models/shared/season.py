"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from ..shared import resourceidentifier as shared_resourceidentifier
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from enum import Enum
from marshmallow import fields
from sdk import utils
from typing import Optional

class SeasonAttributesStatusEnum(str, Enum):
    r"""The current status of the season"""
    ACTIVE = 'active'
    INACTIVE = 'inactive'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SeasonAttributes:
    
    cascaded_cover_image_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cascaded_cover_image_id'), 'exclude': lambda f: f is None }})
    r"""This will be replaced by the relationship `cascaded_cover_image` in a future update.<br/>
    The image ID of the cover art for this season. If there is no specific cover for the season,
    the image ID of the series' cover art will be returned.
    The `/images` endpoint provideds details to the image.
    """  
    cover_image_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cover_image_id'), 'exclude': lambda f: f is None }})
    r"""This will be replaced by the relationship `cover_image` in a future update.<br/>
    The image ID of the cover art for this season. The `/images` endpoint provideds details to the image.
    """  
    created_at: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('created_at'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})  
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description'), 'exclude': lambda f: f is None }})
    r"""The description of the season eventually in HTML format"""  
    description_is_html: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description_is_html'), 'exclude': lambda f: f is None }})
    r"""Determines whether `description` is in HTML format or plain."""  
    description_plain: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description_plain'), 'exclude': lambda f: f is None }})
    r"""The description with all HTML markup removed. If the description does not contain markup
    this is identitcal to `description`.
    """  
    first_released_episode_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('first_released_episode_id'), 'exclude': lambda f: f is None }})
    r"""This will be replaced by the relationship `first_released_episode` in a future update.<br/>
    The ID of the first released episode within the season
    """  
    last_released_episode_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('last_released_episode_id'), 'exclude': lambda f: f is None }})
    r"""This will be replaced by the relationship `last_released_episode` in a future update.<br/>
    The ID of the most recently released episode within the season
    """  
    season_number: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('season_number'), 'exclude': lambda f: f is None }})
    r"""The number of the season. This could be `null` as well."""  
    sort_title: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sort_title'), 'exclude': lambda f: f is None }})
    r"""The title of the season modified for sorting. This converts all characters to
    lower case, removes an eventually leading `The` as well as leading and trailling whitespace characters.
    """  
    status: Optional[SeasonAttributesStatusEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status'), 'exclude': lambda f: f is None }})
    r"""The current status of the season"""  
    title: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('title'), 'exclude': lambda f: f is None }})
    r"""The title of the season"""  
    updated_at: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('updated_at'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SeasonRelationshipsCascadedCoverImage:
    r"""The cover art for this season. If there is no specific cover for the season,
    the cover image of the series' cover art will be returned.
    The `/images` endpoint provideds details to the image.
    """
    
    data: Optional[shared_resourceidentifier.ResourceIdentifier] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('data'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SeasonRelationshipsAListOfClassificationsAssociatedWithTheSeason:
    
    data: Optional[list[shared_resourceidentifier.ResourceIdentifier]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('data'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SeasonRelationshipsCoverImage:
    r"""The cover image for the season"""
    
    data: Optional[shared_resourceidentifier.ResourceIdentifier] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('data'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SeasonRelationshipsAListOfCreditsGivenToPeopleInTheSeason:
    
    data: Optional[list[shared_resourceidentifier.ResourceIdentifier]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('data'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SeasonRelationshipsAListOfPublishedAndReleasedEpisodesWithAnActualMediaFileWithinTheSeason:
    
    data: Optional[list[shared_resourceidentifier.ResourceIdentifier]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('data'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SeasonRelationshipsFirstReleasedEpisode:
    r"""The first released episode within the season"""
    
    data: Optional[shared_resourceidentifier.ResourceIdentifier] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('data'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SeasonRelationshipsBothTheCoverImageAndTheCascadedCoverImageForTheSeason:
    
    data: Optional[list[shared_resourceidentifier.ResourceIdentifier]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('data'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SeasonRelationshipsLastReleasedEpisode:
    r"""The most recently released episode within the season"""
    
    data: Optional[shared_resourceidentifier.ResourceIdentifier] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('data'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SeasonRelationshipsTheSeriesTheSeasonBelongsTo:
    
    data: Optional[shared_resourceidentifier.ResourceIdentifier] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('data'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SeasonRelationshipsAListOfAssociationsLinkingTagsToTheSeason:
    
    data: Optional[list[shared_resourceidentifier.ResourceIdentifier]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('data'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SeasonRelationshipsAListOfTagsAssociatedWithTheSeason:
    
    data: Optional[list[shared_resourceidentifier.ResourceIdentifier]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('data'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SeasonRelationships:
    
    cascaded_cover_image: Optional[SeasonRelationshipsCascadedCoverImage] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cascaded_cover_image'), 'exclude': lambda f: f is None }})
    r"""The cover art for this season. If there is no specific cover for the season,
    the cover image of the series' cover art will be returned.
    The `/images` endpoint provideds details to the image.
    """  
    classification_inclusions: Optional[SeasonRelationshipsAListOfClassificationsAssociatedWithTheSeason] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('classification_inclusions'), 'exclude': lambda f: f is None }})  
    cover_image: Optional[SeasonRelationshipsCoverImage] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cover_image'), 'exclude': lambda f: f is None }})
    r"""The cover image for the season"""  
    credits: Optional[SeasonRelationshipsAListOfCreditsGivenToPeopleInTheSeason] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('credits'), 'exclude': lambda f: f is None }})  
    episodes: Optional[SeasonRelationshipsAListOfPublishedAndReleasedEpisodesWithAnActualMediaFileWithinTheSeason] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('episodes'), 'exclude': lambda f: f is None }})  
    first_released_episode: Optional[SeasonRelationshipsFirstReleasedEpisode] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('first_released_episode'), 'exclude': lambda f: f is None }})
    r"""The first released episode within the season"""  
    images: Optional[SeasonRelationshipsBothTheCoverImageAndTheCascadedCoverImageForTheSeason] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('images'), 'exclude': lambda f: f is None }})  
    last_released_episode: Optional[SeasonRelationshipsLastReleasedEpisode] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('last_released_episode'), 'exclude': lambda f: f is None }})
    r"""The most recently released episode within the season"""  
    series: Optional[SeasonRelationshipsTheSeriesTheSeasonBelongsTo] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('series'), 'exclude': lambda f: f is None }})  
    taggings: Optional[SeasonRelationshipsAListOfAssociationsLinkingTagsToTheSeason] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('taggings'), 'exclude': lambda f: f is None }})  
    tags: Optional[SeasonRelationshipsAListOfTagsAssociatedWithTheSeason] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tags'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Season:
    
    attributes: Optional[SeasonAttributes] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('attributes'), 'exclude': lambda f: f is None }})  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})  
    relationships: Optional[SeasonRelationships] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('relationships'), 'exclude': lambda f: f is None }})  
    type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})
    r"""The type of resource. This is always `seasons`"""  
    