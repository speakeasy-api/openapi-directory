/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

public class GetOrganizationApplianceVPNThirdPartyVPNPeers200ApplicationJSONPeers {
    /**
     * [optional] The IKE version to be used for the IPsec VPN peer configuration. Defaults to '1' when omitted.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ikeVersion")
    public GetOrganizationApplianceVPNThirdPartyVPNPeers200ApplicationJSONPeersIkeVersionEnum ikeVersion;

    public GetOrganizationApplianceVPNThirdPartyVPNPeers200ApplicationJSONPeers withIkeVersion(GetOrganizationApplianceVPNThirdPartyVPNPeers200ApplicationJSONPeersIkeVersionEnum ikeVersion) {
        this.ikeVersion = ikeVersion;
        return this;
    }
    
    /**
     * Custom IPSec policies for the VPN peer. If not included and a preset has not been chosen, the default preset for IPSec policies will be used.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ipsecPolicies")
    public GetOrganizationApplianceVPNThirdPartyVPNPeers200ApplicationJSONPeersIpsecPolicies ipsecPolicies;

    public GetOrganizationApplianceVPNThirdPartyVPNPeers200ApplicationJSONPeers withIpsecPolicies(GetOrganizationApplianceVPNThirdPartyVPNPeers200ApplicationJSONPeersIpsecPolicies ipsecPolicies) {
        this.ipsecPolicies = ipsecPolicies;
        return this;
    }
    
    /**
     * One of the following available presets: 'default', 'aws', 'azure'. If this is provided, the 'ipsecPolicies' parameter is ignored.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ipsecPoliciesPreset")
    public String ipsecPoliciesPreset;

    public GetOrganizationApplianceVPNThirdPartyVPNPeers200ApplicationJSONPeers withIpsecPoliciesPreset(String ipsecPoliciesPreset) {
        this.ipsecPoliciesPreset = ipsecPoliciesPreset;
        return this;
    }
    
    /**
     * [optional] The local ID is used to identify the MX to the peer. This will apply to all MXs this peer applies to.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("localId")
    public String localId;

    public GetOrganizationApplianceVPNThirdPartyVPNPeers200ApplicationJSONPeers withLocalId(String localId) {
        this.localId = localId;
        return this;
    }
    
    /**
     * The name of the VPN peer
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    public String name;

    public GetOrganizationApplianceVPNThirdPartyVPNPeers200ApplicationJSONPeers withName(String name) {
        this.name = name;
        return this;
    }
    
    /**
     * A list of network tags that will connect with this peer. Use ['all'] for all networks. Use ['none'] for no networks. If not included, the default is ['all'].
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("networkTags")
    public String[] networkTags;

    public GetOrganizationApplianceVPNThirdPartyVPNPeers200ApplicationJSONPeers withNetworkTags(String[] networkTags) {
        this.networkTags = networkTags;
        return this;
    }
    
    /**
     * The list of the private subnets of the VPN peer
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("privateSubnets")
    public String[] privateSubnets;

    public GetOrganizationApplianceVPNThirdPartyVPNPeers200ApplicationJSONPeers withPrivateSubnets(String[] privateSubnets) {
        this.privateSubnets = privateSubnets;
        return this;
    }
    
    /**
     * [optional] The public IP of the VPN peer
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("publicIp")
    public String publicIp;

    public GetOrganizationApplianceVPNThirdPartyVPNPeers200ApplicationJSONPeers withPublicIp(String publicIp) {
        this.publicIp = publicIp;
        return this;
    }
    
    /**
     * [optional] The remote ID is used to identify the connecting VPN peer. This can either be a valid IPv4 Address, FQDN or User FQDN.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("remoteId")
    public String remoteId;

    public GetOrganizationApplianceVPNThirdPartyVPNPeers200ApplicationJSONPeers withRemoteId(String remoteId) {
        this.remoteId = remoteId;
        return this;
    }
    
    /**
     * The shared secret with the VPN peer
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("secret")
    public String secret;

    public GetOrganizationApplianceVPNThirdPartyVPNPeers200ApplicationJSONPeers withSecret(String secret) {
        this.secret = secret;
        return this;
    }
    
    public GetOrganizationApplianceVPNThirdPartyVPNPeers200ApplicationJSONPeers(){}
}
