"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class OrganizationExports:
    r"""An `organization_export` object represents a request to export the complete data of an organization in JSON format.
    
    To export an organization using this API:
    
    * Create an `organization_export`
      [request](/docs/create-an-organization-export-request)
      and store the ID that is returned.
    * Request the `organization_export` every few minutes, until the
      `state` field contains ‘finished’.
    * Download the file located at the URL in the `download_url` field. * Exports can take a long time, from several minutes to a few hours
      for large organizations.
    
    
    *Note: These endpoints are only available to [Service Accounts](https://asana.com/guide/help/premium/service-accounts) of an [Enterprise](https://asana.com/enterprise) organization.*
    """
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def create_organization_export(self, request: operations.CreateOrganizationExportRequest) -> operations.CreateOrganizationExportResponse:
        r"""Create an organization export request
        This method creates a request to export an Organization. Asana will complete the export at some point after you create the request.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/organization_exports'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        query_params = utils.get_query_params(operations.CreateOrganizationExportRequest, request)
        
        client = self._security_client
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateOrganizationExportResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.CreateOrganizationExport201ApplicationJSON])
                res.create_organization_export_201_application_json_object = out
        elif http_res.status_code in [400, 401, 403, 404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorResponse])
                res.error_response = out

        return res

    def get_organization_export(self, request: operations.GetOrganizationExportRequest) -> operations.GetOrganizationExportResponse:
        r"""Get details on an org export request
        Returns details of a previously-requested Organization export.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetOrganizationExportRequest, base_url, '/organization_exports/{organization_export_gid}', request)
        
        query_params = utils.get_query_params(operations.GetOrganizationExportRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetOrganizationExportResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetOrganizationExport200ApplicationJSON])
                res.get_organization_export_200_application_json_object = out
        elif http_res.status_code in [400, 401, 403, 404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorResponse])
                res.error_response = out

        return res

    