// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// ListEntitiesDetectionV2JobsXAmzTargetEnum
type ListEntitiesDetectionV2JobsXAmzTargetEnum string

const (
	ListEntitiesDetectionV2JobsXAmzTargetEnumComprehendMedical20181030ListEntitiesDetectionV2Jobs ListEntitiesDetectionV2JobsXAmzTargetEnum = "ComprehendMedical_20181030.ListEntitiesDetectionV2Jobs"
)

func (e *ListEntitiesDetectionV2JobsXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "ComprehendMedical_20181030.ListEntitiesDetectionV2Jobs":
		*e = ListEntitiesDetectionV2JobsXAmzTargetEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ListEntitiesDetectionV2JobsXAmzTargetEnum: %s", s)
	}
}

type ListEntitiesDetectionV2JobsHeaders struct {
	XAmzAlgorithm     *string                                   `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string                                   `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string                                   `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string                                   `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string                                   `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string                                   `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string                                   `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget        ListEntitiesDetectionV2JobsXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type ListEntitiesDetectionV2JobsRequest struct {
	Headers ListEntitiesDetectionV2JobsHeaders
	Request shared.ListEntitiesDetectionV2JobsRequest `request:"mediaType=application/json"`
}

type ListEntitiesDetectionV2JobsResponse struct {
	ContentType string
	// InternalServerException
	InternalServerException interface{}
	// InvalidRequestException
	InvalidRequestException interface{}
	// Success
	ListEntitiesDetectionV2JobsResponse *shared.ListEntitiesDetectionV2JobsResponse
	StatusCode                          int
	RawResponse                         *http.Response
	// TooManyRequestsException
	TooManyRequestsException interface{}
	// ValidationException
	ValidationException interface{}
}
