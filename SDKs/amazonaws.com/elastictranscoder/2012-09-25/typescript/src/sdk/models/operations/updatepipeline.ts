/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

/**
 * The <code>PipelineOutputConfig</code> structure.
 */
export class UpdatePipelineRequestBodyContentConfig extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "Bucket" })
  bucket?: string;

  @SpeakeasyMetadata({ elemType: shared.Permission })
  @Expose({ name: "Permissions" })
  @Type(() => shared.Permission)
  permissions?: shared.Permission[];

  @SpeakeasyMetadata()
  @Expose({ name: "StorageClass" })
  storageClass?: string;
}

/**
 * <p>The Amazon Simple Notification Service (Amazon SNS) topic or topics to notify in order to report job status.</p> <important> <p>To receive notifications, you must also subscribe to the new topic in the Amazon SNS console.</p> </important>
 */
export class UpdatePipelineRequestBodyNotifications extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "Completed" })
  completed?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "Error" })
  error?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "Progressing" })
  progressing?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "Warning" })
  warning?: string;
}

/**
 * The <code>PipelineOutputConfig</code> structure.
 */
export class UpdatePipelineRequestBodyThumbnailConfig extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "Bucket" })
  bucket?: string;

  @SpeakeasyMetadata({ elemType: shared.Permission })
  @Expose({ name: "Permissions" })
  @Type(() => shared.Permission)
  permissions?: shared.Permission[];

  @SpeakeasyMetadata()
  @Expose({ name: "StorageClass" })
  storageClass?: string;
}

export class UpdatePipelineRequestBody extends SpeakeasyBase {
  /**
   * <p>The AWS Key Management Service (AWS KMS) key that you want to use with this pipeline.</p> <p>If you use either <code>s3</code> or <code>s3-aws-kms</code> as your <code>Encryption:Mode</code>, you don't need to provide a key with your job because a default key, known as an AWS-KMS key, is created for you automatically. You need to provide an AWS-KMS key only if you want to use a non-default AWS-KMS key, or if you are using an <code>Encryption:Mode</code> of <code>aes-cbc-pkcs7</code>, <code>aes-ctr</code>, or <code>aes-gcm</code>.</p>
   */
  @SpeakeasyMetadata()
  @Expose({ name: "AwsKmsKeyArn" })
  awsKmsKeyArn?: string;

  /**
   * The <code>PipelineOutputConfig</code> structure.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "ContentConfig" })
  @Type(() => UpdatePipelineRequestBodyContentConfig)
  contentConfig?: UpdatePipelineRequestBodyContentConfig;

  /**
   * The Amazon S3 bucket in which you saved the media files that you want to transcode and the graphics that you want to use as watermarks.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "InputBucket" })
  inputBucket?: string;

  /**
   * <p>The name of the pipeline. We recommend that the name be unique within the AWS account, but uniqueness is not enforced.</p> <p>Constraints: Maximum 40 characters</p>
   */
  @SpeakeasyMetadata()
  @Expose({ name: "Name" })
  name?: string;

  /**
   * <p>The Amazon Simple Notification Service (Amazon SNS) topic or topics to notify in order to report job status.</p> <important> <p>To receive notifications, you must also subscribe to the new topic in the Amazon SNS console.</p> </important>
   */
  @SpeakeasyMetadata()
  @Expose({ name: "Notifications" })
  @Type(() => UpdatePipelineRequestBodyNotifications)
  notifications?: UpdatePipelineRequestBodyNotifications;

  /**
   * The IAM Amazon Resource Name (ARN) for the role that you want Elastic Transcoder to use to transcode jobs for this pipeline.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "Role" })
  role?: string;

  /**
   * The <code>PipelineOutputConfig</code> structure.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "ThumbnailConfig" })
  @Type(() => UpdatePipelineRequestBodyThumbnailConfig)
  thumbnailConfig?: UpdatePipelineRequestBodyThumbnailConfig;
}

export class UpdatePipelineRequest extends SpeakeasyBase {
  /**
   * The ID of the pipeline that you want to update.
   */
  @SpeakeasyMetadata({ data: "pathParam, style=simple;explode=false;name=Id" })
  id: string;

  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  requestBody: UpdatePipelineRequestBody;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Algorithm",
  })
  xAmzAlgorithm?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Content-Sha256",
  })
  xAmzContentSha256?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Credential",
  })
  xAmzCredential?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Date",
  })
  xAmzDate?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Security-Token",
  })
  xAmzSecurityToken?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Signature",
  })
  xAmzSignature?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-SignedHeaders",
  })
  xAmzSignedHeaders?: string;
}

export class UpdatePipelineResponse extends SpeakeasyBase {
  /**
   * AccessDeniedException
   */
  @SpeakeasyMetadata()
  accessDeniedException?: any;

  @SpeakeasyMetadata()
  contentType: string;

  /**
   * IncompatibleVersionException
   */
  @SpeakeasyMetadata()
  incompatibleVersionException?: any;

  /**
   * InternalServiceException
   */
  @SpeakeasyMetadata()
  internalServiceException?: any;

  /**
   * ResourceInUseException
   */
  @SpeakeasyMetadata()
  resourceInUseException?: any;

  /**
   * ResourceNotFoundException
   */
  @SpeakeasyMetadata()
  resourceNotFoundException?: any;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * Success
   */
  @SpeakeasyMetadata()
  updatePipelineResponse?: shared.UpdatePipelineResponse;

  /**
   * ValidationException
   */
  @SpeakeasyMetadata()
  validationException?: any;
}
