/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class Authentication {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Authenticate a user
   *
   * @remarks
   * Start a session with Authentiq Connect to authenticate a user.
   *
   * ```
   * GET https://connect.authentiq.io/authorize?client_id=<your-client-id>&response_type=code+id_token&scope=openid+email&redirect_uri=<your-redirect-uri>&state=0123456789
   * ```
   *
   * This endpoint also supports the POST method.
   *
   *
   * @see {@link http://openid.net/specs/openid-connect-core-1_0.html#AuthorizationEndpoint} - OIDC Authorization Endpoint
   */
  authorize(
    req: operations.AuthorizeRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.AuthorizeResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AuthorizeRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/authorize";

    const client: AxiosInstance = this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AuthorizeResponse =
        new operations.AuthorizeResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case [302, 303].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Obtain an ID Token
   *
   * @remarks
   * Exchange en authorization code for an ID Token or Access Token.
   *
   * This endpoint supports both `client_secret_basic` (default) and `client_secret_basic` authentication methods, as specified by the client's `token_endpoint_auth_method`.
   *
   *
   * @see {@link http://openid.net/specs/openid-connect-core-1_0.html#TokenEndpoint} - OIDC Token Endpoint
   */
  token(
    req: operations.TokenRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.TokenResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.TokenRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/token";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "form"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._defaultClient;

    const headers = {
      ...utils.getHeadersFromRequest(req),
      ...reqBodyHeaders,
      ...config?.headers,
    };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.TokenResponse = new operations.TokenResponse({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
      });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.token = utils.objectToClass(httpRes?.data, shared.Token);
          }
          if (utils.matchContentType(contentType, `application/problem+json`)) {
            res.token = utils.objectToClass(httpRes?.data, shared.Token);
          }
          if (
            utils.matchContentType(
              contentType,
              `application/x-www-form-urlencoded`
            )
          ) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          if (utils.matchContentType(contentType, `text/html`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          break;
        case [400, 401].includes(httpRes?.status):
          if (
            utils.matchContentType(
              contentType,
              `application/x-www-form-urlencoded`
            )
          ) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          if (utils.matchContentType(contentType, `text/html`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          if (utils.matchContentType(contentType, `application/json`)) {
            res.oAuth2Error = utils.objectToClass(
              httpRes?.data,
              shared.OAuth2Error
            );
          }
          if (utils.matchContentType(contentType, `application/problem+json`)) {
            res.oAuth2Error = utils.objectToClass(
              httpRes?.data,
              shared.OAuth2Error
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Retrieve a user profile
   *
   * @remarks
   * Use this endpoint to retrieve a user's profile in case you are unable to parse an ID Token or you've not already obtained enough details from the ID Token via the Token Endpoint.
   *
   *
   * @see {@link http://openid.net/specs/openid-connect-core-1_0.html#UserInfo} - OIDC UserInfo Endpoint
   */
  userInfo(config?: AxiosRequestConfig): Promise<operations.UserInfoResponse> {
    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/userinfo";

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.UserInfoResponse = new operations.UserInfoResponse({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
      });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.userInfo = utils.objectToClass(httpRes?.data, shared.UserInfo);
          }
          if (utils.matchContentType(contentType, `application/problem+json`)) {
            res.userInfo = utils.objectToClass(httpRes?.data, shared.UserInfo);
          }
          if (
            utils.matchContentType(
              contentType,
              `application/x-www-form-urlencoded`
            )
          ) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          if (utils.matchContentType(contentType, `text/html`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          break;
        default:
          if (
            utils.matchContentType(
              contentType,
              `application/x-www-form-urlencoded`
            )
          ) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          if (utils.matchContentType(contentType, `text/html`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          if (utils.matchContentType(contentType, `application/json`)) {
            res.oAuth2Error = utils.objectToClass(
              httpRes?.data,
              shared.OAuth2Error
            );
          }
          if (utils.matchContentType(contentType, `application/problem+json`)) {
            res.oAuth2Error = utils.objectToClass(
              httpRes?.data,
              shared.OAuth2Error
            );
          }
          break;
      }

      return res;
    });
  }
}
