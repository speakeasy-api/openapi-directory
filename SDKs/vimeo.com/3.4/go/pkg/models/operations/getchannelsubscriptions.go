// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type GetChannelSubscriptionsPathParams struct {
	// The ID of the user.
	UserID float64 `pathParam:"style=simple,explode=false,name=user_id"`
}

// GetChannelSubscriptionsDirectionEnum - The sort direction of the results.
type GetChannelSubscriptionsDirectionEnum string

const (
	GetChannelSubscriptionsDirectionEnumAsc  GetChannelSubscriptionsDirectionEnum = "asc"
	GetChannelSubscriptionsDirectionEnumDesc GetChannelSubscriptionsDirectionEnum = "desc"
)

func (e *GetChannelSubscriptionsDirectionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "asc":
		fallthrough
	case "desc":
		*e = GetChannelSubscriptionsDirectionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetChannelSubscriptionsDirectionEnum: %s", s)
	}
}

// GetChannelSubscriptionsFilterEnum - The attribute by which to filter the results.
type GetChannelSubscriptionsFilterEnum string

const (
	GetChannelSubscriptionsFilterEnumModerated GetChannelSubscriptionsFilterEnum = "moderated"
)

func (e *GetChannelSubscriptionsFilterEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "moderated":
		*e = GetChannelSubscriptionsFilterEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetChannelSubscriptionsFilterEnum: %s", s)
	}
}

// GetChannelSubscriptionsSortEnum - The way to sort the results.
type GetChannelSubscriptionsSortEnum string

const (
	GetChannelSubscriptionsSortEnumAlphabetical GetChannelSubscriptionsSortEnum = "alphabetical"
	GetChannelSubscriptionsSortEnumDate         GetChannelSubscriptionsSortEnum = "date"
	GetChannelSubscriptionsSortEnumFollowers    GetChannelSubscriptionsSortEnum = "followers"
	GetChannelSubscriptionsSortEnumVideos       GetChannelSubscriptionsSortEnum = "videos"
)

func (e *GetChannelSubscriptionsSortEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "alphabetical":
		fallthrough
	case "date":
		fallthrough
	case "followers":
		fallthrough
	case "videos":
		*e = GetChannelSubscriptionsSortEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetChannelSubscriptionsSortEnum: %s", s)
	}
}

type GetChannelSubscriptionsQueryParams struct {
	// The sort direction of the results.
	Direction *GetChannelSubscriptionsDirectionEnum `queryParam:"style=form,explode=true,name=direction"`
	// The attribute by which to filter the results.
	Filter *GetChannelSubscriptionsFilterEnum `queryParam:"style=form,explode=true,name=filter"`
	// The page number of the results to show.
	Page *float64 `queryParam:"style=form,explode=true,name=page"`
	// The number of items to show on each page of results, up to a maximum of 100.
	PerPage *float64 `queryParam:"style=form,explode=true,name=per_page"`
	// The search query to use to filter the results.
	Query *string `queryParam:"style=form,explode=true,name=query"`
	// The way to sort the results.
	Sort *GetChannelSubscriptionsSortEnum `queryParam:"style=form,explode=true,name=sort"`
}

type GetChannelSubscriptionsRequest struct {
	PathParams  GetChannelSubscriptionsPathParams
	QueryParams GetChannelSubscriptionsQueryParams
}

type GetChannelSubscriptionsResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// The channels were returned.
	Channels []shared.Channel
}
