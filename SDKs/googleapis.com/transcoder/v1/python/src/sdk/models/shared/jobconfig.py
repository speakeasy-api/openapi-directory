"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import adbreak as shared_adbreak
from ..shared import editatom as shared_editatom
from ..shared import elementarystream as shared_elementarystream
from ..shared import input as shared_input
from ..shared import manifest as shared_manifest
from ..shared import muxstream as shared_muxstream
from ..shared import output as shared_output
from ..shared import overlay as shared_overlay
from ..shared import pubsubdestination as shared_pubsubdestination
from ..shared import spritesheet as shared_spritesheet
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class JobConfig:
    r"""Job configuration"""
    
    ad_breaks: Optional[list[shared_adbreak.AdBreak]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('adBreaks'), 'exclude': lambda f: f is None }})
    r"""List of ad breaks. Specifies where to insert ad break tags in the output manifests."""  
    edit_list: Optional[list[shared_editatom.EditAtom]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('editList'), 'exclude': lambda f: f is None }})
    r"""List of `Edit atom`s. Defines the ultimate timeline of the resulting file or manifest."""  
    elementary_streams: Optional[list[shared_elementarystream.ElementaryStream]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('elementaryStreams'), 'exclude': lambda f: f is None }})
    r"""List of elementary streams."""  
    inputs: Optional[list[shared_input.Input]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('inputs'), 'exclude': lambda f: f is None }})
    r"""List of input assets stored in Cloud Storage."""  
    manifests: Optional[list[shared_manifest.Manifest]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('manifests'), 'exclude': lambda f: f is None }})
    r"""List of output manifests."""  
    mux_streams: Optional[list[shared_muxstream.MuxStream]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('muxStreams'), 'exclude': lambda f: f is None }})
    r"""List of multiplexing settings for output streams."""  
    output: Optional[shared_output.Output] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('output'), 'exclude': lambda f: f is None }})
    r"""Location of output file(s) in a Cloud Storage bucket."""  
    overlays: Optional[list[shared_overlay.Overlay]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('overlays'), 'exclude': lambda f: f is None }})
    r"""List of overlays on the output video, in descending Z-order."""  
    pubsub_destination: Optional[shared_pubsubdestination.PubsubDestination] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('pubsubDestination'), 'exclude': lambda f: f is None }})
    r"""A Pub/Sub destination."""  
    sprite_sheets: Optional[list[shared_spritesheet.SpriteSheet]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('spriteSheets'), 'exclude': lambda f: f is None }})
    r"""List of output sprite sheets. Spritesheets require at least one VideoStream in the Jobconfig."""  
    