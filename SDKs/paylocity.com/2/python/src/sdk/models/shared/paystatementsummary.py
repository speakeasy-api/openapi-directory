"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PayStatementSummary:
    r"""The pay statement summary model"""
    
    auto_pay: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('autoPay'), 'exclude': lambda f: f is None }})
    r""".<br />"""  
    begin_date: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('beginDate'), 'exclude': lambda f: f is None }})
    r""".<br />"""  
    check_date: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('checkDate'), 'exclude': lambda f: f is None }})
    r""".<br />"""  
    check_number: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('checkNumber'), 'exclude': lambda f: f is None }})
    r""".<br />"""  
    direct_deposit_amount: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('directDepositAmount'), 'exclude': lambda f: f is None }})
    r""".<br />"""  
    end_date: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('endDate'), 'exclude': lambda f: f is None }})
    r""".<br />"""  
    gross_pay: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('grossPay'), 'exclude': lambda f: f is None }})
    r""".<br />"""  
    hours: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('hours'), 'exclude': lambda f: f is None }})
    r""".<br />"""  
    net_check: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('netCheck'), 'exclude': lambda f: f is None }})
    r""".<br />"""  
    net_pay: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('netPay'), 'exclude': lambda f: f is None }})
    r""".<br />"""  
    overtime_dollars: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('overtimeDollars'), 'exclude': lambda f: f is None }})
    r""".<br />"""  
    overtime_hours: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('overtimeHours'), 'exclude': lambda f: f is None }})
    r""".<br />"""  
    process: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('process'), 'exclude': lambda f: f is None }})
    r""".<br />"""  
    regular_dollars: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('regularDollars'), 'exclude': lambda f: f is None }})
    r""".<br />"""  
    regular_hours: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('regularHours'), 'exclude': lambda f: f is None }})
    r""".<br />"""  
    transaction_number: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('transactionNumber'), 'exclude': lambda f: f is None }})
    r"""<br />"""  
    voucher_number: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('voucherNumber'), 'exclude': lambda f: f is None }})
    r""".<br />"""  
    workers_comp_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('workersCompCode'), 'exclude': lambda f: f is None }})
    r""".<br />"""  
    year: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('year'), 'exclude': lambda f: f is None }})
    r""".<br />"""  
    