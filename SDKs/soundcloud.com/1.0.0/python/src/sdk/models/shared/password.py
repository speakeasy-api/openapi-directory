"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from enum import Enum
from typing import Optional

class PasswordGrantTypeEnum(str, Enum):
    PASSWORD = 'password'


@dataclasses.dataclass
class Password:
    
    client_id: Optional[str] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'client_id' }})
    r"""Client ID"""  
    client_secret: Optional[str] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'client_secret' }})
    r"""Client secret"""  
    grant_type: Optional[PasswordGrantTypeEnum] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'grant_type' }})  
    password: Optional[str] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'password' }})
    r"""User password"""  
    redirect_uri: Optional[str] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'redirect_uri' }})
    r"""Redirect URI"""  
    user_name: Optional[str] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'user_name' }})
    r"""User name"""  
    