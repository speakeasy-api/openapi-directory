"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import googleprivacydlpv2deltapresenceestimationquasiidvalues as shared_googleprivacydlpv2deltapresenceestimationquasiidvalues
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GooglePrivacyDlpV2DeltaPresenceEstimationHistogramBucket:
    r"""A DeltaPresenceEstimationHistogramBucket message with the following values: min_probability: 0.1 max_probability: 0.2 frequency: 42 means that there are 42 records for which Î´ is in [0.1, 0.2). An important particular case is when min_probability = max_probability = 1: then, every individual who shares this quasi-identifier combination is in the dataset."""
    
    bucket_size: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bucketSize'), 'exclude': lambda f: f is None }})
    r"""Number of records within these probability bounds."""  
    bucket_value_count: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bucketValueCount'), 'exclude': lambda f: f is None }})
    r"""Total number of distinct quasi-identifier tuple values in this bucket."""  
    bucket_values: Optional[list[shared_googleprivacydlpv2deltapresenceestimationquasiidvalues.GooglePrivacyDlpV2DeltaPresenceEstimationQuasiIDValues]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bucketValues'), 'exclude': lambda f: f is None }})
    r"""Sample of quasi-identifier tuple values in this bucket. The total number of classes returned per bucket is capped at 20."""  
    max_probability: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('maxProbability'), 'exclude': lambda f: f is None }})
    r"""Always greater than or equal to min_probability."""  
    min_probability: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('minProbability'), 'exclude': lambda f: f is None }})
    r"""Between 0 and 1."""  
    