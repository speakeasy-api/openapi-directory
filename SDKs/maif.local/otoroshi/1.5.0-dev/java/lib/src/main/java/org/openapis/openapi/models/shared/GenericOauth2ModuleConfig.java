/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * GenericOauth2ModuleConfig - Settings to authenticate users using a generic OAuth2 provider
 */
public class GenericOauth2ModuleConfig {
    /**
     * Field name to get access token
     */
    @JsonProperty("accessTokenField")
    public String accessTokenField;

    public GenericOauth2ModuleConfig withAccessTokenField(String accessTokenField) {
        this.accessTokenField = accessTokenField;
        return this;
    }
    
    /**
     * OAuth authorize URL
     */
    @JsonProperty("authorizeUrl")
    public String authorizeUrl;

    public GenericOauth2ModuleConfig withAuthorizeUrl(String authorizeUrl) {
        this.authorizeUrl = authorizeUrl;
        return this;
    }
    
    /**
     * Otoroshi callback URL
     */
    @JsonProperty("callbackUrl")
    public String callbackUrl;

    public GenericOauth2ModuleConfig withCallbackUrl(String callbackUrl) {
        this.callbackUrl = callbackUrl;
        return this;
    }
    
    /**
     * The claims of the token
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("claims")
    public String claims;

    public GenericOauth2ModuleConfig withClaims(String claims) {
        this.claims = claims;
        return this;
    }
    
    /**
     * OAuth Client id
     */
    @JsonProperty("clientId")
    public String clientId;

    public GenericOauth2ModuleConfig withClientId(String clientId) {
        this.clientId = clientId;
        return this;
    }
    
    /**
     * OAuth Client secret
     */
    @JsonProperty("clientSecret")
    public String clientSecret;

    public GenericOauth2ModuleConfig withClientSecret(String clientSecret) {
        this.clientSecret = clientSecret;
        return this;
    }
    
    /**
     * Description of the config
     */
    @JsonProperty("desc")
    public String desc;

    public GenericOauth2ModuleConfig withDesc(String desc) {
        this.desc = desc;
        return this;
    }
    
    /**
     * Field name to get email from user profile
     */
    @JsonProperty("emailField")
    public String emailField;

    public GenericOauth2ModuleConfig withEmailField(String emailField) {
        this.emailField = emailField;
        return this;
    }
    
    /**
     * Unique id of the config
     */
    @JsonProperty("id")
    public String id;

    public GenericOauth2ModuleConfig withId(String id) {
        this.id = id;
        return this;
    }
    
    /**
     * Algo. settings to verify JWT token
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("jwtVerifier")
    public Object jwtVerifier;

    public GenericOauth2ModuleConfig withJwtVerifier(Object jwtVerifier) {
        this.jwtVerifier = jwtVerifier;
        return this;
    }
    
    /**
     * OAuth login URL
     */
    @JsonProperty("loginUrl")
    public String loginUrl;

    public GenericOauth2ModuleConfig withLoginUrl(String loginUrl) {
        this.loginUrl = loginUrl;
        return this;
    }
    
    /**
     * OAuth logout URL
     */
    @JsonProperty("logoutUrl")
    public String logoutUrl;

    public GenericOauth2ModuleConfig withLogoutUrl(String logoutUrl) {
        this.logoutUrl = logoutUrl;
        return this;
    }
    
    /**
     * Name of the config
     */
    @JsonProperty("name")
    public String name;

    public GenericOauth2ModuleConfig withName(String name) {
        this.name = name;
        return this;
    }
    
    /**
     * Field name to get name from user profile
     */
    @JsonProperty("nameField")
    public String nameField;

    public GenericOauth2ModuleConfig withNameField(String nameField) {
        this.nameField = nameField;
        return this;
    }
    
    /**
     * URL of the OIDC config. file
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("oidConfig")
    public String oidConfig;

    public GenericOauth2ModuleConfig withOidConfig(String oidConfig) {
        this.oidConfig = oidConfig;
        return this;
    }
    
    /**
     * Field name to get otoroshi metadata from. You can specify sub fields using | as separator
     */
    @JsonProperty("otoroshiDataField")
    public String otoroshiDataField;

    public GenericOauth2ModuleConfig withOtoroshiDataField(String otoroshiDataField) {
        this.otoroshiDataField = otoroshiDataField;
        return this;
    }
    
    /**
     * The user profile will be read from the JWT token in id_token
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("readProfileFromToken")
    public Boolean readProfileFromToken;

    public GenericOauth2ModuleConfig withReadProfileFromToken(Boolean readProfileFromToken) {
        this.readProfileFromToken = readProfileFromToken;
        return this;
    }
    
    /**
     * The scope of the token
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("scope")
    public String scope;

    public GenericOauth2ModuleConfig withScope(String scope) {
        this.scope = scope;
        return this;
    }
    
    /**
     * Max age of the session
     */
    @JsonProperty("sessionMaxAge")
    public Integer sessionMaxAge;

    public GenericOauth2ModuleConfig withSessionMaxAge(Integer sessionMaxAge) {
        this.sessionMaxAge = sessionMaxAge;
        return this;
    }
    
    /**
     * OAuth token URL
     */
    @JsonProperty("tokenUrl")
    public String tokenUrl;

    public GenericOauth2ModuleConfig withTokenUrl(String tokenUrl) {
        this.tokenUrl = tokenUrl;
        return this;
    }
    
    /**
     * Type of settings. value is oauth2
     */
    @JsonProperty("type")
    public String type;

    public GenericOauth2ModuleConfig withType(String type) {
        this.type = type;
        return this;
    }
    
    /**
     * Use for redirection to actual service
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("useCookies")
    public Boolean useCookies;

    public GenericOauth2ModuleConfig withUseCookies(Boolean useCookies) {
        this.useCookies = useCookies;
        return this;
    }
    
    /**
     * Use JSON or URL Form Encoded as payload with the OAuth provider
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("useJson")
    public Boolean useJson;

    public GenericOauth2ModuleConfig withUseJson(Boolean useJson) {
        this.useJson = useJson;
        return this;
    }
    
    /**
     * OAuth userinfo to get user profile
     */
    @JsonProperty("userInfoUrl")
    public String userInfoUrl;

    public GenericOauth2ModuleConfig withUserInfoUrl(String userInfoUrl) {
        this.userInfoUrl = userInfoUrl;
        return this;
    }
    
    public GenericOauth2ModuleConfig(@JsonProperty("accessTokenField") String accessTokenField, @JsonProperty("authorizeUrl") String authorizeUrl, @JsonProperty("callbackUrl") String callbackUrl, @JsonProperty("clientId") String clientId, @JsonProperty("clientSecret") String clientSecret, @JsonProperty("desc") String desc, @JsonProperty("emailField") String emailField, @JsonProperty("id") String id, @JsonProperty("loginUrl") String loginUrl, @JsonProperty("logoutUrl") String logoutUrl, @JsonProperty("name") String name, @JsonProperty("nameField") String nameField, @JsonProperty("otoroshiDataField") String otoroshiDataField, @JsonProperty("sessionMaxAge") Integer sessionMaxAge, @JsonProperty("tokenUrl") String tokenUrl, @JsonProperty("type") String type, @JsonProperty("userInfoUrl") String userInfoUrl) {
        this.accessTokenField = accessTokenField;
        this.authorizeUrl = authorizeUrl;
        this.callbackUrl = callbackUrl;
        this.clientId = clientId;
        this.clientSecret = clientSecret;
        this.desc = desc;
        this.emailField = emailField;
        this.id = id;
        this.loginUrl = loginUrl;
        this.logoutUrl = logoutUrl;
        this.name = name;
        this.nameField = nameField;
        this.otoroshiDataField = otoroshiDataField;
        this.sessionMaxAge = sessionMaxAge;
        this.tokenUrl = tokenUrl;
        this.type = type;
        this.userInfoUrl = userInfoUrl;
  }
}
