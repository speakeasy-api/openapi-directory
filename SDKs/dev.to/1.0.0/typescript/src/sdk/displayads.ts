/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class DisplayAds {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * display ads
   *
   * @remarks
   * This endpoint allows the client to retrieve a list of all display ads.
   */
  getApiDisplayAds(
    config?: AxiosRequestConfig
  ): Promise<operations.GetApiDisplayAdsResponse> {
    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/api/display_ads";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetApiDisplayAdsResponse =
        new operations.GetApiDisplayAdsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case [200, 401].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * display ad
   *
   * @remarks
   * This endpoint allows the client to retrieve a single display ad, via its id.
   */
  getApiDisplayAdsId(
    req: operations.GetApiDisplayAdsIdRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetApiDisplayAdsIdResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetApiDisplayAdsIdRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/api/display_ads/{id}",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetApiDisplayAdsIdResponse =
        new operations.GetApiDisplayAdsIdResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case [200, 401, 404].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * display ads
   *
   * @remarks
   * This endpoint allows the client to create a new display ad.
   */
  postApiDisplayAds(
    req: operations.PostApiDisplayAdsRequestBody,
    config?: AxiosRequestConfig
  ): Promise<operations.PostApiDisplayAdsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PostApiDisplayAdsRequestBody(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/api/display_ads";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PostApiDisplayAdsResponse =
        new operations.PostApiDisplayAdsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case [200, 401, 422].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * display ads
   *
   * @remarks
   * This endpoint allows the client to update the attributes of a single display ad, via its id.
   */
  putApiDisplayAdsId(
    req: operations.PutApiDisplayAdsIdRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.PutApiDisplayAdsIdResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PutApiDisplayAdsIdRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/api/display_ads/{id}",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "put",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PutApiDisplayAdsIdResponse =
        new operations.PutApiDisplayAdsIdResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case [200, 401, 404].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * unpublish
   *
   * @remarks
   * This endpoint allows the client to remove a display ad from rotation by un-publishing it.
   */
  putApiDisplayAdsIdUnpublish(
    req: operations.PutApiDisplayAdsIdUnpublishRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.PutApiDisplayAdsIdUnpublishResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PutApiDisplayAdsIdUnpublishRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/api/display_ads/{id}/unpublish",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "put",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PutApiDisplayAdsIdUnpublishResponse =
        new operations.PutApiDisplayAdsIdUnpublishResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case [204, 401, 404].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }
}
