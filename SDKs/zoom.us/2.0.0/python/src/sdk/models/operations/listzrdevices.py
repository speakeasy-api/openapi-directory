"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional


@dataclasses.dataclass
class ListZRDevicesSecurity:
    
    o_auth: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'oauth2', 'field_name': 'Authorization' }})  
    

@dataclasses.dataclass
class ListZRDevicesRequest:
    
    room_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'roomId', 'style': 'simple', 'explode': False }})
    r"""Unique Identifier of the Zoom Room. This can be retrieved from the response of [List Zoom Rooms](https://marketplace.zoom.us/docs/api-reference/zoom-api/rooms/listzoomrooms) API."""  
    
class ListZRDevices200ApplicationXMLDevicesDeviceTypeEnum(str, Enum):
    r"""Type of the device. The value of this field can be one of the following:<br>`Zoom Rooms Computer`,<br> `Controller`, `Scheduling Display`, `Zoom Rooms Control System`, `Companion Whiteboard`"""
    ZOOM_ROOMS_COMPUTER = 'Zoom Rooms Computer'
    CONTROLLER = 'Controller'
    SCHEDULING_DISPLAY = 'Scheduling Display'
    ZOOM_ROOMS_CONTROL_SYSTEM = 'Zoom Rooms Control System'
    COMPANION_WHITEBOARD = 'Companion Whiteboard'

class ListZRDevices200ApplicationXMLDevicesStatusEnum(str, Enum):
    r"""Status of the device. The value can be either `Online` or `Offline`."""
    ONLINE = 'Online'
    OFFLINE = 'Offline'


@dataclasses.dataclass
class ListZRDevices200ApplicationXMLDevices:
    
    app_version: Optional[str] = dataclasses.field(default=None)
    r"""App version of Zoom Rooms."""  
    device_system: Optional[str] = dataclasses.field(default=None)
    r"""Operating system of the device."""  
    device_type: Optional[ListZRDevices200ApplicationXMLDevicesDeviceTypeEnum] = dataclasses.field(default=None)
    r"""Type of the device. The value of this field can be one of the following:<br>`Zoom Rooms Computer`,<br> `Controller`, `Scheduling Display`, `Zoom Rooms Control System`, `Companion Whiteboard`"""  
    id: Optional[str] = dataclasses.field(default=None)
    r"""Unique identifier of the device."""  
    room_name: Optional[str] = dataclasses.field(default=None)
    r"""Name of the Zoom Room."""  
    status: Optional[ListZRDevices200ApplicationXMLDevicesStatusEnum] = dataclasses.field(default=None)
    r"""Status of the device. The value can be either `Online` or `Offline`."""  
    

@dataclasses.dataclass
class ListZRDevices200ApplicationXML:
    r"""**HTTP Status Code:** `200` **OK**
    Devices listed successfully.
    """
    
    devices: Optional[list[ListZRDevices200ApplicationXMLDevices]] = dataclasses.field(default=None)  
    
class ListZRDevices200ApplicationJSONDevicesDeviceTypeEnum(str, Enum):
    r"""Type of the device. The value of this field can be one of the following:<br>`Zoom Rooms Computer`,<br> `Controller`, `Scheduling Display`, `Zoom Rooms Control System`, `Companion Whiteboard`"""
    ZOOM_ROOMS_COMPUTER = 'Zoom Rooms Computer'
    CONTROLLER = 'Controller'
    SCHEDULING_DISPLAY = 'Scheduling Display'
    ZOOM_ROOMS_CONTROL_SYSTEM = 'Zoom Rooms Control System'
    COMPANION_WHITEBOARD = 'Companion Whiteboard'

class ListZRDevices200ApplicationJSONDevicesStatusEnum(str, Enum):
    r"""Status of the device. The value can be either `Online` or `Offline`."""
    ONLINE = 'Online'
    OFFLINE = 'Offline'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ListZRDevices200ApplicationJSONDevices:
    
    app_version: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('app_version'), 'exclude': lambda f: f is None }})
    r"""App version of Zoom Rooms."""  
    device_system: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('device_system'), 'exclude': lambda f: f is None }})
    r"""Operating system of the device."""  
    device_type: Optional[ListZRDevices200ApplicationJSONDevicesDeviceTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('device_type'), 'exclude': lambda f: f is None }})
    r"""Type of the device. The value of this field can be one of the following:<br>`Zoom Rooms Computer`,<br> `Controller`, `Scheduling Display`, `Zoom Rooms Control System`, `Companion Whiteboard`"""  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""Unique identifier of the device."""  
    room_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('room_name'), 'exclude': lambda f: f is None }})
    r"""Name of the Zoom Room."""  
    status: Optional[ListZRDevices200ApplicationJSONDevicesStatusEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status'), 'exclude': lambda f: f is None }})
    r"""Status of the device. The value can be either `Online` or `Offline`."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ListZRDevices200ApplicationJSON:
    r"""**HTTP Status Code:** `200` **OK**
    Devices listed successfully.
    """
    
    devices: Optional[list[ListZRDevices200ApplicationJSONDevices]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('devices'), 'exclude': lambda f: f is None }})  
    

@dataclasses.dataclass
class ListZRDevicesResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    body: Optional[bytes] = dataclasses.field(default=None)  
    list_zr_devices_200_application_json_object: Optional[ListZRDevices200ApplicationJSON] = dataclasses.field(default=None)
    r"""**HTTP Status Code:** `200` **OK**
    Devices listed successfully.
    """  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    