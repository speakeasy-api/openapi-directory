// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type ArimaForecastingMetricsSeasonalPeriodsEnum string

const (
	ArimaForecastingMetricsSeasonalPeriodsEnumSeasonalPeriodTypeUnspecified ArimaForecastingMetricsSeasonalPeriodsEnum = "SEASONAL_PERIOD_TYPE_UNSPECIFIED"
	ArimaForecastingMetricsSeasonalPeriodsEnumNoSeasonality                 ArimaForecastingMetricsSeasonalPeriodsEnum = "NO_SEASONALITY"
	ArimaForecastingMetricsSeasonalPeriodsEnumDaily                         ArimaForecastingMetricsSeasonalPeriodsEnum = "DAILY"
	ArimaForecastingMetricsSeasonalPeriodsEnumWeekly                        ArimaForecastingMetricsSeasonalPeriodsEnum = "WEEKLY"
	ArimaForecastingMetricsSeasonalPeriodsEnumMonthly                       ArimaForecastingMetricsSeasonalPeriodsEnum = "MONTHLY"
	ArimaForecastingMetricsSeasonalPeriodsEnumQuarterly                     ArimaForecastingMetricsSeasonalPeriodsEnum = "QUARTERLY"
	ArimaForecastingMetricsSeasonalPeriodsEnumYearly                        ArimaForecastingMetricsSeasonalPeriodsEnum = "YEARLY"
)

func (e *ArimaForecastingMetricsSeasonalPeriodsEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "SEASONAL_PERIOD_TYPE_UNSPECIFIED":
		fallthrough
	case "NO_SEASONALITY":
		fallthrough
	case "DAILY":
		fallthrough
	case "WEEKLY":
		fallthrough
	case "MONTHLY":
		fallthrough
	case "QUARTERLY":
		fallthrough
	case "YEARLY":
		*e = ArimaForecastingMetricsSeasonalPeriodsEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ArimaForecastingMetricsSeasonalPeriodsEnum: %s", s)
	}
}

// ArimaForecastingMetrics - Model evaluation metrics for ARIMA forecasting models.
type ArimaForecastingMetrics struct {
	// Arima model fitting metrics.
	ArimaFittingMetrics []ArimaFittingMetrics `json:"arimaFittingMetrics,omitempty"`
	// Repeated as there can be many metric sets (one for each model) in auto-arima and the large-scale case.
	ArimaSingleModelForecastingMetrics []ArimaSingleModelForecastingMetrics `json:"arimaSingleModelForecastingMetrics,omitempty"`
	// Whether Arima model fitted with drift or not. It is always false when d is not 1.
	HasDrift []bool `json:"hasDrift,omitempty"`
	// Non-seasonal order.
	NonSeasonalOrder []ArimaOrder `json:"nonSeasonalOrder,omitempty"`
	// Seasonal periods. Repeated because multiple periods are supported for one time series.
	SeasonalPeriods []ArimaForecastingMetricsSeasonalPeriodsEnum `json:"seasonalPeriods,omitempty"`
	// Id to differentiate different time series for the large-scale case.
	TimeSeriesID []string `json:"timeSeriesId,omitempty"`
}
