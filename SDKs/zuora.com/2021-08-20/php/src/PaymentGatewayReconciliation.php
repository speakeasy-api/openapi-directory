<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class PaymentGatewayReconciliation 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Reconcile a refund
     * 
     * Reconciles a refund when receiving the gateway reconciliation request or event.
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\POSTReconcileRefundRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\POSTReconcileRefundResponse
     */
	public function postReconcileRefund(
        \OpenAPI\OpenAPI\Models\Operations\POSTReconcileRefundRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\POSTReconcileRefundResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/refunds/{refund-id}/reconcile', \OpenAPI\OpenAPI\Models\Operations\POSTReconcileRefundRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "postReconcileRefundRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\POSTReconcileRefundResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json; charset=utf-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->postReconcileRefundResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\POSTReconcileRefundResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Reject a payment
     * 
     * Sets the Payment status to "Rejected", creates a refund for the payment amount, and returns the Refund object as response.
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\POSTRejectPaymentRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\POSTRejectPaymentResponse
     */
	public function postRejectPayment(
        \OpenAPI\OpenAPI\Models\Operations\POSTRejectPaymentRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\POSTRejectPaymentResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/gateway-settlement/payments/{payment-id}/reject', \OpenAPI\OpenAPI\Models\Operations\POSTRejectPaymentRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "postRejectPaymentRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\POSTRejectPaymentResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json; charset=utf-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->postRejectPaymentResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\POSTRejectPaymentResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Reverse a payment
     * 
     * Sets the Payment status to "Reversed", creates a refund for the amount specified in the request, and returns the Refund object as response.
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\POSTReversePaymentRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\POSTReversePaymentResponse
     */
	public function postReversePayment(
        \OpenAPI\OpenAPI\Models\Operations\POSTReversePaymentRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\POSTReversePaymentResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/gateway-settlement/payments/{payment-id}/chargeback', \OpenAPI\OpenAPI\Models\Operations\POSTReversePaymentRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "postReversePaymentRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\POSTReversePaymentResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json; charset=utf-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->postReversePaymentResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\POSTReversePaymentResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Settle a payment
     * 
     * Sets the Payment status to "Settled" and returns the Payment object as response.
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\POSTSettlePaymentRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\POSTSettlePaymentResponse
     */
	public function postSettlePayment(
        \OpenAPI\OpenAPI\Models\Operations\POSTSettlePaymentRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\POSTSettlePaymentResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/gateway-settlement/payments/{payment-id}/settle', \OpenAPI\OpenAPI\Models\Operations\POSTSettlePaymentRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "postSettlePaymentRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\POSTSettlePaymentResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json; charset=utf-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->postSettlePaymentResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\POSTSettlePaymentResponse', 'json');
            }
        }

        return $response;
    }
}