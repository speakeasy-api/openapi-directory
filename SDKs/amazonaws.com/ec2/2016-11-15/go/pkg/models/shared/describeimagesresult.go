// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// DescribeImagesResultImagesArchitectureEnum - The architecture of the image.
type DescribeImagesResultImagesArchitectureEnum string

const (
	DescribeImagesResultImagesArchitectureEnumI386     DescribeImagesResultImagesArchitectureEnum = "i386"
	DescribeImagesResultImagesArchitectureEnumX8664    DescribeImagesResultImagesArchitectureEnum = "x86_64"
	DescribeImagesResultImagesArchitectureEnumArm64    DescribeImagesResultImagesArchitectureEnum = "arm64"
	DescribeImagesResultImagesArchitectureEnumX8664Mac DescribeImagesResultImagesArchitectureEnum = "x86_64_mac"
	DescribeImagesResultImagesArchitectureEnumArm64Mac DescribeImagesResultImagesArchitectureEnum = "arm64_mac"
)

func (e DescribeImagesResultImagesArchitectureEnum) ToPointer() *DescribeImagesResultImagesArchitectureEnum {
	return &e
}

func (e *DescribeImagesResultImagesArchitectureEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "i386":
		fallthrough
	case "x86_64":
		fallthrough
	case "arm64":
		fallthrough
	case "x86_64_mac":
		fallthrough
	case "arm64_mac":
		*e = DescribeImagesResultImagesArchitectureEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DescribeImagesResultImagesArchitectureEnum: %v", v)
	}
}

// DescribeImagesResultImagesBlockDeviceMappingsEbsVolumeTypeEnum - The volume type. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSVolumeTypes.html">Amazon EBS volume types</a> in the <i>Amazon EC2 User Guide</i>. If the volume type is <code>io1</code> or <code>io2</code>, you must specify the IOPS that the volume supports.
type DescribeImagesResultImagesBlockDeviceMappingsEbsVolumeTypeEnum string

const (
	DescribeImagesResultImagesBlockDeviceMappingsEbsVolumeTypeEnumStandard DescribeImagesResultImagesBlockDeviceMappingsEbsVolumeTypeEnum = "standard"
	DescribeImagesResultImagesBlockDeviceMappingsEbsVolumeTypeEnumIo1      DescribeImagesResultImagesBlockDeviceMappingsEbsVolumeTypeEnum = "io1"
	DescribeImagesResultImagesBlockDeviceMappingsEbsVolumeTypeEnumIo2      DescribeImagesResultImagesBlockDeviceMappingsEbsVolumeTypeEnum = "io2"
	DescribeImagesResultImagesBlockDeviceMappingsEbsVolumeTypeEnumGp2      DescribeImagesResultImagesBlockDeviceMappingsEbsVolumeTypeEnum = "gp2"
	DescribeImagesResultImagesBlockDeviceMappingsEbsVolumeTypeEnumSc1      DescribeImagesResultImagesBlockDeviceMappingsEbsVolumeTypeEnum = "sc1"
	DescribeImagesResultImagesBlockDeviceMappingsEbsVolumeTypeEnumSt1      DescribeImagesResultImagesBlockDeviceMappingsEbsVolumeTypeEnum = "st1"
	DescribeImagesResultImagesBlockDeviceMappingsEbsVolumeTypeEnumGp3      DescribeImagesResultImagesBlockDeviceMappingsEbsVolumeTypeEnum = "gp3"
)

func (e DescribeImagesResultImagesBlockDeviceMappingsEbsVolumeTypeEnum) ToPointer() *DescribeImagesResultImagesBlockDeviceMappingsEbsVolumeTypeEnum {
	return &e
}

func (e *DescribeImagesResultImagesBlockDeviceMappingsEbsVolumeTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "standard":
		fallthrough
	case "io1":
		fallthrough
	case "io2":
		fallthrough
	case "gp2":
		fallthrough
	case "sc1":
		fallthrough
	case "st1":
		fallthrough
	case "gp3":
		*e = DescribeImagesResultImagesBlockDeviceMappingsEbsVolumeTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DescribeImagesResultImagesBlockDeviceMappingsEbsVolumeTypeEnum: %v", v)
	}
}

// DescribeImagesResultImagesBlockDeviceMappingsEbs - Parameters used to automatically set up EBS volumes when the instance is launched.
type DescribeImagesResultImagesBlockDeviceMappingsEbs struct {
	DeleteOnTermination *bool
	Encrypted           *bool
	Iops                *int64
	KmsKeyID            *string
	OutpostArn          *string
	SnapshotID          *string
	Throughput          *int64
	VolumeSize          *int64
	VolumeType          *DescribeImagesResultImagesBlockDeviceMappingsEbsVolumeTypeEnum
}

// DescribeImagesResultImagesBlockDeviceMappings - Describes a block device mapping, which defines the EBS volumes and instance store volumes to attach to an instance at launch.
type DescribeImagesResultImagesBlockDeviceMappings struct {
	DeviceName  *string
	Ebs         *DescribeImagesResultImagesBlockDeviceMappingsEbs
	NoDevice    *string
	VirtualName *string
}

// DescribeImagesResultImagesBootModeEnum - The boot mode of the image. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ami-boot.html">Boot modes</a> in the <i>Amazon EC2 User Guide</i>.
type DescribeImagesResultImagesBootModeEnum string

const (
	DescribeImagesResultImagesBootModeEnumLegacyBios    DescribeImagesResultImagesBootModeEnum = "legacy-bios"
	DescribeImagesResultImagesBootModeEnumUefi          DescribeImagesResultImagesBootModeEnum = "uefi"
	DescribeImagesResultImagesBootModeEnumUefiPreferred DescribeImagesResultImagesBootModeEnum = "uefi-preferred"
)

func (e DescribeImagesResultImagesBootModeEnum) ToPointer() *DescribeImagesResultImagesBootModeEnum {
	return &e
}

func (e *DescribeImagesResultImagesBootModeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "legacy-bios":
		fallthrough
	case "uefi":
		fallthrough
	case "uefi-preferred":
		*e = DescribeImagesResultImagesBootModeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DescribeImagesResultImagesBootModeEnum: %v", v)
	}
}

// DescribeImagesResultImagesHypervisorEnum - The hypervisor type of the image.
type DescribeImagesResultImagesHypervisorEnum string

const (
	DescribeImagesResultImagesHypervisorEnumOvm DescribeImagesResultImagesHypervisorEnum = "ovm"
	DescribeImagesResultImagesHypervisorEnumXen DescribeImagesResultImagesHypervisorEnum = "xen"
)

func (e DescribeImagesResultImagesHypervisorEnum) ToPointer() *DescribeImagesResultImagesHypervisorEnum {
	return &e
}

func (e *DescribeImagesResultImagesHypervisorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ovm":
		fallthrough
	case "xen":
		*e = DescribeImagesResultImagesHypervisorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DescribeImagesResultImagesHypervisorEnum: %v", v)
	}
}

// DescribeImagesResultImagesImageTypeEnum - The type of image.
type DescribeImagesResultImagesImageTypeEnum string

const (
	DescribeImagesResultImagesImageTypeEnumMachine DescribeImagesResultImagesImageTypeEnum = "machine"
	DescribeImagesResultImagesImageTypeEnumKernel  DescribeImagesResultImagesImageTypeEnum = "kernel"
	DescribeImagesResultImagesImageTypeEnumRamdisk DescribeImagesResultImagesImageTypeEnum = "ramdisk"
)

func (e DescribeImagesResultImagesImageTypeEnum) ToPointer() *DescribeImagesResultImagesImageTypeEnum {
	return &e
}

func (e *DescribeImagesResultImagesImageTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "machine":
		fallthrough
	case "kernel":
		fallthrough
	case "ramdisk":
		*e = DescribeImagesResultImagesImageTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DescribeImagesResultImagesImageTypeEnum: %v", v)
	}
}

// DescribeImagesResultImagesImdsSupportEnum - If <code>v2.0</code>, it indicates that IMDSv2 is specified in the AMI. Instances launched from this AMI will have <code>HttpTokens</code> automatically set to <code>required</code> so that, by default, the instance requires that IMDSv2 is used when requesting instance metadata. In addition, <code>HttpPutResponseHopLimit</code> is set to <code>2</code>. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/configuring-IMDS-new-instances.html#configure-IMDS-new-instances-ami-configuration">Configure the AMI</a> in the <i>Amazon EC2 User Guide</i>.
type DescribeImagesResultImagesImdsSupportEnum string

const (
	DescribeImagesResultImagesImdsSupportEnumV20 DescribeImagesResultImagesImdsSupportEnum = "v2.0"
)

func (e DescribeImagesResultImagesImdsSupportEnum) ToPointer() *DescribeImagesResultImagesImdsSupportEnum {
	return &e
}

func (e *DescribeImagesResultImagesImdsSupportEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "v2.0":
		*e = DescribeImagesResultImagesImdsSupportEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DescribeImagesResultImagesImdsSupportEnum: %v", v)
	}
}

// DescribeImagesResultImagesPlatformEnum - This value is set to <code>windows</code> for Windows AMIs; otherwise, it is blank.
type DescribeImagesResultImagesPlatformEnum string

const (
	DescribeImagesResultImagesPlatformEnumWindows DescribeImagesResultImagesPlatformEnum = "Windows"
)

func (e DescribeImagesResultImagesPlatformEnum) ToPointer() *DescribeImagesResultImagesPlatformEnum {
	return &e
}

func (e *DescribeImagesResultImagesPlatformEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Windows":
		*e = DescribeImagesResultImagesPlatformEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DescribeImagesResultImagesPlatformEnum: %v", v)
	}
}

// DescribeImagesResultImagesProductCodesProductCodeTypeEnum - The type of product code.
type DescribeImagesResultImagesProductCodesProductCodeTypeEnum string

const (
	DescribeImagesResultImagesProductCodesProductCodeTypeEnumDevpay      DescribeImagesResultImagesProductCodesProductCodeTypeEnum = "devpay"
	DescribeImagesResultImagesProductCodesProductCodeTypeEnumMarketplace DescribeImagesResultImagesProductCodesProductCodeTypeEnum = "marketplace"
)

func (e DescribeImagesResultImagesProductCodesProductCodeTypeEnum) ToPointer() *DescribeImagesResultImagesProductCodesProductCodeTypeEnum {
	return &e
}

func (e *DescribeImagesResultImagesProductCodesProductCodeTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "devpay":
		fallthrough
	case "marketplace":
		*e = DescribeImagesResultImagesProductCodesProductCodeTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DescribeImagesResultImagesProductCodesProductCodeTypeEnum: %v", v)
	}
}

// DescribeImagesResultImagesProductCodes - Describes a product code.
type DescribeImagesResultImagesProductCodes struct {
	ProductCodeID   *string
	ProductCodeType *DescribeImagesResultImagesProductCodesProductCodeTypeEnum
}

// DescribeImagesResultImagesRootDeviceTypeEnum - The type of root device used by the AMI. The AMI can use an Amazon EBS volume or an instance store volume.
type DescribeImagesResultImagesRootDeviceTypeEnum string

const (
	DescribeImagesResultImagesRootDeviceTypeEnumEbs           DescribeImagesResultImagesRootDeviceTypeEnum = "ebs"
	DescribeImagesResultImagesRootDeviceTypeEnumInstanceStore DescribeImagesResultImagesRootDeviceTypeEnum = "instance-store"
)

func (e DescribeImagesResultImagesRootDeviceTypeEnum) ToPointer() *DescribeImagesResultImagesRootDeviceTypeEnum {
	return &e
}

func (e *DescribeImagesResultImagesRootDeviceTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ebs":
		fallthrough
	case "instance-store":
		*e = DescribeImagesResultImagesRootDeviceTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DescribeImagesResultImagesRootDeviceTypeEnum: %v", v)
	}
}

// DescribeImagesResultImagesStateEnum - The current state of the AMI. If the state is <code>available</code>, the image is successfully registered and can be used to launch an instance.
type DescribeImagesResultImagesStateEnum string

const (
	DescribeImagesResultImagesStateEnumPending      DescribeImagesResultImagesStateEnum = "pending"
	DescribeImagesResultImagesStateEnumAvailable    DescribeImagesResultImagesStateEnum = "available"
	DescribeImagesResultImagesStateEnumInvalid      DescribeImagesResultImagesStateEnum = "invalid"
	DescribeImagesResultImagesStateEnumDeregistered DescribeImagesResultImagesStateEnum = "deregistered"
	DescribeImagesResultImagesStateEnumTransient    DescribeImagesResultImagesStateEnum = "transient"
	DescribeImagesResultImagesStateEnumFailed       DescribeImagesResultImagesStateEnum = "failed"
	DescribeImagesResultImagesStateEnumError        DescribeImagesResultImagesStateEnum = "error"
)

func (e DescribeImagesResultImagesStateEnum) ToPointer() *DescribeImagesResultImagesStateEnum {
	return &e
}

func (e *DescribeImagesResultImagesStateEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "pending":
		fallthrough
	case "available":
		fallthrough
	case "invalid":
		fallthrough
	case "deregistered":
		fallthrough
	case "transient":
		fallthrough
	case "failed":
		fallthrough
	case "error":
		*e = DescribeImagesResultImagesStateEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DescribeImagesResultImagesStateEnum: %v", v)
	}
}

// DescribeImagesResultImagesStateReason - The reason for the state change.
type DescribeImagesResultImagesStateReason struct {
	Code    *string
	Message *string
}

// DescribeImagesResultImagesTags - Describes a tag.
type DescribeImagesResultImagesTags struct {
	Key   *string
	Value *string
}

// DescribeImagesResultImagesTpmSupportEnum - If the image is configured for NitroTPM support, the value is <code>v2.0</code>. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/nitrotpm.html">NitroTPM</a> in the <i>Amazon EC2 User Guide</i>.
type DescribeImagesResultImagesTpmSupportEnum string

const (
	DescribeImagesResultImagesTpmSupportEnumV20 DescribeImagesResultImagesTpmSupportEnum = "v2.0"
)

func (e DescribeImagesResultImagesTpmSupportEnum) ToPointer() *DescribeImagesResultImagesTpmSupportEnum {
	return &e
}

func (e *DescribeImagesResultImagesTpmSupportEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "v2.0":
		*e = DescribeImagesResultImagesTpmSupportEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DescribeImagesResultImagesTpmSupportEnum: %v", v)
	}
}

// DescribeImagesResultImagesVirtualizationTypeEnum - The type of virtualization of the AMI.
type DescribeImagesResultImagesVirtualizationTypeEnum string

const (
	DescribeImagesResultImagesVirtualizationTypeEnumHvm         DescribeImagesResultImagesVirtualizationTypeEnum = "hvm"
	DescribeImagesResultImagesVirtualizationTypeEnumParavirtual DescribeImagesResultImagesVirtualizationTypeEnum = "paravirtual"
)

func (e DescribeImagesResultImagesVirtualizationTypeEnum) ToPointer() *DescribeImagesResultImagesVirtualizationTypeEnum {
	return &e
}

func (e *DescribeImagesResultImagesVirtualizationTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "hvm":
		fallthrough
	case "paravirtual":
		*e = DescribeImagesResultImagesVirtualizationTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DescribeImagesResultImagesVirtualizationTypeEnum: %v", v)
	}
}

// DescribeImagesResultImages - Describes an image.
type DescribeImagesResultImages struct {
	Architecture        *DescribeImagesResultImagesArchitectureEnum
	BlockDeviceMappings []DescribeImagesResultImagesBlockDeviceMappings
	BootMode            *DescribeImagesResultImagesBootModeEnum
	CreationDate        *string
	DeprecationTime     *string
	Description         *string
	EnaSupport          *bool
	Hypervisor          *DescribeImagesResultImagesHypervisorEnum
	ImageID             *string
	ImageLocation       *string
	ImageOwnerAlias     *string
	ImageType           *DescribeImagesResultImagesImageTypeEnum
	ImdsSupport         *DescribeImagesResultImagesImdsSupportEnum
	KernelID            *string
	Name                *string
	OwnerID             *string
	Platform            *DescribeImagesResultImagesPlatformEnum
	PlatformDetails     *string
	ProductCodes        []DescribeImagesResultImagesProductCodes
	Public              *bool
	RamdiskID           *string
	RootDeviceName      *string
	RootDeviceType      *DescribeImagesResultImagesRootDeviceTypeEnum
	SriovNetSupport     *string
	State               *DescribeImagesResultImagesStateEnum
	StateReason         *DescribeImagesResultImagesStateReason
	Tags                []DescribeImagesResultImagesTags
	TpmSupport          *DescribeImagesResultImagesTpmSupportEnum
	UsageOperation      *string
	VirtualizationType  *DescribeImagesResultImagesVirtualizationTypeEnum
}

// DescribeImagesResult - Success
type DescribeImagesResult struct {
	Images    []DescribeImagesResultImages
	NextToken *string
}
