"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations

class SellerInvite:
    r"""Used to invite sellers and configure their accounts"""
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def accept_seller_lead(self, request: operations.AcceptSellerLeadRequest) -> operations.AcceptSellerLeadResponse:
        r"""Accept Seller Lead
        This endpoint is triggered by the seller onboarding wizard, once the seller confirms their invitation. It can be used by marketplace operators to manually accept seller leads, and carry on with their onboarding process. 
        
        Note that there's no specific API call that allows status changes. The operations only allow the seller lead to move forward: 
        
         From `invite` > to `Accept` > closing on `Create Seller`.  
        
        If you want to change the status, you can start the process again, by deleting that lead through the *Delete Seller Lead* endpoint, and resending the invite through the *Resend Seller Lead's Invite* endpoint.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.AcceptSellerLeadRequest, base_url, '/seller-register/pvt/seller-leads/{sellerLeadId}', request)
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "accept_seller_lead_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        query_params = utils.get_query_params(operations.AcceptSellerLeadRequest, request)
        
        client = self._security_client
        
        http_res = client.request('PUT', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AcceptSellerLeadResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def create_seller_from_seller_lead(self, request: operations.CreateSellerFromSellerLeadRequest) -> operations.CreateSellerFromSellerLeadResponse:
        r"""Create Seller From Lead
        This endpoint is used by marketplace operators to create seller accounts. The request will only accept Seller Leads whose status is `accepted`. If they are already `connected` or `invited`, the call will not be fulfilled. 
        
        The creation of the account at VTEX is done by an internal Billing service. There is no seller account and marketplace affiliation if you do not go through this step. 
        
        Note that there's no specific API call that allows status changes. The operations only allow the seller lead to move forward: 
        
         From `invite` > to `Accept` > closing on `Create Seller`.  
        
        If you want to change the status, you can start the process again, by deleting that lead through the *Delete Seller Lead* endpoint, and resending the invite through the *Resend Seller Lead's Invite* endpoint.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.CreateSellerFromSellerLeadRequest, base_url, '/seller-register/pvt/seller-leads/{sellerLeadId}/seller', request)
        
        headers = utils.get_headers(request)
        query_params = utils.get_query_params(operations.CreateSellerFromSellerLeadRequest, request)
        
        client = self._security_client
        
        http_res = client.request('PUT', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateSellerFromSellerLeadResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def create_seller_lead(self, request: operations.CreateSellerLeadRequest) -> operations.CreateSellerLeadResponse:
        r"""Invite Seller Lead
        This API is used by marketplace operators to invite sellers to join their marketplace. The request sends an email to the seller, inviting sellers to activate their store. The invitation's link in the email is unique per user, and available for only seven days for the seller to click and begin activating their store. 
        
        The email template is completely customizable. All email templates that VTEX sends to seller leads can be found and edited in the marketplace's VTEX Admin, on the Message Center section.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/seller-register/pvt/seller-leads'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "create_seller_lead_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        query_params = utils.get_query_params(operations.CreateSellerLeadRequest, request)
        
        client = self._security_client
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateSellerLeadResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def list_seller_leads(self, request: operations.ListSellerLeadsRequest) -> operations.ListSellerLeadsResponse:
        r"""List Seller Leads
        This call's response includes a list of all sellers invited by the marketplace operator to join them. Retrieved results can be filtered by adding optional query fields to the request. Each seller listed includes the following information: 
        
        - `id` 
        
        - `createdAt` 
        
        - `status` 
        
        - `isConnected` 
        
        - `sellerEmail` 
        
        - `sellerName` 
        
        - `salesChannel` 
        
        - `email`
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/seller-register/pvt/seller-leads'
        
        headers = utils.get_headers(request)
        query_params = utils.get_query_params(operations.ListSellerLeadsRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ListSellerLeadsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def remove_seller_lead(self, request: operations.RemoveSellerLeadRequest) -> operations.RemoveSellerLeadResponse:
        r"""Delete Seller Lead
        This endpoint permanently deletes a seller previously invited to the marketplace, if the seller has not already accepted the invitation.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.RemoveSellerLeadRequest, base_url, '/seller-register/pvt/seller-leads/{sellerLeadId}', request)
        
        headers = utils.get_headers(request)
        query_params = utils.get_query_params(operations.RemoveSellerLeadRequest, request)
        
        client = self._security_client
        
        http_res = client.request('DELETE', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.RemoveSellerLeadResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def resend_seller_lead_request(self, request: operations.ResendSellerLeadRequestRequest) -> operations.ResendSellerLeadRequestResponse:
        r"""Resend Seller Lead Invite
        This endpoint allows marketplace operators to resend an invitation to a seller lead, previously invited to join their marketplace. The request will only accept Seller Leads whose status is `invited`. If they are already `connected` or `accepted`, the call will not be fulfilled.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.ResendSellerLeadRequestRequest, base_url, '/seller-register/pvt/seller-leads/{sellerLeadId}/status', request)
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "resend_seller_lead_request_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        query_params = utils.get_query_params(operations.ResendSellerLeadRequestRequest, request)
        
        client = self._security_client
        
        http_res = client.request('PUT', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ResendSellerLeadRequestResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def retrieve_seller_lead(self, request: operations.RetrieveSellerLeadRequest) -> operations.RetrieveSellerLeadResponse:
        r"""Get Seller Lead's Data by Id
        Marketplace operators may call this endpoint to retrieve information about a specific seller invited to the Seller Portal, by searching through their `Seller Lead Id`. To know the chosen seller's `sellerLeadId`, marketplace operators can count on the *List Sellers* endpoint's response as well. Each seller listed includes the following information: 
        
        - `id` 
        
        - `createdAt` 
        
        - `status` 
        
        - `isConnected` 
        
        - `sellerEmail` 
        
        - `sellerName` 
        
        - `salesChannel` 
        
        - `email`
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.RetrieveSellerLeadRequest, base_url, '/seller-register/pvt/seller-leads/{sellerLeadId}', request)
        
        headers = utils.get_headers(request)
        query_params = utils.get_query_params(operations.RetrieveSellerLeadRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.RetrieveSellerLeadResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    