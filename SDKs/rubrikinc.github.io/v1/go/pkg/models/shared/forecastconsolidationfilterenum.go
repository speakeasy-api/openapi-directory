// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// ForecastConsolidationFilterEnum - Filter to perform forecasts, with or without archival consolidation enabled.
type ForecastConsolidationFilterEnum string

const (
	ForecastConsolidationFilterEnumForecastWithConsolidation           ForecastConsolidationFilterEnum = "ForecastWithConsolidation"
	ForecastConsolidationFilterEnumForecastWithoutConsolidation        ForecastConsolidationFilterEnum = "ForecastWithoutConsolidation"
	ForecastConsolidationFilterEnumForecastWithAndWithoutConsolidation ForecastConsolidationFilterEnum = "ForecastWithAndWithoutConsolidation"
)

func (e ForecastConsolidationFilterEnum) ToPointer() *ForecastConsolidationFilterEnum {
	return &e
}

func (e *ForecastConsolidationFilterEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ForecastWithConsolidation":
		fallthrough
	case "ForecastWithoutConsolidation":
		fallthrough
	case "ForecastWithAndWithoutConsolidation":
		*e = ForecastConsolidationFilterEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ForecastConsolidationFilterEnum: %v", v)
	}
}
