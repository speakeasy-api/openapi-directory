// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// GETAuthorizeCacheSecurityGroupIngressActionEnum
type GETAuthorizeCacheSecurityGroupIngressActionEnum string

const (
	GETAuthorizeCacheSecurityGroupIngressActionEnumAuthorizeCacheSecurityGroupIngress GETAuthorizeCacheSecurityGroupIngressActionEnum = "AuthorizeCacheSecurityGroupIngress"
)

func (e *GETAuthorizeCacheSecurityGroupIngressActionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "AuthorizeCacheSecurityGroupIngress":
		*e = GETAuthorizeCacheSecurityGroupIngressActionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GETAuthorizeCacheSecurityGroupIngressActionEnum: %s", s)
	}
}

// GETAuthorizeCacheSecurityGroupIngressVersionEnum
type GETAuthorizeCacheSecurityGroupIngressVersionEnum string

const (
	GETAuthorizeCacheSecurityGroupIngressVersionEnumTwoThousandAndFifteen0202 GETAuthorizeCacheSecurityGroupIngressVersionEnum = "2015-02-02"
)

func (e *GETAuthorizeCacheSecurityGroupIngressVersionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "2015-02-02":
		*e = GETAuthorizeCacheSecurityGroupIngressVersionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GETAuthorizeCacheSecurityGroupIngressVersionEnum: %s", s)
	}
}

type GETAuthorizeCacheSecurityGroupIngressQueryParams struct {
	Action GETAuthorizeCacheSecurityGroupIngressActionEnum `queryParam:"style=form,explode=true,name=Action"`
	// The cache security group that allows network ingress.
	CacheSecurityGroupName string `queryParam:"style=form,explode=true,name=CacheSecurityGroupName"`
	// The Amazon EC2 security group to be authorized for ingress to the cache security group.
	Ec2SecurityGroupName string `queryParam:"style=form,explode=true,name=EC2SecurityGroupName"`
	// The Amazon account number of the Amazon EC2 security group owner. Note that this is not the same thing as an Amazon access key ID - you must provide a valid Amazon account number for this parameter.
	Ec2SecurityGroupOwnerID string                                           `queryParam:"style=form,explode=true,name=EC2SecurityGroupOwnerId"`
	Version                 GETAuthorizeCacheSecurityGroupIngressVersionEnum `queryParam:"style=form,explode=true,name=Version"`
}

type GETAuthorizeCacheSecurityGroupIngressHeaders struct {
	XAmzAlgorithm     *string `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
}

type GETAuthorizeCacheSecurityGroupIngressRequest struct {
	QueryParams GETAuthorizeCacheSecurityGroupIngressQueryParams
	Headers     GETAuthorizeCacheSecurityGroupIngressHeaders
}

type GETAuthorizeCacheSecurityGroupIngressResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
