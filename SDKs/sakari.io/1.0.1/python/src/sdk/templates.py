"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Templates:
    r"""Define reusable message or web templates"""
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def templates_create(self, request: operations.TemplatesCreateRequest, security: operations.TemplatesCreateSecurity) -> operations.TemplatesCreateResponse:
        r"""Create template"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.TemplatesCreateRequest, base_url, '/v1/accounts/{accountId}/templates', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "template_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.TemplatesCreateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.TemplatesResponse])
                res.templates_response = out

        return res

    def templates_fetch(self, request: operations.TemplatesFetchRequest, security: operations.TemplatesFetchSecurity) -> operations.TemplatesFetchResponse:
        r"""Fetch template by ID"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.TemplatesFetchRequest, base_url, '/v1/accounts/{accountId}/templates/{templateId}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.TemplatesFetchResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.TemplateResponse])
                res.template_response = out

        return res

    def templates_fetch_all(self, request: operations.TemplatesFetchAllRequest, security: operations.TemplatesFetchAllSecurity) -> operations.TemplatesFetchAllResponse:
        r"""Fetch templates"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.TemplatesFetchAllRequest, base_url, '/v1/accounts/{accountId}/templates', request)
        
        query_params = utils.get_query_params(operations.TemplatesFetchAllRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.TemplatesFetchAllResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.TemplatesResponse])
                res.templates_response = out
        elif http_res.status_code >= 400 and http_res.status_code < 500 or http_res.status_code >= 500 and http_res.status_code < 600:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorResponse])
                res.error_response = out

        return res

    def templates_remove(self, request: operations.TemplatesRemoveRequest, security: operations.TemplatesRemoveSecurity) -> operations.TemplatesRemoveResponse:
        r"""Deletes a template"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.TemplatesRemoveRequest, base_url, '/v1/accounts/{accountId}/templates/{templateId}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.TemplatesRemoveResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.TemplatesRemove200ApplicationJSON])
                res.templates_remove_200_application_json_object = out

        return res

    def templates_update(self, request: operations.TemplatesUpdateRequest, security: operations.TemplatesUpdateSecurity) -> operations.TemplatesUpdateResponse:
        r"""Updates a template"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.TemplatesUpdateRequest, base_url, '/v1/accounts/{accountId}/templates/{templateId}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PUT', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.TemplatesUpdateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.TemplateResponse])
                res.template_response = out

        return res

    