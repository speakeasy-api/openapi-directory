"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Period:
    
    actual_amount: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('actual_amount'), 'exclude': lambda f: f is None }})
    r"""The sum of all actuals (transactions) in the period."""  
    currency_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('currency_code'), 'exclude': lambda f: f is None }})
    r"""The currency of the period."""  
    current: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('current'), 'exclude': lambda f: f is None }})
    r"""Whether this period is current, such that the current date (in the user's time zone) falls within the date range."""  
    end_date: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('end_date'), 'exclude': lambda f: f is None }})
    r"""The end date of the period."""  
    forecast_amount: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('forecast_amount'), 'exclude': lambda f: f is None }})
    r"""The sum of all forecast sources (budget events) in the period, for comparison against the actual amount."""  
    over_budget: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('over_budget'), 'exclude': lambda f: f is None }})
    r"""Whether the budget has been exceeded in the period."""  
    over_by: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('over_by'), 'exclude': lambda f: f is None }})
    r"""How much the budget has been exceeded by in the period."""  
    percentage_used: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('percentage_used'), 'exclude': lambda f: f is None }})
    r"""The percentage of the budget that has been used in the period."""  
    refund_amount: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('refund_amount'), 'exclude': lambda f: f is None }})
    r"""This attribute tracks the amount that has been refunded or deducted to the actual amount. When a category is set to \\"always expense\\", any credit transactions are treated as refunds and when set to \\"always income\\", any debit transactions are treated as deductions."""  
    start_date: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('start_date'), 'exclude': lambda f: f is None }})
    r"""The start date of the period."""  
    under_budget: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('under_budget'), 'exclude': lambda f: f is None }})
    r"""Whether the budget has not been exceeded in the period."""  
    under_by: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('under_by'), 'exclude': lambda f: f is None }})
    r"""How much there is left in the budget for the period."""  
    