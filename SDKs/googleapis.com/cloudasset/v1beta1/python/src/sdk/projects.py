"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Projects:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def cloudasset_projects_batch_get_assets_history(self, request: operations.CloudassetProjectsBatchGetAssetsHistoryRequest, security: operations.CloudassetProjectsBatchGetAssetsHistorySecurity) -> operations.CloudassetProjectsBatchGetAssetsHistoryResponse:
        r"""Batch gets the update history of assets that overlap a time window. For IAM_POLICY content, this API outputs history when the asset and its attached IAM POLICY both exist. This can create gaps in the output history. Otherwise, this API outputs history with asset in both non-delete or deleted status. If a specified asset does not exist, this API returns an INVALID_ARGUMENT error."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.CloudassetProjectsBatchGetAssetsHistoryRequest, base_url, '/v1beta1/{parent}:batchGetAssetsHistory', request)
        
        query_params = utils.get_query_params(operations.CloudassetProjectsBatchGetAssetsHistoryRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CloudassetProjectsBatchGetAssetsHistoryResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.BatchGetAssetsHistoryResponse])
                res.batch_get_assets_history_response = out

        return res

    def cloudasset_projects_export_assets(self, request: operations.CloudassetProjectsExportAssetsRequest, security: operations.CloudassetProjectsExportAssetsSecurity) -> operations.CloudassetProjectsExportAssetsResponse:
        r"""Exports assets with time and resource types to a given Cloud Storage location. The output format is newline-delimited JSON. This API implements the google.longrunning.Operation API allowing you to keep track of the export. We recommend intervals of at least 2 seconds with exponential retry to poll the export operation result. For regular-size resource parent, the export operation usually finishes within 5 minutes."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.CloudassetProjectsExportAssetsRequest, base_url, '/v1beta1/{parent}:exportAssets', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "export_assets_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.CloudassetProjectsExportAssetsRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CloudassetProjectsExportAssetsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Operation])
                res.operation = out

        return res

    def cloudasset_projects_operations_get(self, request: operations.CloudassetProjectsOperationsGetRequest, security: operations.CloudassetProjectsOperationsGetSecurity) -> operations.CloudassetProjectsOperationsGetResponse:
        r"""Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.CloudassetProjectsOperationsGetRequest, base_url, '/v1beta1/{name}', request)
        
        query_params = utils.get_query_params(operations.CloudassetProjectsOperationsGetRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CloudassetProjectsOperationsGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Operation])
                res.operation = out

        return res

    