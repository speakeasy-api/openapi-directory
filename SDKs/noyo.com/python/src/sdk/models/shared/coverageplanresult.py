"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import contributiondetails as shared_contributiondetails
from ..shared import coveragedetails as shared_coveragedetails
from ..shared import ratemodel as shared_ratemodel
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class CoveragePlanResultBenefitDetailsEnum(str, Enum):
    r"""The add-on benefits offered by the plan."""
    ABORTION = 'abortion'
    INFERTILITY = 'infertility'
    CONTRACEPTIVE_OPT_OUT = 'contraceptive_opt_out'
    ADDICTION_TREAMENT = 'addiction_treament'
    MAMMOGRAPHY_BENEFIT = 'mammography_benefit'
    STAFF_MODEL_HMO = 'staff_model_hmo'
    FSA = 'fsa'
    HSA = 'hsa'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CoveragePlanResultCobraRules:
    r"""COBRA rules for the group medical plan"""
    
    eligible: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('eligible'), 'exclude': lambda f: f is None }})
    r"""True if group plan is eligible for COBRA enrollments"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CoveragePlanResult:
    r"""Successful Response - Returns a single Coverage Plan"""
    
    created: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('created') }})
    r"""The date the record was created"""  
    group_coverage_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('group_coverage_id') }})
    r"""Unique identifier of the group coverage in Noyo"""  
    id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id') }})
    r"""Unique identifier of the record in Noyo"""  
    modified: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('modified') }})
    r"""The date the record was last updated"""  
    plan_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('plan_name') }})
    r"""Display name of the plan"""  
    version: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('version') }})
    r"""Current version of the record"""  
    benefit_details: Optional[CoveragePlanResultBenefitDetailsEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('benefit_details'), 'exclude': lambda f: f is None }})
    r"""The add-on benefits offered by the plan."""  
    cobra_rules: Optional[CoveragePlanResultCobraRules] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cobra_rules'), 'exclude': lambda f: f is None }})
    r"""COBRA rules for the group medical plan"""  
    code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('code'), 'exclude': lambda f: f is None }})
    r"""The code for the plan."""  
    contribution_details: Optional[list[shared_contributiondetails.ContributionDetails]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('contribution_details'), 'exclude': lambda f: f is None }})  
    coverage_details: Optional[shared_coveragedetails.CoverageDetails] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('coverage_details'), 'exclude': lambda f: f is None }})  
    existing_plan: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('existing_plan'), 'exclude': lambda f: f is None }})
    r"""True if this plan is currently active with the carrier"""  
    network: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('network'), 'exclude': lambda f: f is None }})
    r"""Details about the plan network"""  
    notes: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('notes'), 'exclude': lambda f: f is None }})
    r"""General platform notes about the coverage plan"""  
    plan_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('plan_type'), 'exclude': lambda f: f is None }})
    r"""Plan type for basic or voluntary plans"""  
    product_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('product_type'), 'exclude': lambda f: f is None }})
    r"""Details about the product type"""  
    rate_details: Optional[list[shared_ratemodel.RateModel]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('rate_details'), 'exclude': lambda f: f is None }})
    r"""Plan rate data, varying by plan line of coverage"""  
    termination_policy: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('termination_policy'), 'exclude': lambda f: f is None }})
    r"""Termination policy for the coverage plan"""  
    volume_rules: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('volume_rules'), 'exclude': lambda f: f is None }})
    r"""Volume rules for the group critical illness plan"""  
    waiting_period_rules: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('waiting_period_rules'), 'exclude': lambda f: f is None }})
    r"""The list of waiting period rules."""  
    