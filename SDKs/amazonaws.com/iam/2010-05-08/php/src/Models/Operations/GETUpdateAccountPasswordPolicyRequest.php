<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Operations;

use \OpenAPI\OpenAPI\Utils\SpeakeasyMetadata;
class GETUpdateAccountPasswordPolicyRequest
{
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=Action')]
    public GETUpdateAccountPasswordPolicyActionEnum $action;
    
    /**
     * <p> Allows all IAM users in your account to use the Amazon Web Services Management Console to change their own passwords. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_passwords_enable-user-change.html">Permitting IAM users to change their own passwords</a> in the <i>IAM User Guide</i>.</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>false</code>. The result is that IAM users in the account do not automatically have permissions to change their own password.</p>
     * 
     * @var ?bool $allowUsersToChangePassword
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=AllowUsersToChangePassword')]
    public ?bool $allowUsersToChangePassword = null;
    
    /**
     * <p> Prevents IAM users who are accessing the account via the Amazon Web Services Management Console from setting a new console password after their password has expired. The IAM user cannot access the console until an administrator resets the password.</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>false</code>. The result is that IAM users can change their passwords after they expire and continue to sign in as the user.</p> <note> <p> In the Amazon Web Services Management Console, the custom password policy option <b>Allow users to change their own password</b> gives IAM users permissions to <code>iam:ChangePassword</code> for only their user and to the <code>iam:GetAccountPasswordPolicy</code> action. This option does not attach a permissions policy to each user, rather the permissions are applied at the account-level for all users by IAM. IAM users with <code>iam:ChangePassword</code> permission and active access keys can reset their own expired console password using the CLI or API.</p> </note>
     * 
     * @var ?bool $hardExpiry
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=HardExpiry')]
    public ?bool $hardExpiry = null;
    
    /**
     * <p>The number of days that an IAM user password is valid.</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>0</code>. The result is that IAM user passwords never expire.</p>
     * 
     * @var ?int $maxPasswordAge
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=MaxPasswordAge')]
    public ?int $maxPasswordAge = null;
    
    /**
     * <p>The minimum number of characters allowed in an IAM user password.</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>6</code>.</p>
     * 
     * @var ?int $minimumPasswordLength
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=MinimumPasswordLength')]
    public ?int $minimumPasswordLength = null;
    
    /**
     * <p>Specifies the number of previous passwords that IAM users are prevented from reusing.</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>0</code>. The result is that IAM users are not prevented from reusing previous passwords.</p>
     * 
     * @var ?int $passwordReusePrevention
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=PasswordReusePrevention')]
    public ?int $passwordReusePrevention = null;
    
    /**
     * <p>Specifies whether IAM user passwords must contain at least one lowercase character from the ISO basic Latin alphabet (a to z).</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>false</code>. The result is that passwords do not require at least one lowercase character.</p>
     * 
     * @var ?bool $requireLowercaseCharacters
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=RequireLowercaseCharacters')]
    public ?bool $requireLowercaseCharacters = null;
    
    /**
     * <p>Specifies whether IAM user passwords must contain at least one numeric character (0 to 9).</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>false</code>. The result is that passwords do not require at least one numeric character.</p>
     * 
     * @var ?bool $requireNumbers
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=RequireNumbers')]
    public ?bool $requireNumbers = null;
    
    /**
     * <p>Specifies whether IAM user passwords must contain at least one of the following non-alphanumeric characters:</p> <p>! @ # $ % ^ &amp; * ( ) _ + - = [ ] { } | '</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>false</code>. The result is that passwords do not require at least one symbol character.</p>
     * 
     * @var ?bool $requireSymbols
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=RequireSymbols')]
    public ?bool $requireSymbols = null;
    
    /**
     * <p>Specifies whether IAM user passwords must contain at least one uppercase character from the ISO basic Latin alphabet (A to Z).</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>false</code>. The result is that passwords do not require at least one uppercase character.</p>
     * 
     * @var ?bool $requireUppercaseCharacters
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=RequireUppercaseCharacters')]
    public ?bool $requireUppercaseCharacters = null;
    
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=Version')]
    public GETUpdateAccountPasswordPolicyVersionEnum $version;
    
	#[SpeakeasyMetadata('header:style=simple,explode=false,name=X-Amz-Algorithm')]
    public ?string $xAmzAlgorithm = null;
    
	#[SpeakeasyMetadata('header:style=simple,explode=false,name=X-Amz-Content-Sha256')]
    public ?string $xAmzContentSha256 = null;
    
	#[SpeakeasyMetadata('header:style=simple,explode=false,name=X-Amz-Credential')]
    public ?string $xAmzCredential = null;
    
	#[SpeakeasyMetadata('header:style=simple,explode=false,name=X-Amz-Date')]
    public ?string $xAmzDate = null;
    
	#[SpeakeasyMetadata('header:style=simple,explode=false,name=X-Amz-Security-Token')]
    public ?string $xAmzSecurityToken = null;
    
	#[SpeakeasyMetadata('header:style=simple,explode=false,name=X-Amz-Signature')]
    public ?string $xAmzSignature = null;
    
	#[SpeakeasyMetadata('header:style=simple,explode=false,name=X-Amz-SignedHeaders')]
    public ?string $xAmzSignedHeaders = null;
    
	public function __construct()
	{
		$this->action = \OpenAPI\OpenAPI\Models\Operations\GETUpdateAccountPasswordPolicyActionEnum::UPDATE_ACCOUNT_PASSWORD_POLICY;
		$this->allowUsersToChangePassword = null;
		$this->hardExpiry = null;
		$this->maxPasswordAge = null;
		$this->minimumPasswordLength = null;
		$this->passwordReusePrevention = null;
		$this->requireLowercaseCharacters = null;
		$this->requireNumbers = null;
		$this->requireSymbols = null;
		$this->requireUppercaseCharacters = null;
		$this->version = \OpenAPI\OpenAPI\Models\Operations\GETUpdateAccountPasswordPolicyVersionEnum::TWO_THOUSAND_AND_TEN0508;
		$this->xAmzAlgorithm = null;
		$this->xAmzContentSha256 = null;
		$this->xAmzCredential = null;
		$this->xAmzDate = null;
		$this->xAmzSecurityToken = null;
		$this->xAmzSignature = null;
		$this->xAmzSignedHeaders = null;
	}
}
