"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Ratings:
    r"""Team rating data"""
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def get_conference_sp_ratings(self, request: operations.GetConferenceSPRatingsRequest) -> operations.GetConferenceSPRatingsResponse:
        r"""Historical SP+ ratings by conference
        Get average SP+ historical rating data by conference
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/ratings/sp/conferences'
        
        query_params = utils.get_query_params(operations.GetConferenceSPRatingsRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetConferenceSPRatingsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.ConferenceSPRating]])
                res.conference_sp_ratings = out
        elif http_res.status_code == 400:
            pass

        return res

    def get_elo_ratings(self, request: operations.GetEloRatingsRequest) -> operations.GetEloRatingsResponse:
        r"""Historical Elo ratings
        Elo rating data
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/ratings/elo'
        
        query_params = utils.get_query_params(operations.GetEloRatingsRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetEloRatingsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.TeamEloRating]])
                res.team_elo_ratings = out
        elif http_res.status_code == 400:
            pass

        return res

    def get_sp_ratings(self, request: operations.GetSPRatingsRequest) -> operations.GetSPRatingsResponse:
        r"""Historical SP+ ratings
        SP+ rating data
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/ratings/sp'
        
        query_params = utils.get_query_params(operations.GetSPRatingsRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetSPRatingsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.TeamSPRating]])
                res.team_sp_ratings = out
        elif http_res.status_code == 400:
            pass

        return res

    def get_srs_ratings(self, request: operations.GetSRSRatingsRequest) -> operations.GetSRSRatingsResponse:
        r"""Historical SRS ratings
        SRS rating data (requires either a year or team specified)
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/ratings/srs'
        
        query_params = utils.get_query_params(operations.GetSRSRatingsRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetSRSRatingsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.TeamSRSRating]])
                res.team_srs_ratings = out
        elif http_res.status_code == 400:
            pass

        return res

    