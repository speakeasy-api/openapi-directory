"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from datetime import date
from marshmallow import fields
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class HolidaySchemeHolidaySchemeAccrualPayCodes:
    r"""The holiday schemes' accrual pay codes"""
    
    pay_code: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PayCode'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class HolidaySchemeHolidayScheme:
    
    accrual_pay_codes: Optional[HolidaySchemeHolidaySchemeAccrualPayCodes] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AccrualPayCodes'), 'exclude': lambda f: f is None }})
    r"""The holiday schemes' accrual pay codes"""  
    allow_exceed_annual_entitlement: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AllowExceedAnnualEntitlement'), 'exclude': lambda f: f is None }})
    r"""The holiday schemes' allow exceed annual entitlement"""  
    allow_negative_balance: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AllowNegativeBalance'), 'exclude': lambda f: f is None }})
    r"""The holiday schemes' allow negative balance"""  
    annual_entitlement_weeks: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AnnualEntitlementWeeks'), 'exclude': lambda f: f is None }})
    r"""The holiday schemes' annual entitlement weeks"""  
    bank_holiday_inclusive: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('BankHolidayInclusive'), 'exclude': lambda f: f is None }})
    r"""The holiday schemes' bank holiday inclusive"""  
    code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Code'), 'exclude': lambda f: f is None }})
    r"""The holiday schemes' code"""  
    effective_date: Optional[date] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('EffectiveDate'), 'encoder': utils.dateisoformat(True), 'decoder': utils.datefromisoformat, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""The holiday schemes' effective date"""  
    max_carry_over_days: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('MaxCarryOverDays'), 'exclude': lambda f: f is None }})
    r"""The holiday schemes' max carry over days"""  
    next_revision_date: Optional[date] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('NextRevisionDate'), 'encoder': utils.dateisoformat(True), 'decoder': utils.datefromisoformat, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""The holiday schemes' next revision date"""  
    offset_payment: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('OffsetPayment'), 'exclude': lambda f: f is None }})
    r"""The holiday schemes' offset payment"""  
    revision: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Revision'), 'exclude': lambda f: f is None }})
    r"""The holiday schemes' revision"""  
    scheme_ceased_date: Optional[date] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SchemeCeasedDate'), 'encoder': utils.dateisoformat(True), 'decoder': utils.datefromisoformat, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""The holiday schemes' scheme ceased date"""  
    scheme_key: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SchemeKey'), 'exclude': lambda f: f is None }})
    r"""The holiday schemes' scheme key"""  
    scheme_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SchemeName'), 'exclude': lambda f: f is None }})
    r"""The holiday schemes' scheme name"""  
    year_start_day: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('YearStartDay'), 'exclude': lambda f: f is None }})
    r"""The holiday schemes' year start day"""  
    year_start_month: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('YearStartMonth'), 'exclude': lambda f: f is None }})
    r"""The holiday schemes' year start month"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class HolidayScheme:
    r"""The holiday scheme object."""
    
    holiday_scheme: Optional[HolidaySchemeHolidayScheme] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('HolidayScheme'), 'exclude': lambda f: f is None }})  
    