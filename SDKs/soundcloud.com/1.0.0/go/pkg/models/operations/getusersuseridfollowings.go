// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"bytes"
	"encoding/json"
	"errors"
	"net/http"
	"openapi/pkg/models/shared"
)

type GetUsersUserIDFollowingsSecurity struct {
	AuthHeader string `security:"scheme,type=apiKey,subtype=header,name=Authorization"`
	ClientID   string `security:"scheme,type=apiKey,subtype=query,name=client_id"`
}

type GetUsersUserIDFollowingsRequest struct {
	// Number of results to return in the collection.
	Limit *int64 `queryParam:"style=form,explode=true,name=limit"`
	// SoundCloud User id
	UserID int64 `pathParam:"style=simple,explode=false,name=user_id"`
}

type GetUsersUserIDFollowings200ApplicationJSONType string

const (
	GetUsersUserIDFollowings200ApplicationJSONTypeUsers            GetUsersUserIDFollowings200ApplicationJSONType = "Users"
	GetUsersUserIDFollowings200ApplicationJSONTypeArrayOfUsersList GetUsersUserIDFollowings200ApplicationJSONType = "arrayOfUsersList"
)

type GetUsersUserIDFollowings200ApplicationJSON struct {
	Users            *shared.Users
	ArrayOfUsersList []shared.UsersList

	Type GetUsersUserIDFollowings200ApplicationJSONType
}

func CreateGetUsersUserIDFollowings200ApplicationJSONUsers(users shared.Users) GetUsersUserIDFollowings200ApplicationJSON {
	typ := GetUsersUserIDFollowings200ApplicationJSONTypeUsers

	return GetUsersUserIDFollowings200ApplicationJSON{
		Users: &users,
		Type:  typ,
	}
}

func CreateGetUsersUserIDFollowings200ApplicationJSONArrayOfUsersList(arrayOfUsersList []shared.UsersList) GetUsersUserIDFollowings200ApplicationJSON {
	typ := GetUsersUserIDFollowings200ApplicationJSONTypeArrayOfUsersList

	return GetUsersUserIDFollowings200ApplicationJSON{
		ArrayOfUsersList: arrayOfUsersList,
		Type:             typ,
	}
}

func (u *GetUsersUserIDFollowings200ApplicationJSON) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	users := new(shared.Users)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&users); err == nil {
		u.Users = users
		u.Type = GetUsersUserIDFollowings200ApplicationJSONTypeUsers
		return nil
	}

	arrayOfUsersList := []shared.UsersList{}
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&arrayOfUsersList); err == nil {
		u.ArrayOfUsersList = arrayOfUsersList
		u.Type = GetUsersUserIDFollowings200ApplicationJSONTypeArrayOfUsersList
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u GetUsersUserIDFollowings200ApplicationJSON) MarshalJSON() ([]byte, error) {
	if u.Users != nil {
		return json.Marshal(u.Users)
	}

	if u.ArrayOfUsersList != nil {
		return json.Marshal(u.ArrayOfUsersList)
	}

	return nil, nil
}

type GetUsersUserIDFollowingsResponse struct {
	ContentType string
	// Unauthorized
	Error       *shared.Error
	StatusCode  int
	RawResponse *http.Response
	// Success
	GetUsersUserIDFollowings200ApplicationJSONOneOf *GetUsersUserIDFollowings200ApplicationJSON
}
