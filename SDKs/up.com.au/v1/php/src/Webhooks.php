<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Webhooks 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Delete webhook
     * 
     * Delete a specific webhook by providing its unique identifier. Once
     * deleted, webhook events will no longer be sent to the configured URL.
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteWebhooksIdRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteWebhooksIdResponse
     */
	public function deleteWebhooksId(
        \OpenAPI\OpenAPI\Models\Operations\DeleteWebhooksIdRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteWebhooksIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/webhooks/{id}', \OpenAPI\OpenAPI\Models\Operations\DeleteWebhooksIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteWebhooksIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * List webhooks
     * 
     * Retrieve a list of configured webhooks. The returned list is
     * [paginated](#pagination) and can be scrolled by following the `next`
     * and `prev` links where present. Results are ordered oldest first to
     * newest last.
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetWebhooksRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetWebhooksResponse
     */
	public function getWebhooks(
        \OpenAPI\OpenAPI\Models\Operations\GetWebhooksRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetWebhooksResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/webhooks');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetWebhooksRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetWebhooksResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listWebhooksResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListWebhooksResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieve webhook
     * 
     * Retrieve a specific webhook by providing its unique identifier.
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetWebhooksIdRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetWebhooksIdResponse
     */
	public function getWebhooksId(
        \OpenAPI\OpenAPI\Models\Operations\GetWebhooksIdRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetWebhooksIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/webhooks/{id}', \OpenAPI\OpenAPI\Models\Operations\GetWebhooksIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetWebhooksIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getWebhookResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GetWebhookResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List webhook logs
     * 
     * Retrieve a list of delivery logs for a webhook by providing its unique
     * identifier. This is useful for analysis and debugging purposes. The
     * returned list is [paginated](#pagination) and can be scrolled by
     * following the `next` and `prev` links where present. Results are ordered
     * newest first to oldest last. Logs may be automatically purged after a
     * period of time.
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetWebhooksWebhookIdLogsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetWebhooksWebhookIdLogsResponse
     */
	public function getWebhooksWebhookIdLogs(
        \OpenAPI\OpenAPI\Models\Operations\GetWebhooksWebhookIdLogsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetWebhooksWebhookIdLogsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/webhooks/{webhookId}/logs', \OpenAPI\OpenAPI\Models\Operations\GetWebhooksWebhookIdLogsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetWebhooksWebhookIdLogsRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetWebhooksWebhookIdLogsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listWebhookDeliveryLogsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListWebhookDeliveryLogsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create webhook
     * 
     * Create a new webhook with a given URL. The URL will receive webhook
     * events as JSON-encoded `POST` requests. The URL must respond with a HTTP
     * `200` status on success.
     * 
     * There is currently a limit of 10 webhooks at any given time. Once this
     * limit is reached, existing webhooks will need to be deleted before new
     * webhooks can be created.
     * 
     * Event delivery is retried with exponential backoff if the URL is
     * unreachable or it does not respond with a `200` status. The response
     * includes a `secretKey` attribute, which is used to sign requests sent to
     * the webhook URL. It will not be returned from any other endpoints within
     * the Up API. If the `secretKey` is lost, simply create a new webhook with
     * the same URL, capture its `secretKey` and then delete the original
     * webhook. See [Handling webhook events](#callback_post_webhookURL) for
     * details on how to process webhook events.
     * 
     * It is probably a good idea to test the webhook by
     * [sending it a `PING` event](#post_webhooks_webhookId_ping) after creating
     * it.
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\CreateWebhookRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostWebhooksResponse
     */
	public function postWebhooks(
        \OpenAPI\OpenAPI\Models\Shared\CreateWebhookRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostWebhooksResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/webhooks');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostWebhooksResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->createWebhookResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CreateWebhookResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Ping webhook
     * 
     * Send a `PING` event to a webhook by providing its unique identifier.
     * This is useful for testing and debugging purposes. The event is delivered
     * asynchronously and its data is returned in the response to this request.
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostWebhooksWebhookIdPingRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostWebhooksWebhookIdPingResponse
     */
	public function postWebhooksWebhookIdPing(
        \OpenAPI\OpenAPI\Models\Operations\PostWebhooksWebhookIdPingRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostWebhooksWebhookIdPingResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/webhooks/{webhookId}/ping', \OpenAPI\OpenAPI\Models\Operations\PostWebhooksWebhookIdPingRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostWebhooksWebhookIdPingResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->webhookEventCallback = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\WebhookEventCallback', 'json');
            }
        }

        return $response;
    }
}