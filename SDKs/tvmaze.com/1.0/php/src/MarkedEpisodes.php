<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class MarkedEpisodes 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Unmark an episode
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteUserEpisodesEpisodeIdRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteUserEpisodesEpisodeIdResponse
     */
	public function deleteUserEpisodesEpisodeId(
        \OpenAPI\OpenAPI\Models\Operations\DeleteUserEpisodesEpisodeIdRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteUserEpisodesEpisodeIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/user/episodes/{episode_id}', \OpenAPI\OpenAPI\Models\Operations\DeleteUserEpisodesEpisodeIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteUserEpisodesEpisodeIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * List the marked episodes
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetUserEpisodesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetUserEpisodesResponse
     */
	public function getUserEpisodes(
        \OpenAPI\OpenAPI\Models\Operations\GetUserEpisodesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetUserEpisodesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/user/episodes');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetUserEpisodesRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetUserEpisodesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->markedEpisodes = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\MarkedEpisode>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Check if an episode is marked
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetUserEpisodesEpisodeIdRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetUserEpisodesEpisodeIdResponse
     */
	public function getUserEpisodesEpisodeId(
        \OpenAPI\OpenAPI\Models\Operations\GetUserEpisodesEpisodeIdRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetUserEpisodesEpisodeIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/user/episodes/{episode_id}', \OpenAPI\OpenAPI\Models\Operations\GetUserEpisodesEpisodeIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetUserEpisodesEpisodeIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->markedEpisode = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\MarkedEpisode', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * Mark an episode
     * 
     * Set `marked_at` to `NULL` or leave it out to use the current time.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PutUserEpisodesEpisodeIdRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PutUserEpisodesEpisodeIdResponse
     */
	public function putUserEpisodesEpisodeId(
        \OpenAPI\OpenAPI\Models\Operations\PutUserEpisodesEpisodeIdRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PutUserEpisodesEpisodeIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/user/episodes/{episode_id}', \OpenAPI\OpenAPI\Models\Operations\PutUserEpisodesEpisodeIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "markedEpisodeInput", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PutUserEpisodesEpisodeIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->markedEpisode = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\MarkedEpisode', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 422) {
        }

        return $response;
    }
}