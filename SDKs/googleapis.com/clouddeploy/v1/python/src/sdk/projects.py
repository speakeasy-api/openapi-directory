"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Any, Optional

class Projects:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def clouddeploy_projects_locations_delivery_pipelines_create(self, request: operations.ClouddeployProjectsLocationsDeliveryPipelinesCreateRequest, security: operations.ClouddeployProjectsLocationsDeliveryPipelinesCreateSecurity) -> operations.ClouddeployProjectsLocationsDeliveryPipelinesCreateResponse:
        r"""Creates a new DeliveryPipeline in a given project and location."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ClouddeployProjectsLocationsDeliveryPipelinesCreateRequest, base_url, '/v1/{parent}/deliveryPipelines', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "delivery_pipeline_input", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.ClouddeployProjectsLocationsDeliveryPipelinesCreateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ClouddeployProjectsLocationsDeliveryPipelinesCreateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Operation])
                res.operation = out

        return res

    def clouddeploy_projects_locations_delivery_pipelines_list(self, request: operations.ClouddeployProjectsLocationsDeliveryPipelinesListRequest, security: operations.ClouddeployProjectsLocationsDeliveryPipelinesListSecurity) -> operations.ClouddeployProjectsLocationsDeliveryPipelinesListResponse:
        r"""Lists DeliveryPipelines in a given project and location."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ClouddeployProjectsLocationsDeliveryPipelinesListRequest, base_url, '/v1/{parent}/deliveryPipelines', request)
        
        query_params = utils.get_query_params(operations.ClouddeployProjectsLocationsDeliveryPipelinesListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ClouddeployProjectsLocationsDeliveryPipelinesListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ListDeliveryPipelinesResponse])
                res.list_delivery_pipelines_response = out

        return res

    def clouddeploy_projects_locations_delivery_pipelines_releases_abandon(self, request: operations.ClouddeployProjectsLocationsDeliveryPipelinesReleasesAbandonRequest, security: operations.ClouddeployProjectsLocationsDeliveryPipelinesReleasesAbandonSecurity) -> operations.ClouddeployProjectsLocationsDeliveryPipelinesReleasesAbandonResponse:
        r"""Abandons a Release in the Delivery Pipeline."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ClouddeployProjectsLocationsDeliveryPipelinesReleasesAbandonRequest, base_url, '/v1/{name}:abandon', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.ClouddeployProjectsLocationsDeliveryPipelinesReleasesAbandonRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ClouddeployProjectsLocationsDeliveryPipelinesReleasesAbandonResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.abandon_release_response = out

        return res

    def clouddeploy_projects_locations_delivery_pipelines_releases_create(self, request: operations.ClouddeployProjectsLocationsDeliveryPipelinesReleasesCreateRequest, security: operations.ClouddeployProjectsLocationsDeliveryPipelinesReleasesCreateSecurity) -> operations.ClouddeployProjectsLocationsDeliveryPipelinesReleasesCreateResponse:
        r"""Creates a new Release in a given project and location."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ClouddeployProjectsLocationsDeliveryPipelinesReleasesCreateRequest, base_url, '/v1/{parent}/releases', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "release_input", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.ClouddeployProjectsLocationsDeliveryPipelinesReleasesCreateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ClouddeployProjectsLocationsDeliveryPipelinesReleasesCreateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Operation])
                res.operation = out

        return res

    def clouddeploy_projects_locations_delivery_pipelines_releases_list(self, request: operations.ClouddeployProjectsLocationsDeliveryPipelinesReleasesListRequest, security: operations.ClouddeployProjectsLocationsDeliveryPipelinesReleasesListSecurity) -> operations.ClouddeployProjectsLocationsDeliveryPipelinesReleasesListResponse:
        r"""Lists Releases in a given project and location."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ClouddeployProjectsLocationsDeliveryPipelinesReleasesListRequest, base_url, '/v1/{parent}/releases', request)
        
        query_params = utils.get_query_params(operations.ClouddeployProjectsLocationsDeliveryPipelinesReleasesListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ClouddeployProjectsLocationsDeliveryPipelinesReleasesListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ListReleasesResponse])
                res.list_releases_response = out

        return res

    def clouddeploy_projects_locations_delivery_pipelines_releases_rollouts_advance(self, request: operations.ClouddeployProjectsLocationsDeliveryPipelinesReleasesRolloutsAdvanceRequest, security: operations.ClouddeployProjectsLocationsDeliveryPipelinesReleasesRolloutsAdvanceSecurity) -> operations.ClouddeployProjectsLocationsDeliveryPipelinesReleasesRolloutsAdvanceResponse:
        r"""Advances a Rollout in a given project and location."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ClouddeployProjectsLocationsDeliveryPipelinesReleasesRolloutsAdvanceRequest, base_url, '/v1/{name}:advance', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "advance_rollout_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.ClouddeployProjectsLocationsDeliveryPipelinesReleasesRolloutsAdvanceRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ClouddeployProjectsLocationsDeliveryPipelinesReleasesRolloutsAdvanceResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.advance_rollout_response = out

        return res

    def clouddeploy_projects_locations_delivery_pipelines_releases_rollouts_approve(self, request: operations.ClouddeployProjectsLocationsDeliveryPipelinesReleasesRolloutsApproveRequest, security: operations.ClouddeployProjectsLocationsDeliveryPipelinesReleasesRolloutsApproveSecurity) -> operations.ClouddeployProjectsLocationsDeliveryPipelinesReleasesRolloutsApproveResponse:
        r"""Approves a Rollout."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ClouddeployProjectsLocationsDeliveryPipelinesReleasesRolloutsApproveRequest, base_url, '/v1/{name}:approve', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "approve_rollout_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.ClouddeployProjectsLocationsDeliveryPipelinesReleasesRolloutsApproveRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ClouddeployProjectsLocationsDeliveryPipelinesReleasesRolloutsApproveResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.approve_rollout_response = out

        return res

    def clouddeploy_projects_locations_delivery_pipelines_releases_rollouts_create(self, request: operations.ClouddeployProjectsLocationsDeliveryPipelinesReleasesRolloutsCreateRequest, security: operations.ClouddeployProjectsLocationsDeliveryPipelinesReleasesRolloutsCreateSecurity) -> operations.ClouddeployProjectsLocationsDeliveryPipelinesReleasesRolloutsCreateResponse:
        r"""Creates a new Rollout in a given project and location."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ClouddeployProjectsLocationsDeliveryPipelinesReleasesRolloutsCreateRequest, base_url, '/v1/{parent}/rollouts', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "rollout_input", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.ClouddeployProjectsLocationsDeliveryPipelinesReleasesRolloutsCreateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ClouddeployProjectsLocationsDeliveryPipelinesReleasesRolloutsCreateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Operation])
                res.operation = out

        return res

    def clouddeploy_projects_locations_delivery_pipelines_releases_rollouts_ignore_job(self, request: operations.ClouddeployProjectsLocationsDeliveryPipelinesReleasesRolloutsIgnoreJobRequest, security: operations.ClouddeployProjectsLocationsDeliveryPipelinesReleasesRolloutsIgnoreJobSecurity) -> operations.ClouddeployProjectsLocationsDeliveryPipelinesReleasesRolloutsIgnoreJobResponse:
        r"""Ignores the specified Job in a Rollout."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ClouddeployProjectsLocationsDeliveryPipelinesReleasesRolloutsIgnoreJobRequest, base_url, '/v1/{rollout}:ignoreJob', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "ignore_job_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.ClouddeployProjectsLocationsDeliveryPipelinesReleasesRolloutsIgnoreJobRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ClouddeployProjectsLocationsDeliveryPipelinesReleasesRolloutsIgnoreJobResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.ignore_job_response = out

        return res

    def clouddeploy_projects_locations_delivery_pipelines_releases_rollouts_job_runs_list(self, request: operations.ClouddeployProjectsLocationsDeliveryPipelinesReleasesRolloutsJobRunsListRequest, security: operations.ClouddeployProjectsLocationsDeliveryPipelinesReleasesRolloutsJobRunsListSecurity) -> operations.ClouddeployProjectsLocationsDeliveryPipelinesReleasesRolloutsJobRunsListResponse:
        r"""Lists JobRuns in a given project and location."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ClouddeployProjectsLocationsDeliveryPipelinesReleasesRolloutsJobRunsListRequest, base_url, '/v1/{parent}/jobRuns', request)
        
        query_params = utils.get_query_params(operations.ClouddeployProjectsLocationsDeliveryPipelinesReleasesRolloutsJobRunsListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ClouddeployProjectsLocationsDeliveryPipelinesReleasesRolloutsJobRunsListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ListJobRunsResponse])
                res.list_job_runs_response = out

        return res

    def clouddeploy_projects_locations_delivery_pipelines_releases_rollouts_job_runs_terminate(self, request: operations.ClouddeployProjectsLocationsDeliveryPipelinesReleasesRolloutsJobRunsTerminateRequest, security: operations.ClouddeployProjectsLocationsDeliveryPipelinesReleasesRolloutsJobRunsTerminateSecurity) -> operations.ClouddeployProjectsLocationsDeliveryPipelinesReleasesRolloutsJobRunsTerminateResponse:
        r"""Terminates a Job Run in a given project and location."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ClouddeployProjectsLocationsDeliveryPipelinesReleasesRolloutsJobRunsTerminateRequest, base_url, '/v1/{name}:terminate', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.ClouddeployProjectsLocationsDeliveryPipelinesReleasesRolloutsJobRunsTerminateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ClouddeployProjectsLocationsDeliveryPipelinesReleasesRolloutsJobRunsTerminateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.terminate_job_run_response = out

        return res

    def clouddeploy_projects_locations_delivery_pipelines_releases_rollouts_list(self, request: operations.ClouddeployProjectsLocationsDeliveryPipelinesReleasesRolloutsListRequest, security: operations.ClouddeployProjectsLocationsDeliveryPipelinesReleasesRolloutsListSecurity) -> operations.ClouddeployProjectsLocationsDeliveryPipelinesReleasesRolloutsListResponse:
        r"""Lists Rollouts in a given project and location."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ClouddeployProjectsLocationsDeliveryPipelinesReleasesRolloutsListRequest, base_url, '/v1/{parent}/rollouts', request)
        
        query_params = utils.get_query_params(operations.ClouddeployProjectsLocationsDeliveryPipelinesReleasesRolloutsListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ClouddeployProjectsLocationsDeliveryPipelinesReleasesRolloutsListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ListRolloutsResponse])
                res.list_rollouts_response = out

        return res

    def clouddeploy_projects_locations_delivery_pipelines_releases_rollouts_retry_job(self, request: operations.ClouddeployProjectsLocationsDeliveryPipelinesReleasesRolloutsRetryJobRequest, security: operations.ClouddeployProjectsLocationsDeliveryPipelinesReleasesRolloutsRetryJobSecurity) -> operations.ClouddeployProjectsLocationsDeliveryPipelinesReleasesRolloutsRetryJobResponse:
        r"""Retries the specified Job in a Rollout."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ClouddeployProjectsLocationsDeliveryPipelinesReleasesRolloutsRetryJobRequest, base_url, '/v1/{rollout}:retryJob', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "retry_job_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.ClouddeployProjectsLocationsDeliveryPipelinesReleasesRolloutsRetryJobRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ClouddeployProjectsLocationsDeliveryPipelinesReleasesRolloutsRetryJobResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.retry_job_response = out

        return res

    def clouddeploy_projects_locations_list(self, request: operations.ClouddeployProjectsLocationsListRequest, security: operations.ClouddeployProjectsLocationsListSecurity) -> operations.ClouddeployProjectsLocationsListResponse:
        r"""Lists information about the supported locations for this service."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ClouddeployProjectsLocationsListRequest, base_url, '/v1/{name}/locations', request)
        
        query_params = utils.get_query_params(operations.ClouddeployProjectsLocationsListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ClouddeployProjectsLocationsListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ListLocationsResponse])
                res.list_locations_response = out

        return res

    def clouddeploy_projects_locations_operations_cancel(self, request: operations.ClouddeployProjectsLocationsOperationsCancelRequest, security: operations.ClouddeployProjectsLocationsOperationsCancelSecurity) -> operations.ClouddeployProjectsLocationsOperationsCancelResponse:
        r"""Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ClouddeployProjectsLocationsOperationsCancelRequest, base_url, '/v1/{name}:cancel', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.ClouddeployProjectsLocationsOperationsCancelRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ClouddeployProjectsLocationsOperationsCancelResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.empty = out

        return res

    def clouddeploy_projects_locations_operations_list(self, request: operations.ClouddeployProjectsLocationsOperationsListRequest, security: operations.ClouddeployProjectsLocationsOperationsListSecurity) -> operations.ClouddeployProjectsLocationsOperationsListResponse:
        r"""Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ClouddeployProjectsLocationsOperationsListRequest, base_url, '/v1/{name}/operations', request)
        
        query_params = utils.get_query_params(operations.ClouddeployProjectsLocationsOperationsListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ClouddeployProjectsLocationsOperationsListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ListOperationsResponse])
                res.list_operations_response = out

        return res

    def clouddeploy_projects_locations_targets_create(self, request: operations.ClouddeployProjectsLocationsTargetsCreateRequest, security: operations.ClouddeployProjectsLocationsTargetsCreateSecurity) -> operations.ClouddeployProjectsLocationsTargetsCreateResponse:
        r"""Creates a new Target in a given project and location."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ClouddeployProjectsLocationsTargetsCreateRequest, base_url, '/v1/{parent}/targets', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "target_input", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.ClouddeployProjectsLocationsTargetsCreateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ClouddeployProjectsLocationsTargetsCreateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Operation])
                res.operation = out

        return res

    def clouddeploy_projects_locations_targets_delete(self, request: operations.ClouddeployProjectsLocationsTargetsDeleteRequest, security: operations.ClouddeployProjectsLocationsTargetsDeleteSecurity) -> operations.ClouddeployProjectsLocationsTargetsDeleteResponse:
        r"""Deletes a single Target."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ClouddeployProjectsLocationsTargetsDeleteRequest, base_url, '/v1/{name}', request)
        
        query_params = utils.get_query_params(operations.ClouddeployProjectsLocationsTargetsDeleteRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ClouddeployProjectsLocationsTargetsDeleteResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Operation])
                res.operation = out

        return res

    def clouddeploy_projects_locations_targets_get(self, request: operations.ClouddeployProjectsLocationsTargetsGetRequest, security: operations.ClouddeployProjectsLocationsTargetsGetSecurity) -> operations.ClouddeployProjectsLocationsTargetsGetResponse:
        r"""Gets details of a single Target."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ClouddeployProjectsLocationsTargetsGetRequest, base_url, '/v1/{name}', request)
        
        query_params = utils.get_query_params(operations.ClouddeployProjectsLocationsTargetsGetRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ClouddeployProjectsLocationsTargetsGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Target])
                res.target = out

        return res

    def clouddeploy_projects_locations_targets_get_iam_policy(self, request: operations.ClouddeployProjectsLocationsTargetsGetIamPolicyRequest, security: operations.ClouddeployProjectsLocationsTargetsGetIamPolicySecurity) -> operations.ClouddeployProjectsLocationsTargetsGetIamPolicyResponse:
        r"""Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ClouddeployProjectsLocationsTargetsGetIamPolicyRequest, base_url, '/v1/{resource}:getIamPolicy', request)
        
        query_params = utils.get_query_params(operations.ClouddeployProjectsLocationsTargetsGetIamPolicyRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ClouddeployProjectsLocationsTargetsGetIamPolicyResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Policy])
                res.policy = out

        return res

    def clouddeploy_projects_locations_targets_list(self, request: operations.ClouddeployProjectsLocationsTargetsListRequest, security: operations.ClouddeployProjectsLocationsTargetsListSecurity) -> operations.ClouddeployProjectsLocationsTargetsListResponse:
        r"""Lists Targets in a given project and location."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ClouddeployProjectsLocationsTargetsListRequest, base_url, '/v1/{parent}/targets', request)
        
        query_params = utils.get_query_params(operations.ClouddeployProjectsLocationsTargetsListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ClouddeployProjectsLocationsTargetsListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ListTargetsResponse])
                res.list_targets_response = out

        return res

    def clouddeploy_projects_locations_targets_patch(self, request: operations.ClouddeployProjectsLocationsTargetsPatchRequest, security: operations.ClouddeployProjectsLocationsTargetsPatchSecurity) -> operations.ClouddeployProjectsLocationsTargetsPatchResponse:
        r"""Updates the parameters of a single Target."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ClouddeployProjectsLocationsTargetsPatchRequest, base_url, '/v1/{name}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "target_input", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.ClouddeployProjectsLocationsTargetsPatchRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PATCH', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ClouddeployProjectsLocationsTargetsPatchResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Operation])
                res.operation = out

        return res

    def clouddeploy_projects_locations_targets_set_iam_policy(self, request: operations.ClouddeployProjectsLocationsTargetsSetIamPolicyRequest, security: operations.ClouddeployProjectsLocationsTargetsSetIamPolicySecurity) -> operations.ClouddeployProjectsLocationsTargetsSetIamPolicyResponse:
        r"""Sets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ClouddeployProjectsLocationsTargetsSetIamPolicyRequest, base_url, '/v1/{resource}:setIamPolicy', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "set_iam_policy_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.ClouddeployProjectsLocationsTargetsSetIamPolicyRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ClouddeployProjectsLocationsTargetsSetIamPolicyResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Policy])
                res.policy = out

        return res

    def clouddeploy_projects_locations_targets_test_iam_permissions(self, request: operations.ClouddeployProjectsLocationsTargetsTestIamPermissionsRequest, security: operations.ClouddeployProjectsLocationsTargetsTestIamPermissionsSecurity) -> operations.ClouddeployProjectsLocationsTargetsTestIamPermissionsResponse:
        r"""Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may \\"fail open\\" without warning."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ClouddeployProjectsLocationsTargetsTestIamPermissionsRequest, base_url, '/v1/{resource}:testIamPermissions', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "test_iam_permissions_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.ClouddeployProjectsLocationsTargetsTestIamPermissionsRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ClouddeployProjectsLocationsTargetsTestIamPermissionsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.TestIamPermissionsResponse])
                res.test_iam_permissions_response = out

        return res

    