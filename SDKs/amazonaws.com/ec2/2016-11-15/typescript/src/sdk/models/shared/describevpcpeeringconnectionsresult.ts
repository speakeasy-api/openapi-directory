/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";

/**
 * Describes an IPv4 CIDR block.
 */
export class DescribeVpcPeeringConnectionsResultVpcPeeringConnectionsAccepterVpcInfoCidrBlockSet extends SpeakeasyBase {
  @SpeakeasyMetadata()
  cidrBlock?: string;
}

/**
 * Describes an IPv6 CIDR block.
 */
export class DescribeVpcPeeringConnectionsResultVpcPeeringConnectionsAccepterVpcInfoIpv6CidrBlockSet extends SpeakeasyBase {
  @SpeakeasyMetadata()
  ipv6CidrBlock?: string;
}

/**
 * Information about the VPC peering connection options for the accepter or requester VPC.
 */
export class DescribeVpcPeeringConnectionsResultVpcPeeringConnectionsAccepterVpcInfoPeeringOptions extends SpeakeasyBase {
  @SpeakeasyMetadata()
  allowDnsResolutionFromRemoteVpc?: boolean;

  @SpeakeasyMetadata()
  allowEgressFromLocalClassicLinkToRemoteVpc?: boolean;

  @SpeakeasyMetadata()
  allowEgressFromLocalVpcToRemoteClassicLink?: boolean;
}

/**
 * Information about the accepter VPC. CIDR block information is only returned when describing an active VPC peering connection.
 */
export class DescribeVpcPeeringConnectionsResultVpcPeeringConnectionsAccepterVpcInfo extends SpeakeasyBase {
  @SpeakeasyMetadata()
  cidrBlock?: string;

  @SpeakeasyMetadata({
    elemType:
      DescribeVpcPeeringConnectionsResultVpcPeeringConnectionsAccepterVpcInfoCidrBlockSet,
  })
  cidrBlockSet?: DescribeVpcPeeringConnectionsResultVpcPeeringConnectionsAccepterVpcInfoCidrBlockSet[];

  @SpeakeasyMetadata({
    elemType:
      DescribeVpcPeeringConnectionsResultVpcPeeringConnectionsAccepterVpcInfoIpv6CidrBlockSet,
  })
  ipv6CidrBlockSet?: DescribeVpcPeeringConnectionsResultVpcPeeringConnectionsAccepterVpcInfoIpv6CidrBlockSet[];

  @SpeakeasyMetadata()
  ownerId?: string;

  @SpeakeasyMetadata()
  peeringOptions?: DescribeVpcPeeringConnectionsResultVpcPeeringConnectionsAccepterVpcInfoPeeringOptions;

  @SpeakeasyMetadata()
  region?: string;

  @SpeakeasyMetadata()
  vpcId?: string;
}

/**
 * Describes an IPv4 CIDR block.
 */
export class DescribeVpcPeeringConnectionsResultVpcPeeringConnectionsRequesterVpcInfoCidrBlockSet extends SpeakeasyBase {
  @SpeakeasyMetadata()
  cidrBlock?: string;
}

/**
 * Describes an IPv6 CIDR block.
 */
export class DescribeVpcPeeringConnectionsResultVpcPeeringConnectionsRequesterVpcInfoIpv6CidrBlockSet extends SpeakeasyBase {
  @SpeakeasyMetadata()
  ipv6CidrBlock?: string;
}

/**
 * Information about the VPC peering connection options for the accepter or requester VPC.
 */
export class DescribeVpcPeeringConnectionsResultVpcPeeringConnectionsRequesterVpcInfoPeeringOptions extends SpeakeasyBase {
  @SpeakeasyMetadata()
  allowDnsResolutionFromRemoteVpc?: boolean;

  @SpeakeasyMetadata()
  allowEgressFromLocalClassicLinkToRemoteVpc?: boolean;

  @SpeakeasyMetadata()
  allowEgressFromLocalVpcToRemoteClassicLink?: boolean;
}

/**
 * Information about the requester VPC. CIDR block information is only returned when describing an active VPC peering connection.
 */
export class DescribeVpcPeeringConnectionsResultVpcPeeringConnectionsRequesterVpcInfo extends SpeakeasyBase {
  @SpeakeasyMetadata()
  cidrBlock?: string;

  @SpeakeasyMetadata({
    elemType:
      DescribeVpcPeeringConnectionsResultVpcPeeringConnectionsRequesterVpcInfoCidrBlockSet,
  })
  cidrBlockSet?: DescribeVpcPeeringConnectionsResultVpcPeeringConnectionsRequesterVpcInfoCidrBlockSet[];

  @SpeakeasyMetadata({
    elemType:
      DescribeVpcPeeringConnectionsResultVpcPeeringConnectionsRequesterVpcInfoIpv6CidrBlockSet,
  })
  ipv6CidrBlockSet?: DescribeVpcPeeringConnectionsResultVpcPeeringConnectionsRequesterVpcInfoIpv6CidrBlockSet[];

  @SpeakeasyMetadata()
  ownerId?: string;

  @SpeakeasyMetadata()
  peeringOptions?: DescribeVpcPeeringConnectionsResultVpcPeeringConnectionsRequesterVpcInfoPeeringOptions;

  @SpeakeasyMetadata()
  region?: string;

  @SpeakeasyMetadata()
  vpcId?: string;
}

/**
 * The status of the VPC peering connection.
 */
export enum DescribeVpcPeeringConnectionsResultVpcPeeringConnectionsStatusCodeEnum {
  InitiatingRequest = "initiating-request",
  PendingAcceptance = "pending-acceptance",
  Active = "active",
  Deleted = "deleted",
  Rejected = "rejected",
  Failed = "failed",
  Expired = "expired",
  Provisioning = "provisioning",
  Deleting = "deleting",
}

/**
 * The status of the VPC peering connection.
 */
export class DescribeVpcPeeringConnectionsResultVpcPeeringConnectionsStatus extends SpeakeasyBase {
  @SpeakeasyMetadata()
  code?: DescribeVpcPeeringConnectionsResultVpcPeeringConnectionsStatusCodeEnum;

  @SpeakeasyMetadata()
  message?: string;
}

/**
 * Describes a tag.
 */
export class DescribeVpcPeeringConnectionsResultVpcPeeringConnectionsTags extends SpeakeasyBase {
  @SpeakeasyMetadata()
  key?: string;

  @SpeakeasyMetadata()
  value?: string;
}

/**
 * Describes a VPC peering connection.
 */
export class DescribeVpcPeeringConnectionsResultVpcPeeringConnections extends SpeakeasyBase {
  @SpeakeasyMetadata()
  accepterVpcInfo?: DescribeVpcPeeringConnectionsResultVpcPeeringConnectionsAccepterVpcInfo;

  @SpeakeasyMetadata()
  expirationTime?: Date;

  @SpeakeasyMetadata()
  requesterVpcInfo?: DescribeVpcPeeringConnectionsResultVpcPeeringConnectionsRequesterVpcInfo;

  @SpeakeasyMetadata()
  status?: DescribeVpcPeeringConnectionsResultVpcPeeringConnectionsStatus;

  @SpeakeasyMetadata({
    elemType: DescribeVpcPeeringConnectionsResultVpcPeeringConnectionsTags,
  })
  tags?: DescribeVpcPeeringConnectionsResultVpcPeeringConnectionsTags[];

  @SpeakeasyMetadata()
  vpcPeeringConnectionId?: string;
}

/**
 * Success
 */
export class DescribeVpcPeeringConnectionsResult extends SpeakeasyBase {
  @SpeakeasyMetadata()
  nextToken?: string;

  @SpeakeasyMetadata({
    elemType: DescribeVpcPeeringConnectionsResultVpcPeeringConnections,
  })
  vpcPeeringConnections?: DescribeVpcPeeringConnectionsResultVpcPeeringConnections[];
}
