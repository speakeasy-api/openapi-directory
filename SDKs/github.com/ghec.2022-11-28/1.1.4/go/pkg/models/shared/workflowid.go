// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"bytes"
	"encoding/json"
	"errors"
)

type WorkflowIDType string

const (
	WorkflowIDTypeInteger WorkflowIDType = "integer"
	WorkflowIDTypeStr     WorkflowIDType = "str"
)

type WorkflowID struct {
	Integer *int64
	Str     *string

	Type WorkflowIDType
}

func CreateWorkflowIDInteger(integer int64) WorkflowID {
	typ := WorkflowIDTypeInteger

	return WorkflowID{
		Integer: &integer,
		Type:    typ,
	}
}

func CreateWorkflowIDStr(str string) WorkflowID {
	typ := WorkflowIDTypeStr

	return WorkflowID{
		Str:  &str,
		Type: typ,
	}
}

func (u *WorkflowID) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	integer := new(int64)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&integer); err == nil {
		u.Integer = integer
		u.Type = WorkflowIDTypeInteger
		return nil
	}

	str := new(string)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&str); err == nil {
		u.Str = str
		u.Type = WorkflowIDTypeStr
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u WorkflowID) MarshalJSON() ([]byte, error) {
	if u.Integer != nil {
		return json.Marshal(u.Integer)
	}

	if u.Str != nil {
		return json.Marshal(u.Str)
	}

	return nil, nil
}
