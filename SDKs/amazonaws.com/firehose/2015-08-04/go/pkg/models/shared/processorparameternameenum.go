// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type ProcessorParameterNameEnum string

const (
	ProcessorParameterNameEnumLambdaArn               ProcessorParameterNameEnum = "LambdaArn"
	ProcessorParameterNameEnumNumberOfRetries         ProcessorParameterNameEnum = "NumberOfRetries"
	ProcessorParameterNameEnumMetadataExtractionQuery ProcessorParameterNameEnum = "MetadataExtractionQuery"
	ProcessorParameterNameEnumJSONParsingEngine       ProcessorParameterNameEnum = "JsonParsingEngine"
	ProcessorParameterNameEnumRoleArn                 ProcessorParameterNameEnum = "RoleArn"
	ProcessorParameterNameEnumBufferSizeInMBs         ProcessorParameterNameEnum = "BufferSizeInMBs"
	ProcessorParameterNameEnumBufferIntervalInSeconds ProcessorParameterNameEnum = "BufferIntervalInSeconds"
	ProcessorParameterNameEnumSubRecordType           ProcessorParameterNameEnum = "SubRecordType"
	ProcessorParameterNameEnumDelimiter               ProcessorParameterNameEnum = "Delimiter"
)

func (e ProcessorParameterNameEnum) ToPointer() *ProcessorParameterNameEnum {
	return &e
}

func (e *ProcessorParameterNameEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "LambdaArn":
		fallthrough
	case "NumberOfRetries":
		fallthrough
	case "MetadataExtractionQuery":
		fallthrough
	case "JsonParsingEngine":
		fallthrough
	case "RoleArn":
		fallthrough
	case "BufferSizeInMBs":
		fallthrough
	case "BufferIntervalInSeconds":
		fallthrough
	case "SubRecordType":
		fallthrough
	case "Delimiter":
		*e = ProcessorParameterNameEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ProcessorParameterNameEnum: %v", v)
	}
}
