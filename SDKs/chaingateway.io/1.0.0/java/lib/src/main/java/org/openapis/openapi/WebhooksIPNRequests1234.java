/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi;

import com.fasterxml.jackson.databind.ObjectMapper;
import java.net.http.HttpResponse;
import java.nio.charset.StandardCharsets;
import java.util.function.Function;
import java.util.stream.Collectors;
import org.openapis.openapi.utils.HTTPClient;
import org.openapis.openapi.utils.HTTPRequest;
import org.openapis.openapi.utils.JSON;
import org.openapis.openapi.utils.SerializedBody;

/**
 * With webhooks, you can get notified about various events in the blockchain. E.g:
 * 
 * Receipt of payment to a specific address  
 * Outgoing payment from a specific address  
 * Exchange of sats between two specific addresses  
 * Execution of a contract  
 * Change of ownership of a token
 * 
 * For this you have to create a webhook with certain filter criteria. The following values are available as filter criteria:
 * 
 * from: Outgoing address  
 * to: Incoming address  
 * contract: Contract that should be monitored  
 * tokenid: ID of a token that should be monitored.  
 * type: Token type (\[ETH', 'ERC20', 'ERC721', null)
 * 
 * Parameter "url" defines the url we are calling with a POST Request.. The request body will have your filter criterias and some additional informatiion about your transaction:
 * 
 * ``` json
 * {
 *   "id": "63a1ae0887ca3625b82b4924",
 *   "webhook_id": "63a1ad0e87ca3625b82b4923",
 *   "from": "0x0000000000000000000000000000000000000000",
 *   "to": "0xa9d1e08c7793af67e9d92fe308d5697fb81d3e43",
 *   "blocknumber": "123",
 *   "datetime": "22-12-20 13:43:52",
 *   "tokenid": "0x0000000000000000000000000000000000000000",
 *   "type": null,
 *   "txid": "000000000000000000000000000000000000000000000000000",
 *   "amount": "000000000000000000000000000000000000000000000000000"
 * }
 * 
 * ```
 */
public class WebhooksIPNRequests1234 {
	
	private HTTPClient _defaultClient;
	private HTTPClient _securityClient;
	private String _serverUrl;
	private String _language;
	private String _sdkVersion;
	private String _genVersion;

	public WebhooksIPNRequests1234(HTTPClient defaultClient, HTTPClient securityClient, String serverUrl, String language, String sdkVersion, String genVersion) {
		this._defaultClient = defaultClient;
		this._securityClient = securityClient;
		this._serverUrl = serverUrl;
		this._language = language;
		this._sdkVersion = sdkVersion;
		this._genVersion = genVersion;
	}

    /**
     * listFailedIPNs
     * Returns all subscriptions/IPNs created with an account.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.Listfailedipns4Response listfailedipns4(byte[] request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/v2/bitcoin/webhooks/notifications/failed");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "raw");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.Listfailedipns4Response res = new org.openapis.openapi.models.operations.Listfailedipns4Response(contentType, httpRes.statusCode()) {{
            listfailedipns4200ApplicationJSONObject = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            res.headers = httpRes.headers().map().keySet().stream().collect(Collectors.toMap(Function.identity(), k -> httpRes.headers().allValues(k).toArray(new String[0])));
            
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.Listfailedipns4200ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.Listfailedipns4200ApplicationJSON.class);
                res.listfailedipns4200ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * listSubscribedAddresses
     * Returns all subscriptions/IPNs created with an account.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.Listsubscribedaddresses4Response listsubscribedaddresses4(byte[] request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/v2/bitcoin/webhooks");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "raw");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.Listsubscribedaddresses4Response res = new org.openapis.openapi.models.operations.Listsubscribedaddresses4Response(contentType, httpRes.statusCode()) {{
            listsubscribedaddresses4200ApplicationJSONObject = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            res.headers = httpRes.headers().map().keySet().stream().collect(Collectors.toMap(Function.identity(), k -> httpRes.headers().allValues(k).toArray(new String[0])));
            
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.Listsubscribedaddresses4200ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.Listsubscribedaddresses4200ApplicationJSON.class);
                res.listsubscribedaddresses4200ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * resendFailedIPN
     * Returns all subscriptions/IPNs created with an account.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.Resendfailedipn4Response resendfailedipn4(org.openapis.openapi.models.operations.Resendfailedipn4Request request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.Resendfailedipn4Request.class, baseUrl, "/v2/bitcoin/webhooks/notifications/failed/{notification_id}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "json");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.Resendfailedipn4Response res = new org.openapis.openapi.models.operations.Resendfailedipn4Response(contentType, httpRes.statusCode()) {{
            resendfailedipn4200ApplicationJSONObject = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            res.headers = httpRes.headers().map().keySet().stream().collect(Collectors.toMap(Function.identity(), k -> httpRes.headers().allValues(k).toArray(new String[0])));
            
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.Resendfailedipn4200ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.Resendfailedipn4200ApplicationJSON.class);
                res.resendfailedipn4200ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * subscribeAddress
     * Creates a new subscription/IPN for the given address (and contractaddress). You will receive a notification to the given url every time a deposit is received. Unsubscribe the address before sending tokens/ETH from it or you won't get reliable notifications anymore.
     * 
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.Subscribeaddress4Response subscribeaddress4(org.openapis.openapi.models.operations.Subscribeaddress4RequestBody request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/v2/bitcoin/webhooks");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "json");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.Subscribeaddress4Response res = new org.openapis.openapi.models.operations.Subscribeaddress4Response(contentType, httpRes.statusCode()) {{
            subscribeaddress4200ApplicationJSONObject = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            res.headers = httpRes.headers().map().keySet().stream().collect(Collectors.toMap(Function.identity(), k -> httpRes.headers().allValues(k).toArray(new String[0])));
            
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.Subscribeaddress4200ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.Subscribeaddress4200ApplicationJSON.class);
                res.subscribeaddress4200ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * unsubscribeAddress
     * Deletes an existing subscription/IPN for the given address (and contractaddress).
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.Unsubscribeaddress4Response unsubscribeaddress4(org.openapis.openapi.models.operations.Unsubscribeaddress4Request request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.Unsubscribeaddress4Request.class, baseUrl, "/v2/bitcoin/webhooks/{id}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "raw");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.Unsubscribeaddress4Response res = new org.openapis.openapi.models.operations.Unsubscribeaddress4Response(contentType, httpRes.statusCode()) {{
            unsubscribeaddress4200ApplicationJSONObject = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            res.headers = httpRes.headers().map().keySet().stream().collect(Collectors.toMap(Function.identity(), k -> httpRes.headers().allValues(k).toArray(new String[0])));
            
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.Unsubscribeaddress4200ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.Unsubscribeaddress4200ApplicationJSON.class);
                res.unsubscribeaddress4200ApplicationJSONObject = out;
            }
        }

        return res;
    }
}