// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type CreateParameterRequest struct {
	Request shared.Parameter `request:"mediaType=application/json"`
}

// CreateParameter200ApplicationJSONActionEnum - The id of the action
type CreateParameter200ApplicationJSONActionEnum string

const (
	CreateParameter200ApplicationJSONActionEnumCreateParameter CreateParameter200ApplicationJSONActionEnum = "createParameter"
)

func (e *CreateParameter200ApplicationJSONActionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "createParameter":
		*e = CreateParameter200ApplicationJSONActionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateParameter200ApplicationJSONActionEnum: %s", s)
	}
}

// CreateParameter200ApplicationJSONData - Parameters
type CreateParameter200ApplicationJSONData struct {
	Parameters []shared.Parameter `json:"parameters"`
}

// CreateParameter200ApplicationJSONResultEnum - Result of the request
type CreateParameter200ApplicationJSONResultEnum string

const (
	CreateParameter200ApplicationJSONResultEnumSuccess CreateParameter200ApplicationJSONResultEnum = "success"
	CreateParameter200ApplicationJSONResultEnumError   CreateParameter200ApplicationJSONResultEnum = "error"
)

func (e *CreateParameter200ApplicationJSONResultEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "success":
		fallthrough
	case "error":
		*e = CreateParameter200ApplicationJSONResultEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateParameter200ApplicationJSONResultEnum: %s", s)
	}
}

// CreateParameter200ApplicationJSON - Settings
type CreateParameter200ApplicationJSON struct {
	// The id of the action
	Action CreateParameter200ApplicationJSONActionEnum `json:"action"`
	// Parameters
	Data CreateParameter200ApplicationJSONData `json:"data"`
	// Id of the parameter
	ID string `json:"id"`
	// Result of the request
	Result CreateParameter200ApplicationJSONResultEnum `json:"result"`
}

type CreateParameterResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Settings
	CreateParameter200ApplicationJSONObject *CreateParameter200ApplicationJSON
}
