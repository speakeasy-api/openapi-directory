/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

export class WebinarRegistrantQuestionUpdateSecurity extends SpeakeasyBase {
  @SpeakeasyMetadata({
    data: "security, scheme=true;type=oauth2;name=Authorization",
  })
  oAuth: string;
}

/**
 * The question-answer type.
 */
export enum WebinarRegistrantQuestionUpdateWebinarRegistrantQuestionsCustomQuestionsTypeEnum {
  Short = "short",
  SingleRadio = "single_radio",
  SingleDropdown = "single_dropdown",
  Multiple = "multiple",
}

export class WebinarRegistrantQuestionUpdateWebinarRegistrantQuestionsCustomQuestions extends SpeakeasyBase {
  /**
   * An array of answer choices. Can't be used for short answer type.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "answers" })
  answers?: string[];

  /**
   * State whether or not the custom question is required to be answered by a registrant.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "required" })
  required?: boolean;

  /**
   * Custom question.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "title" })
  title?: string;

  /**
   * The question-answer type.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "type" })
  type?: WebinarRegistrantQuestionUpdateWebinarRegistrantQuestionsCustomQuestionsTypeEnum;
}

/**
 * Field name
 */
export enum WebinarRegistrantQuestionUpdateWebinarRegistrantQuestionsQuestionsFieldNameEnum {
  LastName = "last_name",
  Address = "address",
  City = "city",
  Country = "country",
  Zip = "zip",
  State = "state",
  Phone = "phone",
  Industry = "industry",
  Org = "org",
  JobTitle = "job_title",
  PurchasingTimeFrame = "purchasing_time_frame",
  RoleInPurchaseProcess = "role_in_purchase_process",
  NoOfEmployees = "no_of_employees",
  Comments = "comments",
}

export class WebinarRegistrantQuestionUpdateWebinarRegistrantQuestionsQuestions extends SpeakeasyBase {
  /**
   * Field name
   */
  @SpeakeasyMetadata()
  @Expose({ name: "field_name" })
  fieldName?: WebinarRegistrantQuestionUpdateWebinarRegistrantQuestionsQuestionsFieldNameEnum;

  /**
   * State whether the selected fields are required or optional.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "required" })
  required?: boolean;
}

/**
 * Webinar Registrant Questions
 */
export class WebinarRegistrantQuestionUpdateWebinarRegistrantQuestions extends SpeakeasyBase {
  /**
   * Array of Registrant Custom Questions.
   */
  @SpeakeasyMetadata({
    data: "multipart_form, name=custom_questions;json=true",
    elemType:
      WebinarRegistrantQuestionUpdateWebinarRegistrantQuestionsCustomQuestions,
  })
  @Expose({ name: "custom_questions" })
  @Type(
    () =>
      WebinarRegistrantQuestionUpdateWebinarRegistrantQuestionsCustomQuestions
  )
  customQuestions?: WebinarRegistrantQuestionUpdateWebinarRegistrantQuestionsCustomQuestions[];

  /**
   * Array of registration fields whose values should be provided by registrants during registration.
   */
  @SpeakeasyMetadata({
    data: "multipart_form, name=questions;json=true",
    elemType:
      WebinarRegistrantQuestionUpdateWebinarRegistrantQuestionsQuestions,
  })
  @Expose({ name: "questions" })
  @Type(
    () => WebinarRegistrantQuestionUpdateWebinarRegistrantQuestionsQuestions
  )
  questions?: WebinarRegistrantQuestionUpdateWebinarRegistrantQuestionsQuestions[];
}

export class WebinarRegistrantQuestionUpdateRequest extends SpeakeasyBase {
  /**
   * Webinar Registrant Questions
   */
  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  requestBody: WebinarRegistrantQuestionUpdateWebinarRegistrantQuestions;

  /**
   * The webinar ID in "**long**" format(represented as int64 data type in JSON).
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=webinarId",
  })
  webinarId: number;
}

export class WebinarRegistrantQuestionUpdateResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;
}
