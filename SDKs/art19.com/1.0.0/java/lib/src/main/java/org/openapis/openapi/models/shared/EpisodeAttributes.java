/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

public class EpisodeAttributes {
    /**
     * Only visible to credentials having write privileges for the series.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("allow_user_comments")
    public Boolean allowUserComments;

    public EpisodeAttributes withAllowUserComments(Boolean allowUserComments) {
        this.allowUserComments = allowUserComments;
        return this;
    }
    
    /**
     * This will be replaced by the relationship `cascaded_cover_image` in a future update.&lt;br/&gt;
     * The image ID of the cover art for this episode. This is the preferred image ID to use.
     * If there is no specific cover for the episode, the image ID of the season or the
     * series will be returned, whichever has one defined.
     * The `/images` endpoint provides details to the image.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("cascaded_cover_image_id")
    public String cascadedCoverImageId;

    public EpisodeAttributes withCascadedCoverImageId(String cascadedCoverImageId) {
        this.cascadedCoverImageId = cascadedCoverImageId;
        return this;
    }
    
    /**
     * This will be replaced by the relationship `cover_image` in a future update.&lt;br/&gt;
     * The image ID of the cover art for this episode, if an episode-specific image has been provided.
     * The `/images` endpoint provideds details to the image.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("cover_image_id")
    public String coverImageId;

    public EpisodeAttributes withCoverImageId(String coverImageId) {
        this.coverImageId = coverImageId;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("created_at")
    public OffsetDateTime createdAt;

    public EpisodeAttributes withCreatedAt(OffsetDateTime createdAt) {
        this.createdAt = createdAt;
        return this;
    }
    
    /**
     * The description of the episode, possibly in HTML format
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    public String description;

    public EpisodeAttributes withDescription(String description) {
        this.description = description;
        return this;
    }
    
    /**
     * Determines whether `description` is in HTML format or plain.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description_is_html")
    public Boolean descriptionIsHtml;

    public EpisodeAttributes withDescriptionIsHtml(Boolean descriptionIsHtml) {
        this.descriptionIsHtml = descriptionIsHtml;
        return this;
    }
    
    /**
     * The description with all HTML markup removed. If the description does not contain markup,
     * this is identical to `description`.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description_plain")
    public String descriptionPlain;

    public EpisodeAttributes withDescriptionPlain(String descriptionPlain) {
        this.descriptionPlain = descriptionPlain;
        return this;
    }
    
    /**
     * The file name, without extension, to present users when downloading the episode
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("file_name")
    public String fileName;

    public EpisodeAttributes withFileName(String fileName) {
        this.fileName = fileName;
        return this;
    }
    
    /**
     * The type of the episode according to Apple's type categorization
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("itunes_type")
    public EpisodeAttributesItunesTypeEnum itunesType;

    public EpisodeAttributes withItunesType(EpisodeAttributesItunesTypeEnum itunesType) {
        this.itunesType = itunesType;
        return this;
    }
    
    /**
     * The number of total downloads all time for this episode.
     * Only visible if the credential has the right privilege on the series.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("listen_count")
    public Long listenCount;

    public EpisodeAttributes withListenCount(Long listenCount) {
        this.listenCount = listenCount;
        return this;
    }
    
    /**
     * The current premium status of the episode
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("premium_status")
    public EpisodeAttributesPremiumStatusEnum premiumStatus;

    public EpisodeAttributes withPremiumStatus(EpisodeAttributesPremiumStatusEnum premiumStatus) {
        this.premiumStatus = premiumStatus;
        return this;
    }
    
    /**
     * If `true`, the episode will be available for download and included in the feed as soon as its
     * release time is reached, provided it has a valid media file, and `release_end_at` is in the future (if applicable).
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("published")
    public Boolean published;

    public EpisodeAttributes withPublished(Boolean published) {
        this.published = published;
        return this;
    }
    
    /**
     * The date and time when an episode will no longer be included in the feed, or available for download.
     * `Published` will remain `true` unless the episode is manually unpublished.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("release_end_at")
    public OffsetDateTime releaseEndAt;

    public EpisodeAttributes withReleaseEndAt(OffsetDateTime releaseEndAt) {
        this.releaseEndAt = releaseEndAt;
        return this;
    }
    
    /**
     * If `true`, the episode's release time is set in a way it is considered released right away.
     * Only visible if the credential has write privileges on the series.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("release_immediately")
    public Boolean releaseImmediately;

    public EpisodeAttributes withReleaseImmediately(Boolean releaseImmediately) {
        this.releaseImmediately = releaseImmediately;
        return this;
    }
    
    /**
     * The date and time when an episode will be released. It will be available for download and included
     * in the feed if this time is reached, `published` is set to `true`, and the episode has a media file.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("released_at")
    public OffsetDateTime releasedAt;

    public EpisodeAttributes withReleasedAt(OffsetDateTime releasedAt) {
        this.releasedAt = releasedAt;
        return this;
    }
    
    /**
     * A globally unique identifier describing the episode. This ID is commonly used by podcast applications
     * to determine whether an episode has already been downloaded or not.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("rss_guid")
    public String rssGuid;

    public EpisodeAttributes withRssGuid(String rssGuid) {
        this.rssGuid = rssGuid;
        return this;
    }
    
    /**
     * Use the relationship `season` instead.&lt;br /&gt;
     * The ID of the season an episode belongs to. This can be `null`. A series can have episodes with and
     * without seasons at the same time.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("season_id")
    public String seasonId;

    public EpisodeAttributes withSeasonId(String seasonId) {
        this.seasonId = seasonId;
        return this;
    }
    
    /**
     * Use the relationship `series` instead.&lt;br /&gt;
     * The ID of the series an episode belongs to.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("series_id")
    public String seriesId;

    public EpisodeAttributes withSeriesId(String seriesId) {
        this.seriesId = seriesId;
        return this;
    }
    
    /**
     * The title of the episode modified for sorting. This converts all characters to
     * lower case, removes an eventually leading `The` as well as leading and trailling whitespace characters.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sort_title")
    public String sortTitle;

    public EpisodeAttributes withSortTitle(String sortTitle) {
        this.sortTitle = sortTitle;
        return this;
    }
    
    /**
     * The status of an episode
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("status")
    public EpisodeAttributesStatusEnum status;

    public EpisodeAttributes withStatus(EpisodeAttributesStatusEnum status) {
        this.status = status;
        return this;
    }
    
    /**
     * The title of the episode
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("title")
    public String title;

    public EpisodeAttributes withTitle(String title) {
        this.title = title;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("updated_at")
    public OffsetDateTime updatedAt;

    public EpisodeAttributes withUpdatedAt(OffsetDateTime updatedAt) {
        this.updatedAt = updatedAt;
        return this;
    }
    
    public EpisodeAttributes(){}
}
