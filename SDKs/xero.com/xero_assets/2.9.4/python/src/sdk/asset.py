"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Asset:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def create_asset(self, request: operations.CreateAssetRequest, security: operations.CreateAssetSecurity) -> operations.CreateAssetResponse:
        r"""adds a fixed asset
        Adds an asset to the system
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/Assets'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "asset", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateAssetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Asset])
                res.asset = out
        elif http_res.status_code == 400:
            pass

        return res

    def create_asset_type(self, request: operations.CreateAssetTypeRequest, security: operations.CreateAssetTypeSecurity) -> operations.CreateAssetTypeResponse:
        r"""adds a fixed asset type
        Adds an fixed asset type to the system
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/AssetTypes'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "asset_type", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateAssetTypeResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.AssetType])
                res.asset_type = out
        elif http_res.status_code in [400, 409]:
            pass

        return res

    def get_asset_by_id(self, request: operations.GetAssetByIDRequest, security: operations.GetAssetByIDSecurity) -> operations.GetAssetByIDResponse:
        r"""Retrieves fixed asset by id
        By passing in the appropriate asset id, you can search for
        a specific fixed asset in the system
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetAssetByIDRequest, base_url, '/Assets/{id}', request)
        
        headers = utils.get_headers(request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetAssetByIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Asset])
                res.asset = out
        elif http_res.status_code == 400:
            pass

        return res

    def get_asset_settings(self, request: operations.GetAssetSettingsRequest, security: operations.GetAssetSettingsSecurity) -> operations.GetAssetSettingsResponse:
        r"""searches fixed asset settings
        By passing in the appropriate options, you can search for available fixed asset types in the system
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/Settings'
        
        headers = utils.get_headers(request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetAssetSettingsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Setting])
                res.setting = out
        elif http_res.status_code == 400:
            pass

        return res

    def get_asset_types(self, request: operations.GetAssetTypesRequest, security: operations.GetAssetTypesSecurity) -> operations.GetAssetTypesResponse:
        r"""searches fixed asset types
        By passing in the appropriate options, you can search for available fixed asset types in the system
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/AssetTypes'
        
        headers = utils.get_headers(request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetAssetTypesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.AssetType]])
                res.asset_types = out
        elif http_res.status_code == 400:
            pass

        return res

    def get_assets(self, request: operations.GetAssetsRequest, security: operations.GetAssetsSecurity) -> operations.GetAssetsResponse:
        r"""searches fixed asset
        By passing in the appropriate options, you can search for available fixed asset in the system
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/Assets'
        
        headers = utils.get_headers(request)
        query_params = utils.get_query_params(operations.GetAssetsRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetAssetsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Assets])
                res.assets = out
        elif http_res.status_code == 400:
            pass

        return res

    