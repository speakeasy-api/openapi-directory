<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Activities 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Delete a post activity
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteWorkspaceSlugMembersMemberSlugActivitiesIdRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteWorkspaceSlugMembersMemberSlugActivitiesIdSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteWorkspaceSlugMembersMemberSlugActivitiesIdResponse
     */
	public function deleteWorkspaceSlugMembersMemberSlugActivitiesId(
        \OpenAPI\OpenAPI\Models\Operations\DeleteWorkspaceSlugMembersMemberSlugActivitiesIdRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeleteWorkspaceSlugMembersMemberSlugActivitiesIdSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteWorkspaceSlugMembersMemberSlugActivitiesIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{workspace_slug}/members/{member_slug}/activities/{id}', \OpenAPI\OpenAPI\Models\Operations\DeleteWorkspaceSlugMembersMemberSlugActivitiesIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteWorkspaceSlugMembersMemberSlugActivitiesIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204 or $httpResponse->getStatusCode() === 403) {
        }

        return $response;
    }
	
    /**
     * List activities for a workspace
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetWorkspaceSlugActivitiesRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetWorkspaceSlugActivitiesSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetWorkspaceSlugActivitiesResponse
     */
	public function getWorkspaceSlugActivities(
        \OpenAPI\OpenAPI\Models\Operations\GetWorkspaceSlugActivitiesRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetWorkspaceSlugActivitiesSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetWorkspaceSlugActivitiesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{workspace_slug}/activities', \OpenAPI\OpenAPI\Models\Operations\GetWorkspaceSlugActivitiesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetWorkspaceSlugActivitiesRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetWorkspaceSlugActivitiesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Get an activity in the workspace
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetWorkspaceSlugActivitiesIdRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetWorkspaceSlugActivitiesIdSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetWorkspaceSlugActivitiesIdResponse
     */
	public function getWorkspaceSlugActivitiesId(
        \OpenAPI\OpenAPI\Models\Operations\GetWorkspaceSlugActivitiesIdRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetWorkspaceSlugActivitiesIdSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetWorkspaceSlugActivitiesIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{workspace_slug}/activities/{id}', \OpenAPI\OpenAPI\Models\Operations\GetWorkspaceSlugActivitiesIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetWorkspaceSlugActivitiesIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * List activities for a member
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetWorkspaceSlugMembersMemberSlugActivitiesRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetWorkspaceSlugMembersMemberSlugActivitiesSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetWorkspaceSlugMembersMemberSlugActivitiesResponse
     */
	public function getWorkspaceSlugMembersMemberSlugActivities(
        \OpenAPI\OpenAPI\Models\Operations\GetWorkspaceSlugMembersMemberSlugActivitiesRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetWorkspaceSlugMembersMemberSlugActivitiesSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetWorkspaceSlugMembersMemberSlugActivitiesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{workspace_slug}/members/{member_slug}/activities', \OpenAPI\OpenAPI\Models\Operations\GetWorkspaceSlugMembersMemberSlugActivitiesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetWorkspaceSlugMembersMemberSlugActivitiesRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetWorkspaceSlugMembersMemberSlugActivitiesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * List member activities in an organization
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetWorkspaceSlugOrganizationsOrganizationIdActivitiesRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetWorkspaceSlugOrganizationsOrganizationIdActivitiesSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetWorkspaceSlugOrganizationsOrganizationIdActivitiesResponse
     */
	public function getWorkspaceSlugOrganizationsOrganizationIdActivities(
        \OpenAPI\OpenAPI\Models\Operations\GetWorkspaceSlugOrganizationsOrganizationIdActivitiesRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetWorkspaceSlugOrganizationsOrganizationIdActivitiesSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetWorkspaceSlugOrganizationsOrganizationIdActivitiesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{workspace_slug}/organizations/{organization_id}/activities', \OpenAPI\OpenAPI\Models\Operations\GetWorkspaceSlugOrganizationsOrganizationIdActivitiesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetWorkspaceSlugOrganizationsOrganizationIdActivitiesRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetWorkspaceSlugOrganizationsOrganizationIdActivitiesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Create a Custom or a Content activity for a new or existing member
     * 
     * Use this method when you know an identity of the member (github, email, twitter, etc.) but not their Orbit ID. Pass fields in the member object to update the member in addition to creating the activity.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostWorkspaceSlugActivitiesRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PostWorkspaceSlugActivitiesSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PostWorkspaceSlugActivitiesResponse
     */
	public function postWorkspaceSlugActivities(
        \OpenAPI\OpenAPI\Models\Operations\PostWorkspaceSlugActivitiesRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PostWorkspaceSlugActivitiesSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PostWorkspaceSlugActivitiesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{workspace_slug}/activities', \OpenAPI\OpenAPI\Models\Operations\PostWorkspaceSlugActivitiesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "activityAndIdentity", "json");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostWorkspaceSlugActivitiesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 422) {
        }

        return $response;
    }
	
    /**
     * Create a Custom or a Content activity for a member
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostWorkspaceSlugMembersMemberSlugActivitiesRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PostWorkspaceSlugMembersMemberSlugActivitiesSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PostWorkspaceSlugMembersMemberSlugActivitiesResponse
     */
	public function postWorkspaceSlugMembersMemberSlugActivities(
        \OpenAPI\OpenAPI\Models\Operations\PostWorkspaceSlugMembersMemberSlugActivitiesRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PostWorkspaceSlugMembersMemberSlugActivitiesSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PostWorkspaceSlugMembersMemberSlugActivitiesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{workspace_slug}/members/{member_slug}/activities', \OpenAPI\OpenAPI\Models\Operations\PostWorkspaceSlugMembersMemberSlugActivitiesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostWorkspaceSlugMembersMemberSlugActivitiesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 422) {
        }

        return $response;
    }
	
    /**
     * Update a custom activity for a member
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PutWorkspaceSlugMembersMemberSlugActivitiesIdRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PutWorkspaceSlugMembersMemberSlugActivitiesIdSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PutWorkspaceSlugMembersMemberSlugActivitiesIdResponse
     */
	public function putWorkspaceSlugMembersMemberSlugActivitiesId(
        \OpenAPI\OpenAPI\Models\Operations\PutWorkspaceSlugMembersMemberSlugActivitiesIdRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PutWorkspaceSlugMembersMemberSlugActivitiesIdSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PutWorkspaceSlugMembersMemberSlugActivitiesIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{workspace_slug}/members/{member_slug}/activities/{id}', \OpenAPI\OpenAPI\Models\Operations\PutWorkspaceSlugMembersMemberSlugActivitiesIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "activity", "json");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PutWorkspaceSlugMembersMemberSlugActivitiesIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 422) {
        }

        return $response;
    }
}