"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import attributefilter as shared_attributefilter
from ..shared import documentrelevanceconfiguration as shared_documentrelevanceconfiguration
from ..shared import facet as shared_facet
from ..shared import queryresulttype_enum as shared_queryresulttype_enum
from ..shared import sortingconfiguration as shared_sortingconfiguration
from ..shared import spellcorrectionconfiguration as shared_spellcorrectionconfiguration
from ..shared import usercontext as shared_usercontext
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class QueryRequest:
    
    index_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('IndexId') }})  
    attribute_filter: Optional[shared_attributefilter.AttributeFilter] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AttributeFilter'), 'exclude': lambda f: f is None }})  
    document_relevance_override_configurations: Optional[list[shared_documentrelevanceconfiguration.DocumentRelevanceConfiguration]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DocumentRelevanceOverrideConfigurations'), 'exclude': lambda f: f is None }})  
    facets: Optional[list[shared_facet.Facet]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Facets'), 'exclude': lambda f: f is None }})  
    page_number: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PageNumber'), 'exclude': lambda f: f is None }})  
    page_size: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PageSize'), 'exclude': lambda f: f is None }})  
    query_result_type_filter: Optional[shared_queryresulttype_enum.QueryResultTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('QueryResultTypeFilter'), 'exclude': lambda f: f is None }})  
    query_text: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('QueryText'), 'exclude': lambda f: f is None }})  
    requested_document_attributes: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('RequestedDocumentAttributes'), 'exclude': lambda f: f is None }})  
    sorting_configuration: Optional[shared_sortingconfiguration.SortingConfiguration] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SortingConfiguration'), 'exclude': lambda f: f is None }})  
    spell_correction_configuration: Optional[shared_spellcorrectionconfiguration.SpellCorrectionConfiguration] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SpellCorrectionConfiguration'), 'exclude': lambda f: f is None }})  
    user_context: Optional[shared_usercontext.UserContext] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('UserContext'), 'exclude': lambda f: f is None }})  
    visitor_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('VisitorId'), 'exclude': lambda f: f is None }})  
    