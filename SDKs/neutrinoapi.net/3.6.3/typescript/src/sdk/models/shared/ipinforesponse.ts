/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import {
  objectToClass,
  SpeakeasyBase,
  SpeakeasyMetadata,
} from "../../../internal/utils";
import { Timezone } from "./timezone";
import { Expose, Transform } from "class-transformer";

export class IPInfoResponse extends SpeakeasyBase {
  /**
   * Name of the city (if detectable)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "city" })
  city: string;

  /**
   * ISO 2-letter continent code
   */
  @SpeakeasyMetadata()
  @Expose({ name: "continent-code" })
  continentCode: string;

  /**
   * Full country name
   */
  @SpeakeasyMetadata()
  @Expose({ name: "country" })
  country: string;

  /**
   * ISO 2-letter country code
   */
  @SpeakeasyMetadata()
  @Expose({ name: "country-code" })
  countryCode: string;

  /**
   * ISO 3-letter country code
   */
  @SpeakeasyMetadata()
  @Expose({ name: "country-code3" })
  countryCode3: string;

  /**
   * ISO 4217 currency code associated with the country
   */
  @SpeakeasyMetadata()
  @Expose({ name: "currency-code" })
  currencyCode: string;

  /**
   * The IPs host domain (only set if reverse-lookup has been used)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "host-domain" })
  hostDomain: string;

  /**
   * The IPs full hostname (only set if reverse-lookup has been used)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "hostname" })
  hostname: string;

  /**
   * The IP address
   */
  @SpeakeasyMetadata()
  @Expose({ name: "ip" })
  ip: string;

  /**
   * True if this is a bogon IP address such as a private network, local network or reserved address
   */
  @SpeakeasyMetadata()
  @Expose({ name: "is-bogon" })
  isBogon: boolean;

  /**
   * True if this is a <a href="https://en.wikipedia.org/wiki/IPv6#IPv4-mapped_IPv6_addresses">IPv4 mapped IPv6 address</a>
   */
  @SpeakeasyMetadata()
  @Expose({ name: "is-v4-mapped" })
  isV4Mapped: boolean;

  /**
   * True if this is a IPv6 address. False if IPv4
   */
  @SpeakeasyMetadata()
  @Expose({ name: "is-v6" })
  isV6: boolean;

  /**
   * Location latitude
   */
  @SpeakeasyMetadata()
  @Expose({ name: "latitude" })
  latitude: number;

  /**
   * Location longitude
   */
  @SpeakeasyMetadata()
  @Expose({ name: "longitude" })
  longitude: number;

  /**
   * Name of the region (if detectable)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "region" })
  region: string;

  /**
   * ISO 3166-2 region code (if detectable)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "region-code" })
  regionCode: string;

  /**
   * Map containing timezone details for the location
   */
  @SpeakeasyMetadata({ elemType: Timezone })
  @Expose({ name: "timezone" })
  @Transform(
    ({ value }) => {
      const obj: Record<string, Timezone> = {};
      for (const key in value) {
        obj[key] = objectToClass(value[key], Timezone);
      }
      return obj;
    },
    { toClassOnly: true }
  )
  timezone: Record<string, Timezone>;

  /**
   * True if this is a valid IPv4 or IPv6 address
   */
  @SpeakeasyMetadata()
  @Expose({ name: "valid" })
  valid: boolean;
}
