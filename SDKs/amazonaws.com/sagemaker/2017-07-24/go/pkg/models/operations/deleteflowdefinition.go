// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// DeleteFlowDefinitionXAmzTargetEnum
type DeleteFlowDefinitionXAmzTargetEnum string

const (
	DeleteFlowDefinitionXAmzTargetEnumSageMakerDeleteFlowDefinition DeleteFlowDefinitionXAmzTargetEnum = "SageMaker.DeleteFlowDefinition"
)

func (e *DeleteFlowDefinitionXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "SageMaker.DeleteFlowDefinition":
		*e = DeleteFlowDefinitionXAmzTargetEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for DeleteFlowDefinitionXAmzTargetEnum: %s", s)
	}
}

type DeleteFlowDefinitionHeaders struct {
	XAmzAlgorithm     *string                            `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string                            `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string                            `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string                            `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string                            `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string                            `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string                            `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget        DeleteFlowDefinitionXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type DeleteFlowDefinitionRequest struct {
	Headers DeleteFlowDefinitionHeaders
	Request shared.DeleteFlowDefinitionRequest `request:"mediaType=application/json"`
}

type DeleteFlowDefinitionResponse struct {
	ContentType string
	// Success
	DeleteFlowDefinitionResponse map[string]interface{}
	// ResourceInUse
	ResourceInUse interface{}
	StatusCode    int
	RawResponse   *http.Response
	// ResourceNotFound
	ResourceNotFound interface{}
}
