// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type NestedPowerPortConnectionStatusLabelEnum string

const (
	NestedPowerPortConnectionStatusLabelEnumNotConnected NestedPowerPortConnectionStatusLabelEnum = "Not Connected"
	NestedPowerPortConnectionStatusLabelEnumConnected    NestedPowerPortConnectionStatusLabelEnum = "Connected"
)

func (e *NestedPowerPortConnectionStatusLabelEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Not Connected":
		fallthrough
	case "Connected":
		*e = NestedPowerPortConnectionStatusLabelEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for NestedPowerPortConnectionStatusLabelEnum: %s", s)
	}
}

type NestedPowerPortConnectionStatusValueEnum string

const (
	NestedPowerPortConnectionStatusValueEnumFalse NestedPowerPortConnectionStatusValueEnum = "false"
	NestedPowerPortConnectionStatusValueEnumTrue  NestedPowerPortConnectionStatusValueEnum = "true"
)

func (e *NestedPowerPortConnectionStatusValueEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "false":
		fallthrough
	case "true":
		*e = NestedPowerPortConnectionStatusValueEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for NestedPowerPortConnectionStatusValueEnum: %s", s)
	}
}

type NestedPowerPortConnectionStatus struct {
	Label NestedPowerPortConnectionStatusLabelEnum `json:"label"`
	Value NestedPowerPortConnectionStatusValueEnum `json:"value"`
}

type NestedPowerPort struct {
	Cable            *int64                           `json:"cable,omitempty"`
	ConnectionStatus *NestedPowerPortConnectionStatus `json:"connection_status,omitempty"`
	Device           *NestedDevice                    `json:"device,omitempty"`
	ID               *int64                           `json:"id,omitempty"`
	Name             string                           `json:"name"`
	URL              *string                          `json:"url,omitempty"`
}
