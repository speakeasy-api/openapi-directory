"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class TerminalOrdersCompanyLevel:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def get_companies_company_id_billing_entities(self, request: operations.GetCompaniesCompanyIDBillingEntitiesRequest, security: operations.GetCompaniesCompanyIDBillingEntitiesSecurity) -> operations.GetCompaniesCompanyIDBillingEntitiesResponse:
        r"""Get a list of billing entities
        Returns the billing entities of the company identified in the path and all merchant accounts belonging to the company.
        A billing entity is a legal entity where we charge orders to. An order for terminal products must contain the ID of a billing entity.
        
        To make this request, your API credential must have one of the following [roles](https://docs.adyen.com/development-resources/api-credentials#api-permissions):
        * Management API—Terminal ordering read
        * Management API—Terminal ordering read and write
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetCompaniesCompanyIDBillingEntitiesRequest, base_url, '/companies/{companyId}/billingEntities', request)
        
        query_params = utils.get_query_params(operations.GetCompaniesCompanyIDBillingEntitiesRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetCompaniesCompanyIDBillingEntitiesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.BillingEntitiesResponse])
                res.billing_entities_response = out
        elif http_res.status_code in [400, 401, 403, 422, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.RestServiceError])
                res.rest_service_error = out

        return res

    def get_companies_company_id_shipping_locations(self, request: operations.GetCompaniesCompanyIDShippingLocationsRequest, security: operations.GetCompaniesCompanyIDShippingLocationsSecurity) -> operations.GetCompaniesCompanyIDShippingLocationsResponse:
        r"""Get a list of shipping locations
        Returns the shipping locations for the company identified in the path and all merchant accounts belonging to the company.
        A shipping location includes the address where orders can be delivered, and an ID which you need to specify when ordering terminal products.
        
        To make this request, your API credential must have one of the following [roles](https://docs.adyen.com/development-resources/api-credentials#api-permissions):
        * Management API—Terminal ordering read
        * Management API—Terminal ordering read and write
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetCompaniesCompanyIDShippingLocationsRequest, base_url, '/companies/{companyId}/shippingLocations', request)
        
        query_params = utils.get_query_params(operations.GetCompaniesCompanyIDShippingLocationsRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetCompaniesCompanyIDShippingLocationsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ShippingLocationsResponse])
                res.shipping_locations_response = out
        elif http_res.status_code in [400, 401, 403, 422, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.RestServiceError])
                res.rest_service_error = out

        return res

    def get_companies_company_id_terminal_models(self, request: operations.GetCompaniesCompanyIDTerminalModelsRequest, security: operations.GetCompaniesCompanyIDTerminalModelsSecurity) -> operations.GetCompaniesCompanyIDTerminalModelsResponse:
        r"""Get a list of terminal models
        Returns a list of payment terminal models that the company identified in the path has access to.
        The response includes the terminal model ID, which can be used as a query parameter when getting a list of terminals or a list of products for ordering.
        
        To make this request, your API credential must have one of the following [roles](https://docs.adyen.com/development-resources/api-credentials#api-permissions):
        * Management API—Terminal ordering read
        * Management API—Terminal ordering read and write
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetCompaniesCompanyIDTerminalModelsRequest, base_url, '/companies/{companyId}/terminalModels', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetCompaniesCompanyIDTerminalModelsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.TerminalModelsResponse])
                res.terminal_models_response = out
        elif http_res.status_code in [400, 401, 403, 422, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.RestServiceError])
                res.rest_service_error = out

        return res

    def get_companies_company_id_terminal_orders(self, request: operations.GetCompaniesCompanyIDTerminalOrdersRequest, security: operations.GetCompaniesCompanyIDTerminalOrdersSecurity) -> operations.GetCompaniesCompanyIDTerminalOrdersResponse:
        r"""Get a list of orders
        Returns a lists of terminal products orders for the company identified in the path.
        To filter the list, use one or more of the query parameters.
        
        To make this request, your API credential must have one of the following [roles](https://docs.adyen.com/development-resources/api-credentials#api-permissions):
        * Management API—Terminal ordering read
        * Management API—Terminal ordering read and write
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetCompaniesCompanyIDTerminalOrdersRequest, base_url, '/companies/{companyId}/terminalOrders', request)
        
        query_params = utils.get_query_params(operations.GetCompaniesCompanyIDTerminalOrdersRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetCompaniesCompanyIDTerminalOrdersResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.TerminalOrdersResponse])
                res.terminal_orders_response = out
        elif http_res.status_code in [400, 401, 403, 422, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.RestServiceError])
                res.rest_service_error = out

        return res

    def get_companies_company_id_terminal_orders_order_id(self, request: operations.GetCompaniesCompanyIDTerminalOrdersOrderIDRequest, security: operations.GetCompaniesCompanyIDTerminalOrdersOrderIDSecurity) -> operations.GetCompaniesCompanyIDTerminalOrdersOrderIDResponse:
        r"""Get an order
        Returns the details of the terminal products order identified in the path.
        
        To make this request, your API credential must have one of the following [roles](https://docs.adyen.com/development-resources/api-credentials#api-permissions):
        * Management API—Terminal ordering read
        * Management API—Terminal ordering read and write
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetCompaniesCompanyIDTerminalOrdersOrderIDRequest, base_url, '/companies/{companyId}/terminalOrders/{orderId}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetCompaniesCompanyIDTerminalOrdersOrderIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.TerminalOrder])
                res.terminal_order = out
        elif http_res.status_code in [400, 401, 403, 422, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.RestServiceError])
                res.rest_service_error = out

        return res

    def get_companies_company_id_terminal_products(self, request: operations.GetCompaniesCompanyIDTerminalProductsRequest, security: operations.GetCompaniesCompanyIDTerminalProductsSecurity) -> operations.GetCompaniesCompanyIDTerminalProductsResponse:
        r"""Get a list of terminal products
        Returns a country-specific list of payment terminal packages and parts that the company identified in the path has access to.
         
        To make this request, your API credential must have one of the following [roles](https://docs.adyen.com/development-resources/api-credentials#api-permissions):
        * Management API—Terminal ordering read
        * Management API—Terminal ordering read and write
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetCompaniesCompanyIDTerminalProductsRequest, base_url, '/companies/{companyId}/terminalProducts', request)
        
        query_params = utils.get_query_params(operations.GetCompaniesCompanyIDTerminalProductsRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetCompaniesCompanyIDTerminalProductsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.TerminalProductsResponse])
                res.terminal_products_response = out
        elif http_res.status_code in [400, 401, 403, 422, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.RestServiceError])
                res.rest_service_error = out

        return res

    def patch_companies_company_id_terminal_orders_order_id(self, request: operations.PatchCompaniesCompanyIDTerminalOrdersOrderIDRequest, security: operations.PatchCompaniesCompanyIDTerminalOrdersOrderIDSecurity) -> operations.PatchCompaniesCompanyIDTerminalOrdersOrderIDResponse:
        r"""Update an order
        Updates the terminal products order identified in the path.
        Updating is only possible while the order has the status **Placed**.
        
        The request body only needs to contain what you want to change. 
        However, to update the products in the `items` array, you must provide the entire array. For example, if the array has three items:
         To remove one item, the array must include the remaining two items. Or to add one item, the array must include all four items.
        
        To make this request, your API credential must have the following [role](https://docs.adyen.com/development-resources/api-credentials#api-permissions):
        * Management API—Terminal ordering read and write
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.PatchCompaniesCompanyIDTerminalOrdersOrderIDRequest, base_url, '/companies/{companyId}/terminalOrders/{orderId}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "terminal_order_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PATCH', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PatchCompaniesCompanyIDTerminalOrdersOrderIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.TerminalOrder])
                res.terminal_order = out
        elif http_res.status_code in [400, 401, 403, 422, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.RestServiceError])
                res.rest_service_error = out

        return res

    def post_companies_company_id_shipping_locations(self, request: operations.PostCompaniesCompanyIDShippingLocationsRequest, security: operations.PostCompaniesCompanyIDShippingLocationsSecurity) -> operations.PostCompaniesCompanyIDShippingLocationsResponse:
        r"""Create a shipping location
        Creates a shipping location for the company identified in the path. A shipping location defines an address where orders can be delivered.
        
        To make this request, your API credential must have the following [role](https://docs.adyen.com/development-resources/api-credentials#api-permissions):
        * Management API—Terminal ordering read and write
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.PostCompaniesCompanyIDShippingLocationsRequest, base_url, '/companies/{companyId}/shippingLocations', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "shipping_location", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostCompaniesCompanyIDShippingLocationsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ShippingLocation])
                res.shipping_location = out
        elif http_res.status_code in [400, 401, 403, 422, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.RestServiceError])
                res.rest_service_error = out

        return res

    def post_companies_company_id_terminal_orders(self, request: operations.PostCompaniesCompanyIDTerminalOrdersRequest, security: operations.PostCompaniesCompanyIDTerminalOrdersSecurity) -> operations.PostCompaniesCompanyIDTerminalOrdersResponse:
        r"""Create an order
        Creates an order for payment terminal products for the company identified in the path.
        
        To make this request, your API credential must have the following [role](https://docs.adyen.com/development-resources/api-credentials#api-permissions):
        * Management API—Terminal ordering read and write
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.PostCompaniesCompanyIDTerminalOrdersRequest, base_url, '/companies/{companyId}/terminalOrders', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "terminal_order_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostCompaniesCompanyIDTerminalOrdersResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.TerminalOrder])
                res.terminal_order = out
        elif http_res.status_code in [400, 401, 403, 422, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.RestServiceError])
                res.rest_service_error = out

        return res

    def post_companies_company_id_terminal_orders_order_id_cancel(self, request: operations.PostCompaniesCompanyIDTerminalOrdersOrderIDCancelRequest, security: operations.PostCompaniesCompanyIDTerminalOrdersOrderIDCancelSecurity) -> operations.PostCompaniesCompanyIDTerminalOrdersOrderIDCancelResponse:
        r"""Cancel an order
        Cancels the terminal products order identified in the path.
        Cancelling is only possible while the order has the status **Placed**.
        To cancel an order, make a POST call without a request body. The response returns the full order details, but with the status changed to **Cancelled**.
        
        To make this request, your API credential must have the following [role](https://docs.adyen.com/development-resources/api-credentials#api-permissions):
        * Management API—Terminal ordering read and write
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.PostCompaniesCompanyIDTerminalOrdersOrderIDCancelRequest, base_url, '/companies/{companyId}/terminalOrders/{orderId}/cancel', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostCompaniesCompanyIDTerminalOrdersOrderIDCancelResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.TerminalOrder])
                res.terminal_order = out
        elif http_res.status_code in [400, 401, 403, 422, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.RestServiceError])
                res.rest_service_error = out

        return res

    