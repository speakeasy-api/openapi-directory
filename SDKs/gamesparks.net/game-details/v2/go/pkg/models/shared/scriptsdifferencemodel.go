// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type ScriptsDifferenceModelChangeTypeEnum string

const (
	ScriptsDifferenceModelChangeTypeEnumNochange           ScriptsDifferenceModelChangeTypeEnum = "NOCHANGE"
	ScriptsDifferenceModelChangeTypeEnumAdded              ScriptsDifferenceModelChangeTypeEnum = "ADDED"
	ScriptsDifferenceModelChangeTypeEnumChanged            ScriptsDifferenceModelChangeTypeEnum = "CHANGED"
	ScriptsDifferenceModelChangeTypeEnumDeleted            ScriptsDifferenceModelChangeTypeEnum = "DELETED"
	ScriptsDifferenceModelChangeTypeEnumIgnored            ScriptsDifferenceModelChangeTypeEnum = "IGNORED"
	ScriptsDifferenceModelChangeTypeEnumChangedCodeInvalid ScriptsDifferenceModelChangeTypeEnum = "CHANGED_CODE_INVALID"
	ScriptsDifferenceModelChangeTypeEnumChangedNameInvalid ScriptsDifferenceModelChangeTypeEnum = "CHANGED_NAME_INVALID"
)

func (e *ScriptsDifferenceModelChangeTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "NOCHANGE":
		fallthrough
	case "ADDED":
		fallthrough
	case "CHANGED":
		fallthrough
	case "DELETED":
		fallthrough
	case "IGNORED":
		fallthrough
	case "CHANGED_CODE_INVALID":
		fallthrough
	case "CHANGED_NAME_INVALID":
		*e = ScriptsDifferenceModelChangeTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ScriptsDifferenceModelChangeTypeEnum: %s", s)
	}
}

type ScriptsDifferenceModel struct {
	Bind       *string                               `json:"bind,omitempty"`
	ChangeType *ScriptsDifferenceModelChangeTypeEnum `json:"changeType,omitempty"`
	FileName   *string                               `json:"fileName,omitempty"`
	Script1    *string                               `json:"script1,omitempty"`
	Script2    *string                               `json:"script2,omitempty"`
	Type       *string                               `json:"type,omitempty"`
}
