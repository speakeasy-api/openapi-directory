// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"openapi/pkg/types"
)

// NodeFullBios - BIOS information
type NodeFullBios struct {
	// System provided description of the BIOS (long name)
	Description *string `json:"description,omitempty"`
	// BIOS editor
	Editor *string `json:"editor,omitempty"`
	// BIOS name
	Name *string `json:"name,omitempty"`
	// Number of BIOS on the machine
	Quantity *int64 `json:"quantity,omitempty"`
	// Release date of the BIOS
	ReleaseDate *string `json:"releaseDate,omitempty"`
	// BIOS version
	Version *string `json:"version,omitempty"`
}

type NodeFullControllers struct {
	// System provided description of the controller
	Description *string `json:"description,omitempty"`
	// Controller manufacturer
	Manufacturer *string `json:"manufacturer,omitempty"`
	// Controller name
	Name *string `json:"name,omitempty"`
	// Quantity of that controller
	Quantity *int64 `json:"quantity,omitempty"`
	// Controller type
	Type *string `json:"type,omitempty"`
}

type NodeFullEnvironmentVariables struct {
	// Environment variable name
	Name *string `json:"name,omitempty"`
	// Environment variable value
	Value *string `json:"value,omitempty"`
}

type NodeFullFileSystems struct {
	// Description of the file system
	Description *string `json:"description,omitempty"`
	// Number of files
	FileCount *int64 `json:"fileCount,omitempty"`
	// Free space remaining
	FreeSpace *int64 `json:"freeSpace,omitempty"`
	// Mount point
	MountPoint *string `json:"mountPoint,omitempty"`
	// Type of file system (`ext4`, `swap`, etc.)
	Name *string `json:"name,omitempty"`
	// Total space
	TotalSpace *int64 `json:"totalSpace,omitempty"`
}

// NodeFullMachineTypeEnum - Type of the machine
type NodeFullMachineTypeEnum string

const (
	NodeFullMachineTypeEnumPhysical NodeFullMachineTypeEnum = "Physical"
	NodeFullMachineTypeEnumVirtual  NodeFullMachineTypeEnum = "Virtual"
)

func (e *NodeFullMachineTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Physical":
		fallthrough
	case "Virtual":
		*e = NodeFullMachineTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for NodeFullMachineTypeEnum: %s", s)
	}
}

// NodeFullMachine - Information about the underlying machine
type NodeFullMachine struct {
	// Rudder unique identifier for the machine
	ID *string `json:"id,omitempty"`
	// Information about machine manufacturer
	Manufacturer *string `json:"manufacturer,omitempty"`
	// In the case of VM, the VM technology
	Provider *string `json:"provider,omitempty"`
	// If available, a unique identifier provided by the machine
	SerialNumber *string `json:"serialNumber,omitempty"`
	// Type of the machine
	Type *NodeFullMachineTypeEnum `json:"type,omitempty"`
}

type NodeFullManagementTechnology struct {
	// List of agent capabilities
	Capabilities []string `json:"capabilities,omitempty"`
	// Agent name
	Name string `json:"name"`
	// kind of node for the management engine, like `root`, `relay`, `node`, `root-component`
	NodeKind *string `json:"nodeKind,omitempty"`
	// Roles fulfilled by the agent
	RootComponents []string `json:"rootComponents,omitempty"`
	// Agent version
	Version *string `json:"version,omitempty"`
}

// NodeFullManagementTechnologyDetails - Additional information about management technology
type NodeFullManagementTechnologyDetails struct {
	// Certificates used by the agent
	CfengineKeys []string `json:"cfengineKeys,omitempty"`
	// Local user account used by the agent
	CfengineUser *string `json:"cfengineUser,omitempty"`
}

// NodeFullMemories - Memory slots
type NodeFullMemories struct {
	// Size of modules
	Capacity *int64 `json:"capacity,omitempty"`
	// Manufacturer provided information about the module
	Caption *string `json:"caption,omitempty"`
	// System provided description
	Description *string `json:"description,omitempty"`
	// Name of the memory slot or memory module
	Name *string `json:"name,omitempty"`
	// Number of modules in that slot
	Quantity *string `json:"quantity,omitempty"`
	// Serial number of the module
	SerialNumber *string `json:"serialNumber,omitempty"`
	// Slot number
	SlotNumber *int64 `json:"slotNumber,omitempty"`
	// Memory speed (frequency)
	Speed *int64 `json:"speed,omitempty"`
	// Memory slot type
	Type *string `json:"type,omitempty"`
}

type NodeFullNetworkInterfaces struct {
	// DHCP server managing that network interface
	DhcpServer *string `json:"dhcpServer,omitempty"`
	// IP addresses of the network interface
	IPAddresses []string `json:"ipAddresses,omitempty"`
	// MAC address of the network interface
	MacAddress *string  `json:"macAddress,omitempty"`
	Mask       []string `json:"mask,omitempty"`
	// Interface name (for ex "eth0")
	Name *string `json:"name,omitempty"`
	// Information about synchronization speed
	Speed *string `json:"speed,omitempty"`
	// network interface status (enabled or not, up or down)
	Status *string `json:"status,omitempty"`
	// Information about the type of network interface
	Type *string `json:"type,omitempty"`
}

// NodeFullOsTypeEnum - Family of the OS
type NodeFullOsTypeEnum string

const (
	NodeFullOsTypeEnumWindows NodeFullOsTypeEnum = "Windows"
	NodeFullOsTypeEnumLinux   NodeFullOsTypeEnum = "Linux"
	NodeFullOsTypeEnumAix     NodeFullOsTypeEnum = "AIX"
	NodeFullOsTypeEnumFreeBsd NodeFullOsTypeEnum = "FreeBSD"
)

func (e *NodeFullOsTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Windows":
		fallthrough
	case "Linux":
		fallthrough
	case "AIX":
		fallthrough
	case "FreeBSD":
		*e = NodeFullOsTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for NodeFullOsTypeEnum: %s", s)
	}
}

// NodeFullOs - Information about the operating system
type NodeFullOs struct {
	// Full operating system name
	FullName string `json:"fullName"`
	// Version of the OS kernel
	KernelVersion string `json:"kernelVersion"`
	// Operating system name (distribution on Linux, etc.)
	Name string `json:"name"`
	// If relevant, the service pack of the OS
	ServicePack *string `json:"servicePack,omitempty"`
	// Family of the OS
	Type NodeFullOsTypeEnum `json:"type"`
	// OS version
	Version string `json:"version"`
}

// NodeFullPolicyModeEnum - Rudder policy mode for the node (`default` follows the global configuration)
type NodeFullPolicyModeEnum string

const (
	NodeFullPolicyModeEnumEnforce NodeFullPolicyModeEnum = "enforce"
	NodeFullPolicyModeEnumAudit   NodeFullPolicyModeEnum = "audit"
	NodeFullPolicyModeEnumDefault NodeFullPolicyModeEnum = "default"
)

func (e *NodeFullPolicyModeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "enforce":
		fallthrough
	case "audit":
		fallthrough
	case "default":
		*e = NodeFullPolicyModeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for NodeFullPolicyModeEnum: %s", s)
	}
}

type NodeFullPorts struct {
	// System provided description of the port
	Description *string `json:"description,omitempty"`
	// Port name
	Name *string `json:"name,omitempty"`
	// Quantity of similar ports
	Quantity *int64 `json:"quantity,omitempty"`
	// Port type
	Type *string `json:"type,omitempty"`
}

// NodeFullProcesses - Process information
type NodeFullProcesses struct {
	// CPU used by the process (at inventory time)
	CPUUsage *int64 `json:"cpuUsage,omitempty"`
	// System provided description about the process
	Description *string `json:"description,omitempty"`
	// Memory allocated to the process (at inventory time)
	Memory *float32 `json:"memory,omitempty"`
	// Process name
	Name *string `json:"name,omitempty"`
	// PID of the process
	Pid *int64 `json:"pid,omitempty"`
	// Started date and time of the process
	Started *types.Date `json:"started,omitempty"`
	// TTY to which the process is
	Tty *string `json:"tty,omitempty"`
	// User account who started the process
	User *string `json:"user,omitempty"`
	// Virtual memory allocated to the process (at inventory time)
	VirtualMemory *int64 `json:"virtualMemory,omitempty"`
}

type NodeFullProcessors struct {
	// CPU architecture
	Arch *string `json:"arch,omitempty"`
	// Number of core for that CPU
	Core *int64 `json:"core,omitempty"`
	// Identifier of the CPU
	Cpuid *string `json:"cpuid,omitempty"`
	// System provided description of the CPU
	Description *string `json:"description,omitempty"`
	// External clock used by the CPU
	ExternalClock *string `json:"externalClock,omitempty"`
	// CPU family
	FamilyName *string `json:"familyName,omitempty"`
	// CPU manufacturer
	Manufacturer *string `json:"manufacturer,omitempty"`
	// CPU model
	Model *int64 `json:"model,omitempty"`
	// CPU name
	Name *string `json:"name,omitempty"`
	// Number of CPU with these features
	Quantity *int64 `json:"quantity,omitempty"`
	// Speed (frequency) of the CPU
	Speed *int64 `json:"speed,omitempty"`
	// Stepping or power management information
	Stepping *int64 `json:"stepping,omitempty"`
	// Number of thread by core for the CPU
	Thread *int64 `json:"thread,omitempty"`
}

type NodeFullProperties struct {
	// Property name
	Name string `json:"name"`
	// Property value (can be a string or JSON object)
	Value interface{} `json:"value"`
}

type NodeFullSlots struct {
	// System provided description of the slots
	Description *string `json:"description,omitempty"`
	// Slot name or identifier
	Name *string `json:"name,omitempty"`
	// Quantity of similar slots
	Quantity *int64 `json:"quantity,omitempty"`
	// Slot status (used, powered, etc)
	Status *string `json:"status,omitempty"`
}

// NodeFullSoftwareLicense - Information about the license
type NodeFullSoftwareLicense struct {
	// License description
	Description *string `json:"description,omitempty"`
	// License expiration date
	ExpirationDate *types.Date `json:"expirationDate,omitempty"`
	// License name
	Name *string `json:"name,omitempty"`
	// Is this an OEM license (and information)
	Oem *string `json:"oem,omitempty"`
	// License product identifier
	ProductID *string `json:"productId,omitempty"`
	// License key
	ProductKey *string `json:"productKey,omitempty"`
}

type NodeFullSoftware struct {
	// A description of the software
	Description *string `json:"description,omitempty"`
	// Editor of the software
	Editor *string `json:"editor,omitempty"`
	// Information about the license
	License *NodeFullSoftwareLicense `json:"license,omitempty"`
	// Name of the software (as reported by the node)
	Name *string `json:"name,omitempty"`
	// Release date of the software
	ReleaseDate *types.Date `json:"releaseDate,omitempty"`
	// Version of the software
	Version *string `json:"version,omitempty"`
}

type NodeFullSound struct {
	// System provided description of the sound card
	Description *string `json:"description,omitempty"`
	// Sound card name
	Name *string `json:"name,omitempty"`
	// Quantity of similar sound cards
	Quantity *int64 `json:"quantity,omitempty"`
}

// NodeFullStatusEnum - Status of the node
type NodeFullStatusEnum string

const (
	NodeFullStatusEnumPending  NodeFullStatusEnum = "pending"
	NodeFullStatusEnumAccepted NodeFullStatusEnum = "accepted"
	NodeFullStatusEnumDeleted  NodeFullStatusEnum = "deleted"
)

func (e *NodeFullStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "pending":
		fallthrough
	case "accepted":
		fallthrough
	case "deleted":
		*e = NodeFullStatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for NodeFullStatusEnum: %s", s)
	}
}

type NodeFullStorage struct {
	// System provided information about the storage
	Description *string `json:"description,omitempty"`
	// Storage firmware information
	Firmware *string `json:"firmware,omitempty"`
	// Storage manufacturer
	Manufacturer *string `json:"manufacturer,omitempty"`
	// Storage model
	Model *string `json:"model,omitempty"`
	// Storage name
	Name *string `json:"name,omitempty"`
	// Quantity of similar storage
	Quantity *int64 `json:"quantity,omitempty"`
	// Storage serial number
	SerialNumber *string `json:"serialNumber,omitempty"`
	// Storage size in MB
	Size *int64 `json:"size,omitempty"`
	// Storage type
	Type *string `json:"type,omitempty"`
}

type NodeFullTimezone struct {
	// Timezone name
	Name string `json:"name"`
	// Timezone offset to UTC
	Offset *string `json:"offset,omitempty"`
}

type NodeFullVideos struct {
	// information about video card chipset
	Chipset *string `json:"chipset,omitempty"`
	// System provided description for that video card
	Description *string `json:"description,omitempty"`
	// Quantity of memory for that video card
	Memory *string `json:"memory,omitempty"`
	// Video card name
	Name *string `json:"name,omitempty"`
	// Quantity of similar video cards
	Quantity *int64 `json:"quantity,omitempty"`
	// Resolution used by that video card at inventory time
	Resolution *string `json:"resolution,omitempty"`
}

type NodeFullVirtualMachines struct {
	// System provided description of the hosted virtual machine
	Description *string `json:"description,omitempty"`
	// Memory allocated to the hosted virtual machine
	Memory *string `json:"memory,omitempty"`
	// Name of the hosted virtual machine
	Name *string `json:"name,omitempty"`
	// Owner of the hosted virtual machine
	Owner *string `json:"owner,omitempty"`
	// Status (up, starting, etc) of the hosted virtual machine
	Status *string `json:"status,omitempty"`
	// Technology of the hosted virtual machine
	Subsystem *string `json:"subsystem,omitempty"`
	// Type of the hosted virtual machine
	Type *string `json:"type,omitempty"`
	// Unique identifier of the hosted virtual machine
	UUID *string `json:"uuid,omitempty"`
	// Number of virtual CPU allocated to the hosted virtual machine
	Vcpu *string `json:"vcpu,omitempty"`
}

type NodeFull struct {
	// User accounts declared in the node
	Accounts []string `json:"accounts,omitempty"`
	// Information about CPU architecture (32/64 bits)
	ArchitectureDescription *string `json:"architectureDescription,omitempty"`
	// BIOS information
	Bios *NodeFullBios `json:"bios,omitempty"`
	// Physical controller information
	Controllers []NodeFullControllers `json:"controllers,omitempty"`
	// A human intended description of the node (not used)
	Description *string `json:"description,omitempty"`
	// Environment variables defined on the node in the context of the agent
	EnvironmentVariables []NodeFullEnvironmentVariables `json:"environmentVariables,omitempty"`
	// File system declared on the node
	FileSystems []NodeFullFileSystems `json:"fileSystems,omitempty"`
	// Fully qualified name of the node
	Hostname string `json:"hostname"`
	// Unique id of the node
	ID string `json:"id"`
	// IP addresses of the node (IPv4 and IPv6)
	IPAddresses []string `json:"ipAddresses"`
	// Date and time of the latest generated inventory, if one is available (node time). Up to API v11, format was: "YYYY-MM-dd HH:mm"
	LastInventoryDate *types.Date `json:"lastInventoryDate,omitempty"`
	// Date and time of the latest run, if one is available (node time). Up to API v11, format was: "YYYY-MM-dd HH:mm"
	LastRunDate *types.Date `json:"lastRunDate,omitempty"`
	// Information about the underlying machine
	Machine *NodeFullMachine `json:"machine,omitempty"`
	// Management agents running on the node
	ManagementTechnology []NodeFullManagementTechnology `json:"managementTechnology"`
	// Additional information about management technology
	ManagementTechnologyDetails *NodeFullManagementTechnologyDetails `json:"managementTechnologyDetails,omitempty"`
	// Memory slots
	Memories []NodeFullMemories `json:"memories,omitempty"`
	// Detailed information about registered network interfaces on the node
	NetworkInterfaces []NodeFullNetworkInterfaces `json:"networkInterfaces,omitempty"`
	// Information about the operating system
	Os *NodeFullOs `json:"os,omitempty"`
	// Rudder policy mode for the node (`default` follows the global configuration)
	PolicyMode *NodeFullPolicyModeEnum `json:"policyMode,omitempty"`
	// Rudder policy server managing the node
	PolicyServerID string `json:"policyServerId"`
	// Physical port information objects
	Ports []NodeFullPorts `json:"ports,omitempty"`
	// Process running (at inventory time)
	Processes []NodeFullProcesses `json:"processes,omitempty"`
	// CPU information
	Processors []NodeFullProcessors `json:"processors,omitempty"`
	// Node properties (either set by user or filled by third party sources)
	Properties []NodeFullProperties `json:"properties"`
	// Size of RAM in MB
	RAM *int64 `json:"ram,omitempty"`
	// Physical extension slot information
	Slots []NodeFullSlots `json:"slots,omitempty"`
	// Software installed on the node (can have thousands items)
	Software []NodeFullSoftware `json:"software,omitempty"`
	// Sound card information
	Sound []NodeFullSound `json:"sound,omitempty"`
	// Status of the node
	Status NodeFullStatusEnum `json:"status"`
	// Storage (disks) information objects
	Storage  []NodeFullStorage `json:"storage,omitempty"`
	Timezone *NodeFullTimezone `json:"timezone,omitempty"`
	// Video card information
	Videos []NodeFullVideos `json:"videos,omitempty"`
	// Hosted virtual machine information
	VirtualMachines []NodeFullVirtualMachines `json:"virtualMachines,omitempty"`
}
