/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * CertificateReissue - The reissue request info
 */
public class CertificateReissue {
    /**
     * Required if client would like to receive stateful action via callback during certificate lifecyle
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("callbackUrl")
    public String callbackUrl;

    public CertificateReissue withCallbackUrl(String callbackUrl) {
        this.callbackUrl = callbackUrl;
        return this;
    }
    
    /**
     * The common name of certificate to be secured
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("commonName")
    public String commonName;

    public CertificateReissue withCommonName(String commonName) {
        this.commonName = commonName;
        return this;
    }
    
    /**
     * Certificate Signing Request.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("csr")
    public String csr;

    public CertificateReissue withCsr(String csr) {
        this.csr = csr;
        return this;
    }
    
    /**
     * In hours, time to delay revoking existing certificate after issuance of new certificate. If revokeExistingCertOnIssuance is enabled, this value will be ignored
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("delayExistingRevoke")
    public Long delayExistingRevoke;

    public CertificateReissue withDelayExistingRevoke(Long delayExistingRevoke) {
        this.delayExistingRevoke = delayExistingRevoke;
        return this;
    }
    
    /**
     * Optional field. Domain verification will be required for each domain listed here. Specify a value of * to indicate that all domains associated with the request should have their domain information reverified.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("forceDomainRevetting")
    public String[] forceDomainRevetting;

    public CertificateReissue withForceDomainRevetting(String[] forceDomainRevetting) {
        this.forceDomainRevetting = forceDomainRevetting;
        return this;
    }
    
    /**
     * Root Type. Depending on certificate expiration date, SHA_1 not be allowed. Will default to SHA_2 if expiration date exceeds sha1 allowed date
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("rootType")
    public CertificateReissueRootTypeEnum rootType;

    public CertificateReissue withRootType(CertificateReissueRootTypeEnum rootType) {
        this.rootType = rootType;
        return this;
    }
    
    /**
     * Only used for UCC products. An array of subject alternative names to include in certificate.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("subjectAlternativeNames")
    public String[] subjectAlternativeNames;

    public CertificateReissue withSubjectAlternativeNames(String[] subjectAlternativeNames) {
        this.subjectAlternativeNames = subjectAlternativeNames;
        return this;
    }
    
    public CertificateReissue(){}
}
