/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Activities - Amenities and features related to leisure and play.
 */
public class Activities {
    /**
     * Beach access. The hotel property is in close proximity to a beach and offers a way to get to that beach. This can include a route to the beach such as stairs down if hotel is on a bluff, or a short trail. Not the same as beachfront (with beach access, the hotel's proximity is close to but not right on the beach).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("beachAccess")
    public Boolean beachAccess;

    public Activities withBeachAccess(Boolean beachAccess) {
        this.beachAccess = beachAccess;
        return this;
    }
    
    /**
     * Beach access exception.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("beachAccessException")
    public ActivitiesBeachAccessExceptionEnum beachAccessException;

    public Activities withBeachAccessException(ActivitiesBeachAccessExceptionEnum beachAccessException) {
        this.beachAccessException = beachAccessException;
        return this;
    }
    
    /**
     * Breach front. The hotel property is physically located on the beach alongside an ocean, sea, gulf, or bay. It is not on a lake, river, stream, or pond. The hotel is not separated from the beach by a public road allowing vehicular, pedestrian, or bicycle traffic.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("beachFront")
    public Boolean beachFront;

    public Activities withBeachFront(Boolean beachFront) {
        this.beachFront = beachFront;
        return this;
    }
    
    /**
     * Beach front exception.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("beachFrontException")
    public ActivitiesBeachFrontExceptionEnum beachFrontException;

    public Activities withBeachFrontException(ActivitiesBeachFrontExceptionEnum beachFrontException) {
        this.beachFrontException = beachFrontException;
        return this;
    }
    
    /**
     * Bicycle rental. The hotel owns bicycles that it permits guests to borrow and use. Can be free or for a fee.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("bicycleRental")
    public Boolean bicycleRental;

    public Activities withBicycleRental(Boolean bicycleRental) {
        this.bicycleRental = bicycleRental;
        return this;
    }
    
    /**
     * Bicycle rental exception.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("bicycleRentalException")
    public ActivitiesBicycleRentalExceptionEnum bicycleRentalException;

    public Activities withBicycleRentalException(ActivitiesBicycleRentalExceptionEnum bicycleRentalException) {
        this.bicycleRentalException = bicycleRentalException;
        return this;
    }
    
    /**
     * Boutique stores. There are stores selling clothing, jewelry, art and decor either on hotel premises or very close by. Does not refer to the hotel gift shop or convenience store.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("boutiqueStores")
    public Boolean boutiqueStores;

    public Activities withBoutiqueStores(Boolean boutiqueStores) {
        this.boutiqueStores = boutiqueStores;
        return this;
    }
    
    /**
     * Boutique stores exception.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("boutiqueStoresException")
    public ActivitiesBoutiqueStoresExceptionEnum boutiqueStoresException;

    public Activities withBoutiqueStoresException(ActivitiesBoutiqueStoresExceptionEnum boutiqueStoresException) {
        this.boutiqueStoresException = boutiqueStoresException;
        return this;
    }
    
    /**
     * Casino. A space designated for gambling and gaming featuring croupier-run table and card games, as well as electronic slot machines. May be on hotel premises or located nearby.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("casino")
    public Boolean casino;

    public Activities withCasino(Boolean casino) {
        this.casino = casino;
        return this;
    }
    
    /**
     * Casino exception.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("casinoException")
    public ActivitiesCasinoExceptionEnum casinoException;

    public Activities withCasinoException(ActivitiesCasinoExceptionEnum casinoException) {
        this.casinoException = casinoException;
        return this;
    }
    
    /**
     * Free bicycle rental. The hotel owns bicycles that it permits guests to borrow and use for free.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("freeBicycleRental")
    public Boolean freeBicycleRental;

    public Activities withFreeBicycleRental(Boolean freeBicycleRental) {
        this.freeBicycleRental = freeBicycleRental;
        return this;
    }
    
    /**
     * Free bicycle rental exception.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("freeBicycleRentalException")
    public ActivitiesFreeBicycleRentalExceptionEnum freeBicycleRentalException;

    public Activities withFreeBicycleRentalException(ActivitiesFreeBicycleRentalExceptionEnum freeBicycleRentalException) {
        this.freeBicycleRentalException = freeBicycleRentalException;
        return this;
    }
    
    /**
     * Free watercraft rental. The hotel owns watercraft that it permits guests to borrow and use for free.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("freeWatercraftRental")
    public Boolean freeWatercraftRental;

    public Activities withFreeWatercraftRental(Boolean freeWatercraftRental) {
        this.freeWatercraftRental = freeWatercraftRental;
        return this;
    }
    
    /**
     * Free Watercraft rental exception.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("freeWatercraftRentalException")
    public ActivitiesFreeWatercraftRentalExceptionEnum freeWatercraftRentalException;

    public Activities withFreeWatercraftRentalException(ActivitiesFreeWatercraftRentalExceptionEnum freeWatercraftRentalException) {
        this.freeWatercraftRentalException = freeWatercraftRentalException;
        return this;
    }
    
    /**
     * Game room. There is a room at the hotel containing electronic machines for play such as pinball, prize machines, driving simulators, and other items commonly found at a family fun center or arcade. May also include non-electronic games like pool, foosball, darts, and more. May or may not be designed for children. Also known as arcade, fun room, or family fun center.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("gameRoom")
    public Boolean gameRoom;

    public Activities withGameRoom(Boolean gameRoom) {
        this.gameRoom = gameRoom;
        return this;
    }
    
    /**
     * Game room exception.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("gameRoomException")
    public ActivitiesGameRoomExceptionEnum gameRoomException;

    public Activities withGameRoomException(ActivitiesGameRoomExceptionEnum gameRoomException) {
        this.gameRoomException = gameRoomException;
        return this;
    }
    
    /**
     * Golf. There is a golf course on hotel grounds or there is a nearby, independently run golf course that allows use by hotel guests. Can be free or for a fee.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("golf")
    public Boolean golf;

    public Activities withGolf(Boolean golf) {
        this.golf = golf;
        return this;
    }
    
    /**
     * Golf exception.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("golfException")
    public ActivitiesGolfExceptionEnum golfException;

    public Activities withGolfException(ActivitiesGolfExceptionEnum golfException) {
        this.golfException = golfException;
        return this;
    }
    
    /**
     * Horseback riding. The hotel has a horse barn onsite or an affiliation with a nearby barn to allow for guests to sit astride a horse and direct it to walk, trot, cantor, gallop and/or jump. Can be in a riding ring, on designated paths, or in the wilderness. May or may not involve instruction.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("horsebackRiding")
    public Boolean horsebackRiding;

    public Activities withHorsebackRiding(Boolean horsebackRiding) {
        this.horsebackRiding = horsebackRiding;
        return this;
    }
    
    /**
     * Horseback riding exception.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("horsebackRidingException")
    public ActivitiesHorsebackRidingExceptionEnum horsebackRidingException;

    public Activities withHorsebackRidingException(ActivitiesHorsebackRidingExceptionEnum horsebackRidingException) {
        this.horsebackRidingException = horsebackRidingException;
        return this;
    }
    
    /**
     * Nightclub. There is a room at the hotel with a bar, a dance floor, and seating where designated staffers play dance music. There may also be a designated area for the performance of live music, singing and comedy acts.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("nightclub")
    public Boolean nightclub;

    public Activities withNightclub(Boolean nightclub) {
        this.nightclub = nightclub;
        return this;
    }
    
    /**
     * Nightclub exception.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("nightclubException")
    public ActivitiesNightclubExceptionEnum nightclubException;

    public Activities withNightclubException(ActivitiesNightclubExceptionEnum nightclubException) {
        this.nightclubException = nightclubException;
        return this;
    }
    
    /**
     * Private beach. The beach which is in close proximity to the hotel is open only to guests.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("privateBeach")
    public Boolean privateBeach;

    public Activities withPrivateBeach(Boolean privateBeach) {
        this.privateBeach = privateBeach;
        return this;
    }
    
    /**
     * Private beach exception.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("privateBeachException")
    public ActivitiesPrivateBeachExceptionEnum privateBeachException;

    public Activities withPrivateBeachException(ActivitiesPrivateBeachExceptionEnum privateBeachException) {
        this.privateBeachException = privateBeachException;
        return this;
    }
    
    /**
     * Scuba. The provision for guests to dive under naturally occurring water fitted with a self-contained underwater breathing apparatus (SCUBA) for the purpose of exploring underwater life. Apparatus consists of a tank providing oxygen to the diver through a mask. Requires certification of the diver and supervision. The hotel may have the activity at its own waterfront or have an affiliation with a nearby facility. Required equipment is most often supplied to guests. Can be free or for a fee. Not snorkeling. Not done in a swimming pool.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("scuba")
    public Boolean scuba;

    public Activities withScuba(Boolean scuba) {
        this.scuba = scuba;
        return this;
    }
    
    /**
     * Scuba exception.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("scubaException")
    public ActivitiesScubaExceptionEnum scubaException;

    public Activities withScubaException(ActivitiesScubaExceptionEnum scubaException) {
        this.scubaException = scubaException;
        return this;
    }
    
    /**
     * Snorkeling. The provision for guests to participate in a recreational water activity in which swimmers wear a diving mask, a simple, shaped breathing tube and flippers/swim fins for the purpose of exploring below the surface of an ocean, gulf or lake. Does not usually require user certification or professional supervision. Equipment may or may not be available for rent or purchase. Not scuba diving.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("snorkeling")
    public Boolean snorkeling;

    public Activities withSnorkeling(Boolean snorkeling) {
        this.snorkeling = snorkeling;
        return this;
    }
    
    /**
     * Snorkeling exception.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("snorkelingException")
    public ActivitiesSnorkelingExceptionEnum snorkelingException;

    public Activities withSnorkelingException(ActivitiesSnorkelingExceptionEnum snorkelingException) {
        this.snorkelingException = snorkelingException;
        return this;
    }
    
    /**
     * Tennis. The hotel has the requisite court(s) on site or has an affiliation with a nearby facility for the purpose of providing guests with the opportunity to play a two-sided court-based game in which players use a stringed racquet to hit a ball across a net to the side of the opposing player. The court can be indoors or outdoors. Instructors, racquets and balls may or may not be provided.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tennis")
    public Boolean tennis;

    public Activities withTennis(Boolean tennis) {
        this.tennis = tennis;
        return this;
    }
    
    /**
     * Tennis exception.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tennisException")
    public ActivitiesTennisExceptionEnum tennisException;

    public Activities withTennisException(ActivitiesTennisExceptionEnum tennisException) {
        this.tennisException = tennisException;
        return this;
    }
    
    /**
     * Water skiing. The provision of giving guests the opportunity to be pulled across naturally occurring water while standing on skis and holding a tow rope attached to a motorboat. Can occur on hotel premises or at a nearby waterfront. Most often performed in a lake or ocean.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("waterSkiing")
    public Boolean waterSkiing;

    public Activities withWaterSkiing(Boolean waterSkiing) {
        this.waterSkiing = waterSkiing;
        return this;
    }
    
    /**
     * Water skiing exception.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("waterSkiingException")
    public ActivitiesWaterSkiingExceptionEnum waterSkiingException;

    public Activities withWaterSkiingException(ActivitiesWaterSkiingExceptionEnum waterSkiingException) {
        this.waterSkiingException = waterSkiingException;
        return this;
    }
    
    /**
     * Watercraft rental. The hotel owns water vessels that it permits guests to borrow and use. Can be free or for a fee. Watercraft may include boats, pedal boats, rowboats, sailboats, powerboats, canoes, kayaks, or personal watercraft (such as a Jet Ski).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("watercraftRental")
    public Boolean watercraftRental;

    public Activities withWatercraftRental(Boolean watercraftRental) {
        this.watercraftRental = watercraftRental;
        return this;
    }
    
    /**
     * Watercraft rental exception.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("watercraftRentalException")
    public ActivitiesWatercraftRentalExceptionEnum watercraftRentalException;

    public Activities withWatercraftRentalException(ActivitiesWatercraftRentalExceptionEnum watercraftRentalException) {
        this.watercraftRentalException = watercraftRentalException;
        return this;
    }
    
    public Activities(){}
}
