"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from ..shared import linkedtenantmodel as shared_linkedtenantmodel
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from marshmallow import fields
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class LatestTenancyModel:
    r"""Holds information on the most recent tenancy linked to the property."""
    
    access_arrangements: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AccessArrangements'), 'exclude': lambda f: f is None }})
    r"""Access Arrangements"""  
    access_mobile1: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AccessMobile1'), 'exclude': lambda f: f is None }})
    r"""Arrange access Mobile 1"""  
    access_mobile2: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AccessMobile2'), 'exclude': lambda f: f is None }})
    r"""Arrange access Mobile 2"""  
    access_mobile3: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AccessMobile3'), 'exclude': lambda f: f is None }})
    r"""Arrange access Mobile 3"""  
    access_name1: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AccessName1'), 'exclude': lambda f: f is None }})
    r"""Arrange access contact name 1"""  
    access_name2: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AccessName2'), 'exclude': lambda f: f is None }})
    r"""Arrange access contact name 2"""  
    access_name3: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AccessName3'), 'exclude': lambda f: f is None }})
    r"""Arrange access contact name 3"""  
    end_date: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('EndDate'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""The end date of the Tenancy"""  
    e_tag: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ETag'), 'exclude': lambda f: f is None }})
    r"""ETag"""  
    fixed_date: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('FixedDate'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""The fixed date of the Tenancy"""  
    global_reference: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('GlobalReference'), 'exclude': lambda f: f is None }})
    r"""The unique global reference of the Tenancy"""  
    is_tenancy_ended: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('IsTenancyEnded'), 'exclude': lambda f: f is None }})
    r"""Has the Tenancy ended?"""  
    is_tenancy_proposed: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('IsTenancyProposed'), 'exclude': lambda f: f is None }})
    r"""Is the tenancy Proposed?"""  
    is_tenancy_signed: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('IsTenancySigned'), 'exclude': lambda f: f is None }})
    r"""Is the tenancy signed?"""  
    linked_tenants: Optional[list[shared_linkedtenantmodel.LinkedTenantModel]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('LinkedTenants'), 'exclude': lambda f: f is None }})
    r"""A collection of tenants linked to the tenancy:-"""  
    oid: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('OID'), 'exclude': lambda f: f is None }})
    r"""OID"""  
    start_date: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('StartDate'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""The start date of the Tenancy"""  
    