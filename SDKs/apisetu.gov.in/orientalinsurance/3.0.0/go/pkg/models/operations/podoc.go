// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type PodocSecurity struct {
	APIKey   string `security:"scheme,type=apiKey,subtype=header,name=X-APISETU-APIKEY"`
	ClientID string `security:"scheme,type=apiKey,subtype=header,name=X-APISETU-CLIENTID"`
}

type PodocRequestBodyCertificateParameters struct {
	// INSCODE
	Inscode string `json:"INSCODE"`
	// POLNO
	Polno string `json:"POLNO"`
	// STARTDT
	Startdt string `json:"STARTDT"`
}

// PodocRequestBodyFormatEnum - The format of the certificate in response.
type PodocRequestBodyFormatEnum string

const (
	PodocRequestBodyFormatEnumPdf PodocRequestBodyFormatEnum = "pdf"
)

func (e PodocRequestBodyFormatEnum) ToPointer() *PodocRequestBodyFormatEnum {
	return &e
}

func (e *PodocRequestBodyFormatEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "pdf":
		*e = PodocRequestBodyFormatEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PodocRequestBodyFormatEnum: %v", v)
	}
}

// PodocRequestBody - Request format
type PodocRequestBody struct {
	CertificateParameters *PodocRequestBodyCertificateParameters `json:"certificateParameters,omitempty"`
	ConsentArtifact       *shared.ConsentArtifactSchema          `json:"consentArtifact,omitempty"`
	// The format of the certificate in response.
	Format PodocRequestBodyFormatEnum `json:"format"`
	// A unique transaction id for this request in UUID format. It is used for tracking the request.
	TxnID string `json:"txnId"`
}

type Podoc504ApplicationJSONErrorEnum string

const (
	Podoc504ApplicationJSONErrorEnumGatewayTimeout Podoc504ApplicationJSONErrorEnum = "gateway_timeout"
)

func (e Podoc504ApplicationJSONErrorEnum) ToPointer() *Podoc504ApplicationJSONErrorEnum {
	return &e
}

func (e *Podoc504ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "gateway_timeout":
		*e = Podoc504ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Podoc504ApplicationJSONErrorEnum: %v", v)
	}
}

type Podoc504ApplicationJSONErrorDescriptionEnum string

const (
	Podoc504ApplicationJSONErrorDescriptionEnumPublisherServiceDidNotRespondInTime Podoc504ApplicationJSONErrorDescriptionEnum = "Publisher service did not respond in time"
)

func (e Podoc504ApplicationJSONErrorDescriptionEnum) ToPointer() *Podoc504ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Podoc504ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Publisher service did not respond in time":
		*e = Podoc504ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Podoc504ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Podoc504ApplicationJSON - Gateway timeout
type Podoc504ApplicationJSON struct {
	Error            *Podoc504ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Podoc504ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Podoc503ApplicationJSONErrorEnum string

const (
	Podoc503ApplicationJSONErrorEnumServiceUnavailable Podoc503ApplicationJSONErrorEnum = "service_unavailable"
)

func (e Podoc503ApplicationJSONErrorEnum) ToPointer() *Podoc503ApplicationJSONErrorEnum {
	return &e
}

func (e *Podoc503ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "service_unavailable":
		*e = Podoc503ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Podoc503ApplicationJSONErrorEnum: %v", v)
	}
}

type Podoc503ApplicationJSONErrorDescriptionEnum string

const (
	Podoc503ApplicationJSONErrorDescriptionEnumPublisherServiceIsTemporarilyUnavailable Podoc503ApplicationJSONErrorDescriptionEnum = "Publisher service is temporarily unavailable"
)

func (e Podoc503ApplicationJSONErrorDescriptionEnum) ToPointer() *Podoc503ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Podoc503ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Publisher service is temporarily unavailable":
		*e = Podoc503ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Podoc503ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Podoc503ApplicationJSON - Service unavailable
type Podoc503ApplicationJSON struct {
	Error            *Podoc503ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Podoc503ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Podoc502ApplicationJSONErrorEnum string

const (
	Podoc502ApplicationJSONErrorEnumBadGatewy Podoc502ApplicationJSONErrorEnum = "bad_gatewy"
)

func (e Podoc502ApplicationJSONErrorEnum) ToPointer() *Podoc502ApplicationJSONErrorEnum {
	return &e
}

func (e *Podoc502ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "bad_gatewy":
		*e = Podoc502ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Podoc502ApplicationJSONErrorEnum: %v", v)
	}
}

type Podoc502ApplicationJSONErrorDescriptionEnum string

const (
	Podoc502ApplicationJSONErrorDescriptionEnumPublisherServiceReturnedAnInvalidResponse Podoc502ApplicationJSONErrorDescriptionEnum = "Publisher service returned an invalid response"
)

func (e Podoc502ApplicationJSONErrorDescriptionEnum) ToPointer() *Podoc502ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Podoc502ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Publisher service returned an invalid response":
		*e = Podoc502ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Podoc502ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Podoc502ApplicationJSON - Bad gateway
type Podoc502ApplicationJSON struct {
	Error            *Podoc502ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Podoc502ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Podoc500ApplicationJSONErrorEnum string

const (
	Podoc500ApplicationJSONErrorEnumInternalServerError Podoc500ApplicationJSONErrorEnum = "internal_server_error"
)

func (e Podoc500ApplicationJSONErrorEnum) ToPointer() *Podoc500ApplicationJSONErrorEnum {
	return &e
}

func (e *Podoc500ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "internal_server_error":
		*e = Podoc500ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Podoc500ApplicationJSONErrorEnum: %v", v)
	}
}

type Podoc500ApplicationJSONErrorDescriptionEnum string

const (
	Podoc500ApplicationJSONErrorDescriptionEnumInternalServerError Podoc500ApplicationJSONErrorDescriptionEnum = "Internal server error"
)

func (e Podoc500ApplicationJSONErrorDescriptionEnum) ToPointer() *Podoc500ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Podoc500ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Internal server error":
		*e = Podoc500ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Podoc500ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Podoc500ApplicationJSON - Internal server error
type Podoc500ApplicationJSON struct {
	Error            *Podoc500ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Podoc500ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Podoc404ApplicationJSONErrorEnum string

const (
	Podoc404ApplicationJSONErrorEnumRecordNotFound Podoc404ApplicationJSONErrorEnum = "record_not_found"
	Podoc404ApplicationJSONErrorEnumURLNotFound    Podoc404ApplicationJSONErrorEnum = "url_not_found"
)

func (e Podoc404ApplicationJSONErrorEnum) ToPointer() *Podoc404ApplicationJSONErrorEnum {
	return &e
}

func (e *Podoc404ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "record_not_found":
		fallthrough
	case "url_not_found":
		*e = Podoc404ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Podoc404ApplicationJSONErrorEnum: %v", v)
	}
}

type Podoc404ApplicationJSONErrorDescriptionEnum string

const (
	Podoc404ApplicationJSONErrorDescriptionEnumNoRecordFound               Podoc404ApplicationJSONErrorDescriptionEnum = "No record found"
	Podoc404ApplicationJSONErrorDescriptionEnumYourAPIURLOrPathIsIncorrect Podoc404ApplicationJSONErrorDescriptionEnum = "Your API url or path is incorrect"
)

func (e Podoc404ApplicationJSONErrorDescriptionEnum) ToPointer() *Podoc404ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Podoc404ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "No record found":
		fallthrough
	case "Your API url or path is incorrect":
		*e = Podoc404ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Podoc404ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Podoc404ApplicationJSON - No record found
type Podoc404ApplicationJSON struct {
	Error            *Podoc404ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Podoc404ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Podoc401ApplicationJSONErrorEnum string

const (
	Podoc401ApplicationJSONErrorEnumInvalidAuthentication Podoc401ApplicationJSONErrorEnum = "invalid_authentication"
	Podoc401ApplicationJSONErrorEnumInvalidAuthorization  Podoc401ApplicationJSONErrorEnum = "invalid_authorization"
)

func (e Podoc401ApplicationJSONErrorEnum) ToPointer() *Podoc401ApplicationJSONErrorEnum {
	return &e
}

func (e *Podoc401ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "invalid_authentication":
		fallthrough
	case "invalid_authorization":
		*e = Podoc401ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Podoc401ApplicationJSONErrorEnum: %v", v)
	}
}

type Podoc401ApplicationJSONErrorDescriptionEnum string

const (
	Podoc401ApplicationJSONErrorDescriptionEnumAuthenticationFailed            Podoc401ApplicationJSONErrorDescriptionEnum = "Authentication failed"
	Podoc401ApplicationJSONErrorDescriptionEnumYouAreNotAuthorizedToUseThisAPI Podoc401ApplicationJSONErrorDescriptionEnum = "You are not authorized to use this API"
)

func (e Podoc401ApplicationJSONErrorDescriptionEnum) ToPointer() *Podoc401ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Podoc401ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Authentication failed":
		fallthrough
	case "You are not authorized to use this API":
		*e = Podoc401ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Podoc401ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Podoc401ApplicationJSON - Unauthorized access
type Podoc401ApplicationJSON struct {
	Error            *Podoc401ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Podoc401ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Podoc400ApplicationJSONErrorEnum string

const (
	Podoc400ApplicationJSONErrorEnumMissingParameter Podoc400ApplicationJSONErrorEnum = "missing_parameter"
	Podoc400ApplicationJSONErrorEnumInvalidParameter Podoc400ApplicationJSONErrorEnum = "invalid_parameter"
	Podoc400ApplicationJSONErrorEnumInvalidFormat    Podoc400ApplicationJSONErrorEnum = "invalid_format"
	Podoc400ApplicationJSONErrorEnumInvalidTxnid     Podoc400ApplicationJSONErrorEnum = "invalid_txnid"
	Podoc400ApplicationJSONErrorEnumInvalidConsentid Podoc400ApplicationJSONErrorEnum = "invalid_consentid"
)

func (e Podoc400ApplicationJSONErrorEnum) ToPointer() *Podoc400ApplicationJSONErrorEnum {
	return &e
}

func (e *Podoc400ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "missing_parameter":
		fallthrough
	case "invalid_parameter":
		fallthrough
	case "invalid_format":
		fallthrough
	case "invalid_txnid":
		fallthrough
	case "invalid_consentid":
		*e = Podoc400ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Podoc400ApplicationJSONErrorEnum: %v", v)
	}
}

type Podoc400ApplicationJSONErrorDescriptionEnum string

const (
	Podoc400ApplicationJSONErrorDescriptionEnumPleaseProvideAllMandatoryParameters     Podoc400ApplicationJSONErrorDescriptionEnum = "Please provide all mandatory parameters"
	Podoc400ApplicationJSONErrorDescriptionEnumBadRequest                              Podoc400ApplicationJSONErrorDescriptionEnum = "Bad request"
	Podoc400ApplicationJSONErrorDescriptionEnumTheFormatParameterIsInvalid             Podoc400ApplicationJSONErrorDescriptionEnum = "The format parameter is invalid"
	Podoc400ApplicationJSONErrorDescriptionEnumTheTxnIDParameterMustBeInUUIDFormat     Podoc400ApplicationJSONErrorDescriptionEnum = "The txnId parameter must be in UUID format"
	Podoc400ApplicationJSONErrorDescriptionEnumTheConsentIDParameterMustBeInUUIDFormat Podoc400ApplicationJSONErrorDescriptionEnum = "The consentId parameter must be in UUID format"
)

func (e Podoc400ApplicationJSONErrorDescriptionEnum) ToPointer() *Podoc400ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Podoc400ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Please provide all mandatory parameters":
		fallthrough
	case "Bad request":
		fallthrough
	case "The format parameter is invalid":
		fallthrough
	case "The txnId parameter must be in UUID format":
		fallthrough
	case "The consentId parameter must be in UUID format":
		*e = Podoc400ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Podoc400ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Podoc400ApplicationJSON - Bad request
type Podoc400ApplicationJSON struct {
	Error            *Podoc400ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Podoc400ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type PodocResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Bad request
	Podoc400ApplicationJSONObject *Podoc400ApplicationJSON
	// Unauthorized access
	Podoc401ApplicationJSONObject *Podoc401ApplicationJSON
	// No record found
	Podoc404ApplicationJSONObject *Podoc404ApplicationJSON
	// Internal server error
	Podoc500ApplicationJSONObject *Podoc500ApplicationJSON
	// Bad gateway
	Podoc502ApplicationJSONObject *Podoc502ApplicationJSON
	// Service unavailable
	Podoc503ApplicationJSONObject *Podoc503ApplicationJSON
	// Gateway timeout
	Podoc504ApplicationJSONObject *Podoc504ApplicationJSON
}
