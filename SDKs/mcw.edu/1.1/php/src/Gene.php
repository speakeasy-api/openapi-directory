<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Gene 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Return a list of genes annotated to an ontology term
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GETAllAnnotatedGenesUsingGETRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GETAllAnnotatedGenesUsingGETResponse
     */
	public function getAllAnnotatedGenesUsingGET(
        \OpenAPI\OpenAPI\Models\Operations\GETAllAnnotatedGenesUsingGETRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GETAllAnnotatedGenesUsingGETResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/genes/annotation/{accId}', \OpenAPI\OpenAPI\Models\Operations\GETAllAnnotatedGenesUsingGETRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GETAllAnnotatedGenesUsingGETResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * Return a list of genes annotated to an ontology term
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\AnnotatedGeneRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetAnnotatedGenesUsingPOSTResponse
     */
	public function getAnnotatedGenesUsingPOST(
        \OpenAPI\OpenAPI\Models\Shared\AnnotatedGeneRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetAnnotatedGenesUsingPOSTResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/genes/annotation');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetAnnotatedGenesUsingPOSTResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 201 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * Return a list of gene alleles
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GETGeneAllelesUsingGETRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GETGeneAllelesUsingGETResponse
     */
	public function getGeneAllelesUsingGET(
        \OpenAPI\OpenAPI\Models\Operations\GETGeneAllelesUsingGETRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GETGeneAllelesUsingGETResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/genes/allele/{rgdId}', \OpenAPI\OpenAPI\Models\Operations\GETGeneAllelesUsingGETRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GETGeneAllelesUsingGETResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * Return a list of all genes with position information for an assembly
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GETGeneByMapKeyUsingGETRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GETGeneByMapKeyUsingGETResponse
     */
	public function getGeneByMapKeyUsingGET(
        \OpenAPI\OpenAPI\Models\Operations\GETGeneByMapKeyUsingGETRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GETGeneByMapKeyUsingGETResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/genes/map/{mapKey}', \OpenAPI\OpenAPI\Models\Operations\GETGeneByMapKeyUsingGETRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GETGeneByMapKeyUsingGETResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * Get a gene record by RGD ID
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GETGeneByRgdIdUsingGETRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GETGeneByRgdIdUsingGETResponse
     */
	public function getGeneByRgdIdUsingGET(
        \OpenAPI\OpenAPI\Models\Operations\GETGeneByRgdIdUsingGETRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GETGeneByRgdIdUsingGETResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/genes/{rgdId}', \OpenAPI\OpenAPI\Models\Operations\GETGeneByRgdIdUsingGETRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GETGeneByRgdIdUsingGETResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * Get a gene record by symbol and species type key
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GETGeneBySymbolUsingGETRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GETGeneBySymbolUsingGETResponse
     */
	public function getGeneBySymbolUsingGET(
        \OpenAPI\OpenAPI\Models\Operations\GETGeneBySymbolUsingGETRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GETGeneBySymbolUsingGETResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/genes/{symbol}/{speciesTypeKey}', \OpenAPI\OpenAPI\Models\Operations\GETGeneBySymbolUsingGETRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GETGeneBySymbolUsingGETResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * Return a list of gene orthologs
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GETGeneOrthologsUsingGETRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GETGeneOrthologsUsingGETResponse
     */
	public function getGeneOrthologsUsingGET(
        \OpenAPI\OpenAPI\Models\Operations\GETGeneOrthologsUsingGETRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GETGeneOrthologsUsingGETResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/genes/orthologs/{rgdId}', \OpenAPI\OpenAPI\Models\Operations\GETGeneOrthologsUsingGETRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GETGeneOrthologsUsingGETResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * Return a list of genes annotated to an ontology term
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GETGenesAnnotatedUsingGETRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GETGenesAnnotatedUsingGETResponse
     */
	public function getGenesAnnotatedUsingGET(
        \OpenAPI\OpenAPI\Models\Operations\GETGenesAnnotatedUsingGETRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GETGenesAnnotatedUsingGETResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/genes/annotation/{accId}/{speciesTypeKey}', \OpenAPI\OpenAPI\Models\Operations\GETGenesAnnotatedUsingGETRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GETGenesAnnotatedUsingGETResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * Return a list of genes for an affymetrix ID
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GETGenesByAffyIdUsingGETRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GETGenesByAffyIdUsingGETResponse
     */
	public function getGenesByAffyIdUsingGET(
        \OpenAPI\OpenAPI\Models\Operations\GETGenesByAffyIdUsingGETRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GETGenesByAffyIdUsingGETResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/genes/affyId/{affyId}/{speciesTypeKey}', \OpenAPI\OpenAPI\Models\Operations\GETGenesByAffyIdUsingGETRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GETGenesByAffyIdUsingGETResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * Return a list of genes for an alias and species
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GETGenesByAliasSymbolUsingGETRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GETGenesByAliasSymbolUsingGETResponse
     */
	public function getGenesByAliasSymbolUsingGET(
        \OpenAPI\OpenAPI\Models\Operations\GETGenesByAliasSymbolUsingGETRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GETGenesByAliasSymbolUsingGETResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/genes/alias/{aliasSymbol}/{speciesTypeKey}', \OpenAPI\OpenAPI\Models\Operations\GETGenesByAliasSymbolUsingGETRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GETGenesByAliasSymbolUsingGETResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * Return a list of genes by keyword and species type key
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GETGenesByKeywordUsingGETRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GETGenesByKeywordUsingGETResponse
     */
	public function getGenesByKeywordUsingGET(
        \OpenAPI\OpenAPI\Models\Operations\GETGenesByKeywordUsingGETRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GETGenesByKeywordUsingGETResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/genes/keyword/{keyword}/{speciesTypeKey}', \OpenAPI\OpenAPI\Models\Operations\GETGenesByKeywordUsingGETRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GETGenesByKeywordUsingGETResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * Return a list of genes position and map key
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GETGenesByPositionUsingGETRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GETGenesByPositionUsingGETResponse
     */
	public function getGenesByPositionUsingGET(
        \OpenAPI\OpenAPI\Models\Operations\GETGenesByPositionUsingGETRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GETGenesByPositionUsingGETResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/genes/{chr}/{start}/{stop}/{mapKey}', \OpenAPI\OpenAPI\Models\Operations\GETGenesByPositionUsingGETRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GETGenesByPositionUsingGETResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * Return a list of all genes for a species in RGD
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GETGenesBySpeciesUsingGETRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GETGenesBySpeciesUsingGETResponse
     */
	public function getGenesBySpeciesUsingGET(
        \OpenAPI\OpenAPI\Models\Operations\GETGenesBySpeciesUsingGETRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GETGenesBySpeciesUsingGETResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/genes/species/{speciesTypeKey}', \OpenAPI\OpenAPI\Models\Operations\GETGenesBySpeciesUsingGETRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GETGenesBySpeciesUsingGETResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * Return a list of genes in region
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GETGenesInRegionUsingGETRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GETGenesInRegionUsingGETResponse
     */
	public function getGenesInRegionUsingGET(
        \OpenAPI\OpenAPI\Models\Operations\GETGenesInRegionUsingGETRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GETGenesInRegionUsingGETResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/genes/region/{chr}/{start}/{stop}/{mapKey}', \OpenAPI\OpenAPI\Models\Operations\GETGenesInRegionUsingGETRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GETGenesInRegionUsingGETResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * Return a list of genes position and map key
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GETMappedGenesByPositionUsingGETRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GETMappedGenesByPositionUsingGETResponse
     */
	public function getMappedGenesByPositionUsingGET(
        \OpenAPI\OpenAPI\Models\Operations\GETMappedGenesByPositionUsingGETRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GETMappedGenesByPositionUsingGETResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/genes/mapped/{chr}/{start}/{stop}/{mapKey}', \OpenAPI\OpenAPI\Models\Operations\GETMappedGenesByPositionUsingGETRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GETMappedGenesByPositionUsingGETResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * Return a list of gene orthologs
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\OrthologRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetOrthologsByListUsingPOSTResponse
     */
	public function getOrthologsByListUsingPOST(
        \OpenAPI\OpenAPI\Models\Shared\OrthologRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetOrthologsByListUsingPOSTResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/genes/orthologs');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetOrthologsByListUsingPOSTResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 201 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
}