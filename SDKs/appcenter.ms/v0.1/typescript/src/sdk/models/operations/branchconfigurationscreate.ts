/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

export class BranchConfigurationsCreateSecurity extends SpeakeasyBase {
  @SpeakeasyMetadata({
    data: "security, scheme=true;type=apiKey;subtype=header;name=X-API-Token",
  })
  apiToken: string;
}

export enum BranchConfigurationsCreateRequestBodyArtifactVersioningBuildNumberFormatEnum {
  BuildId = "buildId",
  Timestamp = "timestamp",
}

/**
 * The versioning configuration for artifacts built for this branch
 */
export class BranchConfigurationsCreateRequestBodyArtifactVersioning extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "buildNumberFormat" })
  buildNumberFormat?: BranchConfigurationsCreateRequestBodyArtifactVersioningBuildNumberFormatEnum;
}

/**
 * Build configuration for Android projects
 */
export class BranchConfigurationsCreateRequestBodyToolsetsAndroid extends SpeakeasyBase {
  /**
   * Whether to apply automatic signing or not
   */
  @SpeakeasyMetadata()
  @Expose({ name: "automaticSigning" })
  automaticSigning?: boolean;

  /**
   * The Android build variant to build
   */
  @SpeakeasyMetadata()
  @Expose({ name: "buildVariant" })
  buildVariant?: string;

  /**
   * Path to the Gradle wrapper script
   */
  @SpeakeasyMetadata()
  @Expose({ name: "gradleWrapperPath" })
  gradleWrapperPath?: string;

  /**
   * Whether it is the root module or not
   */
  @SpeakeasyMetadata()
  @Expose({ name: "isRoot" })
  isRoot?: boolean;

  /**
   * The key alias
   */
  @SpeakeasyMetadata()
  @Expose({ name: "keyAlias" })
  keyAlias?: string;

  /**
   * The key password
   */
  @SpeakeasyMetadata()
  @Expose({ name: "keyPassword" })
  keyPassword?: string;

  /**
   * The keystore encoded value
   */
  @SpeakeasyMetadata()
  @Expose({ name: "keystoreEncoded" })
  keystoreEncoded?: string;

  /**
   * The name of the keystore file
   */
  @SpeakeasyMetadata()
  @Expose({ name: "keystoreFilename" })
  keystoreFilename?: string;

  /**
   * The password of the keystore
   */
  @SpeakeasyMetadata()
  @Expose({ name: "keystorePassword" })
  keystorePassword?: string;

  /**
   * The Gradle module to build
   */
  @SpeakeasyMetadata()
  @Expose({ name: "module" })
  module?: string;

  /**
   * Whether to run lint checks during the build (default)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "runLint" })
  runLint?: boolean;

  /**
   * Whether to run unit tests during the build (default)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "runTests" })
  runTests?: boolean;
}

/**
 * Build configuration when React Native, or other JavaScript tech, is part of the build steps
 */
export class BranchConfigurationsCreateRequestBodyToolsetsJavascript extends SpeakeasyBase {
  /**
   * Path to package.json file for the main project, e.g. "package.json" or "myapp/package.json"
   */
  @SpeakeasyMetadata()
  @Expose({ name: "packageJsonPath" })
  packageJsonPath?: string;

  /**
   * Version of React Native from package.json files
   */
  @SpeakeasyMetadata()
  @Expose({ name: "reactNativeVersion" })
  reactNativeVersion?: string;

  /**
   * Whether to run Jest unit tests, via npm test, during the build
   */
  @SpeakeasyMetadata()
  @Expose({ name: "runTests" })
  runTests?: boolean;
}

/**
 * Build configuration for Xamarin projects
 */
export class BranchConfigurationsCreateRequestBodyToolsetsXamarin extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "args" })
  args?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "configuration" })
  configuration?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "isSimBuild" })
  isSimBuild?: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "monoVersion" })
  monoVersion?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "p12File" })
  p12File?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "p12Pwd" })
  p12Pwd?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "provProfile" })
  provProfile?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "sdkBundle" })
  sdkBundle?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "slnPath" })
  slnPath?: string;

  /**
   * Symlink of the SDK Bundle and Mono installation.
   *
   * @remarks
   * The build will use the associated Mono bundled with related Xamarin SDK. If both symlink and monoVersion or sdkBundle are passed, the symlink is taking precedence. If non-existing symlink is passed, the current stable Mono version will be configured for building.
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "symlink" })
  symlink?: string;
}

/**
 * Provisioning profile fetch and store information
 */
export class BranchConfigurationsCreateRequestBodyToolsetsXcodeAppExtensionProvisioningProfileFiles extends SpeakeasyBase {
  /**
   * File id from secure file storage
   */
  @SpeakeasyMetadata()
  @Expose({ name: "fileId" })
  fileId?: string;

  /**
   * Name of uploaded provisioning profile
   */
  @SpeakeasyMetadata()
  @Expose({ name: "fileName" })
  fileName?: string;

  /**
   * Target the provisioning profile is used to sign
   */
  @SpeakeasyMetadata()
  @Expose({ name: "targetBundleIdentifier" })
  targetBundleIdentifier?: string;

  /**
   * Upload id to App Center File Upload Store
   */
  @SpeakeasyMetadata()
  @Expose({ name: "uploadId" })
  uploadId?: string;
}

/**
 * Build configuration when Xcode is part of the build steps
 */
export class BranchConfigurationsCreateRequestBodyToolsetsXcode extends SpeakeasyBase {
  @SpeakeasyMetadata({
    elemType:
      BranchConfigurationsCreateRequestBodyToolsetsXcodeAppExtensionProvisioningProfileFiles,
  })
  @Expose({ name: "appExtensionProvisioningProfileFiles" })
  @Type(
    () =>
      BranchConfigurationsCreateRequestBodyToolsetsXcodeAppExtensionProvisioningProfileFiles
  )
  appExtensionProvisioningProfileFiles?: BranchConfigurationsCreateRequestBodyToolsetsXcodeAppExtensionProvisioningProfileFiles[];

  /**
   * The build configuration of the target to archive
   */
  @SpeakeasyMetadata()
  @Expose({ name: "archiveConfiguration" })
  archiveConfiguration?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "automaticSigning" })
  automaticSigning?: boolean;

  /**
   * Path to Carthage file, if present
   */
  @SpeakeasyMetadata()
  @Expose({ name: "cartfilePath" })
  cartfilePath?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "certificateEncoded" })
  certificateEncoded?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "certificateFileId" })
  certificateFileId?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "certificateFilename" })
  certificateFilename?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "certificatePassword" })
  certificatePassword?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "certificateUploadId" })
  certificateUploadId?: string;

  /**
   * Setting this to true forces the build to use Xcode legacy build system. Otherwise, the setting from workspace settings is used.
   *
   * @remarks
   * By default new build system is used if workspace setting is not committed to the repository. Only used for iOS React Native app, with Xcode 10.
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "forceLegacyBuildSystem" })
  forceLegacyBuildSystem?: boolean;

  /**
   * Path to CococaPods file, if present
   */
  @SpeakeasyMetadata()
  @Expose({ name: "podfilePath" })
  podfilePath?: string;

  /**
   * Xcode project/workspace path
   */
  @SpeakeasyMetadata()
  @Expose({ name: "projectOrWorkspacePath" })
  projectOrWorkspacePath?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "provisioningProfileEncoded" })
  provisioningProfileEncoded?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "provisioningProfileFileId" })
  provisioningProfileFileId?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "provisioningProfileFilename" })
  provisioningProfileFilename?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "provisioningProfileUploadId" })
  provisioningProfileUploadId?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "scheme" })
  scheme?: string;

  /**
   * The target id of the selected scheme to archive
   */
  @SpeakeasyMetadata()
  @Expose({ name: "targetToArchive" })
  targetToArchive?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "teamId" })
  teamId?: string;

  /**
   * The selected pbxproject hash to the repositroy
   */
  @SpeakeasyMetadata()
  @Expose({ name: "xcodeProjectSha" })
  xcodeProjectSha?: string;

  /**
   * Xcode version used to build. Available versions can be found in "/xcode_versions" API. Default is latest stable version, at the time when the configuration is set.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "xcodeVersion" })
  xcodeVersion?: string;
}

/**
 * The branch build configuration for each toolset
 */
export class BranchConfigurationsCreateRequestBodyToolsets extends SpeakeasyBase {
  /**
   * Build configuration for Android projects
   */
  @SpeakeasyMetadata()
  @Expose({ name: "android" })
  @Type(() => BranchConfigurationsCreateRequestBodyToolsetsAndroid)
  android?: BranchConfigurationsCreateRequestBodyToolsetsAndroid;

  /**
   * Build configuration when React Native, or other JavaScript tech, is part of the build steps
   */
  @SpeakeasyMetadata()
  @Expose({ name: "javascript" })
  @Type(() => BranchConfigurationsCreateRequestBodyToolsetsJavascript)
  javascript?: BranchConfigurationsCreateRequestBodyToolsetsJavascript;

  /**
   * Build configuration for Xamarin projects
   */
  @SpeakeasyMetadata()
  @Expose({ name: "xamarin" })
  @Type(() => BranchConfigurationsCreateRequestBodyToolsetsXamarin)
  xamarin?: BranchConfigurationsCreateRequestBodyToolsetsXamarin;

  /**
   * Build configuration when Xcode is part of the build steps
   */
  @SpeakeasyMetadata()
  @Expose({ name: "xcode" })
  @Type(() => BranchConfigurationsCreateRequestBodyToolsetsXcode)
  xcode?: BranchConfigurationsCreateRequestBodyToolsetsXcode;
}

export enum BranchConfigurationsCreateRequestBodyTriggerEnum {
  Continous = "continous",
  Continuous = "continuous",
  Manual = "manual",
}

/**
 * The branch build configuration
 */
export class BranchConfigurationsCreateRequestBody extends SpeakeasyBase {
  /**
   * The versioning configuration for artifacts built for this branch
   */
  @SpeakeasyMetadata()
  @Expose({ name: "artifactVersioning" })
  @Type(() => BranchConfigurationsCreateRequestBodyArtifactVersioning)
  artifactVersioning?: BranchConfigurationsCreateRequestBodyArtifactVersioning;

  @SpeakeasyMetadata()
  @Expose({ name: "badgeIsEnabled" })
  badgeIsEnabled?: boolean;

  /**
   * A configured branch name to clone from. If provided, all other parameters will be ignored. Only supported in POST requests.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "cloneFromBranch" })
  cloneFromBranch?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "signed" })
  signed?: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "testsEnabled" })
  testsEnabled?: boolean;

  /**
   * The branch build configuration for each toolset
   */
  @SpeakeasyMetadata()
  @Expose({ name: "toolsets" })
  @Type(() => BranchConfigurationsCreateRequestBodyToolsets)
  toolsets?: BranchConfigurationsCreateRequestBodyToolsets;

  @SpeakeasyMetadata()
  @Expose({ name: "trigger" })
  trigger?: BranchConfigurationsCreateRequestBodyTriggerEnum;
}

export class BranchConfigurationsCreateRequest extends SpeakeasyBase {
  /**
   * Parameters of the configuration
   */
  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  requestBody: BranchConfigurationsCreateRequestBody;

  /**
   * The name of the application
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=app_name",
  })
  appName: string;

  /**
   * The branch name
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=branch",
  })
  branch: string;

  /**
   * The name of the owner
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=owner_name",
  })
  ownerName: string;
}

export enum BranchConfigurationsCreate200ApplicationJSONArtifactVersioningBuildNumberFormatEnum {
  BuildId = "buildId",
  Timestamp = "timestamp",
}

/**
 * The versioning configuration for artifacts built for this branch
 */
export class BranchConfigurationsCreate200ApplicationJSONArtifactVersioning extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "buildNumberFormat" })
  buildNumberFormat?: BranchConfigurationsCreate200ApplicationJSONArtifactVersioningBuildNumberFormatEnum;
}

/**
 * Build configuration for Android projects
 */
export class BranchConfigurationsCreate200ApplicationJSONToolsetsAndroid extends SpeakeasyBase {
  /**
   * Whether to apply automatic signing or not
   */
  @SpeakeasyMetadata()
  @Expose({ name: "automaticSigning" })
  automaticSigning?: boolean;

  /**
   * The Android build variant to build
   */
  @SpeakeasyMetadata()
  @Expose({ name: "buildVariant" })
  buildVariant?: string;

  /**
   * Path to the Gradle wrapper script
   */
  @SpeakeasyMetadata()
  @Expose({ name: "gradleWrapperPath" })
  gradleWrapperPath?: string;

  /**
   * Whether it is the root module or not
   */
  @SpeakeasyMetadata()
  @Expose({ name: "isRoot" })
  isRoot?: boolean;

  /**
   * The key alias
   */
  @SpeakeasyMetadata()
  @Expose({ name: "keyAlias" })
  keyAlias?: string;

  /**
   * The key password
   */
  @SpeakeasyMetadata()
  @Expose({ name: "keyPassword" })
  keyPassword?: string;

  /**
   * The keystore encoded value
   */
  @SpeakeasyMetadata()
  @Expose({ name: "keystoreEncoded" })
  keystoreEncoded?: string;

  /**
   * The name of the keystore file
   */
  @SpeakeasyMetadata()
  @Expose({ name: "keystoreFilename" })
  keystoreFilename?: string;

  /**
   * The password of the keystore
   */
  @SpeakeasyMetadata()
  @Expose({ name: "keystorePassword" })
  keystorePassword?: string;

  /**
   * The Gradle module to build
   */
  @SpeakeasyMetadata()
  @Expose({ name: "module" })
  module?: string;

  /**
   * Whether to run lint checks during the build (default)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "runLint" })
  runLint?: boolean;

  /**
   * Whether to run unit tests during the build (default)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "runTests" })
  runTests?: boolean;
}

/**
 * Build configuration when React Native, or other JavaScript tech, is part of the build steps
 */
export class BranchConfigurationsCreate200ApplicationJSONToolsetsJavascript extends SpeakeasyBase {
  /**
   * Path to package.json file for the main project, e.g. "package.json" or "myapp/package.json"
   */
  @SpeakeasyMetadata()
  @Expose({ name: "packageJsonPath" })
  packageJsonPath?: string;

  /**
   * Version of React Native from package.json files
   */
  @SpeakeasyMetadata()
  @Expose({ name: "reactNativeVersion" })
  reactNativeVersion?: string;

  /**
   * Whether to run Jest unit tests, via npm test, during the build
   */
  @SpeakeasyMetadata()
  @Expose({ name: "runTests" })
  runTests?: boolean;
}

/**
 * Build configuration for Xamarin projects
 */
export class BranchConfigurationsCreate200ApplicationJSONToolsetsXamarin extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "args" })
  args?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "configuration" })
  configuration?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "isSimBuild" })
  isSimBuild?: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "monoVersion" })
  monoVersion?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "p12File" })
  p12File?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "p12Pwd" })
  p12Pwd?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "provProfile" })
  provProfile?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "sdkBundle" })
  sdkBundle?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "slnPath" })
  slnPath?: string;

  /**
   * Symlink of the SDK Bundle and Mono installation.
   *
   * @remarks
   * The build will use the associated Mono bundled with related Xamarin SDK. If both symlink and monoVersion or sdkBundle are passed, the symlink is taking precedence. If non-existing symlink is passed, the current stable Mono version will be configured for building.
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "symlink" })
  symlink?: string;
}

/**
 * Provisioning profile fetch and store information
 */
export class BranchConfigurationsCreate200ApplicationJSONToolsetsXcodeAppExtensionProvisioningProfileFiles extends SpeakeasyBase {
  /**
   * File id from secure file storage
   */
  @SpeakeasyMetadata()
  @Expose({ name: "fileId" })
  fileId?: string;

  /**
   * Name of uploaded provisioning profile
   */
  @SpeakeasyMetadata()
  @Expose({ name: "fileName" })
  fileName?: string;

  /**
   * Target the provisioning profile is used to sign
   */
  @SpeakeasyMetadata()
  @Expose({ name: "targetBundleIdentifier" })
  targetBundleIdentifier?: string;

  /**
   * Upload id to App Center File Upload Store
   */
  @SpeakeasyMetadata()
  @Expose({ name: "uploadId" })
  uploadId?: string;
}

/**
 * Build configuration when Xcode is part of the build steps
 */
export class BranchConfigurationsCreate200ApplicationJSONToolsetsXcode extends SpeakeasyBase {
  @SpeakeasyMetadata({
    elemType:
      BranchConfigurationsCreate200ApplicationJSONToolsetsXcodeAppExtensionProvisioningProfileFiles,
  })
  @Expose({ name: "appExtensionProvisioningProfileFiles" })
  @Type(
    () =>
      BranchConfigurationsCreate200ApplicationJSONToolsetsXcodeAppExtensionProvisioningProfileFiles
  )
  appExtensionProvisioningProfileFiles?: BranchConfigurationsCreate200ApplicationJSONToolsetsXcodeAppExtensionProvisioningProfileFiles[];

  /**
   * The build configuration of the target to archive
   */
  @SpeakeasyMetadata()
  @Expose({ name: "archiveConfiguration" })
  archiveConfiguration?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "automaticSigning" })
  automaticSigning?: boolean;

  /**
   * Path to Carthage file, if present
   */
  @SpeakeasyMetadata()
  @Expose({ name: "cartfilePath" })
  cartfilePath?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "certificateEncoded" })
  certificateEncoded?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "certificateFileId" })
  certificateFileId?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "certificateFilename" })
  certificateFilename?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "certificatePassword" })
  certificatePassword?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "certificateUploadId" })
  certificateUploadId?: string;

  /**
   * Setting this to true forces the build to use Xcode legacy build system. Otherwise, the setting from workspace settings is used.
   *
   * @remarks
   * By default new build system is used if workspace setting is not committed to the repository. Only used for iOS React Native app, with Xcode 10.
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "forceLegacyBuildSystem" })
  forceLegacyBuildSystem?: boolean;

  /**
   * Path to CococaPods file, if present
   */
  @SpeakeasyMetadata()
  @Expose({ name: "podfilePath" })
  podfilePath?: string;

  /**
   * Xcode project/workspace path
   */
  @SpeakeasyMetadata()
  @Expose({ name: "projectOrWorkspacePath" })
  projectOrWorkspacePath?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "provisioningProfileEncoded" })
  provisioningProfileEncoded?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "provisioningProfileFileId" })
  provisioningProfileFileId?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "provisioningProfileFilename" })
  provisioningProfileFilename?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "provisioningProfileUploadId" })
  provisioningProfileUploadId?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "scheme" })
  scheme?: string;

  /**
   * The target id of the selected scheme to archive
   */
  @SpeakeasyMetadata()
  @Expose({ name: "targetToArchive" })
  targetToArchive?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "teamId" })
  teamId?: string;

  /**
   * The selected pbxproject hash to the repositroy
   */
  @SpeakeasyMetadata()
  @Expose({ name: "xcodeProjectSha" })
  xcodeProjectSha?: string;

  /**
   * Xcode version used to build. Available versions can be found in "/xcode_versions" API. Default is latest stable version, at the time when the configuration is set.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "xcodeVersion" })
  xcodeVersion?: string;
}

/**
 * The branch build configuration for each toolset
 */
export class BranchConfigurationsCreate200ApplicationJSONToolsets extends SpeakeasyBase {
  /**
   * Build configuration for Android projects
   */
  @SpeakeasyMetadata()
  @Expose({ name: "android" })
  @Type(() => BranchConfigurationsCreate200ApplicationJSONToolsetsAndroid)
  android?: BranchConfigurationsCreate200ApplicationJSONToolsetsAndroid;

  /**
   * Build configuration when React Native, or other JavaScript tech, is part of the build steps
   */
  @SpeakeasyMetadata()
  @Expose({ name: "javascript" })
  @Type(() => BranchConfigurationsCreate200ApplicationJSONToolsetsJavascript)
  javascript?: BranchConfigurationsCreate200ApplicationJSONToolsetsJavascript;

  /**
   * Build configuration for Xamarin projects
   */
  @SpeakeasyMetadata()
  @Expose({ name: "xamarin" })
  @Type(() => BranchConfigurationsCreate200ApplicationJSONToolsetsXamarin)
  xamarin?: BranchConfigurationsCreate200ApplicationJSONToolsetsXamarin;

  /**
   * Build configuration when Xcode is part of the build steps
   */
  @SpeakeasyMetadata()
  @Expose({ name: "xcode" })
  @Type(() => BranchConfigurationsCreate200ApplicationJSONToolsetsXcode)
  xcode?: BranchConfigurationsCreate200ApplicationJSONToolsetsXcode;
}

export enum BranchConfigurationsCreate200ApplicationJSONTriggerEnum {
  Continous = "continous",
  Continuous = "continuous",
  Manual = "manual",
}

/**
 * The branch build configuration
 */
export class BranchConfigurationsCreate200ApplicationJSON extends SpeakeasyBase {
  /**
   * The versioning configuration for artifacts built for this branch
   */
  @SpeakeasyMetadata()
  @Expose({ name: "artifactVersioning" })
  @Type(() => BranchConfigurationsCreate200ApplicationJSONArtifactVersioning)
  artifactVersioning?: BranchConfigurationsCreate200ApplicationJSONArtifactVersioning;

  @SpeakeasyMetadata()
  @Expose({ name: "badgeIsEnabled" })
  badgeIsEnabled?: boolean;

  /**
   * A configured branch name to clone from. If provided, all other parameters will be ignored. Only supported in POST requests.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "cloneFromBranch" })
  cloneFromBranch?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id: number;

  @SpeakeasyMetadata()
  @Expose({ name: "signed" })
  signed?: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "testsEnabled" })
  testsEnabled?: boolean;

  /**
   * The branch build configuration for each toolset
   */
  @SpeakeasyMetadata()
  @Expose({ name: "toolsets" })
  @Type(() => BranchConfigurationsCreate200ApplicationJSONToolsets)
  toolsets?: BranchConfigurationsCreate200ApplicationJSONToolsets;

  @SpeakeasyMetadata()
  @Expose({ name: "trigger" })
  trigger?: BranchConfigurationsCreate200ApplicationJSONTriggerEnum;
}

export class BranchConfigurationsCreateResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * Success
   */
  @SpeakeasyMetadata()
  branchConfigurationsCreate200ApplicationJSONObject?: BranchConfigurationsCreate200ApplicationJSON;
}
