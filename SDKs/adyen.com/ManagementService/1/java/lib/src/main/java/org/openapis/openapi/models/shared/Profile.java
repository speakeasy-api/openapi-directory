/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

public class Profile {
    /**
     * The type of Wi-Fi network. Possible values: **wpa-psk**, **wpa2-psk**, **wpa-eap**, **wpa2-eap**.
     */
    @JsonProperty("authType")
    public String authType;
    public Profile withAuthType(String authType) {
        this.authType = authType;
        return this;
    }
    
    /**
     * Indicates whether to automatically select the best authentication method available. Does not work on older terminal models.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("autoWifi")
    public Boolean autoWifi;
    public Profile withAutoWifi(Boolean autoWifi) {
        this.autoWifi = autoWifi;
        return this;
    }
    
    /**
     * Use **infra** for infrastructure-based networks. This applies to most networks. Use **adhoc** only if the communication is p2p-based between base stations.
     */
    @JsonProperty("bssType")
    public String bssType;
    public Profile withBssType(String bssType) {
        this.bssType = bssType;
        return this;
    }
    
    /**
     * The channel number of the Wi-Fi network. The recommended setting is **0** for automatic channel selection.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("channel")
    public Integer channel;
    public Profile withChannel(Integer channel) {
        this.channel = channel;
        return this;
    }
    
    /**
     * Indicates whether this is your preferred wireless network. If **true**, the terminal will try connecting to this network first.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("defaultProfile")
    public Boolean defaultProfile;
    public Profile withDefaultProfile(Boolean defaultProfile) {
        this.defaultProfile = defaultProfile;
        return this;
    }
    
    /**
     * For `authType` **wpa-eap** or **wpa2-eap**. Possible values: **tls**, **peap**, **leap**, **fast**
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("eap")
    public String eap;
    public Profile withEap(String eap) {
        this.eap = eap;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("eapCaCert")
    public File eapCaCert;
    public Profile withEapCaCert(File eapCaCert) {
        this.eapCaCert = eapCaCert;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("eapClientCert")
    public File eapClientCert;
    public Profile withEapClientCert(File eapClientCert) {
        this.eapClientCert = eapClientCert;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("eapClientKey")
    public File eapClientKey;
    public Profile withEapClientKey(File eapClientKey) {
        this.eapClientKey = eapClientKey;
        return this;
    }
    
    /**
     * For `eap` **tls**. The password of the RSA key file, if that file is password-protected.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("eapClientPwd")
    public String eapClientPwd;
    public Profile withEapClientPwd(String eapClientPwd) {
        this.eapClientPwd = eapClientPwd;
        return this;
    }
    
    /**
     * For `authType` **wpa-eap** or **wpa2-eap**. The EAP-PEAP username from your MS-CHAP account. Must match the configuration of your RADIUS server.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("eapIdentity")
    public String eapIdentity;
    public Profile withEapIdentity(String eapIdentity) {
        this.eapIdentity = eapIdentity;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("eapIntermediateCert")
    public File eapIntermediateCert;
    public Profile withEapIntermediateCert(File eapIntermediateCert) {
        this.eapIntermediateCert = eapIntermediateCert;
        return this;
    }
    
    /**
     * For `eap` **peap**. The EAP-PEAP password from your MS-CHAP account. Must match the configuration of your RADIUS server.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("eapPwd")
    public String eapPwd;
    public Profile withEapPwd(String eapPwd) {
        this.eapPwd = eapPwd;
        return this;
    }
    
    /**
     * Indicates if the network doesn't broadcast its SSID. Mandatory for Android terminals, because these terminals rely on this setting to be able to connect to any network.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("hiddenSsid")
    public Boolean hiddenSsid;
    public Profile withHiddenSsid(Boolean hiddenSsid) {
        this.hiddenSsid = hiddenSsid;
        return this;
    }
    
    /**
     * Your name for the Wi-Fi profile.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    public String name;
    public Profile withName(String name) {
        this.name = name;
        return this;
    }
    
    /**
     * For `authType` **wpa-psk or **wpa2-psk**. The password to the wireless network.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("psk")
    public String psk;
    public Profile withPsk(String psk) {
        this.psk = psk;
        return this;
    }
    
    /**
     * The name of the wireless network.
     */
    @JsonProperty("ssid")
    public String ssid;
    public Profile withSsid(String ssid) {
        this.ssid = ssid;
        return this;
    }
    
    /**
     * The type of encryption. Possible values: **auto**, **ccmp** (recommended), **tkip**
     */
    @JsonProperty("wsec")
    public String wsec;
    public Profile withWsec(String wsec) {
        this.wsec = wsec;
        return this;
    }
    
}
