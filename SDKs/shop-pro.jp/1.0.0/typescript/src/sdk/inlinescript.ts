/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

/**
 * インラインスクリプトを挿入するAPIです。※新規デベロッパーはこのエンドポイントを利用できません
 */
export class InlineScript {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * インラインスクリプトタグの登録
   */
  createInlineScriptTag(
    req: operations.CreateInlineScriptTagRequestBody,
    security: operations.CreateInlineScriptTagSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.CreateInlineScriptTagResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.CreateInlineScriptTagRequestBody(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/v1/inline_script_tags.json";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.CreateInlineScriptTagSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.CreateInlineScriptTagResponse =
        new operations.CreateInlineScriptTagResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 201:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.createInlineScriptTag201ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.CreateInlineScriptTag201ApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * インラインスクリプトタグの削除
   */
  deleteInlineScriptTag(
    req: operations.DeleteInlineScriptTagRequest,
    security: operations.DeleteInlineScriptTagSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DeleteInlineScriptTagResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DeleteInlineScriptTagRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/inline_script_tags/{inlineScriptTagId}.json",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.DeleteInlineScriptTagSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DeleteInlineScriptTagResponse =
        new operations.DeleteInlineScriptTagResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 204:
          break;
      }

      return res;
    });
  }

  /**
   * インラインスクリプトタグの取得
   */
  getInlineScriptTag(
    req: operations.GetInlineScriptTagRequest,
    security: operations.GetInlineScriptTagSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetInlineScriptTagResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetInlineScriptTagRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/inline_script_tags/{inlineScriptTagId}.json",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GetInlineScriptTagSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetInlineScriptTagResponse =
        new operations.GetInlineScriptTagResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getInlineScriptTag200ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.GetInlineScriptTag200ApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * インラインスクリプトタグの取得
   */
  getInlineScriptTags(
    config?: AxiosRequestConfig
  ): Promise<operations.GetInlineScriptTagsResponse> {
    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/v1/inline_script_tags.json";

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetInlineScriptTagsResponse =
        new operations.GetInlineScriptTagsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getInlineScriptTags200ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.GetInlineScriptTags200ApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * インラインスクリプトタグの更新
   */
  updateInlineScriptTag(
    req: operations.UpdateInlineScriptTagRequest,
    security: operations.UpdateInlineScriptTagSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.UpdateInlineScriptTagResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.UpdateInlineScriptTagRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/inline_script_tags/{inlineScriptTagId}.json",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.UpdateInlineScriptTagSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "put",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.UpdateInlineScriptTagResponse =
        new operations.UpdateInlineScriptTagResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.updateInlineScriptTag200ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.UpdateInlineScriptTag200ApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }
}
