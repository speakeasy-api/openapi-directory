/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Webhook - OK - the request has succeeded.
 */
public class Webhook {
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("_links")
    public WebhookLinks links;
    public Webhook withLinks(WebhookLinks links) {
        this.links = links;
        return this;
    }
    
    /**
     * Indicates if expired SSL certificates are accepted. Default value: **false**.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("acceptsExpiredCertificate")
    public Boolean acceptsExpiredCertificate;
    public Webhook withAcceptsExpiredCertificate(Boolean acceptsExpiredCertificate) {
        this.acceptsExpiredCertificate = acceptsExpiredCertificate;
        return this;
    }
    
    /**
     * Indicates if self-signed SSL certificates are accepted. Default value: **false**.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("acceptsSelfSignedCertificate")
    public Boolean acceptsSelfSignedCertificate;
    public Webhook withAcceptsSelfSignedCertificate(Boolean acceptsSelfSignedCertificate) {
        this.acceptsSelfSignedCertificate = acceptsSelfSignedCertificate;
        return this;
    }
    
    /**
     * Indicates if untrusted SSL certificates are accepted. Default value: **false**.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("acceptsUntrustedRootCertificate")
    public Boolean acceptsUntrustedRootCertificate;
    public Webhook withAcceptsUntrustedRootCertificate(Boolean acceptsUntrustedRootCertificate) {
        this.acceptsUntrustedRootCertificate = acceptsUntrustedRootCertificate;
        return this;
    }
    
    /**
     * Reference to the account the webook is set on.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("accountReference")
    public String accountReference;
    public Webhook withAccountReference(String accountReference) {
        this.accountReference = accountReference;
        return this;
    }
    
    /**
     * Indicates if the webhook configuration is active. The field must be **true** for you to receive webhooks about events related an account.
     */
    @JsonProperty("active")
    public Boolean active;
    public Webhook withActive(Boolean active) {
        this.active = active;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("additionalSettings")
    public AdditionalSettingsResponse additionalSettings;
    public Webhook withAdditionalSettings(AdditionalSettingsResponse additionalSettings) {
        this.additionalSettings = additionalSettings;
        return this;
    }
    
    /**
     * The alias of our SSL certificate. When you receive a notification from us, the alias from the HMAC signature will match this alias.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("certificateAlias")
    public String certificateAlias;
    public Webhook withCertificateAlias(String certificateAlias) {
        this.certificateAlias = certificateAlias;
        return this;
    }
    
    /**
     * Format or protocol for receiving webhooks. Possible values:
     * * **soap**
     * * **http**
     * * **json** 
     */
    @JsonProperty("communicationFormat")
    public WebhookCommunicationFormatEnum communicationFormat;
    public Webhook withCommunicationFormat(WebhookCommunicationFormatEnum communicationFormat) {
        this.communicationFormat = communicationFormat;
        return this;
    }
    
    /**
     * Your description for this webhook configuration.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    public String description;
    public Webhook withDescription(String description) {
        this.description = description;
        return this;
    }
    
    /**
     * Shows how merchant accounts are included in company-level webhooks. Possible values:
     * * **includeAccounts**
     * * **excludeAccounts**
     * * **allAccounts**: Includes all merchant accounts, and does not require specifying `filterMerchantAccounts`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("filterMerchantAccountType")
    public WebhookFilterMerchantAccountTypeEnum filterMerchantAccountType;
    public Webhook withFilterMerchantAccountType(WebhookFilterMerchantAccountTypeEnum filterMerchantAccountType) {
        this.filterMerchantAccountType = filterMerchantAccountType;
        return this;
    }
    
    /**
     * A list of merchant account names that are included or excluded from receiving the webhook. Inclusion or exclusion is based on the value defined for `filterMerchantAccountType`.
     * 
     * Required if `filterMerchantAccountType` is either:
     * * **includeAccounts**
     * * **excludeAccounts**
     * 
     * Not needed for `filterMerchantAccountType`: **allAccounts**.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("filterMerchantAccounts")
    public String[] filterMerchantAccounts;
    public Webhook withFilterMerchantAccounts(String[] filterMerchantAccounts) {
        this.filterMerchantAccounts = filterMerchantAccounts;
        return this;
    }
    
    /**
     * Indicates if the webhook configuration has errors that need troubleshooting. If the value is **true**, troubleshoot the configuration using the [testing endpoint](https://docs.adyen.com/api-explorer/#/ManagementService/v1/post/companies/{companyId}/webhooks/{webhookid}/test).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("hasError")
    public Boolean hasError;
    public Webhook withHasError(Boolean hasError) {
        this.hasError = hasError;
        return this;
    }
    
    /**
     * Indicates if the webhook is password protected.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("hasPassword")
    public Boolean hasPassword;
    public Webhook withHasPassword(Boolean hasPassword) {
        this.hasPassword = hasPassword;
        return this;
    }
    
    /**
     * The [checksum](https://en.wikipedia.org/wiki/Key_checksum_value) of the HMAC key generated for this webhook. You can use this value to uniquely identify the HMAC key configured for this webhook.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("hmacKeyCheckValue")
    public String hmacKeyCheckValue;
    public Webhook withHmacKeyCheckValue(String hmacKeyCheckValue) {
        this.hmacKeyCheckValue = hmacKeyCheckValue;
        return this;
    }
    
    /**
     * Unique identifier for this webhook.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    public String id;
    public Webhook withId(String id) {
        this.id = id;
        return this;
    }
    
    /**
     * Network type for Terminal API details webhooks.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("networkType")
    public WebhookNetworkTypeEnum networkType;
    public Webhook withNetworkType(WebhookNetworkTypeEnum networkType) {
        this.networkType = networkType;
        return this;
    }
    
    /**
     * Indicates if the SOAP action header needs to be populated. Default value: **false**.
     * 
     * Only applies if `communicationFormat`: **soap**.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("populateSoapActionHeader")
    public Boolean populateSoapActionHeader;
    public Webhook withPopulateSoapActionHeader(Boolean populateSoapActionHeader) {
        this.populateSoapActionHeader = populateSoapActionHeader;
        return this;
    }
    
    /**
     * SSL version to access the public webhook URL specified in the `url` field. Possible values:
     * * **TLSv1.3**
     * * **TLSv1.2**
     * * **HTTP** - Only allowed on Test environment.
     * 
     * If not specified, the webhook will use `sslVersion`: **TLSv1.2**.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sslVersion")
    public WebhookSslVersionEnum sslVersion;
    public Webhook withSslVersion(WebhookSslVersionEnum sslVersion) {
        this.sslVersion = sslVersion;
        return this;
    }
    
    /**
     * The type of webhook. Possible values are:
     * 
     * - **standard**
     * - **account-settings-notification**
     * - **banktransfer-notification**
     * - **boletobancario-notification**
     * - **directdebit-notification**
     * - **pending-notification**
     * - **ideal-notification**
     * - **ideal-pending-notification**
     * - **report-notification**
     * - **terminal-api-notification**
     * 
     * Find out more about [standard notification webhooks](https://docs.adyen.com/development-resources/webhooks/understand-notifications#event-codes) and [other types of notifications](https://docs.adyen.com/development-resources/webhooks/understand-notifications#other-notifications).
     */
    @JsonProperty("type")
    public String type;
    public Webhook withType(String type) {
        this.type = type;
        return this;
    }
    
    /**
     * Public URL where webhooks will be sent, for example **https://www.domain.com/webhook-endpoint**.
     */
    @JsonProperty("url")
    public String url;
    public Webhook withUrl(String url) {
        this.url = url;
        return this;
    }
    
    /**
     * Username to access the webhook URL.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("username")
    public String username;
    public Webhook withUsername(String username) {
        this.username = username;
        return this;
    }
    
}
