"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations

class Markdown:
    r"""Render GitHub flavored markdown"""
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def markdown_render(self, request: operations.MarkdownRenderRequestBody) -> operations.MarkdownRenderResponse:
        r"""Render a Markdown document
        https://docs.github.com/enterprise-server@3.4/rest/reference/markdown#render-a-markdown-document - API method documentation
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/markdown'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.MarkdownRenderResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'text/html'):
                res.markdown_render_200_text_html_string = http_res.content
        elif http_res.status_code == 304:
            pass

        return res

    def markdown_render_raw(self, request: str) -> operations.MarkdownRenderRawResponse:
        r"""Render a Markdown document in raw mode
        You must send Markdown as plain text (using a `Content-Type` header of `text/plain` or `text/x-markdown`) to this endpoint, rather than using JSON format. In raw mode, [GitHub Flavored Markdown](https://github.github.com/gfm/) is not supported and Markdown will be rendered in plain format like a README.md file. Markdown content must be 400 KB or less.
        https://docs.github.com/enterprise-server@3.4/rest/reference/markdown#render-a-markdown-document-in-raw-mode - API method documentation
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/markdown/raw'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'string')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.MarkdownRenderRawResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'text/html'):
                res.markdown_render_raw_200_text_html_string = http_res.content
        elif http_res.status_code == 304:
            pass

        return res

    