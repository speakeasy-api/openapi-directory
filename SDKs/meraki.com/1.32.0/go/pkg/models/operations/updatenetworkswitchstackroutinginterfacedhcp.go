// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// UpdateNetworkSwitchStackRoutingInterfaceDhcpRequestBodyDhcpLeaseTimeEnum - The DHCP lease time config for the dhcp server running on switch stack interface ('30 minutes', '1 hour', '4 hours', '12 hours', '1 day' or '1 week')
type UpdateNetworkSwitchStackRoutingInterfaceDhcpRequestBodyDhcpLeaseTimeEnum string

const (
	UpdateNetworkSwitchStackRoutingInterfaceDhcpRequestBodyDhcpLeaseTimeEnumOneDay        UpdateNetworkSwitchStackRoutingInterfaceDhcpRequestBodyDhcpLeaseTimeEnum = "1 day"
	UpdateNetworkSwitchStackRoutingInterfaceDhcpRequestBodyDhcpLeaseTimeEnumOneHour       UpdateNetworkSwitchStackRoutingInterfaceDhcpRequestBodyDhcpLeaseTimeEnum = "1 hour"
	UpdateNetworkSwitchStackRoutingInterfaceDhcpRequestBodyDhcpLeaseTimeEnumOneWeek       UpdateNetworkSwitchStackRoutingInterfaceDhcpRequestBodyDhcpLeaseTimeEnum = "1 week"
	UpdateNetworkSwitchStackRoutingInterfaceDhcpRequestBodyDhcpLeaseTimeEnumTwelveHours   UpdateNetworkSwitchStackRoutingInterfaceDhcpRequestBodyDhcpLeaseTimeEnum = "12 hours"
	UpdateNetworkSwitchStackRoutingInterfaceDhcpRequestBodyDhcpLeaseTimeEnumThirtyMinutes UpdateNetworkSwitchStackRoutingInterfaceDhcpRequestBodyDhcpLeaseTimeEnum = "30 minutes"
	UpdateNetworkSwitchStackRoutingInterfaceDhcpRequestBodyDhcpLeaseTimeEnumFourHours     UpdateNetworkSwitchStackRoutingInterfaceDhcpRequestBodyDhcpLeaseTimeEnum = "4 hours"
)

func (e UpdateNetworkSwitchStackRoutingInterfaceDhcpRequestBodyDhcpLeaseTimeEnum) ToPointer() *UpdateNetworkSwitchStackRoutingInterfaceDhcpRequestBodyDhcpLeaseTimeEnum {
	return &e
}

func (e *UpdateNetworkSwitchStackRoutingInterfaceDhcpRequestBodyDhcpLeaseTimeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "1 day":
		fallthrough
	case "1 hour":
		fallthrough
	case "1 week":
		fallthrough
	case "12 hours":
		fallthrough
	case "30 minutes":
		fallthrough
	case "4 hours":
		*e = UpdateNetworkSwitchStackRoutingInterfaceDhcpRequestBodyDhcpLeaseTimeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateNetworkSwitchStackRoutingInterfaceDhcpRequestBodyDhcpLeaseTimeEnum: %v", v)
	}
}

// UpdateNetworkSwitchStackRoutingInterfaceDhcpRequestBodyDhcpModeEnum - The DHCP mode options for the switch stack interface ('dhcpDisabled', 'dhcpRelay' or 'dhcpServer')
type UpdateNetworkSwitchStackRoutingInterfaceDhcpRequestBodyDhcpModeEnum string

const (
	UpdateNetworkSwitchStackRoutingInterfaceDhcpRequestBodyDhcpModeEnumDhcpDisabled UpdateNetworkSwitchStackRoutingInterfaceDhcpRequestBodyDhcpModeEnum = "dhcpDisabled"
	UpdateNetworkSwitchStackRoutingInterfaceDhcpRequestBodyDhcpModeEnumDhcpRelay    UpdateNetworkSwitchStackRoutingInterfaceDhcpRequestBodyDhcpModeEnum = "dhcpRelay"
	UpdateNetworkSwitchStackRoutingInterfaceDhcpRequestBodyDhcpModeEnumDhcpServer   UpdateNetworkSwitchStackRoutingInterfaceDhcpRequestBodyDhcpModeEnum = "dhcpServer"
)

func (e UpdateNetworkSwitchStackRoutingInterfaceDhcpRequestBodyDhcpModeEnum) ToPointer() *UpdateNetworkSwitchStackRoutingInterfaceDhcpRequestBodyDhcpModeEnum {
	return &e
}

func (e *UpdateNetworkSwitchStackRoutingInterfaceDhcpRequestBodyDhcpModeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "dhcpDisabled":
		fallthrough
	case "dhcpRelay":
		fallthrough
	case "dhcpServer":
		*e = UpdateNetworkSwitchStackRoutingInterfaceDhcpRequestBodyDhcpModeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateNetworkSwitchStackRoutingInterfaceDhcpRequestBodyDhcpModeEnum: %v", v)
	}
}

// UpdateNetworkSwitchStackRoutingInterfaceDhcpRequestBodyDhcpOptionsTypeEnum - The type of the DHCP option which should be one of ('text', 'ip', 'integer' or 'hex')
type UpdateNetworkSwitchStackRoutingInterfaceDhcpRequestBodyDhcpOptionsTypeEnum string

const (
	UpdateNetworkSwitchStackRoutingInterfaceDhcpRequestBodyDhcpOptionsTypeEnumHex     UpdateNetworkSwitchStackRoutingInterfaceDhcpRequestBodyDhcpOptionsTypeEnum = "hex"
	UpdateNetworkSwitchStackRoutingInterfaceDhcpRequestBodyDhcpOptionsTypeEnumInteger UpdateNetworkSwitchStackRoutingInterfaceDhcpRequestBodyDhcpOptionsTypeEnum = "integer"
	UpdateNetworkSwitchStackRoutingInterfaceDhcpRequestBodyDhcpOptionsTypeEnumIP      UpdateNetworkSwitchStackRoutingInterfaceDhcpRequestBodyDhcpOptionsTypeEnum = "ip"
	UpdateNetworkSwitchStackRoutingInterfaceDhcpRequestBodyDhcpOptionsTypeEnumText    UpdateNetworkSwitchStackRoutingInterfaceDhcpRequestBodyDhcpOptionsTypeEnum = "text"
)

func (e UpdateNetworkSwitchStackRoutingInterfaceDhcpRequestBodyDhcpOptionsTypeEnum) ToPointer() *UpdateNetworkSwitchStackRoutingInterfaceDhcpRequestBodyDhcpOptionsTypeEnum {
	return &e
}

func (e *UpdateNetworkSwitchStackRoutingInterfaceDhcpRequestBodyDhcpOptionsTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "hex":
		fallthrough
	case "integer":
		fallthrough
	case "ip":
		fallthrough
	case "text":
		*e = UpdateNetworkSwitchStackRoutingInterfaceDhcpRequestBodyDhcpOptionsTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateNetworkSwitchStackRoutingInterfaceDhcpRequestBodyDhcpOptionsTypeEnum: %v", v)
	}
}

type UpdateNetworkSwitchStackRoutingInterfaceDhcpRequestBodyDhcpOptions struct {
	// The code for DHCP option which should be from 2 to 254
	Code string `json:"code"`
	// The type of the DHCP option which should be one of ('text', 'ip', 'integer' or 'hex')
	Type UpdateNetworkSwitchStackRoutingInterfaceDhcpRequestBodyDhcpOptionsTypeEnum `json:"type"`
	// The value of the DHCP option
	Value string `json:"value"`
}

// UpdateNetworkSwitchStackRoutingInterfaceDhcpRequestBodyDNSNameserversOptionEnum - The DHCP name server option for the dhcp server running on the switch stack interface ('googlePublicDns', 'openDns' or 'custom')
type UpdateNetworkSwitchStackRoutingInterfaceDhcpRequestBodyDNSNameserversOptionEnum string

const (
	UpdateNetworkSwitchStackRoutingInterfaceDhcpRequestBodyDNSNameserversOptionEnumCustom          UpdateNetworkSwitchStackRoutingInterfaceDhcpRequestBodyDNSNameserversOptionEnum = "custom"
	UpdateNetworkSwitchStackRoutingInterfaceDhcpRequestBodyDNSNameserversOptionEnumGooglePublicDNS UpdateNetworkSwitchStackRoutingInterfaceDhcpRequestBodyDNSNameserversOptionEnum = "googlePublicDns"
	UpdateNetworkSwitchStackRoutingInterfaceDhcpRequestBodyDNSNameserversOptionEnumOpenDNS         UpdateNetworkSwitchStackRoutingInterfaceDhcpRequestBodyDNSNameserversOptionEnum = "openDns"
)

func (e UpdateNetworkSwitchStackRoutingInterfaceDhcpRequestBodyDNSNameserversOptionEnum) ToPointer() *UpdateNetworkSwitchStackRoutingInterfaceDhcpRequestBodyDNSNameserversOptionEnum {
	return &e
}

func (e *UpdateNetworkSwitchStackRoutingInterfaceDhcpRequestBodyDNSNameserversOptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "custom":
		fallthrough
	case "googlePublicDns":
		fallthrough
	case "openDns":
		*e = UpdateNetworkSwitchStackRoutingInterfaceDhcpRequestBodyDNSNameserversOptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateNetworkSwitchStackRoutingInterfaceDhcpRequestBodyDNSNameserversOptionEnum: %v", v)
	}
}

type UpdateNetworkSwitchStackRoutingInterfaceDhcpRequestBodyFixedIPAssignments struct {
	// The IP address of the client which has fixed IP address assigned to it
	IP string `json:"ip"`
	// The MAC address of the client which has fixed IP address
	Mac string `json:"mac"`
	// The name of the client which has fixed IP address
	Name string `json:"name"`
}

type UpdateNetworkSwitchStackRoutingInterfaceDhcpRequestBodyReservedIPRanges struct {
	// The comment for the reserved IP range
	Comment *string `json:"comment,omitempty"`
	// The ending IP address of the reserved IP range
	End string `json:"end"`
	// The starting IP address of the reserved IP range
	Start string `json:"start"`
}

type UpdateNetworkSwitchStackRoutingInterfaceDhcpRequestBody struct {
	// The PXE boot server file name for the DHCP server running on the switch stack interface
	BootFileName *string `json:"bootFileName,omitempty"`
	// The PXE boot server IP for the DHCP server running on the switch stack interface
	BootNextServer *string `json:"bootNextServer,omitempty"`
	// Enable DHCP boot options to provide PXE boot options configs for the dhcp server running on the switch stack interface
	BootOptionsEnabled *bool `json:"bootOptionsEnabled,omitempty"`
	// The DHCP lease time config for the dhcp server running on switch stack interface ('30 minutes', '1 hour', '4 hours', '12 hours', '1 day' or '1 week')
	DhcpLeaseTime *UpdateNetworkSwitchStackRoutingInterfaceDhcpRequestBodyDhcpLeaseTimeEnum `json:"dhcpLeaseTime,omitempty"`
	// The DHCP mode options for the switch stack interface ('dhcpDisabled', 'dhcpRelay' or 'dhcpServer')
	DhcpMode *UpdateNetworkSwitchStackRoutingInterfaceDhcpRequestBodyDhcpModeEnum `json:"dhcpMode,omitempty"`
	// Array of DHCP options consisting of code, type and value for the DHCP server running on the switch stack interface
	DhcpOptions []UpdateNetworkSwitchStackRoutingInterfaceDhcpRequestBodyDhcpOptions `json:"dhcpOptions,omitempty"`
	// The DHCP relay server IPs to which DHCP packets would get relayed for the switch stack interface
	DhcpRelayServerIps []string `json:"dhcpRelayServerIps,omitempty"`
	// The DHCP name server IPs when DHCP name server option is 'custom'
	DNSCustomNameservers []string `json:"dnsCustomNameservers,omitempty"`
	// The DHCP name server option for the dhcp server running on the switch stack interface ('googlePublicDns', 'openDns' or 'custom')
	DNSNameserversOption *UpdateNetworkSwitchStackRoutingInterfaceDhcpRequestBodyDNSNameserversOptionEnum `json:"dnsNameserversOption,omitempty"`
	// Array of DHCP fixed IP assignments for the DHCP server running on the switch stack interface
	FixedIPAssignments []UpdateNetworkSwitchStackRoutingInterfaceDhcpRequestBodyFixedIPAssignments `json:"fixedIpAssignments,omitempty"`
	// Array of DHCP reserved IP assignments for the DHCP server running on the switch stack interface
	ReservedIPRanges []UpdateNetworkSwitchStackRoutingInterfaceDhcpRequestBodyReservedIPRanges `json:"reservedIpRanges,omitempty"`
}

type UpdateNetworkSwitchStackRoutingInterfaceDhcpRequest struct {
	RequestBody   *UpdateNetworkSwitchStackRoutingInterfaceDhcpRequestBody `request:"mediaType=application/json"`
	InterfaceID   string                                                   `pathParam:"style=simple,explode=false,name=interfaceId"`
	NetworkID     string                                                   `pathParam:"style=simple,explode=false,name=networkId"`
	SwitchStackID string                                                   `pathParam:"style=simple,explode=false,name=switchStackId"`
}

type UpdateNetworkSwitchStackRoutingInterfaceDhcpResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Successful operation
	UpdateNetworkSwitchStackRoutingInterfaceDhcp200ApplicationJSONObject map[string]interface{}
}
