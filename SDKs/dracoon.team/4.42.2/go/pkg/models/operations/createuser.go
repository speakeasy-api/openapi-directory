// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"bytes"
	"encoding/json"
	"errors"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// CreateUserXSdsDateFormatEnum - Date time format (cf. [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) & [leettime.de](http://leettime.de/))
type CreateUserXSdsDateFormatEnum string

const (
	CreateUserXSdsDateFormatEnumUtc    CreateUserXSdsDateFormatEnum = "UTC"
	CreateUserXSdsDateFormatEnumLocal  CreateUserXSdsDateFormatEnum = "LOCAL"
	CreateUserXSdsDateFormatEnumOffset CreateUserXSdsDateFormatEnum = "OFFSET"
	CreateUserXSdsDateFormatEnumEpoch  CreateUserXSdsDateFormatEnum = "EPOCH"
	CreateUserXSdsDateFormatEnumLeet   CreateUserXSdsDateFormatEnum = "LEET"
)

func (e *CreateUserXSdsDateFormatEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "UTC":
		fallthrough
	case "LOCAL":
		fallthrough
	case "OFFSET":
		fallthrough
	case "EPOCH":
		fallthrough
	case "LEET":
		*e = CreateUserXSdsDateFormatEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateUserXSdsDateFormatEnum: %s", s)
	}
}

type CreateUserRequest struct {
	CreateUserRequest shared.CreateUserRequest `request:"mediaType=application/json"`
	// Authentication token
	XSdsAuthToken *string `header:"style=simple,explode=false,name=X-Sds-Auth-Token"`
	// Date time format (cf. [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) & [leettime.de](http://leettime.de/))
	XSdsDateFormat *CreateUserXSdsDateFormatEnum `header:"style=simple,explode=false,name=X-Sds-Date-Format"`
}

type CreateUser400ApplicationJSONType string

const (
	CreateUser400ApplicationJSONTypeErrorResponse                   CreateUser400ApplicationJSONType = "ErrorResponse"
	CreateUser400ApplicationJSONTypePasswordPolicyViolationResponse CreateUser400ApplicationJSONType = "PasswordPolicyViolationResponse"
)

type CreateUser400ApplicationJSON struct {
	ErrorResponse                   *shared.ErrorResponse
	PasswordPolicyViolationResponse *shared.PasswordPolicyViolationResponse

	Type CreateUser400ApplicationJSONType
}

func CreateCreateUser400ApplicationJSONErrorResponse(errorResponse shared.ErrorResponse) CreateUser400ApplicationJSON {
	typ := CreateUser400ApplicationJSONTypeErrorResponse

	return CreateUser400ApplicationJSON{
		ErrorResponse: &errorResponse,
		Type:          typ,
	}
}

func CreateCreateUser400ApplicationJSONPasswordPolicyViolationResponse(passwordPolicyViolationResponse shared.PasswordPolicyViolationResponse) CreateUser400ApplicationJSON {
	typ := CreateUser400ApplicationJSONTypePasswordPolicyViolationResponse

	return CreateUser400ApplicationJSON{
		PasswordPolicyViolationResponse: &passwordPolicyViolationResponse,
		Type:                            typ,
	}
}

func (u *CreateUser400ApplicationJSON) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	errorResponse := new(shared.ErrorResponse)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&errorResponse); err == nil {
		u.ErrorResponse = errorResponse
		u.Type = CreateUser400ApplicationJSONTypeErrorResponse
		return nil
	}

	passwordPolicyViolationResponse := new(shared.PasswordPolicyViolationResponse)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&passwordPolicyViolationResponse); err == nil {
		u.PasswordPolicyViolationResponse = passwordPolicyViolationResponse
		u.Type = CreateUser400ApplicationJSONTypePasswordPolicyViolationResponse
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u CreateUser400ApplicationJSON) MarshalJSON() ([]byte, error) {
	if u.ErrorResponse != nil {
		return json.Marshal(u.ErrorResponse)
	}

	if u.PasswordPolicyViolationResponse != nil {
		return json.Marshal(u.PasswordPolicyViolationResponse)
	}

	return nil, nil
}

type CreateUserResponse struct {
	ContentType string
	// Unauthorized
	ErrorResponse *shared.ErrorResponse
	StatusCode    int
	RawResponse   *http.Response
	// Created
	UserData *shared.UserData
	// Bad Request
	CreateUser400ApplicationJSONOneOf *CreateUser400ApplicationJSON
}
