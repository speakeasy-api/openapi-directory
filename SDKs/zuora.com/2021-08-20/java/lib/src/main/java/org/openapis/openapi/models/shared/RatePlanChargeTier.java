/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

public class RatePlanChargeTier {
    /**
     * The ID of the Zuora user who created the RatePlanChargeTier object.
     * 
     * **Character limit**: 32
     * 
     * 
     * **Values**: automatically generated 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("CreatedById")
    public String createdById;
    public RatePlanChargeTier withCreatedById(String createdById) {
        this.createdById = createdById;
        return this;
    }
    
    /**
     *  The date when the RatePlanChargeTier object was created.
     * 
     * 
     * **Character limit**: 29
     * 
     * 
     * **Values**: automatically generated 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("CreatedDate")
    public OffsetDateTime createdDate;
    public RatePlanChargeTier withCreatedDate(OffsetDateTime createdDate) {
        this.createdDate = createdDate;
        return this;
    }
    
    /**
     *  The end number of a range of units for the tier. This field is only required if the charge mode is `Tiered Pricing` or `Tierred with Overage Pricing`.
     * 
     * 
     * **Character limit**: 16
     * 
     * 
     * **Values**: any positive decimal value 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("EndingUnit")
    public Double endingUnit;
    public RatePlanChargeTier withEndingUnit(Double endingUnit) {
        this.endingUnit = endingUnit;
        return this;
    }
    
    /**
     *  Indicates if the price is an overage price. An overage occurs when usage surpasses the last defined tier. This field is applicable only to tier pricing and volume pricing models.
     * 
     * 
     * 
     * **Values**: true, false 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("IsOveragePrice")
    public Boolean isOveragePrice;
    public RatePlanChargeTier withIsOveragePrice(Boolean isOveragePrice) {
        this.isOveragePrice = isOveragePrice;
        return this;
    }
    
    /**
     *  The price of the tier if the charge is a flat fee, or the price of each unit in the tier if the change model is tiered pricing.
     * 
     * 
     * **Character limit**: 16
     * 
     * 
     * **Values**: any positive decimal value 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Price")
    public Double price;
    public RatePlanChargeTier withPrice(Double price) {
        this.price = price;
        return this;
    }
    
    /**
     *  Indicates if the price is a flat fee or is per unit.
     * 
     * 
     * **Character limit**: 8
     * 
     * 
     * **Values**: `FlatFee`, `PerUnit` 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("PriceFormat")
    public RatePlanChargeTierPriceFormatEnum priceFormat;
    public RatePlanChargeTier withPriceFormat(RatePlanChargeTierPriceFormatEnum priceFormat) {
        this.priceFormat = priceFormat;
        return this;
    }
    
    /**
     *  The ID of the subscription or amendment rate plan charge associated with this tier. You can't create an unassociated tier.
     * 
     * 
     * **Character limit**: 32
     * 
     * 
     * **Values**: inherited from `RatePlanCharge`.`Id` 
     */
    @JsonProperty("RatePlanChargeId")
    public String ratePlanChargeId;
    public RatePlanChargeTier withRatePlanChargeId(String ratePlanChargeId) {
        this.ratePlanChargeId = ratePlanChargeId;
        return this;
    }
    
    /**
     *  The start number of a range of units for the tier. This field is only required if the charge mode is `Tiered Pricing` or `Tierred with Overage Pricing`.
     * 
     * 
     * **Character limit**: 16
     * 
     * 
     * **Values**: any positive decimal value 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("StartingUnit")
    public Double startingUnit;
    public RatePlanChargeTier withStartingUnit(Double startingUnit) {
        this.startingUnit = startingUnit;
        return this;
    }
    
    /**
     *  A unique number that identifies the tier that the price applies to.
     * 
     * 
     * **Character limit**: 20
     * 
     * 
     * **Values**: automatically generated 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Tier")
    public Integer tier;
    public RatePlanChargeTier withTier(Integer tier) {
        this.tier = tier;
        return this;
    }
    
    /**
     * The ID of the last user to update the object.
     * 
     * **Character limit**: 32
     * 
     * 
     * **Values**: automatically generated 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("UpdatedById")
    public String updatedById;
    public RatePlanChargeTier withUpdatedById(String updatedById) {
        this.updatedById = updatedById;
        return this;
    }
    
    /**
     *  The date when the object was last updated.
     * 
     * 
     * **Character limit**: 29
     * 
     * 
     * **Values**: automatically generated 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("UpdatedDate")
    public OffsetDateTime updatedDate;
    public RatePlanChargeTier withUpdatedDate(OffsetDateTime updatedDate) {
        this.updatedDate = updatedDate;
        return this;
    }
    
}
