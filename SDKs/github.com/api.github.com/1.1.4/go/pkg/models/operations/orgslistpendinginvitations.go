// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type OrgsListPendingInvitationsPathParams struct {
	// The organization name. The name is not case sensitive.
	Org string `pathParam:"style=simple,explode=false,name=org"`
}

// OrgsListPendingInvitationsInvitationSourceEnum - Filter invitations by their invitation source.
type OrgsListPendingInvitationsInvitationSourceEnum string

const (
	OrgsListPendingInvitationsInvitationSourceEnumAll    OrgsListPendingInvitationsInvitationSourceEnum = "all"
	OrgsListPendingInvitationsInvitationSourceEnumMember OrgsListPendingInvitationsInvitationSourceEnum = "member"
	OrgsListPendingInvitationsInvitationSourceEnumScim   OrgsListPendingInvitationsInvitationSourceEnum = "scim"
)

func (e *OrgsListPendingInvitationsInvitationSourceEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "all":
		fallthrough
	case "member":
		fallthrough
	case "scim":
		*e = OrgsListPendingInvitationsInvitationSourceEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for OrgsListPendingInvitationsInvitationSourceEnum: %s", s)
	}
}

// OrgsListPendingInvitationsRoleEnum - Filter invitations by their member role.
type OrgsListPendingInvitationsRoleEnum string

const (
	OrgsListPendingInvitationsRoleEnumAll            OrgsListPendingInvitationsRoleEnum = "all"
	OrgsListPendingInvitationsRoleEnumAdmin          OrgsListPendingInvitationsRoleEnum = "admin"
	OrgsListPendingInvitationsRoleEnumDirectMember   OrgsListPendingInvitationsRoleEnum = "direct_member"
	OrgsListPendingInvitationsRoleEnumBillingManager OrgsListPendingInvitationsRoleEnum = "billing_manager"
	OrgsListPendingInvitationsRoleEnumHiringManager  OrgsListPendingInvitationsRoleEnum = "hiring_manager"
)

func (e *OrgsListPendingInvitationsRoleEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "all":
		fallthrough
	case "admin":
		fallthrough
	case "direct_member":
		fallthrough
	case "billing_manager":
		fallthrough
	case "hiring_manager":
		*e = OrgsListPendingInvitationsRoleEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for OrgsListPendingInvitationsRoleEnum: %s", s)
	}
}

type OrgsListPendingInvitationsQueryParams struct {
	// Filter invitations by their invitation source.
	InvitationSource *OrgsListPendingInvitationsInvitationSourceEnum `queryParam:"style=form,explode=true,name=invitation_source"`
	// Page number of the results to fetch.
	Page *int64 `queryParam:"style=form,explode=true,name=page"`
	// The number of results per page (max 100).
	PerPage *int64 `queryParam:"style=form,explode=true,name=per_page"`
	// Filter invitations by their member role.
	Role *OrgsListPendingInvitationsRoleEnum `queryParam:"style=form,explode=true,name=role"`
}

type OrgsListPendingInvitationsRequest struct {
	PathParams  OrgsListPendingInvitationsPathParams
	QueryParams OrgsListPendingInvitationsQueryParams
}

type OrgsListPendingInvitationsResponse struct {
	ContentType string
	Headers     map[string][]string
	StatusCode  int
	RawResponse *http.Response
	// Resource not found
	BasicError *shared.BasicError
	// Response
	OrganizationInvitations []shared.OrganizationInvitation
}
