"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from .action import Action
from .bundle import Bundle
from .calendar_event import CalendarEvent
from .calendar_event_response import CalendarEventResponse
from .coach import Coach
from .email_history import EmailHistory
from .group import Group
from .health_profile import HealthProfile
from .health_profile_answer import HealthProfileAnswer
from .health_profile_question import HealthProfileQuestion
from .health_question_definition import HealthQuestionDefinition
from .metric import Metric
from .oauth import Oauth
from .organization import Organization
from .patient import Patient
from .plan import Plan
from .result import Result
from .reward import Reward
from .reward_earning import RewardEarning
from .reward_earning_fulfillment import RewardEarningFulfillment
from .reward_program import RewardProgram
from .reward_program_activation import RewardProgramActivation

SERVERS = [
    "https://api.twinehealth.com/pub",
]
"""Contains the list of servers available to the SDK"""

class SDK:
    r"""# Overview
    The Fitbit Plus API is a RESTful API. The requests and responses are formated according to the
    [JSON API](http://jsonapi.org/format/1.0/) specification.
    
    In addition to this documentation, we also provide an
    [OpenAPI](https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md) \"yaml\" file describing the API:
    [Fitbit Plus API Specification](swagger.yaml).
    
    # Authentication
    Authentication for the Fitbit Plus API is based on the
    [OAuth 2.0 Authorization Framework](https://tools.ietf.org/html/rfc6749). Fitbit Plus currently supports grant
    types of **client_credentials** and **refresh_token**.
    
    See [POST /oauth/token](#operation/createToken) for details on the request and response formats.
    <!-- ReDoc-Inject: <security-definitions> -->
    
    ## Building Integrations
    We will provide customers with unique client credentials for each application/integration they build, allowing us
    to enforce appropriate access controls and monitor API usage.
    The client credentials will be scoped to the organization, and allow full access to all patients and related data
    within that organization.
    
    These credentials are appropriate for creating an integration that does one of the following:
     - background reporting/analysis
     - synchronizing data with another system (such as an EMR)
    
    The API credentials and oauth flows we currently support are **not** well suited for creating a user-facing
    application that allows a user (patient, coach, or admin) to login and have access to data which is appropriate to
    that specific user. It is possible to build such an application, but it is not possible to use Fitbit Plus as a
    federated identity provider. You would need to have a separate means of verifying a user's identity. We do not
    currently support the required password-based oauth flow to make this possible.
    
    # Paging
    The Fitbit Plus API supports two different pagination strategies for GET collection endpoints.
    
    #### Skip-based paging
    
    Skip-based paging uses the query parameters `page[size]` and `page[number]` to specify the max number of resources returned and the page number. We default to skip-based paging if there are no page parameters. The response will include a `links` object containing links to the first, last, prev, and next pages of data.
    
    If the contents of the collection change while you are iterating through the collection, you will see duplicate or missing documents. For example, if you are iterating through the `calender_event` resource via `GET /pub/calendar_event?sort=start_at&page[size]=50&page[number]=1`, and a new `calendar_event` is created that has a `start_at` value before the first `calendar_event`, when you fetch the next page at `GET /pub/calendar_event?sort=start_at&page[size]=50&page[number]=2`, the first entry in the second response will be a duplicate of the last entry in the first response.
    
    #### Cursor-based paging
    Cursor-based paging uses the query parameters `page[limit]` and `page[after]` to specify the max number of entries returned and identify where to begin the next page. Add `page[limit]` to the parameters to use cursor-based paging. The response will include a `links` object containing a link to the next page of data, if the next page exists.
    
    Cursor-based paging is not subject to duplication if new resources are added to the collection. For example, if you are iterating through the `calender_event` resource via `GET /pub/calendar_event?sort=start_at&page[limit]=50`, and a new `calendar_event` is created that has a `start_at` value before the first `calendar_event`, you will not see a duplicate entry when you fetch the next page at `GET /pub/calendar_event?sort=start_at&page[limit]=50&page[after]=<cursor>`.
    
    We encourage the use of cursor-based paging for performance reasons.
    
    In either form of paging, you can determine whether any resources were missed by comparing the number of fetched resources against `meta.count`. Set `page[size]` or `page[limit]` to 0 to get only the count.
    
    It is not valid to mix the two strategies.
    """
    action: Action
    r"""An action is an actionable item in a patient's plan."""
    bundle: Bundle
    r"""A bundle is a collection of actions (an action plan) in a patient's plan summary."""
    calendar_event: CalendarEvent
    r"""A calendar event represents an event involving or relevant to a patient which will or has occurred on a specific date or during a specific period of time."""
    calendar_event_response: CalendarEventResponse
    r"""A calendar event response indicates the attendee's response to a calendar event.  Only `POST` for creation is allowed as the responses are updated into the corresponding calendar events."""
    coach: Coach
    r"""A coach is a person that supports a patient"""
    email_history: EmailHistory
    r"""Email history represents a single email that was sent using Fitbit Plus."""
    group: Group
    r"""A group is a cohort of patients within an organization. The creation of groups allows for the segmentation of dashboards and analytics. For example, a group might correspond to the patients in a particular practice or the employees of a particular employer."""
    health_profile: HealthProfile
    r"""A health profile contains a set of health questions and answers for a patient."""
    health_profile_answer: HealthProfileAnswer
    r"""A health profile answer is the answer to a question for a patient."""
    health_profile_question: HealthProfileQuestion
    r"""A health profile question contains a health question and the corresponding answer for a patient."""
    health_question_definition: HealthQuestionDefinition
    r"""A health question definition specifies a health question and the corresponding answer choices."""
    metric: Metric
    r"""A metric is a quantitative result for a patient. For example, vital signs, lab results, etc. are all metrics."""
    oauth: Oauth
    r"""Authentication operations"""
    organization: Organization
    r"""An organization is a Fitbit Plus customer. No data is accessible across organizations."""
    patient: Patient
    r"""A patient is the core user of Fitbit Plus."""
    plan: Plan
    r"""A plan is the set of actions and associated goals for a patient."""
    result: Result
    r"""A patient health result is a quantitative result for a patient."""
    reward: Reward
    r"""A reward allocates a portion of the budget from the reward program activation for achieving a particular goal and sets a target date."""
    reward_earning: RewardEarning
    r"""A reward earning specifies the portion of a reward that was earned and at what date."""
    reward_earning_fulfillment: RewardEarningFulfillment
    r"""A reward earning fulfillment specifies the portion of a reward earning that was fulfilled and at what date."""
    reward_program: RewardProgram
    r"""A reward program provides the details for a rewards program for a group. Different rewards programs can be created for different periods of time specified by the start_at and end_at dates. A reward program can activated for a patient any time between these dates. An activated reward program for a patient is called a reward program activation."""
    reward_program_activation: RewardProgramActivation
    r"""A reward program activation is the activation of a reward program for a specific patient."""

    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str = SERVERS[0]
    _language: str = "python"
    _sdk_version: str = "0.0.1"
    _gen_version: str = "internal"

    def __init__(self,
                 server_url: str = None,
                 url_params: dict[str, str] = None,
                 client: requests_http.Session = None
                 ) -> None:
        """Instantiates the SDK configuring it with the provided parameters.
        
        :param server_url: The server URL to use for all operations
        :type server_url: str
        :param url_params: Parameters to optionally template the server URL with
        :type url_params: dict[str, str]
        :param client: The requests.Session HTTP client to use for all operations
        :type client: requests_http.Session        
        """
        self._client = requests_http.Session()
        
        
        if server_url is not None:
            if url_params is not None:
                self._server_url = utils.template_url(server_url, url_params)
            else:
                self._server_url = server_url

        if client is not None:
            self._client = client
        
        self._security_client = self._client
        

        self._init_sdks()
    
    def _init_sdks(self):
        self.action = Action(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.bundle = Bundle(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.calendar_event = CalendarEvent(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.calendar_event_response = CalendarEventResponse(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.coach = Coach(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.email_history = EmailHistory(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.group = Group(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.health_profile = HealthProfile(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.health_profile_answer = HealthProfileAnswer(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.health_profile_question = HealthProfileQuestion(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.health_question_definition = HealthQuestionDefinition(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.metric = Metric(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.oauth = Oauth(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.organization = Organization(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.patient = Patient(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.plan = Plan(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.result = Result(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.reward = Reward(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.reward_earning = RewardEarning(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.reward_earning_fulfillment = RewardEarningFulfillment(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.reward_program = RewardProgram(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.reward_program_activation = RewardProgramActivation(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
    