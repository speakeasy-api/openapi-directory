import requests
from typing import Any,Optional
from sdk.models import operations
from . import utils

class Events:
    _client: requests.Session
    _security_client: requests.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests.Session, security_client: requests.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version

    
    def get_events_v3(self, request: operations.GetEventsV3Request) -> operations.GetEventsV3Response:
        r"""Gets event history
        Returns all events for all devices and shipments within a specific time range. The results
        are listed in descending order based on the timestamp. Each event can be identified uniquely
        by trackingId-ruleId-timestamp key.
        
        A time range can be defined with before and after timestamps. A successful response contains
        an array of events that were recorded after the first timestamp and before the second.
        
        If the request is supplied with `eventSource` query parameter, the response will contain
        events generated by the defined source.
        
        If the request is supplied with `eventType` query parameter, the response will contain
        events of the specified type.
        
        If the request is supplied with `ruleId` query parameter, the response will contain events
        for the specified ruleId.
        
        If the request is supplied with `initialState` query parameter, the response will contain
        events of the specified initial state. Events for which the initialState property is `true`,
        represent the state where the device is initially whereas events for which the initialState
        property is `false`, represent a transition from a state to another.
        
        The aforementioned query parameters can be combined to get the specific event types for a
        specific event source for a specific time frame.
        
        The `count` and `pageToken` parameters provide pagination for the results where the device
        has large amount of events. Query parameter `count` is the number of records returned
        per page. If all the matching records could not fit the page, a `pageToken` is returned in
        the response body. To get the next page of matching records, supply the request with
        `pageToken` query parameter.
        
        """
        
        base_url = self._server_url
        
        url = base_url.removesuffix("/") + "/events/v3"
        
        headers = utils.get_headers(request.headers)
        query_params = utils.get_query_params(request.query_params)
        
        client = utils.configure_security_client(self._client, request.security)
        
        r = client.request("GET", url, params=query_params, headers=headers)
        content_type = r.headers.get("Content-Type")

        res = operations.GetEventsV3Response(status_code=r.status_code, content_type=content_type)
        
        if r.status_code == 200:
            if utils.match_content_type(content_type, "application/json"):
                out = utils.unmarshal_json(r.text, Optional[operations.GetEventsV3200ApplicationJSON])
                res.get_events_v3_200_application_json_object = out
        elif r.status_code == 400:
            if utils.match_content_type(content_type, "application/json"):
                out = utils.unmarshal_json(r.text, Optional[operations.GetEventsV3400ApplicationJSON])
                res.get_events_v3_400_application_json_object = out
        elif r.status_code == 401:
            if utils.match_content_type(content_type, "application/json"):
                out = utils.unmarshal_json(r.text, Optional[operations.GetEventsV3401ApplicationJSON])
                res.get_events_v3_401_application_json_object = out
        elif r.status_code == 403:
            if utils.match_content_type(content_type, "application/json"):
                out = utils.unmarshal_json(r.text, Optional[operations.GetEventsV3403ApplicationJSON])
                res.get_events_v3_403_application_json_object = out
        elif r.status_code == 404:
            if utils.match_content_type(content_type, "application/json"):
                out = utils.unmarshal_json(r.text, Optional[operations.GetEventsV3404ApplicationJSON])
                res.get_events_v3_404_application_json_object = out

        return res

    
    def get_events_v3_health(self) -> operations.GetEventsV3HealthResponse:
        r"""Gets service health
        """
        
        base_url = self._server_url
        
        url = base_url.removesuffix("/") + "/events/v3/health"
        
        
        client = self._client
        
        r = client.request("GET", url)
        content_type = r.headers.get("Content-Type")

        res = operations.GetEventsV3HealthResponse(status_code=r.status_code, content_type=content_type)
        
        if r.status_code == 200:
            if utils.match_content_type(content_type, "application/json"):
                out = utils.unmarshal_json(r.text, Optional[operations.GetEventsV3Health200ApplicationJSON])
                res.get_events_v3_health_200_application_json_object = out
        elif r.status_code == 500:
            pass

        return res

    
    def get_events_v3_version(self) -> operations.GetEventsV3VersionResponse:
        r"""Gets service version
        """
        
        base_url = self._server_url
        
        url = base_url.removesuffix("/") + "/events/v3/version"
        
        
        client = self._client
        
        r = client.request("GET", url)
        content_type = r.headers.get("Content-Type")

        res = operations.GetEventsV3VersionResponse(status_code=r.status_code, content_type=content_type)
        
        if r.status_code == 200:
            if utils.match_content_type(content_type, "application/json"):
                out = utils.unmarshal_json(r.text, Optional[Any])
                res.get_events_v3_version_200_application_json_any = out
        elif r.status_code == 500:
            pass

        return res

    
    def get_events_v3_tracking_id_(self, request: operations.GetEventsV3TrackingIDRequest) -> operations.GetEventsV3TrackingIDResponse:
        r"""Gets event history for a device or a shipment
        Returns all events for a device or a shipment within a specific time range. The results are
        listed in descending order based on the timestamp. Each event can be identified uniquely by
        trackingId-ruleId-timestamp key. A single event can be fetched using ruleId, before and
        after query parameters.
        
        A time range can be defined with before and after timestamps. A successful response contains
        an array of events that were recorded after the first timestamp and before the second.
        
        If the request is supplied with `eventSource` query parameter, the response will contain
        events generated by the defined source.
        
        If the request is supplied with `eventType` query parameter, the response will contain
        events of the specified type.
        
        If the request is supplied with `ruleId` query parameter, the response will contain events
        for the specified ruleId.
        
        If the request is supplied with `initialState` query parameter, the response will contain
        events of the specified initial state. Events for which the initialState property is `true`,
        represent the state where the device is initially whereas events for which the initialState
        property is `false`, represent a transition from a state to another.
        
        The aforementioned query parameters can be combined to get the specific event types for a
        specific event source for a specific time frame.
        
        The `count` and `pageToken` parameters provide pagination for the results where the device
        has large amount of events. Query parameter `count` is the number of records returned
        per page. If all the matching records could not fit the page, a `pageToken` is returned in
        the response body. To get the next page of matching records, supply the request with
        `pageToken` query parameter.
        
        """
        
        base_url = self._server_url
        
        url = utils.generate_url(base_url, "/events/v3/{trackingId}", request.path_params)
        
        headers = utils.get_headers(request.headers)
        query_params = utils.get_query_params(request.query_params)
        
        client = utils.configure_security_client(self._client, request.security)
        
        r = client.request("GET", url, params=query_params, headers=headers)
        content_type = r.headers.get("Content-Type")

        res = operations.GetEventsV3TrackingIDResponse(status_code=r.status_code, content_type=content_type)
        
        if r.status_code == 200:
            if utils.match_content_type(content_type, "application/json"):
                out = utils.unmarshal_json(r.text, Optional[operations.GetEventsV3TrackingID200ApplicationJSON])
                res.get_events_v3_tracking_id_200_application_json_object = out
        elif r.status_code == 400:
            if utils.match_content_type(content_type, "application/json"):
                out = utils.unmarshal_json(r.text, Optional[operations.GetEventsV3TrackingID400ApplicationJSON])
                res.get_events_v3_tracking_id_400_application_json_object = out
        elif r.status_code == 401:
            if utils.match_content_type(content_type, "application/json"):
                out = utils.unmarshal_json(r.text, Optional[operations.GetEventsV3TrackingID401ApplicationJSON])
                res.get_events_v3_tracking_id_401_application_json_object = out
        elif r.status_code == 403:
            if utils.match_content_type(content_type, "application/json"):
                out = utils.unmarshal_json(r.text, Optional[operations.GetEventsV3TrackingID403ApplicationJSON])
                res.get_events_v3_tracking_id_403_application_json_object = out
        elif r.status_code == 404:
            if utils.match_content_type(content_type, "application/json"):
                out = utils.unmarshal_json(r.text, Optional[operations.GetEventsV3TrackingID404ApplicationJSON])
                res.get_events_v3_tracking_id_404_application_json_object = out

        return res

    