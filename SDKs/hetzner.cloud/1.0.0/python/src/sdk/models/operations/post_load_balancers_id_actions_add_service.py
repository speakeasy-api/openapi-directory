"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PostLoadBalancersIDActionsAddServiceLoadBalancerServiceLoadBalancerServiceHealthCheckHTTP:
    r"""Additional configuration for protocol http"""
    
    domain: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('domain') }})
    r"""Host header to send in the HTTP request. May not contain spaces, percent or backslash symbols. Can be null, in that case no host header is sent."""  
    path: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('path') }})
    r"""HTTP path to use for health checks. May not contain literal spaces, use percent-encoding instead."""  
    response: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('response'), 'exclude': lambda f: f is None }})
    r"""String that must be contained in HTTP response in order to pass the health check"""  
    status_codes: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status_codes'), 'exclude': lambda f: f is None }})
    r"""List of returned HTTP status codes in order to pass the health check. Supports the wildcards `?` for exactly one character and `*` for multiple ones. The default is to pass the health check for any status code between 2?? and 3??."""  
    tls: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tls'), 'exclude': lambda f: f is None }})
    r"""Use HTTPS for health check"""  
    
class PostLoadBalancersIDActionsAddServiceLoadBalancerServiceLoadBalancerServiceHealthCheckProtocolEnum(str, Enum):
    r"""Type of the health check"""
    TCP = 'tcp'
    HTTP = 'http'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PostLoadBalancersIDActionsAddServiceLoadBalancerServiceLoadBalancerServiceHealthCheck:
    r"""Service health check"""
    
    interval: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('interval') }})
    r"""Time interval in seconds health checks are performed"""  
    port: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('port') }})
    r"""Port the health check will be performed on"""  
    protocol: PostLoadBalancersIDActionsAddServiceLoadBalancerServiceLoadBalancerServiceHealthCheckProtocolEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('protocol') }})
    r"""Type of the health check"""  
    retries: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('retries') }})
    r"""Unsuccessful retries needed until a target is considered unhealthy; an unhealthy target needs the same number of successful retries to become healthy again"""  
    timeout: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('timeout') }})
    r"""Time in seconds after an attempt is considered a timeout"""  
    http: Optional[PostLoadBalancersIDActionsAddServiceLoadBalancerServiceLoadBalancerServiceHealthCheckHTTP] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('http'), 'exclude': lambda f: f is None }})
    r"""Additional configuration for protocol http"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PostLoadBalancersIDActionsAddServiceLoadBalancerServiceLoadBalancerServiceHTTP:
    r"""Configuration option for protocols http and https"""
    
    certificates: Optional[list[int]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('certificates'), 'exclude': lambda f: f is None }})
    r"""IDs of the Certificates to use for TLS/SSL termination by the Load Balancer; empty for TLS/SSL passthrough or if `protocol` is \\"http\\" """  
    cookie_lifetime: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cookie_lifetime'), 'exclude': lambda f: f is None }})
    r"""Lifetime of the cookie used for sticky sessions"""  
    cookie_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cookie_name'), 'exclude': lambda f: f is None }})
    r"""Name of the cookie used for sticky sessions"""  
    redirect_http: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('redirect_http'), 'exclude': lambda f: f is None }})
    r"""Redirect HTTP requests to HTTPS. Only available if protocol is \\"https\\". Default `false`"""  
    sticky_sessions: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sticky_sessions'), 'exclude': lambda f: f is None }})
    r"""Use sticky sessions. Only available if protocol is \\"http\\" or \\"https\\". Default `false`"""  
    
class PostLoadBalancersIDActionsAddServiceLoadBalancerServiceProtocolEnum(str, Enum):
    r"""Protocol of the Load Balancer"""
    TCP = 'tcp'
    HTTP = 'http'
    HTTPS = 'https'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PostLoadBalancersIDActionsAddServiceLoadBalancerService:
    
    destination_port: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('destination_port') }})
    r"""Port the Load Balancer will balance to"""  
    health_check: PostLoadBalancersIDActionsAddServiceLoadBalancerServiceLoadBalancerServiceHealthCheck = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('health_check') }})
    r"""Service health check"""  
    listen_port: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('listen_port') }})
    r"""Port the Load Balancer listens on"""  
    protocol: PostLoadBalancersIDActionsAddServiceLoadBalancerServiceProtocolEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('protocol') }})
    r"""Protocol of the Load Balancer"""  
    proxyprotocol: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('proxyprotocol') }})
    r"""Is Proxyprotocol enabled or not"""  
    http: Optional[PostLoadBalancersIDActionsAddServiceLoadBalancerServiceLoadBalancerServiceHTTP] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('http'), 'exclude': lambda f: f is None }})
    r"""Configuration option for protocols http and https"""  
    

@dataclasses.dataclass
class PostLoadBalancersIDActionsAddServiceRequest:
    
    id: int = dataclasses.field(metadata={'path_param': { 'field_name': 'id', 'style': 'simple', 'explode': False }})
    r"""ID of the Load Balancer"""  
    request_body: Optional[PostLoadBalancersIDActionsAddServiceLoadBalancerService] = dataclasses.field(default=None, metadata={'request': { 'media_type': 'application/json' }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PostLoadBalancersIDActionsAddServiceActionResponseActionError:
    r"""Error message for the Action if error occurred, otherwise null"""
    
    code: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('code') }})
    r"""Fixed machine readable code"""  
    message: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('message') }})
    r"""Humanized error message"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PostLoadBalancersIDActionsAddServiceActionResponseActionResources:
    
    id: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id') }})
    r"""ID of the Resource"""  
    type: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type') }})
    r"""Type of resource referenced"""  
    
class PostLoadBalancersIDActionsAddServiceActionResponseActionStatusEnum(str, Enum):
    r"""Status of the Action"""
    SUCCESS = 'success'
    RUNNING = 'running'
    ERROR = 'error'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PostLoadBalancersIDActionsAddServiceActionResponseAction:
    
    command: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('command') }})
    r"""Command executed in the Action"""  
    error: PostLoadBalancersIDActionsAddServiceActionResponseActionError = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('error') }})
    r"""Error message for the Action if error occurred, otherwise null"""  
    finished: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('finished') }})
    r"""Point in time when the Action was finished (in ISO-8601 format). Only set if the Action is finished otherwise null."""  
    id: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id') }})
    r"""ID of the Resource"""  
    progress: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('progress') }})
    r"""Progress of Action in percent"""  
    resources: list[PostLoadBalancersIDActionsAddServiceActionResponseActionResources] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('resources') }})
    r"""Resources the Action relates to"""  
    started: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('started') }})
    r"""Point in time when the Action was started (in ISO-8601 format)"""  
    status: PostLoadBalancersIDActionsAddServiceActionResponseActionStatusEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status') }})
    r"""Status of the Action"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PostLoadBalancersIDActionsAddServiceActionResponse:
    r"""The `action` key contains the `add_service` Action"""
    
    action: PostLoadBalancersIDActionsAddServiceActionResponseAction = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('action') }})  
    

@dataclasses.dataclass
class PostLoadBalancersIDActionsAddServiceResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    action_response: Optional[PostLoadBalancersIDActionsAddServiceActionResponse] = dataclasses.field(default=None)
    r"""The `action` key contains the `add_service` Action"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    