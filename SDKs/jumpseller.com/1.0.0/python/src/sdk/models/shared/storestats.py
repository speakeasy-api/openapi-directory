"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import bestsold as shared_bestsold
from ..shared import countryorders as shared_countryorders
from ..shared import dailyvisits as shared_dailyvisits
from ..shared import newvsreturning as shared_newvsreturning
from ..shared import ordersdata as shared_ordersdata
from ..shared import paymentmethodfreq as shared_paymentmethodfreq
from ..shared import referrer as shared_referrer
from ..shared import shippingmethodfreq as shared_shippingmethodfreq
from ..shared import traffictype as shared_traffictype
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Any, Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class StoreStatsConversions:
    
    added_to_cart: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('added_to_cart'), 'exclude': lambda f: f is None }})
    r"""Total add to cart conversions."""  
    checkout: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('checkout'), 'exclude': lambda f: f is None }})
    r"""Total checkout conversions."""  
    paid: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('paid'), 'exclude': lambda f: f is None }})
    r"""Total paid conversions."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class StoreStatsNewVsReturningCustomers:
    
    global_: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('global'), 'exclude': lambda f: f is None }})
    r"""Global percentage of new vs returning customers."""  
    per_day: Optional[list[shared_newvsreturning.NewVsReturning]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('per_day'), 'exclude': lambda f: f is None }})
    r"""Numbers of new and returning customers per day."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class StoreStatsNewVsReturningOrders:
    
    global_: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('global'), 'exclude': lambda f: f is None }})
    r"""Global percentage of new vs returning customers."""  
    per_day: Optional[list[shared_newvsreturning.NewVsReturning]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('per_day'), 'exclude': lambda f: f is None }})
    r"""Numbers of new and returning customers per day."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class StoreStatsOrders:
    
    average: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('average'), 'exclude': lambda f: f is None }})
    r"""Average order amount."""  
    count: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('count'), 'exclude': lambda f: f is None }})
    r"""Total number of orders."""  
    data: Optional[list[shared_ordersdata.OrdersData]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('data'), 'exclude': lambda f: f is None }})
    r"""Orders data."""  
    total: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('total'), 'exclude': lambda f: f is None }})
    r"""Total amount from all orders."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class StoreStatsRegionOrders:
    
    display_mode: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('display_mode'), 'exclude': lambda f: f is None }})
    r"""Can be 'regions' when orders are specific of 1 country or 'auto'."""  
    regions_orders: Optional[list[shared_countryorders.CountryOrders]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('regions_orders'), 'exclude': lambda f: f is None }})
    r"""Orders per country and region(inside the country)."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class StoreStats:
    
    best_sold: Optional[list[shared_bestsold.BestSold]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('best_sold'), 'exclude': lambda f: f is None }})
    r"""Top 10 best sold products."""  
    conversions: Optional[StoreStatsConversions] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('conversions'), 'exclude': lambda f: f is None }})  
    currency: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('currency'), 'exclude': lambda f: f is None }})
    r"""Store currency."""  
    daily_visits: Optional[list[shared_dailyvisits.DailyVisits]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('daily_visits'), 'exclude': lambda f: f is None }})
    r"""Visits per day."""  
    from_: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('from'), 'exclude': lambda f: f is None }})
    r"""Statistics start date."""  
    new_vs_returning_customers: Optional[StoreStatsNewVsReturningCustomers] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('new_vs_returning_customers'), 'exclude': lambda f: f is None }})  
    new_vs_returning_orders: Optional[StoreStatsNewVsReturningOrders] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('new_vs_returning_orders'), 'exclude': lambda f: f is None }})  
    orders: Optional[StoreStatsOrders] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('orders'), 'exclude': lambda f: f is None }})  
    payment_methods: Optional[list[shared_paymentmethodfreq.PaymentMethodFreq]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('payment_methods'), 'exclude': lambda f: f is None }})
    r"""Store payment methods and their frequency."""  
    referrers: Optional[list[shared_referrer.Referrer]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('referrers'), 'exclude': lambda f: f is None }})
    r"""Top 10 referrer sources and their frequency."""  
    region_orders: Optional[StoreStatsRegionOrders] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('region_orders'), 'exclude': lambda f: f is None }})  
    search_frequencies_all: Optional[list[Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('search_frequencies_all'), 'exclude': lambda f: f is None }})
    r"""Number of times each search was conducted under the form of an aggregation query."""  
    search_frequencies_without_results: Optional[list[Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('search_frequencies_without_results'), 'exclude': lambda f: f is None }})
    r"""Number of times each search with zero results was conducted under the form of an aggregation query."""  
    shipping_methods: Optional[list[shared_shippingmethodfreq.ShippingMethodFreq]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('shipping_methods'), 'exclude': lambda f: f is None }})
    r"""Store shipping methods and their frequency."""  
    to: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('to'), 'exclude': lambda f: f is None }})
    r"""Statistics end date."""  
    traffic_type: Optional[list[shared_traffictype.TrafficType]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('traffic_type'), 'exclude': lambda f: f is None }})
    r"""Type of store traffic and its frequency."""  
    visits: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('visits'), 'exclude': lambda f: f is None }})
    r"""Total number of visits."""  
    