// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"openapi/pkg/types"
	"time"
)

// AchTransferTransferApproval - If your account requires approvals for transfers and the transfer was approved, this will contain details of the approval.
type AchTransferTransferApproval struct {
	// The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the transfer was approved.
	ApprovedAt time.Time `json:"approved_at"`
	// If the Transfer was approved by a user in the dashboard, the email address of that user.
	ApprovedBy string `json:"approved_by"`
}

// AchTransferTransferCancellation - If your account requires approvals for transfers and the transfer was not approved, this will contain details of the cancellation.
type AchTransferTransferCancellation struct {
	// The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the Transfer was canceled.
	CanceledAt time.Time `json:"canceled_at"`
	// If the Transfer was canceled by a user in the dashboard, the email address of that user.
	CanceledBy string `json:"canceled_by"`
}

// AchTransferCurrencyEnum - The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transfer's currency. For ACH transfers this is always equal to `usd`.
type AchTransferCurrencyEnum string

const (
	AchTransferCurrencyEnumCad AchTransferCurrencyEnum = "CAD"
	AchTransferCurrencyEnumChf AchTransferCurrencyEnum = "CHF"
	AchTransferCurrencyEnumEur AchTransferCurrencyEnum = "EUR"
	AchTransferCurrencyEnumGbp AchTransferCurrencyEnum = "GBP"
	AchTransferCurrencyEnumJpy AchTransferCurrencyEnum = "JPY"
	AchTransferCurrencyEnumUsd AchTransferCurrencyEnum = "USD"
)

func (e AchTransferCurrencyEnum) ToPointer() *AchTransferCurrencyEnum {
	return &e
}

func (e *AchTransferCurrencyEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "CAD":
		fallthrough
	case "CHF":
		fallthrough
	case "EUR":
		fallthrough
	case "GBP":
		fallthrough
	case "JPY":
		fallthrough
	case "USD":
		*e = AchTransferCurrencyEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AchTransferCurrencyEnum: %v", v)
	}
}

// AchTransferFundingEnum - The type of the account to which the transfer will be sent.
type AchTransferFundingEnum string

const (
	AchTransferFundingEnumChecking AchTransferFundingEnum = "checking"
	AchTransferFundingEnumSavings  AchTransferFundingEnum = "savings"
)

func (e AchTransferFundingEnum) ToPointer() *AchTransferFundingEnum {
	return &e
}

func (e *AchTransferFundingEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "checking":
		fallthrough
	case "savings":
		*e = AchTransferFundingEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AchTransferFundingEnum: %v", v)
	}
}

// AchTransferNetworkEnum - The transfer's network.
type AchTransferNetworkEnum string

const (
	AchTransferNetworkEnumAch AchTransferNetworkEnum = "ach"
)

func (e AchTransferNetworkEnum) ToPointer() *AchTransferNetworkEnum {
	return &e
}

func (e *AchTransferNetworkEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ach":
		*e = AchTransferNetworkEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AchTransferNetworkEnum: %v", v)
	}
}

type ACHTransferACHNotificationOfChange struct {
	// The type of change that occurred.
	ChangeCode string `json:"change_code"`
	// The corrected data.
	CorrectedData string `json:"corrected_data"`
	// The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the notification occurred.
	CreatedAt time.Time `json:"created_at"`
}

// ACHTransferACHTransferReturnReturnReasonCodeEnum - Why the ACH Transfer was returned.
type ACHTransferACHTransferReturnReturnReasonCodeEnum string

const (
	ACHTransferACHTransferReturnReturnReasonCodeEnumInsufficientFund                                          ACHTransferACHTransferReturnReturnReasonCodeEnum = "insufficient_fund"
	ACHTransferACHTransferReturnReturnReasonCodeEnumNoAccount                                                 ACHTransferACHTransferReturnReturnReasonCodeEnum = "no_account"
	ACHTransferACHTransferReturnReturnReasonCodeEnumAccountClosed                                             ACHTransferACHTransferReturnReturnReasonCodeEnum = "account_closed"
	ACHTransferACHTransferReturnReturnReasonCodeEnumInvalidAccountNumberStructure                             ACHTransferACHTransferReturnReturnReasonCodeEnum = "invalid_account_number_structure"
	ACHTransferACHTransferReturnReturnReasonCodeEnumAccountFrozenEntryReturnedPerOfacInstruction              ACHTransferACHTransferReturnReturnReasonCodeEnum = "account_frozen_entry_returned_per_ofac_instruction"
	ACHTransferACHTransferReturnReturnReasonCodeEnumCreditEntryRefusedByReceiver                              ACHTransferACHTransferReturnReturnReasonCodeEnum = "credit_entry_refused_by_receiver"
	ACHTransferACHTransferReturnReturnReasonCodeEnumUnauthorizedDebitToConsumerAccountUsingCorporateSecCode   ACHTransferACHTransferReturnReturnReasonCodeEnum = "unauthorized_debit_to_consumer_account_using_corporate_sec_code"
	ACHTransferACHTransferReturnReturnReasonCodeEnumCorporateCustomerAdvisedNotAuthorized                     ACHTransferACHTransferReturnReturnReasonCodeEnum = "corporate_customer_advised_not_authorized"
	ACHTransferACHTransferReturnReturnReasonCodeEnumPaymentStopped                                            ACHTransferACHTransferReturnReturnReasonCodeEnum = "payment_stopped"
	ACHTransferACHTransferReturnReturnReasonCodeEnumNonTransactionAccount                                     ACHTransferACHTransferReturnReturnReasonCodeEnum = "non_transaction_account"
	ACHTransferACHTransferReturnReturnReasonCodeEnumUncollectedFunds                                          ACHTransferACHTransferReturnReturnReasonCodeEnum = "uncollected_funds"
	ACHTransferACHTransferReturnReturnReasonCodeEnumRoutingNumberCheckDigitError                              ACHTransferACHTransferReturnReturnReasonCodeEnum = "routing_number_check_digit_error"
	ACHTransferACHTransferReturnReturnReasonCodeEnumCustomerAdvisedUnauthorizedImproperIneligibleOrIncomplete ACHTransferACHTransferReturnReturnReasonCodeEnum = "customer_advised_unauthorized_improper_ineligible_or_incomplete"
	ACHTransferACHTransferReturnReturnReasonCodeEnumAmountFieldError                                          ACHTransferACHTransferReturnReturnReasonCodeEnum = "amount_field_error"
	ACHTransferACHTransferReturnReturnReasonCodeEnumAuthorizationRevokedByCustomer                            ACHTransferACHTransferReturnReturnReasonCodeEnum = "authorization_revoked_by_customer"
	ACHTransferACHTransferReturnReturnReasonCodeEnumInvalidAchRoutingNumber                                   ACHTransferACHTransferReturnReturnReasonCodeEnum = "invalid_ach_routing_number"
	ACHTransferACHTransferReturnReturnReasonCodeEnumFileRecordEditCriteria                                    ACHTransferACHTransferReturnReturnReasonCodeEnum = "file_record_edit_criteria"
	ACHTransferACHTransferReturnReturnReasonCodeEnumEnrInvalidIndividualName                                  ACHTransferACHTransferReturnReturnReasonCodeEnum = "enr_invalid_individual_name"
	ACHTransferACHTransferReturnReturnReasonCodeEnumReturnedPerOdfiRequest                                    ACHTransferACHTransferReturnReturnReasonCodeEnum = "returned_per_odfi_request"
	ACHTransferACHTransferReturnReturnReasonCodeEnumAddendaError                                              ACHTransferACHTransferReturnReturnReasonCodeEnum = "addenda_error"
	ACHTransferACHTransferReturnReturnReasonCodeEnumLimitedParticipationDfi                                   ACHTransferACHTransferReturnReturnReasonCodeEnum = "limited_participation_dfi"
	ACHTransferACHTransferReturnReturnReasonCodeEnumIncorrectlyCodedOutboundInternationalPayment              ACHTransferACHTransferReturnReturnReasonCodeEnum = "incorrectly_coded_outbound_international_payment"
	ACHTransferACHTransferReturnReturnReasonCodeEnumOther                                                     ACHTransferACHTransferReturnReturnReasonCodeEnum = "other"
)

func (e ACHTransferACHTransferReturnReturnReasonCodeEnum) ToPointer() *ACHTransferACHTransferReturnReturnReasonCodeEnum {
	return &e
}

func (e *ACHTransferACHTransferReturnReturnReasonCodeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "insufficient_fund":
		fallthrough
	case "no_account":
		fallthrough
	case "account_closed":
		fallthrough
	case "invalid_account_number_structure":
		fallthrough
	case "account_frozen_entry_returned_per_ofac_instruction":
		fallthrough
	case "credit_entry_refused_by_receiver":
		fallthrough
	case "unauthorized_debit_to_consumer_account_using_corporate_sec_code":
		fallthrough
	case "corporate_customer_advised_not_authorized":
		fallthrough
	case "payment_stopped":
		fallthrough
	case "non_transaction_account":
		fallthrough
	case "uncollected_funds":
		fallthrough
	case "routing_number_check_digit_error":
		fallthrough
	case "customer_advised_unauthorized_improper_ineligible_or_incomplete":
		fallthrough
	case "amount_field_error":
		fallthrough
	case "authorization_revoked_by_customer":
		fallthrough
	case "invalid_ach_routing_number":
		fallthrough
	case "file_record_edit_criteria":
		fallthrough
	case "enr_invalid_individual_name":
		fallthrough
	case "returned_per_odfi_request":
		fallthrough
	case "addenda_error":
		fallthrough
	case "limited_participation_dfi":
		fallthrough
	case "incorrectly_coded_outbound_international_payment":
		fallthrough
	case "other":
		*e = ACHTransferACHTransferReturnReturnReasonCodeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ACHTransferACHTransferReturnReturnReasonCodeEnum: %v", v)
	}
}

// ACHTransferACHTransferReturn - If your transfer is returned, this will contain details of the return.
type ACHTransferACHTransferReturn struct {
	// The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the transfer was created.
	CreatedAt time.Time `json:"created_at"`
	// Why the ACH Transfer was returned.
	ReturnReasonCode ACHTransferACHTransferReturnReturnReasonCodeEnum `json:"return_reason_code"`
	// The identifier of the Tranasaction associated with this return.
	TransactionID string `json:"transaction_id"`
	// The identifier of the ACH Transfer associated with this return.
	TransferID string `json:"transfer_id"`
}

// AchTransferStandardEntryClassCodeEnum - The Standard Entry Class (SEC) code to use for the transfer.
type AchTransferStandardEntryClassCodeEnum string

const (
	AchTransferStandardEntryClassCodeEnumCorporateCreditOrDebit        AchTransferStandardEntryClassCodeEnum = "corporate_credit_or_debit"
	AchTransferStandardEntryClassCodeEnumPrearrangedPaymentsAndDeposit AchTransferStandardEntryClassCodeEnum = "prearranged_payments_and_deposit"
	AchTransferStandardEntryClassCodeEnumInternetInitiated             AchTransferStandardEntryClassCodeEnum = "internet_initiated"
)

func (e AchTransferStandardEntryClassCodeEnum) ToPointer() *AchTransferStandardEntryClassCodeEnum {
	return &e
}

func (e *AchTransferStandardEntryClassCodeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "corporate_credit_or_debit":
		fallthrough
	case "prearranged_payments_and_deposit":
		fallthrough
	case "internet_initiated":
		*e = AchTransferStandardEntryClassCodeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AchTransferStandardEntryClassCodeEnum: %v", v)
	}
}

// AchTransferStatusEnum - The lifecycle status of the transfer.
type AchTransferStatusEnum string

const (
	AchTransferStatusEnumPendingApproval   AchTransferStatusEnum = "pending_approval"
	AchTransferStatusEnumCanceled          AchTransferStatusEnum = "canceled"
	AchTransferStatusEnumPendingReviewing  AchTransferStatusEnum = "pending_reviewing"
	AchTransferStatusEnumPendingSubmission AchTransferStatusEnum = "pending_submission"
	AchTransferStatusEnumSubmitted         AchTransferStatusEnum = "submitted"
	AchTransferStatusEnumReturned          AchTransferStatusEnum = "returned"
	AchTransferStatusEnumRequiresAttention AchTransferStatusEnum = "requires_attention"
	AchTransferStatusEnumRejected          AchTransferStatusEnum = "rejected"
)

func (e AchTransferStatusEnum) ToPointer() *AchTransferStatusEnum {
	return &e
}

func (e *AchTransferStatusEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "pending_approval":
		fallthrough
	case "canceled":
		fallthrough
	case "pending_reviewing":
		fallthrough
	case "pending_submission":
		fallthrough
	case "submitted":
		fallthrough
	case "returned":
		fallthrough
	case "requires_attention":
		fallthrough
	case "rejected":
		*e = AchTransferStatusEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AchTransferStatusEnum: %v", v)
	}
}

// ACHTransferACHTransferSubmission - After the transfer is submitted to FedACH, this will contain supplemental details.
type ACHTransferACHTransferSubmission struct {
	// When the ACH transfer was sent to FedACH.
	SubmittedAt time.Time `json:"submitted_at"`
	// The trace number for the submission.
	TraceNumber string `json:"trace_number"`
}

// AchTransferTypeEnum - A constant representing the object's type. For this resource it will always be `ach_transfer`.
type AchTransferTypeEnum string

const (
	AchTransferTypeEnumAchTransfer AchTransferTypeEnum = "ach_transfer"
)

func (e AchTransferTypeEnum) ToPointer() *AchTransferTypeEnum {
	return &e
}

func (e *AchTransferTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ach_transfer":
		*e = AchTransferTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AchTransferTypeEnum: %v", v)
	}
}

// AchTransfer - ACH transfers move funds between your Increase account and any other account accessible by the Automated Clearing House (ACH).
type AchTransfer struct {
	// The Account to which the transfer belongs.
	AccountID string `json:"account_id"`
	// The destination account number.
	AccountNumber string `json:"account_number"`
	// Additional information that will be sent to the recipient.
	Addendum string `json:"addendum"`
	// The transfer amount in USD cents. A positive amount indicates a credit transfer pushing funds to the receiving account. A negative amount indicates a debit transfer pulling funds from the receiving account.
	Amount int64 `json:"amount"`
	// If your account requires approvals for transfers and the transfer was approved, this will contain details of the approval.
	Approval AchTransferTransferApproval `json:"approval"`
	// If your account requires approvals for transfers and the transfer was not approved, this will contain details of the cancellation.
	Cancellation AchTransferTransferCancellation `json:"cancellation"`
	// The description of the date of the transfer.
	CompanyDescriptiveDate string `json:"company_descriptive_date"`
	// The data you chose to associate with the transfer.
	CompanyDiscretionaryData string `json:"company_discretionary_data"`
	// The description of the transfer you set to be shown to the recipient.
	CompanyEntryDescription string `json:"company_entry_description"`
	// The name by which the recipient knows you.
	CompanyName string `json:"company_name"`
	// The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the transfer was created.
	CreatedAt time.Time `json:"created_at"`
	// The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transfer's currency. For ACH transfers this is always equal to `usd`.
	Currency AchTransferCurrencyEnum `json:"currency"`
	// The transfer effective date in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
	EffectiveDate types.Date `json:"effective_date"`
	// The identifier of the External Account the transfer was made to, if any.
	ExternalAccountID string `json:"external_account_id"`
	// The type of the account to which the transfer will be sent.
	Funding AchTransferFundingEnum `json:"funding"`
	// The ACH transfer's identifier.
	ID string `json:"id"`
	// Your identifer for the transfer recipient.
	IndividualID string `json:"individual_id"`
	// The name of the transfer recipient. This value is information and not verified by the recipient's bank.
	IndividualName string `json:"individual_name"`
	// The transfer's network.
	Network AchTransferNetworkEnum `json:"network"`
	// If the receiving bank accepts the transfer but notifies that future transfers should use different details, this will contain those details.
	NotificationsOfChange []ACHTransferACHNotificationOfChange `json:"notifications_of_change"`
	// If your transfer is returned, this will contain details of the return.
	Return ACHTransferACHTransferReturn `json:"return"`
	// The American Bankers' Association (ABA) Routing Transit Number (RTN).
	RoutingNumber string `json:"routing_number"`
	// The Standard Entry Class (SEC) code to use for the transfer.
	StandardEntryClassCode AchTransferStandardEntryClassCodeEnum `json:"standard_entry_class_code"`
	// The descriptor that will show on the recipient's bank statement.
	StatementDescriptor string `json:"statement_descriptor"`
	// The lifecycle status of the transfer.
	Status AchTransferStatusEnum `json:"status"`
	// After the transfer is submitted to FedACH, this will contain supplemental details.
	Submission ACHTransferACHTransferSubmission `json:"submission"`
	// The ID for the transaction funding the transfer.
	TransactionID string `json:"transaction_id"`
	// A constant representing the object's type. For this resource it will always be `ach_transfer`.
	Type AchTransferTypeEnum `json:"type"`
}
