"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Any, Optional


@dataclasses.dataclass
class CreateSinglePaymentIntentSecurity:
    
    api_secret_key: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'apiKey', 'sub_type': 'header', 'field_name': 'x-api-key' }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateSinglePaymentIntentRequestBodyInvestmentInstructions:
    
    investment_product_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('investment_product_id') }})  
    quantity: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('quantity'), 'exclude': lambda f: f is None }})
    r"""Require if `value` is not available. Must be in correct pattern (eg: 25, 332.34, 1050.0025). For `funds`, upto 4 decimal places. For `equities`, `bonds` and `etf`, 0 decimal places allowed."""  
    value: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('value'), 'exclude': lambda f: f is None }})
    r"""Require if `quantity` is not available. Must be in correct pattern (upto 2 decimal places, eg: 25, 332.3, 1050.25)."""  
    
class CreateSinglePaymentIntentRequestBodyPaymentTypeEnum(str, Enum):
    CARD = 'card'
    ELECTRONIC_FUND_TRANSFER = 'electronic_fund_transfer'

class CreateSinglePaymentIntentRequestBodyPurposeEnum(str, Enum):
    CASH = 'cash'
    INVEST = 'invest'

class CreateSinglePaymentIntentRequestBodyServiceProviderEnum(str, Enum):
    STRIPE = 'stripe'
    TRUELAYER = 'truelayer'
    NONE = 'none'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateSinglePaymentIntentRequestBodyServiceProviderParams:
    r"""Parameters based on prerequisites of the selected provider"""
    
    bank_account_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bank_account_id'), 'exclude': lambda f: f is None }})
    r"""Bank account ID of Investor (mandatory only if service_provider=\\"truelayer\\")"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateSinglePaymentIntentRequestBody:
    
    amount: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('amount') }})
    r"""Amount as a numeral string with two decimal points. (ex: 1500.00). Minimum allowed amount is 1.00"""  
    payment_type: CreateSinglePaymentIntentRequestBodyPaymentTypeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('payment_type') }})  
    pot_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('pot_id') }})  
    purpose: CreateSinglePaymentIntentRequestBodyPurposeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('purpose') }})  
    request_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('request_id') }})
    r"""Unique request id to ensure idempotency. (ex: UUID)"""  
    service_provider: CreateSinglePaymentIntentRequestBodyServiceProviderEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('service_provider') }})  
    currency: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('currency'), 'exclude': lambda f: f is None }})
    r"""must be a currency configured for the Pot"""  
    investment_instructions: Optional[list[CreateSinglePaymentIntentRequestBodyInvestmentInstructions]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('investment_instructions'), 'exclude': lambda f: f is None }})
    r"""mandatory only if purpose:\\"invest\\" and pot does not have a portfolio template attached (e.g. An execution-only or direct-to-consumer wealth manager)."""  
    service_provider_params: Optional[CreateSinglePaymentIntentRequestBodyServiceProviderParams] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('service_provider_params'), 'exclude': lambda f: f is None }})
    r"""Parameters based on prerequisites of the selected provider"""  
    

@dataclasses.dataclass
class CreateSinglePaymentIntentRequest:
    
    request_body: CreateSinglePaymentIntentRequestBody = dataclasses.field(metadata={'request': { 'media_type': 'application/json' }})  
    x_api_key: str = dataclasses.field(metadata={'header': { 'field_name': 'x-api-key', 'style': 'simple', 'explode': False }})
    r"""ApiSecretKey"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateSinglePaymentIntent500ApplicationJSON:
    r"""System error. Retry later. If the error persist, contact WOS support"""
    
    message: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('message') }})
    r"""Human readable description of the error"""  
    error_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('error_code'), 'exclude': lambda f: f is None }})
    r"""Optional error code"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateSinglePaymentIntent429ApplicationJSON:
    r"""You have sent too many requests to the system. Please retry later. If you need to increase your throtteling limits, please contact WOS support"""
    
    message: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('message') }})
    r"""Human readable description of the error"""  
    error_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('error_code'), 'exclude': lambda f: f is None }})
    r"""Optional error code"""  
    
class CreateSinglePaymentIntent409ApplicationJSONStatusEnum(str, Enum):
    r"""Current status of the original request"""
    PROCESSING = 'PROCESSING'
    COMPLETE = 'COMPLETE'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateSinglePaymentIntent409ApplicationJSON:
    r"""Duplicate request"""
    
    message: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('message') }})
    r"""Human readable description of the error"""  
    status: CreateSinglePaymentIntent409ApplicationJSONStatusEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status') }})
    r"""Current status of the original request"""  
    response: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('response'), 'exclude': lambda f: f is None }})
    r"""Stringified original response body if status is `COMPLETE`"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateSinglePaymentIntent403ApplicationJSON:
    r"""Your authentication information is missing or invalid. Please check the keys are properly set and its correct"""
    
    message: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('message') }})
    r"""Human readable description of the error"""  
    error_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('error_code'), 'exclude': lambda f: f is None }})
    r"""Optional error code"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateSinglePaymentIntent401ApplicationJSON:
    r"""You do not have permissions to access this resource."""
    
    message: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('message') }})
    r"""Human readable description of the error"""  
    error_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('error_code'), 'exclude': lambda f: f is None }})
    r"""Optional error code"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateSinglePaymentIntent400ApplicationJSON:
    r"""Request is not complete and may have one or more validations errors. Please check the error message and the code"""
    
    message: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('message') }})
    r"""Human readable description of the error"""  
    error_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('error_code'), 'exclude': lambda f: f is None }})
    r"""Optional error code"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateSinglePaymentIntent201ApplicationJSONInvestmentInstructions:
    
    investment_product_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('investment_product_id') }})  
    quantity: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('quantity'), 'exclude': lambda f: f is None }})
    r"""Require if `value` is not available. Must be in correct pattern (eg: 25, 332.34, 1050.0025). For `funds`, upto 4 decimal places. For `equities`, `bonds` and `etf`, 0 decimal places allowed."""  
    value: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('value'), 'exclude': lambda f: f is None }})
    r"""Require if `quantity` is not available. Must be in correct pattern (upto 2 decimal places, eg: 25, 332.3, 1050.25)."""  
    
class CreateSinglePaymentIntent201ApplicationJSONPaymentTypeEnum(str, Enum):
    CARD = 'card'
    ELECTRONIC_FUND_TRANSFER = 'electronic_fund_transfer'

class CreateSinglePaymentIntent201ApplicationJSONPurposeEnum(str, Enum):
    CASH = 'cash'
    INVEST = 'invest'

class CreateSinglePaymentIntent201ApplicationJSONServiceProviderEnum(str, Enum):
    STRIPE = 'stripe'
    TRUELAYER = 'truelayer'
    NONE = 'none'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateSinglePaymentIntent201ApplicationJSONServiceProviderParams:
    r"""Parameters based on prerequisites of the selected provider"""
    
    bank_account_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bank_account_id'), 'exclude': lambda f: f is None }})
    r"""Bank account ID of Investor (include if service_provider=\\"truelayer\\")"""  
    client_secret: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('client_secret'), 'exclude': lambda f: f is None }})
    r"""Client secret (include if service_provider=\\"stripe\\")"""  
    hpp_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('hpp_url'), 'exclude': lambda f: f is None }})
    r"""URL for Hosted Payment Page (include if service_provider=\\"truelayer\\")"""  
    payment_intent_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('payment_intent_id'), 'exclude': lambda f: f is None }})
    r"""Payment intent ID (include if service_provider=\\"truelayer\\" or service_provider=\\"stripe\\")"""  
    publishable_key: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('publishable_key'), 'exclude': lambda f: f is None }})
    r"""Publishable key (include if service_provider=\\"stripe\\")"""  
    
class CreateSinglePaymentIntent201ApplicationJSONStatusEnum(str, Enum):
    PENDING_CONFIRMATION = 'pending_confirmation'
    PROCESSING = 'processing'
    SUCCEEDED = 'succeeded'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateSinglePaymentIntent201ApplicationJSON:
    r"""Resource created"""
    
    amount: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('amount') }})  
    currency: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('currency') }})  
    payment_type: CreateSinglePaymentIntent201ApplicationJSONPaymentTypeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('payment_type') }})  
    pot_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('pot_id') }})  
    purpose: CreateSinglePaymentIntent201ApplicationJSONPurposeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('purpose') }})  
    service_provider: CreateSinglePaymentIntent201ApplicationJSONServiceProviderEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('service_provider') }})  
    status: CreateSinglePaymentIntent201ApplicationJSONStatusEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status') }})  
    transaction_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('transaction_id') }})  
    investment_instructions: Optional[list[CreateSinglePaymentIntent201ApplicationJSONInvestmentInstructions]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('investment_instructions'), 'exclude': lambda f: f is None }})
    r"""mandatory only if purpose:\\"invest\\" and pot does not have a portfolio template attached (e.g. An execution-only or direct-to-consumer wealth manager)"""  
    service_provider_params: Optional[CreateSinglePaymentIntent201ApplicationJSONServiceProviderParams] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('service_provider_params'), 'exclude': lambda f: f is None }})
    r"""Parameters based on prerequisites of the selected provider"""  
    

@dataclasses.dataclass
class CreateSinglePaymentIntentResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    create_single_payment_intent_201_application_json_object: Optional[CreateSinglePaymentIntent201ApplicationJSON] = dataclasses.field(default=None)
    r"""Resource created"""  
    create_single_payment_intent_400_application_json_object: Optional[CreateSinglePaymentIntent400ApplicationJSON] = dataclasses.field(default=None)
    r"""Request is not complete and may have one or more validations errors. Please check the error message and the code"""  
    create_single_payment_intent_401_application_json_object: Optional[CreateSinglePaymentIntent401ApplicationJSON] = dataclasses.field(default=None)
    r"""You do not have permissions to access this resource."""  
    create_single_payment_intent_403_application_json_object: Optional[CreateSinglePaymentIntent403ApplicationJSON] = dataclasses.field(default=None)
    r"""Your authentication information is missing or invalid. Please check the keys are properly set and its correct"""  
    create_single_payment_intent_409_application_json_object: Optional[CreateSinglePaymentIntent409ApplicationJSON] = dataclasses.field(default=None)
    r"""Duplicate request"""  
    create_single_payment_intent_429_application_json_object: Optional[CreateSinglePaymentIntent429ApplicationJSON] = dataclasses.field(default=None)
    r"""You have sent too many requests to the system. Please retry later. If you need to increase your throtteling limits, please contact WOS support"""  
    create_single_payment_intent_500_application_json_object: Optional[CreateSinglePaymentIntent500ApplicationJSON] = dataclasses.field(default=None)
    r"""System error. Retry later. If the error persist, contact WOS support"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    