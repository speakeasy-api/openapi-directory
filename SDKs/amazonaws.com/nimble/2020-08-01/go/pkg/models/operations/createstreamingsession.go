// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type CreateStreamingSessionPathParams struct {
	// The studio ID.
	StudioID string `pathParam:"style=simple,explode=false,name=studioId"`
}

type CreateStreamingSessionHeaders struct {
	XAmzAlgorithm *string `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	// Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. If you donâ€™t specify a client token, the Amazon Web Services SDK automatically generates a client token and uses it for the request to ensure idempotency.
	XAmzClientToken   *string `header:"style=simple,explode=false,name=X-Amz-Client-Token"`
	XAmzContentSha256 *string `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
}

// CreateStreamingSessionRequestBodyEc2InstanceTypeEnum - The EC2 Instance type used for the streaming session.
type CreateStreamingSessionRequestBodyEc2InstanceTypeEnum string

const (
	CreateStreamingSessionRequestBodyEc2InstanceTypeEnumG4dnXlarge   CreateStreamingSessionRequestBodyEc2InstanceTypeEnum = "g4dn.xlarge"
	CreateStreamingSessionRequestBodyEc2InstanceTypeEnumG4dn2xlarge  CreateStreamingSessionRequestBodyEc2InstanceTypeEnum = "g4dn.2xlarge"
	CreateStreamingSessionRequestBodyEc2InstanceTypeEnumG4dn4xlarge  CreateStreamingSessionRequestBodyEc2InstanceTypeEnum = "g4dn.4xlarge"
	CreateStreamingSessionRequestBodyEc2InstanceTypeEnumG4dn8xlarge  CreateStreamingSessionRequestBodyEc2InstanceTypeEnum = "g4dn.8xlarge"
	CreateStreamingSessionRequestBodyEc2InstanceTypeEnumG4dn12xlarge CreateStreamingSessionRequestBodyEc2InstanceTypeEnum = "g4dn.12xlarge"
	CreateStreamingSessionRequestBodyEc2InstanceTypeEnumG4dn16xlarge CreateStreamingSessionRequestBodyEc2InstanceTypeEnum = "g4dn.16xlarge"
	CreateStreamingSessionRequestBodyEc2InstanceTypeEnumG34xlarge    CreateStreamingSessionRequestBodyEc2InstanceTypeEnum = "g3.4xlarge"
	CreateStreamingSessionRequestBodyEc2InstanceTypeEnumG3sXlarge    CreateStreamingSessionRequestBodyEc2InstanceTypeEnum = "g3s.xlarge"
	CreateStreamingSessionRequestBodyEc2InstanceTypeEnumG5Xlarge     CreateStreamingSessionRequestBodyEc2InstanceTypeEnum = "g5.xlarge"
	CreateStreamingSessionRequestBodyEc2InstanceTypeEnumG52xlarge    CreateStreamingSessionRequestBodyEc2InstanceTypeEnum = "g5.2xlarge"
	CreateStreamingSessionRequestBodyEc2InstanceTypeEnumG54xlarge    CreateStreamingSessionRequestBodyEc2InstanceTypeEnum = "g5.4xlarge"
	CreateStreamingSessionRequestBodyEc2InstanceTypeEnumG58xlarge    CreateStreamingSessionRequestBodyEc2InstanceTypeEnum = "g5.8xlarge"
	CreateStreamingSessionRequestBodyEc2InstanceTypeEnumG516xlarge   CreateStreamingSessionRequestBodyEc2InstanceTypeEnum = "g5.16xlarge"
)

func (e *CreateStreamingSessionRequestBodyEc2InstanceTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "g4dn.xlarge":
		fallthrough
	case "g4dn.2xlarge":
		fallthrough
	case "g4dn.4xlarge":
		fallthrough
	case "g4dn.8xlarge":
		fallthrough
	case "g4dn.12xlarge":
		fallthrough
	case "g4dn.16xlarge":
		fallthrough
	case "g3.4xlarge":
		fallthrough
	case "g3s.xlarge":
		fallthrough
	case "g5.xlarge":
		fallthrough
	case "g5.2xlarge":
		fallthrough
	case "g5.4xlarge":
		fallthrough
	case "g5.8xlarge":
		fallthrough
	case "g5.16xlarge":
		*e = CreateStreamingSessionRequestBodyEc2InstanceTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateStreamingSessionRequestBodyEc2InstanceTypeEnum: %s", s)
	}
}

type CreateStreamingSessionRequestBody struct {
	// The EC2 Instance type used for the streaming session.
	Ec2InstanceType *CreateStreamingSessionRequestBodyEc2InstanceTypeEnum `json:"ec2InstanceType,omitempty"`
	// The ID of the launch profile used to control access from the streaming session.
	LaunchProfileID string `json:"launchProfileId"`
	// The user ID of the user that owns the streaming session. The user that owns the session will be logging into the session and interacting with the virtual workstation.
	OwnedBy *string `json:"ownedBy,omitempty"`
	// The ID of the streaming image.
	StreamingImageID *string `json:"streamingImageId,omitempty"`
	// A collection of labels, in the form of key-value pairs, that apply to this resource.
	Tags map[string]string `json:"tags,omitempty"`
}

type CreateStreamingSessionRequest struct {
	PathParams CreateStreamingSessionPathParams
	Headers    CreateStreamingSessionHeaders
	Request    CreateStreamingSessionRequestBody `request:"mediaType=application/json"`
}

type CreateStreamingSessionResponse struct {
	// AccessDeniedException
	AccessDeniedException interface{}
	// ConflictException
	ConflictException interface{}
	ContentType       string
	// Success
	CreateStreamingSessionResponse *shared.CreateStreamingSessionResponse
	// InternalServerErrorException
	InternalServerErrorException interface{}
	// ResourceNotFoundException
	ResourceNotFoundException interface{}
	StatusCode                int
	RawResponse               *http.Response
	// ServiceQuotaExceededException
	ServiceQuotaExceededException interface{}
	// ThrottlingException
	ThrottlingException interface{}
	// ValidationException
	ValidationException interface{}
}
