/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class Project {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * List all analyses for a project
   *
   * @remarks
   * List all analyses for a project
   */
  getProjectAnalyses(
    req: operations.GetProjectAnalysesRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetProjectAnalysesResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetProjectAnalysesRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/analyses/{username}/{project_slug}",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetProjectAnalysesResponse =
        new operations.GetProjectAnalysesResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getProjectAnalyses200ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.GetProjectAnalyses200ApplicationJSON
              );
          }
          break;
        default:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.defaultPayload = utils.objectToClass(
              httpRes?.data,
              shared.DefaultPayload
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Project Query aggregator
   *
   * @remarks
   * Project Query aggregator. It accepts multiple queries that will be executed on all completed analyses in the project
   */
  getProjectUrlsAggs(
    req: operations.GetProjectUrlsAggsRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetProjectUrlsAggsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetProjectUrlsAggsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/projects/{username}/{project_slug}/urls/aggs",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetProjectUrlsAggsResponse =
        new operations.GetProjectUrlsAggsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 201:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.default = utils.objectToClass(httpRes?.data);
          }
          break;
        default:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.defaultPayload = utils.objectToClass(
              httpRes?.data,
              shared.DefaultPayload
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Retrieves a specific saved filter's name, ID and filter value
   *
   * @remarks
   * Retrieves a specific saved filter's name, ID and filter value
   */
  getSavedFilter(
    req: operations.GetSavedFilterRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetSavedFilterResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetSavedFilterRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/projects/{username}/{project_slug}/filters/{identifier}",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetSavedFilterResponse =
        new operations.GetSavedFilterResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.projectSavedFilter = utils.objectToClass(
              httpRes?.data,
              shared.ProjectSavedFilter
            );
          }
          break;
        default:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.defaultPayload = utils.objectToClass(
              httpRes?.data,
              shared.DefaultPayload
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * List all the project's saved filters (each filter's name, ID and filter value)
   *
   * @remarks
   * List all the project's saved filters (each filter's name, ID and filter value)
   */
  getSavedFilters(
    req: operations.GetSavedFiltersRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetSavedFiltersResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetSavedFiltersRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/projects/{username}/{project_slug}/filters",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetSavedFiltersResponse =
        new operations.GetSavedFiltersResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getSavedFilters200ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.GetSavedFilters200ApplicationJSON
            );
          }
          break;
        default:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.defaultPayload = utils.objectToClass(
              httpRes?.data,
              shared.DefaultPayload
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Match and replace parts of a URL based on rules passed in POST data
   *
   * @remarks
   * Match and replace parts of a URL based on rules passed in POST data.
   */
  testUrlRewritingRules(
    req: operations.TestUrlRewritingRulesRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.TestUrlRewritingRulesResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.TestUrlRewritingRulesRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/projects/{username}/{project_slug}/features/url_rewriting/rules_validator",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "post",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.TestUrlRewritingRulesResponse =
        new operations.TestUrlRewritingRulesResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 201:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.urlRewritingRulesSerializer = utils.objectToClass(
              httpRes?.data,
              shared.URLRewritingRulesSerializer
            );
          }
          break;
        default:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.defaultPayload = utils.objectToClass(
              httpRes?.data,
              shared.DefaultPayload
            );
          }
          break;
      }

      return res;
    });
  }
}
