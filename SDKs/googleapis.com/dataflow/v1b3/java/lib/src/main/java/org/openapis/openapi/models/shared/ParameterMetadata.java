/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * ParameterMetadata - Metadata for a specific parameter.
 */
public class ParameterMetadata {
    /**
     * Optional. Additional metadata for describing this parameter.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("customMetadata")
    public java.util.Map<String, String> customMetadata;

    public ParameterMetadata withCustomMetadata(java.util.Map<String, String> customMetadata) {
        this.customMetadata = customMetadata;
        return this;
    }
    
    /**
     * Optional. Specifies a group name for this parameter to be rendered under. Group header text will be rendered exactly as specified in this field. Only considered when parent_name is NOT provided.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("groupName")
    public String groupName;

    public ParameterMetadata withGroupName(String groupName) {
        this.groupName = groupName;
        return this;
    }
    
    /**
     * Required. The help text to display for the parameter.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("helpText")
    public String helpText;

    public ParameterMetadata withHelpText(String helpText) {
        this.helpText = helpText;
        return this;
    }
    
    /**
     * Optional. Whether the parameter is optional. Defaults to false.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("isOptional")
    public Boolean isOptional;

    public ParameterMetadata withIsOptional(Boolean isOptional) {
        this.isOptional = isOptional;
        return this;
    }
    
    /**
     * Required. The label to display for the parameter.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("label")
    public String label;

    public ParameterMetadata withLabel(String label) {
        this.label = label;
        return this;
    }
    
    /**
     * Required. The name of the parameter.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    public String name;

    public ParameterMetadata withName(String name) {
        this.name = name;
        return this;
    }
    
    /**
     * Optional. The type of the parameter. Used for selecting input picker.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("paramType")
    public ParameterMetadataParamTypeEnum paramType;

    public ParameterMetadata withParamType(ParameterMetadataParamTypeEnum paramType) {
        this.paramType = paramType;
        return this;
    }
    
    /**
     * Optional. Specifies the name of the parent parameter. Used in conjunction with 'parent_trigger_values' to make this parameter conditional (will only be rendered conditionally). Should be mappable to a ParameterMetadata.name field.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("parentName")
    public String parentName;

    public ParameterMetadata withParentName(String parentName) {
        this.parentName = parentName;
        return this;
    }
    
    /**
     * Optional. The value(s) of the 'parent_name' parameter which will trigger this parameter to be shown. If left empty, ANY non-empty value in parent_name will trigger this parameter to be shown. Only considered when this parameter is conditional (when 'parent_name' has been provided).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("parentTriggerValues")
    public String[] parentTriggerValues;

    public ParameterMetadata withParentTriggerValues(String[] parentTriggerValues) {
        this.parentTriggerValues = parentTriggerValues;
        return this;
    }
    
    /**
     * Optional. Regexes that the parameter must match.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("regexes")
    public String[] regexes;

    public ParameterMetadata withRegexes(String[] regexes) {
        this.regexes = regexes;
        return this;
    }
    
    public ParameterMetadata(){}
}
