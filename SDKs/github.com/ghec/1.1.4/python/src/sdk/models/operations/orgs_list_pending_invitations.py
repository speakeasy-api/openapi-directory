"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import basic_error as shared_basic_error
from ..shared import organization_invitation as shared_organization_invitation
from enum import Enum
from typing import Optional

class OrgsListPendingInvitationsInvitationSourceEnum(str, Enum):
    r"""Filter invitations by their invitation source."""
    ALL = 'all'
    MEMBER = 'member'
    SCIM = 'scim'

class OrgsListPendingInvitationsRoleEnum(str, Enum):
    r"""Filter invitations by their member role."""
    ALL = 'all'
    ADMIN = 'admin'
    DIRECT_MEMBER = 'direct_member'
    BILLING_MANAGER = 'billing_manager'
    HIRING_MANAGER = 'hiring_manager'


@dataclasses.dataclass
class OrgsListPendingInvitationsRequest:
    
    org: str = dataclasses.field(metadata={'path_param': { 'field_name': 'org', 'style': 'simple', 'explode': False }})
    r"""The organization name. The name is not case sensitive."""  
    invitation_source: Optional[OrgsListPendingInvitationsInvitationSourceEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'invitation_source', 'style': 'form', 'explode': True }})
    r"""Filter invitations by their invitation source."""  
    page: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'page', 'style': 'form', 'explode': True }})
    r"""Page number of the results to fetch."""  
    per_page: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'per_page', 'style': 'form', 'explode': True }})
    r"""The number of results per page (max 100)."""  
    role: Optional[OrgsListPendingInvitationsRoleEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'role', 'style': 'form', 'explode': True }})
    r"""Filter invitations by their member role."""  
    

@dataclasses.dataclass
class OrgsListPendingInvitationsResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    basic_error: Optional[shared_basic_error.BasicError] = dataclasses.field(default=None)
    r"""Resource not found"""  
    headers: Optional[dict[str, list[str]]] = dataclasses.field(default=None)  
    organization_invitations: Optional[list[shared_organization_invitation.OrganizationInvitation]] = dataclasses.field(default=None)
    r"""Response"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    