// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// EnableRadiusXAmzTargetEnum
type EnableRadiusXAmzTargetEnum string

const (
	EnableRadiusXAmzTargetEnumDirectoryService20150416EnableRadius EnableRadiusXAmzTargetEnum = "DirectoryService_20150416.EnableRadius"
)

func (e EnableRadiusXAmzTargetEnum) ToPointer() *EnableRadiusXAmzTargetEnum {
	return &e
}

func (e *EnableRadiusXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "DirectoryService_20150416.EnableRadius":
		*e = EnableRadiusXAmzTargetEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for EnableRadiusXAmzTargetEnum: %v", v)
	}
}

type EnableRadiusRequest struct {
	EnableRadiusRequest shared.EnableRadiusRequest `request:"mediaType=application/json"`
	XAmzAlgorithm       *string                    `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256   *string                    `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential      *string                    `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate            *string                    `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken   *string                    `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature       *string                    `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders   *string                    `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget          EnableRadiusXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type EnableRadiusResponse struct {
	// ClientException
	ClientException interface{}
	ContentType     string
	// Success
	EnableRadiusResult map[string]interface{}
	// EntityAlreadyExistsException
	EntityAlreadyExistsException interface{}
	// EntityDoesNotExistException
	EntityDoesNotExistException interface{}
	// InvalidParameterException
	InvalidParameterException interface{}
	// ServiceException
	ServiceException interface{}
	StatusCode       int
	RawResponse      *http.Response
}
