"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import timeseriesquery as shared_timeseriesquery
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class DataSetPlotTypeEnum(str, Enum):
    r"""How this data should be plotted on the chart."""
    PLOT_TYPE_UNSPECIFIED = 'PLOT_TYPE_UNSPECIFIED'
    LINE = 'LINE'
    STACKED_AREA = 'STACKED_AREA'
    STACKED_BAR = 'STACKED_BAR'
    HEATMAP = 'HEATMAP'

class DataSetTargetAxisEnum(str, Enum):
    r"""Optional. The target axis to use for plotting the metric."""
    TARGET_AXIS_UNSPECIFIED = 'TARGET_AXIS_UNSPECIFIED'
    Y1 = 'Y1'
    Y2 = 'Y2'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class DataSet:
    r"""Groups a time series query definition with charting options."""
    
    legend_template: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('legendTemplate'), 'exclude': lambda f: f is None }})
    r"""A template string for naming TimeSeries in the resulting data set. This should be a string with interpolations of the form ${label_name}, which will resolve to the label's value."""  
    min_alignment_period: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('minAlignmentPeriod'), 'exclude': lambda f: f is None }})
    r"""Optional. The lower bound on data point frequency for this data set, implemented by specifying the minimum alignment period to use in a time series query For example, if the data is published once every 10 minutes, the min_alignment_period should be at least 10 minutes. It would not make sense to fetch and align data at one minute intervals."""  
    plot_type: Optional[DataSetPlotTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('plotType'), 'exclude': lambda f: f is None }})
    r"""How this data should be plotted on the chart."""  
    target_axis: Optional[DataSetTargetAxisEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('targetAxis'), 'exclude': lambda f: f is None }})
    r"""Optional. The target axis to use for plotting the metric."""  
    time_series_query: Optional[shared_timeseriesquery.TimeSeriesQuery] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('timeSeriesQuery'), 'exclude': lambda f: f is None }})
    r"""TimeSeriesQuery collects the set of supported methods for querying time series data from the Stackdriver metrics API."""  
    