"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Runs:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def runs_for_route(self, request: operations.RunsForRouteRequest) -> operations.RunsForRouteResponse:
        r"""View all trip/service runs for a specific route ID"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.RunsForRouteRequest, base_url, '/v3/runs/route/{route_id}', request)
        
        query_params = utils.get_query_params(operations.RunsForRouteRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.RunsForRouteResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.V3RunsResponse])
                res.v3_runs_response = out
            if utils.match_content_type(content_type, 'text/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.V3RunsResponse])
                res.v3_runs_response = out
            if utils.match_content_type(content_type, 'text/html'):
                res.body = http_res.content
        elif http_res.status_code in [400, 403]:
            if utils.match_content_type(content_type, 'text/html'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.V3ErrorResponse])
                res.v3_error_response = out
            if utils.match_content_type(content_type, 'text/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.V3ErrorResponse])
                res.v3_error_response = out

        return res

    def runs_for_route_and_route_type(self, request: operations.RunsForRouteAndRouteTypeRequest) -> operations.RunsForRouteAndRouteTypeResponse:
        r"""View all trip/service runs for a specific route ID and route type"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.RunsForRouteAndRouteTypeRequest, base_url, '/v3/runs/route/{route_id}/route_type/{route_type}', request)
        
        query_params = utils.get_query_params(operations.RunsForRouteAndRouteTypeRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.RunsForRouteAndRouteTypeResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.V3RunsResponse])
                res.v3_runs_response = out
            if utils.match_content_type(content_type, 'text/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.V3RunsResponse])
                res.v3_runs_response = out
            if utils.match_content_type(content_type, 'text/html'):
                res.body = http_res.content
        elif http_res.status_code in [400, 403]:
            if utils.match_content_type(content_type, 'text/html'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.V3ErrorResponse])
                res.v3_error_response = out
            if utils.match_content_type(content_type, 'text/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.V3ErrorResponse])
                res.v3_error_response = out

        return res

    def runs_for_run(self, request: operations.RunsForRunRequest) -> operations.RunsForRunResponse:
        r"""View all trip/service runs for a specific run_ref"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.RunsForRunRequest, base_url, '/v3/runs/{run_ref}', request)
        
        query_params = utils.get_query_params(operations.RunsForRunRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.RunsForRunResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.V3RunsResponse])
                res.v3_runs_response = out
            if utils.match_content_type(content_type, 'text/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.V3RunsResponse])
                res.v3_runs_response = out
            if utils.match_content_type(content_type, 'text/html'):
                res.body = http_res.content
        elif http_res.status_code in [400, 403]:
            if utils.match_content_type(content_type, 'text/html'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.V3ErrorResponse])
                res.v3_error_response = out
            if utils.match_content_type(content_type, 'text/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.V3ErrorResponse])
                res.v3_error_response = out

        return res

    def runs_for_run_and_route_type(self, request: operations.RunsForRunAndRouteTypeRequest) -> operations.RunsForRunAndRouteTypeResponse:
        r"""View the trip/service run for a specific run_ref and route type"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.RunsForRunAndRouteTypeRequest, base_url, '/v3/runs/{run_ref}/route_type/{route_type}', request)
        
        query_params = utils.get_query_params(operations.RunsForRunAndRouteTypeRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.RunsForRunAndRouteTypeResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.V3RunResponse])
                res.v3_run_response = out
            if utils.match_content_type(content_type, 'text/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.V3RunResponse])
                res.v3_run_response = out
            if utils.match_content_type(content_type, 'text/html'):
                res.body = http_res.content
        elif http_res.status_code in [400, 403]:
            if utils.match_content_type(content_type, 'text/html'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.V3ErrorResponse])
                res.v3_error_response = out
            if utils.match_content_type(content_type, 'text/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.V3ErrorResponse])
                res.v3_error_response = out

        return res

    