"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from enum import Enum
from marshmallow import fields
from sdk import utils
from typing import Optional


@dataclasses.dataclass
class DashboardMeetingParticipantsSecurity:
    
    o_auth: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'oauth2', 'field_name': 'Authorization' }})  
    
class DashboardMeetingParticipantsIncludeFieldsEnum(str, Enum):
    r"""Provide `registrant_id` as the value for this field if you would like to see the registrant ID attribute in the response of this API call. A registrant ID is a unique identifier of a [meeting registrant](https://marketplace.zoom.us/docs/api-reference/zoom-api/meetings/meetingregistrants). This is not supported for `live` meeting types."""
    REGISTRANT_ID = 'registrant_id'

class DashboardMeetingParticipantsTypeEnum(str, Enum):
    r"""The meeting types: <br>`past` - Past meetings.<br>`pastOne` - Past one user meetings.<br>`live` - Live meetings."""
    PAST = 'past'
    PAST_ONE = 'pastOne'
    LIVE = 'live'


@dataclasses.dataclass
class DashboardMeetingParticipantsRequest:
    
    meeting_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'meetingId', 'style': 'simple', 'explode': False }})
    r"""The meeting ID or the meeting UUID.  If a meeting ID is provided in the request instead of a UUID, the response will be for the latest meeting instance.
    
    If a UUID starts with \"/\" or contains \"//\" (example: \"/ajXp112QmuoKj4854875==\\"), you must **double encode** the UUID before making an API request.
    """  
    include_fields: Optional[DashboardMeetingParticipantsIncludeFieldsEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'include_fields', 'style': 'form', 'explode': True }})
    r"""Provide `registrant_id` as the value for this field if you would like to see the registrant ID attribute in the response of this API call. A registrant ID is a unique identifier of a [meeting registrant](https://marketplace.zoom.us/docs/api-reference/zoom-api/meetings/meetingregistrants). This is not supported for `live` meeting types."""  
    next_page_token: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'next_page_token', 'style': 'form', 'explode': True }})
    r"""The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes."""  
    page_size: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'page_size', 'style': 'form', 'explode': True }})
    r"""The number of records returned within a single API call."""  
    type: Optional[DashboardMeetingParticipantsTypeEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'type', 'style': 'form', 'explode': True }})
    r"""The meeting types: <br>`past` - Past meetings.<br>`pastOne` - Past one user meetings.<br>`live` - Live meetings."""  
    
class DashboardMeetingParticipants200ApplicationXMLParticipantsAudioQualityEnum(str, Enum):
    r"""Audio quality of the participant."""
    UNKNOWN = ' '
    GOOD = 'good'
    FAIR = 'fair'
    POOR = 'poor'
    BAD = 'bad'

class DashboardMeetingParticipants200ApplicationXMLParticipantsNetworkTypeEnum(str, Enum):
    r"""Participant's network type."""
    WIRED = 'Wired'
    WIFI = 'Wifi'
    PPP = 'PPP'
    CELLULAR_3_G_AND_4_G_ = 'Cellular (3G and 4G)'
    OTHERS = 'Others'

class DashboardMeetingParticipants200ApplicationXMLParticipantsScreenShareQualityEnum(str, Enum):
    r"""Screen share quality of the participant."""
    UNKNOWN = ' '
    GOOD = 'good'
    FAIR = 'fair'
    POOR = 'poor'
    BAD = 'bad'

class DashboardMeetingParticipants200ApplicationXMLParticipantsStatusEnum(str, Enum):
    r"""Indicates whether the participant is in the waiting room or in the meeting.
    
    The value of this field can be `in_meeting` or `in_waiting_room`.
    """
    IN_MEETING = 'in_meeting'
    IN_WAITING_ROOM = 'in_waiting_room'

class DashboardMeetingParticipants200ApplicationXMLParticipantsVideoQualityEnum(str, Enum):
    r"""Video quality of the participant."""
    UNKNOWN = ' '
    GOOD = 'good'
    FAIR = 'fair'
    POOR = 'poor'
    BAD = 'bad'


@dataclasses.dataclass
class DashboardMeetingParticipants200ApplicationXMLParticipants:
    
    audio_quality: Optional[DashboardMeetingParticipants200ApplicationXMLParticipantsAudioQualityEnum] = dataclasses.field(default=None)
    r"""Audio quality of the participant."""  
    camera: Optional[str] = dataclasses.field(default=None)
    r"""The type of camera used by participant during the meeting."""  
    connection_type: Optional[str] = dataclasses.field(default=None)
    r"""Participant connection type."""  
    customer_key: Optional[str] = dataclasses.field(default=None)
    r"""Another identifier for the participant. Can be a number or characters, maximum length of 15 characters."""  
    data_center: Optional[str] = dataclasses.field(default=None)
    r"""Data Center where participant's meeting data is stored."""  
    device: Optional[str] = dataclasses.field(default=None)
    r"""The type of device using which the participant joined the meeting. The possible values for this field are:
    * `Phone`: Participant joined via PSTN.
    * `H.323/SIP`: Participant joined via an H.323 or SIP device.
    * `Windows`: Participant joined via VoIP using a Windows device.
    * `Mac`: Participant joined via VoIP using a Mac device.
    * `iOS`: Participant joined via VoIP using an iOS device.
    * `Android`: Participant joined via VoIP using an Android device.
    """  
    domain: Optional[str] = dataclasses.field(default=None)
    r"""Participant's PC domain."""  
    email: Optional[str] = dataclasses.field(default=None)
    r"""Email address of the participant."""  
    harddisk_id: Optional[str] = dataclasses.field(default=None)
    r"""Participant's hard disk ID."""  
    id: Optional[str] = dataclasses.field(default=None)
    r"""Universally unique identifier of the Participant. It is the same as the User ID of the participant if the participant joins the meeting by logging into Zoom. If the participant joins the meeting without logging in, the value of this field will be blank."""  
    in_room_participants: Optional[int] = dataclasses.field(default=None)
    r"""The number of participants who joined via Zoom Room."""  
    ip_address: Optional[str] = dataclasses.field(default=None)
    r"""Participant's IP address."""  
    join_time: Optional[datetime] = dataclasses.field(default=None)
    r"""The time at which participant joined the meeting."""  
    leave_reason: Optional[str] = dataclasses.field(default=None)
    r"""Possible reasons for why participant left the meeting."""  
    leave_time: Optional[datetime] = dataclasses.field(default=None)
    r"""The time at which a participant left the meeting. For live meetings, this field will only be returned if a participant has left the ongoing meeting."""  
    location: Optional[str] = dataclasses.field(default=None)
    r"""Participant's location."""  
    mac_addr: Optional[str] = dataclasses.field(default=None)
    r"""Participant's MAC address."""  
    microphone: Optional[str] = dataclasses.field(default=None)
    r"""The type of Microphone that participant used during the meeting."""  
    network_type: Optional[DashboardMeetingParticipants200ApplicationXMLParticipantsNetworkTypeEnum] = dataclasses.field(default=None)
    r"""Participant's network type."""  
    pc_name: Optional[str] = dataclasses.field(default=None)
    r"""Name of Participant's PC."""  
    recording: Optional[bool] = dataclasses.field(default=None)
    r"""Indicates whether or not recording was used during the meeting."""  
    registrant_id: Optional[str] = dataclasses.field(default=None)
    r"""Unique identifier of the registrant. This field is only returned if you entered \\"registrant_id\\" as the value of `include_fields` query parameter. This is not supported for `live` meeting types."""  
    screen_share_quality: Optional[DashboardMeetingParticipants200ApplicationXMLParticipantsScreenShareQualityEnum] = dataclasses.field(default=None)
    r"""Screen share quality of the participant."""  
    share_application: Optional[bool] = dataclasses.field(default=None)
    r"""Indicates whether or not a user selected to share an iPhone/iPad app during the screenshare."""  
    share_desktop: Optional[bool] = dataclasses.field(default=None)
    r"""Indicates whether or not a user selected to share their desktop during the screenshare."""  
    share_whiteboard: Optional[bool] = dataclasses.field(default=None)
    r"""Indicates whether or not a user selected to share their whiteboard during the screenshare."""  
    speaker: Optional[str] = dataclasses.field(default=None)
    r"""The type of speaker participant used during the meeting."""  
    status: Optional[DashboardMeetingParticipants200ApplicationXMLParticipantsStatusEnum] = dataclasses.field(default=None)
    r"""Indicates whether the participant is in the waiting room or in the meeting.
    
    The value of this field can be `in_meeting` or `in_waiting_room`.
    """  
    user_id: Optional[str] = dataclasses.field(default=None)
    r"""Participant ID. This is a unique ID assigned to the participant joining a meeting and is valid for that meeting only."""  
    user_name: Optional[str] = dataclasses.field(default=None)
    r"""Participant display name."""  
    version: Optional[str] = dataclasses.field(default=None)
    r"""Participant's Zoom Client version."""  
    video_quality: Optional[DashboardMeetingParticipants200ApplicationXMLParticipantsVideoQualityEnum] = dataclasses.field(default=None)
    r"""Video quality of the participant."""  
    

@dataclasses.dataclass
class DashboardMeetingParticipants200ApplicationXML:
    r"""Pagination object."""
    
    next_page_token: Optional[str] = dataclasses.field(default=None)
    r"""The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes."""  
    page_count: Optional[int] = dataclasses.field(default=None)
    r"""The number of pages returned for the request made."""  
    page_size: Optional[int] = dataclasses.field(default=None)
    r"""The number of records returned within a single API call."""  
    participants: Optional[list[DashboardMeetingParticipants200ApplicationXMLParticipants]] = dataclasses.field(default=None)
    r"""Array of participant session objects. If a participant left a meeting and rejoined the same meeting, their information will appear multiple times (as many times as they joined the meeting)."""  
    total_records: Optional[int] = dataclasses.field(default=None)
    r"""The number of all records available across pages."""  
    
class DashboardMeetingParticipants200ApplicationJSONParticipantsAudioQualityEnum(str, Enum):
    r"""Audio quality of the participant."""
    UNKNOWN = ' '
    GOOD = 'good'
    FAIR = 'fair'
    POOR = 'poor'
    BAD = 'bad'

class DashboardMeetingParticipants200ApplicationJSONParticipantsNetworkTypeEnum(str, Enum):
    r"""Participant's network type."""
    WIRED = 'Wired'
    WIFI = 'Wifi'
    PPP = 'PPP'
    CELLULAR_3_G_AND_4_G_ = 'Cellular (3G and 4G)'
    OTHERS = 'Others'

class DashboardMeetingParticipants200ApplicationJSONParticipantsScreenShareQualityEnum(str, Enum):
    r"""Screen share quality of the participant."""
    UNKNOWN = ' '
    GOOD = 'good'
    FAIR = 'fair'
    POOR = 'poor'
    BAD = 'bad'

class DashboardMeetingParticipants200ApplicationJSONParticipantsStatusEnum(str, Enum):
    r"""Indicates whether the participant is in the waiting room or in the meeting.
    
    The value of this field can be `in_meeting` or `in_waiting_room`.
    """
    IN_MEETING = 'in_meeting'
    IN_WAITING_ROOM = 'in_waiting_room'

class DashboardMeetingParticipants200ApplicationJSONParticipantsVideoQualityEnum(str, Enum):
    r"""Video quality of the participant."""
    UNKNOWN = ' '
    GOOD = 'good'
    FAIR = 'fair'
    POOR = 'poor'
    BAD = 'bad'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class DashboardMeetingParticipants200ApplicationJSONParticipants:
    
    audio_quality: Optional[DashboardMeetingParticipants200ApplicationJSONParticipantsAudioQualityEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('audio_quality'), 'exclude': lambda f: f is None }})
    r"""Audio quality of the participant."""  
    camera: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('camera'), 'exclude': lambda f: f is None }})
    r"""The type of camera used by participant during the meeting."""  
    connection_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('connection_type'), 'exclude': lambda f: f is None }})
    r"""Participant connection type."""  
    customer_key: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('customer_key'), 'exclude': lambda f: f is None }})
    r"""Another identifier for the participant. Can be a number or characters, maximum length of 15 characters."""  
    data_center: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('data_center'), 'exclude': lambda f: f is None }})
    r"""Data Center where participant's meeting data is stored."""  
    device: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('device'), 'exclude': lambda f: f is None }})
    r"""The type of device using which the participant joined the meeting. The possible values for this field are:
    * `Phone`: Participant joined via PSTN.
    * `H.323/SIP`: Participant joined via an H.323 or SIP device.
    * `Windows`: Participant joined via VoIP using a Windows device.
    * `Mac`: Participant joined via VoIP using a Mac device.
    * `iOS`: Participant joined via VoIP using an iOS device.
    * `Android`: Participant joined via VoIP using an Android device.
    """  
    domain: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('domain'), 'exclude': lambda f: f is None }})
    r"""Participant's PC domain."""  
    email: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('email'), 'exclude': lambda f: f is None }})
    r"""Email address of the participant."""  
    harddisk_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('harddisk_id'), 'exclude': lambda f: f is None }})
    r"""Participant's hard disk ID."""  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""Universally unique identifier of the Participant. It is the same as the User ID of the participant if the participant joins the meeting by logging into Zoom. If the participant joins the meeting without logging in, the value of this field will be blank."""  
    in_room_participants: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('in_room_participants'), 'exclude': lambda f: f is None }})
    r"""The number of participants who joined via Zoom Room."""  
    ip_address: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ip_address'), 'exclude': lambda f: f is None }})
    r"""Participant's IP address."""  
    join_time: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('join_time'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""The time at which participant joined the meeting."""  
    leave_reason: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('leave_reason'), 'exclude': lambda f: f is None }})
    r"""Possible reasons for why participant left the meeting."""  
    leave_time: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('leave_time'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""The time at which a participant left the meeting. For live meetings, this field will only be returned if a participant has left the ongoing meeting."""  
    location: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('location'), 'exclude': lambda f: f is None }})
    r"""Participant's location."""  
    mac_addr: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('mac_addr'), 'exclude': lambda f: f is None }})
    r"""Participant's MAC address."""  
    microphone: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('microphone'), 'exclude': lambda f: f is None }})
    r"""The type of Microphone that participant used during the meeting."""  
    network_type: Optional[DashboardMeetingParticipants200ApplicationJSONParticipantsNetworkTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('network_type'), 'exclude': lambda f: f is None }})
    r"""Participant's network type."""  
    pc_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('pc_name'), 'exclude': lambda f: f is None }})
    r"""Name of Participant's PC."""  
    recording: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('recording'), 'exclude': lambda f: f is None }})
    r"""Indicates whether or not recording was used during the meeting."""  
    registrant_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('registrant_id'), 'exclude': lambda f: f is None }})
    r"""Unique identifier of the registrant. This field is only returned if you entered \\"registrant_id\\" as the value of `include_fields` query parameter. This is not supported for `live` meeting types."""  
    screen_share_quality: Optional[DashboardMeetingParticipants200ApplicationJSONParticipantsScreenShareQualityEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('screen_share_quality'), 'exclude': lambda f: f is None }})
    r"""Screen share quality of the participant."""  
    share_application: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('share_application'), 'exclude': lambda f: f is None }})
    r"""Indicates whether or not a user selected to share an iPhone/iPad app during the screenshare."""  
    share_desktop: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('share_desktop'), 'exclude': lambda f: f is None }})
    r"""Indicates whether or not a user selected to share their desktop during the screenshare."""  
    share_whiteboard: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('share_whiteboard'), 'exclude': lambda f: f is None }})
    r"""Indicates whether or not a user selected to share their whiteboard during the screenshare."""  
    speaker: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('speaker'), 'exclude': lambda f: f is None }})
    r"""The type of speaker participant used during the meeting."""  
    status: Optional[DashboardMeetingParticipants200ApplicationJSONParticipantsStatusEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status'), 'exclude': lambda f: f is None }})
    r"""Indicates whether the participant is in the waiting room or in the meeting.
    
    The value of this field can be `in_meeting` or `in_waiting_room`.
    """  
    user_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('user_id'), 'exclude': lambda f: f is None }})
    r"""Participant ID. This is a unique ID assigned to the participant joining a meeting and is valid for that meeting only."""  
    user_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('user_name'), 'exclude': lambda f: f is None }})
    r"""Participant display name."""  
    version: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('version'), 'exclude': lambda f: f is None }})
    r"""Participant's Zoom Client version."""  
    video_quality: Optional[DashboardMeetingParticipants200ApplicationJSONParticipantsVideoQualityEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('video_quality'), 'exclude': lambda f: f is None }})
    r"""Video quality of the participant."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class DashboardMeetingParticipants200ApplicationJSON:
    r"""Pagination object."""
    
    next_page_token: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('next_page_token'), 'exclude': lambda f: f is None }})
    r"""The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes."""  
    page_count: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('page_count'), 'exclude': lambda f: f is None }})
    r"""The number of pages returned for the request made."""  
    page_size: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('page_size'), 'exclude': lambda f: f is None }})
    r"""The number of records returned within a single API call."""  
    participants: Optional[list[DashboardMeetingParticipants200ApplicationJSONParticipants]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('participants'), 'exclude': lambda f: f is None }})
    r"""Array of participant session objects. If a participant left a meeting and rejoined the same meeting, their information will appear multiple times (as many times as they joined the meeting)."""  
    total_records: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('total_records'), 'exclude': lambda f: f is None }})
    r"""The number of all records available across pages."""  
    

@dataclasses.dataclass
class DashboardMeetingParticipantsResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    body: Optional[bytes] = dataclasses.field(default=None)  
    dashboard_meeting_participants_200_application_json_object: Optional[DashboardMeetingParticipants200ApplicationJSON] = dataclasses.field(default=None)
    r"""**HTTP Status Code:** `200`<br>
    Meeting participants returned.<br>
    Only available for paid accounts that have enabled the dashboard feature.
    """  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    