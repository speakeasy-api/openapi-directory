// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// CertificateProductTypeEnum - Certificate product type
type CertificateProductTypeEnum string

const (
	CertificateProductTypeEnumDvSsl         CertificateProductTypeEnum = "DV_SSL"
	CertificateProductTypeEnumDvWildcardSsl CertificateProductTypeEnum = "DV_WILDCARD_SSL"
	CertificateProductTypeEnumEvSsl         CertificateProductTypeEnum = "EV_SSL"
	CertificateProductTypeEnumOvCs          CertificateProductTypeEnum = "OV_CS"
	CertificateProductTypeEnumOvDs          CertificateProductTypeEnum = "OV_DS"
	CertificateProductTypeEnumOvSsl         CertificateProductTypeEnum = "OV_SSL"
	CertificateProductTypeEnumOvWildcardSsl CertificateProductTypeEnum = "OV_WILDCARD_SSL"
	CertificateProductTypeEnumUccDvSsl      CertificateProductTypeEnum = "UCC_DV_SSL"
	CertificateProductTypeEnumUccEvSsl      CertificateProductTypeEnum = "UCC_EV_SSL"
	CertificateProductTypeEnumUccOvSsl      CertificateProductTypeEnum = "UCC_OV_SSL"
)

func (e CertificateProductTypeEnum) ToPointer() *CertificateProductTypeEnum {
	return &e
}

func (e *CertificateProductTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "DV_SSL":
		fallthrough
	case "DV_WILDCARD_SSL":
		fallthrough
	case "EV_SSL":
		fallthrough
	case "OV_CS":
		fallthrough
	case "OV_DS":
		fallthrough
	case "OV_SSL":
		fallthrough
	case "OV_WILDCARD_SSL":
		fallthrough
	case "UCC_DV_SSL":
		fallthrough
	case "UCC_EV_SSL":
		fallthrough
	case "UCC_OV_SSL":
		*e = CertificateProductTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CertificateProductTypeEnum: %v", v)
	}
}

// CertificateRootTypeEnum - Root Type
type CertificateRootTypeEnum string

const (
	CertificateRootTypeEnumGodaddySha1   CertificateRootTypeEnum = "GODADDY_SHA_1"
	CertificateRootTypeEnumGodaddySha2   CertificateRootTypeEnum = "GODADDY_SHA_2"
	CertificateRootTypeEnumStarfieldSha1 CertificateRootTypeEnum = "STARFIELD_SHA_1"
	CertificateRootTypeEnumStarfieldSha2 CertificateRootTypeEnum = "STARFIELD_SHA_2"
)

func (e CertificateRootTypeEnum) ToPointer() *CertificateRootTypeEnum {
	return &e
}

func (e *CertificateRootTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "GODADDY_SHA_1":
		fallthrough
	case "GODADDY_SHA_2":
		fallthrough
	case "STARFIELD_SHA_1":
		fallthrough
	case "STARFIELD_SHA_2":
		*e = CertificateRootTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CertificateRootTypeEnum: %v", v)
	}
}

// CertificateSlotSizeEnum - Number of subject alternative names(SAN) to be included in certificate
type CertificateSlotSizeEnum string

const (
	CertificateSlotSizeEnumFive       CertificateSlotSizeEnum = "FIVE"
	CertificateSlotSizeEnumTen        CertificateSlotSizeEnum = "TEN"
	CertificateSlotSizeEnumFifteen    CertificateSlotSizeEnum = "FIFTEEN"
	CertificateSlotSizeEnumTwenty     CertificateSlotSizeEnum = "TWENTY"
	CertificateSlotSizeEnumThirty     CertificateSlotSizeEnum = "THIRTY"
	CertificateSlotSizeEnumFourty     CertificateSlotSizeEnum = "FOURTY"
	CertificateSlotSizeEnumFifty      CertificateSlotSizeEnum = "FIFTY"
	CertificateSlotSizeEnumOneHundred CertificateSlotSizeEnum = "ONE_HUNDRED"
)

func (e CertificateSlotSizeEnum) ToPointer() *CertificateSlotSizeEnum {
	return &e
}

func (e *CertificateSlotSizeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "FIVE":
		fallthrough
	case "TEN":
		fallthrough
	case "FIFTEEN":
		fallthrough
	case "TWENTY":
		fallthrough
	case "THIRTY":
		fallthrough
	case "FOURTY":
		fallthrough
	case "FIFTY":
		fallthrough
	case "ONE_HUNDRED":
		*e = CertificateSlotSizeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CertificateSlotSizeEnum: %v", v)
	}
}

// CertificateStatusEnum - Status of certificate
type CertificateStatusEnum string

const (
	CertificateStatusEnumPendingIssuance   CertificateStatusEnum = "PENDING_ISSUANCE"
	CertificateStatusEnumIssued            CertificateStatusEnum = "ISSUED"
	CertificateStatusEnumRevoked           CertificateStatusEnum = "REVOKED"
	CertificateStatusEnumCanceled          CertificateStatusEnum = "CANCELED"
	CertificateStatusEnumDenied            CertificateStatusEnum = "DENIED"
	CertificateStatusEnumPendingRevocation CertificateStatusEnum = "PENDING_REVOCATION"
	CertificateStatusEnumPendingRekey      CertificateStatusEnum = "PENDING_REKEY"
	CertificateStatusEnumUnused            CertificateStatusEnum = "UNUSED"
	CertificateStatusEnumExpired           CertificateStatusEnum = "EXPIRED"
)

func (e CertificateStatusEnum) ToPointer() *CertificateStatusEnum {
	return &e
}

func (e *CertificateStatusEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "PENDING_ISSUANCE":
		fallthrough
	case "ISSUED":
		fallthrough
	case "REVOKED":
		fallthrough
	case "CANCELED":
		fallthrough
	case "DENIED":
		fallthrough
	case "PENDING_REVOCATION":
		fallthrough
	case "PENDING_REKEY":
		fallthrough
	case "UNUSED":
		fallthrough
	case "EXPIRED":
		*e = CertificateStatusEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CertificateStatusEnum: %v", v)
	}
}

// Certificate - Certificate details retrieved
type Certificate struct {
	// The unique identifier of the certificate request. Only present if no errors returned
	CertificateID string `json:"certificateId"`
	// Common name of certificate
	CommonName *string            `json:"commonName,omitempty"`
	Contact    CertificateContact `json:"contact"`
	// The date the certificate was ordered.
	CreatedAt string `json:"createdAt"`
	// Only present if certificate order has been denied
	DeniedReason *string                  `json:"deniedReason,omitempty"`
	Organization *CertificateOrganization `json:"organization,omitempty"`
	// Validity period of order. Specified in years
	Period int64 `json:"period"`
	// Certificate product type
	ProductType CertificateProductTypeEnum `json:"productType"`
	// Percentage of completion for certificate vetting
	Progress *int64 `json:"progress,omitempty"`
	// The revocation date of certificate (if revoked).
	RevokedAt *string `json:"revokedAt,omitempty"`
	// Root Type
	RootType *CertificateRootTypeEnum `json:"rootType,omitempty"`
	// Serial number of certificate (if issued or revoked)
	SerialNumber *string `json:"serialNumber,omitempty"`
	// Hexadecmial format for Serial number of certificate(if issued or revoked)
	SerialNumberHex *string `json:"serialNumberHex,omitempty"`
	// Number of subject alternative names(SAN) to be included in certificate
	SlotSize *CertificateSlotSizeEnum `json:"slotSize,omitempty"`
	// Status of certificate
	Status CertificateStatusEnum `json:"status"`
	// Contains subject alternative names set
	SubjectAlternativeNames []SubjectAlternativeNameDetails `json:"subjectAlternativeNames,omitempty"`
	// The end date of the certificate's validity (if issued or revoked).
	ValidEnd *string `json:"validEnd,omitempty"`
	// The start date of the certificate's validity (if issued or revoked).
	ValidStart *string `json:"validStart,omitempty"`
}
