import dataclasses
from datetime import date, datetime
from marshmallow import fields
import dateutil.parser
from typing import Optional
from enum import Enum

class GetCreateConfigurationSetTrackingOptionsActionEnum(str, Enum):
    CREATE_CONFIGURATION_SET_TRACKING_OPTIONS = "CreateConfigurationSetTrackingOptions"


@dataclasses.dataclass
class GetCreateConfigurationSetTrackingOptionsTrackingOptions:
    r"""GetCreateConfigurationSetTrackingOptionsTrackingOptions
    <p>A domain that is used to redirect email recipients to an Amazon SES-operated domain. This domain captures open and click events generated by Amazon SES emails.</p> <p>For more information, see <a href=\"https://docs.aws.amazon.com/ses/latest/DeveloperGuide/configure-custom-open-click-domains.html\">Configuring Custom Domains to Handle Open and Click Tracking</a> in the <i>Amazon SES Developer Guide</i>.</p>
    """
    
    custom_redirect_domain: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'CustomRedirectDomain' }})
    
class GetCreateConfigurationSetTrackingOptionsVersionEnum(str, Enum):
    TWO_THOUSAND_AND_TEN_12_01 = "2010-12-01"


@dataclasses.dataclass
class GetCreateConfigurationSetTrackingOptionsQueryParams:
    action: GetCreateConfigurationSetTrackingOptionsActionEnum = dataclasses.field(metadata={'query_param': { 'field_name': 'Action', 'style': 'form', 'explode': True }})
    configuration_set_name: str = dataclasses.field(metadata={'query_param': { 'field_name': 'ConfigurationSetName', 'style': 'form', 'explode': True }})
    tracking_options: GetCreateConfigurationSetTrackingOptionsTrackingOptions = dataclasses.field(metadata={'query_param': { 'field_name': 'TrackingOptions', 'style': 'form', 'explode': True }})
    version: GetCreateConfigurationSetTrackingOptionsVersionEnum = dataclasses.field(metadata={'query_param': { 'field_name': 'Version', 'style': 'form', 'explode': True }})
    

@dataclasses.dataclass
class GetCreateConfigurationSetTrackingOptionsHeaders:
    x_amz_algorithm: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Algorithm', 'style': 'simple', 'explode': False }})
    x_amz_content_sha256: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Content-Sha256', 'style': 'simple', 'explode': False }})
    x_amz_credential: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Credential', 'style': 'simple', 'explode': False }})
    x_amz_date: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Date', 'style': 'simple', 'explode': False }})
    x_amz_security_token: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Security-Token', 'style': 'simple', 'explode': False }})
    x_amz_signature: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Signature', 'style': 'simple', 'explode': False }})
    x_amz_signed_headers: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-SignedHeaders', 'style': 'simple', 'explode': False }})
    

@dataclasses.dataclass
class GetCreateConfigurationSetTrackingOptionsRequest:
    headers: GetCreateConfigurationSetTrackingOptionsHeaders = dataclasses.field()
    query_params: GetCreateConfigurationSetTrackingOptionsQueryParams = dataclasses.field()
    

@dataclasses.dataclass
class GetCreateConfigurationSetTrackingOptionsResponse:
    content_type: str = dataclasses.field()
    status_code: int = dataclasses.field()
    body: Optional[bytes] = dataclasses.field(default=None)
    
