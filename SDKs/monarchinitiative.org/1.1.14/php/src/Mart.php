<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Mart 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Bulk download of case associations
     * 
     * NOTE: this route has a limiter on it, you may be restricted in the number of downloads per hour. Use carefully.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetMartCaseAssociationsResourceRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetMartCaseAssociationsResourceResponse
     */
	public function getMartCaseAssociationsResource(
        \OpenAPI\OpenAPI\Models\Operations\GetMartCaseAssociationsResourceRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetMartCaseAssociationsResourceResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/mart/case/{object_category}/{taxon}', \OpenAPI\OpenAPI\Models\Operations\GetMartCaseAssociationsResourceRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetMartCaseAssociationsResourceRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetMartCaseAssociationsResourceResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Bulk download of disease associations
     * 
     * NOTE: this route has a limiter on it, you may be restricted in the number of downloads per hour. Use carefully.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetMartDiseaseAssociationsResourceRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetMartDiseaseAssociationsResourceResponse
     */
	public function getMartDiseaseAssociationsResource(
        \OpenAPI\OpenAPI\Models\Operations\GetMartDiseaseAssociationsResourceRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetMartDiseaseAssociationsResourceResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/mart/disease/{object_category}/{taxon}', \OpenAPI\OpenAPI\Models\Operations\GetMartDiseaseAssociationsResourceRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetMartDiseaseAssociationsResourceRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetMartDiseaseAssociationsResourceResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Bulk download of gene associations
     * 
     * NOTE: this route has a limiter on it, you may be restricted in the number of downloads per hour. Use carefully.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetMartGeneAssociationsResourceRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetMartGeneAssociationsResourceResponse
     */
	public function getMartGeneAssociationsResource(
        \OpenAPI\OpenAPI\Models\Operations\GetMartGeneAssociationsResourceRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetMartGeneAssociationsResourceResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/mart/gene/{object_category}/{taxon}', \OpenAPI\OpenAPI\Models\Operations\GetMartGeneAssociationsResourceRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetMartGeneAssociationsResourceRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetMartGeneAssociationsResourceResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Bulk download of orthologs
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetMartOrthologAssociationsResourceRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetMartOrthologAssociationsResourceResponse
     */
	public function getMartOrthologAssociationsResource(
        \OpenAPI\OpenAPI\Models\Operations\GetMartOrthologAssociationsResourceRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetMartOrthologAssociationsResourceResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/mart/ortholog/{taxon1}/{taxon2}', \OpenAPI\OpenAPI\Models\Operations\GetMartOrthologAssociationsResourceRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetMartOrthologAssociationsResourceResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Bulk download of paralogs
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetMartParalogAssociationsResourceRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetMartParalogAssociationsResourceResponse
     */
	public function getMartParalogAssociationsResource(
        \OpenAPI\OpenAPI\Models\Operations\GetMartParalogAssociationsResourceRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetMartParalogAssociationsResourceResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/mart/paralog/{taxon1}/{taxon2}', \OpenAPI\OpenAPI\Models\Operations\GetMartParalogAssociationsResourceRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetMartParalogAssociationsResourceResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
}