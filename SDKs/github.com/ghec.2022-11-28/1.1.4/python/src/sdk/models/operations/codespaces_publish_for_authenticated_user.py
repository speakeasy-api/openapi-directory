"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import basic_error as shared_basic_error
from ..shared import codespace_with_full_repository as shared_codespace_with_full_repository
from ..shared import validation_error as shared_validation_error
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CodespacesPublishForAuthenticatedUserRequestBody:
    
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""A name for the new repository."""  
    private: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('private'), 'exclude': lambda f: f is None }})
    r"""Whether the new repository should be private."""  
    

@dataclasses.dataclass
class CodespacesPublishForAuthenticatedUserRequest:
    
    codespace_name: str = dataclasses.field(metadata={'path_param': { 'field_name': 'codespace_name', 'style': 'simple', 'explode': False }})
    r"""The name of the codespace."""  
    request_body: CodespacesPublishForAuthenticatedUserRequestBody = dataclasses.field(metadata={'request': { 'media_type': 'application/json' }})  
    

@dataclasses.dataclass
class CodespacesPublishForAuthenticatedUserResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    basic_error: Optional[shared_basic_error.BasicError] = dataclasses.field(default=None)
    r"""Requires authentication"""  
    codespace_with_full_repository: Optional[shared_codespace_with_full_repository.CodespaceWithFullRepository] = dataclasses.field(default=None)
    r"""Response"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    validation_error: Optional[shared_validation_error.ValidationError] = dataclasses.field(default=None)
    r"""Validation failed, or the endpoint has been spammed."""  
    