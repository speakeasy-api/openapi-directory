<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Projects 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Create a new environment.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComposerProjectsLocationsEnvironmentsCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComposerProjectsLocationsEnvironmentsCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComposerProjectsLocationsEnvironmentsCreateResponse
     */
	public function composerProjectsLocationsEnvironmentsCreate(
        \OpenAPI\OpenAPI\Models\Operations\ComposerProjectsLocationsEnvironmentsCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComposerProjectsLocationsEnvironmentsCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComposerProjectsLocationsEnvironmentsCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}/environments', \OpenAPI\OpenAPI\Models\Operations\ComposerProjectsLocationsEnvironmentsCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "environmentInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComposerProjectsLocationsEnvironmentsCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComposerProjectsLocationsEnvironmentsCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List environments.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComposerProjectsLocationsEnvironmentsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComposerProjectsLocationsEnvironmentsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComposerProjectsLocationsEnvironmentsListResponse
     */
	public function composerProjectsLocationsEnvironmentsList(
        \OpenAPI\OpenAPI\Models\Operations\ComposerProjectsLocationsEnvironmentsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComposerProjectsLocationsEnvironmentsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComposerProjectsLocationsEnvironmentsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}/environments', \OpenAPI\OpenAPI\Models\Operations\ComposerProjectsLocationsEnvironmentsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComposerProjectsLocationsEnvironmentsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComposerProjectsLocationsEnvironmentsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listEnvironmentsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListEnvironmentsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Loads a snapshot of a Cloud Composer environment. As a result of this operation, a snapshot of environment's specified in LoadSnapshotRequest is loaded into the environment.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComposerProjectsLocationsEnvironmentsLoadSnapshotRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComposerProjectsLocationsEnvironmentsLoadSnapshotSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComposerProjectsLocationsEnvironmentsLoadSnapshotResponse
     */
	public function composerProjectsLocationsEnvironmentsLoadSnapshot(
        \OpenAPI\OpenAPI\Models\Operations\ComposerProjectsLocationsEnvironmentsLoadSnapshotRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComposerProjectsLocationsEnvironmentsLoadSnapshotSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComposerProjectsLocationsEnvironmentsLoadSnapshotResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{environment}:loadSnapshot', \OpenAPI\OpenAPI\Models\Operations\ComposerProjectsLocationsEnvironmentsLoadSnapshotRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "loadSnapshotRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComposerProjectsLocationsEnvironmentsLoadSnapshotRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComposerProjectsLocationsEnvironmentsLoadSnapshotResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update an environment.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComposerProjectsLocationsEnvironmentsPatchRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComposerProjectsLocationsEnvironmentsPatchSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComposerProjectsLocationsEnvironmentsPatchResponse
     */
	public function composerProjectsLocationsEnvironmentsPatch(
        \OpenAPI\OpenAPI\Models\Operations\ComposerProjectsLocationsEnvironmentsPatchRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComposerProjectsLocationsEnvironmentsPatchSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComposerProjectsLocationsEnvironmentsPatchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{name}', \OpenAPI\OpenAPI\Models\Operations\ComposerProjectsLocationsEnvironmentsPatchRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "environmentInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComposerProjectsLocationsEnvironmentsPatchRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComposerProjectsLocationsEnvironmentsPatchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a snapshots of a Cloud Composer environment. As a result of this operation, snapshot of environment's state is stored in a location specified in the SaveSnapshotRequest.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComposerProjectsLocationsEnvironmentsSaveSnapshotRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComposerProjectsLocationsEnvironmentsSaveSnapshotSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComposerProjectsLocationsEnvironmentsSaveSnapshotResponse
     */
	public function composerProjectsLocationsEnvironmentsSaveSnapshot(
        \OpenAPI\OpenAPI\Models\Operations\ComposerProjectsLocationsEnvironmentsSaveSnapshotRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComposerProjectsLocationsEnvironmentsSaveSnapshotSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComposerProjectsLocationsEnvironmentsSaveSnapshotResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{environment}:saveSnapshot', \OpenAPI\OpenAPI\Models\Operations\ComposerProjectsLocationsEnvironmentsSaveSnapshotRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "saveSnapshotRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComposerProjectsLocationsEnvironmentsSaveSnapshotRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComposerProjectsLocationsEnvironmentsSaveSnapshotResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List ImageVersions for provided location.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComposerProjectsLocationsImageVersionsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComposerProjectsLocationsImageVersionsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComposerProjectsLocationsImageVersionsListResponse
     */
	public function composerProjectsLocationsImageVersionsList(
        \OpenAPI\OpenAPI\Models\Operations\ComposerProjectsLocationsImageVersionsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComposerProjectsLocationsImageVersionsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComposerProjectsLocationsImageVersionsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}/imageVersions', \OpenAPI\OpenAPI\Models\Operations\ComposerProjectsLocationsImageVersionsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComposerProjectsLocationsImageVersionsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComposerProjectsLocationsImageVersionsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listImageVersionsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListImageVersionsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Deletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComposerProjectsLocationsOperationsDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComposerProjectsLocationsOperationsDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComposerProjectsLocationsOperationsDeleteResponse
     */
	public function composerProjectsLocationsOperationsDelete(
        \OpenAPI\OpenAPI\Models\Operations\ComposerProjectsLocationsOperationsDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComposerProjectsLocationsOperationsDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComposerProjectsLocationsOperationsDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{name}', \OpenAPI\OpenAPI\Models\Operations\ComposerProjectsLocationsOperationsDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComposerProjectsLocationsOperationsDeleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComposerProjectsLocationsOperationsDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->empty = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComposerProjectsLocationsOperationsGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComposerProjectsLocationsOperationsGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComposerProjectsLocationsOperationsGetResponse
     */
	public function composerProjectsLocationsOperationsGet(
        \OpenAPI\OpenAPI\Models\Operations\ComposerProjectsLocationsOperationsGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComposerProjectsLocationsOperationsGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComposerProjectsLocationsOperationsGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{name}', \OpenAPI\OpenAPI\Models\Operations\ComposerProjectsLocationsOperationsGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComposerProjectsLocationsOperationsGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComposerProjectsLocationsOperationsGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComposerProjectsLocationsOperationsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComposerProjectsLocationsOperationsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComposerProjectsLocationsOperationsListResponse
     */
	public function composerProjectsLocationsOperationsList(
        \OpenAPI\OpenAPI\Models\Operations\ComposerProjectsLocationsOperationsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComposerProjectsLocationsOperationsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComposerProjectsLocationsOperationsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{name}/operations', \OpenAPI\OpenAPI\Models\Operations\ComposerProjectsLocationsOperationsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComposerProjectsLocationsOperationsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComposerProjectsLocationsOperationsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listOperationsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListOperationsResponse', 'json');
            }
        }

        return $response;
    }
}