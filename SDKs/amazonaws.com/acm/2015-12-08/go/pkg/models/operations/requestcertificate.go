// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// RequestCertificateXAmzTargetEnum
type RequestCertificateXAmzTargetEnum string

const (
	RequestCertificateXAmzTargetEnumCertificateManagerRequestCertificate RequestCertificateXAmzTargetEnum = "CertificateManager.RequestCertificate"
)

func (e *RequestCertificateXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "CertificateManager.RequestCertificate":
		*e = RequestCertificateXAmzTargetEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for RequestCertificateXAmzTargetEnum: %s", s)
	}
}

type RequestCertificateRequest struct {
	RequestCertificateRequest shared.RequestCertificateRequest `request:"mediaType=application/json"`
	XAmzAlgorithm             *string                          `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256         *string                          `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential            *string                          `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate                  *string                          `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken         *string                          `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature             *string                          `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders         *string                          `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget                RequestCertificateXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type RequestCertificateResponse struct {
	ContentType string
	// InvalidArnException
	InvalidArnException interface{}
	// InvalidDomainValidationOptionsException
	InvalidDomainValidationOptionsException interface{}
	// InvalidParameterException
	InvalidParameterException interface{}
	// InvalidTagException
	InvalidTagException interface{}
	// LimitExceededException
	LimitExceededException interface{}
	// Success
	RequestCertificateResponse *shared.RequestCertificateResponse
	StatusCode                 int
	RawResponse                *http.Response
	// TagPolicyException
	TagPolicyException interface{}
	// TooManyTagsException
	TooManyTagsException interface{}
}
