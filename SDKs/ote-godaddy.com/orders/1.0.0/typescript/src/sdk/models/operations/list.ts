/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";

/**
 * Property name that will be used to sort results. '-' indicates descending
 */
export enum ListSortEnum {
  CreatedAt = "createdAt",
  MinusCreatedAt = "-createdAt",
  OrderId = "orderId",
  MinusOrderId = "-orderId",
  PricingTotal = "pricing.total",
  MinusPricingTotal = "-pricing.total",
}

export class ListRequest extends SpeakeasyBase {
  /**
   * Unique identifier of the Market in which the request is happening
   */
  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Market-Id",
  })
  xMarketId?: string;

  /**
   * Shopper ID to be operated on, if different from JWT<br/><b>Reseller subaccounts are not supported</b>
   */
  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Shopper-Id",
  })
  xShopperId?: string;

  /**
   * Domain name to use as the filter of results
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=domain",
  })
  domain?: string;

  /**
   * Maximum number of items to return
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=limit" })
  limit?: number;

  /**
   * Number of results to skip for pagination
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=offset",
  })
  offset?: number;

  /**
   * Parent order id to use as the filter of results
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=parentOrderId",
  })
  parentOrderId?: string;

  /**
   * Payment profile id to use as the filter of results
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=paymentProfileId",
  })
  paymentProfileId?: number;

  /**
   * End of range indicating what time-frame should be returned. Inclusive
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=periodEnd",
  })
  periodEnd?: string;

  /**
   * Start of range indicating what time-frame should be returned. Inclusive
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=periodStart",
  })
  periodStart?: string;

  /**
   * Product group id to use as the filter of results
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=productGroupId",
  })
  productGroupId?: number;

  /**
   * Property name that will be used to sort results. '-' indicates descending
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=sort" })
  sort?: ListSortEnum;
}

export class ListResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  body?: Uint8Array;

  @SpeakeasyMetadata()
  contentType: string;

  /**
   * Request was malformed
   */
  @SpeakeasyMetadata()
  error?: shared.ErrorT;

  /**
   * Too many requests received within interval
   */
  @SpeakeasyMetadata()
  errorLimit?: shared.ErrorLimit;

  /**
   * Request was successful
   */
  @SpeakeasyMetadata()
  orderList?: shared.OrderList;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;
}
