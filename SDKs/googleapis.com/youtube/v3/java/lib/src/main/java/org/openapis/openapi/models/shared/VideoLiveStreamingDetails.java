/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

/**
 * VideoLiveStreamingDetails - Details about the live streaming metadata.
 */
public class VideoLiveStreamingDetails {
    /**
     * The ID of the currently active live chat attached to this video. This field is filled only if the video is a currently live broadcast that has live chat. Once the broadcast transitions to complete this field will be removed and the live chat closed down. For persistent broadcasts that live chat id will no longer be tied to this video but rather to the new video being displayed at the persistent page.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("activeLiveChatId")
    public String activeLiveChatId;
    public VideoLiveStreamingDetails withActiveLiveChatId(String activeLiveChatId) {
        this.activeLiveChatId = activeLiveChatId;
        return this;
    }
    
    /**
     * The time that the broadcast actually ended. This value will not be available until the broadcast is over.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("actualEndTime")
    public OffsetDateTime actualEndTime;
    public VideoLiveStreamingDetails withActualEndTime(OffsetDateTime actualEndTime) {
        this.actualEndTime = actualEndTime;
        return this;
    }
    
    /**
     * The time that the broadcast actually started. This value will not be available until the broadcast begins.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("actualStartTime")
    public OffsetDateTime actualStartTime;
    public VideoLiveStreamingDetails withActualStartTime(OffsetDateTime actualStartTime) {
        this.actualStartTime = actualStartTime;
        return this;
    }
    
    /**
     * The number of viewers currently watching the broadcast. The property and its value will be present if the broadcast has current viewers and the broadcast owner has not hidden the viewcount for the video. Note that YouTube stops tracking the number of concurrent viewers for a broadcast when the broadcast ends. So, this property would not identify the number of viewers watching an archived video of a live broadcast that already ended.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("concurrentViewers")
    public String concurrentViewers;
    public VideoLiveStreamingDetails withConcurrentViewers(String concurrentViewers) {
        this.concurrentViewers = concurrentViewers;
        return this;
    }
    
    /**
     * The time that the broadcast is scheduled to end. If the value is empty or the property is not present, then the broadcast is scheduled to contiue indefinitely.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("scheduledEndTime")
    public OffsetDateTime scheduledEndTime;
    public VideoLiveStreamingDetails withScheduledEndTime(OffsetDateTime scheduledEndTime) {
        this.scheduledEndTime = scheduledEndTime;
        return this;
    }
    
    /**
     * The time that the broadcast is scheduled to begin.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("scheduledStartTime")
    public OffsetDateTime scheduledStartTime;
    public VideoLiveStreamingDetails withScheduledStartTime(OffsetDateTime scheduledStartTime) {
        this.scheduledStartTime = scheduledStartTime;
        return this;
    }
    
}
