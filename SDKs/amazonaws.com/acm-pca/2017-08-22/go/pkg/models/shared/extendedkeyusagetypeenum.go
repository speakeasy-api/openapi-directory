// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type ExtendedKeyUsageTypeEnum string

const (
	ExtendedKeyUsageTypeEnumServerAuth              ExtendedKeyUsageTypeEnum = "SERVER_AUTH"
	ExtendedKeyUsageTypeEnumClientAuth              ExtendedKeyUsageTypeEnum = "CLIENT_AUTH"
	ExtendedKeyUsageTypeEnumCodeSigning             ExtendedKeyUsageTypeEnum = "CODE_SIGNING"
	ExtendedKeyUsageTypeEnumEmailProtection         ExtendedKeyUsageTypeEnum = "EMAIL_PROTECTION"
	ExtendedKeyUsageTypeEnumTimeStamping            ExtendedKeyUsageTypeEnum = "TIME_STAMPING"
	ExtendedKeyUsageTypeEnumOcspSigning             ExtendedKeyUsageTypeEnum = "OCSP_SIGNING"
	ExtendedKeyUsageTypeEnumSmartCardLogin          ExtendedKeyUsageTypeEnum = "SMART_CARD_LOGIN"
	ExtendedKeyUsageTypeEnumDocumentSigning         ExtendedKeyUsageTypeEnum = "DOCUMENT_SIGNING"
	ExtendedKeyUsageTypeEnumCertificateTransparency ExtendedKeyUsageTypeEnum = "CERTIFICATE_TRANSPARENCY"
)

func (e *ExtendedKeyUsageTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "SERVER_AUTH":
		fallthrough
	case "CLIENT_AUTH":
		fallthrough
	case "CODE_SIGNING":
		fallthrough
	case "EMAIL_PROTECTION":
		fallthrough
	case "TIME_STAMPING":
		fallthrough
	case "OCSP_SIGNING":
		fallthrough
	case "SMART_CARD_LOGIN":
		fallthrough
	case "DOCUMENT_SIGNING":
		fallthrough
	case "CERTIFICATE_TRANSPARENCY":
		*e = ExtendedKeyUsageTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ExtendedKeyUsageTypeEnum: %s", s)
	}
}
