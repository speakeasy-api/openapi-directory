/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import {
  objectToClass,
  SpeakeasyBase,
  SpeakeasyMetadata,
} from "../../../internal/utils";
import { ExperimentAction } from "./experimentaction";
import { ExperimentLogConfiguration } from "./experimentlogconfiguration";
import { ExperimentState } from "./experimentstate";
import { ExperimentStopCondition } from "./experimentstopcondition";
import { ExperimentTarget } from "./experimenttarget";
import { Expose, Transform, Type } from "class-transformer";

/**
 * Describes an experiment.
 */
export class Experiment extends SpeakeasyBase {
  @SpeakeasyMetadata({ elemType: ExperimentAction })
  @Expose({ name: "actions" })
  @Transform(
    ({ value }) => {
      const obj: Record<string, ExperimentAction> = {};
      for (const key in value) {
        obj[key] = objectToClass(value[key], ExperimentAction);
      }
      return obj;
    },
    { toClassOnly: true }
  )
  actions?: Record<string, ExperimentAction>;

  @SpeakeasyMetadata()
  @Expose({ name: "creationTime" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  creationTime?: Date;

  @SpeakeasyMetadata()
  @Expose({ name: "endTime" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  endTime?: Date;

  @SpeakeasyMetadata()
  @Expose({ name: "experimentTemplateId" })
  experimentTemplateId?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "logConfiguration" })
  @Type(() => ExperimentLogConfiguration)
  logConfiguration?: ExperimentLogConfiguration;

  @SpeakeasyMetadata()
  @Expose({ name: "roleArn" })
  roleArn?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "startTime" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  startTime?: Date;

  @SpeakeasyMetadata()
  @Expose({ name: "state" })
  @Type(() => ExperimentState)
  state?: ExperimentState;

  @SpeakeasyMetadata({ elemType: ExperimentStopCondition })
  @Expose({ name: "stopConditions" })
  @Type(() => ExperimentStopCondition)
  stopConditions?: ExperimentStopCondition[];

  @SpeakeasyMetadata()
  @Expose({ name: "tags" })
  tags?: Record<string, string>;

  @SpeakeasyMetadata({ elemType: ExperimentTarget })
  @Expose({ name: "targets" })
  @Transform(
    ({ value }) => {
      const obj: Record<string, ExperimentTarget> = {};
      for (const key in value) {
        obj[key] = objectToClass(value[key], ExperimentTarget);
      }
      return obj;
    },
    { toClassOnly: true }
  )
  targets?: Record<string, ExperimentTarget>;
}
