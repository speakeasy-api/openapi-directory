// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// AnalyzeDocumentXAmzTargetEnum
type AnalyzeDocumentXAmzTargetEnum string

const (
	AnalyzeDocumentXAmzTargetEnumTextractAnalyzeDocument AnalyzeDocumentXAmzTargetEnum = "Textract.AnalyzeDocument"
)

func (e AnalyzeDocumentXAmzTargetEnum) ToPointer() *AnalyzeDocumentXAmzTargetEnum {
	return &e
}

func (e *AnalyzeDocumentXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Textract.AnalyzeDocument":
		*e = AnalyzeDocumentXAmzTargetEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AnalyzeDocumentXAmzTargetEnum: %v", v)
	}
}

type AnalyzeDocumentRequest struct {
	AnalyzeDocumentRequest shared.AnalyzeDocumentRequest `request:"mediaType=application/json"`
	XAmzAlgorithm          *string                       `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256      *string                       `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential         *string                       `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate               *string                       `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken      *string                       `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature          *string                       `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders      *string                       `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget             AnalyzeDocumentXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type AnalyzeDocumentResponse struct {
	// AccessDeniedException
	AccessDeniedException interface{}
	// Success
	AnalyzeDocumentResponse *shared.AnalyzeDocumentResponse
	// BadDocumentException
	BadDocumentException interface{}
	ContentType          string
	// DocumentTooLargeException
	DocumentTooLargeException interface{}
	// HumanLoopQuotaExceededException
	HumanLoopQuotaExceededException interface{}
	// InternalServerError
	InternalServerError interface{}
	// InvalidParameterException
	InvalidParameterException interface{}
	// InvalidS3ObjectException
	InvalidS3ObjectException interface{}
	// ProvisionedThroughputExceededException
	ProvisionedThroughputExceededException interface{}
	StatusCode                             int
	RawResponse                            *http.Response
	// ThrottlingException
	ThrottlingException interface{}
	// UnsupportedDocumentException
	UnsupportedDocumentException interface{}
}
