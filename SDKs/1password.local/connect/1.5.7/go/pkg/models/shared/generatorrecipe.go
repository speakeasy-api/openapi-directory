// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type GeneratorRecipeCharacterSetsEnum string

const (
	GeneratorRecipeCharacterSetsEnumLetters GeneratorRecipeCharacterSetsEnum = "LETTERS"
	GeneratorRecipeCharacterSetsEnumDigits  GeneratorRecipeCharacterSetsEnum = "DIGITS"
	GeneratorRecipeCharacterSetsEnumSymbols GeneratorRecipeCharacterSetsEnum = "SYMBOLS"
)

func (e GeneratorRecipeCharacterSetsEnum) ToPointer() *GeneratorRecipeCharacterSetsEnum {
	return &e
}

func (e *GeneratorRecipeCharacterSetsEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "LETTERS":
		fallthrough
	case "DIGITS":
		fallthrough
	case "SYMBOLS":
		*e = GeneratorRecipeCharacterSetsEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GeneratorRecipeCharacterSetsEnum: %v", v)
	}
}

// GeneratorRecipe - The recipe is used in conjunction with the "generate" property to set the character set used to generate a new secure value
type GeneratorRecipe struct {
	CharacterSets []GeneratorRecipeCharacterSetsEnum `json:"characterSets,omitempty"`
	// List of all characters that should be excluded from generated passwords.
	ExcludeCharacters *string `json:"excludeCharacters,omitempty"`
	// Length of the generated value
	Length *int64 `json:"length,omitempty"`
}
