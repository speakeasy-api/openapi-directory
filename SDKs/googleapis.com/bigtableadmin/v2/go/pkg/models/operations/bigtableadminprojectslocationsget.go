// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type BigtableadminProjectsLocationsGetSecurityOption1 struct {
	Oauth2  shared.SchemeOauth2  `security:"scheme,type=oauth2"`
	Oauth2c shared.SchemeOauth2c `security:"scheme,type=oauth2"`
}

type BigtableadminProjectsLocationsGetSecurityOption2 struct {
	Oauth2  shared.SchemeOauth2  `security:"scheme,type=oauth2"`
	Oauth2c shared.SchemeOauth2c `security:"scheme,type=oauth2"`
}

type BigtableadminProjectsLocationsGetSecurityOption3 struct {
	Oauth2  shared.SchemeOauth2  `security:"scheme,type=oauth2"`
	Oauth2c shared.SchemeOauth2c `security:"scheme,type=oauth2"`
}

type BigtableadminProjectsLocationsGetSecurityOption4 struct {
	Oauth2  shared.SchemeOauth2  `security:"scheme,type=oauth2"`
	Oauth2c shared.SchemeOauth2c `security:"scheme,type=oauth2"`
}

type BigtableadminProjectsLocationsGetSecurityOption5 struct {
	Oauth2  shared.SchemeOauth2  `security:"scheme,type=oauth2"`
	Oauth2c shared.SchemeOauth2c `security:"scheme,type=oauth2"`
}

type BigtableadminProjectsLocationsGetSecurityOption6 struct {
	Oauth2  shared.SchemeOauth2  `security:"scheme,type=oauth2"`
	Oauth2c shared.SchemeOauth2c `security:"scheme,type=oauth2"`
}

type BigtableadminProjectsLocationsGetSecurityOption7 struct {
	Oauth2  shared.SchemeOauth2  `security:"scheme,type=oauth2"`
	Oauth2c shared.SchemeOauth2c `security:"scheme,type=oauth2"`
}

type BigtableadminProjectsLocationsGetSecurity struct {
	Option1 *BigtableadminProjectsLocationsGetSecurityOption1 `security:"option"`
	Option2 *BigtableadminProjectsLocationsGetSecurityOption2 `security:"option"`
	Option3 *BigtableadminProjectsLocationsGetSecurityOption3 `security:"option"`
	Option4 *BigtableadminProjectsLocationsGetSecurityOption4 `security:"option"`
	Option5 *BigtableadminProjectsLocationsGetSecurityOption5 `security:"option"`
	Option6 *BigtableadminProjectsLocationsGetSecurityOption6 `security:"option"`
	Option7 *BigtableadminProjectsLocationsGetSecurityOption7 `security:"option"`
}

type BigtableadminProjectsLocationsGetPathParams struct {
	// Resource name for the location.
	Name string `pathParam:"style=simple,explode=false,name=name"`
}

// BigtableadminProjectsLocationsGetViewEnum - The view to be applied to the returned table's fields. Defaults to `SCHEMA_VIEW` if unspecified.
type BigtableadminProjectsLocationsGetViewEnum string

const (
	BigtableadminProjectsLocationsGetViewEnumViewUnspecified BigtableadminProjectsLocationsGetViewEnum = "VIEW_UNSPECIFIED"
	BigtableadminProjectsLocationsGetViewEnumNameOnly        BigtableadminProjectsLocationsGetViewEnum = "NAME_ONLY"
	BigtableadminProjectsLocationsGetViewEnumSchemaView      BigtableadminProjectsLocationsGetViewEnum = "SCHEMA_VIEW"
	BigtableadminProjectsLocationsGetViewEnumReplicationView BigtableadminProjectsLocationsGetViewEnum = "REPLICATION_VIEW"
	BigtableadminProjectsLocationsGetViewEnumEncryptionView  BigtableadminProjectsLocationsGetViewEnum = "ENCRYPTION_VIEW"
	BigtableadminProjectsLocationsGetViewEnumStatsView       BigtableadminProjectsLocationsGetViewEnum = "STATS_VIEW"
	BigtableadminProjectsLocationsGetViewEnumFull            BigtableadminProjectsLocationsGetViewEnum = "FULL"
)

func (e *BigtableadminProjectsLocationsGetViewEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "VIEW_UNSPECIFIED":
		fallthrough
	case "NAME_ONLY":
		fallthrough
	case "SCHEMA_VIEW":
		fallthrough
	case "REPLICATION_VIEW":
		fallthrough
	case "ENCRYPTION_VIEW":
		fallthrough
	case "STATS_VIEW":
		fallthrough
	case "FULL":
		*e = BigtableadminProjectsLocationsGetViewEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for BigtableadminProjectsLocationsGetViewEnum: %s", s)
	}
}

type BigtableadminProjectsLocationsGetQueryParams struct {
	// V1 error format.
	DollarXgafv *shared.XgafvEnum `queryParam:"style=form,explode=true,name=$.xgafv"`
	// OAuth access token.
	AccessToken *string `queryParam:"style=form,explode=true,name=access_token"`
	// Data format for response.
	Alt *shared.AltEnum `queryParam:"style=form,explode=true,name=alt"`
	// JSONP
	Callback *string `queryParam:"style=form,explode=true,name=callback"`
	// Selector specifying which fields to include in a partial response.
	Fields *string `queryParam:"style=form,explode=true,name=fields"`
	// API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
	Key *string `queryParam:"style=form,explode=true,name=key"`
	// OAuth 2.0 token for the current user.
	OauthToken *string `queryParam:"style=form,explode=true,name=oauth_token"`
	// Returns response with indentations and line breaks.
	PrettyPrint *bool `queryParam:"style=form,explode=true,name=prettyPrint"`
	// Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
	QuotaUser *string `queryParam:"style=form,explode=true,name=quotaUser"`
	// Legacy upload protocol for media (e.g. "media", "multipart").
	UploadType *string `queryParam:"style=form,explode=true,name=uploadType"`
	// Upload protocol for media (e.g. "raw", "multipart").
	UploadProtocol *string `queryParam:"style=form,explode=true,name=upload_protocol"`
	// The view to be applied to the returned table's fields. Defaults to `SCHEMA_VIEW` if unspecified.
	View *BigtableadminProjectsLocationsGetViewEnum `queryParam:"style=form,explode=true,name=view"`
}

type BigtableadminProjectsLocationsGetRequest struct {
	PathParams  BigtableadminProjectsLocationsGetPathParams
	QueryParams BigtableadminProjectsLocationsGetQueryParams
	Security    BigtableadminProjectsLocationsGetSecurity
}

type BigtableadminProjectsLocationsGetResponse struct {
	ContentType string
	// Successful response
	Location    *shared.Location
	StatusCode  int
	RawResponse *http.Response
}
