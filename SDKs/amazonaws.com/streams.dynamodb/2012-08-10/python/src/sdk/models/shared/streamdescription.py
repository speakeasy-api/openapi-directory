"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from ..shared import keyschemaelement as shared_keyschemaelement
from ..shared import shard as shared_shard
from ..shared import streamstatus_enum as shared_streamstatus_enum
from ..shared import streamviewtype_enum as shared_streamviewtype_enum
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from marshmallow import fields
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class StreamDescription:
    r"""Represents all of the data describing a particular stream."""
    
    creation_request_date_time: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CreationRequestDateTime'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})  
    key_schema: Optional[list[shared_keyschemaelement.KeySchemaElement]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('KeySchema'), 'exclude': lambda f: f is None }})  
    last_evaluated_shard_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('LastEvaluatedShardId'), 'exclude': lambda f: f is None }})  
    shards: Optional[list[shared_shard.Shard]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Shards'), 'exclude': lambda f: f is None }})  
    stream_arn: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('StreamArn'), 'exclude': lambda f: f is None }})  
    stream_label: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('StreamLabel'), 'exclude': lambda f: f is None }})  
    stream_status: Optional[shared_streamstatus_enum.StreamStatusEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('StreamStatus'), 'exclude': lambda f: f is None }})  
    stream_view_type: Optional[shared_streamviewtype_enum.StreamViewTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('StreamViewType'), 'exclude': lambda f: f is None }})  
    table_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TableName'), 'exclude': lambda f: f is None }})  
    