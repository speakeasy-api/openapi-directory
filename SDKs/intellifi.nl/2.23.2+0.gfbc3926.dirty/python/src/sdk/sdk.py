"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from .authinfo import Authinfo
from .blobs import Blobs
from .events import Events
from .items import Items
from .keys import Keys
from .kvpairs import Kvpairs
from .locationrules import Locationrules
from .locations import Locations
from .presences import Presences
from .services import Services
from .sets import Sets
from .spots import Spots
from .spotsets import Spotsets
from .subscriptions import Subscriptions
from .users import Users
from sdk.models import shared

SERVERS = [
    "https://{protocol}://{customer}.intellifi.{tld}/api",
    r"""Cloud hosted Brain API endpoint."""
]
"""Contains the list of servers available to the SDK"""

class SDK:
    r"""This document describes the [Intellifi Brain](https://intellifi.zendesk.com/hc/en-us/categories/360000685454)
    Web API specification using the [OpenAPI specification](https://github.com/OAI/OpenAPI-Specification).
    
    The Brain Web API is a RESTful API that allows you to interact with the
    [Intellifi devices](https://intellifi.zendesk.com/hc/en-us/categories/360000685434) and
    services in a powerful and simple way. Our end-to-end solution allows you to
    localize your items/assets based on technologies such as RFID and Bluetooth.
    
    # Try it out!
    
    The API can be tried out and tested using the ['api-doc/tryitout' endpoint on this site](./tryitout/).
    This UI allows anyone to visualize and interact with the API’s resources without having any of the implementation logic in place.
    It’s automatically generated from this Specification, with the visual documentation making it easy for back end implementation and client side consumption.
    
    # Authentication
    
    Applications are required to provide some form of authentication to the API
    for every secured endpoint. The Brain offers two forms of authentication.
    
    - API key (Via an HTTP request header or URL parameter)
    - Session cookie
    
    <!-- ReDoc-Inject: <security-definitions> -->
    
    # See also
    
    - About Intellifi and what we do: [intellifi.nl](https://intellifi.nl)
    - Technical and background information: [intellifi.zendesk.com](https://intellifi.zendesk.com)
    https://intellifi.zendesk.com - Find out more
    """
    authinfo: Authinfo
    r"""Read-only route providing information about how the requesting client is authenticated on the API, as well as corresponding permissions."""
    blobs: Blobs
    r"""The `blobs` resource provides a service for storing binary objects on the Brain, e.g. images.
    Intended for applications that interact with the Brain but do not or cannot have their own (centralized) persistent storage.
    
    See also the `kvpairs` resource.
    """
    events: Events
    r"""The `events` resource temporarily holds Brain events that match an event subscription in the `subscriptions` resource.
    The subscription determines how long the events are held.
    
    See also the `subscriptions` resource.
    https://intellifi.zendesk.com/hc/en-us/sections/360001588534
    """
    items: Items
    r"""The `items` resource contains data about things that can be tracked using the Brain.
    When an item is detected for the first time by a device connected to the Brain, it will be added to this resource.
    It will then be updated with information about where the item currently is, or where it has been seen for the last time.
    https://intellifi.zendesk.com/hc/en-us/articles/360007502554
    """
    keys: Keys
    r"""The `keys` resource contains the access keys used to authenticate requests to this API.
    
    Note that this resource is only accessible for administrator users logged into the Brain Management Console.
    It is not possible to access this resource using API key authentication.
    This resource is therefore irrelevant to most applications.
    """
    kvpairs: Kvpairs
    r"""The `kvpairs` resource provides a service for storing generic JSON key/value pairs on the Brain.
    Intended for applications that interact with the Brain but do not or cannot have their own (centralized) persistent storage.
    
    See also the `blobs` resource.
    """
    locationrules: Locationrules
    r"""Location rules are directives for the localization engine that may be useful for certain solutions."""
    locations: Locations
    r"""The `locations` resource is an abstraction for the area around a physical location that items can be localized at.
    https://intellifi.zendesk.com/hc/en-us/articles/360007502554
    """
    presences: Presences
    r"""The `presences` resource is an abstraction for the detection of an item (from the `items` resource) at a location (from the `locations` resource).
    Presences are always kept current by the Brain, i.e. if the hold time of a presence expires it is simply removed from the resource.
    https://intellifi.zendesk.com/hc/en-us/articles/360008309313
    """
    services: Services
    r"""The Brain consists of several software components with their own responsibilities, referred to as \\"services\\".
    Some of these services have status information and/or configuration that can be managed using the `services` resource.
    """
    sets: Sets
    r"""It can be useful to group items or Smartspots in a list. The `sets` resource can be used to create and manage such list sets.
    Sets can be utilized in various Brain Management Console utilities and can also be useful in custom Brain applications.
    https://intellifi.zendesk.com/hc/en-us/articles/360007824993
    """
    spots: Spots
    r"""The `spots` resource contains representations of Smartspot devices that have connected to this Brain at least once.
    It is possible to configure Smartspots through this resource.
    
    Smartspots also have their own locally stored sets, referred to as \"spotsets\".
    Spotsets can be created and managed within a single spot instance or by using `spotsets` resource.
    Created or updated spotsets are automatically synced between Smartspot and server.
    https://intellifi.zendesk.com/hc/en-us/categories/360000685434
    """
    spotsets: Spotsets
    r"""The `spotsets` resource contains a collection of set definitons for each Smartspot and allows for remote mananagement.
    Spotsets are stored and used on the Smartspot locally and synced between Smartspot and server.
    Spotsets primarly are used as an input for Sense&Control.
    https://intellifi.zendesk.com/hc/en-us/articles/360009282834
    """
    subscriptions: Subscriptions
    r"""The `subscriptions` resource contains rules to store and/or deliver events from the Brain event system.
    
    See also the `events` resource.
    https://intellifi.zendesk.com/hc/en-us/sections/360001588534
    """
    users: Users
    r"""The `users` resource contains the user accounts that can log into the Brain Management Console.
    
    Note that this resource is only accessible for administrator users logged into the Brain Management Console.
    It is not possible to access this resource using API key authentication.
    This resource is therefore irrelevant to most applications.
    """

    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str = SERVERS[0]
    _language: str = "python"
    _sdk_version: str = "0.0.1"
    _gen_version: str = "internal"

    def __init__(self,
                 security: shared.Security = None,
                 server_url: str = None,
                 url_params: dict[str, str] = None,
                 client: requests_http.Session = None
                 ) -> None:
        """Instantiates the SDK configuring it with the provided parameters.
        
        :param security: The security details required for authentication
        :type security: shared.Security
        :param server_url: The server URL to use for all operations
        :type server_url: str
        :param url_params: Parameters to optionally template the server URL with
        :type url_params: dict[str, str]
        :param client: The requests.Session HTTP client to use for all operations
        :type client: requests_http.Session        
        """
        self._client = requests_http.Session()
        
        
        if server_url is not None:
            if url_params is not None:
                self._server_url = utils.template_url(server_url, url_params)
            else:
                self._server_url = server_url

        if client is not None:
            self._client = client
        
        self._security_client = utils.configure_security_client(self._client, security)
        

        self._init_sdks()
    
    def _init_sdks(self):
        self.authinfo = Authinfo(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.blobs = Blobs(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.events = Events(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.items = Items(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.keys = Keys(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.kvpairs = Kvpairs(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.locationrules = Locationrules(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.locations = Locations(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.presences = Presences(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.services = Services(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.sets = Sets(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.spots = Spots(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.spotsets = Spotsets(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.subscriptions = Subscriptions(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.users = Users(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
    