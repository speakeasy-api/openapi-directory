/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * NodeInput - A TPU instance.
 */
public class NodeInput {
    /**
     * Required. The type of hardware accelerators associated with this node.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("acceleratorType")
    public String acceleratorType;
    public NodeInput withAcceleratorType(String acceleratorType) {
        this.acceleratorType = acceleratorType;
        return this;
    }
    
    /**
     * The CIDR block that the TPU node will use when selecting an IP address. This CIDR block must be a /29 block; the Compute Engine networks API forbids a smaller block, and using a larger block would be wasteful (a node can only consume one IP address). Errors will occur if the CIDR block has already been used for a currently existing TPU node, the CIDR block conflicts with any subnetworks in the user's provided network, or the provided network is peered with another network that is using that CIDR block.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("cidrBlock")
    public String cidrBlock;
    public NodeInput withCidrBlock(String cidrBlock) {
        this.cidrBlock = cidrBlock;
        return this;
    }
    
    /**
     * The user-supplied description of the TPU. Maximum of 512 characters.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    public String description;
    public NodeInput withDescription(String description) {
        this.description = description;
        return this;
    }
    
    /**
     * The health status of the TPU node.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("health")
    public NodeHealthEnum health;
    public NodeInput withHealth(NodeHealthEnum health) {
        this.health = health;
        return this;
    }
    
    /**
     * Output only. DEPRECATED! Use network_endpoints instead. The network address for the TPU Node as visible to Compute Engine instances.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ipAddress")
    public String ipAddress;
    public NodeInput withIpAddress(String ipAddress) {
        this.ipAddress = ipAddress;
        return this;
    }
    
    /**
     * Resource labels to represent user-provided metadata.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("labels")
    public java.util.Map<String, String> labels;
    public NodeInput withLabels(java.util.Map<String, String> labels) {
        this.labels = labels;
        return this;
    }
    
    /**
     * The name of a network they wish to peer the TPU node to. It must be a preexisting Compute Engine network inside of the project on which this API has been activated. If none is provided, "default" will be used.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("network")
    public String network;
    public NodeInput withNetwork(String network) {
        this.network = network;
        return this;
    }
    
    /**
     * Output only. DEPRECATED! Use network_endpoints instead. The network port for the TPU Node as visible to Compute Engine instances.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("port")
    public String port;
    public NodeInput withPort(String port) {
        this.port = port;
        return this;
    }
    
    /**
     * Sets the scheduling options for this node.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("schedulingConfig")
    public SchedulingConfig schedulingConfig;
    public NodeInput withSchedulingConfig(SchedulingConfig schedulingConfig) {
        this.schedulingConfig = schedulingConfig;
        return this;
    }
    
    /**
     * Required. The version of Tensorflow running in the Node.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tensorflowVersion")
    public String tensorflowVersion;
    public NodeInput withTensorflowVersion(String tensorflowVersion) {
        this.tensorflowVersion = tensorflowVersion;
        return this;
    }
    
    /**
     * Whether the VPC peering for the node is set up through Service Networking API. The VPC Peering should be set up before provisioning the node. If this field is set, cidr_block field should not be specified. If the network, that you want to peer the TPU Node to, is Shared VPC networks, the node must be created with this this field enabled.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("useServiceNetworking")
    public Boolean useServiceNetworking;
    public NodeInput withUseServiceNetworking(Boolean useServiceNetworking) {
        this.useServiceNetworking = useServiceNetworking;
        return this;
    }
    
}
