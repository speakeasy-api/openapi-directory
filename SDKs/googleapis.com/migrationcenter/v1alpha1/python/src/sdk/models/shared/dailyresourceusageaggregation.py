"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import dailyresourceusageaggregationcpu as shared_dailyresourceusageaggregationcpu
from ..shared import dailyresourceusageaggregationdisk as shared_dailyresourceusageaggregationdisk
from ..shared import dailyresourceusageaggregationmemory as shared_dailyresourceusageaggregationmemory
from ..shared import dailyresourceusageaggregationnetwork as shared_dailyresourceusageaggregationnetwork
from ..shared import date_ as shared_date_
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class DailyResourceUsageAggregation:
    r"""Usage data aggregation for a single day."""
    
    cpu: Optional[shared_dailyresourceusageaggregationcpu.DailyResourceUsageAggregationCPU] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cpu'), 'exclude': lambda f: f is None }})
    r"""Statistical aggregation of CPU usage."""  
    date_: Optional[shared_date_.Date] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('date'), 'exclude': lambda f: f is None }})
    r"""Represents a whole or partial calendar date, such as a birthday. The time of day and time zone are either specified elsewhere or are insignificant. The date is relative to the Gregorian Calendar. This can represent one of the following: * A full date, with non-zero year, month, and day values. * A month and day, with a zero year (for example, an anniversary). * A year on its own, with a zero month and a zero day. * A year and month, with a zero day (for example, a credit card expiration date). Related types: * google.type.TimeOfDay * google.type.DateTime * google.protobuf.Timestamp"""  
    disk: Optional[shared_dailyresourceusageaggregationdisk.DailyResourceUsageAggregationDisk] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('disk'), 'exclude': lambda f: f is None }})
    r"""Statistical aggregation of disk usage."""  
    memory: Optional[shared_dailyresourceusageaggregationmemory.DailyResourceUsageAggregationMemory] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('memory'), 'exclude': lambda f: f is None }})
    r"""Statistical aggregation of memory usage."""  
    network: Optional[shared_dailyresourceusageaggregationnetwork.DailyResourceUsageAggregationNetwork] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('network'), 'exclude': lambda f: f is None }})
    r"""Statistical aggregation of network usage."""  
    