// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// CountPendingDecisionTasksXAmzTargetEnum
type CountPendingDecisionTasksXAmzTargetEnum string

const (
	CountPendingDecisionTasksXAmzTargetEnumSimpleWorkflowServiceCountPendingDecisionTasks CountPendingDecisionTasksXAmzTargetEnum = "SimpleWorkflowService.CountPendingDecisionTasks"
)

func (e *CountPendingDecisionTasksXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "SimpleWorkflowService.CountPendingDecisionTasks":
		*e = CountPendingDecisionTasksXAmzTargetEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CountPendingDecisionTasksXAmzTargetEnum: %s", s)
	}
}

type CountPendingDecisionTasksHeaders struct {
	XAmzAlgorithm     *string                                 `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string                                 `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string                                 `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string                                 `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string                                 `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string                                 `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string                                 `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget        CountPendingDecisionTasksXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type CountPendingDecisionTasksRequest struct {
	Headers CountPendingDecisionTasksHeaders
	Request shared.CountPendingDecisionTasksInput `request:"mediaType=application/json"`
}

type CountPendingDecisionTasksResponse struct {
	ContentType string
	// OperationNotPermittedFault
	OperationNotPermittedFault interface{}
	// Success
	PendingTaskCount *shared.PendingTaskCount
	StatusCode       int
	RawResponse      *http.Response
	// UnknownResourceFault
	UnknownResourceFault interface{}
}
