// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// DisassociateLicenseLicenseTypeEnum - The type of license to remove from the workspace.
type DisassociateLicenseLicenseTypeEnum string

const (
	DisassociateLicenseLicenseTypeEnumEnterprise          DisassociateLicenseLicenseTypeEnum = "ENTERPRISE"
	DisassociateLicenseLicenseTypeEnumEnterpriseFreeTrial DisassociateLicenseLicenseTypeEnum = "ENTERPRISE_FREE_TRIAL"
)

func (e *DisassociateLicenseLicenseTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "ENTERPRISE":
		fallthrough
	case "ENTERPRISE_FREE_TRIAL":
		*e = DisassociateLicenseLicenseTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for DisassociateLicenseLicenseTypeEnum: %s", s)
	}
}

type DisassociateLicensePathParams struct {
	// The type of license to remove from the workspace.
	LicenseType DisassociateLicenseLicenseTypeEnum `pathParam:"style=simple,explode=false,name=licenseType"`
	// The ID of the workspace to remove the Grafana Enterprise license from.
	WorkspaceID string `pathParam:"style=simple,explode=false,name=workspaceId"`
}

type DisassociateLicenseHeaders struct {
	XAmzAlgorithm     *string `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
}

type DisassociateLicenseRequest struct {
	PathParams DisassociateLicensePathParams
	Headers    DisassociateLicenseHeaders
}

type DisassociateLicenseResponse struct {
	// AccessDeniedException
	AccessDeniedException interface{}
	ContentType           string
	// Success
	DisassociateLicenseResponse *shared.DisassociateLicenseResponse
	// InternalServerException
	InternalServerException interface{}
	// ResourceNotFoundException
	ResourceNotFoundException interface{}
	StatusCode                int
	RawResponse               *http.Response
	// ThrottlingException
	ThrottlingException interface{}
	// ValidationException
	ValidationException interface{}
}
