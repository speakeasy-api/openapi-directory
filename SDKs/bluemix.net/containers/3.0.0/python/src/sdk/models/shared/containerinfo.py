"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from ..shared import containerconfig as shared_containerconfig
from ..shared import containerstate as shared_containerstate
from ..shared import group as shared_group
from ..shared import hostconfig as shared_hostconfig
from ..shared import networksetting as shared_networksetting
from ..shared import volume as shared_volume
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from marshmallow import fields
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ContainerInfo:
    r"""OK. A list with detailed information about the container is returned."""
    
    bluemix_app: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('BluemixApp'), 'exclude': lambda f: f is None }})
    r"""The name of the Cloud Foundry app that was bound to the container during creation."""  
    bluemix_services: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('BluemixServices'), 'exclude': lambda f: f is None }})
    r"""The name of the Bluemix service instance that was bound to the container during creation."""  
    config: Optional[shared_containerconfig.ContainerConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Config'), 'exclude': lambda f: f is None }})  
    container_state: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ContainerState'), 'exclude': lambda f: f is None }})
    r"""The current status of the container. This state can either be transient, such as BUILDING or NETWORKING, or non-transient, such as RUNNING, SHUTDOWN, CRASHED, or SUSPENDED."""  
    created: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Created'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""The date and time the container was created."""  
    group: Optional[shared_group.Group] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Group'), 'exclude': lambda f: f is None }})  
    host_config: Optional[shared_hostconfig.HostConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('HostConfig'), 'exclude': lambda f: f is None }})  
    host_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('HostId'), 'exclude': lambda f: f is None }})
    r"""The ID representing the physical compute host."""  
    human_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Human_Id'), 'exclude': lambda f: f is None }})
    r"""The name of the container."""  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Id'), 'exclude': lambda f: f is None }})
    r"""Unique identifier representing a container."""  
    image: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Image'), 'exclude': lambda f: f is None }})
    r"""Unique identifier representing a container image."""  
    mounts: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Mounts'), 'exclude': lambda f: f is None }})
    r"""A list of volumes that are mounted to the container."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Name'), 'exclude': lambda f: f is None }})
    r"""The name of the container."""  
    network_settings: Optional[shared_networksetting.NetworkSetting] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('NetworkSettings'), 'exclude': lambda f: f is None }})  
    path: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Path'), 'exclude': lambda f: f is None }})
    r"""The environment variable indicating the binary location."""  
    resolve_conf_path: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ResolveConfPath'), 'exclude': lambda f: f is None }})
    r"""Path to the resolve.conf file inside the container. The resolve.conf file is used to resolve the DNS servers."""  
    state: Optional[shared_containerstate.ContainerState] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('State'), 'exclude': lambda f: f is None }})  
    volumes: Optional[shared_volume.Volume] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Volumes'), 'exclude': lambda f: f is None }})  
    volumes_rw: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('VolumesRW'), 'exclude': lambda f: f is None }})
    r"""LIst of volumes that is mounted to the container."""  
    