// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// PlayProgressiveTypeEnum - The type of the video file:
//
// Option descriptions:
//   - `source` - The video is a source file.
//   - `video/mp4` - The video is in MP4 format.
//   - `video/webm` - The video is in WebM format.
//   - `vp6/x-video` - The video is in VP6 format.
type PlayProgressiveTypeEnum string

const (
	PlayProgressiveTypeEnumSource    PlayProgressiveTypeEnum = "source"
	PlayProgressiveTypeEnumVideoMp4  PlayProgressiveTypeEnum = "video/mp4"
	PlayProgressiveTypeEnumVideoWebm PlayProgressiveTypeEnum = "video/webm"
	PlayProgressiveTypeEnumVp6XVideo PlayProgressiveTypeEnum = "vp6/x-video"
)

func (e *PlayProgressiveTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "source":
		fallthrough
	case "video/mp4":
		fallthrough
	case "video/webm":
		fallthrough
	case "vp6/x-video":
		*e = PlayProgressiveTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PlayProgressiveTypeEnum: %s", s)
	}
}

type PlayProgressive struct {
	// The time in ISO 8601 format when this video file was created.
	CreatedTime string `json:"created_time"`
	// The FPS of the video file.
	Fps float64 `json:"fps"`
	// The height in pixels of the video.
	Height float64 `json:"height"`
	// The direct link to this video file.
	Link string `json:"link"`
	// The time in ISO 8601 format when the link to this video file expires.
	LinkExpirationTime string `json:"link_expiration_time"`
	// The URLs for logging events.
	Log map[string]interface{} `json:"log,omitempty"`
	// The MD5 hash of the video file.
	Md5 string `json:"md5"`
	// The file size in bytes of this video.
	Size float64 `json:"size"`
	// The type of the video file:
	//
	// Option descriptions:
	//  * `source` - The video is a source file.
	//  * `video/mp4` - The video is in MP4 format.
	//  * `video/webm` - The video is in WebM format.
	//  * `vp6/x-video` - The video is in VP6 format.
	//
	Type PlayProgressiveTypeEnum `json:"type"`
	// The width in pixels of the video.
	Width float64 `json:"width"`
}

// PlayStatusEnum - The play status of the video:
//
// Option descriptions:
//   - `playable` - The video is playable.
//   - `purchase_required` - The video must be purchased.
//   - `restricted` - Playback for the video is restricted.
//   - `unavailable` - The video is unavailable.
type PlayStatusEnum string

const (
	PlayStatusEnumPlayable         PlayStatusEnum = "playable"
	PlayStatusEnumPurchaseRequired PlayStatusEnum = "purchase_required"
	PlayStatusEnumRestricted       PlayStatusEnum = "restricted"
	PlayStatusEnumUnavailable      PlayStatusEnum = "unavailable"
)

func (e *PlayStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "playable":
		fallthrough
	case "purchase_required":
		fallthrough
	case "restricted":
		fallthrough
	case "unavailable":
		*e = PlayStatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PlayStatusEnum: %s", s)
	}
}

type Play struct {
	// Progressive files.
	Progressive []PlayProgressive `json:"progressive,omitempty"`
	// The play status of the video:
	//
	// Option descriptions:
	//  * `playable` - The video is playable.
	//  * `purchase_required` - The video must be purchased.
	//  * `restricted` - Playback for the video is restricted.
	//  * `unavailable` - The video is unavailable.
	//
	Status PlayStatusEnum `json:"status"`
}
