// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// AddCustomRoutingEndpointsXAmzTargetEnum
type AddCustomRoutingEndpointsXAmzTargetEnum string

const (
	AddCustomRoutingEndpointsXAmzTargetEnumGlobalAcceleratorV20180706AddCustomRoutingEndpoints AddCustomRoutingEndpointsXAmzTargetEnum = "GlobalAccelerator_V20180706.AddCustomRoutingEndpoints"
)

func (e AddCustomRoutingEndpointsXAmzTargetEnum) ToPointer() *AddCustomRoutingEndpointsXAmzTargetEnum {
	return &e
}

func (e *AddCustomRoutingEndpointsXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "GlobalAccelerator_V20180706.AddCustomRoutingEndpoints":
		*e = AddCustomRoutingEndpointsXAmzTargetEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AddCustomRoutingEndpointsXAmzTargetEnum: %v", v)
	}
}

type AddCustomRoutingEndpointsRequest struct {
	AddCustomRoutingEndpointsRequest shared.AddCustomRoutingEndpointsRequest `request:"mediaType=application/json"`
	XAmzAlgorithm                    *string                                 `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256                *string                                 `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential                   *string                                 `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate                         *string                                 `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken                *string                                 `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature                    *string                                 `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders                *string                                 `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget                       AddCustomRoutingEndpointsXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type AddCustomRoutingEndpointsResponse struct {
	// AccessDeniedException
	AccessDeniedException interface{}
	// Success
	AddCustomRoutingEndpointsResponse *shared.AddCustomRoutingEndpointsResponse
	// ConflictException
	ConflictException interface{}
	ContentType       string
	// EndpointAlreadyExistsException
	EndpointAlreadyExistsException interface{}
	// EndpointGroupNotFoundException
	EndpointGroupNotFoundException interface{}
	// InternalServiceErrorException
	InternalServiceErrorException interface{}
	// InvalidArgumentException
	InvalidArgumentException interface{}
	// LimitExceededException
	LimitExceededException interface{}
	StatusCode             int
	RawResponse            *http.Response
}
