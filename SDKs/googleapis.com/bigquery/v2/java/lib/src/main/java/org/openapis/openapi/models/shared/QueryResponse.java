/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * QueryResponse - Successful response
 */
public class QueryResponse {
    /**
     * Whether the query result was fetched from the query cache.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("cacheHit")
    public Boolean cacheHit;
    public QueryResponse withCacheHit(Boolean cacheHit) {
        this.cacheHit = cacheHit;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("dmlStats")
    public DmlStatistics dmlStats;
    public QueryResponse withDmlStats(DmlStatistics dmlStats) {
        this.dmlStats = dmlStats;
        return this;
    }
    
    /**
     * [Output-only] The first errors or warnings encountered during the running of the job. The final message includes the number of errors that caused the process to stop. Errors here do not necessarily mean that the job has completed or was unsuccessful.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("errors")
    public ErrorProto[] errors;
    public QueryResponse withErrors(ErrorProto[] errors) {
        this.errors = errors;
        return this;
    }
    
    /**
     * Whether the query has completed or not. If rows or totalRows are present, this will always be true. If this is false, totalRows will not be available.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("jobComplete")
    public Boolean jobComplete;
    public QueryResponse withJobComplete(Boolean jobComplete) {
        this.jobComplete = jobComplete;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("jobReference")
    public JobReference jobReference;
    public QueryResponse withJobReference(JobReference jobReference) {
        this.jobReference = jobReference;
        return this;
    }
    
    /**
     * The resource type.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("kind")
    public String kind;
    public QueryResponse withKind(String kind) {
        this.kind = kind;
        return this;
    }
    
    /**
     * [Output-only] The number of rows affected by a DML statement. Present only for DML statements INSERT, UPDATE or DELETE.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("numDmlAffectedRows")
    public String numDmlAffectedRows;
    public QueryResponse withNumDmlAffectedRows(String numDmlAffectedRows) {
        this.numDmlAffectedRows = numDmlAffectedRows;
        return this;
    }
    
    /**
     * A token used for paging results.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("pageToken")
    public String pageToken;
    public QueryResponse withPageToken(String pageToken) {
        this.pageToken = pageToken;
        return this;
    }
    
    /**
     * An object with as many results as can be contained within the maximum permitted reply size. To get any additional rows, you can call GetQueryResults and specify the jobReference returned above.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("rows")
    public TableRow[] rows;
    public QueryResponse withRows(TableRow[] rows) {
        this.rows = rows;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("schema")
    public TableSchema schema;
    public QueryResponse withSchema(TableSchema schema) {
        this.schema = schema;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sessionInfo")
    public SessionInfo sessionInfo;
    public QueryResponse withSessionInfo(SessionInfo sessionInfo) {
        this.sessionInfo = sessionInfo;
        return this;
    }
    
    /**
     * The total number of bytes processed for this query. If this query was a dry run, this is the number of bytes that would be processed if the query were run.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("totalBytesProcessed")
    public String totalBytesProcessed;
    public QueryResponse withTotalBytesProcessed(String totalBytesProcessed) {
        this.totalBytesProcessed = totalBytesProcessed;
        return this;
    }
    
    /**
     * The total number of rows in the complete query result set, which can be more than the number of rows in this single page of results.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("totalRows")
    public String totalRows;
    public QueryResponse withTotalRows(String totalRows) {
        this.totalRows = totalRows;
        return this;
    }
    
}
