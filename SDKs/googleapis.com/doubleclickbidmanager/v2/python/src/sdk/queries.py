"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Queries:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def doubleclickbidmanager_queries_create(self, request: operations.DoubleclickbidmanagerQueriesCreateRequest, security: operations.DoubleclickbidmanagerQueriesCreateSecurity) -> operations.DoubleclickbidmanagerQueriesCreateResponse:
        r"""Creates a query."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/queries'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "query_input", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.DoubleclickbidmanagerQueriesCreateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DoubleclickbidmanagerQueriesCreateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Query])
                res.query = out

        return res

    def doubleclickbidmanager_queries_delete(self, request: operations.DoubleclickbidmanagerQueriesDeleteRequest, security: operations.DoubleclickbidmanagerQueriesDeleteSecurity) -> operations.DoubleclickbidmanagerQueriesDeleteResponse:
        r"""Deletes a query as well as the associated reports."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DoubleclickbidmanagerQueriesDeleteRequest, base_url, '/queries/{queryId}', request)
        
        query_params = utils.get_query_params(operations.DoubleclickbidmanagerQueriesDeleteRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DoubleclickbidmanagerQueriesDeleteResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def doubleclickbidmanager_queries_get(self, request: operations.DoubleclickbidmanagerQueriesGetRequest, security: operations.DoubleclickbidmanagerQueriesGetSecurity) -> operations.DoubleclickbidmanagerQueriesGetResponse:
        r"""Retrieves a query."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DoubleclickbidmanagerQueriesGetRequest, base_url, '/queries/{queryId}', request)
        
        query_params = utils.get_query_params(operations.DoubleclickbidmanagerQueriesGetRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DoubleclickbidmanagerQueriesGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Query])
                res.query = out

        return res

    def doubleclickbidmanager_queries_list(self, request: operations.DoubleclickbidmanagerQueriesListRequest, security: operations.DoubleclickbidmanagerQueriesListSecurity) -> operations.DoubleclickbidmanagerQueriesListResponse:
        r"""Lists queries created by the current user."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/queries'
        
        query_params = utils.get_query_params(operations.DoubleclickbidmanagerQueriesListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DoubleclickbidmanagerQueriesListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ListQueriesResponse])
                res.list_queries_response = out

        return res

    def doubleclickbidmanager_queries_reports_get(self, request: operations.DoubleclickbidmanagerQueriesReportsGetRequest, security: operations.DoubleclickbidmanagerQueriesReportsGetSecurity) -> operations.DoubleclickbidmanagerQueriesReportsGetResponse:
        r"""Retrieves a report."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DoubleclickbidmanagerQueriesReportsGetRequest, base_url, '/queries/{queryId}/reports/{reportId}', request)
        
        query_params = utils.get_query_params(operations.DoubleclickbidmanagerQueriesReportsGetRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DoubleclickbidmanagerQueriesReportsGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Report])
                res.report = out

        return res

    def doubleclickbidmanager_queries_reports_list(self, request: operations.DoubleclickbidmanagerQueriesReportsListRequest, security: operations.DoubleclickbidmanagerQueriesReportsListSecurity) -> operations.DoubleclickbidmanagerQueriesReportsListResponse:
        r"""Lists reports associated with a query."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DoubleclickbidmanagerQueriesReportsListRequest, base_url, '/queries/{queryId}/reports', request)
        
        query_params = utils.get_query_params(operations.DoubleclickbidmanagerQueriesReportsListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DoubleclickbidmanagerQueriesReportsListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ListReportsResponse])
                res.list_reports_response = out

        return res

    def doubleclickbidmanager_queries_run(self, request: operations.DoubleclickbidmanagerQueriesRunRequest, security: operations.DoubleclickbidmanagerQueriesRunSecurity) -> operations.DoubleclickbidmanagerQueriesRunResponse:
        r"""Runs a stored query to generate a report."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DoubleclickbidmanagerQueriesRunRequest, base_url, '/queries/{queryId}:run', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "run_query_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.DoubleclickbidmanagerQueriesRunRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DoubleclickbidmanagerQueriesRunResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Report])
                res.report = out

        return res

    