"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import apiresponse_list_publishedwrittenquestion_ as shared_apiresponse_list_publishedwrittenquestion_
from ..shared import apiresponse_object_ as shared_apiresponse_object_
from datetime import datetime
from enum import Enum
from typing import Optional

class PublishedOralQuestionGetParametersQuestionTypeEnum(str, Enum):
    r"""Oral Questions where the question type is the selected type, substantive or topical."""
    SUBSTANTIVE = 'Substantive'
    TOPICAL = 'Topical'


@dataclasses.dataclass
class PublishedOralQuestionGetRequest:
    
    parameters_answering_body_ids: Optional[list[int]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'parameters.answeringBodyIds', 'style': 'form', 'explode': True }})
    r"""Which answering body is to respond. A list of answering bodies can be found <a target=\\"_blank\\" href=\\"http://data.parliament.uk/membersdataplatform/services/mnis/referencedata/AnsweringBodies/\\">here</a>."""  
    parameters_answering_date_end: Optional[datetime] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'parameters.answeringDateEnd', 'style': 'form', 'explode': True }})
    r"""Oral Questions where the answering date has been set on or before the date provided. Date format YYYY-MM-DD."""  
    parameters_answering_date_start: Optional[datetime] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'parameters.answeringDateStart', 'style': 'form', 'explode': True }})
    r"""Oral Questions where the answering date has been set on or after the date provided. Date format YYYY-MM-DD."""  
    parameters_asking_member_ids: Optional[list[int]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'parameters.askingMemberIds', 'style': 'form', 'explode': True }})
    r"""The ID of the member asking the question. Lists of member IDs for each house are available <a href=\\"http://data.parliament.uk/membersdataplatform/services/mnis/members/query/house=Commons\\" target=\\"_blank\\">Commons</a> and <a href=\\"http://data.parliament.uk/membersdataplatform/services/mnis/members/query/house=Lords\\" target=\\"_blank\\">Lords</a>."""  
    parameters_oral_question_time_id: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'parameters.oralQuestionTimeId', 'style': 'form', 'explode': True }})
    r"""Oral Questions where the question is within the question time with the ID provided"""  
    parameters_question_type: Optional[PublishedOralQuestionGetParametersQuestionTypeEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'parameters.questionType', 'style': 'form', 'explode': True }})
    r"""Oral Questions where the question type is the selected type, substantive or topical."""  
    parameters_skip: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'parameters.skip', 'style': 'form', 'explode': True }})
    r"""The number of records to skip from the first, default is 0."""  
    parameters_take: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'parameters.take', 'style': 'form', 'explode': True }})
    r"""The number of records to return, default is 25, maximum is 100."""  
    parameters_u_i_ns: Optional[list[int]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'parameters.uINs', 'style': 'form', 'explode': True }})
    r"""The UIN for the question - note that UINs reset at the start of each Parliamentary session."""  
    

@dataclasses.dataclass
class PublishedOralQuestionGetResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    api_response_list_published_written_question: Optional[shared_apiresponse_list_publishedwrittenquestion_.APIResponseListPublishedWrittenQuestion] = dataclasses.field(default=None)
    r"""OK"""  
    api_response_object: Optional[shared_apiresponse_object_.APIResponseObject] = dataclasses.field(default=None)
    r"""BadRequest"""  
    body: Optional[bytes] = dataclasses.field(default=None)  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    