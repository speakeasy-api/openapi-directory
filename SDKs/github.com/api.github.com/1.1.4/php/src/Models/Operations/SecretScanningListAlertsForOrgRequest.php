<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Operations;

use \OpenAPI\OpenAPI\Utils\SpeakeasyMetadata;
class SecretScanningListAlertsForOrgRequest
{
    /**
     * A cursor, as given in the [Link header](https://docs.github.com/rest/overview/resources-in-the-rest-api#link-header). If specified, the query only searches for events after this cursor.  To receive an initial cursor on your first request, include an empty "after" query string.
     * 
     * @var ?string $after
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=after')]
    public ?string $after = null;
    
    /**
     * A cursor, as given in the [Link header](https://docs.github.com/rest/overview/resources-in-the-rest-api#link-header). If specified, the query only searches for events before this cursor. To receive an initial cursor on your first request, include an empty "before" query string.
     * 
     * @var ?string $before
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=before')]
    public ?string $before = null;
    
    /**
     * The direction to sort the results by.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\DirectionEnum $direction
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=direction')]
    public ?\OpenAPI\OpenAPI\Models\Shared\DirectionEnum $direction = null;
    
    /**
     * The organization name. The name is not case sensitive.
     * 
     * @var string $org
     */
	#[SpeakeasyMetadata('pathParam:style=simple,explode=false,name=org')]
    public string $org;
    
    /**
     * Page number of the results to fetch.
     * 
     * @var ?int $page
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=page')]
    public ?int $page = null;
    
    /**
     * The number of results per page (max 100).
     * 
     * @var ?int $perPage
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=per_page')]
    public ?int $perPage = null;
    
    /**
     * A comma-separated list of resolutions. Only secret scanning alerts with one of these resolutions are listed. Valid resolutions are `false_positive`, `wont_fix`, `revoked`, `pattern_edited`, `pattern_deleted` or `used_in_tests`.
     * 
     * @var ?string $resolution
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=resolution')]
    public ?string $resolution = null;
    
    /**
     * A comma-separated list of secret types to return. By default all secret types are returned.
     * 
     * See "[Secret scanning patterns](https://docs.github.com/code-security/secret-scanning/secret-scanning-patterns#supported-secrets-for-advanced-security)"
     * for a complete list of secret types.
     * 
     * @var ?string $secretType
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=secret_type')]
    public ?string $secretType = null;
    
    /**
     * The property to sort the results by. `created` means when the alert was created. `updated` means when the alert was updated or resolved.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\SecretScanningAlertSortEnum $sort
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=sort')]
    public ?\OpenAPI\OpenAPI\Models\Shared\SecretScanningAlertSortEnum $sort = null;
    
    /**
     * Set to `open` or `resolved` to only list secret scanning alerts in a specific state.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\SecretScanningAlertStateEnum $state
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=state')]
    public ?\OpenAPI\OpenAPI\Models\Shared\SecretScanningAlertStateEnum $state = null;
    
	public function __construct()
	{
		$this->after = null;
		$this->before = null;
		$this->direction = null;
		$this->org = "";
		$this->page = null;
		$this->perPage = null;
		$this->resolution = null;
		$this->secretType = null;
		$this->sort = null;
		$this->state = null;
	}
}
