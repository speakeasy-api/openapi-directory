/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * SslPolicy - Represents an SSL Policy resource. Use SSL policies to control the SSL features, such as versions and cipher suites, offered by an HTTPS or SSL Proxy load balancer. For more information, read SSL Policy Concepts.
 */
public class SslPolicy {
    /**
     * [Output Only] Creation timestamp in RFC3339 text format.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("creationTimestamp")
    public String creationTimestamp;

    public SslPolicy withCreationTimestamp(String creationTimestamp) {
        this.creationTimestamp = creationTimestamp;
        return this;
    }
    
    /**
     * A list of features enabled when the selected profile is CUSTOM. The method returns the set of features that can be specified in this list. This field must be empty if the profile is not CUSTOM.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("customFeatures")
    public String[] customFeatures;

    public SslPolicy withCustomFeatures(String[] customFeatures) {
        this.customFeatures = customFeatures;
        return this;
    }
    
    /**
     * An optional description of this resource. Provide this property when you create the resource.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    public String description;

    public SslPolicy withDescription(String description) {
        this.description = description;
        return this;
    }
    
    /**
     * [Output Only] The list of features enabled in the SSL policy.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("enabledFeatures")
    public String[] enabledFeatures;

    public SslPolicy withEnabledFeatures(String[] enabledFeatures) {
        this.enabledFeatures = enabledFeatures;
        return this;
    }
    
    /**
     * Fingerprint of this resource. A hash of the contents stored in this object. This field is used in optimistic locking. This field will be ignored when inserting a SslPolicy. An up-to-date fingerprint must be provided in order to update the SslPolicy, otherwise the request will fail with error 412 conditionNotMet. To see the latest fingerprint, make a get() request to retrieve an SslPolicy.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("fingerprint")
    public String fingerprint;

    public SslPolicy withFingerprint(String fingerprint) {
        this.fingerprint = fingerprint;
        return this;
    }
    
    /**
     * [Output Only] The unique identifier for the resource. This identifier is defined by the server.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    public String id;

    public SslPolicy withId(String id) {
        this.id = id;
        return this;
    }
    
    /**
     * [Output only] Type of the resource. Always compute#sslPolicyfor SSL policies.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("kind")
    public String kind;

    public SslPolicy withKind(String kind) {
        this.kind = kind;
        return this;
    }
    
    /**
     * The minimum version of SSL protocol that can be used by the clients to establish a connection with the load balancer. This can be one of TLS_1_0, TLS_1_1, TLS_1_2.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("minTlsVersion")
    public SslPolicyMinTlsVersionEnum minTlsVersion;

    public SslPolicy withMinTlsVersion(SslPolicyMinTlsVersionEnum minTlsVersion) {
        this.minTlsVersion = minTlsVersion;
        return this;
    }
    
    /**
     * Name of the resource. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    public String name;

    public SslPolicy withName(String name) {
        this.name = name;
        return this;
    }
    
    /**
     * Profile specifies the set of SSL features that can be used by the load balancer when negotiating SSL with clients. This can be one of COMPATIBLE, MODERN, RESTRICTED, or CUSTOM. If using CUSTOM, the set of SSL features to enable must be specified in the customFeatures field.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("profile")
    public SslPolicyProfileEnum profile;

    public SslPolicy withProfile(SslPolicyProfileEnum profile) {
        this.profile = profile;
        return this;
    }
    
    /**
     * [Output Only] URL of the region where the regional SSL policy resides. This field is not applicable to global SSL policies.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("region")
    public String region;

    public SslPolicy withRegion(String region) {
        this.region = region;
        return this;
    }
    
    /**
     * [Output Only] Server-defined URL for the resource.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("selfLink")
    public String selfLink;

    public SslPolicy withSelfLink(String selfLink) {
        this.selfLink = selfLink;
        return this;
    }
    
    /**
     * [Output Only] Server-defined URL for this resource with the resource id.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("selfLinkWithId")
    public String selfLinkWithId;

    public SslPolicy withSelfLinkWithId(String selfLinkWithId) {
        this.selfLinkWithId = selfLinkWithId;
        return this;
    }
    
    /**
     * The TLS settings for the server.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tlsSettings")
    public ServerTlsSettings tlsSettings;

    public SslPolicy withTlsSettings(ServerTlsSettings tlsSettings) {
        this.tlsSettings = tlsSettings;
        return this;
    }
    
    /**
     * [Output Only] If potential misconfigurations are detected for this SSL policy, this field will be populated with warning messages.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("warnings")
    public SslPolicyWarnings[] warnings;

    public SslPolicy withWarnings(SslPolicyWarnings[] warnings) {
        this.warnings = warnings;
        return this;
    }
    
    public SslPolicy(){}
}
