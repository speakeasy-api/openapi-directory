/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class Projects {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * List inventory data for all VM instances in the specified zone.
   */
  osconfigProjectsLocationsInstancesInventoriesList(
    req: operations.OsconfigProjectsLocationsInstancesInventoriesListRequest,
    security: operations.OsconfigProjectsLocationsInstancesInventoriesListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.OsconfigProjectsLocationsInstancesInventoriesListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.OsconfigProjectsLocationsInstancesInventoriesListRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/{parent}/inventories",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.OsconfigProjectsLocationsInstancesInventoriesListSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.OsconfigProjectsLocationsInstancesInventoriesListResponse =
        new operations.OsconfigProjectsLocationsInstancesInventoriesListResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listInventoriesResponse = utils.objectToClass(
              httpRes?.data,
              shared.ListInventoriesResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * List OS policy asssignment reports for all Compute Engine VM instances in the specified zone.
   */
  osconfigProjectsLocationsInstancesOsPolicyAssignmentsReportsList(
    req: operations.OsconfigProjectsLocationsInstancesOsPolicyAssignmentsReportsListRequest,
    security: operations.OsconfigProjectsLocationsInstancesOsPolicyAssignmentsReportsListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.OsconfigProjectsLocationsInstancesOsPolicyAssignmentsReportsListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.OsconfigProjectsLocationsInstancesOsPolicyAssignmentsReportsListRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/v1/{parent}/reports", req);
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.OsconfigProjectsLocationsInstancesOsPolicyAssignmentsReportsListSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.OsconfigProjectsLocationsInstancesOsPolicyAssignmentsReportsListResponse =
        new operations.OsconfigProjectsLocationsInstancesOsPolicyAssignmentsReportsListResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listOSPolicyAssignmentReportsResponse = utils.objectToClass(
              httpRes?.data,
              shared.ListOSPolicyAssignmentReportsResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * List vulnerability reports for all VM instances in the specified zone.
   */
  osconfigProjectsLocationsInstancesVulnerabilityReportsList(
    req: operations.OsconfigProjectsLocationsInstancesVulnerabilityReportsListRequest,
    security: operations.OsconfigProjectsLocationsInstancesVulnerabilityReportsListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.OsconfigProjectsLocationsInstancesVulnerabilityReportsListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.OsconfigProjectsLocationsInstancesVulnerabilityReportsListRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/{parent}/vulnerabilityReports",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.OsconfigProjectsLocationsInstancesVulnerabilityReportsListSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.OsconfigProjectsLocationsInstancesVulnerabilityReportsListResponse =
        new operations.OsconfigProjectsLocationsInstancesVulnerabilityReportsListResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listVulnerabilityReportsResponse = utils.objectToClass(
              httpRes?.data,
              shared.ListVulnerabilityReportsResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Create an OS policy assignment. This method also creates the first revision of the OS policy assignment. This method returns a long running operation (LRO) that contains the rollout details. The rollout can be cancelled by cancelling the LRO. For more information, see [Method: projects.locations.osPolicyAssignments.operations.cancel](https://cloud.google.com/compute/docs/osconfig/rest/v1/projects.locations.osPolicyAssignments.operations/cancel).
   */
  osconfigProjectsLocationsOsPolicyAssignmentsCreate(
    req: operations.OsconfigProjectsLocationsOsPolicyAssignmentsCreateRequest,
    security: operations.OsconfigProjectsLocationsOsPolicyAssignmentsCreateSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.OsconfigProjectsLocationsOsPolicyAssignmentsCreateResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.OsconfigProjectsLocationsOsPolicyAssignmentsCreateRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/{parent}/osPolicyAssignments",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "osPolicyAssignmentInput",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.OsconfigProjectsLocationsOsPolicyAssignmentsCreateSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.OsconfigProjectsLocationsOsPolicyAssignmentsCreateResponse =
        new operations.OsconfigProjectsLocationsOsPolicyAssignmentsCreateResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.operation = utils.objectToClass(
              httpRes?.data,
              shared.Operation
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * List the OS policy assignments under the parent resource. For each OS policy assignment, the latest revision is returned.
   */
  osconfigProjectsLocationsOsPolicyAssignmentsList(
    req: operations.OsconfigProjectsLocationsOsPolicyAssignmentsListRequest,
    security: operations.OsconfigProjectsLocationsOsPolicyAssignmentsListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.OsconfigProjectsLocationsOsPolicyAssignmentsListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.OsconfigProjectsLocationsOsPolicyAssignmentsListRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/{parent}/osPolicyAssignments",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.OsconfigProjectsLocationsOsPolicyAssignmentsListSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.OsconfigProjectsLocationsOsPolicyAssignmentsListResponse =
        new operations.OsconfigProjectsLocationsOsPolicyAssignmentsListResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listOSPolicyAssignmentsResponse = utils.objectToClass(
              httpRes?.data,
              shared.ListOSPolicyAssignmentsResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * List the OS policy assignment revisions for a given OS policy assignment.
   */
  osconfigProjectsLocationsOsPolicyAssignmentsListRevisions(
    req: operations.OsconfigProjectsLocationsOsPolicyAssignmentsListRevisionsRequest,
    security: operations.OsconfigProjectsLocationsOsPolicyAssignmentsListRevisionsSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.OsconfigProjectsLocationsOsPolicyAssignmentsListRevisionsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.OsconfigProjectsLocationsOsPolicyAssignmentsListRevisionsRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/{name}:listRevisions",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.OsconfigProjectsLocationsOsPolicyAssignmentsListRevisionsSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.OsconfigProjectsLocationsOsPolicyAssignmentsListRevisionsResponse =
        new operations.OsconfigProjectsLocationsOsPolicyAssignmentsListRevisionsResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listOSPolicyAssignmentRevisionsResponse = utils.objectToClass(
              httpRes?.data,
              shared.ListOSPolicyAssignmentRevisionsResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Create an OS Config patch deployment.
   */
  osconfigProjectsPatchDeploymentsCreate(
    req: operations.OsconfigProjectsPatchDeploymentsCreateRequest,
    security: operations.OsconfigProjectsPatchDeploymentsCreateSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.OsconfigProjectsPatchDeploymentsCreateResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.OsconfigProjectsPatchDeploymentsCreateRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/{parent}/patchDeployments",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "patchDeploymentInput",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.OsconfigProjectsPatchDeploymentsCreateSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.OsconfigProjectsPatchDeploymentsCreateResponse =
        new operations.OsconfigProjectsPatchDeploymentsCreateResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.patchDeployment = utils.objectToClass(
              httpRes?.data,
              shared.PatchDeployment
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Delete an OS Config patch deployment.
   */
  osconfigProjectsPatchDeploymentsDelete(
    req: operations.OsconfigProjectsPatchDeploymentsDeleteRequest,
    security: operations.OsconfigProjectsPatchDeploymentsDeleteSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.OsconfigProjectsPatchDeploymentsDeleteResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.OsconfigProjectsPatchDeploymentsDeleteRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/v1/{name}", req);
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.OsconfigProjectsPatchDeploymentsDeleteSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.OsconfigProjectsPatchDeploymentsDeleteResponse =
        new operations.OsconfigProjectsPatchDeploymentsDeleteResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.empty = utils.objectToClass(httpRes?.data);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get a page of OS Config patch deployments.
   */
  osconfigProjectsPatchDeploymentsList(
    req: operations.OsconfigProjectsPatchDeploymentsListRequest,
    security: operations.OsconfigProjectsPatchDeploymentsListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.OsconfigProjectsPatchDeploymentsListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.OsconfigProjectsPatchDeploymentsListRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/{parent}/patchDeployments",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.OsconfigProjectsPatchDeploymentsListSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.OsconfigProjectsPatchDeploymentsListResponse =
        new operations.OsconfigProjectsPatchDeploymentsListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listPatchDeploymentsResponse = utils.objectToClass(
              httpRes?.data,
              shared.ListPatchDeploymentsResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Update an OS Config patch deployment.
   */
  osconfigProjectsPatchDeploymentsPatch(
    req: operations.OsconfigProjectsPatchDeploymentsPatchRequest,
    security: operations.OsconfigProjectsPatchDeploymentsPatchSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.OsconfigProjectsPatchDeploymentsPatchResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.OsconfigProjectsPatchDeploymentsPatchRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/v1/{name}", req);

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "patchDeploymentInput",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.OsconfigProjectsPatchDeploymentsPatchSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "patch",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.OsconfigProjectsPatchDeploymentsPatchResponse =
        new operations.OsconfigProjectsPatchDeploymentsPatchResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.patchDeployment = utils.objectToClass(
              httpRes?.data,
              shared.PatchDeployment
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Change state of patch deployment to "PAUSED". Patch deployment in paused state doesn't generate patch jobs.
   */
  osconfigProjectsPatchDeploymentsPause(
    req: operations.OsconfigProjectsPatchDeploymentsPauseRequest,
    security: operations.OsconfigProjectsPatchDeploymentsPauseSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.OsconfigProjectsPatchDeploymentsPauseResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.OsconfigProjectsPatchDeploymentsPauseRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/v1/{name}:pause", req);

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.OsconfigProjectsPatchDeploymentsPauseSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.OsconfigProjectsPatchDeploymentsPauseResponse =
        new operations.OsconfigProjectsPatchDeploymentsPauseResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.patchDeployment = utils.objectToClass(
              httpRes?.data,
              shared.PatchDeployment
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Change state of patch deployment back to "ACTIVE". Patch deployment in active state continues to generate patch jobs.
   */
  osconfigProjectsPatchDeploymentsResume(
    req: operations.OsconfigProjectsPatchDeploymentsResumeRequest,
    security: operations.OsconfigProjectsPatchDeploymentsResumeSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.OsconfigProjectsPatchDeploymentsResumeResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.OsconfigProjectsPatchDeploymentsResumeRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/v1/{name}:resume", req);

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.OsconfigProjectsPatchDeploymentsResumeSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.OsconfigProjectsPatchDeploymentsResumeResponse =
        new operations.OsconfigProjectsPatchDeploymentsResumeResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.patchDeployment = utils.objectToClass(
              httpRes?.data,
              shared.PatchDeployment
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Cancel a patch job. The patch job must be active. Canceled patch jobs cannot be restarted.
   */
  osconfigProjectsPatchJobsCancel(
    req: operations.OsconfigProjectsPatchJobsCancelRequest,
    security: operations.OsconfigProjectsPatchJobsCancelSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.OsconfigProjectsPatchJobsCancelResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.OsconfigProjectsPatchJobsCancelRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/v1/{name}:cancel", req);

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.OsconfigProjectsPatchJobsCancelSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.OsconfigProjectsPatchJobsCancelResponse =
        new operations.OsconfigProjectsPatchJobsCancelResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.patchJob = utils.objectToClass(httpRes?.data, shared.PatchJob);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Patch VM instances by creating and running a patch job.
   */
  osconfigProjectsPatchJobsExecute(
    req: operations.OsconfigProjectsPatchJobsExecuteRequest,
    security: operations.OsconfigProjectsPatchJobsExecuteSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.OsconfigProjectsPatchJobsExecuteResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.OsconfigProjectsPatchJobsExecuteRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/{parent}/patchJobs:execute",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "executePatchJobRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.OsconfigProjectsPatchJobsExecuteSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.OsconfigProjectsPatchJobsExecuteResponse =
        new operations.OsconfigProjectsPatchJobsExecuteResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.patchJob = utils.objectToClass(httpRes?.data, shared.PatchJob);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get the patch job. This can be used to track the progress of an ongoing patch job or review the details of completed jobs.
   */
  osconfigProjectsPatchJobsGet(
    req: operations.OsconfigProjectsPatchJobsGetRequest,
    security: operations.OsconfigProjectsPatchJobsGetSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.OsconfigProjectsPatchJobsGetResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.OsconfigProjectsPatchJobsGetRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/v1/{name}", req);
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.OsconfigProjectsPatchJobsGetSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.OsconfigProjectsPatchJobsGetResponse =
        new operations.OsconfigProjectsPatchJobsGetResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.patchJob = utils.objectToClass(httpRes?.data, shared.PatchJob);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get a list of instance details for a given patch job.
   */
  osconfigProjectsPatchJobsInstanceDetailsList(
    req: operations.OsconfigProjectsPatchJobsInstanceDetailsListRequest,
    security: operations.OsconfigProjectsPatchJobsInstanceDetailsListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.OsconfigProjectsPatchJobsInstanceDetailsListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.OsconfigProjectsPatchJobsInstanceDetailsListRequest(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/{parent}/instanceDetails",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.OsconfigProjectsPatchJobsInstanceDetailsListSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.OsconfigProjectsPatchJobsInstanceDetailsListResponse =
        new operations.OsconfigProjectsPatchJobsInstanceDetailsListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listPatchJobInstanceDetailsResponse = utils.objectToClass(
              httpRes?.data,
              shared.ListPatchJobInstanceDetailsResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get a list of patch jobs.
   */
  osconfigProjectsPatchJobsList(
    req: operations.OsconfigProjectsPatchJobsListRequest,
    security: operations.OsconfigProjectsPatchJobsListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.OsconfigProjectsPatchJobsListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.OsconfigProjectsPatchJobsListRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/{parent}/patchJobs",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.OsconfigProjectsPatchJobsListSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.OsconfigProjectsPatchJobsListResponse =
        new operations.OsconfigProjectsPatchJobsListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listPatchJobsResponse = utils.objectToClass(
              httpRes?.data,
              shared.ListPatchJobsResponse
            );
          }
          break;
      }

      return res;
    });
  }
}
