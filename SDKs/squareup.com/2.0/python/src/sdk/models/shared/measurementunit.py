"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import measurementunitcustom as shared_measurementunitcustom
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class MeasurementUnit:
    r"""Represents a unit of measurement to use with a quantity, such as ounces
    or inches. Exactly one of the following fields are required: `custom_unit`,
    `area_unit`, `length_unit`, `volume_unit`, and `weight_unit`.
    """
    
    area_unit: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('area_unit'), 'exclude': lambda f: f is None }})
    r"""Represents a standard area unit."""  
    custom_unit: Optional[shared_measurementunitcustom.MeasurementUnitCustom] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('custom_unit'), 'exclude': lambda f: f is None }})
    r"""The information needed to define a custom unit, provided by the seller."""  
    generic_unit: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('generic_unit'), 'exclude': lambda f: f is None }})
    r"""Reserved for API integrations that lack the ability to specify a real measurement unit"""  
    length_unit: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('length_unit'), 'exclude': lambda f: f is None }})
    r"""Represents a standard length unit."""  
    time_unit: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('time_unit'), 'exclude': lambda f: f is None }})
    r"""Represents a standard unit of time."""  
    type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})
    r"""Represents the type of the measurement unit."""  
    volume_unit: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('volume_unit'), 'exclude': lambda f: f is None }})
    r"""Represents a standard volume unit."""  
    weight_unit: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('weight_unit'), 'exclude': lambda f: f is None }})
    r"""Represents a standard unit of weight or mass."""  
    