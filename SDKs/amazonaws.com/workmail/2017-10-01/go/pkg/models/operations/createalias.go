// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// CreateAliasXAmzTargetEnum
type CreateAliasXAmzTargetEnum string

const (
	CreateAliasXAmzTargetEnumWorkMailServiceCreateAlias CreateAliasXAmzTargetEnum = "WorkMailService.CreateAlias"
)

func (e CreateAliasXAmzTargetEnum) ToPointer() *CreateAliasXAmzTargetEnum {
	return &e
}

func (e *CreateAliasXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "WorkMailService.CreateAlias":
		*e = CreateAliasXAmzTargetEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateAliasXAmzTargetEnum: %v", v)
	}
}

type CreateAliasRequest struct {
	CreateAliasRequest shared.CreateAliasRequest `request:"mediaType=application/json"`
	XAmzAlgorithm      *string                   `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256  *string                   `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential     *string                   `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate           *string                   `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken  *string                   `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature      *string                   `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders  *string                   `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget         CreateAliasXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type CreateAliasResponse struct {
	ContentType string
	// Success
	CreateAliasResponse map[string]interface{}
	// EmailAddressInUseException
	EmailAddressInUseException interface{}
	// EntityNotFoundException
	EntityNotFoundException interface{}
	// EntityStateException
	EntityStateException interface{}
	// InvalidParameterException
	InvalidParameterException interface{}
	// LimitExceededException
	LimitExceededException interface{}
	// MailDomainNotFoundException
	MailDomainNotFoundException interface{}
	// MailDomainStateException
	MailDomainStateException interface{}
	// OrganizationNotFoundException
	OrganizationNotFoundException interface{}
	// OrganizationStateException
	OrganizationStateException interface{}
	StatusCode                 int
	RawResponse                *http.Response
}
