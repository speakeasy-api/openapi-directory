"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from enum import Enum
from typing import Optional

class GETDefineExpressionActionEnum(str, Enum):
    DEFINE_EXPRESSION = 'DefineExpression'


@dataclasses.dataclass
class GETDefineExpressionExpression:
    r"""A named expression that can be evaluated at search time. Can be used to sort the search results, define other expressions, or return computed information in the search results."""
    
    expression_name: str = dataclasses.field(metadata={'query_param': { 'field_name': 'ExpressionName' }})
    r"""Names must begin with a letter and can contain the following characters: a-z (lowercase), 0-9, and _ (underscore)."""  
    expression_value: str = dataclasses.field(metadata={'query_param': { 'field_name': 'ExpressionValue' }})
    r"""The expression to evaluate for sorting while processing a search request. The <code>Expression</code> syntax is based on JavaScript expressions. For more information, see <a href=\\"http://docs.aws.amazon.com/cloudsearch/latest/developerguide/configuring-expressions.html\\" target=\\"_blank\\">Configuring Expressions</a> in the <i>Amazon CloudSearch Developer Guide</i>."""  
    
class GETDefineExpressionVersionEnum(str, Enum):
    TWO_THOUSAND_AND_THIRTEEN_01_01 = '2013-01-01'


@dataclasses.dataclass
class GETDefineExpressionRequest:
    
    action: GETDefineExpressionActionEnum = dataclasses.field(metadata={'query_param': { 'field_name': 'Action', 'style': 'form', 'explode': True }})  
    domain_name: str = dataclasses.field(metadata={'query_param': { 'field_name': 'DomainName', 'style': 'form', 'explode': True }})  
    expression: GETDefineExpressionExpression = dataclasses.field(metadata={'query_param': { 'field_name': 'Expression', 'style': 'form', 'explode': True }})
    r"""A named expression that can be evaluated at search time. Can be used to sort the search results, define other expressions, or return computed information in the search results."""  
    version: GETDefineExpressionVersionEnum = dataclasses.field(metadata={'query_param': { 'field_name': 'Version', 'style': 'form', 'explode': True }})  
    x_amz_algorithm: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Algorithm', 'style': 'simple', 'explode': False }})  
    x_amz_content_sha256: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Content-Sha256', 'style': 'simple', 'explode': False }})  
    x_amz_credential: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Credential', 'style': 'simple', 'explode': False }})  
    x_amz_date: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Date', 'style': 'simple', 'explode': False }})  
    x_amz_security_token: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Security-Token', 'style': 'simple', 'explode': False }})  
    x_amz_signature: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Signature', 'style': 'simple', 'explode': False }})  
    x_amz_signed_headers: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-SignedHeaders', 'style': 'simple', 'explode': False }})  
    

@dataclasses.dataclass
class GETDefineExpressionResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    body: Optional[bytes] = dataclasses.field(default=None)  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    