/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import com.fasterxml.jackson.annotation.JsonProperty;
import org.openapis.openapi.utils.SpeakeasyMetadata;

public class PostRoutingVersionNumberCalculateReachableRangeOriginContentTypeJsonRequest {
    /**
     * Specifies the efficiency of converting chemical energy stored in fuel to kinetic energy when the vehicle accelerates (i.e. KineticEnergyGained/ChemicalEnergyConsumed).
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=accelerationEfficiency")
    public Float accelerationEfficiency;

    public PostRoutingVersionNumberCalculateReachableRangeOriginContentTypeJsonRequest withAccelerationEfficiency(Float accelerationEfficiency) {
        this.accelerationEfficiency = accelerationEfficiency;
        return this;
    }
    
    /**
     * The date and time of arrival at the destination point. It must be specified as a dateTime.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=arriveAt")
    public String arriveAt;

    public PostRoutingVersionNumberCalculateReachableRangeOriginContentTypeJsonRequest withArriveAt(String arriveAt) {
        this.arriveAt = arriveAt;
        return this;
    }
    
    /**
     * Specifies the amount of fuel consumed for sustaining auxiliary systems of the vehicle, in liters per hour.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=auxiliaryPowerInLitersPerHour")
    public Float auxiliaryPowerInLitersPerHour;

    public PostRoutingVersionNumberCalculateReachableRangeOriginContentTypeJsonRequest withAuxiliaryPowerInLitersPerHour(Float auxiliaryPowerInLitersPerHour) {
        this.auxiliaryPowerInLitersPerHour = auxiliaryPowerInLitersPerHour;
        return this;
    }
    
    /**
     * Specifies whether the routing engine should try to avoid specific types of road segment when calculating the route. Can be specified multiple times.
     * Possible values:
     *   - tollRoads
     *   - motorways
     *   - ferries
     *   - unpavedRoads
     *   - carpools
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=avoid")
    public String avoid;

    public PostRoutingVersionNumberCalculateReachableRangeOriginContentTypeJsonRequest withAvoid(String avoid) {
        this.avoid = avoid;
        return this;
    }
    
    @SpeakeasyMetadata("request:mediaType=application/json")
    public org.openapis.openapi.models.shared.CalculateReachableRangePostDataParameters calculateReachableRangePostDataParameters;

    public PostRoutingVersionNumberCalculateReachableRangeOriginContentTypeJsonRequest withCalculateReachableRangePostDataParameters(org.openapis.openapi.models.shared.CalculateReachableRangePostDataParameters calculateReachableRangePostDataParameters) {
        this.calculateReachableRangePostDataParameters = calculateReachableRangePostDataParameters;
        return this;
    }
    
    /**
     * Specifies the jsonp callback method.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=callback")
    public String callback;

    public PostRoutingVersionNumberCalculateReachableRangeOriginContentTypeJsonRequest withCallback(String callback) {
        this.callback = callback;
        return this;
    }
    
    /**
     * Specifies the speed-dependent component of consumption. Provided as an unordered list of speed/consumption-rate pairs.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=constantSpeedConsumptionInLitersPerHundredkm")
    public String constantSpeedConsumptionInLitersPerHundredkm;

    public PostRoutingVersionNumberCalculateReachableRangeOriginContentTypeJsonRequest withConstantSpeedConsumptionInLitersPerHundredkm(String constantSpeedConsumptionInLitersPerHundredkm) {
        this.constantSpeedConsumptionInLitersPerHundredkm = constantSpeedConsumptionInLitersPerHundredkm;
        return this;
    }
    
    /**
     * Specifies the speed-dependent component of consumption. Provided as an unordered list of speed/consumption-rate pairs.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=constantSpeedConsumptionInkWhPerHundredkm")
    public String constantSpeedConsumptionInkWhPerHundredkm;

    public PostRoutingVersionNumberCalculateReachableRangeOriginContentTypeJsonRequest withConstantSpeedConsumptionInkWhPerHundredkm(String constantSpeedConsumptionInkWhPerHundredkm) {
        this.constantSpeedConsumptionInkWhPerHundredkm = constantSpeedConsumptionInkWhPerHundredkm;
        return this;
    }
    
    /**
     * The content type of the response structure. If the content type is jsonp, a callback method can be specified in the query parameters.
     */
    @SpeakeasyMetadata("pathParam:style=simple,explode=false,name=contentType")
    public org.openapis.openapi.models.shared.ContentTypeEnum contentType;

    public PostRoutingVersionNumberCalculateReachableRangeOriginContentTypeJsonRequest withContentType(org.openapis.openapi.models.shared.ContentTypeEnum contentType) {
        this.contentType = contentType;
        return this;
    }
    
    /**
     * Specifies the current supply of fuel in liters.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=currentFuelInLiters")
    public Float currentFuelInLiters;

    public PostRoutingVersionNumberCalculateReachableRangeOriginContentTypeJsonRequest withCurrentFuelInLiters(Float currentFuelInLiters) {
        this.currentFuelInLiters = currentFuelInLiters;
        return this;
    }
    
    /**
     * Specifies the efficiency of converting kinetic energy to saved (not consumed) fuel when the vehicle decelerates (i.e. ChemicalEnergySaved/KineticEnergyLost).
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=decelerationEfficiency")
    public Float decelerationEfficiency;

    public PostRoutingVersionNumberCalculateReachableRangeOriginContentTypeJsonRequest withDecelerationEfficiency(Float decelerationEfficiency) {
        this.decelerationEfficiency = decelerationEfficiency;
        return this;
    }
    
    /**
     * The date and time of departure from the origin point. Departure times apart from &lt;i&gt;now&lt;/i&gt; must be specified as a dateTime.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=departAt")
    public String departAt;

    public PostRoutingVersionNumberCalculateReachableRangeOriginContentTypeJsonRequest withDepartAt(String departAt) {
        this.departAt = departAt;
        return this;
    }
    
    /**
     * Specifies the efficiency of converting potential energy to saved (not consumed) fuel when the vehicle loses elevation (i.e. ChemicalEnergySaved/PotentialEnergyLost).
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=downhillEfficiency")
    public Float downhillEfficiency;

    public PostRoutingVersionNumberCalculateReachableRangeOriginContentTypeJsonRequest withDownhillEfficiency(Float downhillEfficiency) {
        this.downhillEfficiency = downhillEfficiency;
        return this;
    }
    
    /**
     * Electric energy budget in kilowatt hours (kWh). Determines the maximum vehicle range using the specified Electric Consumption Model.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=energyBudgetInkWh")
    public Float energyBudgetInkWh;

    public PostRoutingVersionNumberCalculateReachableRangeOriginContentTypeJsonRequest withEnergyBudgetInkWh(Float energyBudgetInkWh) {
        this.energyBudgetInkWh = energyBudgetInkWh;
        return this;
    }
    
    /**
     * Fuel budget in liters. Determines the maximum vehicle range using the specified Combustion Consumption Model.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=fuelBudgetInLiters")
    public Float fuelBudgetInLiters;

    public PostRoutingVersionNumberCalculateReachableRangeOriginContentTypeJsonRequest withFuelBudgetInLiters(Float fuelBudgetInLiters) {
        this.fuelBudgetInLiters = fuelBudgetInLiters;
        return this;
    }
    
    /**
     * Specifies the amount of chemical energy stored in one liter of fuel in megajoules (MJ).
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=fuelEnergyDensityInMJoulesPerLiter")
    public Float fuelEnergyDensityInMJoulesPerLiter;

    public PostRoutingVersionNumberCalculateReachableRangeOriginContentTypeJsonRequest withFuelEnergyDensityInMJoulesPerLiter(Float fuelEnergyDensityInMJoulesPerLiter) {
        this.fuelEnergyDensityInMJoulesPerLiter = fuelEnergyDensityInMJoulesPerLiter;
        return this;
    }
    
    /**
     * Degree of hilliness for calculating a thrilling route.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=hilliness")
    public org.openapis.openapi.models.shared.HillinessEnum hilliness;

    public PostRoutingVersionNumberCalculateReachableRangeOriginContentTypeJsonRequest withHilliness(org.openapis.openapi.models.shared.HillinessEnum hilliness) {
        this.hilliness = hilliness;
        return this;
    }
    
    /**
     * Point from which the range calculation should start.
     */
    @SpeakeasyMetadata("pathParam:style=simple,explode=false,name=origin")
    public String origin;

    public PostRoutingVersionNumberCalculateReachableRangeOriginContentTypeJsonRequest withOrigin(String origin) {
        this.origin = origin;
        return this;
    }
    
    /**
     * Specifies which data should be reported for diagnosis purposes.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=report")
    public org.openapis.openapi.models.shared.ReportEnum report;

    public PostRoutingVersionNumberCalculateReachableRangeOriginContentTypeJsonRequest withReport(org.openapis.openapi.models.shared.ReportEnum report) {
        this.report = report;
        return this;
    }
    
    /**
     * The type of route requested.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=routeType")
    public org.openapis.openapi.models.shared.RouteTypeEnum routeType;

    public PostRoutingVersionNumberCalculateReachableRangeOriginContentTypeJsonRequest withRouteType(org.openapis.openapi.models.shared.RouteTypeEnum routeType) {
        this.routeType = routeType;
        return this;
    }
    
    /**
     * Time budget in seconds. Determines the maximum vehicle range using the specified driving time. The consumption parameters in the request will only affect eco-routes, and thereby indirectly the driving time.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=timeBudgetInSec")
    public Float timeBudgetInSec;

    public PostRoutingVersionNumberCalculateReachableRangeOriginContentTypeJsonRequest withTimeBudgetInSec(Float timeBudgetInSec) {
        this.timeBudgetInSec = timeBudgetInSec;
        return this;
    }
    
    /**
     * Determines whether current traffic is used in route calculations. Note that information on historic road speeds is always used.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=traffic")
    public Boolean traffic;

    public PostRoutingVersionNumberCalculateReachableRangeOriginContentTypeJsonRequest withTraffic(Boolean traffic) {
        this.traffic = traffic;
        return this;
    }
    
    /**
     * The mode of travel for the requested route.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=travelMode")
    public org.openapis.openapi.models.shared.TravelModeEnum travelMode;

    public PostRoutingVersionNumberCalculateReachableRangeOriginContentTypeJsonRequest withTravelMode(org.openapis.openapi.models.shared.TravelModeEnum travelMode) {
        this.travelMode = travelMode;
        return this;
    }
    
    /**
     * Specifies the efficiency of converting chemical energy stored in fuel to potential energy when the vehicle gains elevation (i.e. PotentialEnergyGained/ChemicalEnergyConsumed).
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=uphillEfficiency")
    public Float uphillEfficiency;

    public PostRoutingVersionNumberCalculateReachableRangeOriginContentTypeJsonRequest withUphillEfficiency(Float uphillEfficiency) {
        this.uphillEfficiency = uphillEfficiency;
        return this;
    }
    
    /**
     * Weight per axle of the vehicle in kg.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=vehicleAxleWeight")
    public Long vehicleAxleWeight;

    public PostRoutingVersionNumberCalculateReachableRangeOriginContentTypeJsonRequest withVehicleAxleWeight(Long vehicleAxleWeight) {
        this.vehicleAxleWeight = vehicleAxleWeight;
        return this;
    }
    
    /**
     * Indicates that the vehicle is used for commercial purposes. This means it may not be allowed on certain roads.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=vehicleCommercial")
    public Boolean vehicleCommercial;

    public PostRoutingVersionNumberCalculateReachableRangeOriginContentTypeJsonRequest withVehicleCommercial(Boolean vehicleCommercial) {
        this.vehicleCommercial = vehicleCommercial;
        return this;
    }
    
    /**
     * Engine type of the vehicle.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=vehicleEngineType")
    public PostRoutingVersionNumberCalculateReachableRangeOriginContentTypeJsonVehicleEngineTypeEnum vehicleEngineType;

    public PostRoutingVersionNumberCalculateReachableRangeOriginContentTypeJsonRequest withVehicleEngineType(PostRoutingVersionNumberCalculateReachableRangeOriginContentTypeJsonVehicleEngineTypeEnum vehicleEngineType) {
        this.vehicleEngineType = vehicleEngineType;
        return this;
    }
    
    /**
     * Height of the vehicle in meters.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=vehicleHeight")
    public Float vehicleHeight;

    public PostRoutingVersionNumberCalculateReachableRangeOriginContentTypeJsonRequest withVehicleHeight(Float vehicleHeight) {
        this.vehicleHeight = vehicleHeight;
        return this;
    }
    
    /**
     * Length of the vehicle in meters.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=vehicleLength")
    public Float vehicleLength;

    public PostRoutingVersionNumberCalculateReachableRangeOriginContentTypeJsonRequest withVehicleLength(Float vehicleLength) {
        this.vehicleLength = vehicleLength;
        return this;
    }
    
    /**
     * Indicates what kinds of hazardous materials the vehicle is carrying (if any). This means it may not be allowed on certain roads.
     * Use these for routing in the US:
     * 
     *   - &lt;i&gt;USHazmatClass1&lt;/i&gt; Explosives
     *   - &lt;i&gt;USHazmatClass2&lt;/i&gt; Compressed gas
     *   - &lt;i&gt;USHazmatClass3&lt;/i&gt; Flammable liquids
     *   - &lt;i&gt;USHazmatClass4&lt;/i&gt; Flammable solids
     *   - &lt;i&gt;USHazmatClass5&lt;/i&gt; Oxidizers
     *   - &lt;i&gt;USHazmatClass6&lt;/i&gt; Poisons
     *   - &lt;i&gt;USHazmatClass7&lt;/i&gt; Radioactive
     *   - &lt;i&gt;USHazmatClass8&lt;/i&gt; Corrosives
     *   - &lt;i&gt;USHazmatClass9&lt;/i&gt; Miscellaneous
     * 
     * Use these for routing in all other countries:
     * 
     *   - &lt;i&gt;otherHazmatExplosive&lt;/i&gt; Explosives
     *   - &lt;i&gt;otherHazmatGeneral&lt;/i&gt; Miscellaneous
     *   - &lt;i&gt;otherHazmatHarmfulToWater&lt;/i&gt; Harmful to water
     * 
     * vehicleLoadType can be specified multiple times. This parameter is currently only considered for &lt;b&gt;travelMode&lt;/b&gt;=&lt;i&gt;truck&lt;/i&gt;.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=vehicleLoadType")
    public String vehicleLoadType;

    public PostRoutingVersionNumberCalculateReachableRangeOriginContentTypeJsonRequest withVehicleLoadType(String vehicleLoadType) {
        this.vehicleLoadType = vehicleLoadType;
        return this;
    }
    
    /**
     * Maximum speed of the vehicle in km/hour.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=vehicleMaxSpeed")
    public Long vehicleMaxSpeed;

    public PostRoutingVersionNumberCalculateReachableRangeOriginContentTypeJsonRequest withVehicleMaxSpeed(Long vehicleMaxSpeed) {
        this.vehicleMaxSpeed = vehicleMaxSpeed;
        return this;
    }
    
    /**
     * Weight of the vehicle in kilograms.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=vehicleWeight")
    public Long vehicleWeight;

    public PostRoutingVersionNumberCalculateReachableRangeOriginContentTypeJsonRequest withVehicleWeight(Long vehicleWeight) {
        this.vehicleWeight = vehicleWeight;
        return this;
    }
    
    /**
     * Width of the vehicle in meters.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=vehicleWidth")
    public Float vehicleWidth;

    public PostRoutingVersionNumberCalculateReachableRangeOriginContentTypeJsonRequest withVehicleWidth(Float vehicleWidth) {
        this.vehicleWidth = vehicleWidth;
        return this;
    }
    
    /**
     * Service version number. The current value is 1.
     */
    @SpeakeasyMetadata("pathParam:style=simple,explode=false,name=versionNumber")
    public org.openapis.openapi.models.shared.VersionNumberEnum versionNumber;

    public PostRoutingVersionNumberCalculateReachableRangeOriginContentTypeJsonRequest withVersionNumber(org.openapis.openapi.models.shared.VersionNumberEnum versionNumber) {
        this.versionNumber = versionNumber;
        return this;
    }
    
    /**
     * Amount that a thrilling route should wind.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=windingness")
    public org.openapis.openapi.models.shared.WindingnessEnum windingness;

    public PostRoutingVersionNumberCalculateReachableRangeOriginContentTypeJsonRequest withWindingness(org.openapis.openapi.models.shared.WindingnessEnum windingness) {
        this.windingness = windingness;
        return this;
    }
    
    public PostRoutingVersionNumberCalculateReachableRangeOriginContentTypeJsonRequest(@JsonProperty("contentType") org.openapis.openapi.models.shared.ContentTypeEnum contentType, @JsonProperty("origin") String origin, @JsonProperty("versionNumber") org.openapis.openapi.models.shared.VersionNumberEnum versionNumber) {
        this.contentType = contentType;
        this.origin = origin;
        this.versionNumber = versionNumber;
  }
}
