/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import {
  objectToClass,
  SpeakeasyBase,
  SpeakeasyMetadata,
} from "../../../internal/utils";
import { ComponentPropertyGroupRequest } from "./componentpropertygrouprequest";
import { ComponentUpdateTypeEnum } from "./componentupdatetypeenum";
import { PropertyRequest } from "./propertyrequest";
import { Expose, Transform } from "class-transformer";

/**
 * The component update request.
 */
export class ComponentUpdateRequest extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "componentTypeId" })
  componentTypeId?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "description" })
  description?: string;

  @SpeakeasyMetadata({ elemType: ComponentPropertyGroupRequest })
  @Expose({ name: "propertyGroupUpdates" })
  @Transform(
    ({ value }) => {
      const obj: Record<string, ComponentPropertyGroupRequest> = {};
      for (const key in value) {
        obj[key] = objectToClass(value[key], ComponentPropertyGroupRequest);
      }
      return obj;
    },
    { toClassOnly: true }
  )
  propertyGroupUpdates?: Record<string, ComponentPropertyGroupRequest>;

  @SpeakeasyMetadata({ elemType: PropertyRequest })
  @Expose({ name: "propertyUpdates" })
  @Transform(
    ({ value }) => {
      const obj: Record<string, PropertyRequest> = {};
      for (const key in value) {
        obj[key] = objectToClass(value[key], PropertyRequest);
      }
      return obj;
    },
    { toClassOnly: true }
  )
  propertyUpdates?: Record<string, PropertyRequest>;

  @SpeakeasyMetadata()
  @Expose({ name: "updateType" })
  updateType?: ComponentUpdateTypeEnum;
}
