<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Operations;


class GroupLockedSettingsApplicationJSON1Recording
{
    /**
     * Make cloud recordings accessible to account members only.
     * 
     * @var ?bool $accountUserAccessRecording
     */
	#[\JMS\Serializer\Annotation\SerializedName('account_user_access_recording')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $accountUserAccessRecording = null;
    
    /**
     * Allow Zoom to automatically delete recordings permanently after a specified number of days.
     * 
     * @var ?bool $autoDeleteCmr
     */
	#[\JMS\Serializer\Annotation\SerializedName('auto_delete_cmr')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $autoDeleteCmr = null;
    
    /**
     * Record meetings automatically as they start.
     * 
     * @var ?string $autoRecording
     */
	#[\JMS\Serializer\Annotation\SerializedName('auto_recording')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $autoRecording = null;
    
    /**
     * Allow hosts to record and save the meeting / webinar in the cloud.
     * 
     * @var ?bool $cloudRecording
     */
	#[\JMS\Serializer\Annotation\SerializedName('cloud_recording')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $cloudRecording = null;
    
    /**
     * Allow anyone with a link to the cloud recording to download.
     * 
     * @var ?bool $cloudRecordingDownload
     */
	#[\JMS\Serializer\Annotation\SerializedName('cloud_recording_download')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $cloudRecordingDownload = null;
    
    /**
     * Allow the host to delete the recordings. If this option is disabled, the recordings cannot be deleted by the host and only admin can delete them.
     * 
     * @var ?bool $hostDeleteCloudRecording
     */
	#[\JMS\Serializer\Annotation\SerializedName('host_delete_cloud_recording')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $hostDeleteCloudRecording = null;
    
    /**
     * Setting to allow cloud recording access only from specific IP address ranges.
     * 
     * 
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Operations\GroupLockedSettingsApplicationJSON1RecordingIpAddressAccessControl $ipAddressAccessControl
     */
	#[\JMS\Serializer\Annotation\SerializedName('ip_address_access_control')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Operations\GroupLockedSettingsApplicationJSON1RecordingIpAddressAccessControl')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?GroupLockedSettingsApplicationJSON1RecordingIpAddressAccessControl $ipAddressAccessControl = null;
    
    /**
     * Allow hosts and participants to record the meeting to a local file.
     * 
     * @var ?bool $localRecording
     */
	#[\JMS\Serializer\Annotation\SerializedName('local_recording')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $localRecording = null;
    
	#[\JMS\Serializer\Annotation\SerializedName('recording_authentication')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $recordingAuthentication = null;
    
	public function __construct()
	{
		$this->accountUserAccessRecording = null;
		$this->autoDeleteCmr = null;
		$this->autoRecording = null;
		$this->cloudRecording = null;
		$this->cloudRecordingDownload = null;
		$this->hostDeleteCloudRecording = null;
		$this->ipAddressAccessControl = null;
		$this->localRecording = null;
		$this->recordingAuthentication = null;
	}
}
