// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"time"
)

// ClassDetailsCanvas - Meta information provided by Canvs LMS
type ClassDetailsCanvas struct {
	// Canvas instance domain (e.g. "canvas.instructure.com")
	Domain *string `json:"domain,omitempty"`
	// Unique identifier of the course on Canvas
	ID *string `json:"id,omitempty"`
}

// ClassDetailsCleverSubjectEnum - Normalized subject of the course
type ClassDetailsCleverSubjectEnum string

const (
	ClassDetailsCleverSubjectEnumEnglishLanguageArts         ClassDetailsCleverSubjectEnum = "english/language arts"
	ClassDetailsCleverSubjectEnumMath                        ClassDetailsCleverSubjectEnum = "math"
	ClassDetailsCleverSubjectEnumScience                     ClassDetailsCleverSubjectEnum = "science"
	ClassDetailsCleverSubjectEnumSocialStudies               ClassDetailsCleverSubjectEnum = "social studies"
	ClassDetailsCleverSubjectEnumLanguage                    ClassDetailsCleverSubjectEnum = "language"
	ClassDetailsCleverSubjectEnumHomeroomAdvisory            ClassDetailsCleverSubjectEnum = "homeroom/advisory"
	ClassDetailsCleverSubjectEnumInterventionsOnlineLearning ClassDetailsCleverSubjectEnum = "interventions/online learning"
	ClassDetailsCleverSubjectEnumTechnologyAndEngineering    ClassDetailsCleverSubjectEnum = "technology and engineering"
	ClassDetailsCleverSubjectEnumPeAndHealth                 ClassDetailsCleverSubjectEnum = "PE and health"
	ClassDetailsCleverSubjectEnumArtsAndMusic                ClassDetailsCleverSubjectEnum = "arts and music"
	ClassDetailsCleverSubjectEnumOther                       ClassDetailsCleverSubjectEnum = "other"
)

func (e ClassDetailsCleverSubjectEnum) ToPointer() *ClassDetailsCleverSubjectEnum {
	return &e
}

func (e *ClassDetailsCleverSubjectEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "english/language arts":
		fallthrough
	case "math":
		fallthrough
	case "science":
		fallthrough
	case "social studies":
		fallthrough
	case "language":
		fallthrough
	case "homeroom/advisory":
		fallthrough
	case "interventions/online learning":
		fallthrough
	case "technology and engineering":
		fallthrough
	case "PE and health":
		fallthrough
	case "arts and music":
		fallthrough
	case "other":
		*e = ClassDetailsCleverSubjectEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ClassDetailsCleverSubjectEnum: %v", v)
	}
}

// ClassDetailsClever - Clever.com section-related information
type ClassDetailsClever struct {
	// The creation date of the section on clever
	CreationDate *time.Time `json:"creationDate,omitempty"`
	// Clever section unique identifier
	ID *string `json:"id,omitempty"`
	// The last modification date of the section on clever
	ModificationDate *time.Time `json:"modificationDate,omitempty"`
	// Normalized subject of the course
	Subject *ClassDetailsCleverSubjectEnum `json:"subject,omitempty"`
	// End date of the term
	TermEndDate *time.Time `json:"termEndDate,omitempty"`
	// Name of the term when this course happens
	TermName *string `json:"termName,omitempty"`
	// Beginning date of the term
	TermStartDate *time.Time `json:"termStartDate,omitempty"`
}

// ClassDetailsGoogleClassroom - Google Classroom course-related information
type ClassDetailsGoogleClassroom struct {
	// Absolute link to this course in the Classroom web UI
	AlternateLink *string `json:"alternateLink,omitempty"`
	// The course identifier on Google Classroom
	ID *string `json:"id,omitempty"`
}

// ClassDetailsGoogleDrive - Google Drive course-related information provided by Google Classroom
type ClassDetailsGoogleDrive struct {
	// [Teachers only] The Drive URL of the teachers' folder
	//
	TeacherFolderAlternateLink *string `json:"teacherFolderAlternateLink,omitempty"`
	// [Teachers only] The Drive directory identifier of the teachers' folder
	//
	TeacherFolderID *string `json:"teacherFolderId,omitempty"`
}

// ClassDetailsIssuesSyncReasonEnum - The reason why the account cannot be synced
type ClassDetailsIssuesSyncReasonEnum string

const (
	ClassDetailsIssuesSyncReasonEnumOtherOrgnanization   ClassDetailsIssuesSyncReasonEnum = "otherOrgnanization"
	ClassDetailsIssuesSyncReasonEnumPersonalSubscription ClassDetailsIssuesSyncReasonEnum = "personalSubscription"
)

func (e ClassDetailsIssuesSyncReasonEnum) ToPointer() *ClassDetailsIssuesSyncReasonEnum {
	return &e
}

func (e *ClassDetailsIssuesSyncReasonEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "otherOrgnanization":
		fallthrough
	case "personalSubscription":
		*e = ClassDetailsIssuesSyncReasonEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ClassDetailsIssuesSyncReasonEnum: %v", v)
	}
}

// ClassDetailsIssuesSync - A sync issue
type ClassDetailsIssuesSync struct {
	// The email address of the user concerned by this sync issue
	Email *string `json:"email,omitempty"`
	// The account user identifier
	ID *string `json:"id,omitempty"`
	// The reason why the account cannot be synced
	Reason *ClassDetailsIssuesSyncReasonEnum `json:"reason,omitempty"`
}

// ClassDetailsIssues - Detected issues for this class
type ClassDetailsIssues struct {
	// Synchronization issues for the class
	Sync []ClassDetailsIssuesSync `json:"sync,omitempty"`
}

// ClassDetailsLti - Meta information provided by the LTI consumer
type ClassDetailsLti struct {
	// Unique context identifier provided
	ContextID *string `json:"contextId,omitempty"`
	// Context label
	ContextLabel *string `json:"contextLabel,omitempty"`
	// Context title
	ContextTitle *string `json:"contextTitle,omitempty"`
}

// ClassDetailsMfc - Meta information provided by Canvs LMS
type ClassDetailsMfc struct {
	// Link to MusicFirst Classroom class
	AlternateLink *string `json:"alternateLink,omitempty"`
	// Unique identifier of the course on MusicFirst Classroom
	ID *string `json:"id,omitempty"`
}

type ClassDetailsMicrosoftGraph struct {
	// The course identifier on Microsoft Graph
	ID *string `json:"id,omitempty"`
}

// ClassDetails - A classroom
type ClassDetails struct {
	// The number of assignments created in the class
	AssignmentsCount *float64 `json:"assignmentsCount,omitempty"`
	// Meta information provided by Canvs LMS
	Canvas *ClassDetailsCanvas `json:"canvas,omitempty"`
	// Clever.com section-related information
	Clever *ClassDetailsClever `json:"clever,omitempty"`
	// The date when the class was create
	CreationDate *time.Time `json:"creationDate,omitempty"`
	// An optionnal description for this class
	Description *string `json:"description,omitempty"`
	// [Teachers only] The enrollment code that can be used by the students to join the class
	//
	EnrollmentCode *string `json:"enrollmentCode,omitempty"`
	// Google Classroom course-related information
	GoogleClassroom *ClassDetailsGoogleClassroom `json:"googleClassroom,omitempty"`
	// Google Drive course-related information provided by Google Classroom
	GoogleDrive *ClassDetailsGoogleDrive `json:"googleDrive,omitempty"`
	// The unique identifier of the class
	ID *string `json:"id,omitempty"`
	// Detected issues for this class
	Issues *ClassDetailsIssues `json:"issues,omitempty"`
	// Meta information provided by the LTI consumer
	Lti *ClassDetailsLti `json:"lti,omitempty"`
	// Meta information provided by Canvs LMS
	Mfc            *ClassDetailsMfc            `json:"mfc,omitempty"`
	MicrosoftGraph *ClassDetailsMicrosoftGraph `json:"microsoftGraph,omitempty"`
	// The name of the class
	Name *string `json:"name,omitempty"`
	// The unique identifier of the Organization owning this class
	Organization *string `json:"organization,omitempty"`
	// The unique identifier of the User owning this class
	Owner *string `json:"owner,omitempty"`
	// The section of the class
	Section *string `json:"section,omitempty"`
	// The state of a classroom
	State *ClassStateEnum `json:"state,omitempty"`
	// The details of a group
	StudentsGroup *GroupDetails `json:"studentsGroup,omitempty"`
	// The details of a group
	TeachersGroup *GroupDetails `json:"teachersGroup,omitempty"`
	// The theme identifier using in Flat User Interface
	Theme *string `json:"theme,omitempty"`
}
