// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type SocialRegimeLevelEnum string

const (
	SocialRegimeLevelEnumConfidential SocialRegimeLevelEnum = "confidential"
	SocialRegimeLevelEnumRegular      SocialRegimeLevelEnum = "regular"
	SocialRegimeLevelEnumPublic       SocialRegimeLevelEnum = "public"
)

func (e SocialRegimeLevelEnum) ToPointer() *SocialRegimeLevelEnum {
	return &e
}

func (e *SocialRegimeLevelEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "confidential":
		fallthrough
	case "regular":
		fallthrough
	case "public":
		*e = SocialRegimeLevelEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SocialRegimeLevelEnum: %v", v)
	}
}

type SocialRegimePeriodicityEnum string

const (
	SocialRegimePeriodicityEnumMonthly    SocialRegimePeriodicityEnum = "monthly"
	SocialRegimePeriodicityEnumQuarterly  SocialRegimePeriodicityEnum = "quarterly"
	SocialRegimePeriodicityEnumHalfYearly SocialRegimePeriodicityEnum = "half-yearly"
	SocialRegimePeriodicityEnumAnnual     SocialRegimePeriodicityEnum = "annual"
	SocialRegimePeriodicityEnumNull       SocialRegimePeriodicityEnum = "null"
)

func (e SocialRegimePeriodicityEnum) ToPointer() *SocialRegimePeriodicityEnum {
	return &e
}

func (e *SocialRegimePeriodicityEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "monthly":
		fallthrough
	case "quarterly":
		fallthrough
	case "half-yearly":
		fallthrough
	case "annual":
		fallthrough
	case "null":
		*e = SocialRegimePeriodicityEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SocialRegimePeriodicityEnum: %v", v)
	}
}

type SocialRegimeTypeEnum string

const (
	SocialRegimeTypeEnumMandatory SocialRegimeTypeEnum = "mandatory"
	SocialRegimeTypeEnumOptional  SocialRegimeTypeEnum = "optional"
	SocialRegimeTypeEnumNull      SocialRegimeTypeEnum = "null"
)

func (e SocialRegimeTypeEnum) ToPointer() *SocialRegimeTypeEnum {
	return &e
}

func (e *SocialRegimeTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "mandatory":
		fallthrough
	case "optional":
		fallthrough
	case "null":
		*e = SocialRegimeTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SocialRegimeTypeEnum: %v", v)
	}
}

// SocialRegime - A social regime folder
type SocialRegime struct {
	About            *string                      `json:"About,omitempty"`
	ArchivalDate     *string                      `json:"ArchivalDate,omitempty"`
	Class            *string                      `json:"Class,omitempty"`
	Comment          *string                      `json:"Comment,omitempty"`
	Designation      *string                      `json:"Designation,omitempty"`
	End              *string                      `json:"End,omitempty"`
	Home             *bool                        `json:"Home,omitempty"`
	ID               *string                      `json:"Id,omitempty"`
	Keywords         []string                     `json:"Keywords,omitempty"`
	Level            *SocialRegimeLevelEnum       `json:"Level,omitempty"`
	ModificationDate *string                      `json:"ModificationDate,omitempty"`
	Name             *string                      `json:"Name,omitempty"`
	Parent           *string                      `json:"Parent,omitempty"`
	Periodicity      *SocialRegimePeriodicityEnum `json:"Periodicity,omitempty"`
	Start            *string                      `json:"Start,omitempty"`
	Type             *SocialRegimeTypeEnum        `json:"Type,omitempty"`
}
