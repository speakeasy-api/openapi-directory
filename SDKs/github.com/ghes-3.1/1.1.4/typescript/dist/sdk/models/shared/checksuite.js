"use strict";
/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CheckSuite = exports.CheckSuiteStatusEnum = exports.CheckSuiteConclusionEnum = void 0;
var utils_1 = require("../../../internal/utils");
var minimalrepository_1 = require("./minimalrepository");
var nullableintegration_1 = require("./nullableintegration");
var pullrequestminimal_1 = require("./pullrequestminimal");
var simplecommit_1 = require("./simplecommit");
var class_transformer_1 = require("class-transformer");
var CheckSuiteConclusionEnum;
(function (CheckSuiteConclusionEnum) {
    CheckSuiteConclusionEnum["Success"] = "success";
    CheckSuiteConclusionEnum["Failure"] = "failure";
    CheckSuiteConclusionEnum["Neutral"] = "neutral";
    CheckSuiteConclusionEnum["Cancelled"] = "cancelled";
    CheckSuiteConclusionEnum["Skipped"] = "skipped";
    CheckSuiteConclusionEnum["TimedOut"] = "timed_out";
    CheckSuiteConclusionEnum["ActionRequired"] = "action_required";
})(CheckSuiteConclusionEnum = exports.CheckSuiteConclusionEnum || (exports.CheckSuiteConclusionEnum = {}));
var CheckSuiteStatusEnum;
(function (CheckSuiteStatusEnum) {
    CheckSuiteStatusEnum["Queued"] = "queued";
    CheckSuiteStatusEnum["InProgress"] = "in_progress";
    CheckSuiteStatusEnum["Completed"] = "completed";
})(CheckSuiteStatusEnum = exports.CheckSuiteStatusEnum || (exports.CheckSuiteStatusEnum = {}));
/**
 * A suite of checks performed on the code of a given code change
 */
var CheckSuite = /** @class */ (function (_super) {
    __extends(CheckSuite, _super);
    function CheckSuite() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "after" }),
        __metadata("design:type", String)
    ], CheckSuite.prototype, "after", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "app" }),
        (0, class_transformer_1.Type)(function () { return nullableintegration_1.NullableIntegration; }),
        __metadata("design:type", nullableintegration_1.NullableIntegration)
    ], CheckSuite.prototype, "app", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "before" }),
        __metadata("design:type", String)
    ], CheckSuite.prototype, "before", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "check_runs_url" }),
        __metadata("design:type", String)
    ], CheckSuite.prototype, "checkRunsUrl", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "conclusion" }),
        __metadata("design:type", String)
    ], CheckSuite.prototype, "conclusion", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "created_at" }),
        (0, class_transformer_1.Transform)(function (_a) {
            var value = _a.value;
            return new Date(value);
        }, { toClassOnly: true }),
        __metadata("design:type", Date)
    ], CheckSuite.prototype, "createdAt", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "head_branch" }),
        __metadata("design:type", String)
    ], CheckSuite.prototype, "headBranch", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "head_commit" }),
        (0, class_transformer_1.Type)(function () { return simplecommit_1.SimpleCommit; }),
        __metadata("design:type", simplecommit_1.SimpleCommit)
    ], CheckSuite.prototype, "headCommit", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "head_sha" }),
        __metadata("design:type", String)
    ], CheckSuite.prototype, "headSha", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "id" }),
        __metadata("design:type", Number)
    ], CheckSuite.prototype, "id", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "latest_check_runs_count" }),
        __metadata("design:type", Number)
    ], CheckSuite.prototype, "latestCheckRunsCount", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "node_id" }),
        __metadata("design:type", String)
    ], CheckSuite.prototype, "nodeId", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({ elemType: pullrequestminimal_1.PullRequestMinimal }),
        (0, class_transformer_1.Expose)({ name: "pull_requests" }),
        (0, class_transformer_1.Type)(function () { return pullrequestminimal_1.PullRequestMinimal; }),
        __metadata("design:type", Array)
    ], CheckSuite.prototype, "pullRequests", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "repository" }),
        (0, class_transformer_1.Type)(function () { return minimalrepository_1.MinimalRepository; }),
        __metadata("design:type", minimalrepository_1.MinimalRepository)
    ], CheckSuite.prototype, "repository", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "rerequestable" }),
        __metadata("design:type", Boolean)
    ], CheckSuite.prototype, "rerequestable", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "runs_rerequestable" }),
        __metadata("design:type", Boolean)
    ], CheckSuite.prototype, "runsRerequestable", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "status" }),
        __metadata("design:type", String)
    ], CheckSuite.prototype, "status", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "updated_at" }),
        (0, class_transformer_1.Transform)(function (_a) {
            var value = _a.value;
            return new Date(value);
        }, { toClassOnly: true }),
        __metadata("design:type", Date)
    ], CheckSuite.prototype, "updatedAt", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "url" }),
        __metadata("design:type", String)
    ], CheckSuite.prototype, "url", void 0);
    return CheckSuite;
}(utils_1.SpeakeasyBase));
exports.CheckSuite = CheckSuite;
