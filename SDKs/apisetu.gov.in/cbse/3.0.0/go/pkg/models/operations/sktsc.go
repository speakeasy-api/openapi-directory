// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type SktscSecurity struct {
	APIKey   shared.SchemeAPIKey   `security:"scheme,type=apiKey,subtype=header"`
	ClientID shared.SchemeClientID `security:"scheme,type=apiKey,subtype=header"`
}

type SktscRequestBodyCertificateParameters struct {
	// Full name
	FullName string `json:"FullName"`
	// Roll No
	Rollno string `json:"rollno"`
	// Year
	Year string `json:"year"`
}

// SktscRequestBodyFormatEnum - The format of the certificate in response.
type SktscRequestBodyFormatEnum string

const (
	SktscRequestBodyFormatEnumPdf SktscRequestBodyFormatEnum = "pdf"
)

func (e *SktscRequestBodyFormatEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "pdf":
		*e = SktscRequestBodyFormatEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for SktscRequestBodyFormatEnum: %s", s)
	}
}

// SktscRequestBody - Request format
type SktscRequestBody struct {
	CertificateParameters *SktscRequestBodyCertificateParameters `json:"certificateParameters,omitempty"`
	ConsentArtifact       *shared.ConsentArtifactSchema          `json:"consentArtifact,omitempty"`
	// The format of the certificate in response.
	Format SktscRequestBodyFormatEnum `json:"format"`
	// A unique transaction id for this request in UUID format. It is used for tracking the request.
	TxnID string `json:"txnId"`
}

type SktscRequest struct {
	// Request format
	Request  *SktscRequestBody `request:"mediaType=application/json"`
	Security SktscSecurity
}

type Sktsc504ApplicationJSONErrorEnum string

const (
	Sktsc504ApplicationJSONErrorEnumGatewayTimeout Sktsc504ApplicationJSONErrorEnum = "gateway_timeout"
)

func (e *Sktsc504ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "gateway_timeout":
		*e = Sktsc504ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Sktsc504ApplicationJSONErrorEnum: %s", s)
	}
}

type Sktsc504ApplicationJSONErrorDescriptionEnum string

const (
	Sktsc504ApplicationJSONErrorDescriptionEnumPublisherServiceDidNotRespondInTime Sktsc504ApplicationJSONErrorDescriptionEnum = "Publisher service did not respond in time"
)

func (e *Sktsc504ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Publisher service did not respond in time":
		*e = Sktsc504ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Sktsc504ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Sktsc504ApplicationJSON - Gateway timeout
type Sktsc504ApplicationJSON struct {
	Error            *Sktsc504ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Sktsc504ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Sktsc503ApplicationJSONErrorEnum string

const (
	Sktsc503ApplicationJSONErrorEnumServiceUnavailable Sktsc503ApplicationJSONErrorEnum = "service_unavailable"
)

func (e *Sktsc503ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "service_unavailable":
		*e = Sktsc503ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Sktsc503ApplicationJSONErrorEnum: %s", s)
	}
}

type Sktsc503ApplicationJSONErrorDescriptionEnum string

const (
	Sktsc503ApplicationJSONErrorDescriptionEnumPublisherServiceIsTemporarilyUnavailable Sktsc503ApplicationJSONErrorDescriptionEnum = "Publisher service is temporarily unavailable"
)

func (e *Sktsc503ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Publisher service is temporarily unavailable":
		*e = Sktsc503ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Sktsc503ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Sktsc503ApplicationJSON - Service unavailable
type Sktsc503ApplicationJSON struct {
	Error            *Sktsc503ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Sktsc503ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Sktsc502ApplicationJSONErrorEnum string

const (
	Sktsc502ApplicationJSONErrorEnumBadGatewy Sktsc502ApplicationJSONErrorEnum = "bad_gatewy"
)

func (e *Sktsc502ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "bad_gatewy":
		*e = Sktsc502ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Sktsc502ApplicationJSONErrorEnum: %s", s)
	}
}

type Sktsc502ApplicationJSONErrorDescriptionEnum string

const (
	Sktsc502ApplicationJSONErrorDescriptionEnumPublisherServiceReturnedAnInvalidResponse Sktsc502ApplicationJSONErrorDescriptionEnum = "Publisher service returned an invalid response"
)

func (e *Sktsc502ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Publisher service returned an invalid response":
		*e = Sktsc502ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Sktsc502ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Sktsc502ApplicationJSON - Bad gateway
type Sktsc502ApplicationJSON struct {
	Error            *Sktsc502ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Sktsc502ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Sktsc500ApplicationJSONErrorEnum string

const (
	Sktsc500ApplicationJSONErrorEnumInternalServerError Sktsc500ApplicationJSONErrorEnum = "internal_server_error"
)

func (e *Sktsc500ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "internal_server_error":
		*e = Sktsc500ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Sktsc500ApplicationJSONErrorEnum: %s", s)
	}
}

type Sktsc500ApplicationJSONErrorDescriptionEnum string

const (
	Sktsc500ApplicationJSONErrorDescriptionEnumInternalServerError Sktsc500ApplicationJSONErrorDescriptionEnum = "Internal server error"
)

func (e *Sktsc500ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Internal server error":
		*e = Sktsc500ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Sktsc500ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Sktsc500ApplicationJSON - Internal server error
type Sktsc500ApplicationJSON struct {
	Error            *Sktsc500ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Sktsc500ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Sktsc404ApplicationJSONErrorEnum string

const (
	Sktsc404ApplicationJSONErrorEnumRecordNotFound Sktsc404ApplicationJSONErrorEnum = "record_not_found"
	Sktsc404ApplicationJSONErrorEnumURLNotFound    Sktsc404ApplicationJSONErrorEnum = "url_not_found"
)

func (e *Sktsc404ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "record_not_found":
		fallthrough
	case "url_not_found":
		*e = Sktsc404ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Sktsc404ApplicationJSONErrorEnum: %s", s)
	}
}

type Sktsc404ApplicationJSONErrorDescriptionEnum string

const (
	Sktsc404ApplicationJSONErrorDescriptionEnumNoRecordFound               Sktsc404ApplicationJSONErrorDescriptionEnum = "No record found"
	Sktsc404ApplicationJSONErrorDescriptionEnumYourAPIURLOrPathIsIncorrect Sktsc404ApplicationJSONErrorDescriptionEnum = "Your API url or path is incorrect"
)

func (e *Sktsc404ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "No record found":
		fallthrough
	case "Your API url or path is incorrect":
		*e = Sktsc404ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Sktsc404ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Sktsc404ApplicationJSON - No record found
type Sktsc404ApplicationJSON struct {
	Error            *Sktsc404ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Sktsc404ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Sktsc401ApplicationJSONErrorEnum string

const (
	Sktsc401ApplicationJSONErrorEnumInvalidAuthentication Sktsc401ApplicationJSONErrorEnum = "invalid_authentication"
	Sktsc401ApplicationJSONErrorEnumInvalidAuthorization  Sktsc401ApplicationJSONErrorEnum = "invalid_authorization"
)

func (e *Sktsc401ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "invalid_authentication":
		fallthrough
	case "invalid_authorization":
		*e = Sktsc401ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Sktsc401ApplicationJSONErrorEnum: %s", s)
	}
}

type Sktsc401ApplicationJSONErrorDescriptionEnum string

const (
	Sktsc401ApplicationJSONErrorDescriptionEnumAuthenticationFailed            Sktsc401ApplicationJSONErrorDescriptionEnum = "Authentication failed"
	Sktsc401ApplicationJSONErrorDescriptionEnumYouAreNotAuthorizedToUseThisAPI Sktsc401ApplicationJSONErrorDescriptionEnum = "You are not authorized to use this API"
)

func (e *Sktsc401ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Authentication failed":
		fallthrough
	case "You are not authorized to use this API":
		*e = Sktsc401ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Sktsc401ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Sktsc401ApplicationJSON - Unauthorized access
type Sktsc401ApplicationJSON struct {
	Error            *Sktsc401ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Sktsc401ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Sktsc400ApplicationJSONErrorEnum string

const (
	Sktsc400ApplicationJSONErrorEnumMissingParameter Sktsc400ApplicationJSONErrorEnum = "missing_parameter"
	Sktsc400ApplicationJSONErrorEnumInvalidParameter Sktsc400ApplicationJSONErrorEnum = "invalid_parameter"
	Sktsc400ApplicationJSONErrorEnumInvalidFormat    Sktsc400ApplicationJSONErrorEnum = "invalid_format"
	Sktsc400ApplicationJSONErrorEnumInvalidTxnid     Sktsc400ApplicationJSONErrorEnum = "invalid_txnid"
	Sktsc400ApplicationJSONErrorEnumInvalidConsentid Sktsc400ApplicationJSONErrorEnum = "invalid_consentid"
)

func (e *Sktsc400ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "missing_parameter":
		fallthrough
	case "invalid_parameter":
		fallthrough
	case "invalid_format":
		fallthrough
	case "invalid_txnid":
		fallthrough
	case "invalid_consentid":
		*e = Sktsc400ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Sktsc400ApplicationJSONErrorEnum: %s", s)
	}
}

type Sktsc400ApplicationJSONErrorDescriptionEnum string

const (
	Sktsc400ApplicationJSONErrorDescriptionEnumPleaseProvideAllMandatoryParameters     Sktsc400ApplicationJSONErrorDescriptionEnum = "Please provide all mandatory parameters"
	Sktsc400ApplicationJSONErrorDescriptionEnumBadRequest                              Sktsc400ApplicationJSONErrorDescriptionEnum = "Bad request"
	Sktsc400ApplicationJSONErrorDescriptionEnumTheFormatParameterIsInvalid             Sktsc400ApplicationJSONErrorDescriptionEnum = "The format parameter is invalid"
	Sktsc400ApplicationJSONErrorDescriptionEnumTheTxnIDParameterMustBeInUUIDFormat     Sktsc400ApplicationJSONErrorDescriptionEnum = "The txnId parameter must be in UUID format"
	Sktsc400ApplicationJSONErrorDescriptionEnumTheConsentIDParameterMustBeInUUIDFormat Sktsc400ApplicationJSONErrorDescriptionEnum = "The consentId parameter must be in UUID format"
)

func (e *Sktsc400ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Please provide all mandatory parameters":
		fallthrough
	case "Bad request":
		fallthrough
	case "The format parameter is invalid":
		fallthrough
	case "The txnId parameter must be in UUID format":
		fallthrough
	case "The consentId parameter must be in UUID format":
		*e = Sktsc400ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Sktsc400ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Sktsc400ApplicationJSON - Bad request
type Sktsc400ApplicationJSON struct {
	Error            *Sktsc400ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Sktsc400ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type SktscResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Bad request
	Sktsc400ApplicationJSONObject *Sktsc400ApplicationJSON
	// Unauthorized access
	Sktsc401ApplicationJSONObject *Sktsc401ApplicationJSON
	// No record found
	Sktsc404ApplicationJSONObject *Sktsc404ApplicationJSON
	// Internal server error
	Sktsc500ApplicationJSONObject *Sktsc500ApplicationJSON
	// Bad gateway
	Sktsc502ApplicationJSONObject *Sktsc502ApplicationJSON
	// Service unavailable
	Sktsc503ApplicationJSONObject *Sktsc503ApplicationJSON
	// Gateway timeout
	Sktsc504ApplicationJSONObject *Sktsc504ApplicationJSON
}
