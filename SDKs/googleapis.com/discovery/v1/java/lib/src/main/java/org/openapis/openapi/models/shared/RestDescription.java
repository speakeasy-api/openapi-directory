/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * RestDescription - Successful response
 */
public class RestDescription {
    /**
     * Authentication information.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("auth")
    public RestDescriptionAuth auth;
    public RestDescription withAuth(RestDescriptionAuth auth) {
        this.auth = auth;
        return this;
    }
    
    /**
     * [DEPRECATED] The base path for REST requests.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("basePath")
    public String basePath;
    public RestDescription withBasePath(String basePath) {
        this.basePath = basePath;
        return this;
    }
    
    /**
     * [DEPRECATED] The base URL for REST requests.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("baseUrl")
    public String baseUrl;
    public RestDescription withBaseUrl(String baseUrl) {
        this.baseUrl = baseUrl;
        return this;
    }
    
    /**
     * The path for REST batch requests.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("batchPath")
    public String batchPath;
    public RestDescription withBatchPath(String batchPath) {
        this.batchPath = batchPath;
        return this;
    }
    
    /**
     * Indicates how the API name should be capitalized and split into various parts. Useful for generating pretty class names.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("canonicalName")
    public String canonicalName;
    public RestDescription withCanonicalName(String canonicalName) {
        this.canonicalName = canonicalName;
        return this;
    }
    
    /**
     * The description of this API.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    public String description;
    public RestDescription withDescription(String description) {
        this.description = description;
        return this;
    }
    
    /**
     * Indicate the version of the Discovery API used to generate this doc.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("discoveryVersion")
    public String discoveryVersion;
    public RestDescription withDiscoveryVersion(String discoveryVersion) {
        this.discoveryVersion = discoveryVersion;
        return this;
    }
    
    /**
     * A link to human readable documentation for the API.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("documentationLink")
    public String documentationLink;
    public RestDescription withDocumentationLink(String documentationLink) {
        this.documentationLink = documentationLink;
        return this;
    }
    
    /**
     * The ETag for this response.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("etag")
    public String etag;
    public RestDescription withEtag(String etag) {
        this.etag = etag;
        return this;
    }
    
    /**
     * Enable exponential backoff for suitable methods in the generated clients.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("exponentialBackoffDefault")
    public Boolean exponentialBackoffDefault;
    public RestDescription withExponentialBackoffDefault(Boolean exponentialBackoffDefault) {
        this.exponentialBackoffDefault = exponentialBackoffDefault;
        return this;
    }
    
    /**
     * A list of supported features for this API.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("features")
    public String[] features;
    public RestDescription withFeatures(String[] features) {
        this.features = features;
        return this;
    }
    
    /**
     * Links to 16x16 and 32x32 icons representing the API.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("icons")
    public RestDescriptionIcons icons;
    public RestDescription withIcons(RestDescriptionIcons icons) {
        this.icons = icons;
        return this;
    }
    
    /**
     * The ID of this API.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    public String id;
    public RestDescription withId(String id) {
        this.id = id;
        return this;
    }
    
    /**
     * The kind for this response.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("kind")
    public String kind;
    public RestDescription withKind(String kind) {
        this.kind = kind;
        return this;
    }
    
    /**
     * Labels for the status of this API, such as labs or deprecated.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("labels")
    public String[] labels;
    public RestDescription withLabels(String[] labels) {
        this.labels = labels;
        return this;
    }
    
    /**
     * API-level methods for this API.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("methods")
    public java.util.Map<String, RestMethod> methods;
    public RestDescription withMethods(java.util.Map<String, RestMethod> methods) {
        this.methods = methods;
        return this;
    }
    
    /**
     * The name of this API.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    public String name;
    public RestDescription withName(String name) {
        this.name = name;
        return this;
    }
    
    /**
     * The domain of the owner of this API. Together with the ownerName and a packagePath values, this can be used to generate a library for this API which would have a unique fully qualified name.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ownerDomain")
    public String ownerDomain;
    public RestDescription withOwnerDomain(String ownerDomain) {
        this.ownerDomain = ownerDomain;
        return this;
    }
    
    /**
     * The name of the owner of this API. See ownerDomain.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ownerName")
    public String ownerName;
    public RestDescription withOwnerName(String ownerName) {
        this.ownerName = ownerName;
        return this;
    }
    
    /**
     * The package of the owner of this API. See ownerDomain.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("packagePath")
    public String packagePath;
    public RestDescription withPackagePath(String packagePath) {
        this.packagePath = packagePath;
        return this;
    }
    
    /**
     * Common parameters that apply across all apis.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("parameters")
    public java.util.Map<String, JsonSchema> parameters;
    public RestDescription withParameters(java.util.Map<String, JsonSchema> parameters) {
        this.parameters = parameters;
        return this;
    }
    
    /**
     * The protocol described by this document.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("protocol")
    public String protocol;
    public RestDescription withProtocol(String protocol) {
        this.protocol = protocol;
        return this;
    }
    
    /**
     * The resources in this API.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("resources")
    public java.util.Map<String, RestResource> resources;
    public RestDescription withResources(java.util.Map<String, RestResource> resources) {
        this.resources = resources;
        return this;
    }
    
    /**
     * The version of this API.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("revision")
    public String revision;
    public RestDescription withRevision(String revision) {
        this.revision = revision;
        return this;
    }
    
    /**
     * The root URL under which all API services live.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("rootUrl")
    public String rootUrl;
    public RestDescription withRootUrl(String rootUrl) {
        this.rootUrl = rootUrl;
        return this;
    }
    
    /**
     * The schemas for this API.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("schemas")
    public java.util.Map<String, JsonSchema> schemas;
    public RestDescription withSchemas(java.util.Map<String, JsonSchema> schemas) {
        this.schemas = schemas;
        return this;
    }
    
    /**
     * The base path for all REST requests.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("servicePath")
    public String servicePath;
    public RestDescription withServicePath(String servicePath) {
        this.servicePath = servicePath;
        return this;
    }
    
    /**
     * The title of this API.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("title")
    public String title;
    public RestDescription withTitle(String title) {
        this.title = title;
        return this;
    }
    
    /**
     * The version of this API.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("version")
    public String version;
    public RestDescription withVersion(String version) {
        this.version = version;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("version_module")
    public Boolean versionModule;
    public RestDescription withVersionModule(Boolean versionModule) {
        this.versionModule = versionModule;
        return this;
    }
    
}
