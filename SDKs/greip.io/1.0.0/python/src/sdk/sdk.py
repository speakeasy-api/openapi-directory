"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations

SERVERS = [
    "https://gregeoip.com",
    r"""Production server"""
    "https://dev.gregeoip.com",
    r"""Development server"""
]
"""Contains the list of servers available to the SDK"""

class SDK:
    r"""This documentation shows how to use Greip API, By highlighting the API methods, options and some other features that allow you to get the most of this API.
    https://docs.greip.io - Find more info here
    """

    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str = SERVERS[0]
    _language: str = "python"
    _sdk_version: str = "0.0.1"
    _gen_version: str = "internal"

    def __init__(self,
                 server_url: str = None,
                 url_params: dict[str, str] = None,
                 client: requests_http.Session = None
                 ) -> None:
        """Instantiates the SDK configuring it with the provided parameters.
        
        :param server_url: The server URL to use for all operations
        :type server_url: str
        :param url_params: Parameters to optionally template the server URL with
        :type url_params: dict[str, str]
        :param client: The requests.Session HTTP client to use for all operations
        :type client: requests_http.Session        
        """
        self._client = requests_http.Session()
        
        
        if server_url is not None:
            if url_params is not None:
                self._server_url = utils.template_url(server_url, url_params)
            else:
                self._server_url = server_url

        if client is not None:
            self._client = client
        
        self._security_client = self._client
        

        
    
    
    def get_bulk_lookup(self, request: operations.GetBulkLookupRequest) -> operations.GetBulkLookupResponse:
        r"""BulkLookup endpoint: Returns the geolocation data of multiple IP Addresses.
        https://docs.greip.io/methods/bulk-lookup - Greip API - Bulk Lookup
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/BulkLookup'
        
        query_params = utils.get_query_params(operations.GetBulkLookupRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetBulkLookupResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def get_country(self, request: operations.GetCountryRequest) -> operations.GetCountryResponse:
        r"""Country endpoint: Returns the information of a specific country by passing the `countrCode`.
        https://docs.greip.io/methods/country-data-api - Greip API - Country Data API
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/Country'
        
        query_params = utils.get_query_params(operations.GetCountryRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetCountryResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def get_geo_ip(self, request: operations.GetGeoIPRequest) -> operations.GetGeoIPResponse:
        r"""GeoIP endpoint: Returns the geolocation data of the visitor.
        https://docs.greip.io/methods/retrieve-visitor-info - Greip API - Retrieve Visitor Info
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/GeoIP'
        
        query_params = utils.get_query_params(operations.GetGeoIPRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetGeoIPResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def get_ip_lookup(self, request: operations.GetIPLookupRequest) -> operations.GetIPLookupResponse:
        r"""IPLookup endpoint: Returns the geolocation data of a specific IP Address.
        https://docs.greip.io/methods/lookup-ip-address - Greip API - Lookup IP Address
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/IPLookup'
        
        query_params = utils.get_query_params(operations.GetIPLookupRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetIPLookupResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def get_bad_words(self, request: operations.GetBadWordsRequest) -> operations.GetBadWordsResponse:
        r"""badWords endpoint: Detects whether user inputs contain profanity or not.
        https://docs.greip.io/methods/profanity-detection - Greip API - Profanity Detection
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/badWords'
        
        query_params = utils.get_query_params(operations.GetBadWordsRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetBadWordsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    