/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi;

import com.fasterxml.jackson.databind.ObjectMapper;
import java.net.http.HttpResponse;
import java.nio.charset.StandardCharsets;
import org.apache.http.NameValuePair;
import org.openapis.openapi.utils.HTTPClient;
import org.openapis.openapi.utils.HTTPRequest;
import org.openapis.openapi.utils.JSON;

/**
 * An electioneering communication is any broadcast, cable or satellite communication that fulfills each of the following conditions: 
 * 
 *  _The communication refers to a clearly identified federal candidate._ 
 * 
 *  _The communication is publicly distributed by a television station, radio station, cable television system or satellite system for a fee._ 
 * 
 *  _The communication is distributed within 60 days prior to a general election or 30 days prior to a primary election to federal office._
 */
public class Electioneering {
	
	private HTTPClient _defaultClient;
	private HTTPClient _securityClient;
	private String _serverUrl;
	private String _language;
	private String _sdkVersion;
	private String _genVersion;

	public Electioneering(HTTPClient defaultClient, HTTPClient securityClient, String serverUrl, String language, String sdkVersion, String genVersion) {
		this._defaultClient = defaultClient;
		this._securityClient = securityClient;
		this._serverUrl = serverUrl;
		this._language = language;
		this._sdkVersion = sdkVersion;
		this._genVersion = genVersion;
	}

    /**
     *  - An electioneering communication is any broadcast, cable or satellite communication that fulfills each of the following conditions: -  - _The communication refers to a clearly identified federal candidate._ -  - _The communication is publicly distributed by a television station, radio station, cable television system or satellite system for a fee._ -  - _The communication is distributed within 60 days prior to a general election or 30 days prior to a primary election to federal office._ - 
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetElectioneeringResponse getElectioneering(org.openapis.openapi.models.operations.GetElectioneeringRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/electioneering/");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.GetElectioneeringRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetElectioneeringResponse res = new org.openapis.openapi.models.operations.GetElectioneeringResponse(contentType, httpRes.statusCode()) {{
            electioneeringPage = null;
        }};
        res.rawResponse = httpRes;
        
        if (true) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ElectioneeringPage out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ElectioneeringPage.class);
                res.electioneeringPage = out;
            }
        }

        return res;
    }

    /**
     * Electioneering communications costs aggregates
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetElectioneeringAggregatesResponse getElectioneeringAggregates(org.openapis.openapi.models.operations.GetElectioneeringAggregatesRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/electioneering/aggregates/");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.GetElectioneeringAggregatesRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetElectioneeringAggregatesResponse res = new org.openapis.openapi.models.operations.GetElectioneeringAggregatesResponse(contentType, httpRes.statusCode()) {{
            electioneeringByCandidatePage = null;
        }};
        res.rawResponse = httpRes;
        
        if (true) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ElectioneeringByCandidatePage out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ElectioneeringByCandidatePage.class);
                res.electioneeringByCandidatePage = out;
            }
        }

        return res;
    }

    /**
     * Electioneering costs aggregated by candidate
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetElectioneeringByCandidateResponse getElectioneeringByCandidate(org.openapis.openapi.models.operations.GetElectioneeringByCandidateRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/electioneering/by_candidate/");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.GetElectioneeringByCandidateRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetElectioneeringByCandidateResponse res = new org.openapis.openapi.models.operations.GetElectioneeringByCandidateResponse(contentType, httpRes.statusCode()) {{
            electioneeringByCandidatePage = null;
        }};
        res.rawResponse = httpRes;
        
        if (true) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ElectioneeringByCandidatePage out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ElectioneeringByCandidatePage.class);
                res.electioneeringByCandidatePage = out;
            }
        }

        return res;
    }

    /**
     *  - Total electioneering communications spent on candidates by cycle - or candidate election year - 
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetElectioneeringTotalsByCandidateResponse getElectioneeringTotalsByCandidate(org.openapis.openapi.models.operations.GetElectioneeringTotalsByCandidateRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/electioneering/totals/by_candidate/");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.GetElectioneeringTotalsByCandidateRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetElectioneeringTotalsByCandidateResponse res = new org.openapis.openapi.models.operations.GetElectioneeringTotalsByCandidateResponse(contentType, httpRes.statusCode()) {{
            ecTotalsByCandidatePage = null;
        }};
        res.rawResponse = httpRes;
        
        if (true) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ECTotalsByCandidatePage out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ECTotalsByCandidatePage.class);
                res.ecTotalsByCandidatePage = out;
            }
        }

        return res;
    }
}