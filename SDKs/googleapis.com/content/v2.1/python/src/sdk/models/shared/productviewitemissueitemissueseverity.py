"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import productviewitemissueissueseverityperdestination as shared_productviewitemissueissueseverityperdestination
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class ProductViewItemIssueItemIssueSeverityAggregatedSeverityEnum(str, Enum):
    r"""Severity of an issue aggregated for destination."""
    AGGREGATED_ISSUE_SEVERITY_UNSPECIFIED = 'AGGREGATED_ISSUE_SEVERITY_UNSPECIFIED'
    DISAPPROVED = 'DISAPPROVED'
    DEMOTED = 'DEMOTED'
    PENDING = 'PENDING'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ProductViewItemIssueItemIssueSeverity:
    r"""Severity of an issue per destination in a region, and aggregated severity."""
    
    aggregated_severity: Optional[ProductViewItemIssueItemIssueSeverityAggregatedSeverityEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('aggregatedSeverity'), 'exclude': lambda f: f is None }})
    r"""Severity of an issue aggregated for destination."""  
    severity_per_destination: Optional[list[shared_productviewitemissueissueseverityperdestination.ProductViewItemIssueIssueSeverityPerDestination]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('severityPerDestination'), 'exclude': lambda f: f is None }})
    r"""Item issue severity for every destination."""  
    