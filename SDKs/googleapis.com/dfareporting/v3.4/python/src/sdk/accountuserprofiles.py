"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class AccountUserProfiles:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def dfareporting_account_user_profiles_get(self, request: operations.DfareportingAccountUserProfilesGetRequest, security: operations.DfareportingAccountUserProfilesGetSecurity) -> operations.DfareportingAccountUserProfilesGetResponse:
        r"""Gets one account user profile by ID."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DfareportingAccountUserProfilesGetRequest, base_url, '/userprofiles/{profileId}/accountUserProfiles/{id}', request)
        
        query_params = utils.get_query_params(operations.DfareportingAccountUserProfilesGetRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DfareportingAccountUserProfilesGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.AccountUserProfile])
                res.account_user_profile = out

        return res

    def dfareporting_account_user_profiles_insert(self, request: operations.DfareportingAccountUserProfilesInsertRequest, security: operations.DfareportingAccountUserProfilesInsertSecurity) -> operations.DfareportingAccountUserProfilesInsertResponse:
        r"""Inserts a new account user profile."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DfareportingAccountUserProfilesInsertRequest, base_url, '/userprofiles/{profileId}/accountUserProfiles', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "account_user_profile", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.DfareportingAccountUserProfilesInsertRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DfareportingAccountUserProfilesInsertResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.AccountUserProfile])
                res.account_user_profile = out

        return res

    def dfareporting_account_user_profiles_list(self, request: operations.DfareportingAccountUserProfilesListRequest, security: operations.DfareportingAccountUserProfilesListSecurity) -> operations.DfareportingAccountUserProfilesListResponse:
        r"""Retrieves a list of account user profiles, possibly filtered. This method supports paging."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DfareportingAccountUserProfilesListRequest, base_url, '/userprofiles/{profileId}/accountUserProfiles', request)
        
        query_params = utils.get_query_params(operations.DfareportingAccountUserProfilesListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DfareportingAccountUserProfilesListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.AccountUserProfilesListResponse])
                res.account_user_profiles_list_response = out

        return res

    def dfareporting_account_user_profiles_patch(self, request: operations.DfareportingAccountUserProfilesPatchRequest, security: operations.DfareportingAccountUserProfilesPatchSecurity) -> operations.DfareportingAccountUserProfilesPatchResponse:
        r"""Updates an existing account user profile. This method supports patch semantics."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DfareportingAccountUserProfilesPatchRequest, base_url, '/userprofiles/{profileId}/accountUserProfiles', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "account_user_profile", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.DfareportingAccountUserProfilesPatchRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PATCH', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DfareportingAccountUserProfilesPatchResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.AccountUserProfile])
                res.account_user_profile = out

        return res

    def dfareporting_account_user_profiles_update(self, request: operations.DfareportingAccountUserProfilesUpdateRequest, security: operations.DfareportingAccountUserProfilesUpdateSecurity) -> operations.DfareportingAccountUserProfilesUpdateResponse:
        r"""Updates an existing account user profile."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DfareportingAccountUserProfilesUpdateRequest, base_url, '/userprofiles/{profileId}/accountUserProfiles', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "account_user_profile", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.DfareportingAccountUserProfilesUpdateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PUT', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DfareportingAccountUserProfilesUpdateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.AccountUserProfile])
                res.account_user_profile = out

        return res

    