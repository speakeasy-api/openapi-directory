/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { NestedDevice } from "./nesteddevice";
import { NestedIPAddress } from "./nestedipaddress";
import { NestedVirtualMachine } from "./nestedvirtualmachine";
import { Expose, Transform, Type } from "class-transformer";

export enum ServiceProtocolLabelEnum {
  Tcp = "TCP",
  Udp = "UDP",
}

export enum ServiceProtocolValueEnum {
  Tcp = "tcp",
  Udp = "udp",
}

export class ServiceProtocol extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "label" })
  label: ServiceProtocolLabelEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "value" })
  value: ServiceProtocolValueEnum;
}

export class Service extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "created" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  created?: Date;

  @SpeakeasyMetadata()
  @Expose({ name: "custom_fields" })
  customFields?: Record<string, any>;

  @SpeakeasyMetadata()
  @Expose({ name: "description" })
  description?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "device" })
  @Type(() => NestedDevice)
  device?: NestedDevice;

  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id?: number;

  @SpeakeasyMetadata({ elemType: NestedIPAddress })
  @Expose({ name: "ipaddresses" })
  @Type(() => NestedIPAddress)
  ipaddresses?: NestedIPAddress[];

  @SpeakeasyMetadata()
  @Expose({ name: "last_updated" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  lastUpdated?: Date;

  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name: string;

  @SpeakeasyMetadata()
  @Expose({ name: "port" })
  port: number;

  @SpeakeasyMetadata()
  @Expose({ name: "protocol" })
  @Type(() => ServiceProtocol)
  protocol?: ServiceProtocol;

  @SpeakeasyMetadata()
  @Expose({ name: "tags" })
  tags?: string[];

  @SpeakeasyMetadata()
  @Expose({ name: "virtual_machine" })
  @Type(() => NestedVirtualMachine)
  virtualMachine?: NestedVirtualMachine;
}
