// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"bytes"
	"encoding/json"
	"errors"
	"net/http"
	"openapi/pkg/models/shared"
)

type ReposAddAppAccessRestrictionsRequestBody1 struct {
	// apps parameter
	Apps []string `json:"apps"`
}

type ReposAddAppAccessRestrictionsRequestBodyType string

const (
	ReposAddAppAccessRestrictionsRequestBodyTypeReposAddAppAccessRestrictionsRequestBody1 ReposAddAppAccessRestrictionsRequestBodyType = "repos/add-app-access-restrictions_requestBody_1"
	ReposAddAppAccessRestrictionsRequestBodyTypeArrayOfstr                                ReposAddAppAccessRestrictionsRequestBodyType = "arrayOfstr"
)

type ReposAddAppAccessRestrictionsRequestBody struct {
	ReposAddAppAccessRestrictionsRequestBody1 *ReposAddAppAccessRestrictionsRequestBody1
	ArrayOfstr                                []string

	Type ReposAddAppAccessRestrictionsRequestBodyType
}

func CreateReposAddAppAccessRestrictionsRequestBodyReposAddAppAccessRestrictionsRequestBody1(reposAddAppAccessRestrictionsRequestBody1 ReposAddAppAccessRestrictionsRequestBody1) ReposAddAppAccessRestrictionsRequestBody {
	typ := ReposAddAppAccessRestrictionsRequestBodyTypeReposAddAppAccessRestrictionsRequestBody1

	return ReposAddAppAccessRestrictionsRequestBody{
		ReposAddAppAccessRestrictionsRequestBody1: &reposAddAppAccessRestrictionsRequestBody1,
		Type: typ,
	}
}

func CreateReposAddAppAccessRestrictionsRequestBodyArrayOfstr(arrayOfstr []string) ReposAddAppAccessRestrictionsRequestBody {
	typ := ReposAddAppAccessRestrictionsRequestBodyTypeArrayOfstr

	return ReposAddAppAccessRestrictionsRequestBody{
		ArrayOfstr: arrayOfstr,
		Type:       typ,
	}
}

func (u *ReposAddAppAccessRestrictionsRequestBody) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	reposAddAppAccessRestrictionsRequestBody1 := new(ReposAddAppAccessRestrictionsRequestBody1)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&reposAddAppAccessRestrictionsRequestBody1); err == nil {
		u.ReposAddAppAccessRestrictionsRequestBody1 = reposAddAppAccessRestrictionsRequestBody1
		u.Type = ReposAddAppAccessRestrictionsRequestBodyTypeReposAddAppAccessRestrictionsRequestBody1
		return nil
	}

	arrayOfstr := []string{}
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&arrayOfstr); err == nil {
		u.ArrayOfstr = arrayOfstr
		u.Type = ReposAddAppAccessRestrictionsRequestBodyTypeArrayOfstr
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u ReposAddAppAccessRestrictionsRequestBody) MarshalJSON() ([]byte, error) {
	if u.ReposAddAppAccessRestrictionsRequestBody1 != nil {
		return json.Marshal(u.ReposAddAppAccessRestrictionsRequestBody1)
	}

	if u.ArrayOfstr != nil {
		return json.Marshal(u.ArrayOfstr)
	}

	return nil, nil
}

type ReposAddAppAccessRestrictionsRequest struct {
	RequestBody *ReposAddAppAccessRestrictionsRequestBody `request:"mediaType=application/json"`
	// The name of the branch.
	Branch string `pathParam:"style=simple,explode=false,name=branch"`
	// The account owner of the repository. The name is not case sensitive.
	Owner string `pathParam:"style=simple,explode=false,name=owner"`
	// The name of the repository. The name is not case sensitive.
	Repo string `pathParam:"style=simple,explode=false,name=repo"`
}

type ReposAddAppAccessRestrictionsResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Response
	Integrations []shared.Integration
	// Validation failed
	ValidationError *shared.ValidationError
}
