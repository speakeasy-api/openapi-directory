"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import invalid_argument as shared_invalid_argument
from ..shared import license as shared_license
from ..shared import unauthenticated as shared_unauthenticated
from typing import Optional


@dataclasses.dataclass
class PostOrganisationsPartyIDLicensesRequest:
    
    api_key: str = dataclasses.field(metadata={'header': { 'field_name': 'apiKey', 'style': 'simple', 'explode': False }})
    r"""The API key."""  
    license_input: shared_license.LicenseInput = dataclasses.field(metadata={'request': { 'media_type': 'application/json' }})
    r"""License resource"""  
    party_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'partyId', 'style': 'simple', 'explode': False }})
    r"""The party identifier."""  
    

@dataclasses.dataclass
class PostOrganisationsPartyIDLicensesResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    headers: Optional[dict[str, list[str]]] = dataclasses.field(default=None)  
    invalid_argument: Optional[shared_invalid_argument.InvalidArgument] = dataclasses.field(default=None)
    r"""The client specified an invalid argument"""  
    license: Optional[shared_license.License] = dataclasses.field(default=None)
    r"""License was created"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    unauthenticated: Optional[shared_unauthenticated.Unauthenticated] = dataclasses.field(default=None)
    r"""Request not authenticated due to missing, invalid, or expired token"""  
    