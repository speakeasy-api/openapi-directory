"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Login:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def logout(self) -> operations.LogoutResponse:
        r"""Logout
        <p>Given a valid access token in the header then log out the authenticated user or client </p>
        <p>Will revoke the token</p>
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v1/logout'
        
        
        client = self._security_client
        
        http_res = client.request('POST', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.LogoutResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 204:
            pass
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.InlineResponse401])
                res.inline_response_401 = out
        elif http_res.status_code == 403:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.InlineResponse403])
                res.inline_response_403 = out

        return res

    def reset_password(self, request: shared.ResetPasswordRequest) -> operations.ResetPasswordResponse:
        r"""Reset password
        <p>Reset password </p>
        <p>An email with an embedded link will be sent to the receipient of the email address </p>
        <p>The link will contain a token to be used for resetting the password </p>
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v1/password/reset'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ResetPasswordResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 204:
            pass
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.InlineResponse400])
                res.inline_response_400 = out

        return res

    def validate_access_token(self, request: operations.ValidateAccessTokenRequest) -> operations.ValidateAccessTokenResponse:
        r"""validate
        <p>The second part of login involves validating using an MFA device</p>
        <p>An access token with PRE_AUTH authorities is required</p>
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v1/validate'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "access_token_validation_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ValidateAccessTokenResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.AccessTokenResponse])
                res.access_token_response = out
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.InlineResponse401])
                res.inline_response_401 = out
        elif http_res.status_code == 403:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.InlineResponse403])
                res.inline_response_403 = out

        return res

    def velo_auth(self, request: operations.VeloAuthRequest, security: operations.VeloAuthSecurity) -> operations.VeloAuthResponse:
        r"""Authentication endpoint
        <p>Use this endpoint to obtain an access token for calling Velo Payments APIs. </p>
        <p>You need your API key and API secret issued by Velo</p>
        <p>To login and get an access token the API key and API secret must be Base64 encoded by concatenating them with a colon between them</p>
        <p>e.g. Given an ApiKey: 44a9537d-d55d-4b47-8082-14061c2bcdd8 and ApiSecret: c396b26b-137a-44fd-87f5-34631f8fd529</p>
        <p>Using a Base64 encode function Base64Encoder().encode(\"44a9537d-d55d-4b47-8082-14061c2bcdd8:c396b26b-137a-44fd-87f5-34631f8fd529\")</p>
        <p>Included as a Basic Authorization header: -H \"Authorization: Basic NDRhOTUzN2QtZDU1ZC00YjQ3LTgwODItMTQwNjFjMmJjZGQ4OmMzOTZiMjZiLTEzN2EtNDRmZC04N2Y1LTM0NjMxZjhmZDUyOQ==\" </p>
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v1/authenticate'
        
        query_params = utils.get_query_params(operations.VeloAuthRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.VeloAuthResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.AuthResponse])
                res.auth_response = out

        return res

    