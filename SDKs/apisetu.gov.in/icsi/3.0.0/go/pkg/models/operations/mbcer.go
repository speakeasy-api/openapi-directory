// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type MbcerSecurity struct {
	APIKey   string `security:"scheme,type=apiKey,subtype=header,name=X-APISETU-APIKEY"`
	ClientID string `security:"scheme,type=apiKey,subtype=header,name=X-APISETU-CLIENTID"`
}

type MbcerRequestBodyCertificateParameters struct {
	// Type of Certificate
	CertType string `json:"CertType"`
	// Full name
	FullName string `json:"FullName"`
	// Membership No.
	MembershipNo string `json:"Membership_No"`
}

// MbcerRequestBodyFormatEnum - The format of the certificate in response.
type MbcerRequestBodyFormatEnum string

const (
	MbcerRequestBodyFormatEnumPdf MbcerRequestBodyFormatEnum = "pdf"
)

func (e *MbcerRequestBodyFormatEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "pdf":
		*e = MbcerRequestBodyFormatEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for MbcerRequestBodyFormatEnum: %s", s)
	}
}

// MbcerRequestBody - Request format
type MbcerRequestBody struct {
	CertificateParameters *MbcerRequestBodyCertificateParameters `json:"certificateParameters,omitempty"`
	ConsentArtifact       *shared.ConsentArtifactSchema          `json:"consentArtifact,omitempty"`
	// The format of the certificate in response.
	Format MbcerRequestBodyFormatEnum `json:"format"`
	// A unique transaction id for this request in UUID format. It is used for tracking the request.
	TxnID string `json:"txnId"`
}

type Mbcer504ApplicationJSONErrorEnum string

const (
	Mbcer504ApplicationJSONErrorEnumGatewayTimeout Mbcer504ApplicationJSONErrorEnum = "gateway_timeout"
)

func (e *Mbcer504ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "gateway_timeout":
		*e = Mbcer504ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Mbcer504ApplicationJSONErrorEnum: %s", s)
	}
}

type Mbcer504ApplicationJSONErrorDescriptionEnum string

const (
	Mbcer504ApplicationJSONErrorDescriptionEnumPublisherServiceDidNotRespondInTime Mbcer504ApplicationJSONErrorDescriptionEnum = "Publisher service did not respond in time"
)

func (e *Mbcer504ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Publisher service did not respond in time":
		*e = Mbcer504ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Mbcer504ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Mbcer504ApplicationJSON - Gateway timeout
type Mbcer504ApplicationJSON struct {
	Error            *Mbcer504ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Mbcer504ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Mbcer503ApplicationJSONErrorEnum string

const (
	Mbcer503ApplicationJSONErrorEnumServiceUnavailable Mbcer503ApplicationJSONErrorEnum = "service_unavailable"
)

func (e *Mbcer503ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "service_unavailable":
		*e = Mbcer503ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Mbcer503ApplicationJSONErrorEnum: %s", s)
	}
}

type Mbcer503ApplicationJSONErrorDescriptionEnum string

const (
	Mbcer503ApplicationJSONErrorDescriptionEnumPublisherServiceIsTemporarilyUnavailable Mbcer503ApplicationJSONErrorDescriptionEnum = "Publisher service is temporarily unavailable"
)

func (e *Mbcer503ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Publisher service is temporarily unavailable":
		*e = Mbcer503ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Mbcer503ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Mbcer503ApplicationJSON - Service unavailable
type Mbcer503ApplicationJSON struct {
	Error            *Mbcer503ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Mbcer503ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Mbcer502ApplicationJSONErrorEnum string

const (
	Mbcer502ApplicationJSONErrorEnumBadGatewy Mbcer502ApplicationJSONErrorEnum = "bad_gatewy"
)

func (e *Mbcer502ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "bad_gatewy":
		*e = Mbcer502ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Mbcer502ApplicationJSONErrorEnum: %s", s)
	}
}

type Mbcer502ApplicationJSONErrorDescriptionEnum string

const (
	Mbcer502ApplicationJSONErrorDescriptionEnumPublisherServiceReturnedAnInvalidResponse Mbcer502ApplicationJSONErrorDescriptionEnum = "Publisher service returned an invalid response"
)

func (e *Mbcer502ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Publisher service returned an invalid response":
		*e = Mbcer502ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Mbcer502ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Mbcer502ApplicationJSON - Bad gateway
type Mbcer502ApplicationJSON struct {
	Error            *Mbcer502ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Mbcer502ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Mbcer500ApplicationJSONErrorEnum string

const (
	Mbcer500ApplicationJSONErrorEnumInternalServerError Mbcer500ApplicationJSONErrorEnum = "internal_server_error"
)

func (e *Mbcer500ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "internal_server_error":
		*e = Mbcer500ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Mbcer500ApplicationJSONErrorEnum: %s", s)
	}
}

type Mbcer500ApplicationJSONErrorDescriptionEnum string

const (
	Mbcer500ApplicationJSONErrorDescriptionEnumInternalServerError Mbcer500ApplicationJSONErrorDescriptionEnum = "Internal server error"
)

func (e *Mbcer500ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Internal server error":
		*e = Mbcer500ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Mbcer500ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Mbcer500ApplicationJSON - Internal server error
type Mbcer500ApplicationJSON struct {
	Error            *Mbcer500ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Mbcer500ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Mbcer404ApplicationJSONErrorEnum string

const (
	Mbcer404ApplicationJSONErrorEnumRecordNotFound Mbcer404ApplicationJSONErrorEnum = "record_not_found"
	Mbcer404ApplicationJSONErrorEnumURLNotFound    Mbcer404ApplicationJSONErrorEnum = "url_not_found"
)

func (e *Mbcer404ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "record_not_found":
		fallthrough
	case "url_not_found":
		*e = Mbcer404ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Mbcer404ApplicationJSONErrorEnum: %s", s)
	}
}

type Mbcer404ApplicationJSONErrorDescriptionEnum string

const (
	Mbcer404ApplicationJSONErrorDescriptionEnumNoRecordFound               Mbcer404ApplicationJSONErrorDescriptionEnum = "No record found"
	Mbcer404ApplicationJSONErrorDescriptionEnumYourAPIURLOrPathIsIncorrect Mbcer404ApplicationJSONErrorDescriptionEnum = "Your API url or path is incorrect"
)

func (e *Mbcer404ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "No record found":
		fallthrough
	case "Your API url or path is incorrect":
		*e = Mbcer404ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Mbcer404ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Mbcer404ApplicationJSON - No record found
type Mbcer404ApplicationJSON struct {
	Error            *Mbcer404ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Mbcer404ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Mbcer401ApplicationJSONErrorEnum string

const (
	Mbcer401ApplicationJSONErrorEnumInvalidAuthentication Mbcer401ApplicationJSONErrorEnum = "invalid_authentication"
	Mbcer401ApplicationJSONErrorEnumInvalidAuthorization  Mbcer401ApplicationJSONErrorEnum = "invalid_authorization"
)

func (e *Mbcer401ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "invalid_authentication":
		fallthrough
	case "invalid_authorization":
		*e = Mbcer401ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Mbcer401ApplicationJSONErrorEnum: %s", s)
	}
}

type Mbcer401ApplicationJSONErrorDescriptionEnum string

const (
	Mbcer401ApplicationJSONErrorDescriptionEnumAuthenticationFailed            Mbcer401ApplicationJSONErrorDescriptionEnum = "Authentication failed"
	Mbcer401ApplicationJSONErrorDescriptionEnumYouAreNotAuthorizedToUseThisAPI Mbcer401ApplicationJSONErrorDescriptionEnum = "You are not authorized to use this API"
)

func (e *Mbcer401ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Authentication failed":
		fallthrough
	case "You are not authorized to use this API":
		*e = Mbcer401ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Mbcer401ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Mbcer401ApplicationJSON - Unauthorized access
type Mbcer401ApplicationJSON struct {
	Error            *Mbcer401ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Mbcer401ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Mbcer400ApplicationJSONErrorEnum string

const (
	Mbcer400ApplicationJSONErrorEnumMissingParameter Mbcer400ApplicationJSONErrorEnum = "missing_parameter"
	Mbcer400ApplicationJSONErrorEnumInvalidParameter Mbcer400ApplicationJSONErrorEnum = "invalid_parameter"
	Mbcer400ApplicationJSONErrorEnumInvalidFormat    Mbcer400ApplicationJSONErrorEnum = "invalid_format"
	Mbcer400ApplicationJSONErrorEnumInvalidTxnid     Mbcer400ApplicationJSONErrorEnum = "invalid_txnid"
	Mbcer400ApplicationJSONErrorEnumInvalidConsentid Mbcer400ApplicationJSONErrorEnum = "invalid_consentid"
)

func (e *Mbcer400ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "missing_parameter":
		fallthrough
	case "invalid_parameter":
		fallthrough
	case "invalid_format":
		fallthrough
	case "invalid_txnid":
		fallthrough
	case "invalid_consentid":
		*e = Mbcer400ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Mbcer400ApplicationJSONErrorEnum: %s", s)
	}
}

type Mbcer400ApplicationJSONErrorDescriptionEnum string

const (
	Mbcer400ApplicationJSONErrorDescriptionEnumPleaseProvideAllMandatoryParameters     Mbcer400ApplicationJSONErrorDescriptionEnum = "Please provide all mandatory parameters"
	Mbcer400ApplicationJSONErrorDescriptionEnumBadRequest                              Mbcer400ApplicationJSONErrorDescriptionEnum = "Bad request"
	Mbcer400ApplicationJSONErrorDescriptionEnumTheFormatParameterIsInvalid             Mbcer400ApplicationJSONErrorDescriptionEnum = "The format parameter is invalid"
	Mbcer400ApplicationJSONErrorDescriptionEnumTheTxnIDParameterMustBeInUUIDFormat     Mbcer400ApplicationJSONErrorDescriptionEnum = "The txnId parameter must be in UUID format"
	Mbcer400ApplicationJSONErrorDescriptionEnumTheConsentIDParameterMustBeInUUIDFormat Mbcer400ApplicationJSONErrorDescriptionEnum = "The consentId parameter must be in UUID format"
)

func (e *Mbcer400ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Please provide all mandatory parameters":
		fallthrough
	case "Bad request":
		fallthrough
	case "The format parameter is invalid":
		fallthrough
	case "The txnId parameter must be in UUID format":
		fallthrough
	case "The consentId parameter must be in UUID format":
		*e = Mbcer400ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Mbcer400ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Mbcer400ApplicationJSON - Bad request
type Mbcer400ApplicationJSON struct {
	Error            *Mbcer400ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Mbcer400ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type MbcerResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Bad request
	Mbcer400ApplicationJSONObject *Mbcer400ApplicationJSON
	// Unauthorized access
	Mbcer401ApplicationJSONObject *Mbcer401ApplicationJSON
	// No record found
	Mbcer404ApplicationJSONObject *Mbcer404ApplicationJSON
	// Internal server error
	Mbcer500ApplicationJSONObject *Mbcer500ApplicationJSON
	// Bad gateway
	Mbcer502ApplicationJSONObject *Mbcer502ApplicationJSON
	// Service unavailable
	Mbcer503ApplicationJSONObject *Mbcer503ApplicationJSON
	// Gateway timeout
	Mbcer504ApplicationJSONObject *Mbcer504ApplicationJSON
}
