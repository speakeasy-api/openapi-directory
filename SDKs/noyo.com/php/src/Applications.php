<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Applications 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Cancel a Group Application
     * 
     * Cancels a group application to the carrier based on the ID provided.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CancelGroupApplicationRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CancelGroupApplicationResponse
     */
	public function cancelGroupApplication(
        \OpenAPI\OpenAPI\Models\Operations\CancelGroupApplicationRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CancelGroupApplicationResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v1/applications/{application_id}/{version}/cancel', \OpenAPI\OpenAPI\Models\Operations\CancelGroupApplicationRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CancelGroupApplicationResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->groupApplicationResult = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GroupApplicationResult', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create new Group Application
     * 
     * After creating a group, you can then create one or more new applications (one per carrier). Just pass the carrier ID and carrier group ID (if known) for the carrier associated with the application and the application type. The carrier group ID will allow us to reference the group in the carrierâ€™s system if that has already been allocated.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateGroupApplicationRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateGroupApplicationResponse
     */
	public function createGroupApplication(
        \OpenAPI\OpenAPI\Models\Operations\CreateGroupApplicationRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateGroupApplicationResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v1/groups/{group_id}/applications', \OpenAPI\OpenAPI\Models\Operations\CreateGroupApplicationRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "applicationCreateRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateGroupApplicationResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->groupApplicationResult = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GroupApplicationResult', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Edit a Group Application
     * 
     * Edit a group application based on the ID provided. The version parameter must match the latest group application version.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\EditGroupApplicationRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\EditGroupApplicationResponse
     */
	public function editGroupApplication(
        \OpenAPI\OpenAPI\Models\Operations\EditGroupApplicationRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\EditGroupApplicationResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v1/applications/{application_id}/{version}', \OpenAPI\OpenAPI\Models\Operations\EditGroupApplicationRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "applicationEditRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\EditGroupApplicationResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->groupApplicationResult = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GroupApplicationResult', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get All Applications
     * 
     * Returns a list of all applications
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetAllApplicationsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetAllApplicationsResponse
     */
	public function getAllApplications(
        \OpenAPI\OpenAPI\Models\Operations\GetAllApplicationsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetAllApplicationsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v1/applications');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetAllApplicationsRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetAllApplicationsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->paginatedGroupApplicationResult = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PaginatedGroupApplicationResult', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get Group Application
     * 
     * Returns the latest version of a single group application based on the ID provided.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetGroupApplicationRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetGroupApplicationResponse
     */
	public function getGroupApplication(
        \OpenAPI\OpenAPI\Models\Operations\GetGroupApplicationRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetGroupApplicationResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v1/applications/{application_id}', \OpenAPI\OpenAPI\Models\Operations\GetGroupApplicationRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetGroupApplicationResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->groupApplicationResult = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GroupApplicationResult', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get Group Applications
     * 
     * Returns a list of all applications for the given group
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetGroupApplicationsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetGroupApplicationsResponse
     */
	public function getGroupApplications(
        \OpenAPI\OpenAPI\Models\Operations\GetGroupApplicationsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetGroupApplicationsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v1/groups/{group_id}/applications', \OpenAPI\OpenAPI\Models\Operations\GetGroupApplicationsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetGroupApplicationsRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetGroupApplicationsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->paginatedGroupApplicationResult = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PaginatedGroupApplicationResult', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Submit a Group Application
     * 
     * Submits a group application to the carrier based on the ID provided.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\SubmitGroupApplicationRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\SubmitGroupApplicationResponse
     */
	public function submitGroupApplication(
        \OpenAPI\OpenAPI\Models\Operations\SubmitGroupApplicationRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\SubmitGroupApplicationResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v1/applications/{application_id}/{version}/submit', \OpenAPI\OpenAPI\Models\Operations\SubmitGroupApplicationRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\SubmitGroupApplicationResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->groupApplicationResult = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GroupApplicationResult', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 422) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->applicationValidationResult = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApplicationValidationResult', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Validate Group Application
     * 
     * Returns a list of errors if the group application is not valid else an empty list is returned
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ValidateGroupApplicationRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ValidateGroupApplicationResponse
     */
	public function validateGroupApplication(
        \OpenAPI\OpenAPI\Models\Operations\ValidateGroupApplicationRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ValidateGroupApplicationResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v1/applications/{application_id}/validate', \OpenAPI\OpenAPI\Models\Operations\ValidateGroupApplicationRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ValidateGroupApplicationResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->applicationValidationResult = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApplicationValidationResult', 'json');
            }
        }

        return $response;
    }
}