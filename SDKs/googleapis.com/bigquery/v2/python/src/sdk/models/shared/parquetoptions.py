"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ParquetOptions:
    
    enable_list_inference: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('enableListInference'), 'exclude': lambda f: f is None }})
    r"""[Optional] Indicates whether to use schema inference specifically for Parquet LIST logical type."""  
    enum_as_string: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('enumAsString'), 'exclude': lambda f: f is None }})
    r"""[Optional] Indicates whether to infer Parquet ENUM logical type as STRING instead of BYTES by default."""  
    