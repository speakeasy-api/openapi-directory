// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// MemberElectionCreateRequestMemberTypeEnum - Type of member electing or waiving coverage
type MemberElectionCreateRequestMemberTypeEnum string

const (
	MemberElectionCreateRequestMemberTypeEnumDependent MemberElectionCreateRequestMemberTypeEnum = "dependent"
	MemberElectionCreateRequestMemberTypeEnumEmployee  MemberElectionCreateRequestMemberTypeEnum = "employee"
)

func (e *MemberElectionCreateRequestMemberTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "dependent":
		fallthrough
	case "employee":
		*e = MemberElectionCreateRequestMemberTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for MemberElectionCreateRequestMemberTypeEnum: %s", s)
	}
}

// MemberElectionCreateRequestStatusEnum - Status of the member election on the coverage plan
type MemberElectionCreateRequestStatusEnum string

const (
	MemberElectionCreateRequestStatusEnumEnrolling MemberElectionCreateRequestStatusEnum = "enrolling"
	MemberElectionCreateRequestStatusEnumWaiving   MemberElectionCreateRequestStatusEnum = "waiving"
)

func (e *MemberElectionCreateRequestStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "enrolling":
		fallthrough
	case "waiving":
		*e = MemberElectionCreateRequestStatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for MemberElectionCreateRequestStatusEnum: %s", s)
	}
}

type MemberElectionCreateRequest struct {
	// Unique identifier of the member in Noyo
	MemberID string `json:"member_id"`
	// Type of member electing or waiving coverage
	MemberType MemberElectionCreateRequestMemberTypeEnum `json:"member_type"`
	// Status of the member election on the coverage plan
	Status MemberElectionCreateRequestStatusEnum `json:"status"`
	// Volume amount requested for the enrolling member
	Volume *float64 `json:"volume,omitempty"`
}
