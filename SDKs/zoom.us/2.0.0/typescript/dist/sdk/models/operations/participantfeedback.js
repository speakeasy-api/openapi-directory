"use strict";
/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ParticipantFeedbackResponse = exports.ParticipantFeedback200ApplicationJSON = exports.ParticipantFeedback200ApplicationJSONParticipants = exports.ParticipantFeedback200ApplicationJSONParticipantsQualityEnum = exports.ParticipantFeedback200ApplicationXML = exports.ParticipantFeedback200ApplicationXMLParticipants = exports.ParticipantFeedback200ApplicationXMLParticipantsQualityEnum = exports.ParticipantFeedbackRequest = exports.ParticipantFeedbackTypeEnum = void 0;
var utils_1 = require("../../../internal/utils");
var class_transformer_1 = require("class-transformer");
/**
 * Specify a value to get the response for the corresponding meeting type. The value of this field can be one of the following:<br> <br>`past` - Meeting that already occurred in the specified date range.<br>`pastOne` - Past meetings that were attended by only one user. <br>`live` - Live meetings.<br><br>
 *
 * @remarks
 *
 * If you do not provide this field, the default value will be `live` and thus, the API will only query responses for live meetings.
 */
var ParticipantFeedbackTypeEnum;
(function (ParticipantFeedbackTypeEnum) {
    ParticipantFeedbackTypeEnum["Past"] = "past";
    ParticipantFeedbackTypeEnum["PastOne"] = "pastOne";
    ParticipantFeedbackTypeEnum["Live"] = "live";
})(ParticipantFeedbackTypeEnum = exports.ParticipantFeedbackTypeEnum || (exports.ParticipantFeedbackTypeEnum = {}));
var ParticipantFeedbackRequest = /** @class */ (function (_super) {
    __extends(ParticipantFeedbackRequest, _super);
    function ParticipantFeedbackRequest() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({
            data: "pathParam, style=simple;explode=false;name=meetingId",
        }),
        __metadata("design:type", String)
    ], ParticipantFeedbackRequest.prototype, "meetingId", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({
            data: "queryParam, style=form;explode=true;name=next_page_token",
        }),
        __metadata("design:type", String)
    ], ParticipantFeedbackRequest.prototype, "nextPageToken", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({
            data: "queryParam, style=form;explode=true;name=page_size",
        }),
        __metadata("design:type", Number)
    ], ParticipantFeedbackRequest.prototype, "pageSize", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({ data: "queryParam, style=form;explode=true;name=type" }),
        __metadata("design:type", String)
    ], ParticipantFeedbackRequest.prototype, "type", void 0);
    return ParticipantFeedbackRequest;
}(utils_1.SpeakeasyBase));
exports.ParticipantFeedbackRequest = ParticipantFeedbackRequest;
/**
 * Feedback submitted by the participant.
 *
 * @remarks
 *
 * * `GOOD`: Thumbs up.
 * * `NOT GOOD`: Thumbs down.
 */
var ParticipantFeedback200ApplicationXMLParticipantsQualityEnum;
(function (ParticipantFeedback200ApplicationXMLParticipantsQualityEnum) {
    ParticipantFeedback200ApplicationXMLParticipantsQualityEnum["Good"] = "GOOD";
    ParticipantFeedback200ApplicationXMLParticipantsQualityEnum["NotGood"] = "NOT GOOD";
})(ParticipantFeedback200ApplicationXMLParticipantsQualityEnum = exports.ParticipantFeedback200ApplicationXMLParticipantsQualityEnum || (exports.ParticipantFeedback200ApplicationXMLParticipantsQualityEnum = {}));
var ParticipantFeedback200ApplicationXMLParticipants = /** @class */ (function (_super) {
    __extends(ParticipantFeedback200ApplicationXMLParticipants, _super);
    function ParticipantFeedback200ApplicationXMLParticipants() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", Date)
    ], ParticipantFeedback200ApplicationXMLParticipants.prototype, "dateTime", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], ParticipantFeedback200ApplicationXMLParticipants.prototype, "email", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], ParticipantFeedback200ApplicationXMLParticipants.prototype, "quality", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], ParticipantFeedback200ApplicationXMLParticipants.prototype, "userId", void 0);
    return ParticipantFeedback200ApplicationXMLParticipants;
}(utils_1.SpeakeasyBase));
exports.ParticipantFeedback200ApplicationXMLParticipants = ParticipantFeedback200ApplicationXMLParticipants;
/**
 * **HTTP Status Code:** `200`<br>
 *
 * @remarks
 *
 *
 */
var ParticipantFeedback200ApplicationXML = /** @class */ (function (_super) {
    __extends(ParticipantFeedback200ApplicationXML, _super);
    function ParticipantFeedback200ApplicationXML() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], ParticipantFeedback200ApplicationXML.prototype, "nextPageToken", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", Number)
    ], ParticipantFeedback200ApplicationXML.prototype, "pageSize", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({
            elemType: ParticipantFeedback200ApplicationXMLParticipants,
        }),
        __metadata("design:type", Array)
    ], ParticipantFeedback200ApplicationXML.prototype, "participants", void 0);
    return ParticipantFeedback200ApplicationXML;
}(utils_1.SpeakeasyBase));
exports.ParticipantFeedback200ApplicationXML = ParticipantFeedback200ApplicationXML;
/**
 * Feedback submitted by the participant.
 *
 * @remarks
 *
 * * `GOOD`: Thumbs up.
 * * `NOT GOOD`: Thumbs down.
 */
var ParticipantFeedback200ApplicationJSONParticipantsQualityEnum;
(function (ParticipantFeedback200ApplicationJSONParticipantsQualityEnum) {
    ParticipantFeedback200ApplicationJSONParticipantsQualityEnum["Good"] = "GOOD";
    ParticipantFeedback200ApplicationJSONParticipantsQualityEnum["NotGood"] = "NOT GOOD";
})(ParticipantFeedback200ApplicationJSONParticipantsQualityEnum = exports.ParticipantFeedback200ApplicationJSONParticipantsQualityEnum || (exports.ParticipantFeedback200ApplicationJSONParticipantsQualityEnum = {}));
var ParticipantFeedback200ApplicationJSONParticipants = /** @class */ (function (_super) {
    __extends(ParticipantFeedback200ApplicationJSONParticipants, _super);
    function ParticipantFeedback200ApplicationJSONParticipants() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "date_time" }),
        (0, class_transformer_1.Transform)(function (_a) {
            var value = _a.value;
            return new Date(value);
        }, { toClassOnly: true }),
        __metadata("design:type", Date)
    ], ParticipantFeedback200ApplicationJSONParticipants.prototype, "dateTime", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "email" }),
        __metadata("design:type", String)
    ], ParticipantFeedback200ApplicationJSONParticipants.prototype, "email", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "quality" }),
        __metadata("design:type", String)
    ], ParticipantFeedback200ApplicationJSONParticipants.prototype, "quality", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "user_id" }),
        __metadata("design:type", String)
    ], ParticipantFeedback200ApplicationJSONParticipants.prototype, "userId", void 0);
    return ParticipantFeedback200ApplicationJSONParticipants;
}(utils_1.SpeakeasyBase));
exports.ParticipantFeedback200ApplicationJSONParticipants = ParticipantFeedback200ApplicationJSONParticipants;
/**
 * **HTTP Status Code:** `200`<br>
 *
 * @remarks
 *
 *
 */
var ParticipantFeedback200ApplicationJSON = /** @class */ (function (_super) {
    __extends(ParticipantFeedback200ApplicationJSON, _super);
    function ParticipantFeedback200ApplicationJSON() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "next_page_token" }),
        __metadata("design:type", String)
    ], ParticipantFeedback200ApplicationJSON.prototype, "nextPageToken", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "page_size" }),
        __metadata("design:type", Number)
    ], ParticipantFeedback200ApplicationJSON.prototype, "pageSize", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({
            elemType: ParticipantFeedback200ApplicationJSONParticipants,
        }),
        (0, class_transformer_1.Expose)({ name: "participants" }),
        (0, class_transformer_1.Type)(function () { return ParticipantFeedback200ApplicationJSONParticipants; }),
        __metadata("design:type", Array)
    ], ParticipantFeedback200ApplicationJSON.prototype, "participants", void 0);
    return ParticipantFeedback200ApplicationJSON;
}(utils_1.SpeakeasyBase));
exports.ParticipantFeedback200ApplicationJSON = ParticipantFeedback200ApplicationJSON;
var ParticipantFeedbackResponse = /** @class */ (function (_super) {
    __extends(ParticipantFeedbackResponse, _super);
    function ParticipantFeedbackResponse() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", Uint8Array)
    ], ParticipantFeedbackResponse.prototype, "body", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], ParticipantFeedbackResponse.prototype, "contentType", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", Number)
    ], ParticipantFeedbackResponse.prototype, "statusCode", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", Object)
    ], ParticipantFeedbackResponse.prototype, "rawResponse", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", ParticipantFeedback200ApplicationJSON)
    ], ParticipantFeedbackResponse.prototype, "participantFeedback200ApplicationJSONObject", void 0);
    return ParticipantFeedbackResponse;
}(utils_1.SpeakeasyBase));
exports.ParticipantFeedbackResponse = ParticipantFeedbackResponse;
