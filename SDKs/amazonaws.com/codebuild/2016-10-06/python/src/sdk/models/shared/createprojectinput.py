"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import logsconfig as shared_logsconfig
from ..shared import projectartifacts as shared_projectartifacts
from ..shared import projectbuildbatchconfig as shared_projectbuildbatchconfig
from ..shared import projectcache as shared_projectcache
from ..shared import projectenvironment as shared_projectenvironment
from ..shared import projectfilesystemlocation as shared_projectfilesystemlocation
from ..shared import projectsource as shared_projectsource
from ..shared import projectsourceversion as shared_projectsourceversion
from ..shared import tag as shared_tag
from ..shared import vpcconfig as shared_vpcconfig
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateProjectInput:
    
    artifacts: shared_projectartifacts.ProjectArtifacts = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('artifacts') }})  
    environment: shared_projectenvironment.ProjectEnvironment = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('environment') }})  
    name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name') }})  
    service_role: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('serviceRole') }})  
    source: shared_projectsource.ProjectSource = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('source') }})  
    badge_enabled: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('badgeEnabled'), 'exclude': lambda f: f is None }})  
    build_batch_config: Optional[shared_projectbuildbatchconfig.ProjectBuildBatchConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('buildBatchConfig'), 'exclude': lambda f: f is None }})  
    cache: Optional[shared_projectcache.ProjectCache] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cache'), 'exclude': lambda f: f is None }})  
    concurrent_build_limit: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('concurrentBuildLimit'), 'exclude': lambda f: f is None }})  
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description'), 'exclude': lambda f: f is None }})  
    encryption_key: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('encryptionKey'), 'exclude': lambda f: f is None }})  
    file_system_locations: Optional[list[shared_projectfilesystemlocation.ProjectFileSystemLocation]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('fileSystemLocations'), 'exclude': lambda f: f is None }})  
    logs_config: Optional[shared_logsconfig.LogsConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('logsConfig'), 'exclude': lambda f: f is None }})  
    queued_timeout_in_minutes: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('queuedTimeoutInMinutes'), 'exclude': lambda f: f is None }})  
    secondary_artifacts: Optional[list[shared_projectartifacts.ProjectArtifacts]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('secondaryArtifacts'), 'exclude': lambda f: f is None }})  
    secondary_sources: Optional[list[shared_projectsource.ProjectSource]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('secondarySources'), 'exclude': lambda f: f is None }})  
    secondary_source_versions: Optional[list[shared_projectsourceversion.ProjectSourceVersion]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('secondarySourceVersions'), 'exclude': lambda f: f is None }})  
    source_version: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sourceVersion'), 'exclude': lambda f: f is None }})  
    tags: Optional[list[shared_tag.Tag]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tags'), 'exclude': lambda f: f is None }})  
    timeout_in_minutes: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('timeoutInMinutes'), 'exclude': lambda f: f is None }})  
    vpc_config: Optional[shared_vpcconfig.VpcConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('vpcConfig'), 'exclude': lambda f: f is None }})  
    