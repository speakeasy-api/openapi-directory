"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import account as shared_account
from ..shared import apk as shared_apk
from ..shared import devicefile as shared_devicefile
from ..shared import environmentvariable as shared_environmentvariable
from ..shared import systracesetup as shared_systracesetup
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class TestSetup:
    r"""A description of how to set up the Android device prior to running the test."""
    
    account: Optional[shared_account.Account] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('account'), 'exclude': lambda f: f is None }})
    r"""Identifies an account and how to log into it."""  
    additional_apks: Optional[list[shared_apk.Apk]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('additionalApks'), 'exclude': lambda f: f is None }})
    r"""APKs to install in addition to those being directly tested. Currently capped at 100."""  
    directories_to_pull: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('directoriesToPull'), 'exclude': lambda f: f is None }})
    r"""List of directories on the device to upload to GCS at the end of the test; they must be absolute paths under /sdcard, /storage or /data/local/tmp. Path names are restricted to characters a-z A-Z 0-9 _ - . + and / Note: The paths /sdcard and /data will be made available and treated as implicit path substitutions. E.g. if /sdcard on a particular device does not map to external storage, the system will replace it with the external storage path prefix for that device."""  
    dont_autogrant_permissions: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dontAutograntPermissions'), 'exclude': lambda f: f is None }})
    r"""Whether to prevent all runtime permissions to be granted at app install"""  
    environment_variables: Optional[list[shared_environmentvariable.EnvironmentVariable]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('environmentVariables'), 'exclude': lambda f: f is None }})
    r"""Environment variables to set for the test (only applicable for instrumentation tests)."""  
    files_to_push: Optional[list[shared_devicefile.DeviceFile]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('filesToPush'), 'exclude': lambda f: f is None }})
    r"""List of files to push to the device before starting the test."""  
    network_profile: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('networkProfile'), 'exclude': lambda f: f is None }})
    r"""The network traffic profile used for running the test. Available network profiles can be queried by using the NETWORK_CONFIGURATION environment type when calling TestEnvironmentDiscoveryService.GetTestEnvironmentCatalog."""  
    systrace: Optional[shared_systracesetup.SystraceSetup] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('systrace'), 'exclude': lambda f: f is None }})  
    