// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type MarketDataFilterFieldsEnum string

const (
	MarketDataFilterFieldsEnumExBestOffersDisp MarketDataFilterFieldsEnum = "EX_BEST_OFFERS_DISP"
	MarketDataFilterFieldsEnumExBestOffers     MarketDataFilterFieldsEnum = "EX_BEST_OFFERS"
	MarketDataFilterFieldsEnumExAllOffers      MarketDataFilterFieldsEnum = "EX_ALL_OFFERS"
	MarketDataFilterFieldsEnumExTraded         MarketDataFilterFieldsEnum = "EX_TRADED"
	MarketDataFilterFieldsEnumExTradedVol      MarketDataFilterFieldsEnum = "EX_TRADED_VOL"
	MarketDataFilterFieldsEnumExLtp            MarketDataFilterFieldsEnum = "EX_LTP"
	MarketDataFilterFieldsEnumExMarketDef      MarketDataFilterFieldsEnum = "EX_MARKET_DEF"
	MarketDataFilterFieldsEnumSpTraded         MarketDataFilterFieldsEnum = "SP_TRADED"
	MarketDataFilterFieldsEnumSpProjected      MarketDataFilterFieldsEnum = "SP_PROJECTED"
)

func (e MarketDataFilterFieldsEnum) ToPointer() *MarketDataFilterFieldsEnum {
	return &e
}

func (e *MarketDataFilterFieldsEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "EX_BEST_OFFERS_DISP":
		fallthrough
	case "EX_BEST_OFFERS":
		fallthrough
	case "EX_ALL_OFFERS":
		fallthrough
	case "EX_TRADED":
		fallthrough
	case "EX_TRADED_VOL":
		fallthrough
	case "EX_LTP":
		fallthrough
	case "EX_MARKET_DEF":
		fallthrough
	case "SP_TRADED":
		fallthrough
	case "SP_PROJECTED":
		*e = MarketDataFilterFieldsEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for MarketDataFilterFieldsEnum: %v", v)
	}
}

type MarketDataFilter struct {
	Fields       []MarketDataFilterFieldsEnum `json:"fields,omitempty"`
	LadderLevels *int                         `json:"ladderLevels,omitempty"`
}
