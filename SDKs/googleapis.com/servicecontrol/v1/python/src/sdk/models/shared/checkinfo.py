"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import consumerinfo as shared_consumerinfo
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CheckInfo:
    r"""Contains additional information about the check operation."""
    
    consumer_info: Optional[shared_consumerinfo.ConsumerInfo] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('consumerInfo'), 'exclude': lambda f: f is None }})
    r"""`ConsumerInfo` provides information about the consumer."""  
    unused_arguments: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('unusedArguments'), 'exclude': lambda f: f is None }})
    r"""A list of fields and label keys that are ignored by the server. The client doesn't need to send them for following requests to improve performance and allow better aggregation."""  
    