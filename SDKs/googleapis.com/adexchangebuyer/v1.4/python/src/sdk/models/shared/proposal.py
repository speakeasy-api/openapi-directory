"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import buyer as shared_buyer
from ..shared import contactinformation as shared_contactinformation
from ..shared import marketplacelabel as shared_marketplacelabel
from ..shared import privatedata as shared_privatedata
from ..shared import seller as shared_seller
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Proposal:
    r"""Represents a proposal in the marketplace. A proposal is the unit of negotiation between a seller and a buyer and contains deals which are served. Each field in a proposal can have one of the following setting:
    
    (readonly) - It is an error to try and set this field. (buyer-readonly) - Only the seller can set this field. (seller-readonly) - Only the buyer can set this field. (updatable) - The field is updatable at all times by either buyer or the seller.
    """
    
    billed_buyer: Optional[shared_buyer.Buyer] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('billedBuyer'), 'exclude': lambda f: f is None }})  
    buyer: Optional[shared_buyer.Buyer] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('buyer'), 'exclude': lambda f: f is None }})  
    buyer_contacts: Optional[list[shared_contactinformation.ContactInformation]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('buyerContacts'), 'exclude': lambda f: f is None }})
    r"""Optional contact information of the buyer. (seller-readonly)"""  
    buyer_private_data: Optional[shared_privatedata.PrivateData] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('buyerPrivateData'), 'exclude': lambda f: f is None }})  
    dbm_advertiser_ids: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dbmAdvertiserIds'), 'exclude': lambda f: f is None }})
    r"""IDs of DBM advertisers permission to this proposal."""  
    has_buyer_signed_off: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('hasBuyerSignedOff'), 'exclude': lambda f: f is None }})
    r"""When an proposal is in an accepted state, indicates whether the buyer has signed off. Once both sides have signed off on a deal, the proposal can be finalized by the seller. (seller-readonly)"""  
    has_seller_signed_off: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('hasSellerSignedOff'), 'exclude': lambda f: f is None }})
    r"""When an proposal is in an accepted state, indicates whether the buyer has signed off Once both sides have signed off on a deal, the proposal can be finalized by the seller. (buyer-readonly)"""  
    inventory_source: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('inventorySource'), 'exclude': lambda f: f is None }})
    r"""What exchange will provide this inventory (readonly, except on create)."""  
    is_renegotiating: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('isRenegotiating'), 'exclude': lambda f: f is None }})
    r"""True if the proposal is being renegotiated (readonly)."""  
    is_setup_complete: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('isSetupComplete'), 'exclude': lambda f: f is None }})
    r"""True, if the buyside inventory setup is complete for this proposal. (readonly, except via OrderSetupCompleted action) Deprecated in favor of deal level setup complete flag."""  
    kind: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('kind'), 'exclude': lambda f: f is None }})
    r"""Identifies what kind of resource this is. Value: the fixed string \\"adexchangebuyer#proposal\\"."""  
    labels: Optional[list[shared_marketplacelabel.MarketplaceLabel]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('labels'), 'exclude': lambda f: f is None }})
    r"""List of labels associated with the proposal. (readonly)"""  
    last_updater_or_commentor_role: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lastUpdaterOrCommentorRole'), 'exclude': lambda f: f is None }})
    r"""The role of the last user that either updated the proposal or left a comment. (readonly)"""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""The name for the proposal (updatable)"""  
    negotiation_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('negotiationId'), 'exclude': lambda f: f is None }})
    r"""Optional negotiation id if this proposal is a preferred deal proposal."""  
    originator_role: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('originatorRole'), 'exclude': lambda f: f is None }})
    r"""Indicates whether the buyer/seller created the proposal.(readonly)"""  
    private_auction_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('privateAuctionId'), 'exclude': lambda f: f is None }})
    r"""Optional private auction id if this proposal is a private auction proposal."""  
    proposal_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('proposalId'), 'exclude': lambda f: f is None }})
    r"""The unique id of the proposal. (readonly)."""  
    proposal_state: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('proposalState'), 'exclude': lambda f: f is None }})
    r"""The current state of the proposal. (readonly)"""  
    revision_number: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('revisionNumber'), 'exclude': lambda f: f is None }})
    r"""The revision number for the proposal (readonly)."""  
    revision_time_ms: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('revisionTimeMs'), 'exclude': lambda f: f is None }})
    r"""The time (ms since epoch) when the proposal was last revised (readonly)."""  
    seller: Optional[shared_seller.Seller] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('seller'), 'exclude': lambda f: f is None }})  
    seller_contacts: Optional[list[shared_contactinformation.ContactInformation]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sellerContacts'), 'exclude': lambda f: f is None }})
    r"""Optional contact information of the seller (buyer-readonly)."""  
    