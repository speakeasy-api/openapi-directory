<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Shared;


/**
 * QueryChannelsRequest - Query Channels Request
 * 
 * @package OpenAPI\OpenAPI\Models\Shared
 * @access public
 */
class QueryChannelsRequest
{
	#[\JMS\Serializer\Annotation\SerializedName('client_id')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $clientId = null;
    
	#[\JMS\Serializer\Annotation\SerializedName('connection_id')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $connectionId = null;
    
    /**
     * $filterConditions
     * 
     * @var ?array<string, mixed> $filterConditions
     */
	#[\JMS\Serializer\Annotation\SerializedName('filter_conditions')]
    #[\JMS\Serializer\Annotation\Type('array<string, mixed>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $filterConditions = null;
    
    /**
     * Number of channels to limit
     * 
     * @var ?float $limit
     */
	#[\JMS\Serializer\Annotation\SerializedName('limit')]
    #[\JMS\Serializer\Annotation\Type('float')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?float $limit = null;
    
    /**
     * Number of members to limit
     * 
     * @var ?float $memberLimit
     */
	#[\JMS\Serializer\Annotation\SerializedName('member_limit')]
    #[\JMS\Serializer\Annotation\Type('float')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?float $memberLimit = null;
    
    /**
     * Number of messages to limit
     * 
     * @var ?float $messageLimit
     */
	#[\JMS\Serializer\Annotation\SerializedName('message_limit')]
    #[\JMS\Serializer\Annotation\Type('float')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?float $messageLimit = null;
    
    /**
     * Channel pagination offset
     * 
     * @var ?float $offset
     */
	#[\JMS\Serializer\Annotation\SerializedName('offset')]
    #[\JMS\Serializer\Annotation\Type('float')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?float $offset = null;
    
	#[\JMS\Serializer\Annotation\SerializedName('presence')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $presence = null;
    
    /**
     * List of sort parameters
     * 
     * @var array<\OpenAPI\OpenAPI\Models\Shared\SortParamRequest> $sort
     */
	#[\JMS\Serializer\Annotation\SerializedName('sort')]
    #[\JMS\Serializer\Annotation\Type('array<OpenAPI\OpenAPI\Models\Shared\SortParamRequest>')]
    public array $sort;
    
    /**
     * Whether to update channel state or not
     * 
     * @var ?bool $state
     */
	#[\JMS\Serializer\Annotation\SerializedName('state')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $state = null;
    
    /**
     * Represents chat user
     * 
     * @var ?array<string, mixed> $user
     */
	#[\JMS\Serializer\Annotation\SerializedName('user')]
    #[\JMS\Serializer\Annotation\Type('array<string, mixed>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $user = null;
    
	#[\JMS\Serializer\Annotation\SerializedName('user_id')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $userId = null;
    
    /**
     * Whether to start watching found channels or not
     * 
     * @var ?bool $watch
     */
	#[\JMS\Serializer\Annotation\SerializedName('watch')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $watch = null;
    
	public function __construct()
	{
		$this->clientId = null;
		$this->connectionId = null;
		$this->filterConditions = null;
		$this->limit = null;
		$this->memberLimit = null;
		$this->messageLimit = null;
		$this->offset = null;
		$this->presence = null;
		$this->sort = [];
		$this->state = null;
		$this->user = null;
		$this->userId = null;
		$this->watch = null;
	}
}
