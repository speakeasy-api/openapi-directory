"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import languagecode_enum as shared_languagecode_enum
from ..shared import media as shared_media
from ..shared import mediaformat_enum as shared_mediaformat_enum
from ..shared import medicalcontentidentificationtype_enum as shared_medicalcontentidentificationtype_enum
from ..shared import medicaltranscriptionsetting as shared_medicaltranscriptionsetting
from ..shared import specialty_enum as shared_specialty_enum
from ..shared import tag as shared_tag
from ..shared import type_enum as shared_type_enum
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class StartMedicalTranscriptionJobRequest:
    
    language_code: shared_languagecode_enum.LanguageCodeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('LanguageCode') }})  
    media: shared_media.Media = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Media') }})
    r"""<p>Describes the Amazon S3 location of the media file you want to use in your request.</p> <p>For information on supported media formats, refer to the <a href=\\"https://docs.aws.amazon.com/APIReference/API_StartTranscriptionJob.html#transcribe-StartTranscriptionJob-request-MediaFormat\\">MediaFormat</a> parameter or the <a href=\\"https://docs.aws.amazon.com/transcribe/latest/dg/how-input.html#how-input-audio\\">Media formats</a> section in the Amazon S3 Developer Guide.</p>"""  
    medical_transcription_job_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('MedicalTranscriptionJobName') }})  
    output_bucket_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('OutputBucketName') }})  
    specialty: shared_specialty_enum.SpecialtyEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Specialty') }})  
    type: shared_type_enum.TypeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Type') }})  
    content_identification_type: Optional[shared_medicalcontentidentificationtype_enum.MedicalContentIdentificationTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ContentIdentificationType'), 'exclude': lambda f: f is None }})  
    kms_encryption_context: Optional[dict[str, str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('KMSEncryptionContext'), 'exclude': lambda f: f is None }})  
    media_format: Optional[shared_mediaformat_enum.MediaFormatEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('MediaFormat'), 'exclude': lambda f: f is None }})  
    media_sample_rate_hertz: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('MediaSampleRateHertz'), 'exclude': lambda f: f is None }})  
    output_encryption_kms_key_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('OutputEncryptionKMSKeyId'), 'exclude': lambda f: f is None }})  
    output_key: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('OutputKey'), 'exclude': lambda f: f is None }})  
    settings: Optional[shared_medicaltranscriptionsetting.MedicalTranscriptionSetting] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Settings'), 'exclude': lambda f: f is None }})  
    tags: Optional[list[shared_tag.Tag]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Tags'), 'exclude': lambda f: f is None }})  
    