"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetTransactionInfoResponseVinPreviousOutput:
    
    addresses: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('addresses'), 'exclude': lambda f: f is None }})  
    asm: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('asm'), 'exclude': lambda f: f is None }})  
    hex: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('hex'), 'exclude': lambda f: f is None }})  
    req_sigs: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('reqSigs'), 'exclude': lambda f: f is None }})  
    type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetTransactionInfoResponseVinScriptSig:
    
    asm: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('asm'), 'exclude': lambda f: f is None }})  
    hex: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('hex'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetTransactionInfoResponseVinTokens:
    
    aggregation_policy: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('aggregationPolicy'), 'exclude': lambda f: f is None }})
    r"""Whether the tokens are aggregatable"""  
    amount: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('amount'), 'exclude': lambda f: f is None }})
    r"""Number of tokens"""  
    divisibility: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('divisibility'), 'exclude': lambda f: f is None }})
    r"""Decimal places the token is divisible to"""  
    issue_txid: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('issueTxid'), 'exclude': lambda f: f is None }})
    r"""TXID the token was issued in"""  
    lock_status: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lockStatus'), 'exclude': lambda f: f is None }})
    r"""Whether issuance of more tokens is locked"""  
    token_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tokenId'), 'exclude': lambda f: f is None }})
    r"""ID of the token"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetTransactionInfoResponseVin:
    
    previous_output: Optional[GetTransactionInfoResponseVinPreviousOutput] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('previousOutput'), 'exclude': lambda f: f is None }})  
    script_sig: Optional[GetTransactionInfoResponseVinScriptSig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('scriptSig'), 'exclude': lambda f: f is None }})  
    sequence: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sequence'), 'exclude': lambda f: f is None }})  
    tokens: Optional[list[GetTransactionInfoResponseVinTokens]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tokens'), 'exclude': lambda f: f is None }})  
    txid: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('txid'), 'exclude': lambda f: f is None }})
    r"""TXID of the input"""  
    value: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('value'), 'exclude': lambda f: f is None }})
    r"""Value of input in NEBL satoshi"""  
    vout: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('vout'), 'exclude': lambda f: f is None }})
    r"""output index"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetTransactionInfoResponseVoutScriptPubKey:
    
    addresses: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('addresses'), 'exclude': lambda f: f is None }})  
    asm: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('asm'), 'exclude': lambda f: f is None }})  
    hex: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('hex'), 'exclude': lambda f: f is None }})  
    req_sigs: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('reqSigs'), 'exclude': lambda f: f is None }})  
    type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetTransactionInfoResponseVoutTokens:
    
    aggregation_policy: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('aggregationPolicy'), 'exclude': lambda f: f is None }})
    r"""Whether the tokens are aggregatable"""  
    amount: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('amount'), 'exclude': lambda f: f is None }})
    r"""Number of tokens"""  
    divisibility: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('divisibility'), 'exclude': lambda f: f is None }})
    r"""Decimal places the token is divisible to"""  
    issue_txid: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('issueTxid'), 'exclude': lambda f: f is None }})
    r"""TXID the token was issued in"""  
    lock_status: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lockStatus'), 'exclude': lambda f: f is None }})
    r"""Whether issuance of more tokens is locked"""  
    token_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tokenId'), 'exclude': lambda f: f is None }})
    r"""ID of the token"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetTransactionInfoResponseVout:
    
    blockheight: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('blockheight'), 'exclude': lambda f: f is None }})
    r"""Blockheight of this transaction"""  
    n: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('n'), 'exclude': lambda f: f is None }})
    r"""Output index"""  
    script_pub_key: Optional[GetTransactionInfoResponseVoutScriptPubKey] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('scriptPubKey'), 'exclude': lambda f: f is None }})  
    tokens: Optional[list[GetTransactionInfoResponseVoutTokens]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tokens'), 'exclude': lambda f: f is None }})  
    used: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('used'), 'exclude': lambda f: f is None }})
    r"""Whether this output has now been used"""  
    used_blockheight: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('usedBlockheight'), 'exclude': lambda f: f is None }})
    r"""Blockheight this output was used in"""  
    used_txid: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('usedTxid'), 'exclude': lambda f: f is None }})
    r"""TXID this output was used in"""  
    value: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('value'), 'exclude': lambda f: f is None }})
    r"""Value of the output in NEBL satoshi"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetTransactionInfoResponse:
    r"""An object represending this transaction"""
    
    blockhash: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('blockhash'), 'exclude': lambda f: f is None }})
    r"""Hash of the block this transaction is in"""  
    blockheight: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('blockheight'), 'exclude': lambda f: f is None }})
    r"""Block height of this transaction"""  
    blocktime: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('blocktime'), 'exclude': lambda f: f is None }})
    r"""Block time of this transaction"""  
    confirmations: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('confirmations'), 'exclude': lambda f: f is None }})
    r"""Number of transaction confirmations"""  
    fee: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('fee'), 'exclude': lambda f: f is None }})
    r"""Total NEBL used as fee for this transcation in satoshis"""  
    hex: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('hex'), 'exclude': lambda f: f is None }})
    r"""Transaction in raw hex"""  
    locktime: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('locktime'), 'exclude': lambda f: f is None }})
    r"""Transaction locktime"""  
    time: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('time'), 'exclude': lambda f: f is None }})
    r"""Transaction time"""  
    totalsent: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('totalsent'), 'exclude': lambda f: f is None }})
    r"""Total NEBL sent in this transaction in satoshis"""  
    txid: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('txid'), 'exclude': lambda f: f is None }})
    r"""TXID of transaction"""  
    version: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('version'), 'exclude': lambda f: f is None }})
    r"""Transaction version"""  
    vin: Optional[list[GetTransactionInfoResponseVin]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('vin'), 'exclude': lambda f: f is None }})
    r"""Array of transaction inputs"""  
    vout: Optional[list[GetTransactionInfoResponseVout]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('vout'), 'exclude': lambda f: f is None }})
    r"""Array of transaction outputs"""  
    