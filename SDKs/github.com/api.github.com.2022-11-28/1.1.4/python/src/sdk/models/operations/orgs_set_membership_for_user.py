"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import basic_error as shared_basic_error
from ..shared import org_membership as shared_org_membership
from ..shared import validation_error as shared_validation_error
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class OrgsSetMembershipForUserRequestBodyRoleEnum(str, Enum):
    r"""The role to give the user in the organization. Can be one of:
     * `admin` - The user will become an owner of the organization.  
     * `member` - The user will become a non-owner member of the organization.
    """
    ADMIN = 'admin'
    MEMBER = 'member'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class OrgsSetMembershipForUserRequestBody:
    
    role: Optional[OrgsSetMembershipForUserRequestBodyRoleEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('role'), 'exclude': lambda f: f is None }})
    r"""The role to give the user in the organization. Can be one of:
     * `admin` - The user will become an owner of the organization.  
     * `member` - The user will become a non-owner member of the organization.
    """  
    

@dataclasses.dataclass
class OrgsSetMembershipForUserRequest:
    
    org: str = dataclasses.field(metadata={'path_param': { 'field_name': 'org', 'style': 'simple', 'explode': False }})
    r"""The organization name. The name is not case sensitive."""  
    username: str = dataclasses.field(metadata={'path_param': { 'field_name': 'username', 'style': 'simple', 'explode': False }})
    r"""The handle for the GitHub user account."""  
    request_body: Optional[OrgsSetMembershipForUserRequestBody] = dataclasses.field(default=None, metadata={'request': { 'media_type': 'application/json' }})  
    

@dataclasses.dataclass
class OrgsSetMembershipForUserResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    basic_error: Optional[shared_basic_error.BasicError] = dataclasses.field(default=None)
    r"""Forbidden"""  
    org_membership: Optional[shared_org_membership.OrgMembership] = dataclasses.field(default=None)
    r"""Response"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    validation_error: Optional[shared_validation_error.ValidationError] = dataclasses.field(default=None)
    r"""Validation failed, or the endpoint has been spammed."""  
    