/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import org.openapis.openapi.utils.SpeakeasyMetadata;

public class GETUpdateAccountPasswordPolicyRequest {
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=Action")
    public GETUpdateAccountPasswordPolicyActionEnum action;
    public GETUpdateAccountPasswordPolicyRequest withAction(GETUpdateAccountPasswordPolicyActionEnum action) {
        this.action = action;
        return this;
    }
    
    /**
     * &lt;p&gt; Allows all IAM users in your account to use the Amazon Web Services Management Console to change their own passwords. For more information, see &lt;a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_passwords_enable-user-change.html"&gt;Permitting IAM users to change their own passwords&lt;/a&gt; in the &lt;i&gt;IAM User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;If you do not specify a value for this parameter, then the operation uses the default value of &lt;code&gt;false&lt;/code&gt;. The result is that IAM users in the account do not automatically have permissions to change their own password.&lt;/p&gt;
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=AllowUsersToChangePassword")
    public Boolean allowUsersToChangePassword;
    public GETUpdateAccountPasswordPolicyRequest withAllowUsersToChangePassword(Boolean allowUsersToChangePassword) {
        this.allowUsersToChangePassword = allowUsersToChangePassword;
        return this;
    }
    
    /**
     * &lt;p&gt; Prevents IAM users who are accessing the account via the Amazon Web Services Management Console from setting a new console password after their password has expired. The IAM user cannot access the console until an administrator resets the password.&lt;/p&gt; &lt;p&gt;If you do not specify a value for this parameter, then the operation uses the default value of &lt;code&gt;false&lt;/code&gt;. The result is that IAM users can change their passwords after they expire and continue to sign in as the user.&lt;/p&gt; &lt;note&gt; &lt;p&gt; In the Amazon Web Services Management Console, the custom password policy option &lt;b&gt;Allow users to change their own password&lt;/b&gt; gives IAM users permissions to &lt;code&gt;iam:ChangePassword&lt;/code&gt; for only their user and to the &lt;code&gt;iam:GetAccountPasswordPolicy&lt;/code&gt; action. This option does not attach a permissions policy to each user, rather the permissions are applied at the account-level for all users by IAM. IAM users with &lt;code&gt;iam:ChangePassword&lt;/code&gt; permission and active access keys can reset their own expired console password using the CLI or API.&lt;/p&gt; &lt;/note&gt;
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=HardExpiry")
    public Boolean hardExpiry;
    public GETUpdateAccountPasswordPolicyRequest withHardExpiry(Boolean hardExpiry) {
        this.hardExpiry = hardExpiry;
        return this;
    }
    
    /**
     * &lt;p&gt;The number of days that an IAM user password is valid.&lt;/p&gt; &lt;p&gt;If you do not specify a value for this parameter, then the operation uses the default value of &lt;code&gt;0&lt;/code&gt;. The result is that IAM user passwords never expire.&lt;/p&gt;
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=MaxPasswordAge")
    public Long maxPasswordAge;
    public GETUpdateAccountPasswordPolicyRequest withMaxPasswordAge(Long maxPasswordAge) {
        this.maxPasswordAge = maxPasswordAge;
        return this;
    }
    
    /**
     * &lt;p&gt;The minimum number of characters allowed in an IAM user password.&lt;/p&gt; &lt;p&gt;If you do not specify a value for this parameter, then the operation uses the default value of &lt;code&gt;6&lt;/code&gt;.&lt;/p&gt;
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=MinimumPasswordLength")
    public Long minimumPasswordLength;
    public GETUpdateAccountPasswordPolicyRequest withMinimumPasswordLength(Long minimumPasswordLength) {
        this.minimumPasswordLength = minimumPasswordLength;
        return this;
    }
    
    /**
     * &lt;p&gt;Specifies the number of previous passwords that IAM users are prevented from reusing.&lt;/p&gt; &lt;p&gt;If you do not specify a value for this parameter, then the operation uses the default value of &lt;code&gt;0&lt;/code&gt;. The result is that IAM users are not prevented from reusing previous passwords.&lt;/p&gt;
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=PasswordReusePrevention")
    public Long passwordReusePrevention;
    public GETUpdateAccountPasswordPolicyRequest withPasswordReusePrevention(Long passwordReusePrevention) {
        this.passwordReusePrevention = passwordReusePrevention;
        return this;
    }
    
    /**
     * &lt;p&gt;Specifies whether IAM user passwords must contain at least one lowercase character from the ISO basic Latin alphabet (a to z).&lt;/p&gt; &lt;p&gt;If you do not specify a value for this parameter, then the operation uses the default value of &lt;code&gt;false&lt;/code&gt;. The result is that passwords do not require at least one lowercase character.&lt;/p&gt;
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=RequireLowercaseCharacters")
    public Boolean requireLowercaseCharacters;
    public GETUpdateAccountPasswordPolicyRequest withRequireLowercaseCharacters(Boolean requireLowercaseCharacters) {
        this.requireLowercaseCharacters = requireLowercaseCharacters;
        return this;
    }
    
    /**
     * &lt;p&gt;Specifies whether IAM user passwords must contain at least one numeric character (0 to 9).&lt;/p&gt; &lt;p&gt;If you do not specify a value for this parameter, then the operation uses the default value of &lt;code&gt;false&lt;/code&gt;. The result is that passwords do not require at least one numeric character.&lt;/p&gt;
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=RequireNumbers")
    public Boolean requireNumbers;
    public GETUpdateAccountPasswordPolicyRequest withRequireNumbers(Boolean requireNumbers) {
        this.requireNumbers = requireNumbers;
        return this;
    }
    
    /**
     * &lt;p&gt;Specifies whether IAM user passwords must contain at least one of the following non-alphanumeric characters:&lt;/p&gt; &lt;p&gt;! @ # $ % ^ &amp;amp; * ( ) _ + - = [ ] { } | '&lt;/p&gt; &lt;p&gt;If you do not specify a value for this parameter, then the operation uses the default value of &lt;code&gt;false&lt;/code&gt;. The result is that passwords do not require at least one symbol character.&lt;/p&gt;
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=RequireSymbols")
    public Boolean requireSymbols;
    public GETUpdateAccountPasswordPolicyRequest withRequireSymbols(Boolean requireSymbols) {
        this.requireSymbols = requireSymbols;
        return this;
    }
    
    /**
     * &lt;p&gt;Specifies whether IAM user passwords must contain at least one uppercase character from the ISO basic Latin alphabet (A to Z).&lt;/p&gt; &lt;p&gt;If you do not specify a value for this parameter, then the operation uses the default value of &lt;code&gt;false&lt;/code&gt;. The result is that passwords do not require at least one uppercase character.&lt;/p&gt;
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=RequireUppercaseCharacters")
    public Boolean requireUppercaseCharacters;
    public GETUpdateAccountPasswordPolicyRequest withRequireUppercaseCharacters(Boolean requireUppercaseCharacters) {
        this.requireUppercaseCharacters = requireUppercaseCharacters;
        return this;
    }
    
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=Version")
    public GETUpdateAccountPasswordPolicyVersionEnum version;
    public GETUpdateAccountPasswordPolicyRequest withVersion(GETUpdateAccountPasswordPolicyVersionEnum version) {
        this.version = version;
        return this;
    }
    
    @SpeakeasyMetadata("header:style=simple,explode=false,name=X-Amz-Algorithm")
    public String xAmzAlgorithm;
    public GETUpdateAccountPasswordPolicyRequest withXAmzAlgorithm(String xAmzAlgorithm) {
        this.xAmzAlgorithm = xAmzAlgorithm;
        return this;
    }
    
    @SpeakeasyMetadata("header:style=simple,explode=false,name=X-Amz-Content-Sha256")
    public String xAmzContentSha256;
    public GETUpdateAccountPasswordPolicyRequest withXAmzContentSha256(String xAmzContentSha256) {
        this.xAmzContentSha256 = xAmzContentSha256;
        return this;
    }
    
    @SpeakeasyMetadata("header:style=simple,explode=false,name=X-Amz-Credential")
    public String xAmzCredential;
    public GETUpdateAccountPasswordPolicyRequest withXAmzCredential(String xAmzCredential) {
        this.xAmzCredential = xAmzCredential;
        return this;
    }
    
    @SpeakeasyMetadata("header:style=simple,explode=false,name=X-Amz-Date")
    public String xAmzDate;
    public GETUpdateAccountPasswordPolicyRequest withXAmzDate(String xAmzDate) {
        this.xAmzDate = xAmzDate;
        return this;
    }
    
    @SpeakeasyMetadata("header:style=simple,explode=false,name=X-Amz-Security-Token")
    public String xAmzSecurityToken;
    public GETUpdateAccountPasswordPolicyRequest withXAmzSecurityToken(String xAmzSecurityToken) {
        this.xAmzSecurityToken = xAmzSecurityToken;
        return this;
    }
    
    @SpeakeasyMetadata("header:style=simple,explode=false,name=X-Amz-Signature")
    public String xAmzSignature;
    public GETUpdateAccountPasswordPolicyRequest withXAmzSignature(String xAmzSignature) {
        this.xAmzSignature = xAmzSignature;
        return this;
    }
    
    @SpeakeasyMetadata("header:style=simple,explode=false,name=X-Amz-SignedHeaders")
    public String xAmzSignedHeaders;
    public GETUpdateAccountPasswordPolicyRequest withXAmzSignedHeaders(String xAmzSignedHeaders) {
        this.xAmzSignedHeaders = xAmzSignedHeaders;
        return this;
    }
    
}
