"use strict";
/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SDK = exports.ServerList = void 0;
var utils = __importStar(require("../internal/utils"));
var actionbatches_1 = require("./actionbatches");
var admins_1 = require("./admins");
var alertsettings_1 = require("./alertsettings");
var apiusage_1 = require("./apiusage");
var bluetoothclients_1 = require("./bluetoothclients");
var bluetoothsettings_1 = require("./bluetoothsettings");
var cameraqualityretentionprofiles_1 = require("./cameraqualityretentionprofiles");
var cameras_1 = require("./cameras");
var changelog_1 = require("./changelog");
var clients_1 = require("./clients");
var configtemplates_1 = require("./configtemplates");
var contentfilteringcategories_1 = require("./contentfilteringcategories");
var contentfilteringrules_1 = require("./contentfilteringrules");
var devices_1 = require("./devices");
var events_1 = require("./events");
var firewalledservices_1 = require("./firewalledservices");
var floorplans_1 = require("./floorplans");
var intrusionsettings_1 = require("./intrusionsettings");
var licenses_1 = require("./licenses");
var linkaggregations_1 = require("./linkaggregations");
var malwaresettings_1 = require("./malwaresettings");
var merakiauthusers_1 = require("./merakiauthusers");
var mglansettings_1 = require("./mglansettings");
var mgportforwardingrules_1 = require("./mgportforwardingrules");
var shared = __importStar(require("./models/shared"));
var monitoredmediaservers_1 = require("./monitoredmediaservers");
var mrl3firewall_1 = require("./mrl3firewall");
var mvsense_1 = require("./mvsense");
var mx11natrules_1 = require("./mx11natrules");
var mx1manynatrules_1 = require("./mx1manynatrules");
var mxcellularfirewall_1 = require("./mxcellularfirewall");
var mxl3inboundfirewall_1 = require("./mxl3inboundfirewall");
var mxl3outboundfirewall_1 = require("./mxl3outboundfirewall");
var mxl7applicationcategories_1 = require("./mxl7applicationcategories");
var mxl7firewall_1 = require("./mxl7firewall");
var mxportforwardingrules_1 = require("./mxportforwardingrules");
var mxstaticroutes_1 = require("./mxstaticroutes");
var mxvlanports_1 = require("./mxvlanports");
var mxvpnfirewall_1 = require("./mxvpnfirewall");
var mxwarmsparesettings_1 = require("./mxwarmsparesettings");
var namedtagscope_1 = require("./namedtagscope");
var networks_1 = require("./networks");
var openapispec_1 = require("./openapispec");
var organizations_1 = require("./organizations");
var pii_1 = require("./pii");
var radiosettings_1 = require("./radiosettings");
var samlroles_1 = require("./samlroles");
var securityevents_1 = require("./securityevents");
var sm_1 = require("./sm");
var snmpsettings_1 = require("./snmpsettings");
var splashloginattempts_1 = require("./splashloginattempts");
var splashsettings_1 = require("./splashsettings");
var ssids_1 = require("./ssids");
var switchaccesspolicies_1 = require("./switchaccesspolicies");
var switchports_1 = require("./switchports");
var switchportschedules_1 = require("./switchportschedules");
var switchprofiles_1 = require("./switchprofiles");
var switchsettings_1 = require("./switchsettings");
var switchstacks_1 = require("./switchstacks");
var syslogservers_1 = require("./syslogservers");
var trafficshapinguplinksettings_1 = require("./trafficshapinguplinksettings");
var vlans_1 = require("./vlans");
var wirelesshealth_1 = require("./wirelesshealth");
var wirelesssettings_1 = require("./wirelesssettings");
var axios_1 = __importDefault(require("axios"));
/**
 * Contains the list of servers available to the SDK
 */
exports.ServerList = ["https://api.meraki.com/api/v0"];
/**
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.
 *
 * @remarks
 *
 * > Date: 05 March, 2023
 * >
 * > [Recent Updates](https://meraki.io/whats-new/)
 *
 * ---
 *
 * [API Documentation](https://meraki.io/api)
 *
 * [Community Support](https://meraki.io/community)
 *
 * [Meraki Homepage](https://www.meraki.com)
 *
 */
var SDK = /** @class */ (function () {
    function SDK(props) {
        var _a, _b;
        this._language = "typescript";
        this._sdkVersion = "0.0.1";
        this._genVersion = "internal";
        this._serverURL = (_a = props === null || props === void 0 ? void 0 : props.serverURL) !== null && _a !== void 0 ? _a : exports.ServerList[0];
        this._defaultClient =
            (_b = props === null || props === void 0 ? void 0 : props.defaultClient) !== null && _b !== void 0 ? _b : axios_1.default.create({ baseURL: this._serverURL });
        if (props === null || props === void 0 ? void 0 : props.security) {
            var security = props.security;
            if (!(props.security instanceof utils.SpeakeasyBase))
                security = new shared.Security(props.security);
            this._securityClient = utils.createSecurityClient(this._defaultClient, security);
        }
        else {
            this._securityClient = this._defaultClient;
        }
        this.apiUsage = new apiusage_1.APIUsage(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.actionBatches = new actionbatches_1.ActionBatches(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.admins = new admins_1.Admins(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.alertSettings = new alertsettings_1.AlertSettings(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.bluetoothClients = new bluetoothclients_1.BluetoothClients(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.bluetoothSettings = new bluetoothsettings_1.BluetoothSettings(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.cameraQualityRetentionProfiles = new cameraqualityretentionprofiles_1.CameraQualityRetentionProfiles(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.cameras = new cameras_1.Cameras(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.changeLog = new changelog_1.ChangeLog(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.clients = new clients_1.Clients(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.configTemplates = new configtemplates_1.ConfigTemplates(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.contentFilteringCategories = new contentfilteringcategories_1.ContentFilteringCategories(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.contentFilteringRules = new contentfilteringrules_1.ContentFilteringRules(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.devices = new devices_1.Devices(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.events = new events_1.Events(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.firewalledServices = new firewalledservices_1.FirewalledServices(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.floorPlans = new floorplans_1.FloorPlans(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.intrusionSettings = new intrusionsettings_1.IntrusionSettings(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.licenses = new licenses_1.Licenses(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.linkAggregations = new linkaggregations_1.LinkAggregations(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.mgLANSettings = new mglansettings_1.MGLANSettings(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.mgPortForwardingRules = new mgportforwardingrules_1.MGPortForwardingRules(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.mrL3Firewall = new mrl3firewall_1.Mrl3Firewall(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.mvSense = new mvsense_1.MVSense(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.mx11NATRules = new mx11natrules_1.Mx11NATRules(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.mx1ManyNATRules = new mx1manynatrules_1.Mx1ManyNATRules(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.mxL3InboundFirewall = new mxl3inboundfirewall_1.Mxl3InboundFirewall(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.mxL3OutboundFirewall = new mxl3outboundfirewall_1.Mxl3OutboundFirewall(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.mxL7ApplicationCategories = new mxl7applicationcategories_1.Mxl7ApplicationCategories(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.mxL7Firewall = new mxl7firewall_1.Mxl7Firewall(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.mxVLANPorts = new mxvlanports_1.MXVLANPorts(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.mxVPNFirewall = new mxvpnfirewall_1.MXVPNFirewall(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.mxCellularFirewall = new mxcellularfirewall_1.MXCellularFirewall(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.mxPortForwardingRules = new mxportforwardingrules_1.MXPortForwardingRules(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.mxStaticRoutes = new mxstaticroutes_1.MXStaticRoutes(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.mxWarmSpareSettings = new mxwarmsparesettings_1.MXWarmSpareSettings(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.malwareSettings = new malwaresettings_1.MalwareSettings(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.merakiAuthUsers = new merakiauthusers_1.MerakiAuthUsers(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.monitoredMediaServers = new monitoredmediaservers_1.MonitoredMediaServers(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.namedTagScope = new namedtagscope_1.NamedTagScope(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.networks = new networks_1.Networks(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.openAPISpec = new openapispec_1.OpenAPISpec(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.organizations = new organizations_1.Organizations(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.pii = new pii_1.Pii(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.radioSettings = new radiosettings_1.RadioSettings(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.samlRoles = new samlroles_1.SAMLRoles(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.sm = new sm_1.Sm(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.snmpSettings = new snmpsettings_1.SNMPSettings(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.ssiDs = new ssids_1.SSIDs(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.securityEvents = new securityevents_1.SecurityEvents(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.splashLoginAttempts = new splashloginattempts_1.SplashLoginAttempts(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.splashSettings = new splashsettings_1.SplashSettings(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.switchAccessPolicies = new switchaccesspolicies_1.SwitchAccessPolicies(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.switchPortSchedules = new switchportschedules_1.SwitchPortSchedules(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.switchPorts = new switchports_1.SwitchPorts(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.switchProfiles = new switchprofiles_1.SwitchProfiles(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.switchSettings = new switchsettings_1.SwitchSettings(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.switchStacks = new switchstacks_1.SwitchStacks(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.syslogServers = new syslogservers_1.SyslogServers(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.trafficShapingUplinkSettings = new trafficshapinguplinksettings_1.TrafficShapingUplinkSettings(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.vlaNs = new vlans_1.VLANs(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.wirelessHealth = new wirelesshealth_1.WirelessHealth(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.wirelessSettings = new wirelesssettings_1.WirelessSettings(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
    }
    return SDK;
}());
exports.SDK = SDK;
