// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// CreateSignalingChannelRequestBodyChannelTypeEnum - A type of the signaling channel that you are creating. Currently, <code>SINGLE_MASTER</code> is the only supported channel type.
type CreateSignalingChannelRequestBodyChannelTypeEnum string

const (
	CreateSignalingChannelRequestBodyChannelTypeEnumSingleMaster CreateSignalingChannelRequestBodyChannelTypeEnum = "SINGLE_MASTER"
	CreateSignalingChannelRequestBodyChannelTypeEnumFullMesh     CreateSignalingChannelRequestBodyChannelTypeEnum = "FULL_MESH"
)

func (e CreateSignalingChannelRequestBodyChannelTypeEnum) ToPointer() *CreateSignalingChannelRequestBodyChannelTypeEnum {
	return &e
}

func (e *CreateSignalingChannelRequestBodyChannelTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "SINGLE_MASTER":
		fallthrough
	case "FULL_MESH":
		*e = CreateSignalingChannelRequestBodyChannelTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateSignalingChannelRequestBodyChannelTypeEnum: %v", v)
	}
}

// CreateSignalingChannelRequestBodySingleMasterConfiguration - A structure that contains the configuration for the <code>SINGLE_MASTER</code> channel type.
type CreateSignalingChannelRequestBodySingleMasterConfiguration struct {
	MessageTTLSeconds *int64 `json:"MessageTtlSeconds,omitempty"`
}

type CreateSignalingChannelRequestBody struct {
	// A name for the signaling channel that you are creating. It must be unique for each Amazon Web Services account and Amazon Web Services Region.
	ChannelName string `json:"ChannelName"`
	// A type of the signaling channel that you are creating. Currently, <code>SINGLE_MASTER</code> is the only supported channel type.
	ChannelType *CreateSignalingChannelRequestBodyChannelTypeEnum `json:"ChannelType,omitempty"`
	// A structure that contains the configuration for the <code>SINGLE_MASTER</code> channel type.
	SingleMasterConfiguration *CreateSignalingChannelRequestBodySingleMasterConfiguration `json:"SingleMasterConfiguration,omitempty"`
	// A set of tags (key-value pairs) that you want to associate with this channel.
	Tags []shared.Tag `json:"Tags,omitempty"`
}

type CreateSignalingChannelRequest struct {
	RequestBody       CreateSignalingChannelRequestBody `request:"mediaType=application/json"`
	XAmzAlgorithm     *string                           `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string                           `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string                           `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string                           `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string                           `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string                           `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string                           `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
}

type CreateSignalingChannelResponse struct {
	// AccessDeniedException
	AccessDeniedException interface{}
	// AccountChannelLimitExceededException
	AccountChannelLimitExceededException interface{}
	// ClientLimitExceededException
	ClientLimitExceededException interface{}
	ContentType                  string
	// Success
	CreateSignalingChannelOutput *shared.CreateSignalingChannelOutput
	// InvalidArgumentException
	InvalidArgumentException interface{}
	// ResourceInUseException
	ResourceInUseException interface{}
	StatusCode             int
	RawResponse            *http.Response
	// TagsPerResourceExceededLimitException
	TagsPerResourceExceededLimitException interface{}
}
