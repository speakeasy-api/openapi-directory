"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import group as shared_group
from typing import Optional


@dataclasses.dataclass
class GetCurrentUserGroupsRequest:
    
    membership: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'membership', 'style': 'form', 'explode': True }})
    r"""Set the membership parameter to only return certain groups. The options are: <br /><br /> - **subscribed**: Only return groups the user is a member of.<br /> - **pending-questions**: Only return groups where the user needs to respond to a new member questionnaire.<br /> - **pending**: Only return groups where the user is waiting for their membership request to be approved (excludes groups which are pending-questions). <br /><br /> If unset, all groups the user is a member of and pending membership on will be returned."""  
    

@dataclasses.dataclass
class GetCurrentUserGroupsResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    groups: Optional[list[shared_group.Group]] = dataclasses.field(default=None)
    r"""The users groups."""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    