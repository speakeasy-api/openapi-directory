"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from datetime import date
from marshmallow import fields
from sdk import utils
from typing import Optional


@dataclasses.dataclass
class DashboardIssueZoomRoomSecurity:
    
    o_auth: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'oauth2', 'field_name': 'Authorization' }})  
    

@dataclasses.dataclass
class DashboardIssueZoomRoomRequest:
    
    from_: date = dataclasses.field(metadata={'query_param': { 'field_name': 'from', 'style': 'form', 'explode': True }})
    r"""Start date in 'yyyy-mm-dd' format. The date range defined by the \\"from\\" and \\"to\\" parameters should only be one month as the report includes only one month worth of data at once."""  
    to: date = dataclasses.field(metadata={'query_param': { 'field_name': 'to', 'style': 'form', 'explode': True }})
    r"""End date."""  
    

@dataclasses.dataclass
class DashboardIssueZoomRoom200ApplicationXMLZoomRooms:
    
    id: Optional[str] = dataclasses.field(default=None)
    r"""Zoom Room ID"""  
    issues_count: Optional[int] = dataclasses.field(default=None)
    r"""Issue Count of Zoom Room"""  
    room_name: Optional[str] = dataclasses.field(default=None)
    r"""Zoom Room Name"""  
    

@dataclasses.dataclass
class DashboardIssueZoomRoom200ApplicationXML:
    r"""**HTTP Status Code:** `200`<br>
    Zoom Room with issue details returned
    """
    
    from_: Optional[date] = dataclasses.field(default=None)
    r"""Start date for this report"""  
    to: Optional[date] = dataclasses.field(default=None)
    r"""End date for this report"""  
    total_records: Optional[int] = dataclasses.field(default=None)
    r"""The number of all records available across pages"""  
    zoom_rooms: Optional[list[DashboardIssueZoomRoom200ApplicationXMLZoomRooms]] = dataclasses.field(default=None)  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class DashboardIssueZoomRoom200ApplicationJSONZoomRooms:
    
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""Zoom Room ID"""  
    issues_count: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('issues_count'), 'exclude': lambda f: f is None }})
    r"""Issue Count of Zoom Room"""  
    room_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('room_name'), 'exclude': lambda f: f is None }})
    r"""Zoom Room Name"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class DashboardIssueZoomRoom200ApplicationJSON:
    r"""**HTTP Status Code:** `200`<br>
    Zoom Room with issue details returned
    """
    
    from_: Optional[date] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('from'), 'encoder': utils.dateisoformat(True), 'decoder': utils.datefromisoformat, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""Start date for this report"""  
    to: Optional[date] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('to'), 'encoder': utils.dateisoformat(True), 'decoder': utils.datefromisoformat, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""End date for this report"""  
    total_records: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('total_records'), 'exclude': lambda f: f is None }})
    r"""The number of all records available across pages"""  
    zoom_rooms: Optional[list[DashboardIssueZoomRoom200ApplicationJSONZoomRooms]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('zoom_rooms'), 'exclude': lambda f: f is None }})  
    

@dataclasses.dataclass
class DashboardIssueZoomRoomResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    body: Optional[bytes] = dataclasses.field(default=None)  
    dashboard_issue_zoom_room_200_application_json_object: Optional[DashboardIssueZoomRoom200ApplicationJSON] = dataclasses.field(default=None)
    r"""**HTTP Status Code:** `200`<br>
    Zoom Room with issue details returned
    """  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    