"use strict";
/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CreateInternetGatewayRequest = exports.CreateInternetGatewayRequestTagSpecifications = exports.CreateInternetGatewayRequestTagSpecificationsTags = exports.CreateInternetGatewayRequestTagSpecificationsResourceTypeEnum = void 0;
var utils_1 = require("../../../internal/utils");
/**
 * The type of resource to tag on creation.
 */
var CreateInternetGatewayRequestTagSpecificationsResourceTypeEnum;
(function (CreateInternetGatewayRequestTagSpecificationsResourceTypeEnum) {
    CreateInternetGatewayRequestTagSpecificationsResourceTypeEnum["CapacityReservation"] = "capacity-reservation";
    CreateInternetGatewayRequestTagSpecificationsResourceTypeEnum["ClientVpnEndpoint"] = "client-vpn-endpoint";
    CreateInternetGatewayRequestTagSpecificationsResourceTypeEnum["CustomerGateway"] = "customer-gateway";
    CreateInternetGatewayRequestTagSpecificationsResourceTypeEnum["CarrierGateway"] = "carrier-gateway";
    CreateInternetGatewayRequestTagSpecificationsResourceTypeEnum["CoipPool"] = "coip-pool";
    CreateInternetGatewayRequestTagSpecificationsResourceTypeEnum["DedicatedHost"] = "dedicated-host";
    CreateInternetGatewayRequestTagSpecificationsResourceTypeEnum["DhcpOptions"] = "dhcp-options";
    CreateInternetGatewayRequestTagSpecificationsResourceTypeEnum["EgressOnlyInternetGateway"] = "egress-only-internet-gateway";
    CreateInternetGatewayRequestTagSpecificationsResourceTypeEnum["ElasticIp"] = "elastic-ip";
    CreateInternetGatewayRequestTagSpecificationsResourceTypeEnum["ElasticGpu"] = "elastic-gpu";
    CreateInternetGatewayRequestTagSpecificationsResourceTypeEnum["ExportImageTask"] = "export-image-task";
    CreateInternetGatewayRequestTagSpecificationsResourceTypeEnum["ExportInstanceTask"] = "export-instance-task";
    CreateInternetGatewayRequestTagSpecificationsResourceTypeEnum["Fleet"] = "fleet";
    CreateInternetGatewayRequestTagSpecificationsResourceTypeEnum["FpgaImage"] = "fpga-image";
    CreateInternetGatewayRequestTagSpecificationsResourceTypeEnum["HostReservation"] = "host-reservation";
    CreateInternetGatewayRequestTagSpecificationsResourceTypeEnum["Image"] = "image";
    CreateInternetGatewayRequestTagSpecificationsResourceTypeEnum["ImportImageTask"] = "import-image-task";
    CreateInternetGatewayRequestTagSpecificationsResourceTypeEnum["ImportSnapshotTask"] = "import-snapshot-task";
    CreateInternetGatewayRequestTagSpecificationsResourceTypeEnum["Instance"] = "instance";
    CreateInternetGatewayRequestTagSpecificationsResourceTypeEnum["InstanceEventWindow"] = "instance-event-window";
    CreateInternetGatewayRequestTagSpecificationsResourceTypeEnum["InternetGateway"] = "internet-gateway";
    CreateInternetGatewayRequestTagSpecificationsResourceTypeEnum["Ipam"] = "ipam";
    CreateInternetGatewayRequestTagSpecificationsResourceTypeEnum["IpamPool"] = "ipam-pool";
    CreateInternetGatewayRequestTagSpecificationsResourceTypeEnum["IpamScope"] = "ipam-scope";
    CreateInternetGatewayRequestTagSpecificationsResourceTypeEnum["Ipv4poolEc2"] = "ipv4pool-ec2";
    CreateInternetGatewayRequestTagSpecificationsResourceTypeEnum["Ipv6poolEc2"] = "ipv6pool-ec2";
    CreateInternetGatewayRequestTagSpecificationsResourceTypeEnum["KeyPair"] = "key-pair";
    CreateInternetGatewayRequestTagSpecificationsResourceTypeEnum["LaunchTemplate"] = "launch-template";
    CreateInternetGatewayRequestTagSpecificationsResourceTypeEnum["LocalGateway"] = "local-gateway";
    CreateInternetGatewayRequestTagSpecificationsResourceTypeEnum["LocalGatewayRouteTable"] = "local-gateway-route-table";
    CreateInternetGatewayRequestTagSpecificationsResourceTypeEnum["LocalGatewayVirtualInterface"] = "local-gateway-virtual-interface";
    CreateInternetGatewayRequestTagSpecificationsResourceTypeEnum["LocalGatewayVirtualInterfaceGroup"] = "local-gateway-virtual-interface-group";
    CreateInternetGatewayRequestTagSpecificationsResourceTypeEnum["LocalGatewayRouteTableVpcAssociation"] = "local-gateway-route-table-vpc-association";
    CreateInternetGatewayRequestTagSpecificationsResourceTypeEnum["LocalGatewayRouteTableVirtualInterfaceGroupAssociation"] = "local-gateway-route-table-virtual-interface-group-association";
    CreateInternetGatewayRequestTagSpecificationsResourceTypeEnum["Natgateway"] = "natgateway";
    CreateInternetGatewayRequestTagSpecificationsResourceTypeEnum["NetworkAcl"] = "network-acl";
    CreateInternetGatewayRequestTagSpecificationsResourceTypeEnum["NetworkInterface"] = "network-interface";
    CreateInternetGatewayRequestTagSpecificationsResourceTypeEnum["NetworkInsightsAnalysis"] = "network-insights-analysis";
    CreateInternetGatewayRequestTagSpecificationsResourceTypeEnum["NetworkInsightsPath"] = "network-insights-path";
    CreateInternetGatewayRequestTagSpecificationsResourceTypeEnum["NetworkInsightsAccessScope"] = "network-insights-access-scope";
    CreateInternetGatewayRequestTagSpecificationsResourceTypeEnum["NetworkInsightsAccessScopeAnalysis"] = "network-insights-access-scope-analysis";
    CreateInternetGatewayRequestTagSpecificationsResourceTypeEnum["PlacementGroup"] = "placement-group";
    CreateInternetGatewayRequestTagSpecificationsResourceTypeEnum["PrefixList"] = "prefix-list";
    CreateInternetGatewayRequestTagSpecificationsResourceTypeEnum["ReplaceRootVolumeTask"] = "replace-root-volume-task";
    CreateInternetGatewayRequestTagSpecificationsResourceTypeEnum["ReservedInstances"] = "reserved-instances";
    CreateInternetGatewayRequestTagSpecificationsResourceTypeEnum["RouteTable"] = "route-table";
    CreateInternetGatewayRequestTagSpecificationsResourceTypeEnum["SecurityGroup"] = "security-group";
    CreateInternetGatewayRequestTagSpecificationsResourceTypeEnum["SecurityGroupRule"] = "security-group-rule";
    CreateInternetGatewayRequestTagSpecificationsResourceTypeEnum["Snapshot"] = "snapshot";
    CreateInternetGatewayRequestTagSpecificationsResourceTypeEnum["SpotFleetRequest"] = "spot-fleet-request";
    CreateInternetGatewayRequestTagSpecificationsResourceTypeEnum["SpotInstancesRequest"] = "spot-instances-request";
    CreateInternetGatewayRequestTagSpecificationsResourceTypeEnum["Subnet"] = "subnet";
    CreateInternetGatewayRequestTagSpecificationsResourceTypeEnum["SubnetCidrReservation"] = "subnet-cidr-reservation";
    CreateInternetGatewayRequestTagSpecificationsResourceTypeEnum["TrafficMirrorFilter"] = "traffic-mirror-filter";
    CreateInternetGatewayRequestTagSpecificationsResourceTypeEnum["TrafficMirrorSession"] = "traffic-mirror-session";
    CreateInternetGatewayRequestTagSpecificationsResourceTypeEnum["TrafficMirrorTarget"] = "traffic-mirror-target";
    CreateInternetGatewayRequestTagSpecificationsResourceTypeEnum["TransitGateway"] = "transit-gateway";
    CreateInternetGatewayRequestTagSpecificationsResourceTypeEnum["TransitGatewayAttachment"] = "transit-gateway-attachment";
    CreateInternetGatewayRequestTagSpecificationsResourceTypeEnum["TransitGatewayConnectPeer"] = "transit-gateway-connect-peer";
    CreateInternetGatewayRequestTagSpecificationsResourceTypeEnum["TransitGatewayMulticastDomain"] = "transit-gateway-multicast-domain";
    CreateInternetGatewayRequestTagSpecificationsResourceTypeEnum["TransitGatewayPolicyTable"] = "transit-gateway-policy-table";
    CreateInternetGatewayRequestTagSpecificationsResourceTypeEnum["TransitGatewayRouteTable"] = "transit-gateway-route-table";
    CreateInternetGatewayRequestTagSpecificationsResourceTypeEnum["TransitGatewayRouteTableAnnouncement"] = "transit-gateway-route-table-announcement";
    CreateInternetGatewayRequestTagSpecificationsResourceTypeEnum["Volume"] = "volume";
    CreateInternetGatewayRequestTagSpecificationsResourceTypeEnum["Vpc"] = "vpc";
    CreateInternetGatewayRequestTagSpecificationsResourceTypeEnum["VpcEndpoint"] = "vpc-endpoint";
    CreateInternetGatewayRequestTagSpecificationsResourceTypeEnum["VpcEndpointConnection"] = "vpc-endpoint-connection";
    CreateInternetGatewayRequestTagSpecificationsResourceTypeEnum["VpcEndpointService"] = "vpc-endpoint-service";
    CreateInternetGatewayRequestTagSpecificationsResourceTypeEnum["VpcEndpointServicePermission"] = "vpc-endpoint-service-permission";
    CreateInternetGatewayRequestTagSpecificationsResourceTypeEnum["VpcPeeringConnection"] = "vpc-peering-connection";
    CreateInternetGatewayRequestTagSpecificationsResourceTypeEnum["VpnConnection"] = "vpn-connection";
    CreateInternetGatewayRequestTagSpecificationsResourceTypeEnum["VpnGateway"] = "vpn-gateway";
    CreateInternetGatewayRequestTagSpecificationsResourceTypeEnum["VpcFlowLog"] = "vpc-flow-log";
    CreateInternetGatewayRequestTagSpecificationsResourceTypeEnum["CapacityReservationFleet"] = "capacity-reservation-fleet";
    CreateInternetGatewayRequestTagSpecificationsResourceTypeEnum["TrafficMirrorFilterRule"] = "traffic-mirror-filter-rule";
    CreateInternetGatewayRequestTagSpecificationsResourceTypeEnum["VpcEndpointConnectionDeviceType"] = "vpc-endpoint-connection-device-type";
    CreateInternetGatewayRequestTagSpecificationsResourceTypeEnum["VerifiedAccessInstance"] = "verified-access-instance";
    CreateInternetGatewayRequestTagSpecificationsResourceTypeEnum["VerifiedAccessGroup"] = "verified-access-group";
    CreateInternetGatewayRequestTagSpecificationsResourceTypeEnum["VerifiedAccessEndpoint"] = "verified-access-endpoint";
    CreateInternetGatewayRequestTagSpecificationsResourceTypeEnum["VerifiedAccessPolicy"] = "verified-access-policy";
    CreateInternetGatewayRequestTagSpecificationsResourceTypeEnum["VerifiedAccessTrustProvider"] = "verified-access-trust-provider";
    CreateInternetGatewayRequestTagSpecificationsResourceTypeEnum["VpnConnectionDeviceType"] = "vpn-connection-device-type";
    CreateInternetGatewayRequestTagSpecificationsResourceTypeEnum["VpcBlockPublicAccessExclusion"] = "vpc-block-public-access-exclusion";
    CreateInternetGatewayRequestTagSpecificationsResourceTypeEnum["IpamResourceDiscovery"] = "ipam-resource-discovery";
    CreateInternetGatewayRequestTagSpecificationsResourceTypeEnum["IpamResourceDiscoveryAssociation"] = "ipam-resource-discovery-association";
})(CreateInternetGatewayRequestTagSpecificationsResourceTypeEnum = exports.CreateInternetGatewayRequestTagSpecificationsResourceTypeEnum || (exports.CreateInternetGatewayRequestTagSpecificationsResourceTypeEnum = {}));
/**
 * Describes a tag.
 */
var CreateInternetGatewayRequestTagSpecificationsTags = /** @class */ (function (_super) {
    __extends(CreateInternetGatewayRequestTagSpecificationsTags, _super);
    function CreateInternetGatewayRequestTagSpecificationsTags() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], CreateInternetGatewayRequestTagSpecificationsTags.prototype, "key", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], CreateInternetGatewayRequestTagSpecificationsTags.prototype, "value", void 0);
    return CreateInternetGatewayRequestTagSpecificationsTags;
}(utils_1.SpeakeasyBase));
exports.CreateInternetGatewayRequestTagSpecificationsTags = CreateInternetGatewayRequestTagSpecificationsTags;
/**
 * <p>The tags to apply to a resource when the resource is being created. When you specify a tag, you must specify the resource type to tag, otherwise the request will fail.</p> <note> <p>The <code>Valid Values</code> lists all the resource types that can be tagged. However, the action you're using might not support tagging all of these resource types. If you try to tag a resource type that is unsupported for the action you're using, you'll get an error.</p> </note>
 */
var CreateInternetGatewayRequestTagSpecifications = /** @class */ (function (_super) {
    __extends(CreateInternetGatewayRequestTagSpecifications, _super);
    function CreateInternetGatewayRequestTagSpecifications() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], CreateInternetGatewayRequestTagSpecifications.prototype, "resourceType", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({
            elemType: CreateInternetGatewayRequestTagSpecificationsTags,
        }),
        __metadata("design:type", Array)
    ], CreateInternetGatewayRequestTagSpecifications.prototype, "tags", void 0);
    return CreateInternetGatewayRequestTagSpecifications;
}(utils_1.SpeakeasyBase));
exports.CreateInternetGatewayRequestTagSpecifications = CreateInternetGatewayRequestTagSpecifications;
var CreateInternetGatewayRequest = /** @class */ (function (_super) {
    __extends(CreateInternetGatewayRequest, _super);
    function CreateInternetGatewayRequest() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", Boolean)
    ], CreateInternetGatewayRequest.prototype, "dryRun", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({
            elemType: CreateInternetGatewayRequestTagSpecifications,
        }),
        __metadata("design:type", Array)
    ], CreateInternetGatewayRequest.prototype, "tagSpecifications", void 0);
    return CreateInternetGatewayRequest;
}(utils_1.SpeakeasyBase));
exports.CreateInternetGatewayRequest = CreateInternetGatewayRequest;
