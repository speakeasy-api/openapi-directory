// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"time"
)

// TransactionCategoryEnum - The category of the transaction indicating the type of activity.
//
//	Possible values:
//
// * **platformPayment**: The transaction is a payment or payment modification made with an Adyen merchant account.
//
// * **internal**: The transaction resulted from an internal adjustment such as a deposit correction or invoice deduction.
//
// * **bank**: The transaction is a bank-related activity, such as sending a payout or receiving funds.
//
// * **issuedCard**: The transaction is a card-related activity, such as using an Adyen-issued card to pay online.
type TransactionCategoryEnum string

const (
	TransactionCategoryEnumBank            TransactionCategoryEnum = "bank"
	TransactionCategoryEnumGrants          TransactionCategoryEnum = "grants"
	TransactionCategoryEnumInternal        TransactionCategoryEnum = "internal"
	TransactionCategoryEnumIssuedCard      TransactionCategoryEnum = "issuedCard"
	TransactionCategoryEnumPlatformPayment TransactionCategoryEnum = "platformPayment"
)

func (e *TransactionCategoryEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "bank":
		fallthrough
	case "grants":
		fallthrough
	case "internal":
		fallthrough
	case "issuedCard":
		fallthrough
	case "platformPayment":
		*e = TransactionCategoryEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for TransactionCategoryEnum: %s", s)
	}
}

// TransactionStatusEnum - The status of the transaction.
//
//	Possible values:
//
// * **pending**: The transaction is still pending.
//
// * **booked**: The transaction has been booked to the balance account.
type TransactionStatusEnum string

const (
	TransactionStatusEnumBooked  TransactionStatusEnum = "booked"
	TransactionStatusEnumPending TransactionStatusEnum = "pending"
)

func (e *TransactionStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "booked":
		fallthrough
	case "pending":
		*e = TransactionStatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for TransactionStatusEnum: %s", s)
	}
}

// TransactionTypeEnum - The type of the transaction.
//
//	Possible values: **payment**, **capture**, **captureReversal**, **refund** **refundReversal**, **chargeback**, **chargebackReversal**, **secondChargeback**, **atmWithdrawal**, **atmWithdrawalReversal**, **internalTransfer**, **manualCorrection**, **invoiceDeduction**, **depositCorrection**, **bankTransfer**, **miscCost**, **paymentCost**, **fee**
type TransactionTypeEnum string

const (
	TransactionTypeEnumAtmWithdrawal         TransactionTypeEnum = "atmWithdrawal"
	TransactionTypeEnumAtmWithdrawalReversal TransactionTypeEnum = "atmWithdrawalReversal"
	TransactionTypeEnumBalanceAdjustment     TransactionTypeEnum = "balanceAdjustment"
	TransactionTypeEnumBalanceRollover       TransactionTypeEnum = "balanceRollover"
	TransactionTypeEnumBankTransfer          TransactionTypeEnum = "bankTransfer"
	TransactionTypeEnumCapture               TransactionTypeEnum = "capture"
	TransactionTypeEnumCaptureReversal       TransactionTypeEnum = "captureReversal"
	TransactionTypeEnumChargeback            TransactionTypeEnum = "chargeback"
	TransactionTypeEnumChargebackReversal    TransactionTypeEnum = "chargebackReversal"
	TransactionTypeEnumDepositCorrection     TransactionTypeEnum = "depositCorrection"
	TransactionTypeEnumFee                   TransactionTypeEnum = "fee"
	TransactionTypeEnumGrant                 TransactionTypeEnum = "grant"
	TransactionTypeEnumInstallment           TransactionTypeEnum = "installment"
	TransactionTypeEnumInstallmentReversal   TransactionTypeEnum = "installmentReversal"
	TransactionTypeEnumInternalTransfer      TransactionTypeEnum = "internalTransfer"
	TransactionTypeEnumInvoiceDeduction      TransactionTypeEnum = "invoiceDeduction"
	TransactionTypeEnumLeftover              TransactionTypeEnum = "leftover"
	TransactionTypeEnumManualCorrection      TransactionTypeEnum = "manualCorrection"
	TransactionTypeEnumMiscCost              TransactionTypeEnum = "miscCost"
	TransactionTypeEnumPayment               TransactionTypeEnum = "payment"
	TransactionTypeEnumPaymentCost           TransactionTypeEnum = "paymentCost"
	TransactionTypeEnumRefund                TransactionTypeEnum = "refund"
	TransactionTypeEnumRefundReversal        TransactionTypeEnum = "refundReversal"
	TransactionTypeEnumRepayment             TransactionTypeEnum = "repayment"
	TransactionTypeEnumReserveAdjustment     TransactionTypeEnum = "reserveAdjustment"
	TransactionTypeEnumSecondChargeback      TransactionTypeEnum = "secondChargeback"
)

func (e *TransactionTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "atmWithdrawal":
		fallthrough
	case "atmWithdrawalReversal":
		fallthrough
	case "balanceAdjustment":
		fallthrough
	case "balanceRollover":
		fallthrough
	case "bankTransfer":
		fallthrough
	case "capture":
		fallthrough
	case "captureReversal":
		fallthrough
	case "chargeback":
		fallthrough
	case "chargebackReversal":
		fallthrough
	case "depositCorrection":
		fallthrough
	case "fee":
		fallthrough
	case "grant":
		fallthrough
	case "installment":
		fallthrough
	case "installmentReversal":
		fallthrough
	case "internalTransfer":
		fallthrough
	case "invoiceDeduction":
		fallthrough
	case "leftover":
		fallthrough
	case "manualCorrection":
		fallthrough
	case "miscCost":
		fallthrough
	case "payment":
		fallthrough
	case "paymentCost":
		fallthrough
	case "refund":
		fallthrough
	case "refundReversal":
		fallthrough
	case "repayment":
		fallthrough
	case "reserveAdjustment":
		fallthrough
	case "secondChargeback":
		*e = TransactionTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for TransactionTypeEnum: %s", s)
	}
}

// Transaction - OK - the request has succeeded.
type Transaction struct {
	// Unique identifier of the account holder.
	AccountHolderID string `json:"accountHolderId"`
	Amount          Amount `json:"amount"`
	// Unique identifier of the balance account.
	BalanceAccountID string `json:"balanceAccountId"`
	// Unique identifier of the balance platform.
	BalancePlatform string `json:"balancePlatform"`
	// The date the transaction was booked to the balance account.
	BookingDate time.Time `json:"bookingDate"`
	// The category of the transaction indicating the type of activity.
	//
	//  Possible values:
	//
	// * **platformPayment**: The transaction is a payment or payment modification made with an Adyen merchant account.
	//
	// * **internal**: The transaction resulted from an internal adjustment such as a deposit correction or invoice deduction.
	//
	// * **bank**: The transaction is a bank-related activity, such as sending a payout or receiving funds.
	//
	// * **issuedCard**: The transaction is a card-related activity, such as using an Adyen-issued card to pay online.
	//
	//
	Category     *TransactionCategoryEnum `json:"category,omitempty"`
	Counterparty Counterparty             `json:"counterparty"`
	// The date the transaction was created.
	CreatedAt time.Time `json:"createdAt"`
	// The `description` from the `/transfers` request.
	Description *string `json:"description,omitempty"`
	// Unique identifier of the transaction.
	ID               string  `json:"id"`
	InstructedAmount *Amount `json:"instructedAmount,omitempty"`
	// Unique identifier of the payment instrument that was used for the transaction.
	PaymentInstrumentID *string `json:"paymentInstrumentId,omitempty"`
	// The [`reference`](https://docs.adyen.com/api-explorer/#/transfers/latest/post/transfers__reqParam_reference) from the `/transfers` request. If you haven't provided any, Adyen generates a unique reference.
	Reference string `json:"reference"`
	// The reference sent to or received from the counterparty.
	//
	// * For outgoing funds, this is the [`referenceForBeneficiary`](https://docs.adyen.com/api-explorer/#/transfers/latest/post/transfers__resParam_referenceForBeneficiary) from the  [`/transfers`](https://docs.adyen.com/api-explorer/#/transfers/latest/post/transfers__reqParam_referenceForBeneficiary) request.
	//
	//  * For incoming funds, this is the reference from the sender.
	ReferenceForBeneficiary *string `json:"referenceForBeneficiary,omitempty"`
	// The status of the transaction.
	//
	//  Possible values:
	//
	// * **pending**: The transaction is still pending.
	//
	// * **booked**: The transaction has been booked to the balance account.
	//
	//
	Status TransactionStatusEnum `json:"status"`
	// Unique identifier of the related transfer.
	TransferID *string `json:"transferId,omitempty"`
	// The type of the transaction.
	//
	//  Possible values: **payment**, **capture**, **captureReversal**, **refund** **refundReversal**, **chargeback**, **chargebackReversal**, **secondChargeback**, **atmWithdrawal**, **atmWithdrawalReversal**, **internalTransfer**, **manualCorrection**, **invoiceDeduction**, **depositCorrection**, **bankTransfer**, **miscCost**, **paymentCost**, **fee**
	Type *TransactionTypeEnum `json:"type,omitempty"`
	// The date the transfer amount becomes available in the balance account.
	ValueDate time.Time `json:"valueDate"`
}
