// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// GetProductSearchFacetsSimulationBehaviorEnum - Defines the simulation behavior.
//
//   - `default` - Calls the simulation for every single seller.
//   - `skip` - Never calls the simulation.
//   - `only1P` - Only calls the simulation for first party sellers.
type GetProductSearchFacetsSimulationBehaviorEnum string

const (
	GetProductSearchFacetsSimulationBehaviorEnumDefault GetProductSearchFacetsSimulationBehaviorEnum = "default"
	GetProductSearchFacetsSimulationBehaviorEnumSkip    GetProductSearchFacetsSimulationBehaviorEnum = "skip"
	GetProductSearchFacetsSimulationBehaviorEnumOnly1P  GetProductSearchFacetsSimulationBehaviorEnum = "only1P"
)

func (e *GetProductSearchFacetsSimulationBehaviorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "default":
		fallthrough
	case "skip":
		fallthrough
	case "only1P":
		*e = GetProductSearchFacetsSimulationBehaviorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetProductSearchFacetsSimulationBehaviorEnum: %s", s)
	}
}

// GetProductSearchFacetsSortEnum - Defines the sort type. If null, the products will be sorted by relevance.
type GetProductSearchFacetsSortEnum string

const (
	GetProductSearchFacetsSortEnumPriceDesc    GetProductSearchFacetsSortEnum = "price:desc"
	GetProductSearchFacetsSortEnumPriceAsc     GetProductSearchFacetsSortEnum = "price:asc"
	GetProductSearchFacetsSortEnumOrdersDesc   GetProductSearchFacetsSortEnum = "orders:desc"
	GetProductSearchFacetsSortEnumNameDesc     GetProductSearchFacetsSortEnum = "name:desc"
	GetProductSearchFacetsSortEnumNameAsc      GetProductSearchFacetsSortEnum = "name:asc"
	GetProductSearchFacetsSortEnumReleaseDesc  GetProductSearchFacetsSortEnum = "release:desc"
	GetProductSearchFacetsSortEnumDiscountDesc GetProductSearchFacetsSortEnum = "discount:desc"
)

func (e *GetProductSearchFacetsSortEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "price:desc":
		fallthrough
	case "price:asc":
		fallthrough
	case "orders:desc":
		fallthrough
	case "name:desc":
		fallthrough
	case "name:asc":
		fallthrough
	case "release:desc":
		fallthrough
	case "discount:desc":
		*e = GetProductSearchFacetsSortEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetProductSearchFacetsSortEnum: %s", s)
	}
}

type GetProductSearchFacetsRequest struct {
	// Number of products per page.
	Count *float64 `queryParam:"style=form,explode=true,name=count"`
	// # Format
	//
	// The `facets` parameter follows the format : `/${facetKey1}/${facetValue1}/${facetKey2}/${facetValue2}/.../${facetKeyN}/${facetValueN}`.
	//
	// The order in which the terms appear is not relevant to the search.
	//
	// You can also repeat the same `facetKey` several times for different values. For example: `category-1/shoes/color/blue/color/red/color/yellow`
	//
	// # General filters
	//
	// The `facets` parameter also allows the following general filters.
	//
	// | `facetKey`      | Description                                                                                      | Example                                                                  |
	// | --------------- | ------------------------------------------------------------------------------------------------ | ------------------------------------------------------------------------ |
	// | `price`         | Filter the search by a price range. The facet value follows the format `${minPrice}:${maxPrice}` | `/color/blue/price/100:500?query=shirt`                                  |
	// | `category-${n}` | Filter the search by category, where `n` represents the category tree level (1 = department, 2 = category, 3 = subcategory, and so on) | `category-1/clothing/category-2/shirts`                                  |
	// | `region-id`     | Filter the search by a region id (aka regionalization). The value is the region id               | `/color/blue/region-id/v2.26219C7C3DE42BAAD11CFB92CD0BFE91?query=shirt`. |
	//
	Facets string `pathParam:"style=simple,explode=false,name=facets"`
	// Whether the result should hide unavailable items (`true`), or not (`false`)
	HideUnavailableItems *bool `queryParam:"style=form,explode=true,name=hideUnavailableItems"`
	// Indicates the target language as a BCP 47 language code. The Intelligent Search must have indexed the account in the target language.
	Locale *string `queryParam:"style=form,explode=true,name=locale"`
	// Current search page.
	Page *float64 `queryParam:"style=form,explode=true,name=page"`
	// Search term. It can contain any character.
	Query *string `queryParam:"style=form,explode=true,name=query"`
	// Defines the simulation behavior.
	//
	//  * `default` - Calls the simulation for every single seller.
	//  * `skip` - Never calls the simulation.
	//  * `only1P` - Only calls the simulation for first party sellers.
	SimulationBehavior *GetProductSearchFacetsSimulationBehaviorEnum `queryParam:"style=form,explode=true,name=simulationBehavior"`
	// Defines the sort type. If null, the products will be sorted by relevance.
	Sort *GetProductSearchFacetsSortEnum `queryParam:"style=form,explode=true,name=sort"`
}

type GetProductSearchFacetsResponse struct {
	ContentType string
	// List of products for the given query.
	ProductSearch *shared.ProductSearch
	StatusCode    int
	RawResponse   *http.Response
}
