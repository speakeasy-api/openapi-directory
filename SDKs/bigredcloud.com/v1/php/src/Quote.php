<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Quote 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Close a Quote.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\QuoteCloseRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\QuoteCloseResponse
     */
	public function quoteClose(
        \OpenAPI\OpenAPI\Models\Operations\QuoteCloseRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\QuoteCloseResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/quotes/close/{id}', \OpenAPI\OpenAPI\Models\Operations\QuoteCloseRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\QuoteCloseResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->quoteClose200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Removes an existing Quote.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\QuoteDeleteRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\QuoteDeleteResponse
     */
	public function quoteDelete(
        \OpenAPI\OpenAPI\Models\Operations\QuoteDeleteRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\QuoteDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/quotes/{id}', \OpenAPI\OpenAPI\Models\Operations\QuoteDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\QuoteDeleteRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\QuoteDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->quoteDelete200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns a list of company's Quotes.
     * Filtering is forbidden.
     * Ordering is allowed by "id".
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\QuoteGetResponse
     */
	public function quoteGet(
    ): \OpenAPI\OpenAPI\Models\Operations\QuoteGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/quotes');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\QuoteGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->pageResultQuoteDto = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PageResultQuoteDto', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a new Quote.
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\QuoteDto $request
     * @return \OpenAPI\OpenAPI\Models\Operations\QuotePostResponse
     */
	public function quotePost(
        \OpenAPI\OpenAPI\Models\Shared\QuoteDto $request,
    ): \OpenAPI\OpenAPI\Models\Operations\QuotePostResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/quotes');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\QuotePostResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->quotePost200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a new Quote with auto generating reference.
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\QuoteDto $request
     * @return \OpenAPI\OpenAPI\Models\Operations\QuotePostCreateQuoteWithGeneratingReferenceResponse
     */
	public function quotePostCreateQuoteWithGeneratingReference(
        \OpenAPI\OpenAPI\Models\Shared\QuoteDto $request,
    ): \OpenAPI\OpenAPI\Models\Operations\QuotePostCreateQuoteWithGeneratingReferenceResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/quotes/createQuoteWithGeneratingReference');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\QuotePostCreateQuoteWithGeneratingReferenceResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->quotePostCreateQuoteWithGeneratingReference200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Generate a sale invoice from a Quote.
     * When sale invoice is empty, new sale invoice will be generated from Quote.
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\QuoteGeneratingInvoiceDto $request
     * @return \OpenAPI\OpenAPI\Models\Operations\QuotePostGenerateSaleInvoiceResponse
     */
	public function quotePostGenerateSaleInvoice(
        \OpenAPI\OpenAPI\Models\Shared\QuoteGeneratingInvoiceDto $request,
    ): \OpenAPI\OpenAPI\Models\Operations\QuotePostGenerateSaleInvoiceResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/quotes/generateSaleInvoice');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\QuotePostGenerateSaleInvoiceResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->quotePostGenerateSaleInvoice200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Processes a batch of Quote.
     * 
     * @param array<\OpenAPI\OpenAPI\Models\Shared\BatchItemQuoteDto> $request
     * @return \OpenAPI\OpenAPI\Models\Operations\QuoteProcessBatchResponse
     */
	public function quoteProcessBatch(
        array $request,
    ): \OpenAPI\OpenAPI\Models\Operations\QuoteProcessBatchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/quotes/batch');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\QuoteProcessBatchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->quoteProcessBatch200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates an existing Quote.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\QuotePutRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\QuotePutResponse
     */
	public function quotePut(
        \OpenAPI\OpenAPI\Models\Operations\QuotePutRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\QuotePutResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/quotes/{id}', \OpenAPI\OpenAPI\Models\Operations\QuotePutRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "quoteDto", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\QuotePutResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->quotePut200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Reopen a Quote.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\QuoteReopenRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\QuoteReopenResponse
     */
	public function quoteReopen(
        \OpenAPI\OpenAPI\Models\Operations\QuoteReopenRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\QuoteReopenResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/quotes/reopen/{id}', \OpenAPI\OpenAPI\Models\Operations\QuoteReopenRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\QuoteReopenResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->quoteReopen200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns information about a single Quote.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetV1QuotesIdRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetV1QuotesIdResponse
     */
	public function getV1QuotesId(
        \OpenAPI\OpenAPI\Models\Operations\GetV1QuotesIdRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetV1QuotesIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/quotes/{id}', \OpenAPI\OpenAPI\Models\Operations\GetV1QuotesIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetV1QuotesIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->quoteDto = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\QuoteDto', 'json');
            }
        }

        return $response;
    }
}