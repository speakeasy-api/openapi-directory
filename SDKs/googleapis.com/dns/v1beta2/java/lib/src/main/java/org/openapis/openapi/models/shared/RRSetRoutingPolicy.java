/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * RRSetRoutingPolicy - A RRSetRoutingPolicy represents ResourceRecordSet data that is returned dynamically with the response varying based on configured properties such as geolocation or by weighted random selection.
 */
public class RRSetRoutingPolicy {
    /**
     * Configures a RRSetRoutingPolicy that routes based on the geo location of the querying user.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("geo")
    public RRSetRoutingPolicyGeoPolicy geo;
    public RRSetRoutingPolicy withGeo(RRSetRoutingPolicyGeoPolicy geo) {
        this.geo = geo;
        return this;
    }
    
    /**
     * Configures a RRSetRoutingPolicy that routes based on the geo location of the querying user.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("geoPolicy")
    public RRSetRoutingPolicyGeoPolicy geoPolicy;
    public RRSetRoutingPolicy withGeoPolicy(RRSetRoutingPolicyGeoPolicy geoPolicy) {
        this.geoPolicy = geoPolicy;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("kind")
    public String kind;
    public RRSetRoutingPolicy withKind(String kind) {
        this.kind = kind;
        return this;
    }
    
    /**
     * Configures a RRSetRoutingPolicy such that all queries are responded with the primary_targets if they are healthy. And if all of them are unhealthy, then we fallback to a geo localized policy.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("primaryBackup")
    public RRSetRoutingPolicyPrimaryBackupPolicy primaryBackup;
    public RRSetRoutingPolicy withPrimaryBackup(RRSetRoutingPolicyPrimaryBackupPolicy primaryBackup) {
        this.primaryBackup = primaryBackup;
        return this;
    }
    
    /**
     * Configures a RRSetRoutingPolicy that routes in a weighted round robin fashion.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("wrr")
    public RRSetRoutingPolicyWrrPolicy wrr;
    public RRSetRoutingPolicy withWrr(RRSetRoutingPolicyWrrPolicy wrr) {
        this.wrr = wrr;
        return this;
    }
    
    /**
     * Configures a RRSetRoutingPolicy that routes in a weighted round robin fashion.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("wrrPolicy")
    public RRSetRoutingPolicyWrrPolicy wrrPolicy;
    public RRSetRoutingPolicy withWrrPolicy(RRSetRoutingPolicyWrrPolicy wrrPolicy) {
        this.wrrPolicy = wrrPolicy;
        return this;
    }
    
}
