// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// TransferCategoryEnum - The type of transfer.
//
// Possible values:
//
//   - **bank**: Transfer to a [transfer instrument](https://docs.adyen.com/api-explorer/#/legalentity/latest/post/transferInstruments__resParam_id) or a bank account.
//
// - **internal**: Transfer to another [balance account](https://docs.adyen.com/api-explorer/#/balanceplatform/latest/post/balanceAccounts__resParam_id) within your platform.
//
// - **issuedCard**: Transfer initiated by a Adyen-issued card.
//
// - **platformPayment**: Fund movements related to payments that are acquired for your users.
type TransferCategoryEnum string

const (
	TransferCategoryEnumBank            TransferCategoryEnum = "bank"
	TransferCategoryEnumInternal        TransferCategoryEnum = "internal"
	TransferCategoryEnumIssuedCard      TransferCategoryEnum = "issuedCard"
	TransferCategoryEnumPlatformPayment TransferCategoryEnum = "platformPayment"
)

func (e TransferCategoryEnum) ToPointer() *TransferCategoryEnum {
	return &e
}

func (e *TransferCategoryEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "bank":
		fallthrough
	case "internal":
		fallthrough
	case "issuedCard":
		fallthrough
	case "platformPayment":
		*e = TransferCategoryEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TransferCategoryEnum: %v", v)
	}
}

// TransferDirectionEnum - The direction of the transfer.
//
// Possible values: **incoming**, **outgoing**.
type TransferDirectionEnum string

const (
	TransferDirectionEnumIncoming TransferDirectionEnum = "incoming"
	TransferDirectionEnumOutgoing TransferDirectionEnum = "outgoing"
)

func (e TransferDirectionEnum) ToPointer() *TransferDirectionEnum {
	return &e
}

func (e *TransferDirectionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "incoming":
		fallthrough
	case "outgoing":
		*e = TransferDirectionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TransferDirectionEnum: %v", v)
	}
}

// TransferPriorityEnum - The priority for the bank transfer. This sets the speed at which the transfer is sent and the fees that you have to pay. Required for transfers with `category` **bank**.
//
// Possible values:
//
// * **regular**: For normal, low-value transactions.
//
// * **fast**: Faster way to transfer funds but has higher fees. Recommended for high-priority, low-value transactions.
//
// * **wire**: Fastest way to transfer funds but has the highest fees. Recommended for high-priority, high-value transactions.
//
// * **instant**: Instant way to transfer funds in [SEPA countries](https://www.ecb.europa.eu/paym/integration/retail/sepa/html/index.en.html).
//
// * **crossBorder**: High-value transfer to a recipient in a different country.
//
// * **internal**: Transfer to an Adyen-issued business bank account (by bank account number/IBAN).
type TransferPriorityEnum string

const (
	TransferPriorityEnumCrossBorder TransferPriorityEnum = "crossBorder"
	TransferPriorityEnumDirectDebit TransferPriorityEnum = "directDebit"
	TransferPriorityEnumFast        TransferPriorityEnum = "fast"
	TransferPriorityEnumInstant     TransferPriorityEnum = "instant"
	TransferPriorityEnumInternal    TransferPriorityEnum = "internal"
	TransferPriorityEnumRegular     TransferPriorityEnum = "regular"
	TransferPriorityEnumWire        TransferPriorityEnum = "wire"
)

func (e TransferPriorityEnum) ToPointer() *TransferPriorityEnum {
	return &e
}

func (e *TransferPriorityEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "crossBorder":
		fallthrough
	case "directDebit":
		fallthrough
	case "fast":
		fallthrough
	case "instant":
		fallthrough
	case "internal":
		fallthrough
	case "regular":
		fallthrough
	case "wire":
		*e = TransferPriorityEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TransferPriorityEnum: %v", v)
	}
}

// TransferReasonEnum - Additional information about the status of the transfer.
type TransferReasonEnum string

const (
	TransferReasonEnumAmountLimitExceeded         TransferReasonEnum = "amountLimitExceeded"
	TransferReasonEnumApproved                    TransferReasonEnum = "approved"
	TransferReasonEnumCounterpartyAccountBlocked  TransferReasonEnum = "counterpartyAccountBlocked"
	TransferReasonEnumCounterpartyAccountClosed   TransferReasonEnum = "counterpartyAccountClosed"
	TransferReasonEnumCounterpartyAccountNotFound TransferReasonEnum = "counterpartyAccountNotFound"
	TransferReasonEnumCounterpartyAddressRequired TransferReasonEnum = "counterpartyAddressRequired"
	TransferReasonEnumCounterpartyBankTimedOut    TransferReasonEnum = "counterpartyBankTimedOut"
	TransferReasonEnumCounterpartyBankUnavailable TransferReasonEnum = "counterpartyBankUnavailable"
	TransferReasonEnumError                       TransferReasonEnum = "error"
	TransferReasonEnumNotEnoughBalance            TransferReasonEnum = "notEnoughBalance"
	TransferReasonEnumRefusedByCounterpartyBank   TransferReasonEnum = "refusedByCounterpartyBank"
	TransferReasonEnumRouteNotFound               TransferReasonEnum = "routeNotFound"
	TransferReasonEnumUnknown                     TransferReasonEnum = "unknown"
)

func (e TransferReasonEnum) ToPointer() *TransferReasonEnum {
	return &e
}

func (e *TransferReasonEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "amountLimitExceeded":
		fallthrough
	case "approved":
		fallthrough
	case "counterpartyAccountBlocked":
		fallthrough
	case "counterpartyAccountClosed":
		fallthrough
	case "counterpartyAccountNotFound":
		fallthrough
	case "counterpartyAddressRequired":
		fallthrough
	case "counterpartyBankTimedOut":
		fallthrough
	case "counterpartyBankUnavailable":
		fallthrough
	case "error":
		fallthrough
	case "notEnoughBalance":
		fallthrough
	case "refusedByCounterpartyBank":
		fallthrough
	case "routeNotFound":
		fallthrough
	case "unknown":
		*e = TransferReasonEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TransferReasonEnum: %v", v)
	}
}

// TransferStatusEnum - The result of the transfer.
//
//	For example, **authorised**, **refused**, or **error**.
type TransferStatusEnum string

const (
	TransferStatusEnumApprovalPending              TransferStatusEnum = "approvalPending"
	TransferStatusEnumAtmWithdrawal                TransferStatusEnum = "atmWithdrawal"
	TransferStatusEnumAtmWithdrawalReversalPending TransferStatusEnum = "atmWithdrawalReversalPending"
	TransferStatusEnumAtmWithdrawalReversed        TransferStatusEnum = "atmWithdrawalReversed"
	TransferStatusEnumAuthAdjustmentAuthorised     TransferStatusEnum = "authAdjustmentAuthorised"
	TransferStatusEnumAuthAdjustmentError          TransferStatusEnum = "authAdjustmentError"
	TransferStatusEnumAuthAdjustmentRefused        TransferStatusEnum = "authAdjustmentRefused"
	TransferStatusEnumAuthorised                   TransferStatusEnum = "authorised"
	TransferStatusEnumBankTransfer                 TransferStatusEnum = "bankTransfer"
	TransferStatusEnumBankTransferPending          TransferStatusEnum = "bankTransferPending"
	TransferStatusEnumBooked                       TransferStatusEnum = "booked"
	TransferStatusEnumBookingPending               TransferStatusEnum = "bookingPending"
	TransferStatusEnumCancelled                    TransferStatusEnum = "cancelled"
	TransferStatusEnumCapturePending               TransferStatusEnum = "capturePending"
	TransferStatusEnumCaptureReversalPending       TransferStatusEnum = "captureReversalPending"
	TransferStatusEnumCaptureReversed              TransferStatusEnum = "captureReversed"
	TransferStatusEnumCaptured                     TransferStatusEnum = "captured"
	TransferStatusEnumChargeback                   TransferStatusEnum = "chargeback"
	TransferStatusEnumChargebackPending            TransferStatusEnum = "chargebackPending"
	TransferStatusEnumChargebackReversalPending    TransferStatusEnum = "chargebackReversalPending"
	TransferStatusEnumChargebackReversed           TransferStatusEnum = "chargebackReversed"
	TransferStatusEnumCredited                     TransferStatusEnum = "credited"
	TransferStatusEnumDepositCorrection            TransferStatusEnum = "depositCorrection"
	TransferStatusEnumDepositCorrectionPending     TransferStatusEnum = "depositCorrectionPending"
	TransferStatusEnumDispute                      TransferStatusEnum = "dispute"
	TransferStatusEnumDisputeClosed                TransferStatusEnum = "disputeClosed"
	TransferStatusEnumDisputeExpired               TransferStatusEnum = "disputeExpired"
	TransferStatusEnumDisputeNeedsReview           TransferStatusEnum = "disputeNeedsReview"
	TransferStatusEnumError                        TransferStatusEnum = "error"
	TransferStatusEnumExpired                      TransferStatusEnum = "expired"
	TransferStatusEnumFailed                       TransferStatusEnum = "failed"
	TransferStatusEnumFee                          TransferStatusEnum = "fee"
	TransferStatusEnumFeePending                   TransferStatusEnum = "feePending"
	TransferStatusEnumInternalTransfer             TransferStatusEnum = "internalTransfer"
	TransferStatusEnumInternalTransferPending      TransferStatusEnum = "internalTransferPending"
	TransferStatusEnumInvoiceDeduction             TransferStatusEnum = "invoiceDeduction"
	TransferStatusEnumInvoiceDeductionPending      TransferStatusEnum = "invoiceDeductionPending"
	TransferStatusEnumManualCorrectionPending      TransferStatusEnum = "manualCorrectionPending"
	TransferStatusEnumManuallyCorrected            TransferStatusEnum = "manuallyCorrected"
	TransferStatusEnumMatchedStatement             TransferStatusEnum = "matchedStatement"
	TransferStatusEnumMatchedStatementPending      TransferStatusEnum = "matchedStatementPending"
	TransferStatusEnumMerchantPayin                TransferStatusEnum = "merchantPayin"
	TransferStatusEnumMerchantPayinPending         TransferStatusEnum = "merchantPayinPending"
	TransferStatusEnumMerchantPayinReversed        TransferStatusEnum = "merchantPayinReversed"
	TransferStatusEnumMerchantPayinReversedPending TransferStatusEnum = "merchantPayinReversedPending"
	TransferStatusEnumMiscCost                     TransferStatusEnum = "miscCost"
	TransferStatusEnumMiscCostPending              TransferStatusEnum = "miscCostPending"
	TransferStatusEnumPaymentCost                  TransferStatusEnum = "paymentCost"
	TransferStatusEnumPaymentCostPending           TransferStatusEnum = "paymentCostPending"
	TransferStatusEnumReceived                     TransferStatusEnum = "received"
	TransferStatusEnumRefundPending                TransferStatusEnum = "refundPending"
	TransferStatusEnumRefundReversalPending        TransferStatusEnum = "refundReversalPending"
	TransferStatusEnumRefundReversed               TransferStatusEnum = "refundReversed"
	TransferStatusEnumRefunded                     TransferStatusEnum = "refunded"
	TransferStatusEnumRefused                      TransferStatusEnum = "refused"
	TransferStatusEnumReserveAdjustment            TransferStatusEnum = "reserveAdjustment"
	TransferStatusEnumReserveAdjustmentPending     TransferStatusEnum = "reserveAdjustmentPending"
	TransferStatusEnumReturned                     TransferStatusEnum = "returned"
	TransferStatusEnumSecondChargeback             TransferStatusEnum = "secondChargeback"
	TransferStatusEnumSecondChargebackPending      TransferStatusEnum = "secondChargebackPending"
	TransferStatusEnumUndefined                    TransferStatusEnum = "undefined"
)

func (e TransferStatusEnum) ToPointer() *TransferStatusEnum {
	return &e
}

func (e *TransferStatusEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "approvalPending":
		fallthrough
	case "atmWithdrawal":
		fallthrough
	case "atmWithdrawalReversalPending":
		fallthrough
	case "atmWithdrawalReversed":
		fallthrough
	case "authAdjustmentAuthorised":
		fallthrough
	case "authAdjustmentError":
		fallthrough
	case "authAdjustmentRefused":
		fallthrough
	case "authorised":
		fallthrough
	case "bankTransfer":
		fallthrough
	case "bankTransferPending":
		fallthrough
	case "booked":
		fallthrough
	case "bookingPending":
		fallthrough
	case "cancelled":
		fallthrough
	case "capturePending":
		fallthrough
	case "captureReversalPending":
		fallthrough
	case "captureReversed":
		fallthrough
	case "captured":
		fallthrough
	case "chargeback":
		fallthrough
	case "chargebackPending":
		fallthrough
	case "chargebackReversalPending":
		fallthrough
	case "chargebackReversed":
		fallthrough
	case "credited":
		fallthrough
	case "depositCorrection":
		fallthrough
	case "depositCorrectionPending":
		fallthrough
	case "dispute":
		fallthrough
	case "disputeClosed":
		fallthrough
	case "disputeExpired":
		fallthrough
	case "disputeNeedsReview":
		fallthrough
	case "error":
		fallthrough
	case "expired":
		fallthrough
	case "failed":
		fallthrough
	case "fee":
		fallthrough
	case "feePending":
		fallthrough
	case "internalTransfer":
		fallthrough
	case "internalTransferPending":
		fallthrough
	case "invoiceDeduction":
		fallthrough
	case "invoiceDeductionPending":
		fallthrough
	case "manualCorrectionPending":
		fallthrough
	case "manuallyCorrected":
		fallthrough
	case "matchedStatement":
		fallthrough
	case "matchedStatementPending":
		fallthrough
	case "merchantPayin":
		fallthrough
	case "merchantPayinPending":
		fallthrough
	case "merchantPayinReversed":
		fallthrough
	case "merchantPayinReversedPending":
		fallthrough
	case "miscCost":
		fallthrough
	case "miscCostPending":
		fallthrough
	case "paymentCost":
		fallthrough
	case "paymentCostPending":
		fallthrough
	case "received":
		fallthrough
	case "refundPending":
		fallthrough
	case "refundReversalPending":
		fallthrough
	case "refundReversed":
		fallthrough
	case "refunded":
		fallthrough
	case "refused":
		fallthrough
	case "reserveAdjustment":
		fallthrough
	case "reserveAdjustmentPending":
		fallthrough
	case "returned":
		fallthrough
	case "secondChargeback":
		fallthrough
	case "secondChargebackPending":
		fallthrough
	case "undefined":
		*e = TransferStatusEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TransferStatusEnum: %v", v)
	}
}

// Transfer - OK - the request has succeeded.
type Transfer struct {
	AccountHolder  *ResourceReference `json:"accountHolder,omitempty"`
	Amount         Amount             `json:"amount"`
	BalanceAccount *ResourceReference `json:"balanceAccount,omitempty"`
	// The unique identifier of the source [balance account](https://docs.adyen.com/api-explorer/#/balanceplatform/latest/post/balanceAccounts__resParam_id).
	BalanceAccountID *string `json:"balanceAccountId,omitempty"`
	// The type of transfer.
	//
	// Possible values:
	//
	//  - **bank**: Transfer to a [transfer instrument](https://docs.adyen.com/api-explorer/#/legalentity/latest/post/transferInstruments__resParam_id) or a bank account.
	//
	// - **internal**: Transfer to another [balance account](https://docs.adyen.com/api-explorer/#/balanceplatform/latest/post/balanceAccounts__resParam_id) within your platform.
	//
	// - **issuedCard**: Transfer initiated by a Adyen-issued card.
	//
	// - **platformPayment**: Fund movements related to payments that are acquired for your users.
	Category     TransferCategoryEnum `json:"category"`
	Counterparty CounterpartyV3       `json:"counterparty"`
	// Your description for the transfer. It is used by most banks as the transfer description. We recommend sending a maximum of 140 characters, otherwise the description may be truncated.
	//
	// Supported characters: **[a-z] [A-Z] [0-9] / - ?** **: ( ) . , ' + Space**
	//
	// Supported characters for **regular** and **fast** transfers to a US counterparty: **[a-z] [A-Z] [0-9] & $ % # @** **~ = + - _ ' " ! ?**
	Description *string `json:"description,omitempty"`
	// The direction of the transfer.
	//
	// Possible values: **incoming**, **outgoing**.
	Direction *TransferDirectionEnum `json:"direction,omitempty"`
	// The ID of the resource.
	ID                *string            `json:"id,omitempty"`
	PaymentInstrument *PaymentInstrument `json:"paymentInstrument,omitempty"`
	// The unique identifier of the [payment instrument](https://docs.adyen.com/api-explorer/#/balanceplatform/latest/post/balanceAccounts__resParam_id) used in the transfer.
	PaymentInstrumentID *string `json:"paymentInstrumentId,omitempty"`
	// The priority for the bank transfer. This sets the speed at which the transfer is sent and the fees that you have to pay. Required for transfers with `category` **bank**.
	//
	// Possible values:
	//
	// * **regular**: For normal, low-value transactions.
	//
	// * **fast**: Faster way to transfer funds but has higher fees. Recommended for high-priority, low-value transactions.
	//
	// * **wire**: Fastest way to transfer funds but has the highest fees. Recommended for high-priority, high-value transactions.
	//
	// * **instant**: Instant way to transfer funds in [SEPA countries](https://www.ecb.europa.eu/paym/integration/retail/sepa/html/index.en.html).
	//
	// * **crossBorder**: High-value transfer to a recipient in a different country.
	//
	// * **internal**: Transfer to an Adyen-issued business bank account (by bank account number/IBAN).
	Priority *TransferPriorityEnum `json:"priority,omitempty"`
	// Additional information about the status of the transfer.
	Reason *TransferReasonEnum `json:"reason,omitempty"`
	// Your reference for the transfer, used internally within your platform. If you don't provide this in the request, Adyen generates a unique reference.
	Reference *string `json:"reference,omitempty"`
	//  A reference that is sent to the recipient. This reference is also sent in all notification webhooks related to the transfer, so you can use it to track statuses for both the source and recipient of funds.
	//
	//  Supported characters: **a-z**, **A-Z**, **0-9**. The maximum length depends on the `category`.
	//
	// - **internal**: 80 characters
	//
	// - **bank**: 35 characters when transferring to an IBAN, 15 characters for others.
	ReferenceForBeneficiary *string `json:"referenceForBeneficiary,omitempty"`
	// The result of the transfer.
	//
	//  For example, **authorised**, **refused**, or **error**.
	Status TransferStatusEnum `json:"status"`
}
