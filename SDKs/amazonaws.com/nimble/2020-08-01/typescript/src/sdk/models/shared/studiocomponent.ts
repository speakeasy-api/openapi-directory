/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { ScriptParameterKeyValue } from "./scriptparameterkeyvalue";
import { StudioComponentConfiguration } from "./studiocomponentconfiguration";
import { StudioComponentInitializationScript } from "./studiocomponentinitializationscript";
import { StudioComponentStateEnum } from "./studiocomponentstateenum";
import { StudioComponentStatusCodeEnum } from "./studiocomponentstatuscodeenum";
import { StudioComponentSubtypeEnum } from "./studiocomponentsubtypeenum";
import { StudioComponentTypeEnum } from "./studiocomponenttypeenum";
import { Expose, Transform, Type } from "class-transformer";

/**
 * <p>A studio component represents a network resource to be used by a studio's users and workflows. A typical studio contains studio components for each of the following: render farm, Active Directory, licensing, and file system.</p> <p>Access to a studio component is managed by specifying security groups for the resource, as well as its endpoint.</p> <p>A studio component also has a set of initialization scripts that are returned by <code>GetLaunchProfileInitialization</code>. These initialization scripts run on streaming sessions when they start. They provide users with flexibility in controlling how the studio resources are configured on a streaming session.</p>
 */
export class StudioComponent extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "arn" })
  arn?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "configuration" })
  @Type(() => StudioComponentConfiguration)
  configuration?: StudioComponentConfiguration;

  @SpeakeasyMetadata()
  @Expose({ name: "createdAt" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  createdAt?: Date;

  @SpeakeasyMetadata()
  @Expose({ name: "createdBy" })
  createdBy?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "description" })
  description?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "ec2SecurityGroupIds" })
  ec2SecurityGroupIds?: string[];

  @SpeakeasyMetadata({ elemType: StudioComponentInitializationScript })
  @Expose({ name: "initializationScripts" })
  @Type(() => StudioComponentInitializationScript)
  initializationScripts?: StudioComponentInitializationScript[];

  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "runtimeRoleArn" })
  runtimeRoleArn?: string;

  @SpeakeasyMetadata({ elemType: ScriptParameterKeyValue })
  @Expose({ name: "scriptParameters" })
  @Type(() => ScriptParameterKeyValue)
  scriptParameters?: ScriptParameterKeyValue[];

  @SpeakeasyMetadata()
  @Expose({ name: "secureInitializationRoleArn" })
  secureInitializationRoleArn?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "state" })
  state?: StudioComponentStateEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "statusCode" })
  statusCode?: StudioComponentStatusCodeEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "statusMessage" })
  statusMessage?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "studioComponentId" })
  studioComponentId?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "subtype" })
  subtype?: StudioComponentSubtypeEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "tags" })
  tags?: Record<string, string>;

  @SpeakeasyMetadata()
  @Expose({ name: "type" })
  type?: StudioComponentTypeEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "updatedAt" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  updatedAt?: Date;

  @SpeakeasyMetadata()
  @Expose({ name: "updatedBy" })
  updatedBy?: string;
}
