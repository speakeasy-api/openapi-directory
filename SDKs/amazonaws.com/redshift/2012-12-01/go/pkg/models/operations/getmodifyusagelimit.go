// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// GETModifyUsageLimitActionEnum
type GETModifyUsageLimitActionEnum string

const (
	GETModifyUsageLimitActionEnumModifyUsageLimit GETModifyUsageLimitActionEnum = "ModifyUsageLimit"
)

func (e *GETModifyUsageLimitActionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "ModifyUsageLimit":
		*e = GETModifyUsageLimitActionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GETModifyUsageLimitActionEnum: %s", s)
	}
}

// GETModifyUsageLimitBreachActionEnum - The new action that Amazon Redshift takes when the limit is reached. For more information about this parameter, see <a>UsageLimit</a>.
type GETModifyUsageLimitBreachActionEnum string

const (
	GETModifyUsageLimitBreachActionEnumLog        GETModifyUsageLimitBreachActionEnum = "log"
	GETModifyUsageLimitBreachActionEnumEmitMetric GETModifyUsageLimitBreachActionEnum = "emit-metric"
	GETModifyUsageLimitBreachActionEnumDisable    GETModifyUsageLimitBreachActionEnum = "disable"
)

func (e *GETModifyUsageLimitBreachActionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "log":
		fallthrough
	case "emit-metric":
		fallthrough
	case "disable":
		*e = GETModifyUsageLimitBreachActionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GETModifyUsageLimitBreachActionEnum: %s", s)
	}
}

// GETModifyUsageLimitVersionEnum
type GETModifyUsageLimitVersionEnum string

const (
	GETModifyUsageLimitVersionEnumTwoThousandAndTwelve1201 GETModifyUsageLimitVersionEnum = "2012-12-01"
)

func (e *GETModifyUsageLimitVersionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "2012-12-01":
		*e = GETModifyUsageLimitVersionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GETModifyUsageLimitVersionEnum: %s", s)
	}
}

type GETModifyUsageLimitRequest struct {
	Action GETModifyUsageLimitActionEnum `queryParam:"style=form,explode=true,name=Action"`
	// The new limit amount. For more information about this parameter, see <a>UsageLimit</a>.
	Amount *int64 `queryParam:"style=form,explode=true,name=Amount"`
	// The new action that Amazon Redshift takes when the limit is reached. For more information about this parameter, see <a>UsageLimit</a>.
	BreachAction *GETModifyUsageLimitBreachActionEnum `queryParam:"style=form,explode=true,name=BreachAction"`
	// The identifier of the usage limit to modify.
	UsageLimitID      string                         `queryParam:"style=form,explode=true,name=UsageLimitId"`
	Version           GETModifyUsageLimitVersionEnum `queryParam:"style=form,explode=true,name=Version"`
	XAmzAlgorithm     *string                        `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string                        `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string                        `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string                        `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string                        `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string                        `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string                        `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
}

type GETModifyUsageLimitResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
