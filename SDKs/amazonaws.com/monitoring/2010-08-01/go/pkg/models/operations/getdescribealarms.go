// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// GETDescribeAlarmsActionEnum
type GETDescribeAlarmsActionEnum string

const (
	GETDescribeAlarmsActionEnumDescribeAlarms GETDescribeAlarmsActionEnum = "DescribeAlarms"
)

func (e *GETDescribeAlarmsActionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "DescribeAlarms":
		*e = GETDescribeAlarmsActionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GETDescribeAlarmsActionEnum: %s", s)
	}
}

// GETDescribeAlarmsStateValueEnum - Specify this parameter to receive information only about alarms that are currently in the state that you specify.
type GETDescribeAlarmsStateValueEnum string

const (
	GETDescribeAlarmsStateValueEnumOk               GETDescribeAlarmsStateValueEnum = "OK"
	GETDescribeAlarmsStateValueEnumAlarm            GETDescribeAlarmsStateValueEnum = "ALARM"
	GETDescribeAlarmsStateValueEnumInsufficientData GETDescribeAlarmsStateValueEnum = "INSUFFICIENT_DATA"
)

func (e *GETDescribeAlarmsStateValueEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "OK":
		fallthrough
	case "ALARM":
		fallthrough
	case "INSUFFICIENT_DATA":
		*e = GETDescribeAlarmsStateValueEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GETDescribeAlarmsStateValueEnum: %s", s)
	}
}

// GETDescribeAlarmsVersionEnum
type GETDescribeAlarmsVersionEnum string

const (
	GETDescribeAlarmsVersionEnumTwoThousandAndTen0801 GETDescribeAlarmsVersionEnum = "2010-08-01"
)

func (e *GETDescribeAlarmsVersionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "2010-08-01":
		*e = GETDescribeAlarmsVersionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GETDescribeAlarmsVersionEnum: %s", s)
	}
}

type GETDescribeAlarmsRequest struct {
	Action GETDescribeAlarmsActionEnum `queryParam:"style=form,explode=true,name=Action"`
	// Use this parameter to filter the results of the operation to only those alarms that use a certain alarm action. For example, you could specify the ARN of an SNS topic to find all alarms that send notifications to that topic.
	ActionPrefix *string `queryParam:"style=form,explode=true,name=ActionPrefix"`
	// <p>An alarm name prefix. If you specify this parameter, you receive information about all alarms that have names that start with this prefix.</p> <p>If this parameter is specified, you cannot specify <code>AlarmNames</code>.</p>
	AlarmNamePrefix *string `queryParam:"style=form,explode=true,name=AlarmNamePrefix"`
	// The names of the alarms to retrieve information about.
	AlarmNames []string `queryParam:"style=form,explode=true,name=AlarmNames"`
	// Use this parameter to specify whether you want the operation to return metric alarms or composite alarms. If you omit this parameter, only metric alarms are returned.
	AlarmTypes []shared.AlarmTypeEnum `queryParam:"style=form,explode=true,name=AlarmTypes"`
	// <p>If you use this parameter and specify the name of a composite alarm, the operation returns information about the "children" alarms of the alarm you specify. These are the metric alarms and composite alarms referenced in the <code>AlarmRule</code> field of the composite alarm that you specify in <code>ChildrenOfAlarmName</code>. Information about the composite alarm that you name in <code>ChildrenOfAlarmName</code> is not returned.</p> <p>If you specify <code>ChildrenOfAlarmName</code>, you cannot specify any other parameters in the request except for <code>MaxRecords</code> and <code>NextToken</code>. If you do so, you receive a validation error.</p> <note> <p>Only the <code>Alarm Name</code>, <code>ARN</code>, <code>StateValue</code> (OK/ALARM/INSUFFICIENT_DATA), and <code>StateUpdatedTimestamp</code> information are returned by this operation when you use this parameter. To get complete information about these alarms, perform another <code>DescribeAlarms</code> operation and specify the parent alarm names in the <code>AlarmNames</code> parameter.</p> </note>
	ChildrenOfAlarmName *string `queryParam:"style=form,explode=true,name=ChildrenOfAlarmName"`
	// The maximum number of alarm descriptions to retrieve.
	MaxRecords *int64 `queryParam:"style=form,explode=true,name=MaxRecords"`
	// The token returned by a previous call to indicate that there is more data available.
	NextToken *string `queryParam:"style=form,explode=true,name=NextToken"`
	// <p>If you use this parameter and specify the name of a metric or composite alarm, the operation returns information about the "parent" alarms of the alarm you specify. These are the composite alarms that have <code>AlarmRule</code> parameters that reference the alarm named in <code>ParentsOfAlarmName</code>. Information about the alarm that you specify in <code>ParentsOfAlarmName</code> is not returned.</p> <p>If you specify <code>ParentsOfAlarmName</code>, you cannot specify any other parameters in the request except for <code>MaxRecords</code> and <code>NextToken</code>. If you do so, you receive a validation error.</p> <note> <p>Only the Alarm Name and ARN are returned by this operation when you use this parameter. To get complete information about these alarms, perform another <code>DescribeAlarms</code> operation and specify the parent alarm names in the <code>AlarmNames</code> parameter.</p> </note>
	ParentsOfAlarmName *string `queryParam:"style=form,explode=true,name=ParentsOfAlarmName"`
	// Specify this parameter to receive information only about alarms that are currently in the state that you specify.
	StateValue        *GETDescribeAlarmsStateValueEnum `queryParam:"style=form,explode=true,name=StateValue"`
	Version           GETDescribeAlarmsVersionEnum     `queryParam:"style=form,explode=true,name=Version"`
	XAmzAlgorithm     *string                          `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string                          `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string                          `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string                          `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string                          `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string                          `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string                          `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
}

type GETDescribeAlarmsResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
