/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

/**
 * Endpoints for listing events.
 */
export class Events {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Get events
   *
   * @remarks
   * Endpoint to list events.
   */
  getEvents(
    config?: AxiosRequestConfig
  ): Promise<operations.GetEventsResponse> {
    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/events";

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetEventsResponse =
        new operations.GetEventsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
          headers: utils.getHeadersFromResponse(httpRes.headers),
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getEvents200ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.GetEvents200ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getEvents400ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.GetEvents400ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getEvents401ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.GetEvents401ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 403:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getEvents403ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.GetEvents403ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 429:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getEvents429ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.GetEvents429ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 500:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getEvents500ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.GetEvents500ApplicationJSON
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Track event
   *
   * @remarks
   * Endpoint used to track an event for a user or an account.
   *
   * This endpoint is moved to [Track](#operation/trackEvent).
   */
  trackJourneyEvent(
    req: operations.TrackJourneyEventRequestBody,
    config?: AxiosRequestConfig
  ): Promise<operations.TrackJourneyEventResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.TrackJourneyEventRequestBody(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/events";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.TrackJourneyEventResponse =
        new operations.TrackJourneyEventResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
          headers: utils.getHeadersFromResponse(httpRes.headers),
        });
      switch (true) {
        case httpRes?.status == 201:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.trackJourneyEvent201ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.TrackJourneyEvent201ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.trackJourneyEvent400ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.TrackJourneyEvent400ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.trackJourneyEvent401ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.TrackJourneyEvent401ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 403:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.trackJourneyEvent403ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.TrackJourneyEvent403ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 429:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.trackJourneyEvent429ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.TrackJourneyEvent429ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 500:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.trackJourneyEvent500ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.TrackJourneyEvent500ApplicationJSON
            );
          }
          break;
      }

      return res;
    });
  }
}
