/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * EventRetrieved - Retrieve Events Response Payload Object Item
 */
public class EventRetrieved {
    /**
     * Event Body
     */
    @JsonProperty("body")
    public java.util.Map<String, Object> body;
    public EventRetrieved withBody(java.util.Map<String, Object> body) {
        this.body = body;
        return this;
    }
    
    /**
     * Member ID
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("from")
    public String from;
    public EventRetrieved withFrom(String from) {
        this.from = from;
        return this;
    }
    
    /**
     * A link towards a conversation event included in Conversation API
     */
    @JsonProperty("href")
    public String href;
    public EventRetrieved withHref(String href) {
        this.href = href;
        return this;
    }
    
    /**
     * Event id. This is a progressive integer
     */
    @JsonProperty("id")
    public String id;
    public EventRetrieved withId(String id) {
        this.id = id;
        return this;
    }
    
    /**
     * The state that the member is in. Possible values are `invited`, `joined`, `left`, or `unknown`
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("state")
    public MemberStateEnum state;
    public EventRetrieved withState(MemberStateEnum state) {
        this.state = state;
        return this;
    }
    
    /**
     * Time of creation
     */
    @JsonProperty("timestamp")
    public String timestamp;
    public EventRetrieved withTimestamp(String timestamp) {
        this.timestamp = timestamp;
        return this;
    }
    
    /**
     * Member ID
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("to")
    public String to;
    public EventRetrieved withTo(String to) {
        this.to = to;
        return this;
    }
    
    /**
     * Event type
     */
    @JsonProperty("type")
    public String type;
    public EventRetrieved withType(String type) {
        this.type = type;
        return this;
    }
    
}
