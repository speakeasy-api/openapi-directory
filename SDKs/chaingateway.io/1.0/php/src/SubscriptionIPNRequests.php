<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class SubscriptionIPNRequests 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * listFailedIPNs
     * 
     * Returns all subscriptions/IPNs created with an account.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListFailedIPNsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ListFailedIPNsResponse
     */
	public function listFailedIPNs(
        \OpenAPI\OpenAPI\Models\Operations\ListFailedIPNsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ListFailedIPNsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/listFailedIPNs');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListFailedIPNsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listFailedIPNs = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListFailedIPNs', 'json');
            }
        }

        return $response;
    }
	
    /**
     * listSubscribedAddresses
     * 
     * Returns all subscriptions/IPNs created with an account.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListSubscribedAddressesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ListSubscribedAddressesResponse
     */
	public function listSubscribedAddresses(
        \OpenAPI\OpenAPI\Models\Operations\ListSubscribedAddressesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ListSubscribedAddressesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/listSubscribedAddresses');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListSubscribedAddressesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listSubscribedAddresses = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListSubscribedAddresses', 'json');
            }
        }

        return $response;
    }
	
    /**
     * resendFailedIPN
     * 
     * Returns all subscriptions/IPNs created with an account.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ResendFailedIPNRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ResendFailedIPNResponse
     */
	public function resendFailedIPN(
        \OpenAPI\OpenAPI\Models\Operations\ResendFailedIPNRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ResendFailedIPNResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/resendFailedIPN');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "resendFailedIPNRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ResendFailedIPNResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->resendFailedIPN = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ResendFailedIPN', 'json');
            }
        }

        return $response;
    }
	
    /**
     * subscribeAddress
     * 
     * Creates a new subscription/IPN for the given address (and contractaddress). You will receive a notification to the given url every time a deposit is received. Unsubscribe the address before sending tokens/ETH from it or you won't get reliable notifications anymore.
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\SubscribeAddressRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\SubscribeAddressResponse
     */
	public function subscribeAddress(
        \OpenAPI\OpenAPI\Models\Operations\SubscribeAddressRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\SubscribeAddressResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/subscribeAddress');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "subscribeAddressRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\SubscribeAddressResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->subscribeAddress = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\SubscribeAddress', 'json');
            }
        }

        return $response;
    }
	
    /**
     * unsubscribeAddress
     * 
     * Deletes an existing subscription/IPN for the given address (and contractaddress).
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UnsubscribeAddressRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UnsubscribeAddressResponse
     */
	public function unsubscribeAddress(
        \OpenAPI\OpenAPI\Models\Operations\UnsubscribeAddressRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UnsubscribeAddressResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/unsubscribeAddress');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "unsubscribeAddressRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UnsubscribeAddressResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->unsubscribeAddress = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\UnsubscribeAddress', 'json');
            }
        }

        return $response;
    }
}