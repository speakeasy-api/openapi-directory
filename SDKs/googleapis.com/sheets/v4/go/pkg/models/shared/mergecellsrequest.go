// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// MergeCellsRequestMergeTypeEnum - How the cells should be merged.
type MergeCellsRequestMergeTypeEnum string

const (
	MergeCellsRequestMergeTypeEnumMergeAll     MergeCellsRequestMergeTypeEnum = "MERGE_ALL"
	MergeCellsRequestMergeTypeEnumMergeColumns MergeCellsRequestMergeTypeEnum = "MERGE_COLUMNS"
	MergeCellsRequestMergeTypeEnumMergeRows    MergeCellsRequestMergeTypeEnum = "MERGE_ROWS"
)

func (e MergeCellsRequestMergeTypeEnum) ToPointer() *MergeCellsRequestMergeTypeEnum {
	return &e
}

func (e *MergeCellsRequestMergeTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "MERGE_ALL":
		fallthrough
	case "MERGE_COLUMNS":
		fallthrough
	case "MERGE_ROWS":
		*e = MergeCellsRequestMergeTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for MergeCellsRequestMergeTypeEnum: %v", v)
	}
}

// MergeCellsRequest - Merges all cells in the range.
type MergeCellsRequest struct {
	// How the cells should be merged.
	MergeType *MergeCellsRequestMergeTypeEnum `json:"mergeType,omitempty"`
	// A range on a sheet. All indexes are zero-based. Indexes are half open, i.e. the start index is inclusive and the end index is exclusive -- [start_index, end_index). Missing indexes indicate the range is unbounded on that side. For example, if `"Sheet1"` is sheet ID 123456, then: `Sheet1!A1:A1 == sheet_id: 123456, start_row_index: 0, end_row_index: 1, start_column_index: 0, end_column_index: 1` `Sheet1!A3:B4 == sheet_id: 123456, start_row_index: 2, end_row_index: 4, start_column_index: 0, end_column_index: 2` `Sheet1!A:B == sheet_id: 123456, start_column_index: 0, end_column_index: 2` `Sheet1!A5:B == sheet_id: 123456, start_row_index: 4, start_column_index: 0, end_column_index: 2` `Sheet1 == sheet_id: 123456` The start index must always be less than or equal to the end index. If the start index equals the end index, then the range is empty. Empty ranges are typically not meaningful and are usually rendered in the UI as `#REF!`.
	Range *GridRange `json:"range,omitempty"`
}
