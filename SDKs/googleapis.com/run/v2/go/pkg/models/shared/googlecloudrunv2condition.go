// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// GoogleCloudRunV2ConditionExecutionReasonEnum - A reason for the execution condition.
type GoogleCloudRunV2ConditionExecutionReasonEnum string

const (
	GoogleCloudRunV2ConditionExecutionReasonEnumExecutionReasonUndefined     GoogleCloudRunV2ConditionExecutionReasonEnum = "EXECUTION_REASON_UNDEFINED"
	GoogleCloudRunV2ConditionExecutionReasonEnumJobStatusServicePollingError GoogleCloudRunV2ConditionExecutionReasonEnum = "JOB_STATUS_SERVICE_POLLING_ERROR"
	GoogleCloudRunV2ConditionExecutionReasonEnumNonZeroExitCode              GoogleCloudRunV2ConditionExecutionReasonEnum = "NON_ZERO_EXIT_CODE"
	GoogleCloudRunV2ConditionExecutionReasonEnumCancelled                    GoogleCloudRunV2ConditionExecutionReasonEnum = "CANCELLED"
)

func (e *GoogleCloudRunV2ConditionExecutionReasonEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "EXECUTION_REASON_UNDEFINED":
		fallthrough
	case "JOB_STATUS_SERVICE_POLLING_ERROR":
		fallthrough
	case "NON_ZERO_EXIT_CODE":
		fallthrough
	case "CANCELLED":
		*e = GoogleCloudRunV2ConditionExecutionReasonEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GoogleCloudRunV2ConditionExecutionReasonEnum: %s", s)
	}
}

// GoogleCloudRunV2ConditionReasonEnum - A common (service-level) reason for this condition.
type GoogleCloudRunV2ConditionReasonEnum string

const (
	GoogleCloudRunV2ConditionReasonEnumCommonReasonUndefined                  GoogleCloudRunV2ConditionReasonEnum = "COMMON_REASON_UNDEFINED"
	GoogleCloudRunV2ConditionReasonEnumUnknown                                GoogleCloudRunV2ConditionReasonEnum = "UNKNOWN"
	GoogleCloudRunV2ConditionReasonEnumRevisionFailed                         GoogleCloudRunV2ConditionReasonEnum = "REVISION_FAILED"
	GoogleCloudRunV2ConditionReasonEnumProgressDeadlineExceeded               GoogleCloudRunV2ConditionReasonEnum = "PROGRESS_DEADLINE_EXCEEDED"
	GoogleCloudRunV2ConditionReasonEnumContainerMissing                       GoogleCloudRunV2ConditionReasonEnum = "CONTAINER_MISSING"
	GoogleCloudRunV2ConditionReasonEnumContainerPermissionDenied              GoogleCloudRunV2ConditionReasonEnum = "CONTAINER_PERMISSION_DENIED"
	GoogleCloudRunV2ConditionReasonEnumContainerImageUnauthorized             GoogleCloudRunV2ConditionReasonEnum = "CONTAINER_IMAGE_UNAUTHORIZED"
	GoogleCloudRunV2ConditionReasonEnumContainerImageAuthorizationCheckFailed GoogleCloudRunV2ConditionReasonEnum = "CONTAINER_IMAGE_AUTHORIZATION_CHECK_FAILED"
	GoogleCloudRunV2ConditionReasonEnumEncryptionKeyPermissionDenied          GoogleCloudRunV2ConditionReasonEnum = "ENCRYPTION_KEY_PERMISSION_DENIED"
	GoogleCloudRunV2ConditionReasonEnumEncryptionKeyCheckFailed               GoogleCloudRunV2ConditionReasonEnum = "ENCRYPTION_KEY_CHECK_FAILED"
	GoogleCloudRunV2ConditionReasonEnumSecretsAccessCheckFailed               GoogleCloudRunV2ConditionReasonEnum = "SECRETS_ACCESS_CHECK_FAILED"
	GoogleCloudRunV2ConditionReasonEnumWaitingForOperation                    GoogleCloudRunV2ConditionReasonEnum = "WAITING_FOR_OPERATION"
	GoogleCloudRunV2ConditionReasonEnumImmediateRetry                         GoogleCloudRunV2ConditionReasonEnum = "IMMEDIATE_RETRY"
	GoogleCloudRunV2ConditionReasonEnumPostponedRetry                         GoogleCloudRunV2ConditionReasonEnum = "POSTPONED_RETRY"
	GoogleCloudRunV2ConditionReasonEnumInternal                               GoogleCloudRunV2ConditionReasonEnum = "INTERNAL"
)

func (e *GoogleCloudRunV2ConditionReasonEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "COMMON_REASON_UNDEFINED":
		fallthrough
	case "UNKNOWN":
		fallthrough
	case "REVISION_FAILED":
		fallthrough
	case "PROGRESS_DEADLINE_EXCEEDED":
		fallthrough
	case "CONTAINER_MISSING":
		fallthrough
	case "CONTAINER_PERMISSION_DENIED":
		fallthrough
	case "CONTAINER_IMAGE_UNAUTHORIZED":
		fallthrough
	case "CONTAINER_IMAGE_AUTHORIZATION_CHECK_FAILED":
		fallthrough
	case "ENCRYPTION_KEY_PERMISSION_DENIED":
		fallthrough
	case "ENCRYPTION_KEY_CHECK_FAILED":
		fallthrough
	case "SECRETS_ACCESS_CHECK_FAILED":
		fallthrough
	case "WAITING_FOR_OPERATION":
		fallthrough
	case "IMMEDIATE_RETRY":
		fallthrough
	case "POSTPONED_RETRY":
		fallthrough
	case "INTERNAL":
		*e = GoogleCloudRunV2ConditionReasonEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GoogleCloudRunV2ConditionReasonEnum: %s", s)
	}
}

// GoogleCloudRunV2ConditionRevisionReasonEnum - A reason for the revision condition.
type GoogleCloudRunV2ConditionRevisionReasonEnum string

const (
	GoogleCloudRunV2ConditionRevisionReasonEnumRevisionReasonUndefined       GoogleCloudRunV2ConditionRevisionReasonEnum = "REVISION_REASON_UNDEFINED"
	GoogleCloudRunV2ConditionRevisionReasonEnumPending                       GoogleCloudRunV2ConditionRevisionReasonEnum = "PENDING"
	GoogleCloudRunV2ConditionRevisionReasonEnumReserve                       GoogleCloudRunV2ConditionRevisionReasonEnum = "RESERVE"
	GoogleCloudRunV2ConditionRevisionReasonEnumRetired                       GoogleCloudRunV2ConditionRevisionReasonEnum = "RETIRED"
	GoogleCloudRunV2ConditionRevisionReasonEnumRetiring                      GoogleCloudRunV2ConditionRevisionReasonEnum = "RETIRING"
	GoogleCloudRunV2ConditionRevisionReasonEnumRecreating                    GoogleCloudRunV2ConditionRevisionReasonEnum = "RECREATING"
	GoogleCloudRunV2ConditionRevisionReasonEnumHealthCheckContainerError     GoogleCloudRunV2ConditionRevisionReasonEnum = "HEALTH_CHECK_CONTAINER_ERROR"
	GoogleCloudRunV2ConditionRevisionReasonEnumCustomizedPathResponsePending GoogleCloudRunV2ConditionRevisionReasonEnum = "CUSTOMIZED_PATH_RESPONSE_PENDING"
	GoogleCloudRunV2ConditionRevisionReasonEnumMinInstancesNotProvisioned    GoogleCloudRunV2ConditionRevisionReasonEnum = "MIN_INSTANCES_NOT_PROVISIONED"
	GoogleCloudRunV2ConditionRevisionReasonEnumActiveRevisionLimitReached    GoogleCloudRunV2ConditionRevisionReasonEnum = "ACTIVE_REVISION_LIMIT_REACHED"
	GoogleCloudRunV2ConditionRevisionReasonEnumNoDeployment                  GoogleCloudRunV2ConditionRevisionReasonEnum = "NO_DEPLOYMENT"
	GoogleCloudRunV2ConditionRevisionReasonEnumHealthCheckSkipped            GoogleCloudRunV2ConditionRevisionReasonEnum = "HEALTH_CHECK_SKIPPED"
	GoogleCloudRunV2ConditionRevisionReasonEnumMinInstancesWarming           GoogleCloudRunV2ConditionRevisionReasonEnum = "MIN_INSTANCES_WARMING"
)

func (e *GoogleCloudRunV2ConditionRevisionReasonEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "REVISION_REASON_UNDEFINED":
		fallthrough
	case "PENDING":
		fallthrough
	case "RESERVE":
		fallthrough
	case "RETIRED":
		fallthrough
	case "RETIRING":
		fallthrough
	case "RECREATING":
		fallthrough
	case "HEALTH_CHECK_CONTAINER_ERROR":
		fallthrough
	case "CUSTOMIZED_PATH_RESPONSE_PENDING":
		fallthrough
	case "MIN_INSTANCES_NOT_PROVISIONED":
		fallthrough
	case "ACTIVE_REVISION_LIMIT_REACHED":
		fallthrough
	case "NO_DEPLOYMENT":
		fallthrough
	case "HEALTH_CHECK_SKIPPED":
		fallthrough
	case "MIN_INSTANCES_WARMING":
		*e = GoogleCloudRunV2ConditionRevisionReasonEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GoogleCloudRunV2ConditionRevisionReasonEnum: %s", s)
	}
}

// GoogleCloudRunV2ConditionSeverityEnum - How to interpret failures of this condition, one of Error, Warning, Info
type GoogleCloudRunV2ConditionSeverityEnum string

const (
	GoogleCloudRunV2ConditionSeverityEnumSeverityUnspecified GoogleCloudRunV2ConditionSeverityEnum = "SEVERITY_UNSPECIFIED"
	GoogleCloudRunV2ConditionSeverityEnumError               GoogleCloudRunV2ConditionSeverityEnum = "ERROR"
	GoogleCloudRunV2ConditionSeverityEnumWarning             GoogleCloudRunV2ConditionSeverityEnum = "WARNING"
	GoogleCloudRunV2ConditionSeverityEnumInfo                GoogleCloudRunV2ConditionSeverityEnum = "INFO"
)

func (e *GoogleCloudRunV2ConditionSeverityEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "SEVERITY_UNSPECIFIED":
		fallthrough
	case "ERROR":
		fallthrough
	case "WARNING":
		fallthrough
	case "INFO":
		*e = GoogleCloudRunV2ConditionSeverityEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GoogleCloudRunV2ConditionSeverityEnum: %s", s)
	}
}

// GoogleCloudRunV2ConditionStateEnum - State of the condition.
type GoogleCloudRunV2ConditionStateEnum string

const (
	GoogleCloudRunV2ConditionStateEnumStateUnspecified     GoogleCloudRunV2ConditionStateEnum = "STATE_UNSPECIFIED"
	GoogleCloudRunV2ConditionStateEnumConditionPending     GoogleCloudRunV2ConditionStateEnum = "CONDITION_PENDING"
	GoogleCloudRunV2ConditionStateEnumConditionReconciling GoogleCloudRunV2ConditionStateEnum = "CONDITION_RECONCILING"
	GoogleCloudRunV2ConditionStateEnumConditionFailed      GoogleCloudRunV2ConditionStateEnum = "CONDITION_FAILED"
	GoogleCloudRunV2ConditionStateEnumConditionSucceeded   GoogleCloudRunV2ConditionStateEnum = "CONDITION_SUCCEEDED"
)

func (e *GoogleCloudRunV2ConditionStateEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "STATE_UNSPECIFIED":
		fallthrough
	case "CONDITION_PENDING":
		fallthrough
	case "CONDITION_RECONCILING":
		fallthrough
	case "CONDITION_FAILED":
		fallthrough
	case "CONDITION_SUCCEEDED":
		*e = GoogleCloudRunV2ConditionStateEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GoogleCloudRunV2ConditionStateEnum: %s", s)
	}
}

// GoogleCloudRunV2Condition - Defines a status condition for a resource.
type GoogleCloudRunV2Condition struct {
	// A reason for the execution condition.
	ExecutionReason *GoogleCloudRunV2ConditionExecutionReasonEnum `json:"executionReason,omitempty"`
	// Last time the condition transitioned from one status to another.
	LastTransitionTime *string `json:"lastTransitionTime,omitempty"`
	// Human readable message indicating details about the current status.
	Message *string `json:"message,omitempty"`
	// A common (service-level) reason for this condition.
	Reason *GoogleCloudRunV2ConditionReasonEnum `json:"reason,omitempty"`
	// A reason for the revision condition.
	RevisionReason *GoogleCloudRunV2ConditionRevisionReasonEnum `json:"revisionReason,omitempty"`
	// How to interpret failures of this condition, one of Error, Warning, Info
	Severity *GoogleCloudRunV2ConditionSeverityEnum `json:"severity,omitempty"`
	// State of the condition.
	State *GoogleCloudRunV2ConditionStateEnum `json:"state,omitempty"`
	// type is used to communicate the status of the reconciliation process. See also: https://github.com/knative/serving/blob/main/docs/spec/errors.md#error-conditions-and-reporting Types common to all resources include: * "Ready": True when the Resource is ready.
	Type *string `json:"type,omitempty"`
}
