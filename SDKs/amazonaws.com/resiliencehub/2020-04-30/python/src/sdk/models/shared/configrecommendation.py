"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import configrecommendationoptimizationtype_enum as shared_configrecommendationoptimizationtype_enum
from ..shared import cost as shared_cost
from ..shared import disruptioncompliance as shared_disruptioncompliance
from ..shared import haarchitecture_enum as shared_haarchitecture_enum
from ..shared import recommendationdisruptioncompliance as shared_recommendationdisruptioncompliance
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ConfigRecommendation:
    r"""Defines a configuration recommendation."""
    
    name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name') }})  
    optimization_type: shared_configrecommendationoptimizationtype_enum.ConfigRecommendationOptimizationTypeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('optimizationType') }})  
    reference_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('referenceId') }})  
    app_component_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('appComponentName'), 'exclude': lambda f: f is None }})  
    compliance: Optional[dict[str, shared_disruptioncompliance.DisruptionCompliance]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('compliance'), 'exclude': lambda f: f is None }})  
    cost: Optional[shared_cost.Cost] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cost'), 'exclude': lambda f: f is None }})  
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description'), 'exclude': lambda f: f is None }})  
    ha_architecture: Optional[shared_haarchitecture_enum.HaArchitectureEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('haArchitecture'), 'exclude': lambda f: f is None }})  
    recommendation_compliance: Optional[dict[str, shared_recommendationdisruptioncompliance.RecommendationDisruptionCompliance]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('recommendationCompliance'), 'exclude': lambda f: f is None }})  
    suggested_changes: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('suggestedChanges'), 'exclude': lambda f: f is None }})  
    