/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { AxiosResponse } from "axios";
import { Expose } from "class-transformer";

export class EditReviewRequestBody extends SpeakeasyBase {
  /**
   * Review's locale.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "locale" })
  locale?: string;

  /**
   * Product ID.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "productId" })
  productId: string;

  /**
   * Customer rating.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "rating" })
  rating: number;

  /**
   * Reviewer name.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "reviewerName" })
  reviewerName: string;

  /**
   * Shopper email.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "shopperId" })
  shopperId?: string;

  /**
   * Review's text.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "text" })
  text: string;

  /**
   * Review's title.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "title" })
  title: string;

  /**
   * If the reviewer is a verified purchaser (`true`) or not (`false`).
   */
  @SpeakeasyMetadata()
  @Expose({ name: "verifiedPurchaser" })
  verifiedPurchaser?: boolean;
}

export class EditReviewRequest extends SpeakeasyBase {
  /**
   * HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand.
   */
  @SpeakeasyMetadata({ data: "header, style=simple;explode=false;name=Accept" })
  accept: string;

  /**
   * Describes the type of the content being sent.
   */
  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=Content-Type",
  })
  contentType: string;

  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  requestBody: EditReviewRequestBody;

  /**
   * Review ID.
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=reviewId",
  })
  reviewId: string;
}

/**
 * OK
 */
export class EditReview200ApplicationJSON extends SpeakeasyBase {
  /**
   * If the review was approved (`true`) or not (`false`).
   */
  @SpeakeasyMetadata()
  @Expose({ name: "approved" })
  approved?: boolean;

  /**
   * Review ID.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id?: string;

  /**
   * Review's locale.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "locale" })
  locale?: string;

  /**
   * Review's origin location.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "location" })
  location?: string;

  /**
   * Past reviews of the same product.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "pastReviews" })
  pastReviews?: string;

  /**
   * Product ID.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "productId" })
  productId?: string;

  /**
   * Customer rating.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "rating" })
  rating?: number;

  /**
   * Review's date and time.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "reviewDateTime" })
  reviewDateTime?: string;

  /**
   * Reviewer name.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "reviewerName" })
  reviewerName?: string;

  /**
   * Review's search date.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "searchDate" })
  searchDate?: string;

  /**
   * Shopper email.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "shopperId" })
  shopperId?: string;

  /**
   * SKU ID.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "sku" })
  sku?: string;

  /**
   * Review's text.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "text" })
  text?: string;

  /**
   * Review's title.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "title" })
  title?: string;

  /**
   * If the reviewer is a verified purchaser (`true`) or not (`false`).
   */
  @SpeakeasyMetadata()
  @Expose({ name: "verifiedPurchaser" })
  verifiedPurchaser?: boolean;
}

export class EditReviewResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  /**
   * OK
   */
  @SpeakeasyMetadata()
  editReview200ApplicationJSONObject?: EditReview200ApplicationJSON;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;
}
