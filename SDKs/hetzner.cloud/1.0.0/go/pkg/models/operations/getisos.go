// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

type GetIsosRequest struct {
	// Return only ISOs with the given architecture.
	Architecture *string `queryParam:"style=form,explode=true,name=architecture"`
	// Include Images with wildcard architecture (architecture is null). Works only if architecture filter is specified.
	IncludeArchitectureWildcard *bool `queryParam:"style=form,explode=true,name=include_architecture_wildcard"`
	// Can be used to filter ISOs by their name. The response will only contain the ISO matching the specified name.
	Name *string `queryParam:"style=form,explode=true,name=name"`
}

// GetIsos200ApplicationJSONIsosArchitectureEnum - Type of cpu architecture this iso is compatible with. Null indicates no restriction on the architecture (wildcard).
type GetIsos200ApplicationJSONIsosArchitectureEnum string

const (
	GetIsos200ApplicationJSONIsosArchitectureEnumX86 GetIsos200ApplicationJSONIsosArchitectureEnum = "x86"
	GetIsos200ApplicationJSONIsosArchitectureEnumArm GetIsos200ApplicationJSONIsosArchitectureEnum = "arm"
)

func (e GetIsos200ApplicationJSONIsosArchitectureEnum) ToPointer() *GetIsos200ApplicationJSONIsosArchitectureEnum {
	return &e
}

func (e *GetIsos200ApplicationJSONIsosArchitectureEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "x86":
		fallthrough
	case "arm":
		*e = GetIsos200ApplicationJSONIsosArchitectureEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetIsos200ApplicationJSONIsosArchitectureEnum: %v", v)
	}
}

// GetIsos200ApplicationJSONIsosTypeEnum - Type of the ISO
type GetIsos200ApplicationJSONIsosTypeEnum string

const (
	GetIsos200ApplicationJSONIsosTypeEnumPublic  GetIsos200ApplicationJSONIsosTypeEnum = "public"
	GetIsos200ApplicationJSONIsosTypeEnumPrivate GetIsos200ApplicationJSONIsosTypeEnum = "private"
)

func (e GetIsos200ApplicationJSONIsosTypeEnum) ToPointer() *GetIsos200ApplicationJSONIsosTypeEnum {
	return &e
}

func (e *GetIsos200ApplicationJSONIsosTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "public":
		fallthrough
	case "private":
		*e = GetIsos200ApplicationJSONIsosTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetIsos200ApplicationJSONIsosTypeEnum: %v", v)
	}
}

type GetIsos200ApplicationJSONIsos struct {
	// Type of cpu architecture this iso is compatible with. Null indicates no restriction on the architecture (wildcard).
	Architecture GetIsos200ApplicationJSONIsosArchitectureEnum `json:"architecture"`
	// ISO 8601 timestamp of deprecation, null if ISO is still available. After the deprecation time it will no longer be possible to attach the ISO to Servers.
	Deprecated string `json:"deprecated"`
	// Description of the ISO
	Description string `json:"description"`
	// ID of the Resource
	ID int64 `json:"id"`
	// Unique identifier of the ISO. Only set for public ISOs
	Name string `json:"name"`
	// Type of the ISO
	Type GetIsos200ApplicationJSONIsosTypeEnum `json:"type"`
}

type GetIsos200ApplicationJSONMetaPagination struct {
	// ID of the last page available. Can be null if the current page is the last one.
	LastPage float64 `json:"last_page"`
	// ID of the next page. Can be null if the current page is the last one.
	NextPage float64 `json:"next_page"`
	// Current page number
	Page float64 `json:"page"`
	// Maximum number of items shown per page in the response
	PerPage float64 `json:"per_page"`
	// ID of the previous page. Can be null if the current page is the first one.
	PreviousPage float64 `json:"previous_page"`
	// The total number of entries that exist in the database for this query. Nullable if unknown.
	TotalEntries float64 `json:"total_entries"`
}

type GetIsos200ApplicationJSONMeta struct {
	Pagination GetIsos200ApplicationJSONMetaPagination `json:"pagination"`
}

// GetIsos200ApplicationJSON - The `isos` key in the reply contains an array of iso objects with this structure
type GetIsos200ApplicationJSON struct {
	Isos []GetIsos200ApplicationJSONIsos `json:"isos"`
	Meta *GetIsos200ApplicationJSONMeta  `json:"meta,omitempty"`
}

type GetIsosResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// The `isos` key in the reply contains an array of iso objects with this structure
	GetIsos200ApplicationJSONObject *GetIsos200ApplicationJSON
}
