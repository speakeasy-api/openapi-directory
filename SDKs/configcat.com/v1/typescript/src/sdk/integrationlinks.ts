/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class IntegrationLinks {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Add or update Integration link
   */
  addOrUpdateIntegrationLink(
    req: operations.AddOrUpdateIntegrationLinkRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.AddOrUpdateIntegrationLinkResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AddOrUpdateIntegrationLinkRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/environments/{environmentId}/settings/{settingId}/integrationLinks/{integrationLinkType}/{key}",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "addOrUpdateIntegrationLinkModel",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AddOrUpdateIntegrationLinkResponse =
        new operations.AddOrUpdateIntegrationLinkResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/hal+json`)) {
            res.integrationLinkModel = utils.objectToClass(
              httpRes?.data,
              shared.IntegrationLinkModel
            );
          }
          if (utils.matchContentType(contentType, `application/json`)) {
            res.integrationLinkModel = utils.objectToClass(
              httpRes?.data,
              shared.IntegrationLinkModel
            );
          }
          break;
        case [400, 401, 404, 429].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Delete Integration link
   */
  deleteIntegrationLink(
    req: operations.DeleteIntegrationLinkRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.DeleteIntegrationLinkResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DeleteIntegrationLinkRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/environments/{environmentId}/settings/{settingId}/integrationLinks/{integrationLinkType}/{key}",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DeleteIntegrationLinkResponse =
        new operations.DeleteIntegrationLinkResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/hal+json`)) {
            res.deleteIntegrationLinkModel = utils.objectToClass(
              httpRes?.data,
              shared.DeleteIntegrationLinkModel
            );
          }
          if (utils.matchContentType(contentType, `application/json`)) {
            res.deleteIntegrationLinkModel = utils.objectToClass(
              httpRes?.data,
              shared.DeleteIntegrationLinkModel
            );
          }
          break;
        case [400, 401, 404, 429].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Get Integration link
   */
  getIntegrationLinkDetails(
    req: operations.GetIntegrationLinkDetailsRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetIntegrationLinkDetailsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetIntegrationLinkDetailsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/integrationLink/{integrationLinkType}/{key}/details",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetIntegrationLinkDetailsResponse =
        new operations.GetIntegrationLinkDetailsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/hal+json`)) {
            res.integrationLinkDetailsModel = utils.objectToClass(
              httpRes?.data,
              shared.IntegrationLinkDetailsModel
            );
          }
          if (utils.matchContentType(contentType, `application/json`)) {
            res.integrationLinkDetailsModel = utils.objectToClass(
              httpRes?.data,
              shared.IntegrationLinkDetailsModel
            );
          }
          break;
        case [400, 401, 404, 429].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  jiraAddOrUpdateIntegrationLink(
    req: operations.JiraAddOrUpdateIntegrationLinkRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.JiraAddOrUpdateIntegrationLinkResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.JiraAddOrUpdateIntegrationLinkRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/jira/environments/{environmentId}/settings/{settingId}/integrationLinks/{key}",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "addOrUpdateJiraIntegrationLinkModel",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.JiraAddOrUpdateIntegrationLinkResponse =
        new operations.JiraAddOrUpdateIntegrationLinkResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/hal+json`)) {
            res.integrationLinkModel = utils.objectToClass(
              httpRes?.data,
              shared.IntegrationLinkModel
            );
          }
          if (utils.matchContentType(contentType, `application/json`)) {
            res.integrationLinkModel = utils.objectToClass(
              httpRes?.data,
              shared.IntegrationLinkModel
            );
          }
          break;
        case [400, 401, 404, 429].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  postV1JiraConnect(
    req: shared.ConnectRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.PostV1JiraConnectResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new shared.ConnectRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/v1/jira/Connect";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PostV1JiraConnectResponse =
        new operations.PostV1JiraConnectResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case [200, 401, 429].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }
}
