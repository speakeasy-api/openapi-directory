// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// GETModifySnapshotTierActionEnum
type GETModifySnapshotTierActionEnum string

const (
	GETModifySnapshotTierActionEnumModifySnapshotTier GETModifySnapshotTierActionEnum = "ModifySnapshotTier"
)

func (e GETModifySnapshotTierActionEnum) ToPointer() *GETModifySnapshotTierActionEnum {
	return &e
}

func (e *GETModifySnapshotTierActionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ModifySnapshotTier":
		*e = GETModifySnapshotTierActionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GETModifySnapshotTierActionEnum: %v", v)
	}
}

// GETModifySnapshotTierStorageTierEnum - The name of the storage tier. You must specify <code>archive</code>.
type GETModifySnapshotTierStorageTierEnum string

const (
	GETModifySnapshotTierStorageTierEnumArchive GETModifySnapshotTierStorageTierEnum = "archive"
)

func (e GETModifySnapshotTierStorageTierEnum) ToPointer() *GETModifySnapshotTierStorageTierEnum {
	return &e
}

func (e *GETModifySnapshotTierStorageTierEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "archive":
		*e = GETModifySnapshotTierStorageTierEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GETModifySnapshotTierStorageTierEnum: %v", v)
	}
}

// GETModifySnapshotTierVersionEnum
type GETModifySnapshotTierVersionEnum string

const (
	GETModifySnapshotTierVersionEnumTwoThousandAndSixteen1115 GETModifySnapshotTierVersionEnum = "2016-11-15"
)

func (e GETModifySnapshotTierVersionEnum) ToPointer() *GETModifySnapshotTierVersionEnum {
	return &e
}

func (e *GETModifySnapshotTierVersionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "2016-11-15":
		*e = GETModifySnapshotTierVersionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GETModifySnapshotTierVersionEnum: %v", v)
	}
}

type GETModifySnapshotTierRequest struct {
	Action GETModifySnapshotTierActionEnum `queryParam:"style=form,explode=true,name=Action"`
	// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
	DryRun *bool `queryParam:"style=form,explode=true,name=DryRun"`
	// The ID of the snapshot.
	SnapshotID string `queryParam:"style=form,explode=true,name=SnapshotId"`
	// The name of the storage tier. You must specify <code>archive</code>.
	StorageTier       *GETModifySnapshotTierStorageTierEnum `queryParam:"style=form,explode=true,name=StorageTier"`
	Version           GETModifySnapshotTierVersionEnum      `queryParam:"style=form,explode=true,name=Version"`
	XAmzAlgorithm     *string                               `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string                               `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string                               `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string                               `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string                               `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string                               `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string                               `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
}

type GETModifySnapshotTierResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
