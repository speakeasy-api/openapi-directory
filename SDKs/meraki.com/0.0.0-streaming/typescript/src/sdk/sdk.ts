/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import { ActionBatches } from "./actionbatches";
import { Admins } from "./admins";
import { AlertSettings } from "./alertsettings";
import { APIUsage } from "./apiusage";
import { BluetoothClients } from "./bluetoothclients";
import { BluetoothSettings } from "./bluetoothsettings";
import { CameraQualityRetentionProfiles } from "./cameraqualityretentionprofiles";
import { Cameras } from "./cameras";
import { ChangeLog } from "./changelog";
import { Clients } from "./clients";
import { ConfigTemplates } from "./configtemplates";
import { ContentFilteringCategories } from "./contentfilteringcategories";
import { ContentFilteringRules } from "./contentfilteringrules";
import { Devices } from "./devices";
import { Events } from "./events";
import { FirewalledServices } from "./firewalledservices";
import { FloorPlans } from "./floorplans";
import { IntrusionSettings } from "./intrusionsettings";
import { Licenses } from "./licenses";
import { LinkAggregations } from "./linkaggregations";
import { MalwareSettings } from "./malwaresettings";
import { MerakiAuthUsers } from "./merakiauthusers";
import { MGLANSettings } from "./mglansettings";
import { MGPortForwardingRules } from "./mgportforwardingrules";
import * as shared from "./models/shared";
import { MonitoredMediaServers } from "./monitoredmediaservers";
import { Mrl3Firewall } from "./mrl3firewall";
import { MVSense } from "./mvsense";
import { Mx11NATRules } from "./mx11natrules";
import { Mx1ManyNATRules } from "./mx1manynatrules";
import { MXCellularFirewall } from "./mxcellularfirewall";
import { Mxl3InboundFirewall } from "./mxl3inboundfirewall";
import { Mxl3OutboundFirewall } from "./mxl3outboundfirewall";
import { Mxl7ApplicationCategories } from "./mxl7applicationcategories";
import { Mxl7Firewall } from "./mxl7firewall";
import { MXPortForwardingRules } from "./mxportforwardingrules";
import { MXStaticRoutes } from "./mxstaticroutes";
import { MXVLANPorts } from "./mxvlanports";
import { MXVPNFirewall } from "./mxvpnfirewall";
import { MXWarmSpareSettings } from "./mxwarmsparesettings";
import { NamedTagScope } from "./namedtagscope";
import { Networks } from "./networks";
import { OpenAPISpec } from "./openapispec";
import { Organizations } from "./organizations";
import { Pii } from "./pii";
import { RadioSettings } from "./radiosettings";
import { SAMLRoles } from "./samlroles";
import { SecurityEvents } from "./securityevents";
import { Sm } from "./sm";
import { SNMPSettings } from "./snmpsettings";
import { SplashLoginAttempts } from "./splashloginattempts";
import { SplashSettings } from "./splashsettings";
import { SSIDs } from "./ssids";
import { SwitchAccessPolicies } from "./switchaccesspolicies";
import { SwitchPorts } from "./switchports";
import { SwitchPortSchedules } from "./switchportschedules";
import { SwitchProfiles } from "./switchprofiles";
import { SwitchSettings } from "./switchsettings";
import { SwitchStacks } from "./switchstacks";
import { SyslogServers } from "./syslogservers";
import { TrafficShapingUplinkSettings } from "./trafficshapinguplinksettings";
import { VLANs } from "./vlans";
import { WirelessHealth } from "./wirelesshealth";
import { WirelessSettings } from "./wirelesssettings";
import axios, { AxiosInstance } from "axios";

/**
 * Contains the list of servers available to the SDK
 */
export const ServerList = ["https://api.meraki.com/api/v0"] as const;

/**
 * The available configuration options for the SDK
 */
export type SDKProps = {
  /**
   * The security details required to authenticate the SDK
   */
  security?: shared.Security;
  /**
   * Allows overriding the default axios client used by the SDK
   */
  defaultClient?: AxiosInstance;
  /**
   * Allows overriding the default server URL used by the SDK
   */
  serverURL?: string;
};

/**
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.
 *
 * @remarks
 *
 * > Date: 05 March, 2023
 * >
 * > [Recent Updates](https://meraki.io/whats-new/)
 *
 * ---
 *
 * [API Documentation](https://meraki.io/api)
 *
 * [Community Support](https://meraki.io/community)
 *
 * [Meraki Homepage](https://www.meraki.com)
 *
 */
export class SDK {
  public apiUsage: APIUsage;
  public actionBatches: ActionBatches;
  public admins: Admins;
  public alertSettings: AlertSettings;
  public bluetoothClients: BluetoothClients;
  public bluetoothSettings: BluetoothSettings;
  public cameraQualityRetentionProfiles: CameraQualityRetentionProfiles;
  public cameras: Cameras;
  public changeLog: ChangeLog;
  public clients: Clients;
  public configTemplates: ConfigTemplates;
  public contentFilteringCategories: ContentFilteringCategories;
  public contentFilteringRules: ContentFilteringRules;
  public devices: Devices;
  public events: Events;
  public firewalledServices: FirewalledServices;
  public floorPlans: FloorPlans;
  public intrusionSettings: IntrusionSettings;
  public licenses: Licenses;
  public linkAggregations: LinkAggregations;
  public mgLANSettings: MGLANSettings;
  public mgPortForwardingRules: MGPortForwardingRules;
  public mrL3Firewall: Mrl3Firewall;
  public mvSense: MVSense;
  public mx11NATRules: Mx11NATRules;
  public mx1ManyNATRules: Mx1ManyNATRules;
  public mxL3InboundFirewall: Mxl3InboundFirewall;
  public mxL3OutboundFirewall: Mxl3OutboundFirewall;
  public mxL7ApplicationCategories: Mxl7ApplicationCategories;
  public mxL7Firewall: Mxl7Firewall;
  public mxVLANPorts: MXVLANPorts;
  public mxVPNFirewall: MXVPNFirewall;
  public mxCellularFirewall: MXCellularFirewall;
  public mxPortForwardingRules: MXPortForwardingRules;
  public mxStaticRoutes: MXStaticRoutes;
  public mxWarmSpareSettings: MXWarmSpareSettings;
  public malwareSettings: MalwareSettings;
  public merakiAuthUsers: MerakiAuthUsers;
  public monitoredMediaServers: MonitoredMediaServers;
  public namedTagScope: NamedTagScope;
  public networks: Networks;
  public openAPISpec: OpenAPISpec;
  public organizations: Organizations;
  public pii: Pii;
  public radioSettings: RadioSettings;
  public samlRoles: SAMLRoles;
  public sm: Sm;
  public snmpSettings: SNMPSettings;
  public ssiDs: SSIDs;
  public securityEvents: SecurityEvents;
  public splashLoginAttempts: SplashLoginAttempts;
  public splashSettings: SplashSettings;
  public switchAccessPolicies: SwitchAccessPolicies;
  public switchPortSchedules: SwitchPortSchedules;
  public switchPorts: SwitchPorts;
  public switchProfiles: SwitchProfiles;
  public switchSettings: SwitchSettings;
  public switchStacks: SwitchStacks;
  public syslogServers: SyslogServers;
  public trafficShapingUplinkSettings: TrafficShapingUplinkSettings;
  public vlaNs: VLANs;
  public wirelessHealth: WirelessHealth;
  public wirelessSettings: WirelessSettings;

  public _defaultClient: AxiosInstance;
  public _securityClient: AxiosInstance;
  public _serverURL: string;
  private _language = "typescript";
  private _sdkVersion = "0.0.1";
  private _genVersion = "internal";
  private _globals: any;

  constructor(props?: SDKProps) {
    this._serverURL = props?.serverURL ?? ServerList[0];

    this._defaultClient =
      props?.defaultClient ?? axios.create({ baseURL: this._serverURL });
    if (props?.security) {
      let security: shared.Security = props.security;
      if (!(props.security instanceof utils.SpeakeasyBase))
        security = new shared.Security(props.security);
      this._securityClient = utils.createSecurityClient(
        this._defaultClient,
        security
      );
    } else {
      this._securityClient = this._defaultClient;
    }

    this.apiUsage = new APIUsage(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.actionBatches = new ActionBatches(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.admins = new Admins(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.alertSettings = new AlertSettings(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.bluetoothClients = new BluetoothClients(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.bluetoothSettings = new BluetoothSettings(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.cameraQualityRetentionProfiles = new CameraQualityRetentionProfiles(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.cameras = new Cameras(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.changeLog = new ChangeLog(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.clients = new Clients(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.configTemplates = new ConfigTemplates(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.contentFilteringCategories = new ContentFilteringCategories(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.contentFilteringRules = new ContentFilteringRules(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.devices = new Devices(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.events = new Events(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.firewalledServices = new FirewalledServices(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.floorPlans = new FloorPlans(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.intrusionSettings = new IntrusionSettings(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.licenses = new Licenses(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.linkAggregations = new LinkAggregations(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.mgLANSettings = new MGLANSettings(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.mgPortForwardingRules = new MGPortForwardingRules(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.mrL3Firewall = new Mrl3Firewall(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.mvSense = new MVSense(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.mx11NATRules = new Mx11NATRules(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.mx1ManyNATRules = new Mx1ManyNATRules(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.mxL3InboundFirewall = new Mxl3InboundFirewall(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.mxL3OutboundFirewall = new Mxl3OutboundFirewall(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.mxL7ApplicationCategories = new Mxl7ApplicationCategories(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.mxL7Firewall = new Mxl7Firewall(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.mxVLANPorts = new MXVLANPorts(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.mxVPNFirewall = new MXVPNFirewall(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.mxCellularFirewall = new MXCellularFirewall(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.mxPortForwardingRules = new MXPortForwardingRules(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.mxStaticRoutes = new MXStaticRoutes(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.mxWarmSpareSettings = new MXWarmSpareSettings(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.malwareSettings = new MalwareSettings(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.merakiAuthUsers = new MerakiAuthUsers(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.monitoredMediaServers = new MonitoredMediaServers(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.namedTagScope = new NamedTagScope(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.networks = new Networks(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.openAPISpec = new OpenAPISpec(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.organizations = new Organizations(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.pii = new Pii(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.radioSettings = new RadioSettings(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.samlRoles = new SAMLRoles(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.sm = new Sm(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.snmpSettings = new SNMPSettings(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.ssiDs = new SSIDs(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.securityEvents = new SecurityEvents(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.splashLoginAttempts = new SplashLoginAttempts(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.splashSettings = new SplashSettings(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.switchAccessPolicies = new SwitchAccessPolicies(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.switchPortSchedules = new SwitchPortSchedules(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.switchPorts = new SwitchPorts(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.switchProfiles = new SwitchProfiles(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.switchSettings = new SwitchSettings(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.switchStacks = new SwitchStacks(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.syslogServers = new SyslogServers(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.trafficShapingUplinkSettings = new TrafficShapingUplinkSettings(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.vlaNs = new VLANs(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.wirelessHealth = new WirelessHealth(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.wirelessSettings = new WirelessSettings(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );
  }
}
