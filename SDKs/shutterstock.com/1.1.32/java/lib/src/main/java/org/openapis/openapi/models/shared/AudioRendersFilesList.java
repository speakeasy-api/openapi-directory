/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * AudioRendersFilesList - Files associated with the render
 */
public class AudioRendersFilesList {
    /**
     * The bit depth of the audio files in bits/sample
     */
    @JsonProperty("bits_sample")
    public Double bitsSample;
    public AudioRendersFilesList withBitsSample(Double bitsSample) {
        this.bitsSample = bitsSample;
        return this;
    }
    
    /**
     * The content-type of the file
     */
    @JsonProperty("content_type")
    public String contentType;
    public AudioRendersFilesList withContentType(String contentType) {
        this.contentType = contentType;
        return this;
    }
    
    /**
     * The internet-accessible URL from which the file can be downloaded. Any redirects encountered when using this URL must be followed
     */
    @JsonProperty("download_url")
    public String downloadUrl;
    public AudioRendersFilesList withDownloadUrl(String downloadUrl) {
        this.downloadUrl = downloadUrl;
        return this;
    }
    
    /**
     * The user-specified file name suggestion from the render request; this file name becomes the filename property of the Content-Disposition header when the user downloads the rendered audio file
     */
    @JsonProperty("filename")
    public String filename;
    public AudioRendersFilesList withFilename(String filename) {
        this.filename = filename;
        return this;
    }
    
    /**
     * The Sample rate of the audio files in Hertz (Hz)
     */
    @JsonProperty("frequency_hz")
    public Double frequencyHz;
    public AudioRendersFilesList withFrequencyHz(Double frequencyHz) {
        this.frequencyHz = frequencyHz;
        return this;
    }
    
    /**
     * The data rate of the audio files in kilobits/second
     */
    @JsonProperty("kbits_second")
    public Double kbitsSecond;
    public AudioRendersFilesList withKbitsSecond(Double kbitsSecond) {
        this.kbitsSecond = kbitsSecond;
        return this;
    }
    
    /**
     * Size of the file in bytes
     */
    @JsonProperty("size_bytes")
    public Double sizeBytes;
    public AudioRendersFilesList withSizeBytes(Double sizeBytes) {
        this.sizeBytes = sizeBytes;
        return this;
    }
    
    /**
     * An array of track names included in the file
     */
    @JsonProperty("tracks")
    public String[] tracks;
    public AudioRendersFilesList withTracks(String[] tracks) {
        this.tracks = tracks;
        return this;
    }
    
}
