<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Shared;


/**
 * TransferDomainRequestInput - Request for the `TransferDomain` method.
 * 
 * @package OpenAPI\OpenAPI\Models\Shared
 * @access public
 */
class TransferDomainRequestInput
{
    /**
     * Defines an authorization code.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\AuthorizationCode $authorizationCode
     */
	#[\JMS\Serializer\Annotation\SerializedName('authorizationCode')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\AuthorizationCode')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?AuthorizationCode $authorizationCode = null;
    
    /**
     * The list of contact notices that you acknowledge. The notices needed here depend on the values specified in `registration.contact_settings`.
     * 
     * @var ?array<\OpenAPI\OpenAPI\Models\Shared\TransferDomainRequestContactNoticesEnum> $contactNotices
     */
	#[\JMS\Serializer\Annotation\SerializedName('contactNotices')]
    #[\JMS\Serializer\Annotation\Type('array<enum<OpenAPI\OpenAPI\Models\Shared\TransferDomainRequestContactNoticesEnum>>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $contactNotices = null;
    
    /**
     * The `Registration` resource facilitates managing and configuring domain name registrations. There are several ways to create a new `Registration` resource: To create a new `Registration` resource, find a suitable domain name by calling the `SearchDomains` method with a query to see available domain name options. After choosing a name, call `RetrieveRegisterParameters` to ensure availability and obtain information like pricing, which is needed to build a call to `RegisterDomain`. Another way to create a new `Registration` is to transfer an existing domain from another registrar. First, go to the current registrar to unlock the domain for transfer and retrieve the domain's transfer authorization code. Then call `RetrieveTransferParameters` to confirm that the domain is unlocked and to get values needed to build a call to `TransferDomain`. Finally, you can create a new `Registration` by importing an existing domain managed with [Google Domains](https://domains.google/). First, call `RetrieveImportableDomains` to list domains to which the calling user has sufficient access. Then call `ImportDomain` on any domain names you want to use with Cloud Domains.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\RegistrationInput $registration
     */
	#[\JMS\Serializer\Annotation\SerializedName('registration')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\RegistrationInput')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?RegistrationInput $registration = null;
    
    /**
     * Validate the request without actually transferring the domain.
     * 
     * @var ?bool $validateOnly
     */
	#[\JMS\Serializer\Annotation\SerializedName('validateOnly')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $validateOnly = null;
    
    /**
     * Represents an amount of money with its currency type.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\Money $yearlyPrice
     */
	#[\JMS\Serializer\Annotation\SerializedName('yearlyPrice')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\Money')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?Money $yearlyPrice = null;
    
	public function __construct()
	{
		$this->authorizationCode = null;
		$this->contactNotices = null;
		$this->registration = null;
		$this->validateOnly = null;
		$this->yearlyPrice = null;
	}
}
