/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

public class JobStatistics {
    /**
     * [TrustedTester] [Output-only] Job progress (0.0 -&gt; 1.0) for LOAD and EXTRACT jobs.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("completionRatio")
    public Double completionRatio;

    public JobStatistics withCompletionRatio(Double completionRatio) {
        this.completionRatio = completionRatio;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("copy")
    public JobStatistics5 copy;

    public JobStatistics withCopy(JobStatistics5 copy) {
        this.copy = copy;
        return this;
    }
    
    /**
     * [Output-only] Creation time of this job, in milliseconds since the epoch. This field will be present on all jobs.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("creationTime")
    public String creationTime;

    public JobStatistics withCreationTime(String creationTime) {
        this.creationTime = creationTime;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("dataMaskingStatistics")
    public DataMaskingStatistics dataMaskingStatistics;

    public JobStatistics withDataMaskingStatistics(DataMaskingStatistics dataMaskingStatistics) {
        this.dataMaskingStatistics = dataMaskingStatistics;
        return this;
    }
    
    /**
     * [Output-only] End time of this job, in milliseconds since the epoch. This field will be present whenever a job is in the DONE state.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("endTime")
    public String endTime;

    public JobStatistics withEndTime(String endTime) {
        this.endTime = endTime;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("extract")
    public JobStatistics4 extract;

    public JobStatistics withExtract(JobStatistics4 extract) {
        this.extract = extract;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("load")
    public JobStatistics3 load;

    public JobStatistics withLoad(JobStatistics3 load) {
        this.load = load;
        return this;
    }
    
    /**
     * [Output-only] Number of child jobs executed.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("numChildJobs")
    public String numChildJobs;

    public JobStatistics withNumChildJobs(String numChildJobs) {
        this.numChildJobs = numChildJobs;
        return this;
    }
    
    /**
     * [Output-only] If this is a child job, the id of the parent.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("parentJobId")
    public String parentJobId;

    public JobStatistics withParentJobId(String parentJobId) {
        this.parentJobId = parentJobId;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("query")
    public JobStatistics2 query;

    public JobStatistics withQuery(JobStatistics2 query) {
        this.query = query;
        return this;
    }
    
    /**
     * [Output-only] Quotas which delayed this job's start time.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("quotaDeferments")
    public String[] quotaDeferments;

    public JobStatistics withQuotaDeferments(String[] quotaDeferments) {
        this.quotaDeferments = quotaDeferments;
        return this;
    }
    
    /**
     * [Output-only] Job resource usage breakdown by reservation.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("reservationUsage")
    public JobStatisticsReservationUsage[] reservationUsage;

    public JobStatistics withReservationUsage(JobStatisticsReservationUsage[] reservationUsage) {
        this.reservationUsage = reservationUsage;
        return this;
    }
    
    /**
     * [Output-only] Name of the primary reservation assigned to this job. Note that this could be different than reservations reported in the reservation usage field if parent reservations were used to execute this job.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("reservation_id")
    public String reservationId;

    public JobStatistics withReservationId(String reservationId) {
        this.reservationId = reservationId;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("rowLevelSecurityStatistics")
    public RowLevelSecurityStatistics rowLevelSecurityStatistics;

    public JobStatistics withRowLevelSecurityStatistics(RowLevelSecurityStatistics rowLevelSecurityStatistics) {
        this.rowLevelSecurityStatistics = rowLevelSecurityStatistics;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("scriptStatistics")
    public ScriptStatistics scriptStatistics;

    public JobStatistics withScriptStatistics(ScriptStatistics scriptStatistics) {
        this.scriptStatistics = scriptStatistics;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sessionInfo")
    public SessionInfo sessionInfo;

    public JobStatistics withSessionInfo(SessionInfo sessionInfo) {
        this.sessionInfo = sessionInfo;
        return this;
    }
    
    /**
     * [Output-only] Start time of this job, in milliseconds since the epoch. This field will be present when the job transitions from the PENDING state to either RUNNING or DONE.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("startTime")
    public String startTime;

    public JobStatistics withStartTime(String startTime) {
        this.startTime = startTime;
        return this;
    }
    
    /**
     * [Output-only] [Deprecated] Use the bytes processed in the query statistics instead.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("totalBytesProcessed")
    public String totalBytesProcessed;

    public JobStatistics withTotalBytesProcessed(String totalBytesProcessed) {
        this.totalBytesProcessed = totalBytesProcessed;
        return this;
    }
    
    /**
     * [Output-only] Slot-milliseconds for the job.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("totalSlotMs")
    public String totalSlotMs;

    public JobStatistics withTotalSlotMs(String totalSlotMs) {
        this.totalSlotMs = totalSlotMs;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("transactionInfo")
    public TransactionInfo transactionInfo;

    public JobStatistics withTransactionInfo(TransactionInfo transactionInfo) {
        this.transactionInfo = transactionInfo;
        return this;
    }
    
    public JobStatistics(){}
}
