"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class TLSRouteRouteMatch:
    r"""RouteMatch defines the predicate used to match requests to a given action. Multiple match types are \\"AND\\"ed for evaluation. If no routeMatch field is specified, this rule will unconditionally match traffic."""
    
    alpn: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('alpn'), 'exclude': lambda f: f is None }})
    r"""Optional. ALPN (Application-Layer Protocol Negotiation) to match against. Examples: \\"http/1.1\\", \\"h2\\". At least one of sni_host and alpn is required. Up to 5 alpns across all matches can be set."""  
    sni_host: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sniHost'), 'exclude': lambda f: f is None }})
    r"""Optional. SNI (server name indicator) to match against. SNI will be matched against all wildcard domains, i.e. www.example.com will be first matched against www.example.com, then *.example.com, then *.com. Partial wildcards are not supported, and values like *w.example.com are invalid. At least one of sni_host and alpn is required. Up to 5 sni hosts across all matches can be set."""  
    