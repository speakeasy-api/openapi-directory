// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type PostReportsSecurity struct {
	APIKeyAuth shared.SchemeAPIKeyAuth `security:"scheme,type=apiKey,subtype=header"`
}

// PostReportsOptionEnum - Optional ways to process the request
type PostReportsOptionEnum string

const (
	PostReportsOptionEnumValidatePayload  PostReportsOptionEnum = "ValidatePayload"
	PostReportsOptionEnumCheckConnections PostReportsOptionEnum = "CheckConnections"
	PostReportsOptionEnumSendImmediately  PostReportsOptionEnum = "SendImmediately"
	PostReportsOptionEnumSkipSend         PostReportsOptionEnum = "SkipSend"
	PostReportsOptionEnumSkipInvalidItems PostReportsOptionEnum = "SkipInvalidItems"
)

func (e *PostReportsOptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "ValidatePayload":
		fallthrough
	case "CheckConnections":
		fallthrough
	case "SendImmediately":
		fallthrough
	case "SkipSend":
		fallthrough
	case "SkipInvalidItems":
		*e = PostReportsOptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PostReportsOptionEnum: %s", s)
	}
}

type PostReportsQueryParams struct {
	// The client's name that matches the client name in metadata
	Client string `queryParam:"style=form,explode=true,name=client"`
	// Dynamic default values for an element. ':' or %3A is used to seperate element name and value
	Default []string `queryParam:"style=form,explode=false,name=default"`
	// Optional ways to process the request
	Option *PostReportsOptionEnum `queryParam:"style=form,explode=true,name=option"`
	// A comma speparated list of receiver names. Limit the list of possible receivers to these receivers.
	RouteTo []string `queryParam:"style=form,explode=true,name=routeTo"`
}

type PostReportsRequest struct {
	QueryParams PostReportsQueryParams
	// The public health information being routed
	Request  string `request:"mediaType=text/csv"`
	Security PostReportsSecurity
}

type PostReportsResponse struct {
	ContentType string
	// OK
	Report      *shared.Report
	StatusCode  int
	RawResponse *http.Response
}
