// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// LeagueLeadersByWeekColumnEnum - Response member you would like results sorted by.
type LeagueLeadersByWeekColumnEnum string

const (
	LeagueLeadersByWeekColumnEnumFantasyPoints LeagueLeadersByWeekColumnEnum = "FantasyPoints"
	LeagueLeadersByWeekColumnEnumPassingYards  LeagueLeadersByWeekColumnEnum = "PassingYards"
	LeagueLeadersByWeekColumnEnumRushingYards  LeagueLeadersByWeekColumnEnum = "RushingYards"
	LeagueLeadersByWeekColumnEnumReceptions    LeagueLeadersByWeekColumnEnum = "Receptions"
	LeagueLeadersByWeekColumnEnumSacks         LeagueLeadersByWeekColumnEnum = "Sacks"
	LeagueLeadersByWeekColumnEnumInterceptions LeagueLeadersByWeekColumnEnum = "Interceptions"
	LeagueLeadersByWeekColumnEnumTouchdowns    LeagueLeadersByWeekColumnEnum = "Touchdowns"
)

func (e *LeagueLeadersByWeekColumnEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "FantasyPoints":
		fallthrough
	case "PassingYards":
		fallthrough
	case "RushingYards":
		fallthrough
	case "Receptions":
		fallthrough
	case "Sacks":
		fallthrough
	case "Interceptions":
		fallthrough
	case "Touchdowns":
		*e = LeagueLeadersByWeekColumnEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for LeagueLeadersByWeekColumnEnum: %s", s)
	}
}

// LeagueLeadersByWeekFormatEnum -
//
//	Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.
type LeagueLeadersByWeekFormatEnum string

const (
	LeagueLeadersByWeekFormatEnumXML  LeagueLeadersByWeekFormatEnum = "XML"
	LeagueLeadersByWeekFormatEnumJSON LeagueLeadersByWeekFormatEnum = "JSON"
)

func (e *LeagueLeadersByWeekFormatEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "XML":
		fallthrough
	case "JSON":
		*e = LeagueLeadersByWeekFormatEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for LeagueLeadersByWeekFormatEnum: %s", s)
	}
}

// LeagueLeadersByWeekPositionEnum - Playerâ€™s position that you would like to filter by.
type LeagueLeadersByWeekPositionEnum string

const (
	LeagueLeadersByWeekPositionEnumAll     LeagueLeadersByWeekPositionEnum = "ALL"
	LeagueLeadersByWeekPositionEnumOffense LeagueLeadersByWeekPositionEnum = "OFFENSE"
	LeagueLeadersByWeekPositionEnumQb      LeagueLeadersByWeekPositionEnum = "QB"
	LeagueLeadersByWeekPositionEnumRb      LeagueLeadersByWeekPositionEnum = "RB"
	LeagueLeadersByWeekPositionEnumWr      LeagueLeadersByWeekPositionEnum = "WR"
	LeagueLeadersByWeekPositionEnumTe      LeagueLeadersByWeekPositionEnum = "TE"
	LeagueLeadersByWeekPositionEnumDefense LeagueLeadersByWeekPositionEnum = "DEFENSE"
	LeagueLeadersByWeekPositionEnumDl      LeagueLeadersByWeekPositionEnum = "DL"
	LeagueLeadersByWeekPositionEnumLb      LeagueLeadersByWeekPositionEnum = "LB"
	LeagueLeadersByWeekPositionEnumDb      LeagueLeadersByWeekPositionEnum = "DB"
	LeagueLeadersByWeekPositionEnumK       LeagueLeadersByWeekPositionEnum = "K"
)

func (e *LeagueLeadersByWeekPositionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "ALL":
		fallthrough
	case "OFFENSE":
		fallthrough
	case "QB":
		fallthrough
	case "RB":
		fallthrough
	case "WR":
		fallthrough
	case "TE":
		fallthrough
	case "DEFENSE":
		fallthrough
	case "DL":
		fallthrough
	case "LB":
		fallthrough
	case "DB":
		fallthrough
	case "K":
		*e = LeagueLeadersByWeekPositionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for LeagueLeadersByWeekPositionEnum: %s", s)
	}
}

type LeagueLeadersByWeekPathParams struct {
	// Response member you would like results sorted by.
	Column LeagueLeadersByWeekColumnEnum `pathParam:"style=simple,explode=false,name=column"`
	//           Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.
	//
	Format LeagueLeadersByWeekFormatEnum `pathParam:"style=simple,explode=false,name=format"`
	// Playerâ€™s position that you would like to filter by.
	Position LeagueLeadersByWeekPositionEnum `pathParam:"style=simple,explode=false,name=position"`
	//           Year of the season and the season type. If no season type is provided, then the default is regular season.
	//           <br>Examples: <code>2015REG</code>, <code>2015PRE</code>, <code>2015POST</code>.
	//
	Season string `pathParam:"style=simple,explode=false,name=season"`
	//           Week of the season. Valid values are as follows: Preseason 0 to 4, Regular Season 1 to 17, Postseason 1 to 4.
	//           Example: <code>1</code>
	//
	Week string `pathParam:"style=simple,explode=false,name=week"`
}

type LeagueLeadersByWeekRequest struct {
	PathParams LeagueLeadersByWeekPathParams
}

type LeagueLeadersByWeekResponse struct {
	ContentType string
	PlayerGames []shared.PlayerGame
	StatusCode  int
	RawResponse *http.Response
}
