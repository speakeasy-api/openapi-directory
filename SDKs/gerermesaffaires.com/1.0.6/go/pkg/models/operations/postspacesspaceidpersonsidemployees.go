// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

type PostSpacesSpaceIDPersonsIDEmployeesSecurity struct {
	GmaAuth string `security:"scheme,type=oauth2,name=Authorization"`
}

type PostSpacesSpaceIDPersonsIDEmployeesRequestBodyLevelEnum string

const (
	PostSpacesSpaceIDPersonsIDEmployeesRequestBodyLevelEnumConfidential PostSpacesSpaceIDPersonsIDEmployeesRequestBodyLevelEnum = "confidential"
	PostSpacesSpaceIDPersonsIDEmployeesRequestBodyLevelEnumRegular      PostSpacesSpaceIDPersonsIDEmployeesRequestBodyLevelEnum = "regular"
	PostSpacesSpaceIDPersonsIDEmployeesRequestBodyLevelEnumPublic       PostSpacesSpaceIDPersonsIDEmployeesRequestBodyLevelEnum = "public"
)

func (e PostSpacesSpaceIDPersonsIDEmployeesRequestBodyLevelEnum) ToPointer() *PostSpacesSpaceIDPersonsIDEmployeesRequestBodyLevelEnum {
	return &e
}

func (e *PostSpacesSpaceIDPersonsIDEmployeesRequestBodyLevelEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "confidential":
		fallthrough
	case "regular":
		fallthrough
	case "public":
		*e = PostSpacesSpaceIDPersonsIDEmployeesRequestBodyLevelEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PostSpacesSpaceIDPersonsIDEmployeesRequestBodyLevelEnum: %v", v)
	}
}

// PostSpacesSpaceIDPersonsIDEmployeesRequestBody - Employee to add (except name, class and archivaldate)
type PostSpacesSpaceIDPersonsIDEmployeesRequestBody struct {
	About          *string                                                  `json:"About,omitempty"`
	Comment        *string                                                  `json:"Comment,omitempty"`
	ContractType   *string                                                  `json:"ContractType,omitempty"`
	EmployeeNumber *string                                                  `json:"EmployeeNumber,omitempty"`
	End            *string                                                  `json:"End,omitempty"`
	Function       *string                                                  `json:"Function,omitempty"`
	Home           *bool                                                    `json:"Home,omitempty"`
	Keywords       []string                                                 `json:"Keywords,omitempty"`
	Level          *PostSpacesSpaceIDPersonsIDEmployeesRequestBodyLevelEnum `json:"Level,omitempty"`
	PostalMail     *bool                                                    `json:"PostalMail,omitempty"`
	SSNumber       *string                                                  `json:"SSNumber,omitempty"`
	Start          *string                                                  `json:"Start,omitempty"`
}

type PostSpacesSpaceIDPersonsIDEmployeesRequest struct {
	// Employee to add (except name, class and archivaldate)
	RequestBody PostSpacesSpaceIDPersonsIDEmployeesRequestBody `request:"mediaType=application/json"`
	// Id of the employee
	ID string `pathParam:"style=simple,explode=false,name=id"`
	// Id of the space
	SpaceID string `pathParam:"style=simple,explode=false,name=spaceId"`
}

// PostSpacesSpaceIDPersonsIDEmployees201ApplicationJSON - Id of folder created
type PostSpacesSpaceIDPersonsIDEmployees201ApplicationJSON struct {
	ID *string `json:"Id,omitempty"`
}

type PostSpacesSpaceIDPersonsIDEmployeesResponse struct {
	ContentType string
	Headers     map[string][]string
	StatusCode  int
	RawResponse *http.Response
	// Id of folder created
	PostSpacesSpaceIDPersonsIDEmployees201ApplicationJSONObject *PostSpacesSpaceIDPersonsIDEmployees201ApplicationJSON
}
