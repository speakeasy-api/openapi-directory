// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// TestEventPatternXAmzTargetEnum
type TestEventPatternXAmzTargetEnum string

const (
	TestEventPatternXAmzTargetEnumAwsEventsTestEventPattern TestEventPatternXAmzTargetEnum = "AWSEvents.TestEventPattern"
)

func (e TestEventPatternXAmzTargetEnum) ToPointer() *TestEventPatternXAmzTargetEnum {
	return &e
}

func (e *TestEventPatternXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "AWSEvents.TestEventPattern":
		*e = TestEventPatternXAmzTargetEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TestEventPatternXAmzTargetEnum: %v", v)
	}
}

type TestEventPatternRequest struct {
	TestEventPatternRequest shared.TestEventPatternRequest `request:"mediaType=application/json"`
	XAmzAlgorithm           *string                        `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256       *string                        `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential          *string                        `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate                *string                        `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken       *string                        `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature           *string                        `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders       *string                        `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget              TestEventPatternXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type TestEventPatternResponse struct {
	ContentType string
	// InternalException
	InternalException interface{}
	// InvalidEventPatternException
	InvalidEventPatternException interface{}
	StatusCode                   int
	RawResponse                  *http.Response
	// Success
	TestEventPatternResponse *shared.TestEventPatternResponse
}
