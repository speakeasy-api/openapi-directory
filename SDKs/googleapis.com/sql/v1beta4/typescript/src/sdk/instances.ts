/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class Instances {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Add a new trusted Certificate Authority (CA) version for the specified instance. Required to prepare for a certificate rotation. If a CA version was previously added but never used in a certificate rotation, this operation replaces that version. There cannot be more than one CA version waiting to be rotated in.
   */
  sqlInstancesAddServerCa(
    req: operations.SqlInstancesAddServerCaRequest,
    security: operations.SqlInstancesAddServerCaSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.SqlInstancesAddServerCaResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.SqlInstancesAddServerCaRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/sql/v1beta4/projects/{project}/instances/{instance}/addServerCa",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.SqlInstancesAddServerCaSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.SqlInstancesAddServerCaResponse =
        new operations.SqlInstancesAddServerCaResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.operation = utils.objectToClass(
              httpRes?.data,
              shared.Operation
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Creates a Cloud SQL instance as a clone of the source instance. Using this operation might cause your instance to restart.
   */
  sqlInstancesClone(
    req: operations.SqlInstancesCloneRequest,
    security: operations.SqlInstancesCloneSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.SqlInstancesCloneResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.SqlInstancesCloneRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/sql/v1beta4/projects/{project}/instances/{instance}/clone",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "instancesCloneRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.SqlInstancesCloneSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.SqlInstancesCloneResponse =
        new operations.SqlInstancesCloneResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.operation = utils.objectToClass(
              httpRes?.data,
              shared.Operation
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Deletes a Cloud SQL instance.
   */
  sqlInstancesDelete(
    req: operations.SqlInstancesDeleteRequest,
    security: operations.SqlInstancesDeleteSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.SqlInstancesDeleteResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.SqlInstancesDeleteRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/sql/v1beta4/projects/{project}/instances/{instance}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.SqlInstancesDeleteSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.SqlInstancesDeleteResponse =
        new operations.SqlInstancesDeleteResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.operation = utils.objectToClass(
              httpRes?.data,
              shared.Operation
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Demotes the stand-alone instance to be a Cloud SQL read replica for an external database server.
   */
  sqlInstancesDemoteMaster(
    req: operations.SqlInstancesDemoteMasterRequest,
    security: operations.SqlInstancesDemoteMasterSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.SqlInstancesDemoteMasterResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.SqlInstancesDemoteMasterRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/sql/v1beta4/projects/{project}/instances/{instance}/demoteMaster",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "instancesDemoteMasterRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.SqlInstancesDemoteMasterSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.SqlInstancesDemoteMasterResponse =
        new operations.SqlInstancesDemoteMasterResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.operation = utils.objectToClass(
              httpRes?.data,
              shared.Operation
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Exports data from a Cloud SQL instance to a Cloud Storage bucket as a SQL dump or CSV file.
   */
  sqlInstancesExport(
    req: operations.SqlInstancesExportRequest,
    security: operations.SqlInstancesExportSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.SqlInstancesExportResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.SqlInstancesExportRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/sql/v1beta4/projects/{project}/instances/{instance}/export",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "instancesExportRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.SqlInstancesExportSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.SqlInstancesExportResponse =
        new operations.SqlInstancesExportResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.operation = utils.objectToClass(
              httpRes?.data,
              shared.Operation
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Initiates a manual failover of a high availability (HA) primary instance to a standby instance, which becomes the primary instance. Users are then rerouted to the new primary. For more information, see the [Overview of high availability](https://cloud.google.com/sql/docs/mysql/high-availability) page in the Cloud SQL documentation. If using Legacy HA (MySQL only), this causes the instance to failover to its failover replica instance.
   */
  sqlInstancesFailover(
    req: operations.SqlInstancesFailoverRequest,
    security: operations.SqlInstancesFailoverSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.SqlInstancesFailoverResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.SqlInstancesFailoverRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/sql/v1beta4/projects/{project}/instances/{instance}/failover",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "instancesFailoverRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.SqlInstancesFailoverSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.SqlInstancesFailoverResponse =
        new operations.SqlInstancesFailoverResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.operation = utils.objectToClass(
              httpRes?.data,
              shared.Operation
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Retrieves a resource containing information about a Cloud SQL instance.
   */
  sqlInstancesGet(
    req: operations.SqlInstancesGetRequest,
    security: operations.SqlInstancesGetSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.SqlInstancesGetResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.SqlInstancesGetRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/sql/v1beta4/projects/{project}/instances/{instance}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.SqlInstancesGetSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.SqlInstancesGetResponse =
        new operations.SqlInstancesGetResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.databaseInstance = utils.objectToClass(
              httpRes?.data,
              shared.DatabaseInstance
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Imports data into a Cloud SQL instance from a SQL dump or CSV file in Cloud Storage.
   */
  sqlInstancesImport(
    req: operations.SqlInstancesImportRequest,
    security: operations.SqlInstancesImportSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.SqlInstancesImportResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.SqlInstancesImportRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/sql/v1beta4/projects/{project}/instances/{instance}/import",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "instancesImportRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.SqlInstancesImportSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.SqlInstancesImportResponse =
        new operations.SqlInstancesImportResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.operation = utils.objectToClass(
              httpRes?.data,
              shared.Operation
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Creates a new Cloud SQL instance.
   */
  sqlInstancesInsert(
    req: operations.SqlInstancesInsertRequest,
    security: operations.SqlInstancesInsertSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.SqlInstancesInsertResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.SqlInstancesInsertRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/sql/v1beta4/projects/{project}/instances",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "databaseInstanceInput",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.SqlInstancesInsertSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.SqlInstancesInsertResponse =
        new operations.SqlInstancesInsertResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.operation = utils.objectToClass(
              httpRes?.data,
              shared.Operation
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Lists instances under a given project.
   */
  sqlInstancesList(
    req: operations.SqlInstancesListRequest,
    security: operations.SqlInstancesListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.SqlInstancesListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.SqlInstancesListRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/sql/v1beta4/projects/{project}/instances",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.SqlInstancesListSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.SqlInstancesListResponse =
        new operations.SqlInstancesListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.instancesListResponse = utils.objectToClass(
              httpRes?.data,
              shared.InstancesListResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Lists all of the trusted Certificate Authorities (CAs) for the specified instance. There can be up to three CAs listed: the CA that was used to sign the certificate that is currently in use, a CA that has been added but not yet used to sign a certificate, and a CA used to sign a certificate that has previously rotated out.
   */
  sqlInstancesListServerCas(
    req: operations.SqlInstancesListServerCasRequest,
    security: operations.SqlInstancesListServerCasSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.SqlInstancesListServerCasResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.SqlInstancesListServerCasRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/sql/v1beta4/projects/{project}/instances/{instance}/listServerCas",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.SqlInstancesListServerCasSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.SqlInstancesListServerCasResponse =
        new operations.SqlInstancesListServerCasResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.instancesListServerCasResponse = utils.objectToClass(
              httpRes?.data,
              shared.InstancesListServerCasResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Partially updates settings of a Cloud SQL instance by merging the request with the current configuration. This method supports patch semantics.
   */
  sqlInstancesPatch(
    req: operations.SqlInstancesPatchRequest,
    security: operations.SqlInstancesPatchSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.SqlInstancesPatchResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.SqlInstancesPatchRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/sql/v1beta4/projects/{project}/instances/{instance}",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "databaseInstanceInput",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.SqlInstancesPatchSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "patch",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.SqlInstancesPatchResponse =
        new operations.SqlInstancesPatchResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.operation = utils.objectToClass(
              httpRes?.data,
              shared.Operation
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Promotes the read replica instance to be a stand-alone Cloud SQL instance. Using this operation might cause your instance to restart.
   */
  sqlInstancesPromoteReplica(
    req: operations.SqlInstancesPromoteReplicaRequest,
    security: operations.SqlInstancesPromoteReplicaSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.SqlInstancesPromoteReplicaResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.SqlInstancesPromoteReplicaRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/sql/v1beta4/projects/{project}/instances/{instance}/promoteReplica",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.SqlInstancesPromoteReplicaSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.SqlInstancesPromoteReplicaResponse =
        new operations.SqlInstancesPromoteReplicaResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.operation = utils.objectToClass(
              httpRes?.data,
              shared.Operation
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Deletes all client certificates and generates a new server SSL certificate for the instance.
   */
  sqlInstancesResetSslConfig(
    req: operations.SqlInstancesResetSslConfigRequest,
    security: operations.SqlInstancesResetSslConfigSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.SqlInstancesResetSslConfigResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.SqlInstancesResetSslConfigRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/sql/v1beta4/projects/{project}/instances/{instance}/resetSslConfig",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.SqlInstancesResetSslConfigSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.SqlInstancesResetSslConfigResponse =
        new operations.SqlInstancesResetSslConfigResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.operation = utils.objectToClass(
              httpRes?.data,
              shared.Operation
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Restarts a Cloud SQL instance.
   */
  sqlInstancesRestart(
    req: operations.SqlInstancesRestartRequest,
    security: operations.SqlInstancesRestartSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.SqlInstancesRestartResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.SqlInstancesRestartRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/sql/v1beta4/projects/{project}/instances/{instance}/restart",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.SqlInstancesRestartSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.SqlInstancesRestartResponse =
        new operations.SqlInstancesRestartResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.operation = utils.objectToClass(
              httpRes?.data,
              shared.Operation
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Restores a backup of a Cloud SQL instance. Using this operation might cause your instance to restart.
   */
  sqlInstancesRestoreBackup(
    req: operations.SqlInstancesRestoreBackupRequest,
    security: operations.SqlInstancesRestoreBackupSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.SqlInstancesRestoreBackupResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.SqlInstancesRestoreBackupRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/sql/v1beta4/projects/{project}/instances/{instance}/restoreBackup",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "instancesRestoreBackupRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.SqlInstancesRestoreBackupSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.SqlInstancesRestoreBackupResponse =
        new operations.SqlInstancesRestoreBackupResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.operation = utils.objectToClass(
              httpRes?.data,
              shared.Operation
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Rotates the server certificate to one signed by the Certificate Authority (CA) version previously added with the addServerCA method.
   */
  sqlInstancesRotateServerCa(
    req: operations.SqlInstancesRotateServerCaRequest,
    security: operations.SqlInstancesRotateServerCaSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.SqlInstancesRotateServerCaResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.SqlInstancesRotateServerCaRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/sql/v1beta4/projects/{project}/instances/{instance}/rotateServerCa",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "instancesRotateServerCaRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.SqlInstancesRotateServerCaSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.SqlInstancesRotateServerCaResponse =
        new operations.SqlInstancesRotateServerCaResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.operation = utils.objectToClass(
              httpRes?.data,
              shared.Operation
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Starts the replication in the read replica instance.
   */
  sqlInstancesStartReplica(
    req: operations.SqlInstancesStartReplicaRequest,
    security: operations.SqlInstancesStartReplicaSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.SqlInstancesStartReplicaResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.SqlInstancesStartReplicaRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/sql/v1beta4/projects/{project}/instances/{instance}/startReplica",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.SqlInstancesStartReplicaSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.SqlInstancesStartReplicaResponse =
        new operations.SqlInstancesStartReplicaResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.operation = utils.objectToClass(
              httpRes?.data,
              shared.Operation
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Stops the replication in the read replica instance.
   */
  sqlInstancesStopReplica(
    req: operations.SqlInstancesStopReplicaRequest,
    security: operations.SqlInstancesStopReplicaSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.SqlInstancesStopReplicaResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.SqlInstancesStopReplicaRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/sql/v1beta4/projects/{project}/instances/{instance}/stopReplica",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.SqlInstancesStopReplicaSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.SqlInstancesStopReplicaResponse =
        new operations.SqlInstancesStopReplicaResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.operation = utils.objectToClass(
              httpRes?.data,
              shared.Operation
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Truncate MySQL general and slow query log tables MySQL only.
   */
  sqlInstancesTruncateLog(
    req: operations.SqlInstancesTruncateLogRequest,
    security: operations.SqlInstancesTruncateLogSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.SqlInstancesTruncateLogResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.SqlInstancesTruncateLogRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/sql/v1beta4/projects/{project}/instances/{instance}/truncateLog",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "instancesTruncateLogRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.SqlInstancesTruncateLogSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.SqlInstancesTruncateLogResponse =
        new operations.SqlInstancesTruncateLogResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.operation = utils.objectToClass(
              httpRes?.data,
              shared.Operation
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Updates settings of a Cloud SQL instance. Using this operation might cause your instance to restart.
   */
  sqlInstancesUpdate(
    req: operations.SqlInstancesUpdateRequest,
    security: operations.SqlInstancesUpdateSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.SqlInstancesUpdateResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.SqlInstancesUpdateRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/sql/v1beta4/projects/{project}/instances/{instance}",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "databaseInstanceInput",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.SqlInstancesUpdateSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "put",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.SqlInstancesUpdateResponse =
        new operations.SqlInstancesUpdateResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.operation = utils.objectToClass(
              httpRes?.data,
              shared.Operation
            );
          }
          break;
      }

      return res;
    });
  }
}
