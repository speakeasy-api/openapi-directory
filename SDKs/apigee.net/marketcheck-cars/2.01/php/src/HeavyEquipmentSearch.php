<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class HeavyEquipmentSearch 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Heavy equipment listing by id
     * 
     * Get a particular Heavy equipment listing by its id
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetListingHeavyEquipmentIdRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetListingHeavyEquipmentIdResponse
     */
	public function getListingHeavyEquipmentId(
        \OpenAPI\OpenAPI\Models\Operations\GetListingHeavyEquipmentIdRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetListingHeavyEquipmentIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/listing/heavy-equipment/{id}', \OpenAPI\OpenAPI\Models\Operations\GetListingHeavyEquipmentIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetListingHeavyEquipmentIdRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetListingHeavyEquipmentIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->heavyEquipmentsListing = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\HeavyEquipmentsListing', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Long text Heavy equipment Listings attributes for Listing with the given id
     * 
     * Get Heavy equipment listing options, features, seller comments
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetListingHeavyEquipmentIdExtraRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetListingHeavyEquipmentIdExtraResponse
     */
	public function getListingHeavyEquipmentIdExtra(
        \OpenAPI\OpenAPI\Models\Operations\GetListingHeavyEquipmentIdExtraRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetListingHeavyEquipmentIdExtraResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/listing/heavy-equipment/{id}/extra', \OpenAPI\OpenAPI\Models\Operations\GetListingHeavyEquipmentIdExtraRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetListingHeavyEquipmentIdExtraRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetListingHeavyEquipmentIdExtraResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listingExtraAttributes = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListingExtraAttributes', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Listing media by id
     * 
     * Get listing media (photo, photos) by id
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetListingHeavyEquipmentIdMediaRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetListingHeavyEquipmentIdMediaResponse
     */
	public function getListingHeavyEquipmentIdMedia(
        \OpenAPI\OpenAPI\Models\Operations\GetListingHeavyEquipmentIdMediaRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetListingHeavyEquipmentIdMediaResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/listing/heavy-equipment/{id}/media', \OpenAPI\OpenAPI\Models\Operations\GetListingHeavyEquipmentIdMediaRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetListingHeavyEquipmentIdMediaRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetListingHeavyEquipmentIdMediaResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listingMedia = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListingMedia', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets active heavy equipment listings for the given search criteria
     * 
     * This endpoint provides search on heavy equipment inventory. This API produces a list of currently active heavy equipments from the market for the given search criteria. The API results are limited to allow pagination upto 5000 rows. 
     *  The search API facilitates the following use cases - 
     * 1. Search heavy equipments around a given geo-point within a given radius 
     * 2. Search heavy equipments for a specific year / make / model or combination of these 
     * 3. Search heavy equipments matching multiple year, make, model combinatins in the same search request
     * 4. Filter results by most heavy equipment specification attributes
     * 5. Filter heavy equipments within a given price / miles range
     * 6. Specify a sort order for the results on price / miles / listed date 
     * 7. Search heavy equipments for a given City / State combination 
     * 8. Get Facets to build the search drill downs 
     * 9. Get Market averages for price/miles for your search
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetSearchHeavyEquipmentActiveRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetSearchHeavyEquipmentActiveResponse
     */
	public function getSearchHeavyEquipmentActive(
        \OpenAPI\OpenAPI\Models\Operations\GetSearchHeavyEquipmentActiveRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetSearchHeavyEquipmentActiveResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/search/heavy-equipment/active');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetSearchHeavyEquipmentActiveRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetSearchHeavyEquipmentActiveResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->heavyEquipmentsSearchResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\HeavyEquipmentsSearchResponse', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
	
    /**
     * API for auto-completion of inputs
     * 
     * Auto-complete the inputs of your end users
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetSearchHeavyEquipmentAutoCompleteRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetSearchHeavyEquipmentAutoCompleteResponse
     */
	public function getSearchHeavyEquipmentAutoComplete(
        \OpenAPI\OpenAPI\Models\Operations\GetSearchHeavyEquipmentAutoCompleteRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetSearchHeavyEquipmentAutoCompleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/search/heavy-equipment/auto-complete');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetSearchHeavyEquipmentAutoCompleteRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetSearchHeavyEquipmentAutoCompleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->searchAutoCompleteResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\SearchAutoCompleteResponse', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
}