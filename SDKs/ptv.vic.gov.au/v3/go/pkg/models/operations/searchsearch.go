// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type SearchSearchPathParams struct {
	// Search text (note: if search text is numeric and/or less than 3 characters, the API will only return routes)
	SearchTerm string `pathParam:"style=simple,explode=false,name=search_term"`
}

type SearchSearchRouteTypesEnum string

const (
	SearchSearchRouteTypesEnumZero  SearchSearchRouteTypesEnum = "0"
	SearchSearchRouteTypesEnumOne   SearchSearchRouteTypesEnum = "1"
	SearchSearchRouteTypesEnumTwo   SearchSearchRouteTypesEnum = "2"
	SearchSearchRouteTypesEnumThree SearchSearchRouteTypesEnum = "3"
	SearchSearchRouteTypesEnumFour  SearchSearchRouteTypesEnum = "4"
)

func (e *SearchSearchRouteTypesEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "0":
		fallthrough
	case "1":
		fallthrough
	case "2":
		fallthrough
	case "3":
		fallthrough
	case "4":
		*e = SearchSearchRouteTypesEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for SearchSearchRouteTypesEnum: %s", s)
	}
}

type SearchSearchQueryParams struct {
	// Your developer id
	Devid *string `queryParam:"style=form,explode=true,name=devid"`
	// Placeholder for future development; currently unavailable
	IncludeAddresses *bool `queryParam:"style=form,explode=true,name=include_addresses"`
	// Indicates if outlets will be returned in response (default = true)
	IncludeOutlets *bool `queryParam:"style=form,explode=true,name=include_outlets"`
	// Filter by geographic coordinate of latitude
	Latitude *float32 `queryParam:"style=form,explode=true,name=latitude"`
	// Filter by geographic coordinate of longitude
	Longitude *float32 `queryParam:"style=form,explode=true,name=longitude"`
	// Indicates whether to find routes by suburbs in the search term (default = true)
	MatchRouteBySuburb *bool `queryParam:"style=form,explode=true,name=match_route_by_suburb"`
	// Indicates whether to search for stops according to a metlink stop ID (default = false)
	MatchStopByGtfsStopID *bool `queryParam:"style=form,explode=true,name=match_stop_by_gtfs_stop_id"`
	// Indicates whether to find stops by suburbs in the search term (default = true)
	MatchStopBySuburb *bool `queryParam:"style=form,explode=true,name=match_stop_by_suburb"`
	// Filter by maximum distance (in metres) from location specified via latitude and longitude parameters
	MaxDistance *float32 `queryParam:"style=form,explode=true,name=max_distance"`
	// Filter by route_type; values returned via RouteTypes API (note: stops and routes are ordered by route_types specified)
	RouteTypes []SearchSearchRouteTypesEnum `queryParam:"style=form,explode=true,name=route_types"`
	// Authentication signature for request
	Signature *string `queryParam:"style=form,explode=true,name=signature"`
	// Please ignore
	Token *string `queryParam:"style=form,explode=true,name=token"`
}

type SearchSearchRequest struct {
	PathParams  SearchSearchPathParams
	QueryParams SearchSearchQueryParams
}

type SearchSearchResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Invalid Request
	V3ErrorResponse *shared.V3ErrorResponse
	// Stops, routes and myki ticket outlets that contain the search term (note: stops and routes are ordered by route_type by default).
	V3SearchResult *shared.V3SearchResult
}
