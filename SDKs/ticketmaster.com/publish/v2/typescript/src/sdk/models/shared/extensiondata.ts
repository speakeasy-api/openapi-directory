/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { Source } from "./source";
import { Expose, Type } from "class-transformer";

/**
 * The type of the entity to add this extensions to
 */
export enum ExtensionDataRelatedEntityTypeEnum {
  Event = "event",
  Venue = "venue",
  Attraction = "attraction",
}

/**
 * This class defines an extenstion data on the Publish API
 */
export class ExtensionData extends SpeakeasyBase {
  /**
   * The actual information to add to the entity
   */
  @SpeakeasyMetadata()
  @Expose({ name: "data" })
  data: Record<string, any>;

  /**
   * Id of the entity to add this extionsion to. If the relatedEntityId is Null, a relatedEntitySource MUST be provided
   */
  @SpeakeasyMetadata()
  @Expose({ name: "relatedEntityId" })
  relatedEntityId?: string;

  /**
   * Source
   */
  @SpeakeasyMetadata()
  @Expose({ name: "relatedEntitySource" })
  @Type(() => Source)
  relatedEntitySource?: Source;

  /**
   * The type of the entity to add this extensions to
   */
  @SpeakeasyMetadata()
  @Expose({ name: "relatedEntityType" })
  relatedEntityType: ExtensionDataRelatedEntityTypeEnum;

  /**
   * Source of the extension, where it came from
   */
  @SpeakeasyMetadata()
  @Expose({ name: "source" })
  source: string;

  /**
   * The type of the extension. This represent the data sent
   */
  @SpeakeasyMetadata()
  @Expose({ name: "type" })
  type: string;

  /**
   * Version of the extensions. Version is to prevent to override an extension with an older one
   */
  @SpeakeasyMetadata()
  @Expose({ name: "versionNumber" })
  versionNumber?: number;
}
