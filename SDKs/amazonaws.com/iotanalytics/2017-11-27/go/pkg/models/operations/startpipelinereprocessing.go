// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"net/http"
	"openapi/pkg/models/shared"
	"time"
)

// StartPipelineReprocessingRequestBodyChannelMessages - Specifies one or more sets of channel messages.
type StartPipelineReprocessingRequestBodyChannelMessages struct {
	S3Paths []string `json:"s3Paths,omitempty"`
}

type StartPipelineReprocessingRequestBody struct {
	// Specifies one or more sets of channel messages.
	ChannelMessages *StartPipelineReprocessingRequestBodyChannelMessages `json:"channelMessages,omitempty"`
	// <p>The end time (exclusive) of raw message data that is reprocessed.</p> <p>If you specify a value for the <code>endTime</code> parameter, you must not use the <code>channelMessages</code> object.</p>
	EndTime *time.Time `json:"endTime,omitempty"`
	// <p>The start time (inclusive) of raw message data that is reprocessed.</p> <p>If you specify a value for the <code>startTime</code> parameter, you must not use the <code>channelMessages</code> object.</p>
	StartTime *time.Time `json:"startTime,omitempty"`
}

type StartPipelineReprocessingRequest struct {
	RequestBody       StartPipelineReprocessingRequestBody `request:"mediaType=application/json"`
	XAmzAlgorithm     *string                              `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string                              `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string                              `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string                              `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string                              `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string                              `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string                              `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	// The name of the pipeline on which to start reprocessing.
	PipelineName string `pathParam:"style=simple,explode=false,name=pipelineName"`
}

type StartPipelineReprocessingResponse struct {
	ContentType string
	// InternalFailureException
	InternalFailureException interface{}
	// InvalidRequestException
	InvalidRequestException interface{}
	// ResourceAlreadyExistsException
	ResourceAlreadyExistsException interface{}
	// ResourceNotFoundException
	ResourceNotFoundException interface{}
	// ServiceUnavailableException
	ServiceUnavailableException interface{}
	// Success
	StartPipelineReprocessingResponse *shared.StartPipelineReprocessingResponse
	StatusCode                        int
	RawResponse                       *http.Response
	// ThrottlingException
	ThrottlingException interface{}
}
