// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// PostRoutingVersionNumberCalculateReachableRangeOriginContentTypeRawVehicleEngineTypeEnum - Engine type of the vehicle.
type PostRoutingVersionNumberCalculateReachableRangeOriginContentTypeRawVehicleEngineTypeEnum string

const (
	PostRoutingVersionNumberCalculateReachableRangeOriginContentTypeRawVehicleEngineTypeEnumCombustion PostRoutingVersionNumberCalculateReachableRangeOriginContentTypeRawVehicleEngineTypeEnum = "combustion"
	PostRoutingVersionNumberCalculateReachableRangeOriginContentTypeRawVehicleEngineTypeEnumElectric   PostRoutingVersionNumberCalculateReachableRangeOriginContentTypeRawVehicleEngineTypeEnum = "electric"
)

func (e *PostRoutingVersionNumberCalculateReachableRangeOriginContentTypeRawVehicleEngineTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "combustion":
		fallthrough
	case "electric":
		*e = PostRoutingVersionNumberCalculateReachableRangeOriginContentTypeRawVehicleEngineTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PostRoutingVersionNumberCalculateReachableRangeOriginContentTypeRawVehicleEngineTypeEnum: %s", s)
	}
}

type PostRoutingVersionNumberCalculateReachableRangeOriginContentTypeRawRequest struct {
	RequestBody []byte `request:"mediaType=application/xml"`
	// Specifies the efficiency of converting chemical energy stored in fuel to kinetic energy when the vehicle accelerates (i.e. KineticEnergyGained/ChemicalEnergyConsumed).
	AccelerationEfficiency *float32 `queryParam:"style=form,explode=true,name=accelerationEfficiency"`
	// The date and time of arrival at the destination point. It must be specified as a dateTime.
	ArriveAt *string `queryParam:"style=form,explode=true,name=arriveAt"`
	// Specifies the amount of fuel consumed for sustaining auxiliary systems of the vehicle, in liters per hour.
	AuxiliaryPowerInLitersPerHour *float32 `queryParam:"style=form,explode=true,name=auxiliaryPowerInLitersPerHour"`
	// Specifies whether the routing engine should try to avoid specific types of road segment when calculating the route. Can be specified multiple times.
	// Possible values:
	//   - tollRoads
	//   - motorways
	//   - ferries
	//   - unpavedRoads
	//   - carpools
	Avoid *string `queryParam:"style=form,explode=true,name=avoid"`
	// Specifies the jsonp callback method.
	Callback *string `queryParam:"style=form,explode=true,name=callback"`
	// Specifies the speed-dependent component of consumption. Provided as an unordered list of speed/consumption-rate pairs.
	ConstantSpeedConsumptionInLitersPerHundredkm *string `queryParam:"style=form,explode=true,name=constantSpeedConsumptionInLitersPerHundredkm"`
	// Specifies the speed-dependent component of consumption. Provided as an unordered list of speed/consumption-rate pairs.
	ConstantSpeedConsumptionInkWhPerHundredkm *string `queryParam:"style=form,explode=true,name=constantSpeedConsumptionInkWhPerHundredkm"`
	// The content type of the response structure. If the content type is jsonp, a callback method can be specified in the query parameters.
	ContentType shared.ContentTypeEnum `pathParam:"style=simple,explode=false,name=contentType"`
	// Specifies the current supply of fuel in liters.
	CurrentFuelInLiters *float32 `queryParam:"style=form,explode=true,name=currentFuelInLiters"`
	// Specifies the efficiency of converting kinetic energy to saved (not consumed) fuel when the vehicle decelerates (i.e. ChemicalEnergySaved/KineticEnergyLost).
	DecelerationEfficiency *float32 `queryParam:"style=form,explode=true,name=decelerationEfficiency"`
	// The date and time of departure from the origin point. Departure times apart from <i>now</i> must be specified as a dateTime.
	DepartAt *string `queryParam:"style=form,explode=true,name=departAt"`
	// Specifies the efficiency of converting potential energy to saved (not consumed) fuel when the vehicle loses elevation (i.e. ChemicalEnergySaved/PotentialEnergyLost).
	DownhillEfficiency *float32 `queryParam:"style=form,explode=true,name=downhillEfficiency"`
	// Electric energy budget in kilowatt hours (kWh). Determines the maximum vehicle range using the specified Electric Consumption Model.
	EnergyBudgetInkWh *float32 `queryParam:"style=form,explode=true,name=energyBudgetInkWh"`
	// Fuel budget in liters. Determines the maximum vehicle range using the specified Combustion Consumption Model.
	FuelBudgetInLiters *float32 `queryParam:"style=form,explode=true,name=fuelBudgetInLiters"`
	// Specifies the amount of chemical energy stored in one liter of fuel in megajoules (MJ).
	FuelEnergyDensityInMJoulesPerLiter *float32 `queryParam:"style=form,explode=true,name=fuelEnergyDensityInMJoulesPerLiter"`
	// Degree of hilliness for calculating a thrilling route.
	Hilliness *shared.HillinessEnum `queryParam:"style=form,explode=true,name=hilliness"`
	// Point from which the range calculation should start.
	Origin string `pathParam:"style=simple,explode=false,name=origin"`
	// Specifies which data should be reported for diagnosis purposes.
	Report *shared.ReportEnum `queryParam:"style=form,explode=true,name=report"`
	// The type of route requested.
	RouteType *shared.RouteTypeEnum `queryParam:"style=form,explode=true,name=routeType"`
	// Time budget in seconds. Determines the maximum vehicle range using the specified driving time. The consumption parameters in the request will only affect eco-routes, and thereby indirectly the driving time.
	TimeBudgetInSec *float32 `queryParam:"style=form,explode=true,name=timeBudgetInSec"`
	// Determines whether current traffic is used in route calculations. Note that information on historic road speeds is always used.
	Traffic *bool `queryParam:"style=form,explode=true,name=traffic"`
	// The mode of travel for the requested route.
	TravelMode *shared.TravelModeEnum `queryParam:"style=form,explode=true,name=travelMode"`
	// Specifies the efficiency of converting chemical energy stored in fuel to potential energy when the vehicle gains elevation (i.e. PotentialEnergyGained/ChemicalEnergyConsumed).
	UphillEfficiency *float32 `queryParam:"style=form,explode=true,name=uphillEfficiency"`
	// Weight per axle of the vehicle in kg.
	VehicleAxleWeight *int64 `queryParam:"style=form,explode=true,name=vehicleAxleWeight"`
	// Indicates that the vehicle is used for commercial purposes. This means it may not be allowed on certain roads.
	VehicleCommercial *bool `queryParam:"style=form,explode=true,name=vehicleCommercial"`
	// Engine type of the vehicle.
	VehicleEngineType *PostRoutingVersionNumberCalculateReachableRangeOriginContentTypeRawVehicleEngineTypeEnum `queryParam:"style=form,explode=true,name=vehicleEngineType"`
	// Height of the vehicle in meters.
	VehicleHeight *float32 `queryParam:"style=form,explode=true,name=vehicleHeight"`
	// Length of the vehicle in meters.
	VehicleLength *float32 `queryParam:"style=form,explode=true,name=vehicleLength"`
	// Indicates what kinds of hazardous materials the vehicle is carrying (if any). This means it may not be allowed on certain roads.
	// Use these for routing in the US:
	//
	//   - <i>USHazmatClass1</i> Explosives
	//   - <i>USHazmatClass2</i> Compressed gas
	//   - <i>USHazmatClass3</i> Flammable liquids
	//   - <i>USHazmatClass4</i> Flammable solids
	//   - <i>USHazmatClass5</i> Oxidizers
	//   - <i>USHazmatClass6</i> Poisons
	//   - <i>USHazmatClass7</i> Radioactive
	//   - <i>USHazmatClass8</i> Corrosives
	//   - <i>USHazmatClass9</i> Miscellaneous
	//
	// Use these for routing in all other countries:
	//
	//   - <i>otherHazmatExplosive</i> Explosives
	//   - <i>otherHazmatGeneral</i> Miscellaneous
	//   - <i>otherHazmatHarmfulToWater</i> Harmful to water
	//
	// vehicleLoadType can be specified multiple times. This parameter is currently only considered for <b>travelMode</b>=<i>truck</i>.
	VehicleLoadType *string `queryParam:"style=form,explode=true,name=vehicleLoadType"`
	// Maximum speed of the vehicle in km/hour.
	VehicleMaxSpeed *int64 `queryParam:"style=form,explode=true,name=vehicleMaxSpeed"`
	// Weight of the vehicle in kilograms.
	VehicleWeight *int64 `queryParam:"style=form,explode=true,name=vehicleWeight"`
	// Width of the vehicle in meters.
	VehicleWidth *float32 `queryParam:"style=form,explode=true,name=vehicleWidth"`
	// Service version number. The current value is 1.
	VersionNumber shared.VersionNumberEnum `pathParam:"style=simple,explode=false,name=versionNumber"`
	// Amount that a thrilling route should wind.
	Windingness *shared.WindingnessEnum `queryParam:"style=form,explode=true,name=windingness"`
}

type PostRoutingVersionNumberCalculateReachableRangeOriginContentTypeRawResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
