/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

/**
 * Asset - Secondary domain of a target
 */
public class Asset {
    /**
     * Date time of the last change
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("changed")
    public OffsetDateTime changed;
    public Asset withChanged(OffsetDateTime changed) {
        this.changed = changed;
        return this;
    }
    
    /**
     * User that last modified the object
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("changed_by")
    public ChangedBy changedBy;
    public Asset withChangedBy(ChangedBy changedBy) {
        this.changedBy = changedBy;
        return this;
    }
    
    /**
     * Custom cookies name/value pairs
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("cookies")
    public Cookies[] cookies;
    public Asset withCookies(Cookies[] cookies) {
        this.cookies = cookies;
        return this;
    }
    
    /**
     * Custom description for the resource
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("desc")
    public String desc;
    public Asset withDesc(String desc) {
        this.desc = desc;
        return this;
    }
    
    /**
     * Custom headers name value pairs
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("headers")
    public Headers[] headers;
    public Asset withHeaders(Headers[] headers) {
        this.headers = headers;
        return this;
    }
    
    /**
     * Fully qualified hostname
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("host")
    public String host;
    public Asset withHost(String host) {
        this.host = host;
        return this;
    }
    
    /**
     * Object id.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    public String id;
    public Asset withId(String id) {
        this.id = id;
        return this;
    }
    
    /**
     * Use this asset in scans.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("include")
    public Boolean include;
    public Asset withInclude(Boolean include) {
        this.include = include;
        return this;
    }
    
    /**
     * Custom name for the resource
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    public String name;
    public Asset withName(String name) {
        this.name = name;
        return this;
    }
    
    /**
     * List of frameworks detected on this resource
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("stack")
    public String[] stack;
    public Asset withStack(String[] stack) {
        this.stack = stack;
        return this;
    }
    
    /**
     * Verification date time
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("verification_date")
    public OffsetDateTime verificationDate;
    public Asset withVerificationDate(OffsetDateTime verificationDate) {
        this.verificationDate = verificationDate;
        return this;
    }
    
    /**
     * Reason for last verification failure.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("verification_last_error")
    public String verificationLastError;
    public Asset withVerificationLastError(String verificationLastError) {
        this.verificationLastError = verificationLastError;
        return this;
    }
    
    /**
     * Type of verification:
     * * dns - we look or a TXT record on the host you registered containing
     * `Probely=&lt;verification_token&gt;`
     * * file - on the root of the path you registered we look for a file
     * named `&lt;verification token&gt;` containing `Probely`.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("verification_method")
    public VerificationMethodEnum verificationMethod;
    public Asset withVerificationMethod(VerificationMethodEnum verificationMethod) {
        this.verificationMethod = verificationMethod;
        return this;
    }
    
    /**
     * Token used to verify
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("verification_token")
    public String verificationToken;
    public Asset withVerificationToken(String verificationToken) {
        this.verificationToken = verificationToken;
        return this;
    }
    
    /**
     * Has resource ownership been verified
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("verified")
    public Boolean verified;
    public Asset withVerified(Boolean verified) {
        this.verified = verified;
        return this;
    }
    
}
