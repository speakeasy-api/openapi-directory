// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
	"time"
)

type GetEpisodesSortEnum string

const (
	GetEpisodesSortEnumCreatedAt           GetEpisodesSortEnum = "created_at"
	GetEpisodesSortEnumEarliestReleasedAt  GetEpisodesSortEnum = "earliest_released_at"
	GetEpisodesSortEnumReleasedAt          GetEpisodesSortEnum = "released_at"
	GetEpisodesSortEnumReleasedOrCreatedAt GetEpisodesSortEnum = "released_or_created_at"
	GetEpisodesSortEnumSortTitle           GetEpisodesSortEnum = "sort_title"
	GetEpisodesSortEnumTitle               GetEpisodesSortEnum = "title"
	GetEpisodesSortEnumUpdatedAt           GetEpisodesSortEnum = "updated_at"
)

func (e *GetEpisodesSortEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "created_at":
		fallthrough
	case "earliest_released_at":
		fallthrough
	case "released_at":
		fallthrough
	case "released_or_created_at":
		fallthrough
	case "sort_title":
		fallthrough
	case "title":
		fallthrough
	case "updated_at":
		*e = GetEpisodesSortEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetEpisodesSortEnum: %s", s)
	}
}

type GetEpisodesQueryParams struct {
	// The list of IDs to filter by. Repeat this parameter for each ID you want to include in the filter.
	// The brackets *MUST* be percent-encoded, per the requirements in
	// [RFC 3986 § 3.4](https://tools.ietf.org/html/rfc3986#section-3.4).
	//
	Ids []string `queryParam:"style=form,explode=true,name=ids[]"`
	// Limit the result to episodes usable with an inventory management calendar for the provided AdDeal ID.
	IncludedInInventoryCalendar *string `queryParam:"style=form,explode=true,name=included_in_inventory_calendar"`
	// Limit the result to episodes released in this month.
	Month *string `queryParam:"style=form,explode=true,name=month"`
	// Select which page number to receive results for. Pages are numbered starting at 1.
	//
	//
	PageNumber int64 `queryParam:"style=form,explode=true,name=page[number]"`
	// Indicate how many records to return per page. The maximum is 100.
	//
	//
	PageSize int64 `queryParam:"style=form,explode=true,name=page[size]"`
	// If `true`, limit the result to published episodes only.
	// If `false`, limit the result to _unpublished_ episodes only.
	//
	Published *bool `queryParam:"style=form,explode=true,name=published"`
	// Limit the result to episodes with a title containing this parameter in a case-insensitive way.
	Q *string `queryParam:"style=form,explode=true,name=q"`
	// Limit the result to episodes released after this timestamp.
	ReleasedAfter *time.Time `queryParam:"style=form,explode=true,name=released_after"`
	// Limit the result to episodes released before this timestamp.
	ReleasedBefore *time.Time `queryParam:"style=form,explode=true,name=released_before"`
	// If `true`, limit the result to published and released episodes holding an available media file.
	// If this is `true`, it also changes the default sort order to `-released_at`.
	//
	Rss *bool `queryParam:"style=form,explode=true,name=rss"`
	// Limit result to episodes linked to this season.
	SeasonID *string `queryParam:"style=form,explode=true,name=season_id"`
	// Limit the result to episodes linked to this series.
	SeriesID *string `queryParam:"style=form,explode=true,name=series_id"`
	// Specify how to sort the result. Please refer to either the top section or the
	// [JSON:API specification](https://jsonapi.org/format/#fetching-sorting) on how sorting works in general.
	//
	Sort []GetEpisodesSortEnum `queryParam:"style=form,explode=false,name=sort"`
	// Limit the result to episodes released in this year.
	Year *string `queryParam:"style=form,explode=true,name=year"`
}

type GetEpisodesRequest struct {
	QueryParams GetEpisodesQueryParams
}

// GetEpisodes400ApplicationVndAPIPlusJSONErrorsSource - An object containing references to the source of the error, optionally including any of the following members.
type GetEpisodes400ApplicationVndAPIPlusJSONErrorsSource struct {
	// A string indicating which URI query parameter caused the error.
	Parameter *string `json:"parameter,omitempty"`
	// A JSON Pointer [RFC6901](https://tools.ietf.org/html/rfc6901) to the associated entity in the request document (e.g. `/data` for a primary data object, or `/data/attributes/title` for a specific attribute).
	//
	Pointer *string `json:"pointer,omitempty"`
}

type GetEpisodes400ApplicationVndAPIPlusJSONErrors struct {
	// An application-specific error code, expressed as a string value
	Code *string `json:"code,omitempty"`
	// A human-readable explanation specific to this occurrence of the problem. Like title, this field’s value can be localized.
	//
	Detail *string `json:"detail,omitempty"`
	// An object containing references to the source of the error, optionally including any of the following members.
	//
	Source *GetEpisodes400ApplicationVndAPIPlusJSONErrorsSource `json:"source,omitempty"`
	// The HTTP status code applicable to this problem, expressed as a string value: 400
	Status *string `json:"status,omitempty"`
	// A short, human-readable summary of the problem that SHOULD NOT change from occurrence to occurrence of the
	// problem, except for purposes of localization.
	//
	Title *string `json:"title,omitempty"`
}

// GetEpisodes400ApplicationVndAPIPlusJSON - Bad Request
//
// Parameters requiring a specific format must adhere to that format.
// Pagination must be present and have a positive page number and a page size no larger than 100. One initial filter must be provided (`ids`, `series_id`, or `season_id`).
type GetEpisodes400ApplicationVndAPIPlusJSON struct {
	// An error object describing the problem. Please check out the
	// [JSON:API Error document reference](https://jsonapi.org/format/#error-objects) for a full
	// description of the returned object.
	//
	Errors []GetEpisodes400ApplicationVndAPIPlusJSONErrors `json:"errors,omitempty"`
}

// GetEpisodes200ApplicationVndAPIPlusJSON - Success
type GetEpisodes200ApplicationVndAPIPlusJSON struct {
	Data  []shared.Episode `json:"data,omitempty"`
	Links *shared.Links    `json:"links,omitempty"`
}

type GetEpisodesResponse struct {
	ContentType string
	Headers     map[string][]string
	StatusCode  int
	RawResponse *http.Response
	// Success
	GetEpisodes200ApplicationVndAPIPlusJSONObject *GetEpisodes200ApplicationVndAPIPlusJSON
	// Bad Request
	//
	// Parameters requiring a specific format must adhere to that format.
	// Pagination must be present and have a positive page number and a page size no larger than 100. One initial filter must be provided (`ids`, `series_id`, or `season_id`).
	//
	GetEpisodes400ApplicationVndAPIPlusJSONObject *GetEpisodes400ApplicationVndAPIPlusJSON
}
