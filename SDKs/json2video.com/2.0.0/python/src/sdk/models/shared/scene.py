"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Any, Optional

class SceneTransitionStyleEnum(str, Enum):
    FADE = 'fade'
    WIPELEFT = 'wipeleft'
    WIPERIGHT = 'wiperight'
    WIPEUP = 'wipeup'
    WIPEDOWN = 'wipedown'
    SLIDELEFT = 'slideleft'
    SLIDERIGHT = 'slideright'
    SLIDEUP = 'slideup'
    SLIDEDOWN = 'slidedown'
    CIRCLECROP = 'circlecrop'
    RECTCROP = 'rectcrop'
    DISTANCE = 'distance'
    FADEBLACK = 'fadeblack'
    FADEWHITE = 'fadewhite'
    RADIAL = 'radial'
    SMOOTHLEFT = 'smoothleft'
    SMOOTHRIGHT = 'smoothright'
    SMOOTHUP = 'smoothup'
    SMOOTHDOWN = 'smoothdown'
    CIRCLEOPEN = 'circleopen'
    CIRCLECLOSE = 'circleclose'
    VERTOPEN = 'vertopen'
    VERTCLOSE = 'vertclose'
    HORZOPEN = 'horzopen'
    HORZCLOSE = 'horzclose'
    DISSOLVE = 'dissolve'
    PIXELIZE = 'pixelize'
    DIAGTL = 'diagtl'
    DIAGTR = 'diagtr'
    DIAGBL = 'diagbl'
    DIAGBR = 'diagbr'
    HLSLICE = 'hlslice'
    HRSLICE = 'hrslice'
    VUSLICE = 'vuslice'
    VDSLICE = 'vdslice'
    HBLUR = 'hblur'
    FADEGRAYS = 'fadegrays'
    WIPETL = 'wipetl'
    WIPETR = 'wipetr'
    WIPEBL = 'wipebl'
    WIPEBR = 'wipebr'
    SQUEEZEH = 'squeezeh'
    SQUEEZEV = 'squeezev'
    ZOOMIN = 'zoomin'

class SceneTransitionTypeEnum(str, Enum):
    XFADE = 'xfade'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SceneTransition:
    
    duration: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('duration'), 'exclude': lambda f: f is None }})
    r"""Duration of the transition in seconds"""  
    style: Optional[SceneTransitionStyleEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('style'), 'exclude': lambda f: f is None }})  
    type: Optional[SceneTransitionTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Scene:
    
    background_color: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('background-color'), 'exclude': lambda f: f is None }})
    r"""A hexadecimal representation of a color or 'transparent'"""  
    cache: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cache'), 'exclude': lambda f: f is None }})  
    comment: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('comment'), 'exclude': lambda f: f is None }})
    r"""Used for adding your comments"""  
    duration: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('duration'), 'exclude': lambda f: f is None }})  
    elements: Optional[list[Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('elements'), 'exclude': lambda f: f is None }})  
    transition: Optional[SceneTransition] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('transition'), 'exclude': lambda f: f is None }})  
    