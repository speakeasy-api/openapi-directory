"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from sdk import utils


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ValidationAuthority:
    r"""Settings to access a validation authority server"""
    
    always_valid: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('alwaysValid') }})
    r"""Bypass http calls, every certificates are valids"""  
    bad_ttl: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('badTtl') }})
    r"""The TTL for invalid access response caching"""  
    description: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description') }})
    r"""The description of the settings"""  
    good_ttl: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('goodTtl') }})
    r"""The TTL for valid access response caching"""  
    headers: dict[str, str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('headers') }})
    r"""HTTP call headers"""  
    host: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('host') }})
    r"""The host of the server"""  
    id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id') }})
    r"""The id of the settings"""  
    method: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('method') }})
    r"""The HTTP method"""  
    name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name') }})
    r"""The name of the settings"""  
    no_cache: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('noCache') }})
    r"""Avoid caching responses"""  
    path: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('path') }})
    r"""The URL path"""  
    timeout: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('timeout') }})
    r"""The call timeout"""  
    url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('url') }})
    r"""The URL of the server"""  
    