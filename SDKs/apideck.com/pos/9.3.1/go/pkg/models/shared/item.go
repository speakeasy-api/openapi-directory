// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"time"
)

type ItemCategoriesInput struct {
	ImageIds []string `json:"image_ids,omitempty"`
	Name     *string  `json:"name,omitempty"`
}

type ItemOptions struct {
	AttributeID *string `json:"attribute_id,omitempty"`
	ID          *string `json:"id,omitempty"`
	Name        *string `json:"name,omitempty"`
}

type ItemPricingTypeEnum string

const (
	ItemPricingTypeEnumFixed    ItemPricingTypeEnum = "fixed"
	ItemPricingTypeEnumVariable ItemPricingTypeEnum = "variable"
	ItemPricingTypeEnumPerUnit  ItemPricingTypeEnum = "per_unit"
	ItemPricingTypeEnumOther    ItemPricingTypeEnum = "other"
)

func (e ItemPricingTypeEnum) ToPointer() *ItemPricingTypeEnum {
	return &e
}

func (e *ItemPricingTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "fixed":
		fallthrough
	case "variable":
		fallthrough
	case "per_unit":
		fallthrough
	case "other":
		*e = ItemPricingTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ItemPricingTypeEnum: %v", v)
	}
}

type ItemProductTypeEnum string

const (
	ItemProductTypeEnumRegular ItemProductTypeEnum = "regular"
	ItemProductTypeEnumOther   ItemProductTypeEnum = "other"
)

func (e ItemProductTypeEnum) ToPointer() *ItemProductTypeEnum {
	return &e
}

func (e *ItemProductTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "regular":
		fallthrough
	case "other":
		*e = ItemProductTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ItemProductTypeEnum: %v", v)
	}
}

type ItemVariationsPricingTypeEnum string

const (
	ItemVariationsPricingTypeEnumFixed    ItemVariationsPricingTypeEnum = "fixed"
	ItemVariationsPricingTypeEnumVariable ItemVariationsPricingTypeEnum = "variable"
	ItemVariationsPricingTypeEnumOther    ItemVariationsPricingTypeEnum = "other"
)

func (e ItemVariationsPricingTypeEnum) ToPointer() *ItemVariationsPricingTypeEnum {
	return &e
}

func (e *ItemVariationsPricingTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "fixed":
		fallthrough
	case "variable":
		fallthrough
	case "other":
		*e = ItemVariationsPricingTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ItemVariationsPricingTypeEnum: %v", v)
	}
}

type ItemVariationsInput struct {
	Name                  *string  `json:"name,omitempty"`
	PresentAtAllLocations *bool    `json:"present_at_all_locations,omitempty"`
	PriceAmount           *float64 `json:"price_amount,omitempty"`
	// Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
	PriceCurrency *CurrencyEnum                  `json:"price_currency,omitempty"`
	PricingType   *ItemVariationsPricingTypeEnum `json:"pricing_type,omitempty"`
	Sequence      *float64                       `json:"sequence,omitempty"`
	Sku           *string                        `json:"sku,omitempty"`
	Stockable     *bool                          `json:"stockable,omitempty"`
}

type ItemInput struct {
	Abbreviation *string `json:"abbreviation,omitempty"`
	// A list of locations where the object is not present, even if present_at_all_locations is true. This can include locations that are deactivated.
	AbsentAtLocationIds []string              `json:"absent_at_location_ids,omitempty"`
	Available           *bool                 `json:"available,omitempty"`
	AvailableForPickup  *bool                 `json:"available_for_pickup,omitempty"`
	AvailableOnline     *bool                 `json:"available_online,omitempty"`
	Categories          []ItemCategoriesInput `json:"categories,omitempty"`
	// Product code, e.g. UPC or EAN
	Code        *string  `json:"code,omitempty"`
	Cost        *float64 `json:"cost,omitempty"`
	Deleted     *bool    `json:"deleted,omitempty"`
	Description *string  `json:"description,omitempty"`
	Hidden      *bool    `json:"hidden,omitempty"`
	ID          *string  `json:"id,omitempty"`
	// A value you specify that uniquely identifies this request among requests you have sent.
	IdempotencyKey *string `json:"idempotency_key,omitempty"`
	// True if this item should be counted as revenue. For example, gift cards and donations would not be counted as revenue.
	IsRevenue *bool  `json:"is_revenue,omitempty"`
	Name      string `json:"name"`
	// List of options pertaining to this item's attribute variation
	Options               []ItemOptions `json:"options,omitempty"`
	PresentAtAllLocations *bool         `json:"present_at_all_locations,omitempty"`
	PriceAmount           *float64      `json:"price_amount,omitempty"`
	// Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
	PriceCurrency *CurrencyEnum        `json:"price_currency,omitempty"`
	PricingType   *ItemPricingTypeEnum `json:"pricing_type,omitempty"`
	ProductType   *ItemProductTypeEnum `json:"product_type,omitempty"`
	// SKU of the item
	Sku *string `json:"sku,omitempty"`
	// A list of Tax IDs for the product.
	TaxIds             []string              `json:"tax_ids,omitempty"`
	UseDefaultTaxRates *bool                 `json:"use_default_tax_rates,omitempty"`
	Variations         []ItemVariationsInput `json:"variations,omitempty"`
}

type ItemCategories struct {
	// A unique identifier for an object.
	ID       *string  `json:"id,omitempty"`
	ImageIds []string `json:"image_ids,omitempty"`
	Name     *string  `json:"name,omitempty"`
}

type ItemModifierGroups struct {
	// A unique identifier for an object.
	ID *string `json:"id,omitempty"`
}

type ItemVariations struct {
	// The date and time when the object was created.
	CreatedAt *time.Time `json:"created_at,omitempty"`
	// A unique identifier for an object.
	ID *string `json:"id,omitempty"`
	// A unique identifier for an object.
	ItemID                *string  `json:"item_id,omitempty"`
	Name                  *string  `json:"name,omitempty"`
	PresentAtAllLocations *bool    `json:"present_at_all_locations,omitempty"`
	PriceAmount           *float64 `json:"price_amount,omitempty"`
	// Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
	PriceCurrency *CurrencyEnum                  `json:"price_currency,omitempty"`
	PricingType   *ItemVariationsPricingTypeEnum `json:"pricing_type,omitempty"`
	Sequence      *float64                       `json:"sequence,omitempty"`
	Sku           *string                        `json:"sku,omitempty"`
	Stockable     *bool                          `json:"stockable,omitempty"`
	// The date and time when the object was last updated.
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
	// The user who last updated the object.
	Version *string `json:"version,omitempty"`
}

type Item struct {
	Abbreviation *string `json:"abbreviation,omitempty"`
	// A list of locations where the object is not present, even if present_at_all_locations is true. This can include locations that are deactivated.
	AbsentAtLocationIds []string         `json:"absent_at_location_ids,omitempty"`
	Available           *bool            `json:"available,omitempty"`
	AvailableForPickup  *bool            `json:"available_for_pickup,omitempty"`
	AvailableOnline     *bool            `json:"available_online,omitempty"`
	Categories          []ItemCategories `json:"categories,omitempty"`
	// Product code, e.g. UPC or EAN
	Code *string  `json:"code,omitempty"`
	Cost *float64 `json:"cost,omitempty"`
	// The date and time when the object was created.
	CreatedAt *time.Time `json:"created_at,omitempty"`
	// The user who created the object.
	CreatedBy   *string `json:"created_by,omitempty"`
	Deleted     *bool   `json:"deleted,omitempty"`
	Description *string `json:"description,omitempty"`
	Hidden      *bool   `json:"hidden,omitempty"`
	ID          *string `json:"id,omitempty"`
	// A value you specify that uniquely identifies this request among requests you have sent.
	IdempotencyKey *string `json:"idempotency_key,omitempty"`
	// True if this item should be counted as revenue. For example, gift cards and donations would not be counted as revenue.
	IsRevenue      *bool                `json:"is_revenue,omitempty"`
	ModifierGroups []ItemModifierGroups `json:"modifier_groups,omitempty"`
	Name           string               `json:"name"`
	// List of options pertaining to this item's attribute variation
	Options               []ItemOptions `json:"options,omitempty"`
	PresentAtAllLocations *bool         `json:"present_at_all_locations,omitempty"`
	PriceAmount           *float64      `json:"price_amount,omitempty"`
	// Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
	PriceCurrency *CurrencyEnum        `json:"price_currency,omitempty"`
	PricingType   *ItemPricingTypeEnum `json:"pricing_type,omitempty"`
	ProductType   *ItemProductTypeEnum `json:"product_type,omitempty"`
	// SKU of the item
	Sku *string `json:"sku,omitempty"`
	// A list of Tax IDs for the product.
	TaxIds []string `json:"tax_ids,omitempty"`
	// The date and time when the object was last updated.
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
	// The user who last updated the object.
	UpdatedBy          *string          `json:"updated_by,omitempty"`
	UseDefaultTaxRates *bool            `json:"use_default_tax_rates,omitempty"`
	Variations         []ItemVariations `json:"variations,omitempty"`
	// The user who last updated the object.
	Version *string `json:"version,omitempty"`
}
