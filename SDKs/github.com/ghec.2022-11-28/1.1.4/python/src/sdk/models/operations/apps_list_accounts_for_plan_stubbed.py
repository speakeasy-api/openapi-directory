"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import basic_error as shared_basic_error
from ..shared import marketplace_purchase as shared_marketplace_purchase
from ..shared import sort_enum as shared_sort_enum
from enum import Enum
from typing import Optional

class AppsListAccountsForPlanStubbedDirectionEnum(str, Enum):
    r"""To return the oldest accounts first, set to `asc`. Ignored without the `sort` parameter."""
    ASC = 'asc'
    DESC = 'desc'


@dataclasses.dataclass
class AppsListAccountsForPlanStubbedRequest:
    
    plan_id: int = dataclasses.field(metadata={'path_param': { 'field_name': 'plan_id', 'style': 'simple', 'explode': False }})
    r"""The unique identifier of the plan."""  
    direction: Optional[AppsListAccountsForPlanStubbedDirectionEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'direction', 'style': 'form', 'explode': True }})
    r"""To return the oldest accounts first, set to `asc`. Ignored without the `sort` parameter."""  
    page: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'page', 'style': 'form', 'explode': True }})
    r"""Page number of the results to fetch."""  
    per_page: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'per_page', 'style': 'form', 'explode': True }})
    r"""The number of results per page (max 100)."""  
    sort: Optional[shared_sort_enum.SortEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'sort', 'style': 'form', 'explode': True }})
    r"""The property to sort the results by. `created` means when the repository was starred. `updated` means when the repository was last pushed to."""  
    

@dataclasses.dataclass
class AppsListAccountsForPlanStubbedResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    basic_error: Optional[shared_basic_error.BasicError] = dataclasses.field(default=None)
    r"""Requires authentication"""  
    headers: Optional[dict[str, list[str]]] = dataclasses.field(default=None)  
    marketplace_purchases: Optional[list[shared_marketplace_purchase.MarketplacePurchase]] = dataclasses.field(default=None)
    r"""Response"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    