<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Checks 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Create a check run
     * 
     * **Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array.
     * 
     * Creates a new check run for a specific commit in a repository. Your GitHub App must have the `checks:write` permission to create check runs.
     * 
     * In a check suite, GitHub limits the number of check runs with the same name to 1000. Once these check runs exceed 1000, GitHub will start to automatically delete older check runs.
     * https://docs.github.com/enterprise-server@2.22/rest/reference/checks#create-a-check-run - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ChecksCreateRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ChecksCreateResponse
     * @see https://docs.github.com/enterprise-server@2.22/rest/reference/checks#create-a-check-run
     */
	public function checksCreate(
        \OpenAPI\OpenAPI\Models\Operations\ChecksCreateRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ChecksCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/repos/{owner}/{repo}/check-runs', \OpenAPI\OpenAPI\Models\Operations\ChecksCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ChecksCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->checkRun = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CheckRun', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create a check suite
     * 
     * **Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array and a `null` value for `head_branch`.
     * 
     * By default, check suites are automatically created when you create a [check run](https://docs.github.com/enterprise-server@2.22/rest/reference/checks#check-runs). You only need to use this endpoint for manually creating check suites when you've disabled automatic creation using "[Update repository preferences for check suites](https://docs.github.com/enterprise-server@2.22/rest/reference/checks#update-repository-preferences-for-check-suites)". Your GitHub App must have the `checks:write` permission to create check suites.
     * https://docs.github.com/enterprise-server@2.22/rest/reference/checks#create-a-check-suite - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ChecksCreateSuiteRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ChecksCreateSuiteResponse
     * @see https://docs.github.com/enterprise-server@2.22/rest/reference/checks#create-a-check-suite
     */
	public function checksCreateSuite(
        \OpenAPI\OpenAPI\Models\Operations\ChecksCreateSuiteRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ChecksCreateSuiteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/repos/{owner}/{repo}/check-suites', \OpenAPI\OpenAPI\Models\Operations\ChecksCreateSuiteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ChecksCreateSuiteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->checkSuite = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CheckSuite', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get a check run
     * 
     * **Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array.
     * 
     * Gets a single check run using its `id`. GitHub Apps must have the `checks:read` permission on a private repository or pull access to a public repository to get check runs. OAuth Apps and authenticated users must have the `repo` scope to get check runs in a private repository.
     * https://docs.github.com/enterprise-server@2.22/rest/reference/checks#get-a-check-run - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ChecksGetRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ChecksGetResponse
     * @see https://docs.github.com/enterprise-server@2.22/rest/reference/checks#get-a-check-run
     */
	public function checksGet(
        \OpenAPI\OpenAPI\Models\Operations\ChecksGetRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ChecksGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/repos/{owner}/{repo}/check-runs/{check_run_id}', \OpenAPI\OpenAPI\Models\Operations\ChecksGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ChecksGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->checkRun = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CheckRun', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get a check suite
     * 
     * **Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array and a `null` value for `head_branch`.
     * 
     * Gets a single check suite using its `id`. GitHub Apps must have the `checks:read` permission on a private repository or pull access to a public repository to get check suites. OAuth Apps and authenticated users must have the `repo` scope to get check suites in a private repository.
     * https://docs.github.com/enterprise-server@2.22/rest/reference/checks#get-a-check-suite - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ChecksGetSuiteRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ChecksGetSuiteResponse
     * @see https://docs.github.com/enterprise-server@2.22/rest/reference/checks#get-a-check-suite
     */
	public function checksGetSuite(
        \OpenAPI\OpenAPI\Models\Operations\ChecksGetSuiteRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ChecksGetSuiteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/repos/{owner}/{repo}/check-suites/{check_suite_id}', \OpenAPI\OpenAPI\Models\Operations\ChecksGetSuiteRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ChecksGetSuiteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->checkSuite = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CheckSuite', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List check run annotations
     * 
     * Lists annotations for a check run using the annotation `id`. GitHub Apps must have the `checks:read` permission on a private repository or pull access to a public repository to get annotations for a check run. OAuth Apps and authenticated users must have the `repo` scope to get annotations for a check run in a private repository.
     * https://docs.github.com/enterprise-server@2.22/rest/reference/checks#list-check-run-annotations - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ChecksListAnnotationsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ChecksListAnnotationsResponse
     * @see https://docs.github.com/enterprise-server@2.22/rest/reference/checks#list-check-run-annotations
     */
	public function checksListAnnotations(
        \OpenAPI\OpenAPI\Models\Operations\ChecksListAnnotationsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ChecksListAnnotationsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/repos/{owner}/{repo}/check-runs/{check_run_id}/annotations', \OpenAPI\OpenAPI\Models\Operations\ChecksListAnnotationsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ChecksListAnnotationsRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ChecksListAnnotationsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->checkAnnotations = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\CheckAnnotation>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List check runs for a Git reference
     * 
     * **Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array.
     * 
     * Lists check runs for a commit ref. The `ref` can be a SHA, branch name, or a tag name. GitHub Apps must have the `checks:read` permission on a private repository or pull access to a public repository to get check runs. OAuth Apps and authenticated users must have the `repo` scope to get check runs in a private repository.
     * https://docs.github.com/enterprise-server@2.22/rest/reference/checks#list-check-runs-for-a-git-reference - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ChecksListForRefRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ChecksListForRefResponse
     * @see https://docs.github.com/enterprise-server@2.22/rest/reference/checks#list-check-runs-for-a-git-reference
     */
	public function checksListForRef(
        \OpenAPI\OpenAPI\Models\Operations\ChecksListForRefRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ChecksListForRefResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/repos/{owner}/{repo}/commits/{ref}/check-runs', \OpenAPI\OpenAPI\Models\Operations\ChecksListForRefRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ChecksListForRefRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ChecksListForRefResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->checksListForRef200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ChecksListForRef200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List check runs in a check suite
     * 
     * **Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array.
     * 
     * Lists check runs for a check suite using its `id`. GitHub Apps must have the `checks:read` permission on a private repository or pull access to a public repository to get check runs. OAuth Apps and authenticated users must have the `repo` scope to get check runs in a private repository.
     * https://docs.github.com/enterprise-server@2.22/rest/reference/checks#list-check-runs-in-a-check-suite - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ChecksListForSuiteRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ChecksListForSuiteResponse
     * @see https://docs.github.com/enterprise-server@2.22/rest/reference/checks#list-check-runs-in-a-check-suite
     */
	public function checksListForSuite(
        \OpenAPI\OpenAPI\Models\Operations\ChecksListForSuiteRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ChecksListForSuiteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/repos/{owner}/{repo}/check-suites/{check_suite_id}/check-runs', \OpenAPI\OpenAPI\Models\Operations\ChecksListForSuiteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ChecksListForSuiteRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ChecksListForSuiteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->checksListForSuite200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ChecksListForSuite200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List check suites for a Git reference
     * 
     * **Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array and a `null` value for `head_branch`.
     * 
     * Lists check suites for a commit `ref`. The `ref` can be a SHA, branch name, or a tag name. GitHub Apps must have the `checks:read` permission on a private repository or pull access to a public repository to list check suites. OAuth Apps and authenticated users must have the `repo` scope to get check suites in a private repository.
     * https://docs.github.com/enterprise-server@2.22/rest/reference/checks#list-check-suites-for-a-git-reference - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ChecksListSuitesForRefRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ChecksListSuitesForRefResponse
     * @see https://docs.github.com/enterprise-server@2.22/rest/reference/checks#list-check-suites-for-a-git-reference
     */
	public function checksListSuitesForRef(
        \OpenAPI\OpenAPI\Models\Operations\ChecksListSuitesForRefRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ChecksListSuitesForRefResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/repos/{owner}/{repo}/commits/{ref}/check-suites', \OpenAPI\OpenAPI\Models\Operations\ChecksListSuitesForRefRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ChecksListSuitesForRefRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ChecksListSuitesForRefResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->checksListSuitesForRef200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ChecksListSuitesForRef200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Rerequest a check suite
     * 
     * Triggers GitHub to rerequest an existing check suite, without pushing new code to a repository. This endpoint will trigger the [`check_suite` webhook](https://docs.github.com/enterprise-server@2.22/webhooks/event-payloads/#check_suite) event with the action `rerequested`. When a check suite is `rerequested`, its `status` is reset to `queued` and the `conclusion` is cleared.
     * 
     * To rerequest a check suite, your GitHub App must have the `checks:read` permission on a private repository or pull access to a public repository.
     * https://docs.github.com/enterprise-server@2.22/rest/reference/checks#rerequest-a-check-suite - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ChecksRerequestSuiteRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ChecksRerequestSuiteResponse
     * @see https://docs.github.com/enterprise-server@2.22/rest/reference/checks#rerequest-a-check-suite
     */
	public function checksRerequestSuite(
        \OpenAPI\OpenAPI\Models\Operations\ChecksRerequestSuiteRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ChecksRerequestSuiteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/repos/{owner}/{repo}/check-suites/{check_suite_id}/rerequest', \OpenAPI\OpenAPI\Models\Operations\ChecksRerequestSuiteRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ChecksRerequestSuiteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->checksRerequestSuite201ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update repository preferences for check suites
     * 
     * Changes the default automatic flow when creating check suites. By default, a check suite is automatically created each time code is pushed to a repository. When you disable the automatic creation of check suites, you can manually [Create a check suite](https://docs.github.com/enterprise-server@2.22/rest/reference/checks#create-a-check-suite). You must have admin permissions in the repository to set preferences for check suites.
     * https://docs.github.com/enterprise-server@2.22/rest/reference/checks#update-repository-preferences-for-check-suites - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ChecksSetSuitesPreferencesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ChecksSetSuitesPreferencesResponse
     * @see https://docs.github.com/enterprise-server@2.22/rest/reference/checks#update-repository-preferences-for-check-suites
     */
	public function checksSetSuitesPreferences(
        \OpenAPI\OpenAPI\Models\Operations\ChecksSetSuitesPreferencesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ChecksSetSuitesPreferencesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/repos/{owner}/{repo}/check-suites/preferences', \OpenAPI\OpenAPI\Models\Operations\ChecksSetSuitesPreferencesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ChecksSetSuitesPreferencesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->checkSuitePreference = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CheckSuitePreference', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update a check run
     * 
     * **Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array.
     * 
     * Updates a check run for a specific commit in a repository. Your GitHub App must have the `checks:write` permission to edit check runs.
     * https://docs.github.com/enterprise-server@2.22/rest/reference/checks#update-a-check-run - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ChecksUpdateRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ChecksUpdateResponse
     * @see https://docs.github.com/enterprise-server@2.22/rest/reference/checks#update-a-check-run
     */
	public function checksUpdate(
        \OpenAPI\OpenAPI\Models\Operations\ChecksUpdateRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ChecksUpdateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/repos/{owner}/{repo}/check-runs/{check_run_id}', \OpenAPI\OpenAPI\Models\Operations\ChecksUpdateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ChecksUpdateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->checkRun = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CheckRun', 'json');
            }
        }

        return $response;
    }
}