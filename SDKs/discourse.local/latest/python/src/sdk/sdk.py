"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from .admin import Admin
from .backups import Backups
from .badges import Badges
from .categories import Categories
from .groups import Groups
from .invites import Invites
from .notifications import Notifications
from .posts import Posts
from .private_messages import PrivateMessages
from .search import Search
from .site import Site
from .tags import Tags
from .topics import Topics
from .uploads import Uploads
from .users import Users

SERVERS = [
    "http://discourse.local",
    "https://{defaultHost}",
]
"""Contains the list of servers available to the SDK"""

class SDK:
    r"""This page contains the documentation on how to use Discourse through API calls.
    
    > Note: For any endpoints not listed you can follow the
    [reverse engineer the Discourse API](https://meta.discourse.org/t/-/20576)
    guide to figure out how to use an API endpoint.
    
    ### Request Content-Type
    
    The Content-Type for POST and PUT requests can be set to `application/x-www-form-urlencoded`,
    `multipart/form-data`, or `application/json`.
    
    ### Endpoint Names and Response Content-Type
    
    Most API endpoints provide the same content as their HTML counterparts. For example
    the URL `/categories` serves a list of categories, the `/categories.json` API provides the
    same information in JSON format.
    
    Instead of sending API requests to `/categories.json` you may also send them to `/categories`
    and add an `Accept: application/json` header to the request to get the JSON response.
    Sending requests with the `Accept` header is necessary if you want to use URLs
    for related endpoints returned by the API, such as pagination URLs.
    These URLs are returned without the `.json` prefix so you need to add the header in
    order to get the correct response format.
    
    ### Authentication
    
    Some endpoints do not require any authentication, pretty much anything else will
    require you to be authenticated.
    
    To become authenticated you will need to create an API Key from the admin panel.
    
    Once you have your API Key you can pass it in along with your API Username
    as an HTTP header like this:
    
    ```
    curl -X GET \"http://127.0.0.1:3000/admin/users/list/active.json\" \
    -H \"Api-Key: 714552c6148e1617aeab526d0606184b94a80ec048fc09894ff1a72b740c5f19\" \
    -H \"Api-Username: system\"
    ```
    
    and this is how POST requests will look:
    
    ```
    curl -X POST \"http://127.0.0.1:3000/categories\" \
    -H \"Content-Type: multipart/form-data;\" \
    -H \"Api-Key: 714552c6148e1617aeab526d0606184b94a80ec048fc09894ff1a72b740c5f19\" \
    -H \"Api-Username: system\" \
    -F \"name=89853c20-4409-e91a-a8ea-f6cdff96aaaa\" \
    -F \"color=49d9e9\" \
    -F \"text_color=f0fcfd\"
    ```
    
    ### Boolean values
    
    If an endpoint accepts a boolean be sure to specify it as a lowercase
    `true` or `false` value unless noted otherwise.
    """
    admin: Admin
    backups: Backups
    badges: Badges
    categories: Categories
    groups: Groups
    invites: Invites
    notifications: Notifications
    posts: Posts
    private_messages: PrivateMessages
    search: Search
    site: Site
    tags: Tags
    topics: Topics
    uploads: Uploads
    users: Users

    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str = SERVERS[0]
    _language: str = "python"
    _sdk_version: str = "0.0.1"
    _gen_version: str = "internal"

    def __init__(self,
                 server_url: str = None,
                 url_params: dict[str, str] = None,
                 client: requests_http.Session = None
                 ) -> None:
        """Instantiates the SDK configuring it with the provided parameters.
        
        :param server_url: The server URL to use for all operations
        :type server_url: str
        :param url_params: Parameters to optionally template the server URL with
        :type url_params: dict[str, str]
        :param client: The requests.Session HTTP client to use for all operations
        :type client: requests_http.Session        
        """
        self._client = requests_http.Session()
        
        
        if server_url is not None:
            if url_params is not None:
                self._server_url = utils.template_url(server_url, url_params)
            else:
                self._server_url = server_url

        if client is not None:
            self._client = client
        
        self._security_client = self._client
        

        self._init_sdks()
    
    def _init_sdks(self):
        self.admin = Admin(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.backups = Backups(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.badges = Badges(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.categories = Categories(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.groups = Groups(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.invites = Invites(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.notifications = Notifications(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.posts = Posts(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.private_messages = PrivateMessages(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.search = Search(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.site = Site(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.tags = Tags(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.topics = Topics(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.uploads = Uploads(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.users = Users(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
    