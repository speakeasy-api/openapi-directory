/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

export class GetEventsRequest extends SpeakeasyBase {
  /**
   * The ID of the conversation
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=conversation_id",
  })
  conversationId: string;

  /**
   * The cursor to start returning results from.
   *
   * @remarks
   *
   * You are not expected to provide this manually, but to follow the url provided in `_links.next.href` in the response which contains a `cursor` value
   *
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=cursor",
  })
  cursor?: string;

  /**
   * The ID to end returning events at
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=end_id",
  })
  endId?: string;

  /**
   * The type of event to search for. Does not currently support custom events
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=event_type",
  })
  eventType?: string;

  /**
   * Show the most (`desc`) / least (`asc`) recently created entries first
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=order" })
  order?: shared.OrderEnum;

  /**
   * The number of results returned per page.   The default value is `10`. The maximum value is `100`.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=page_size",
  })
  pageSize?: number;

  /**
   * The ID to start returning events at
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=start_id",
  })
  startId?: string;
}

export class GetEvents200ApplicationJSONEmbeddedData extends SpeakeasyBase {
  /**
   * List of events matching the provided filter
   */
  @SpeakeasyMetadata()
  @Expose({ name: "events" })
  events?: any[];
}

export class GetEvents200ApplicationJSONEmbedded extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "data" })
  @Type(() => GetEvents200ApplicationJSONEmbeddedData)
  data?: GetEvents200ApplicationJSONEmbeddedData;
}

export class GetEvents200ApplicationJSONLinksFirst extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "href" })
  href?: string;
}

export class GetEvents200ApplicationJSONLinksNext extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "href" })
  href?: string;
}

export class GetEvents200ApplicationJSONLinksPrev extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "href" })
  href?: string;
}

export class GetEvents200ApplicationJSONLinksSelf extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "href" })
  href?: string;
}

export class GetEvents200ApplicationJSONLinks extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "first" })
  @Type(() => GetEvents200ApplicationJSONLinksFirst)
  first?: GetEvents200ApplicationJSONLinksFirst;

  @SpeakeasyMetadata()
  @Expose({ name: "next" })
  @Type(() => GetEvents200ApplicationJSONLinksNext)
  next?: GetEvents200ApplicationJSONLinksNext;

  @SpeakeasyMetadata()
  @Expose({ name: "prev" })
  @Type(() => GetEvents200ApplicationJSONLinksPrev)
  prev?: GetEvents200ApplicationJSONLinksPrev;

  @SpeakeasyMetadata()
  @Expose({ name: "self" })
  @Type(() => GetEvents200ApplicationJSONLinksSelf)
  self?: GetEvents200ApplicationJSONLinksSelf;
}

/**
 * OK
 */
export class GetEvents200ApplicationJSON extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "_embedded" })
  @Type(() => GetEvents200ApplicationJSONEmbedded)
  embedded?: GetEvents200ApplicationJSONEmbedded;

  @SpeakeasyMetadata()
  @Expose({ name: "_links" })
  @Type(() => GetEvents200ApplicationJSONLinks)
  links?: GetEvents200ApplicationJSONLinks;

  /**
   * The number of results returned on this page.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "page_size" })
  pageSize?: number;
}

export class GetEventsResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * OK
   */
  @SpeakeasyMetadata()
  getEvents200ApplicationJSONObject?: GetEvents200ApplicationJSON;
}
