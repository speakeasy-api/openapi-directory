/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * MySqlConnectionProfile - Specifies connection parameters required specifically for MySQL databases.
 */
public class MySqlConnectionProfile {
    /**
     * If the source is a Cloud SQL database, use this field to provide the Cloud SQL instance ID of the source.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("cloudSqlId")
    public String cloudSqlId;
    public MySqlConnectionProfile withCloudSqlId(String cloudSqlId) {
        this.cloudSqlId = cloudSqlId;
        return this;
    }
    
    /**
     * Required. The IP or hostname of the source MySQL database.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("host")
    public String host;
    public MySqlConnectionProfile withHost(String host) {
        this.host = host;
        return this;
    }
    
    /**
     * Required. Input only. The password for the user that Database Migration Service will be using to connect to the database. This field is not returned on request, and the value is encrypted when stored in Database Migration Service.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("password")
    public String password;
    public MySqlConnectionProfile withPassword(String password) {
        this.password = password;
        return this;
    }
    
    /**
     * Output only. Indicates If this connection profile password is stored.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("passwordSet")
    public Boolean passwordSet;
    public MySqlConnectionProfile withPasswordSet(Boolean passwordSet) {
        this.passwordSet = passwordSet;
        return this;
    }
    
    /**
     * Required. The network port of the source MySQL database.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("port")
    public Integer port;
    public MySqlConnectionProfile withPort(Integer port) {
        this.port = port;
        return this;
    }
    
    /**
     * SSL configuration information.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ssl")
    public SslConfig ssl;
    public MySqlConnectionProfile withSsl(SslConfig ssl) {
        this.ssl = ssl;
        return this;
    }
    
    /**
     * Required. The username that Database Migration Service will use to connect to the database. The value is encrypted when stored in Database Migration Service.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("username")
    public String username;
    public MySqlConnectionProfile withUsername(String username) {
        this.username = username;
        return this;
    }
    
}
