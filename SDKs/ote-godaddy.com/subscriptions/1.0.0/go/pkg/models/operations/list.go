// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// ListIncludesEnum - Optional details to be included in the response
type ListIncludesEnum string

const (
	ListIncludesEnumAddons    ListIncludesEnum = "addons"
	ListIncludesEnumRelations ListIncludesEnum = "relations"
)

func (e *ListIncludesEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "addons":
		fallthrough
	case "relations":
		*e = ListIncludesEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ListIncludesEnum: %s", s)
	}
}

// ListSortEnum - Property name that will be used to sort results. "-" indicates descending
type ListSortEnum string

const (
	ListSortEnumExpiresAt      ListSortEnum = "expiresAt"
	ListSortEnumMinusExpiresAt ListSortEnum = "-expiresAt"
)

func (e *ListSortEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "expiresAt":
		fallthrough
	case "-expiresAt":
		*e = ListSortEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ListSortEnum: %s", s)
	}
}

type ListRequest struct {
	// The market that the response should be formatted for
	XMarketID *string `header:"style=simple,explode=false,name=X-Market-Id"`
	// Shopper ID to return subscriptions for when not using JWT
	XShopperID *string `header:"style=simple,explode=false,name=X-Shopper-Id"`
	// Optional details to be included in the response
	Includes *ListIncludesEnum `queryParam:"style=form,explode=false,name=includes"`
	// Number of Subscriptions to retrieve in this page, starting after offset
	Limit *int64 `queryParam:"style=form,explode=true,name=limit"`
	// Number of Subscriptions to skip before starting to return paged results (must be a multiple of the limit)
	Offset *int64 `queryParam:"style=form,explode=true,name=offset"`
	// Only return Subscriptions with the specified product groups
	ProductGroupKeys []string `queryParam:"style=form,explode=false,name=productGroupKeys"`
	// Property name that will be used to sort results. "-" indicates descending
	Sort *ListSortEnum `queryParam:"style=form,explode=true,name=sort"`
}

type ListResponse struct {
	Body        []byte
	ContentType string
	// Request was malformed
	Error *shared.Error
	// Too many requests received within interval
	ErrorLimit  *shared.ErrorLimit
	StatusCode  int
	RawResponse *http.Response
	// Request was successful
	SubscriptionList *shared.SubscriptionList
}
