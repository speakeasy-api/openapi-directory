"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import payeetypeenum_enum as shared_payeetypeenum_enum
from dataclasses_json import Undefined, dataclass_json
from datetime import date
from marshmallow import fields
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreatePayeesCSVRequestV4:
    
    address_city: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('addressCity') }})  
    address_country: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('addressCountry') }})
    r"""Valid ISO 3166 2 character country code. See the <a href=\\"https://www.iso.org/iso-3166-country-codes.html\\" target=\\"_blank\\" a>ISO specification</a> for details."""  
    address_line1: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('addressLine1') }})  
    address_zip_or_postcode: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('addressZipOrPostcode') }})  
    email: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('email') }})  
    remote_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('remoteId') }})  
    type: shared_payeetypeenum_enum.PayeeTypeEnumEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type') }})
    r"""The type of the payee"""  
    address_county_or_province: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('addressCountyOrProvince'), 'exclude': lambda f: f is None }})  
    address_line2: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('addressLine2'), 'exclude': lambda f: f is None }})  
    address_line3: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('addressLine3'), 'exclude': lambda f: f is None }})  
    address_line4: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('addressLine4'), 'exclude': lambda f: f is None }})  
    challenge_description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('challengeDescription'), 'exclude': lambda f: f is None }})  
    challenge_value: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('challengeValue'), 'exclude': lambda f: f is None }})  
    company_ein: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('companyEIN'), 'exclude': lambda f: f is None }})  
    company_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('companyName'), 'exclude': lambda f: f is None }})  
    company_operating_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('companyOperatingName'), 'exclude': lambda f: f is None }})  
    individual_date_of_birth: Optional[date] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('individualDateOfBirth'), 'encoder': utils.dateisoformat(True), 'decoder': utils.datefromisoformat, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""Must not be date in future. Example - 1970-05-20"""  
    individual_first_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('individualFirstName'), 'exclude': lambda f: f is None }})  
    individual_last_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('individualLastName'), 'exclude': lambda f: f is None }})  
    individual_national_identification: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('individualNationalIdentification'), 'exclude': lambda f: f is None }})  
    individual_other_names: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('individualOtherNames'), 'exclude': lambda f: f is None }})  
    individual_title: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('individualTitle'), 'exclude': lambda f: f is None }})  
    payee_language: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('payeeLanguage'), 'exclude': lambda f: f is None }})
    r"""An IETF BCP 47 language code which has been configured for use within this Velo environment.<BR>
    See the /v1/supportedLanguages endpoint to list the available codes for an environment.
    """  
    payment_channel_account_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('paymentChannelAccountName'), 'exclude': lambda f: f is None }})  
    payment_channel_account_number: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('paymentChannelAccountNumber'), 'exclude': lambda f: f is None }})
    r"""Either routing number and account number or only iban must be set"""  
    payment_channel_country_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('paymentChannelCountryCode'), 'exclude': lambda f: f is None }})
    r"""Valid ISO 3166 2 character country code. See the <a href=\\"https://www.iso.org/iso-3166-country-codes.html\\" target=\\"_blank\\" a>ISO specification</a> for details."""  
    payment_channel_currency: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('paymentChannelCurrency'), 'exclude': lambda f: f is None }})  
    payment_channel_iban: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('paymentChannelIban'), 'exclude': lambda f: f is None }})
    r"""Must match the regular expression ```^[A-Za-z0-9]+$```."""  
    payment_channel_routing_number: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('paymentChannelRoutingNumber'), 'exclude': lambda f: f is None }})
    r"""Either routing number and account number or only iban must be set"""  
    