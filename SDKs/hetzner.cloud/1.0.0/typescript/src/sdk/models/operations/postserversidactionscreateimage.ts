/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

/**
 * User-defined labels (key-value pairs)
 */
export class PostServersIdActionsCreateImageCreateImageRequestLabels extends SpeakeasyBase {
  /**
   * New label
   */
  @SpeakeasyMetadata()
  @Expose({ name: "labelkey" })
  labelkey?: string;
}

/**
 * Type of Image to create (default: `snapshot`)
 */
export enum PostServersIdActionsCreateImageCreateImageRequestTypeEnum {
  Snapshot = "snapshot",
  Backup = "backup",
}

export class PostServersIdActionsCreateImageCreateImageRequest extends SpeakeasyBase {
  /**
   * Description of the Image, will be auto-generated if not set
   */
  @SpeakeasyMetadata()
  @Expose({ name: "description" })
  description?: string;

  /**
   * User-defined labels (key-value pairs)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "labels" })
  @Type(() => PostServersIdActionsCreateImageCreateImageRequestLabels)
  labels?: PostServersIdActionsCreateImageCreateImageRequestLabels;

  /**
   * Type of Image to create (default: `snapshot`)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "type" })
  type?: PostServersIdActionsCreateImageCreateImageRequestTypeEnum;
}

export class PostServersIdActionsCreateImageRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  requestBody?: PostServersIdActionsCreateImageCreateImageRequest;

  /**
   * ID of the Server
   */
  @SpeakeasyMetadata({ data: "pathParam, style=simple;explode=false;name=id" })
  id: number;
}

/**
 * Error message for the Action if error occurred, otherwise null
 */
export class PostServersIdActionsCreateImage201ApplicationJSONActionError extends SpeakeasyBase {
  /**
   * Fixed machine readable code
   */
  @SpeakeasyMetadata()
  @Expose({ name: "code" })
  code: string;

  /**
   * Humanized error message
   */
  @SpeakeasyMetadata()
  @Expose({ name: "message" })
  message: string;
}

export class PostServersIdActionsCreateImage201ApplicationJSONActionResources extends SpeakeasyBase {
  /**
   * ID of the Resource
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id: number;

  /**
   * Type of resource referenced
   */
  @SpeakeasyMetadata()
  @Expose({ name: "type" })
  type: string;
}

/**
 * Status of the Action
 */
export enum PostServersIdActionsCreateImage201ApplicationJSONActionStatusEnum {
  Success = "success",
  Running = "running",
  Error = "error",
}

export class PostServersIdActionsCreateImage201ApplicationJSONAction extends SpeakeasyBase {
  /**
   * Command executed in the Action
   */
  @SpeakeasyMetadata()
  @Expose({ name: "command" })
  command: string;

  /**
   * Error message for the Action if error occurred, otherwise null
   */
  @SpeakeasyMetadata()
  @Expose({ name: "error" })
  @Type(() => PostServersIdActionsCreateImage201ApplicationJSONActionError)
  error: PostServersIdActionsCreateImage201ApplicationJSONActionError;

  /**
   * Point in time when the Action was finished (in ISO-8601 format). Only set if the Action is finished otherwise null.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "finished" })
  finished: string;

  /**
   * ID of the Resource
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id: number;

  /**
   * Progress of Action in percent
   */
  @SpeakeasyMetadata()
  @Expose({ name: "progress" })
  progress: number;

  /**
   * Resources the Action relates to
   */
  @SpeakeasyMetadata({
    elemType: PostServersIdActionsCreateImage201ApplicationJSONActionResources,
  })
  @Expose({ name: "resources" })
  @Type(() => PostServersIdActionsCreateImage201ApplicationJSONActionResources)
  resources: PostServersIdActionsCreateImage201ApplicationJSONActionResources[];

  /**
   * Point in time when the Action was started (in ISO-8601 format)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "started" })
  started: string;

  /**
   * Status of the Action
   */
  @SpeakeasyMetadata()
  @Expose({ name: "status" })
  status: PostServersIdActionsCreateImage201ApplicationJSONActionStatusEnum;
}

/**
 * Information about the Server the Image was created from
 */
export class PostServersIdActionsCreateImage201ApplicationJSONImageCreatedFrom extends SpeakeasyBase {
  /**
   * ID of the Server the Image was created from
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id: number;

  /**
   * Server name at the time the Image was created
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name: string;
}

/**
 * Flavor of operating system contained in the Image
 */
export enum PostServersIdActionsCreateImage201ApplicationJSONImageOsFlavorEnum {
  Ubuntu = "ubuntu",
  Centos = "centos",
  Debian = "debian",
  Fedora = "fedora",
  Unknown = "unknown",
}

/**
 * Protection configuration for the Resource
 */
export class PostServersIdActionsCreateImage201ApplicationJSONImageProtection extends SpeakeasyBase {
  /**
   * If true, prevents the Resource from being deleted
   */
  @SpeakeasyMetadata()
  @Expose({ name: "delete" })
  delete: boolean;
}

/**
 * Whether the Image can be used or if it's still being created or unavailable
 */
export enum PostServersIdActionsCreateImage201ApplicationJSONImageStatusEnum {
  Available = "available",
  Creating = "creating",
  Unavailable = "unavailable",
}

/**
 * Type of the Image
 */
export enum PostServersIdActionsCreateImage201ApplicationJSONImageTypeEnum {
  System = "system",
  App = "app",
  Snapshot = "snapshot",
  Backup = "backup",
  Temporary = "temporary",
}

export class PostServersIdActionsCreateImage201ApplicationJSONImage extends SpeakeasyBase {
  /**
   * ID of Server the Image is bound to. Only set for Images of type `backup`.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "bound_to" })
  boundTo: number;

  /**
   * Point in time when the Resource was created (in ISO-8601 format)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "created" })
  created: string;

  /**
   * Information about the Server the Image was created from
   */
  @SpeakeasyMetadata()
  @Expose({ name: "created_from" })
  @Type(() => PostServersIdActionsCreateImage201ApplicationJSONImageCreatedFrom)
  createdFrom: PostServersIdActionsCreateImage201ApplicationJSONImageCreatedFrom;

  /**
   * Point in time where the Image was deleted (in ISO-8601 format)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "deleted" })
  deleted: string;

  /**
   * Point in time when the Image is considered to be deprecated (in ISO-8601 format)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "deprecated" })
  deprecated: string;

  /**
   * Description of the Image
   */
  @SpeakeasyMetadata()
  @Expose({ name: "description" })
  description: string;

  /**
   * Size of the disk contained in the Image in GB
   */
  @SpeakeasyMetadata()
  @Expose({ name: "disk_size" })
  diskSize: number;

  /**
   * ID of the Resource
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id: number;

  /**
   * Size of the Image file in our storage in GB. For snapshot Images this is the value relevant for calculating costs for the Image.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "image_size" })
  imageSize: number;

  /**
   * User-defined labels (key-value pairs)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "labels" })
  labels: Record<string, string>;

  /**
   * Unique identifier of the Image. This value is only set for system Images.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name: string;

  /**
   * Flavor of operating system contained in the Image
   */
  @SpeakeasyMetadata()
  @Expose({ name: "os_flavor" })
  osFlavor: PostServersIdActionsCreateImage201ApplicationJSONImageOsFlavorEnum;

  /**
   * Operating system version
   */
  @SpeakeasyMetadata()
  @Expose({ name: "os_version" })
  osVersion: string;

  /**
   * Protection configuration for the Resource
   */
  @SpeakeasyMetadata()
  @Expose({ name: "protection" })
  @Type(() => PostServersIdActionsCreateImage201ApplicationJSONImageProtection)
  protection: PostServersIdActionsCreateImage201ApplicationJSONImageProtection;

  /**
   * Indicates that rapid deploy of the Image is available
   */
  @SpeakeasyMetadata()
  @Expose({ name: "rapid_deploy" })
  rapidDeploy?: boolean;

  /**
   * Whether the Image can be used or if it's still being created or unavailable
   */
  @SpeakeasyMetadata()
  @Expose({ name: "status" })
  status: PostServersIdActionsCreateImage201ApplicationJSONImageStatusEnum;

  /**
   * Type of the Image
   */
  @SpeakeasyMetadata()
  @Expose({ name: "type" })
  type: PostServersIdActionsCreateImage201ApplicationJSONImageTypeEnum;
}

/**
 * The `image` key in the reply contains an the created Image, which is an object with this structure
 *
 * @remarks
 *
 * The `action` key in the reply contains an Action object with this structure
 *
 */
export class PostServersIdActionsCreateImage201ApplicationJSON extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "action" })
  @Type(() => PostServersIdActionsCreateImage201ApplicationJSONAction)
  action?: PostServersIdActionsCreateImage201ApplicationJSONAction;

  @SpeakeasyMetadata()
  @Expose({ name: "image" })
  @Type(() => PostServersIdActionsCreateImage201ApplicationJSONImage)
  image?: PostServersIdActionsCreateImage201ApplicationJSONImage;
}

export class PostServersIdActionsCreateImageResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * The `image` key in the reply contains an the created Image, which is an object with this structure
   *
   * @remarks
   *
   * The `action` key in the reply contains an Action object with this structure
   *
   */
  @SpeakeasyMetadata()
  postServersIdActionsCreateImage201ApplicationJSONObject?: PostServersIdActionsCreateImage201ApplicationJSON;
}
