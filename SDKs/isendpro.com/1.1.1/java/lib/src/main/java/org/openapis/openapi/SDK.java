/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi;

import org.openapis.openapi.utils.HTTPClient;
import org.openapis.openapi.utils.SpeakeasyHTTPClient;

/**
 * [1] Liste des fonctionnalit\u00e9s :
 * - envoi de SMS \u00e0 un ou plusieurs destinataires,
 * - lookup HLR,
 * - r\u00e9cup\u00e9ration des r\u00e9capitulatifs de campagne,
 * - gestion des r\u00e9pertoires,
 * - ajout en liste noire.
 * - comptage du nombre de caract\u00e8res des SMS
 * 
 * [2] Pour utiliser cette API vous devez:
 * - Cr\u00e9er un compte iSendPro sur https://isendpro.com/
 * - Cr\u00e9diter votre compte 
 *     - Remarque: obtention d'un cr\u00e9dit de test possible sous conditions
 * - Noter votre cl\u00e9 de compte (keyid)
 *   - Elle vous sera indispensable \u00e0 l'utilisation de l'API
 *   - Vous pouvez la trouver dans le rubrique mon "compte", sous-rubrique "mon API"
 * - Configurer le contr\u00f4le IP
 *   - Le contr\u00f4le IP est configurable dans le rubrique mon "compte", sous-rubrique "mon API"
 *   - Il s'agit d'un syst\u00e8me de liste blanche, vous devez entrer les IP utilis\u00e9es pour appeler l'API
 *   - Vous pouvez \u00e9galement d\u00e9sactiver totalement le contr\u00f4le IP
 * 
 */
public class SDK {
	/**
	 * SERVERS contains the list of server urls available to the SDK.
	 */
	public static final String[] SERVERS = {
        "https://apirest.isendpro.com/cgi-bin",
        "http://apirest.isendpro.com/cgi-bin",
	};
  	
    public AddShortlink addShortlink;
    public AddSubaccount addSubaccount;
    public Campagne campagne;
    public Comptage comptage;
    public Credit credit;
    public DelListeNoire delListeNoire;
    public EditSubaccount editSubaccount;
    public GetListeNoire getListeNoire;
    public Hlr hlr;
    public Repertoire repertoire;
    public SetListeNoire setListeNoire;
    public Sms sms;	

	private HTTPClient _defaultClient;
	private HTTPClient _securityClient;
	
	private String _serverUrl;
	private String _language = "java";
	private String _sdkVersion = "0.0.1";
	private String _genVersion = "internal";
	/**
	 * The Builder class allows the configuration of a new instance of the SDK.
	 */
	public static class Builder {
		private HTTPClient client;
		
		private String serverUrl;
		private java.util.Map<String, String> params = new java.util.HashMap<String, String>();

		private Builder() {
		}

		/**
		 * Allows the default HTTP client to be overridden with a custom implementation.
		 * @param client The HTTP client to use for all requests.
		 * @return The builder instance.
		 */
		public Builder setClient(HTTPClient client) {
			this.client = client;
			return this;
		}
		
		/**
		 * Allows the overriding of the default server URL.
		 * @param serverUrl The server URL to use for all requests.
		 * @return The builder instance.
		 */
		public Builder setServerURL(String serverUrl) {
			this.serverUrl = serverUrl;
			return this;
		}
		
		/**
		 * Allows the overriding of the default server URL  with a templated URL populated with the provided parameters.
		 * @param serverUrl The server URL to use for all requests.
		 * @param params The parameters to use when templating the URL.
		 * @return The builder instance.
		 */
		public Builder setServerURL(String serverUrl, java.util.Map<String, String> params) {
			this.serverUrl = serverUrl;
			this.params = params;
			return this;
		}
		
		/**
		 * Builds a new instance of the SDK.
		 * @return The SDK instance.
		 * @throws Exception Thrown if the SDK could not be built.
		 */
		public SDK build() throws Exception {
			return new SDK(this.client, this.serverUrl, this.params);
		}
	}

	/**
	 * Get a new instance of the SDK builder to configure a new instance of the SDK.
	 * @return The SDK builder instance.
	 */
	public static Builder builder() {
		return new Builder();
	}

	private SDK(HTTPClient client, String serverUrl, java.util.Map<String, String> params) throws Exception {
		this._defaultClient = client;
		
		if (this._defaultClient == null) {
			this._defaultClient = new SpeakeasyHTTPClient();
		}
		
		if (this._securityClient == null) {
			this._securityClient = this._defaultClient;
		}

		if (serverUrl != null && !serverUrl.isBlank()) {
			this._serverUrl = org.openapis.openapi.utils.Utils.templateUrl(serverUrl, params);
		}
		
		if (this._serverUrl == null) {
			this._serverUrl = SERVERS[0];
		}

		if (this._serverUrl.endsWith("/")) {
            this._serverUrl = this._serverUrl.substring(0, this._serverUrl.length() - 1);
        }

		
		
		this.addShortlink = new AddShortlink(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.addSubaccount = new AddSubaccount(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.campagne = new Campagne(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.comptage = new Comptage(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.credit = new Credit(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.delListeNoire = new DelListeNoire(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.editSubaccount = new EditSubaccount(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.getListeNoire = new GetListeNoire(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.hlr = new Hlr(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.repertoire = new Repertoire(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.setListeNoire = new SetListeNoire(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.sms = new Sms(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
	}
}