"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Any, Optional

class Sites:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def firebasehosting_sites_channels_create(self, request: operations.FirebasehostingSitesChannelsCreateRequest, security: operations.FirebasehostingSitesChannelsCreateSecurity) -> operations.FirebasehostingSitesChannelsCreateResponse:
        r"""Creates a new channel in the specified site."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.FirebasehostingSitesChannelsCreateRequest, base_url, '/v1beta1/{parent}/channels', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "channel_input", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.FirebasehostingSitesChannelsCreateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.FirebasehostingSitesChannelsCreateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Channel])
                res.channel = out

        return res

    def firebasehosting_sites_channels_list(self, request: operations.FirebasehostingSitesChannelsListRequest, security: operations.FirebasehostingSitesChannelsListSecurity) -> operations.FirebasehostingSitesChannelsListResponse:
        r"""Lists the channels for the specified site. All sites have a default `live` channel."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.FirebasehostingSitesChannelsListRequest, base_url, '/v1beta1/{parent}/channels', request)
        
        query_params = utils.get_query_params(operations.FirebasehostingSitesChannelsListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.FirebasehostingSitesChannelsListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ListChannelsResponse])
                res.list_channels_response = out

        return res

    def firebasehosting_sites_domains_create(self, request: operations.FirebasehostingSitesDomainsCreateRequest, security: operations.FirebasehostingSitesDomainsCreateSecurity) -> operations.FirebasehostingSitesDomainsCreateResponse:
        r"""Creates a domain mapping on the specified site."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.FirebasehostingSitesDomainsCreateRequest, base_url, '/v1beta1/{parent}/domains', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "domain", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.FirebasehostingSitesDomainsCreateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.FirebasehostingSitesDomainsCreateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Domain])
                res.domain = out

        return res

    def firebasehosting_sites_domains_list(self, request: operations.FirebasehostingSitesDomainsListRequest, security: operations.FirebasehostingSitesDomainsListSecurity) -> operations.FirebasehostingSitesDomainsListResponse:
        r"""Lists the domains for the specified site."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.FirebasehostingSitesDomainsListRequest, base_url, '/v1beta1/{parent}/domains', request)
        
        query_params = utils.get_query_params(operations.FirebasehostingSitesDomainsListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.FirebasehostingSitesDomainsListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ListDomainsResponse])
                res.list_domains_response = out

        return res

    def firebasehosting_sites_domains_update(self, request: operations.FirebasehostingSitesDomainsUpdateRequest, security: operations.FirebasehostingSitesDomainsUpdateSecurity) -> operations.FirebasehostingSitesDomainsUpdateResponse:
        r"""Updates the specified domain mapping, creating the mapping as if it does not exist."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.FirebasehostingSitesDomainsUpdateRequest, base_url, '/v1beta1/{name}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "domain", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.FirebasehostingSitesDomainsUpdateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PUT', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.FirebasehostingSitesDomainsUpdateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Domain])
                res.domain = out

        return res

    def firebasehosting_sites_releases_create(self, request: operations.FirebasehostingSitesReleasesCreateRequest, security: operations.FirebasehostingSitesReleasesCreateSecurity) -> operations.FirebasehostingSitesReleasesCreateResponse:
        r"""Creates a new release, which makes the content of the specified version actively display on the appropriate URL(s)."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.FirebasehostingSitesReleasesCreateRequest, base_url, '/v1beta1/{parent}/releases', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "release", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.FirebasehostingSitesReleasesCreateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.FirebasehostingSitesReleasesCreateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Release])
                res.release = out

        return res

    def firebasehosting_sites_releases_list(self, request: operations.FirebasehostingSitesReleasesListRequest, security: operations.FirebasehostingSitesReleasesListSecurity) -> operations.FirebasehostingSitesReleasesListResponse:
        r"""Lists the releases that have been created for the specified site or channel. When used to list releases for a site, this list includes releases for both the default `live` channel and any active preview channels for the specified site."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.FirebasehostingSitesReleasesListRequest, base_url, '/v1beta1/{parent}/releases', request)
        
        query_params = utils.get_query_params(operations.FirebasehostingSitesReleasesListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.FirebasehostingSitesReleasesListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ListReleasesResponse])
                res.list_releases_response = out

        return res

    def firebasehosting_sites_versions_clone(self, request: operations.FirebasehostingSitesVersionsCloneRequest, security: operations.FirebasehostingSitesVersionsCloneSecurity) -> operations.FirebasehostingSitesVersionsCloneResponse:
        r"""Creates a new version on the specified target site using the content of the specified version."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.FirebasehostingSitesVersionsCloneRequest, base_url, '/v1beta1/{parent}/versions:clone', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "clone_version_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.FirebasehostingSitesVersionsCloneRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.FirebasehostingSitesVersionsCloneResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Operation])
                res.operation = out

        return res

    def firebasehosting_sites_versions_create(self, request: operations.FirebasehostingSitesVersionsCreateRequest, security: operations.FirebasehostingSitesVersionsCreateSecurity) -> operations.FirebasehostingSitesVersionsCreateResponse:
        r"""Creates a new version for the specified site."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.FirebasehostingSitesVersionsCreateRequest, base_url, '/v1beta1/{parent}/versions', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "version", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.FirebasehostingSitesVersionsCreateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.FirebasehostingSitesVersionsCreateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Version])
                res.version = out

        return res

    def firebasehosting_sites_versions_delete(self, request: operations.FirebasehostingSitesVersionsDeleteRequest, security: operations.FirebasehostingSitesVersionsDeleteSecurity) -> operations.FirebasehostingSitesVersionsDeleteResponse:
        r"""Deletes the specified version."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.FirebasehostingSitesVersionsDeleteRequest, base_url, '/v1beta1/{name}', request)
        
        query_params = utils.get_query_params(operations.FirebasehostingSitesVersionsDeleteRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.FirebasehostingSitesVersionsDeleteResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.empty = out

        return res

    def firebasehosting_sites_versions_files_list(self, request: operations.FirebasehostingSitesVersionsFilesListRequest, security: operations.FirebasehostingSitesVersionsFilesListSecurity) -> operations.FirebasehostingSitesVersionsFilesListResponse:
        r"""Lists the remaining files to be uploaded for the specified version."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.FirebasehostingSitesVersionsFilesListRequest, base_url, '/v1beta1/{parent}/files', request)
        
        query_params = utils.get_query_params(operations.FirebasehostingSitesVersionsFilesListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.FirebasehostingSitesVersionsFilesListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ListVersionFilesResponse])
                res.list_version_files_response = out

        return res

    def firebasehosting_sites_versions_get(self, request: operations.FirebasehostingSitesVersionsGetRequest, security: operations.FirebasehostingSitesVersionsGetSecurity) -> operations.FirebasehostingSitesVersionsGetResponse:
        r"""Get the specified version that has been created for the specified site. This can include versions that were created for the default `live` channel or for any active preview channels for the specified site."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.FirebasehostingSitesVersionsGetRequest, base_url, '/v1beta1/{name}', request)
        
        query_params = utils.get_query_params(operations.FirebasehostingSitesVersionsGetRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.FirebasehostingSitesVersionsGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Version])
                res.version = out

        return res

    def firebasehosting_sites_versions_list(self, request: operations.FirebasehostingSitesVersionsListRequest, security: operations.FirebasehostingSitesVersionsListSecurity) -> operations.FirebasehostingSitesVersionsListResponse:
        r"""Lists the versions that have been created for the specified site. This list includes versions for both the default `live` channel and any active preview channels for the specified site."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.FirebasehostingSitesVersionsListRequest, base_url, '/v1beta1/{parent}/versions', request)
        
        query_params = utils.get_query_params(operations.FirebasehostingSitesVersionsListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.FirebasehostingSitesVersionsListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ListVersionsResponse])
                res.list_versions_response = out

        return res

    def firebasehosting_sites_versions_patch(self, request: operations.FirebasehostingSitesVersionsPatchRequest, security: operations.FirebasehostingSitesVersionsPatchSecurity) -> operations.FirebasehostingSitesVersionsPatchResponse:
        r"""Updates the specified metadata for the specified version. This method will fail with `FAILED_PRECONDITION` in the event of an invalid state transition. The supported [state](../sites.versions#versionstatus) transitions for a version are from `CREATED` to `FINALIZED`. Use [`DeleteVersion`](delete) to set the status of a version to `DELETED`."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.FirebasehostingSitesVersionsPatchRequest, base_url, '/v1beta1/{name}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "version", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.FirebasehostingSitesVersionsPatchRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PATCH', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.FirebasehostingSitesVersionsPatchResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Version])
                res.version = out

        return res

    def firebasehosting_sites_versions_populate_files(self, request: operations.FirebasehostingSitesVersionsPopulateFilesRequest, security: operations.FirebasehostingSitesVersionsPopulateFilesSecurity) -> operations.FirebasehostingSitesVersionsPopulateFilesResponse:
        r"""Adds content files to the specified version. Each file must be under 2 GB."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.FirebasehostingSitesVersionsPopulateFilesRequest, base_url, '/v1beta1/{parent}:populateFiles', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "populate_version_files_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.FirebasehostingSitesVersionsPopulateFilesRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.FirebasehostingSitesVersionsPopulateFilesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.PopulateVersionFilesResponse])
                res.populate_version_files_response = out

        return res

    