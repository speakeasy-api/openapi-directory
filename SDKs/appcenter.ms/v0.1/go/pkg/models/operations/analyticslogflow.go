// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
	"time"
)

type AnalyticsLogFlowSecurity struct {
	APIToken shared.SchemeAPIToken `security:"scheme,type=apiKey,subtype=header"`
}

type AnalyticsLogFlowPathParams struct {
	// The name of the application
	AppName string `pathParam:"style=simple,explode=false,name=app_name"`
	// The name of the owner
	OwnerName string `pathParam:"style=simple,explode=false,name=owner_name"`
}

type AnalyticsLogFlowQueryParams struct {
	// Start date time in data in ISO 8601 date time format. It must be within the current day in the UTC timezone. The default value is the start time of the current day in UTC timezone.
	Start *time.Time `queryParam:"style=form,explode=true,name=start"`
}

type AnalyticsLogFlowRequest struct {
	PathParams  AnalyticsLogFlowPathParams
	QueryParams AnalyticsLogFlowQueryParams
	Security    AnalyticsLogFlowSecurity
}

type AnalyticsLogFlowDefaultApplicationJSONErrorCodeEnum string

const (
	AnalyticsLogFlowDefaultApplicationJSONErrorCodeEnumBadRequest          AnalyticsLogFlowDefaultApplicationJSONErrorCodeEnum = "BadRequest"
	AnalyticsLogFlowDefaultApplicationJSONErrorCodeEnumConflict            AnalyticsLogFlowDefaultApplicationJSONErrorCodeEnum = "Conflict"
	AnalyticsLogFlowDefaultApplicationJSONErrorCodeEnumNotAcceptable       AnalyticsLogFlowDefaultApplicationJSONErrorCodeEnum = "NotAcceptable"
	AnalyticsLogFlowDefaultApplicationJSONErrorCodeEnumNotFound            AnalyticsLogFlowDefaultApplicationJSONErrorCodeEnum = "NotFound"
	AnalyticsLogFlowDefaultApplicationJSONErrorCodeEnumInternalServerError AnalyticsLogFlowDefaultApplicationJSONErrorCodeEnum = "InternalServerError"
	AnalyticsLogFlowDefaultApplicationJSONErrorCodeEnumUnauthorized        AnalyticsLogFlowDefaultApplicationJSONErrorCodeEnum = "Unauthorized"
	AnalyticsLogFlowDefaultApplicationJSONErrorCodeEnumTooManyRequests     AnalyticsLogFlowDefaultApplicationJSONErrorCodeEnum = "TooManyRequests"
)

func (e *AnalyticsLogFlowDefaultApplicationJSONErrorCodeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "BadRequest":
		fallthrough
	case "Conflict":
		fallthrough
	case "NotAcceptable":
		fallthrough
	case "NotFound":
		fallthrough
	case "InternalServerError":
		fallthrough
	case "Unauthorized":
		fallthrough
	case "TooManyRequests":
		*e = AnalyticsLogFlowDefaultApplicationJSONErrorCodeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for AnalyticsLogFlowDefaultApplicationJSONErrorCodeEnum: %s", s)
	}
}

type AnalyticsLogFlowDefaultApplicationJSONError struct {
	Code    AnalyticsLogFlowDefaultApplicationJSONErrorCodeEnum `json:"code"`
	Message string                                              `json:"message"`
}

// AnalyticsLogFlowDefaultApplicationJSON - Error code with reason
type AnalyticsLogFlowDefaultApplicationJSON struct {
	Error AnalyticsLogFlowDefaultApplicationJSONError `json:"error"`
}

// AnalyticsLogFlow200ApplicationJSONLogsDevice - Device characteristics.
type AnalyticsLogFlow200ApplicationJSONLogsDevice struct {
	// The app's build number, e.g. 42.
	//
	AppBuild string `json:"app_build"`
	// The bundle identifier, package identifier, or namespace, depending on what the individual plattforms use,  .e.g com.microsoft.example.
	//
	AppNamespace *string `json:"app_namespace,omitempty"`
	// Application version name, e.g. 1.1.0
	//
	AppVersion string `json:"app_version"`
	// Carrier country code (for mobile devices).
	//
	CarrierCode *string `json:"carrier_code,omitempty"`
	// Carrier country.
	//
	CarrierCountry *string `json:"carrier_country,omitempty"`
	// Carrier name (for mobile devices).
	//
	CarrierName *string `json:"carrier_name,omitempty"`
	// Identifier of environment that current application release belongs to, deployment key then maps to environment like Production, Staging.
	//
	LiveUpdateDeploymentKey *string `json:"live_update_deployment_key,omitempty"`
	// Hash of all files (ReactNative or Cordova) deployed to device via LiveUpdate beacon. Helps identify the Release version on device or need to download updates in future.
	//
	LiveUpdatePackageHash *string `json:"live_update_package_hash,omitempty"`
	// Label that is used to identify application code 'version' released via Live Update beacon running on device
	//
	LiveUpdateReleaseLabel *string `json:"live_update_release_label,omitempty"`
	// Language code (example: en_US).
	//
	Locale string `json:"locale"`
	// Device model (example: iPad2,3).
	//
	Model *string `json:"model,omitempty"`
	// Device manufacturer (example: HTC).
	//
	OemName *string `json:"oem_name,omitempty"`
	// API level when applicable like in Android (example: 15).
	//
	OsAPILevel *int64 `json:"os_api_level,omitempty"`
	// OS build code (example: LMY47X).
	//
	OsBuild *string `json:"os_build,omitempty"`
	// OS name (example: iOS). The following OS names are standardized (non-exclusive): Android, iOS, macOS, tvOS, Windows.
	//
	OsName string `json:"os_name"`
	// OS version (example: 9.3.0).
	//
	OsVersion string `json:"os_version"`
	// Screen size of the device in pixels (example: 640x480).
	//
	ScreenSize *string `json:"screen_size,omitempty"`
	// Name of the SDK. Consists of the name of the SDK and the platform, e.g. "appcenter.ios", "hockeysdk.android".
	//
	SDKName string `json:"sdk_name"`
	// Version of the SDK in semver format, e.g. "1.2.0" or "0.12.3-alpha.1".
	//
	SDKVersion string `json:"sdk_version"`
	// The offset in minutes from UTC for the device time zone, including daylight savings time.
	//
	TimeZoneOffset int64 `json:"time_zone_offset"`
	// Version of the wrapper technology framework (Xamarin runtime version or ReactNative or Cordova etc...). See wrapper_sdk_name to see if this version refers to Xamarin or ReactNative or other.
	//
	WrapperRuntimeVersion *string `json:"wrapper_runtime_version,omitempty"`
	// Name of the wrapper SDK. Consists of the name of the SDK and the wrapper platform, e.g. "appcenter.xamarin", "hockeysdk.cordova".
	//
	WrapperSDKName *string `json:"wrapper_sdk_name,omitempty"`
	// Version of the wrapper SDK in semver format. When the SDK is embedding another base SDK (for example Xamarin.Android wraps Android), the Xamarin specific version is populated into this field while sdkVersion refers to the original Android SDK.
	//
	WrapperSDKVersion *string `json:"wrapper_sdk_version,omitempty"`
}

// AnalyticsLogFlow200ApplicationJSONLogsTypeEnum - Log type.
type AnalyticsLogFlow200ApplicationJSONLogsTypeEnum string

const (
	AnalyticsLogFlow200ApplicationJSONLogsTypeEnumEvent            AnalyticsLogFlow200ApplicationJSONLogsTypeEnum = "event"
	AnalyticsLogFlow200ApplicationJSONLogsTypeEnumPage             AnalyticsLogFlow200ApplicationJSONLogsTypeEnum = "page"
	AnalyticsLogFlow200ApplicationJSONLogsTypeEnumStartSession     AnalyticsLogFlow200ApplicationJSONLogsTypeEnum = "start_session"
	AnalyticsLogFlow200ApplicationJSONLogsTypeEnumError            AnalyticsLogFlow200ApplicationJSONLogsTypeEnum = "error"
	AnalyticsLogFlow200ApplicationJSONLogsTypeEnumStartService     AnalyticsLogFlow200ApplicationJSONLogsTypeEnum = "start_service"
	AnalyticsLogFlow200ApplicationJSONLogsTypeEnumCustomProperties AnalyticsLogFlow200ApplicationJSONLogsTypeEnum = "custom_properties"
)

func (e *AnalyticsLogFlow200ApplicationJSONLogsTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "event":
		fallthrough
	case "page":
		fallthrough
	case "start_session":
		fallthrough
	case "error":
		fallthrough
	case "start_service":
		fallthrough
	case "custom_properties":
		*e = AnalyticsLogFlow200ApplicationJSONLogsTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for AnalyticsLogFlow200ApplicationJSONLogsTypeEnum: %s", s)
	}
}

type AnalyticsLogFlow200ApplicationJSONLogs struct {
	// Device characteristics.
	Device AnalyticsLogFlow200ApplicationJSONLogsDevice `json:"device"`
	// Install ID.
	//
	InstallID string `json:"install_id"`
	// Log creation timestamp.
	//
	Timestamp time.Time `json:"timestamp"`
	// Log type.
	//
	Type AnalyticsLogFlow200ApplicationJSONLogsTypeEnum `json:"type"`
}

// AnalyticsLogFlow200ApplicationJSON - List of logs for the requested time range.
type AnalyticsLogFlow200ApplicationJSON struct {
	// indicates if the number of available logs are more than the max allowed return limit(100).
	ExceededMaxLimit *bool `json:"exceeded_max_limit,omitempty"`
	// the timestamp of the last log received. This value can be used as the start time parameter in the consecutive API call.
	LastReceivedLogTimestamp *time.Time `json:"last_received_log_timestamp,omitempty"`
	// the list of logs
	Logs []AnalyticsLogFlow200ApplicationJSONLogs `json:"logs"`
}

type AnalyticsLogFlowResponse struct {
	// List of logs for the requested time range.
	AnalyticsLogFlow200ApplicationJSONObject *AnalyticsLogFlow200ApplicationJSON
	// Error code with reason
	AnalyticsLogFlowDefaultApplicationJSONObject *AnalyticsLogFlowDefaultApplicationJSON
	ContentType                                  string
	StatusCode                                   int
	RawResponse                                  *http.Response
}
