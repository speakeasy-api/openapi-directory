"use strict";
/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DatabaseEntity = exports.DatabaseEntityTreeEnum = exports.DatabaseEntityEntityTypeEnum = void 0;
var utils_1 = require("../../../internal/utils");
var entitymapping_1 = require("./entitymapping");
var functionentity_1 = require("./functionentity");
var packageentity_1 = require("./packageentity");
var schemaentity_1 = require("./schemaentity");
var sequenceentity_1 = require("./sequenceentity");
var storedprocedureentity_1 = require("./storedprocedureentity");
var synonymentity_1 = require("./synonymentity");
var tableentity_1 = require("./tableentity");
var viewentity_1 = require("./viewentity");
var class_transformer_1 = require("class-transformer");
/**
 * The type of the database entity (table, view, index, ...).
 */
var DatabaseEntityEntityTypeEnum;
(function (DatabaseEntityEntityTypeEnum) {
    DatabaseEntityEntityTypeEnum["DatabaseEntityTypeUnspecified"] = "DATABASE_ENTITY_TYPE_UNSPECIFIED";
    DatabaseEntityEntityTypeEnum["DatabaseEntityTypeSchema"] = "DATABASE_ENTITY_TYPE_SCHEMA";
    DatabaseEntityEntityTypeEnum["DatabaseEntityTypeTable"] = "DATABASE_ENTITY_TYPE_TABLE";
    DatabaseEntityEntityTypeEnum["DatabaseEntityTypeColumn"] = "DATABASE_ENTITY_TYPE_COLUMN";
    DatabaseEntityEntityTypeEnum["DatabaseEntityTypeConstraint"] = "DATABASE_ENTITY_TYPE_CONSTRAINT";
    DatabaseEntityEntityTypeEnum["DatabaseEntityTypeIndex"] = "DATABASE_ENTITY_TYPE_INDEX";
    DatabaseEntityEntityTypeEnum["DatabaseEntityTypeTrigger"] = "DATABASE_ENTITY_TYPE_TRIGGER";
    DatabaseEntityEntityTypeEnum["DatabaseEntityTypeView"] = "DATABASE_ENTITY_TYPE_VIEW";
    DatabaseEntityEntityTypeEnum["DatabaseEntityTypeSequence"] = "DATABASE_ENTITY_TYPE_SEQUENCE";
    DatabaseEntityEntityTypeEnum["DatabaseEntityTypeStoredProcedure"] = "DATABASE_ENTITY_TYPE_STORED_PROCEDURE";
    DatabaseEntityEntityTypeEnum["DatabaseEntityTypeFunction"] = "DATABASE_ENTITY_TYPE_FUNCTION";
    DatabaseEntityEntityTypeEnum["DatabaseEntityTypeSynonym"] = "DATABASE_ENTITY_TYPE_SYNONYM";
    DatabaseEntityEntityTypeEnum["DatabaseEntityTypeDatabasePackage"] = "DATABASE_ENTITY_TYPE_DATABASE_PACKAGE";
    DatabaseEntityEntityTypeEnum["DatabaseEntityTypeUdt"] = "DATABASE_ENTITY_TYPE_UDT";
    DatabaseEntityEntityTypeEnum["DatabaseEntityTypeMaterialView"] = "DATABASE_ENTITY_TYPE_MATERIAL_VIEW";
    DatabaseEntityEntityTypeEnum["DatabaseEntityTypeDatabase"] = "DATABASE_ENTITY_TYPE_DATABASE";
})(DatabaseEntityEntityTypeEnum = exports.DatabaseEntityEntityTypeEnum || (exports.DatabaseEntityEntityTypeEnum = {}));
/**
 * The type of tree the entity belongs to.
 */
var DatabaseEntityTreeEnum;
(function (DatabaseEntityTreeEnum) {
    DatabaseEntityTreeEnum["TreeTypeUnspecified"] = "TREE_TYPE_UNSPECIFIED";
    DatabaseEntityTreeEnum["Source"] = "SOURCE";
    DatabaseEntityTreeEnum["Draft"] = "DRAFT";
    DatabaseEntityTreeEnum["Destination"] = "DESTINATION";
})(DatabaseEntityTreeEnum = exports.DatabaseEntityTreeEnum || (exports.DatabaseEntityTreeEnum = {}));
/**
 * The base entity type for all the database related entities. The message contains the entity name, the name of its parent, the entity type, and the specific details per entity type.
 */
var DatabaseEntity = /** @class */ (function (_super) {
    __extends(DatabaseEntity, _super);
    function DatabaseEntity() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "databaseFunction" }),
        (0, class_transformer_1.Type)(function () { return functionentity_1.FunctionEntity; }),
        __metadata("design:type", functionentity_1.FunctionEntity)
    ], DatabaseEntity.prototype, "databaseFunction", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "databasePackage" }),
        (0, class_transformer_1.Type)(function () { return packageentity_1.PackageEntity; }),
        __metadata("design:type", packageentity_1.PackageEntity)
    ], DatabaseEntity.prototype, "databasePackage", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "entityType" }),
        __metadata("design:type", String)
    ], DatabaseEntity.prototype, "entityType", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({ elemType: entitymapping_1.EntityMapping }),
        (0, class_transformer_1.Expose)({ name: "mappings" }),
        (0, class_transformer_1.Type)(function () { return entitymapping_1.EntityMapping; }),
        __metadata("design:type", Array)
    ], DatabaseEntity.prototype, "mappings", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "parentEntity" }),
        __metadata("design:type", String)
    ], DatabaseEntity.prototype, "parentEntity", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "schema" }),
        (0, class_transformer_1.Type)(function () { return schemaentity_1.SchemaEntity; }),
        __metadata("design:type", schemaentity_1.SchemaEntity)
    ], DatabaseEntity.prototype, "schema", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "sequence" }),
        (0, class_transformer_1.Type)(function () { return sequenceentity_1.SequenceEntity; }),
        __metadata("design:type", sequenceentity_1.SequenceEntity)
    ], DatabaseEntity.prototype, "sequence", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "shortName" }),
        __metadata("design:type", String)
    ], DatabaseEntity.prototype, "shortName", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "storedProcedure" }),
        (0, class_transformer_1.Type)(function () { return storedprocedureentity_1.StoredProcedureEntity; }),
        __metadata("design:type", storedprocedureentity_1.StoredProcedureEntity)
    ], DatabaseEntity.prototype, "storedProcedure", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "synonym" }),
        (0, class_transformer_1.Type)(function () { return synonymentity_1.SynonymEntity; }),
        __metadata("design:type", synonymentity_1.SynonymEntity)
    ], DatabaseEntity.prototype, "synonym", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "table" }),
        (0, class_transformer_1.Type)(function () { return tableentity_1.TableEntity; }),
        __metadata("design:type", tableentity_1.TableEntity)
    ], DatabaseEntity.prototype, "table", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "tree" }),
        __metadata("design:type", String)
    ], DatabaseEntity.prototype, "tree", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "view" }),
        (0, class_transformer_1.Type)(function () { return viewentity_1.ViewEntity; }),
        __metadata("design:type", viewentity_1.ViewEntity)
    ], DatabaseEntity.prototype, "view", void 0);
    return DatabaseEntity;
}(utils_1.SpeakeasyBase));
exports.DatabaseEntity = DatabaseEntity;
