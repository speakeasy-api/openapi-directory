/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * CacheSettings - &lt;p&gt;Describes the cache settings of an Amazon Lightsail content delivery network (CDN) distribution.&lt;/p&gt; &lt;p&gt;These settings apply only to your distribution's &lt;code&gt;cacheBehaviors&lt;/code&gt; (including the &lt;code&gt;defaultCacheBehavior&lt;/code&gt;) that have a &lt;code&gt;behavior&lt;/code&gt; of &lt;code&gt;cache&lt;/code&gt;.&lt;/p&gt;
 */
public class CacheSettings {
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("allowedHTTPMethods")
    public String allowedHTTPMethods;

    public CacheSettings withAllowedHTTPMethods(String allowedHTTPMethods) {
        this.allowedHTTPMethods = allowedHTTPMethods;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("cachedHTTPMethods")
    public String cachedHTTPMethods;

    public CacheSettings withCachedHTTPMethods(String cachedHTTPMethods) {
        this.cachedHTTPMethods = cachedHTTPMethods;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("defaultTTL")
    public Long defaultTTL;

    public CacheSettings withDefaultTTL(Long defaultTTL) {
        this.defaultTTL = defaultTTL;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("forwardedCookies")
    public CookieObject forwardedCookies;

    public CacheSettings withForwardedCookies(CookieObject forwardedCookies) {
        this.forwardedCookies = forwardedCookies;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("forwardedHeaders")
    public HeaderObject forwardedHeaders;

    public CacheSettings withForwardedHeaders(HeaderObject forwardedHeaders) {
        this.forwardedHeaders = forwardedHeaders;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("forwardedQueryStrings")
    public QueryStringObject forwardedQueryStrings;

    public CacheSettings withForwardedQueryStrings(QueryStringObject forwardedQueryStrings) {
        this.forwardedQueryStrings = forwardedQueryStrings;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("maximumTTL")
    public Long maximumTTL;

    public CacheSettings withMaximumTTL(Long maximumTTL) {
        this.maximumTTL = maximumTTL;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("minimumTTL")
    public Long minimumTTL;

    public CacheSettings withMinimumTTL(Long minimumTTL) {
        this.minimumTTL = minimumTTL;
        return this;
    }
    
    public CacheSettings(){}
}
