"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class AccountingCodes:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def delete_accounting_code(self, request: operations.DELETEAccountingCodeRequest) -> operations.DELETEAccountingCodeResponse:
        r"""Delete an accounting code
        This reference describes how to delete an accounting code through the REST API.
        ## Prerequisites
        If you have Zuora Finance enabled on your tenant, then you must have the Delete Unused Accounting Code permission.
        ## Limitations
        You can only delete accounting codes that have never been associated with any transactions. An accounting code must be deactivated before you can delete it.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.DELETEAccountingCodeRequest, base_url, '/v1/accounting-codes/{ac-id}', request)
        
        headers = utils.get_headers(request)
        
        client = self._client
        
        http_res = client.request('DELETE', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DELETEAccountingCodeResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json; charset=utf-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.CommonResponseType])
                res.common_response_type = out

        return res

    def get_accounting_code(self, request: operations.GETAccountingCodeRequest) -> operations.GETAccountingCodeResponse:
        r"""Retrieve an accounting code
        This reference describes how to query an accounting code through the REST API.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GETAccountingCodeRequest, base_url, '/v1/accounting-codes/{ac-id}', request)
        
        headers = utils.get_headers(request)
        
        client = self._client
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GETAccountingCodeResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json; charset=utf-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GETAccountingCodeItemType])
                res.get_accounting_code_item_type = out

        return res

    def get_all_accounting_codes(self, request: operations.GETAllAccountingCodesRequest) -> operations.GETAllAccountingCodesResponse:
        r"""List all accounting codes
        This reference describes how to query all accounting codes in your chart of accounts through the REST API.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v1/accounting-codes'
        
        headers = utils.get_headers(request)
        query_params = utils.get_query_params(operations.GETAllAccountingCodesRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GETAllAccountingCodesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json; charset=utf-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GETAccountingCodesType])
                res.get_accounting_codes_type = out

        return res

    def post_accounting_code(self, request: operations.POSTAccountingCodeRequest) -> operations.POSTAccountingCodeResponse:
        r"""Create an accounting code
        This reference describes how to create a new accounting code through the REST API. 
        The accounting code will be active as soon as it has been created.
        
        ## Prerequisites
          If you have Zuora Finance enabled on your tenant, you must have the  Configure Accounting Codes permission.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v1/accounting-codes'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "post_accounting_code_type", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.POSTAccountingCodeResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json; charset=utf-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.POSTAccountingCodeResponseType])
                res.post_accounting_code_response_type = out

        return res

    def put_accounting_code(self, request: operations.PUTAccountingCodeRequest) -> operations.PUTAccountingCodeResponse:
        r"""Update an accounting code
        This reference describes how to update an existing accounting code through the REST API.
        ## Prerequisites
          If you have Zuora Finance enabled on your tenant, you must have the  Manage Accounting Code permission. 
        ## Limitations
        You can only update accounting codes that are not already associated with any transactions.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.PUTAccountingCodeRequest, base_url, '/v1/accounting-codes/{ac-id}', request)
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "put_accounting_code_type", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PUTAccountingCodeResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json; charset=utf-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.CommonResponseType])
                res.common_response_type = out

        return res

    def put_activate_accounting_code(self, request: operations.PUTActivateAccountingCodeRequest) -> operations.PUTActivateAccountingCodeResponse:
        r"""Activate an accounting code
        This reference describes how to activate an accounting code through the REST API.
        
        Prerequisites
        -------------
        If you have Zuora Finance enabled on your tenant, you must have the Manage Accounting Code permission.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.PUTActivateAccountingCodeRequest, base_url, '/v1/accounting-codes/{ac-id}/activate', request)
        
        headers = utils.get_headers(request)
        
        client = self._client
        
        http_res = client.request('PUT', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PUTActivateAccountingCodeResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json; charset=utf-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.CommonResponseType])
                res.common_response_type = out

        return res

    def put_deactivate_accounting_code(self, request: operations.PUTDeactivateAccountingCodeRequest) -> operations.PUTDeactivateAccountingCodeResponse:
        r"""Deactivate an accounting code
        This reference describes how to deactivate an accounting code through the REST API.
        
        ## Prerequisites
        If you have Zuora Finance enabled on your tenant, you must have the Manage Accounting Code permission.
        ## Limitations
        You can only deactivate accounting codes that are not associated with any transactions. 
        You cannot disable accounting codes of type AccountsReceivable.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.PUTDeactivateAccountingCodeRequest, base_url, '/v1/accounting-codes/{ac-id}/deactivate', request)
        
        headers = utils.get_headers(request)
        
        client = self._client
        
        http_res = client.request('PUT', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PUTDeactivateAccountingCodeResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json; charset=utf-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.CommonResponseType])
                res.common_response_type = out

        return res

    