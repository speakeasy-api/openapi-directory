<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Shared;


/**
 * EkmConnectionInput - An EkmConnection represents an individual EKM connection. It can be used for creating CryptoKeys and CryptoKeyVersions with a ProtectionLevel of EXTERNAL_VPC, as well as performing cryptographic operations using keys created within the EkmConnection.
 * 
 * @package OpenAPI\OpenAPI\Models\Shared
 * @access public
 */
class EkmConnectionInput
{
    /**
     * Optional. Identifies the EKM Crypto Space that this EkmConnection maps to. Note: This field is required if KeyManagementMode is CLOUD_KMS.
     * 
     * @var ?string $cryptoSpacePath
     */
	#[\JMS\Serializer\Annotation\SerializedName('cryptoSpacePath')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $cryptoSpacePath = null;
    
    /**
     * Optional. Etag of the currently stored EkmConnection.
     * 
     * @var ?string $etag
     */
	#[\JMS\Serializer\Annotation\SerializedName('etag')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $etag = null;
    
    /**
     * Optional. Describes who can perform control plane operations on the EKM. If unset, this defaults to MANUAL.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\EkmConnectionKeyManagementModeEnum $keyManagementMode
     */
	#[\JMS\Serializer\Annotation\SerializedName('keyManagementMode')]
    #[\JMS\Serializer\Annotation\Type('enum<OpenAPI\OpenAPI\Models\Shared\EkmConnectionKeyManagementModeEnum>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?EkmConnectionKeyManagementModeEnum $keyManagementMode = null;
    
    /**
     * A list of ServiceResolvers where the EKM can be reached. There should be one ServiceResolver per EKM replica. Currently, only a single ServiceResolver is supported.
     * 
     * @var ?array<\OpenAPI\OpenAPI\Models\Shared\ServiceResolverInput> $serviceResolvers
     */
	#[\JMS\Serializer\Annotation\SerializedName('serviceResolvers')]
    #[\JMS\Serializer\Annotation\Type('array<OpenAPI\OpenAPI\Models\Shared\ServiceResolverInput>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $serviceResolvers = null;
    
	public function __construct()
	{
		$this->cryptoSpacePath = null;
		$this->etag = null;
		$this->keyManagementMode = null;
		$this->serviceResolvers = null;
	}
}
