// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// RevokeCertificateXAmzTargetEnum
type RevokeCertificateXAmzTargetEnum string

const (
	RevokeCertificateXAmzTargetEnumAcmPrivateCaRevokeCertificate RevokeCertificateXAmzTargetEnum = "ACMPrivateCA.RevokeCertificate"
)

func (e *RevokeCertificateXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "ACMPrivateCA.RevokeCertificate":
		*e = RevokeCertificateXAmzTargetEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for RevokeCertificateXAmzTargetEnum: %s", s)
	}
}

type RevokeCertificateHeaders struct {
	XAmzAlgorithm     *string                         `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string                         `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string                         `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string                         `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string                         `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string                         `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string                         `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget        RevokeCertificateXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type RevokeCertificateRequest struct {
	Headers RevokeCertificateHeaders
	Request shared.RevokeCertificateRequest `request:"mediaType=application/json"`
}

type RevokeCertificateResponse struct {
	// ConcurrentModificationException
	ConcurrentModificationException interface{}
	ContentType                     string
	// InvalidArnException
	InvalidArnException interface{}
	// InvalidRequestException
	InvalidRequestException interface{}
	// InvalidStateException
	InvalidStateException interface{}
	// LimitExceededException
	LimitExceededException interface{}
	// RequestAlreadyProcessedException
	RequestAlreadyProcessedException interface{}
	// RequestFailedException
	RequestFailedException interface{}
	// RequestInProgressException
	RequestInProgressException interface{}
	// ResourceNotFoundException
	ResourceNotFoundException interface{}
	StatusCode                int
	RawResponse               *http.Response
}
