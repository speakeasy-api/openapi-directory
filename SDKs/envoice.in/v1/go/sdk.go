// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package sdk

import (
	"net/http"
	"openapi/pkg/utils"
	"time"
)

// ServerList contains the list of servers available to the SDK
var ServerList = []string{
	"https://www.envoice.in",
}

// HTTPClient provides an interface for suplying the SDK with a custom HTTP client
type HTTPClient interface {
	Do(req *http.Request) (*http.Response, error)
}

// String provides a helper function to return a pointer to a string
func String(s string) *string { return &s }

// Bool provides a helper function to return a pointer to a bool
func Bool(b bool) *bool { return &b }

// Int provides a helper function to return a pointer to an int
func Int(i int) *int { return &i }

// Int64 provides a helper function to return a pointer to an int64
func Int64(i int64) *int64 { return &i }

// Float32 provides a helper function to return a pointer to a float32
func Float32(f float32) *float32 { return &f }

// Float64 provides a helper function to return a pointer to a float64
func Float64(f float64) *float64 { return &f }

// SDK - [![Run in Postman](https://run.pstmn.io/button.svg)](https://app.getpostman.com/run-collection/80638214aa04722c9203)
// <span style='margin-left: 0.5em;'>or</span>
// <a href='https://documenter.getpostman.com/view/3559821/TVeqcn2L' class='openapi-button' _ngcontent-c6>View Postman docs</a>
//
// # Quickstart
//
// Visit [github](https://github.com/EmitKnowledge/Envoice) to view the quickstart tutorial.
//
// <div class='postman-tutorial'>
//
// # Tutorial for running the API in postman
//
// Click on ""Run in Postman"" button
// <br /><br />
// ![postman - tutorial - 1](/Assets/images/api/postman-tutorial/postman-tutorial-1.png)
//
//	---
//
// A new page will open.
// Click the ""Postman for windows"" to run postman as a desktop app.
// Make sure you have already [installed](https://www.getpostman.com/docs/postman/launching_postman/installation_and_updates) Postman.
// <br /><br />
// ![postman - tutorial - 2](/Assets/images/api/postman-tutorial/postman-tutorial-2.png)
//
//	---
//
// In chrome an alert might show up to set a default app for opening postman links. Click on ""Open Postman"".
// <br /><br />
// ![postman - tutorial - 3](/Assets/images/api/postman-tutorial/postman-tutorial-3.png)
//
//	---
//
// The OpenAPI specification will be imported in Postman as a new collection named ""Envoice api""
// <br /><br />
// ![postman - tutorial - 4](/Assets/images/api/postman-tutorial/postman-tutorial-4.png)
//
//	---
//
// When testing be sure to check and modify the environment variables to suit your api key and secret. The domain is set to envoice's endpoint so you don't really need to change that.
// <sub>\*Eye button in top right corner </sub>
// <br /><br />
// ![postman - tutorial - 5](/Assets/images/api/postman-tutorial/postman-tutorial-5.png)
// <br /><br />
// ![postman - tutorial - 6](/Assets/images/api/postman-tutorial/postman-tutorial-6.png)
//
//	---
//
// You don't need to change the values of the header parameters, because they will be replaced automatically when you send a request with real values from the environment configured in the previous step.
// <br /><br />
// ![postman - tutorial - 7](/Assets/images/api/postman-tutorial/postman-tutorial-7.png)
//
//	---
//
// Modify the example data to suit your needs and send a request.
// <br /><br />
// ![postman - tutorial - 8](/Assets/images/api/postman-tutorial/postman-tutorial-8.png)
// </div>
//
// # Webhooks
//
// Webhooks allow you to build or set up Envoice Apps which subscribe to invoice activities.
// When one of those events is triggered, we'll send a HTTP POST payload to the webhook's configured URL.
// Webhooks can be used to update an external invoice data storage.
//
// In order to use webhooks visit [this link](/account/settings#api-tab) and add upto 10 webhook urls that will return status `200` in order to signal that the webhook is working.
// All nonworking webhooks will be ignored after a certain period of time and several retry attempts.
// If after several attempts the webhook starts to work, we will send you all activities, both past and present, in chronological order.
//
// The payload of the webhook is in format:
// ```
//
//	{
//	    Signature: ""sha256 string"",
//	    Timestamp: ""YYYY-MM-DDTHH:mm:ss.FFFFFFFZ"",
//	    Activity: {
//	        Message: "string",
//	        Link: "share url",
//	        Type: int,
//	        InvoiceNumber: "string",
//	        InvoiceId: int,
//	        OrderNumber: "string",
//	        OrderId: int,
//	        Id: int,
//	        CreatedOn: "YYYY-MM-DDTHH:mm:ss.FFFFFFFZ"
//	    }
//	}
//
// ```
type SDK struct {
	Client      *client
	Estimation  *estimation
	General     *general
	Invoice     *invoice
	Order       *order
	Payment     *payment
	PaymentLink *paymentLink
	Product     *product
	Tax         *tax
	WorkType    *workType

	// Non-idiomatic field names below are to namespace fields from the fields names above to avoid name conflicts
	_defaultClient  HTTPClient
	_securityClient HTTPClient

	_serverURL  string
	_language   string
	_sdkVersion string
	_genVersion string
}

type SDKOption func(*SDK)

// WithServerURL allows the overriding of the default server URL
func WithServerURL(serverURL string) SDKOption {
	return func(sdk *SDK) {
		sdk._serverURL = serverURL
	}
}

// WithTemplatedServerURL allows the overriding of the default server URL with a templated URL populated with the provided parameters
func WithTemplatedServerURL(serverURL string, params map[string]string) SDKOption {
	return func(sdk *SDK) {
		if params != nil {
			serverURL = utils.ReplaceParameters(serverURL, params)
		}

		sdk._serverURL = serverURL
	}
}

// WithClient allows the overriding of the default HTTP client used by the SDK
func WithClient(client HTTPClient) SDKOption {
	return func(sdk *SDK) {
		sdk._defaultClient = client
	}
}

// New creates a new instance of the SDK with the provided options
func New(opts ...SDKOption) *SDK {
	sdk := &SDK{
		_language:   "go",
		_sdkVersion: "0.0.1",
		_genVersion: "internal",
	}
	for _, opt := range opts {
		opt(sdk)
	}

	// Use WithClient to override the default client if you would like to customize the timeout
	if sdk._defaultClient == nil {
		sdk._defaultClient = &http.Client{Timeout: 60 * time.Second}
	}
	if sdk._securityClient == nil {
		sdk._securityClient = sdk._defaultClient
	}

	if sdk._serverURL == "" {
		sdk._serverURL = ServerList[0]
	}

	sdk.Client = newClient(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.Estimation = newEstimation(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.General = newGeneral(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.Invoice = newInvoice(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.Order = newOrder(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.Payment = newPayment(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.PaymentLink = newPaymentLink(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.Product = newProduct(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.Tax = newTax(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.WorkType = newWorkType(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	return sdk
}
