"use strict";
/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Finding = void 0;
var utils_1 = require("../../../internal/utils");
var assignee_1 = require("./assignee");
var changedby_1 = require("./changedby");
var definition_1 = require("./definition");
var findinginsertionpointenum_1 = require("./findinginsertionpointenum");
var findingseverityenum_1 = require("./findingseverityenum");
var findingstateenum_1 = require("./findingstateenum");
var methodenum_1 = require("./methodenum");
var reporter_1 = require("./reporter");
var requests_1 = require("./requests");
var targetsimple_1 = require("./targetsimple");
var class_transformer_1 = require("class-transformer");
/**
 * Event object.
 */
var Finding = /** @class */ (function (_super) {
    __extends(Finding, _super);
    function Finding() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "assignee" }),
        (0, class_transformer_1.Type)(function () { return assignee_1.Assignee; }),
        __metadata("design:type", assignee_1.Assignee)
    ], Finding.prototype, "assignee", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "changed" }),
        (0, class_transformer_1.Transform)(function (_a) {
            var value = _a.value;
            return new Date(value);
        }, { toClassOnly: true }),
        __metadata("design:type", Date)
    ], Finding.prototype, "changed", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "changed_by" }),
        (0, class_transformer_1.Type)(function () { return changedby_1.ChangedBy; }),
        __metadata("design:type", changedby_1.ChangedBy)
    ], Finding.prototype, "changedBy", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "comment" }),
        __metadata("design:type", String)
    ], Finding.prototype, "comment", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "cvss_score" }),
        __metadata("design:type", Number)
    ], Finding.prototype, "cvssScore", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "cvss_vector" }),
        __metadata("design:type", String)
    ], Finding.prototype, "cvssVector", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "definition" }),
        (0, class_transformer_1.Type)(function () { return definition_1.Definition; }),
        __metadata("design:type", definition_1.Definition)
    ], Finding.prototype, "definition", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "evidence" }),
        __metadata("design:type", String)
    ], Finding.prototype, "evidence", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "extra" }),
        __metadata("design:type", String)
    ], Finding.prototype, "extra", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "fix" }),
        __metadata("design:type", String)
    ], Finding.prototype, "fix", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "id" }),
        __metadata("design:type", String)
    ], Finding.prototype, "id", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "insertion_point" }),
        __metadata("design:type", String)
    ], Finding.prototype, "insertionPoint", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "labels" }),
        __metadata("design:type", Array)
    ], Finding.prototype, "labels", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "last_found" }),
        (0, class_transformer_1.Transform)(function (_a) {
            var value = _a.value;
            return new Date(value);
        }, { toClassOnly: true }),
        __metadata("design:type", Date)
    ], Finding.prototype, "lastFound", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "method" }),
        __metadata("design:type", String)
    ], Finding.prototype, "method", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "parameter" }),
        __metadata("design:type", String)
    ], Finding.prototype, "parameter", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "params" }),
        __metadata("design:type", String)
    ], Finding.prototype, "params", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "path" }),
        __metadata("design:type", String)
    ], Finding.prototype, "path", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "reporter" }),
        (0, class_transformer_1.Type)(function () { return reporter_1.Reporter; }),
        __metadata("design:type", reporter_1.Reporter)
    ], Finding.prototype, "reporter", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({ elemType: requests_1.Requests }),
        (0, class_transformer_1.Expose)({ name: "requests" }),
        (0, class_transformer_1.Type)(function () { return requests_1.Requests; }),
        __metadata("design:type", Array)
    ], Finding.prototype, "requests", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "scans" }),
        __metadata("design:type", Array)
    ], Finding.prototype, "scans", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "severity" }),
        __metadata("design:type", String)
    ], Finding.prototype, "severity", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "state" }),
        __metadata("design:type", String)
    ], Finding.prototype, "state", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "target" }),
        (0, class_transformer_1.Type)(function () { return targetsimple_1.TargetSimple; }),
        __metadata("design:type", targetsimple_1.TargetSimple)
    ], Finding.prototype, "target", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "url" }),
        __metadata("design:type", String)
    ], Finding.prototype, "url", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "value" }),
        __metadata("design:type", String)
    ], Finding.prototype, "value", void 0);
    return Finding;
}(utils_1.SpeakeasyBase));
exports.Finding = Finding;
