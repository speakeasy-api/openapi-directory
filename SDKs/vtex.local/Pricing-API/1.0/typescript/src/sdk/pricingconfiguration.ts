/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class PricingConfiguration {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Get Pricing Configuration
   *
   * @remarks
   * Retrieves Pricing Configuration.
   * ## Response body example
   *
   * ```json
   * {
   *     "hasMigrated": true,
   *     "migrationStatus": "Completed",
   *     "defaultMarkup": 100,
   *     "priceVariation": {
   *         "upperLimit": null,
   *         "lowerLimit": null
   *     },
   *     "minimumMarkups": {
   *         "1": 100,
   *         "2": 90
   *     },
   *     "tradePolicyConfigs": [],
   *     "sellersToOverride": [],
   *     "hasPriceInheritance": false,
   *     "priceInheritance": "never",
   *     "hasOptionalBasePrice": false,
   *     "blockAccount": false,
   *     "blockedRoutes": null,
   *     "priceTableSelectionStrategy": "first",
   *     "priceTableLimit": null
   * }
   * ```
   */
  getPricingConfig(
    req: operations.GetPricingConfigRequest,
    serverURL?: string,
    config?: AxiosRequestConfig
  ): Promise<operations.GetPricingConfigResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetPricingConfigRequest(req);
    }

    let baseURL: string = operations.GetPricingConfigServerList[0];
    if (serverURL) {
      baseURL = serverURL;
    }
    const url: string = baseURL.replace(/\/$/, "") + "/pricing/config";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };

    const r = client.request({
      url: url,
      method: "get",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetPricingConfigResponse =
        new operations.GetPricingConfigResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
          headers: utils.getHeadersFromResponse(httpRes.headers),
        });
      switch (true) {
        case httpRes?.status == 200:
          if (
            utils.matchContentType(
              contentType,
              `application/json; charset=utf-8`
            )
          ) {
            res.pricingConfiguration = utils.objectToClass(
              httpRes?.data,
              shared.PricingConfiguration
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get Pricing v2 Status
   *
   * @remarks
   * Retrieves Pricing v2 Status.
   * ## Response body example
   *
   * ```json
   * {
   *     "isActive": true,
   *     "hasMigrated": true
   * }
   * ```
   */
  getPricingv2Status(
    req: operations.GetPricingv2StatusRequest,
    serverURL?: string,
    config?: AxiosRequestConfig
  ): Promise<operations.GetPricingv2StatusResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetPricingv2StatusRequest(req);
    }

    let baseURL: string = operations.GetPricingv2StatusServerList[0];
    if (serverURL) {
      baseURL = serverURL;
    }
    const url: string = baseURL.replace(/\/$/, "") + "/pricing/migration";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };

    const r = client.request({
      url: url,
      method: "get",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetPricingv2StatusResponse =
        new operations.GetPricingv2StatusResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
          headers: utils.getHeadersFromResponse(httpRes.headers),
        });
      switch (true) {
        case httpRes?.status == 200:
          if (
            utils.matchContentType(
              contentType,
              `application/json; charset=utf-8`
            )
          ) {
            res.getPricingv2Status200ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.GetPricingv2Status200ApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }
}
